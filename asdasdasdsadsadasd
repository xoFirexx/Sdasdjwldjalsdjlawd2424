setTimeout(() => {

    let TimerTools = {
        HPTimer: 0,
        GaugeTimer: 0
    };

   function CheatInterval () {

        if (!client || !client.socket || client.socket.readyState !== 1) return;
        let myPlayer = world.fast_units[user.uid];
    
        if (myPlayer) {
    
            if (HackSettings.AutoSpike.enabled) {
                for (let e = 0, o = HackSettings.AutoSpike.preferences; e < o.length; e++) {
                    var i = o[e];
                    switch (i) {
                        case "Reidite Spike":
                            i = 213;
                            break;
                        case "Amethyst Spike":
                            i = 117;
                            break;
                        case "Diamond Spike":
                            i = 164;
                            break;
                        case "Gold Spike":
                            i = 163;
                            break;
                        case "Stone Spike":
                            i = 162;
                            break;
                        case "Wood Spike":
                            i = 154;
                            break;
                        case "Wood Wall":
                            i = 156;
                            break;
                        case "Nothing":
                            i = -1;
                    }
                    if (i !== -1 && user.inv.n[i]) {
                        var type = i;
                        break;
                    }
                }
                if (type) {
                    let pi2 = Math.PI * 2, realAngle = Math.floor((((myPlayer.angle + pi2) % pi2) * 255) / pi2);

                    switch (HackSettings.AutoSpike.mode) {
                        case false:
                                client.socket.send(JSON.stringify([102, type, realAngle, 0]))
                        break;

                        case true:
                            if(!window.HackSettings.AutoSpike.canSend) break;
                            for (let extra = 0; extra <= HackSettings.AutoSpike.extra; extra += 1) {
                                if (extra <= 2) {
                                    client.socket.send(JSON.stringify([102, type, realAngle, 0]));
                                }
                                client.socket.send(JSON.stringify([102, type, (extra + realAngle) % 255, 0]))
                                client.socket.send(JSON.stringify([102, type, (realAngle - extra + 255) % 255, 0]))
                            }
                            window.HackSettings.AutoSpike.lastSend = performance.now();
                        break;
                    }
        
                }
            }
        }
    }
    window.FnUtils = {
        isPlayerHoldingWeapon: (a, b) => {
            switch(a.right)  {
                case 34:
                case 18:
                case 33:
                case 15:
                case 14:
                case 13:
                case 12:
                case 16:
                case 17:
                    return 2; //spear
                case 57:
                case 5:
                case 6:
                case 30:
                case 62:
                case 9:
                case 0:
                case 63:
                case 19:
                    return 1; //sword
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 70:
                case 69:
                    return 3; //bow
                case 45:
                    if (b) return 4; //super hammer
                case -1:
                    if (b) return 5; //holds nothing
    
            };
            return 0;
        },
        /*
        InitializeGUI: () => {
            let gui = new guify({
                title: "🐉",
                theme: {
                    name: "🐉",
                    colors: {
                        panelBackground: "rgb(0,0,0)",
                        componentBackground: "rgb(42, 10, 87)",
                        componentForeground: "rgb(131, 96, 235)",
                        textPrimary: "rgb(102, 31, 143)",
                        textSecondary: "rgb(255, 255, 255)",
                        textHover: "rgb(102, 31, 143)"
                    },
                    font: {
                        fontFamily: "Baloo Paaji",
                        fontSize: "20px",
                        fontWeight: "1"
                    }
                },
                align: "right",
                width: "28%",
                barMode: "none",
                panelMode: "none",
                opacity: 1,
                open: false,
            });
            gui.Register({
                type: "folder",
                label: "Visuals",
                open: false,
            });
            gui.Register({
                type: "folder",
                label: "Misc",
                open: false,
            });
            gui.Register({
                type: "folder",
                label: "AutoSpike",
                open: false,
            });
    
    
            gui.Register([
                {
                    type: "button",
                    label: "Set AutoSpike Key",
                    action: (e) => {
                        FnUtils.controls.setKeyBind("AutoSpike");
                    },
                },
                {
                    type: "display",
                    label: "AutoSpike Key:",
                    object: HackSettings.AutoSpike,
                    property: "key",
                },
                {
                    type: "select",
                    label: "1",
                    object: HackSettings.AutoSpike.preferences,
                    property: "0",
                    options: [
                        "Reidite Spike",
                        "Amethyst Spike",
                        "Diamond Spike",
                        "Gold Spike",
                        "Stone Spike",
                        "Wood Spike",
                        "Wood Wall",
                        "Nothing",
                    ],
                    onChange: (e) => {
                        FnUtils.saveSettings();
                    },
                },
                {
                    type: "select",
                    label: "2",
                    object: HackSettings.AutoSpike.preferences,
                    property: "1",
                    options: [
                        "Reidite Spike",
                        "Amethyst Spike",
                        "Diamond Spike",
                        "Gold Spike",
                        "Stone Spike",
                        "Wood Spike",
                        "Wood Wall",
                        "Nothing",
                    ],
                    onChange: (e) => {
                        FnUtils.saveSettings();
                    },
                },
                {
                    type: "select",
                    label: "3",
                    object: HackSettings.AutoSpike.preferences,
                    property: "2",
                    options: [
                        "Reidite Spike",
                        "Amethyst Spike",
                        "Diamond Spike",
                        "Gold Spike",
                        "Stone Spike",
                        "Wood Spike",
                        "Wood Wall",
                        "Nothing",
                    ],
                    onChange: (e) => {
                        FnUtils.saveSettings();
                    },
                },
                {
                    type: "select",
                    label: "4",
                    object: HackSettings.AutoSpike.preferences,
                    property: "3",
                    options: [
                        "Reidite Spike",
                        "Amethyst Spike",
                        "Diamond Spike",
                        "Gold Spike",
                        "Stone Spike",
                        "Wood Spike",
                        "Wood Wall",
                        "Nothing",
                    ],
                    onChange: (e) => {
                        FnUtils.saveSettings();
                    },
                },
                {
                    type: "select",
                    label: "5",
                    object: HackSettings.AutoSpike.preferences,
                    property: "4",
                    options: [
                        "Reidite Spike",
                        "Amethyst Spike",
                        "Diamond Spike",
                        "Gold Spike",
                        "Stone Spike",
                        "Wood Spike",
                        "Wood Wall",
                        "Nothing",
                    ],
                    onChange: (e) => {
                        FnUtils.saveSettings();
                    },
                },
                {
                    type: "select",
                    label: "6",
                    object: HackSettings.AutoSpike.preferences,
                    property: "5",
                    options: [
                        "Reidite Spike",
                        "Amethyst Spike",
                        "Diamond Spike",
                        "Gold Spike",
                        "Stone Spike",
                        "Wood Spike",
                        "Wood Wall",
                        "Nothing",
                    ],
                    onChange: (e) => {
                        FnUtils.saveSettings();
                    },
                },
                {
                    type: "select",
                    label: "7",
                    object: HackSettings.AutoSpike.preferences,
                    property: "6",
                    options: [
                        "Reidite Spike",
                        "Amethyst Spike",
                        "Diamond Spike",
                        "Gold Spike",
                        "Stone Spike",
                        "Wood Spike",
                        "Wood Wall",
                        "Nothing",
                    ],
                    onChange: (e) => {
                        FnUtils.saveSettings();
                    },
                },
            ],
            {
                folder: "AutoSpike",
            });
            gui.Register([
                {
                    type: "checkbox",
                    label: "PlayerOnTop",
                    object: HackSettings.DrawPlayerOnTop,
                    property: "enabled",
                    onChange: (e) => {
                        FnUtils.saveSettings();
                    },
                },
                {
                    type: "checkbox",
                    label: "Timers",
                    object: HackSettings.Timer,
                    property: "enabled",
                    onChange: (e) => {
                        FnUtils.saveSettings();
                    },
                },
                {
                    type: "checkbox",
                    label: "ColoredSpikes",
                    object: HackSettings.ColoredSpikes,
                    property: "enabled",
                    onChange: (e) => {
                        FnUtils.saveSettings();
                    },
                },
                {
                    type: "checkbox",
                    label: "ListEnabledHacks",
                    object: HackSettings.ListEnabledHacks,
                    property: "enabled",
                    onChange: (e) => {
                        FnUtils.saveSettings();
                    },
                },
                {
                    type: "checkbox",
                    label: "DrawItemsOnChest",
                    object: HackSettings.DrawItemsOnChest,
                    property: "enabled",
                    onChange: (e) => {
                        FnUtils.saveSettings();
                    },
                },
                {
                    type: "checkbox",
                    label: "DrawBoxesOnTop",
                    object: HackSettings.DrawBoxesOnTop,
                    property: "enabled",
                    onChange: (e) => {
                        FnUtils.saveSettings();
                    },
                },
                {
                    type: "checkbox",
                    label: "DrawChestsOnTop",
                    object: HackSettings.ChestOnTop,
                    property: "enabled",
                    onChange: (e) => {
                    FnUtils.saveSettings();
                    },
                },
                {
                    type: "checkbox",
                    label: "DropOrDeadBox",
                    object: HackSettings.DropOrDeadBox,
                    property: "enabled",
                    onChange: (e) => {
                        FnUtils.saveSettings();
                    },
                },
                {
                    type: "checkbox",
                    label: "BuildingInfo",
                    object: HackSettings.BuildingInfo,
                    property: "enabled",
                    onChange: (e) => {
                        FnUtils.saveSettings();
                    },
                },
                {
                    type: "button",
                    label: "Set Xray Key",
                    action: e => {
                        FnUtils.controls.setKeyBind("Xray")
                    }
                }, {
                    type: "display",
                    label: "Xray Key:",
                    object: HackSettings.Xray,
                    property: "key"
                },
                {
                    type: "range",
                    label: "Xray Opacity",
                    min: 0,
                    max: 1,
                    step: .1,
                    object: HackSettings.Xray,
                    property: "opacity",
                    onChange: e => {
                        FnUtils.saveSettings()
                    }
                },
                {
                    type: "range",
                    label: "Zoom Range X",
                    min: 1,
                    max: 1000,
                    step: 10,
                    object: HackSettings.Zoom,
                    property: "xSlider",
                    onChange: e => {
                        FnUtils.saveSettings()
                    }
                },
                {
                    type: "range",
                    label: "Zoom Range Y",
                    min: 1,
                    max: 1000,
                    step: 10,
                    object: HackSettings.Zoom,
                    property: "ySlider",
                    onChange: e => {
                        FnUtils.saveSettings()
                    }
                },
            ],
            {
                folder: "Visuals",
            });
            gui.Register([
                {
                    type: "checkbox",
                    label: "AutoEatBands",
                    object: HackSettings.AutoBand,
                    property: "enabled",
                    onChange: (e) => {
                        FnUtils.saveSettings();
                    },
                },
                {
                    type: "checkbox",
                    label: "CipherMessage",
                    object: HackSettings.CipherMessage,
                    property: "enabled",
                    onChange: (e) => {
                        FnUtils.saveSettings();
                    },
                },
                {
                    type: "text",
                    label: "Cipher Key",
                    object: HackSettings.CipherMessage,
                    property: "cipherKey",
                    listenMode: 'input',
                    onChange: (data) => {
                        FnUtils.saveSettings();
                    }
                },
                {
                    type: "text",
                    label: "Cipher Prefix",
                    object: HackSettings.CipherMessage,
                    property: "prefix",
                    listenMode: 'input',
                    onChange: (data) => {
                        FnUtils.saveSettings();
                    }
                },
                {
                    type: "checkbox",
                    label: "AutoRespawn",
                    object: HackSettings.AutoRespawn,
                    property: "enabled",
                    onChange: (e) => {
                        FnUtils.saveSettings();
                    },
                },
                {
                    type: "button",
                    label: "Set DropSword Key",
                    action: (e) => {
                        FnUtils.controls.setKeyBind("DropSword");
                    },
                },
                {
                    type: "display",
                    label: "DropSword Key:",
                    object: HackSettings.DropSword,
                    property: "key",
                },
            ],
            {
                folder: "Misc",
            });
        },
        */
        saveSettings: () => {
            for (let e in HackSettings)
                localStorage.setItem(e + "Client", JSON.stringify(HackSettings[e]));
        },
        /*
        controls: null,
        controller: class {
            setKeyBind(e) {
                HackSettings[e].key = "Press Any Key";
                let o = 0;
                document.addEventListener("keydown", function i(t) {
                    o++,
                        o >= 1 &&
                        ("Escape" == t.code
                         ? (HackSettings[e].key = "NONE")
                         : (HackSettings[e].key = t.code),
                         document.removeEventListener("keydown", i),
                         FnUtils.saveSettings());
                });
            }
        },
        LoadHack: () => {
            
            (FnUtils.controls = new FnUtils.controller());
            
            let GGGGGGG = document.createElement("script");
            GGGGGGG.src = "https://unpkg.com/guify@0.12.0/lib/guify.min.js";
            (GGGGGGG.onload = function () {
                FnUtils.InitializeGUI();
            }),
            document.body.appendChild(GGGGGGG);
        
        },
        */
        checkAlly: (id) => {
            for (var i = 0; i < user.team.length; i++)
                if (user.team[i] == id) return 1;
            return 0
        },
        checkTotem: (id) => {
            if (user.team[0] === id) return 1;
            return 0;
        },
        updateAllys: () => {
            for (let e = 0; e < world.units[0].length; e++) {
                world.units[0][e].ally = user.id === world.units[0][e].pid || FnUtils.checkAlly(world.units[0][e].pid)
            }
            for (let e = 0; e < world.units[5].length; e++) {
                world.units[5][e].ally = user.id === world.units[5][e].pid || FnUtils.checkAlly(world.units[5][e].pid)
            }
            for (let e = 0; e < world.units[12].length; e++) {
                world.units[12][e].ally = user.id === world.units[12][e].pid || FnUtils.checkAlly(world.units[12][e].pid)
            }
            for (let e = 0; e < world.units[13].length; e++)  {
                world.units[13][e].ally = user.id === world.units[13][e].pid || FnUtils.checkAlly(world.units[13][e].pid)
            }
            for (let e = 0; e < world.units[14].length; e++) {
                world.units[14][e].ally = user.id === world.units[14][e].pid || FnUtils.checkAlly(world.units[14][e].pid)
            }
            for (let e = 0; e < world.units[20].length; e++) {
                world.units[20][e].ally = user.id === world.units[20][e].pid || FnUtils.checkAlly(world.units[20][e].pid)
            }
            for (let e = 0; e < world.units[52].length; e++) {
                world.units[52][e].ally = user.id === world.units[52][e].pid || FnUtils.checkAlly(world.units[52][e].pid)
            }
            for (let e = 0; e < world.units[45].length; e++) {
                world.units[45][e].ally = user.id === world.units[45][e].pid || FnUtils.checkAlly(world.units[45][e].pid)
            }
            for (let e = 0; e < world.units[46].length; e++) {
                world.units[46][e].ally = user.id === world.units[46][e].pid || FnUtils.checkAlly(world.units[46][e].pid)
            }
            for (let e = 0; e < world.units[47].length; e++) {
                world.units[47][e].ally = user.id === world.units[47][e].pid || FnUtils.checkAlly(world.units[47][e].pid)
            }
            for (let e = 0; e < world.units[48].length; e++) {
                world.units[48][e].ally = user.id === world.units[48][e].pid || FnUtils.checkAlly(world.units[48][e].pid)
            }
            for (let e = 0; e < world.units[49].length; e++) {
                world.units[49][e].ally = user.id === world.units[49][e].pid || FnUtils.checkAlly(world.units[49][e].pid)
            }
            for (let e = 0; e < world.units[53].length; e++) {
                world.units[53][e].ally = user.id === world.units[53][e].pid || FnUtils.checkAlly(world.units[53][e].pid)
            }
            for (let e = 0; e < world.units[10].length; e++) {
                world.units[10][e].ally = user.id === world.units[10][e].pid || FnUtils.checkAlly(world.units[10][e].pid)
            }
            for (let e = 0; e < world.units[15].length; e++) {
                world.units[15][e].ally = user.id === world.units[15][e].pid || FnUtils.checkAlly(world.units[15][e].pid)
            }
            for (let e = 0; e < world.units[16].length; e++) {
                world.units[16][e].ally = user.id === world.units[16][e].pid || FnUtils.checkAlly(world.units[16][e].pid)
            }
            for (let e = 0; e < world.units[17].length; e++) {
                world.units[17][e].ally = user.id === world.units[17][e].pid || FnUtils.checkAlly(world.units[17][e].pid)
            }
            for (let e = 0; e < world.units[21].length; e++) {
                world.units[21][e].ally = user.id === world.units[21][e].pid || FnUtils.checkAlly(world.units[21][e].pid)
            }
            for (let e = 0; e < world.units[51].length; e++) {
                world.units[51][e].ally = user.id === world.units[51][e].pid || FnUtils.checkAlly(world.units[51][e].pid)
            }
            for (let e = 0; e < world.units[11].length; e++) {
                world.units[11][e].ally = user.id === world.units[11][e].pid || FnUtils.checkAlly(world.units[11][e].pid)
            }
        }
    }

    window.debuggablePlayers = new Array(105);
    window.globalData = []

    const evelMasterUrl = "http://localhost:8083/"

    function EvelAccountsAPI () {
        this.initGoogleAPI = function () {
            window.google.accounts.id.initialize({
                client_id: `899812474760-jtf2jmdlv2mk8ngakc4201vlamp5jah3.apps.googleusercontent.com`,
                callback: this.googleAuthCallback,
            });
        }
        this.googleAuthCloseCallback = function () {
            console.log(`[Famishs/GoogleAPIv2] Auth closed`)
        }
        this.loginWithGoogle = function () {
            let data = Cookies.getJSON("g_state")

            if(data && data.i_l == 1) {
                const newData = {i_l: 0}

                Cookies.set("g_state", newData)
            }

            console.log(`[Famishs/GoogleAPIv2] Started Loginning process`)
        
            
            google.accounts.id.prompt()
        }
        this.googleAuthCallback = function () {
            const uToken = arguments[0].credential;
            window.userToken = uToken;
            window.onUserLogin()
            console.log(`[Famishs/GoogleAPIv2] Login success!`);
        }
    }

    const evelAccountsAPI = new EvelAccountsAPI();

    window.mobile = false;
    function RNG(seed) {
        this.m = 2147483648;
        this.a = 1103515245;
        this.c = 12345;
        this.state = seed ? seed : Math.floor(Math.random() * (this.m - 1));
    };
    RNG.prototype.random = function () {
        this.state = ((this.a * this.state) + this.c) % this.m;
        return this.state / this.m;
    };
    RNG.prototype.set_seed = function (seed) {
        this.state = seed;
    };
    RAND_SIZE = 10000;
    RANDOM = [];
    var rrr = new RNG;
    rrr.set_seed((new Date).getTime());
    for (var k = 0; k < RAND_SIZE; k++)
        RANDOM.push(rrr.random());
    let Utils = {
        open_in_new_tab: function (url) {
            var win = window.open(url, '_blank');
            win.focus();
        },
        open_in_new_box: function (url) {
            window.open(url, '_blank', 'location=yes,height=570,width=520,scrollbars=yes,status=yes');
        },
        compare_object: function (a, b) {
            for (var i in a) {
                if (a[i] != b[i])
                    return false;

            }
            return true;
        },
        compare_array: function (a, b) {
            if (a.length != b.length)
                return false;

            for (var i = 0; i < a.length; i++) {
                if (typeof a == 'object') {
                    if (!this.compare_object(a[i], b[i]))
                        return false;

                } else if (a[i] != b[i])
                    return false;

            }
            return true;
        },
        copy_vector: function (source, target) {
            target.x = source.x;
            target.y = source.y;
        },
        get_vector: function (v1, v2) {
            return {
                x: v1.x - v2.x,
                y: v1.y - v2.y
            };
        },
        mul_vector: function (v, mul) {
            v.x *= mul, v.y *= mul;
        },
        scalar_product: function (v1, v2) {
            return (v1.x * v2.x) + (v1.y * v2.y);
        },
        norm: function (v) {
            return Math.sqrt((v.x * v.x) + (v.y * v.y));
        },
        sign: function (a) {
            if (a < 0)
                return -1;
            else
                return 1;
        },
        cross_product: function (v1, v2) {
            return (v1.x * v2.y) - (v1.y * v2.x);
        },
        get_angle_2: function (ax, ay, bx, by) {
            var dy = by - ay;
            var dx = bx - ax;
            return Math.atan2(dy, dx);
        },
        get_angle: function (v1, v2) {
            return Math.acos(this.scalar_product(v1, v2) / (this.norm(v1) * this.norm(v2))) * this.sign(this.cross_product(v1, v2));
        },
        getURLData: function (_name) {
            _url = location.href;
            _name = _name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
            var regexS = ("[\\?&]" + _name) + "=([^&#]*)";
            var _regex = new RegExp(regexS);
            var results = _regex.exec(_url);
            return (results === null) ? null : results[1];
        },
        reduceAngle: function (a1, a2) {
            var PI2 = Math.PI * 2;
            a2 = ((a2 % PI2) + PI2) % PI2;
            if (Math.abs(a1 - a2) > Math.PI) {
                if (a1 > a2)
                    return a2 + PI2;
                else
                    return a2 - PI2;
            }
            return a2;
        },
        get_std_angle: function (o1, o2) {
            return this.get_angle({
                x: 1,
                y: 0
            }, this.get_vector(o1, o2));
        },
        dist: function (a, b) {
            return Math.sqrt(((b.x - a.x) * (b.x - a.x)) + ((b.y - a.y) * (b.y - a.y)));
        },
        build_vector: function (d, a) {
            return {
                x: Math.cos(a) * d,
                y: Math.sin(a) * d
            };
        },
        add_vector: function (source, target) {
            source.x += target.x;
            source.y += target.y;
        },
        sub_vector: function (source, target) {
            source.x -= target.x;
            source.y -= target.y;
        },
        translate_vector: function (v, x, y) {
            v.x += x;
            v.y += y;
        },
        translate_new_vector: function (v, x, y) {
            return {
                x: v.x + x,
                y: v.y + y
            };
        },
        move: function (o, d, a) {
            o.x += Math.cos(a) * d;
            o.y += Math.sin(a) * d;
        },
        middle: function (a, b) {
            return Math.floor((a - b) / 2);
        },
        middle_point: function (a, b) {
            return {
                x: (a.x + b.x) / 2,
                y: (a.y + b.y) / 2
            };
        },
        rand_sign: function () {
            return (Math.random() > 0.5) ? 1 : -1;
        },
        get_rand_pos_in_circle: function (x, y, d) {
            var sx = this.rand_sign();
            var sy = this.rand_sign();
            var a = (Math.random() * Math.PI) / 2;
            return {
                x: Math.floor(x + ((Math.cos(a) * sx) * d)),
                y: Math.floor(y + ((Math.sin(a) * sy) * d))
            };
        },
        Box: function (x, y, w, h) {
            this.x = x;
            this.y = y;
            this.w = w;
            this.h = h;
        },
        randomize_list: function (l) {
            a = [];
            a.push.apply(a, l);
            var ra = [];
            while (a.length > 0) {
                var r = Math.floor(Math.random() * a.length);
                ra.push(a[r]);
                a.splice(r, 1);
            }
            return ra;
        },
        restore_number: function (n) {
            return n;
        },
        simplify_number: function (n) {
            if (typeof n !== "number")
                return "0";
            else if (n >= 10000) {
                var log = Math.floor(Math.log10(n)) - 2;
                var decimal = Math.max(0, 3 - log);
                var s = Math.floor(n / 1000).toString();
                if (decimal) {
                    s += "." + ((n % 1000) / 1000).toString().substring(2).substring(0, decimal);
                    for (var i = s.length - 1, zero_counter = 0; i > 0; i--) {
                        if (s[i] != '0')
                            break;
                        else
                            zero_counter++;
                    }
                    s = s.substring(0, s.length - zero_counter);
                    if (s[s.length - 1] == '.')
                        s = s.substring(0, s.length - 1);

                }
                s += "k";
                return s;
            } else
                return n.toString();
        },
        ease_out_quad: function (t) {
            return t * (2 - t);
        },
        ease_out_cubic: function (t) {
            return (((--t) * t) * t) + 1;
        },
        ease_in_out_quad: function (t) {
            return (t < 0.5) ? ((2 * t) * t) : (-1 + ((4 - (2 * t)) * t));
        },
        ease_in_out_cubic: function (t) {
            return (t < 0.5) ? (((4 * t) * t) * t) : ((((t - 1) * ((2 * t) - 2)) * ((2 * t) - 2)) + 1);
        },
        ease_in_out_quart: function (t) {
            return (t < 0.5) ? ((((8 * t) * t) * t) * t) : (1 - ((((8 * (--t)) * t) * t) * t));
        },
        ease_out_quart: function (t) {
            return 1 - ((((--t) * t) * t) * t);
        },
        ease_out_quint: function (t) {
            return 1 + (((((--t) * t) * t) * t) * t);
        },
        LinearAnimation: function (o, v, max, min, max_speed, min_speed) {
            this.o = o;
            this.v = v;
            this.max = max;
            this.min = min;
            this.max_speed = max_speed;
            this.min_speed = min_speed;
            this.last = 0;
            this.update = function () {
                if (this.o) {
                    var v = this.v + (delta * this.max_speed);
                    if (v > this.max) {
                        this.v = this.max;
                        this.o = false;
                        return true;
                    } else
                        this.v = v;
                } else {
                    var v = this.v - (delta * this.min_speed);
                    if (v < this.min) {
                        this.v = this.min;
                        this.o = true;
                    } else
                        this.v = v;
                }
            };
            return false;
        },
        Ease: function (fun, ed, em, sx, x, ex) {
            this.fun = fun;
            this.ed = ed, this.em = em, this.sx = sx, this.x = x, this.ex = ex, this.restart = function () {
                this.x = this.sex;
                this.ed = 0;
            }, this.ease = function (x) {
                if (x !== this.ex) {
                    this.ex = x;
                    this.sx = this.x;
                    this.ed = 0;
                }
                if (this.ex !== this.x) {
                    this.ed += delta;
                    if (this.ed > this.em)
                        this.x = this.ex;
                    else {
                        var e = this.fun(this.ed / this.em);
                        this.x = this.sx + ((this.ex - this.sx) * e);
                    }
                }
            };
        },
        Ease2d: function (fun, ed, em, sx, sy, x, y, ex, ey) {
            this.fun = fun;
            this.ed = ed, this.em = em, this.sx = sx, this.sy = sy, this.x = x, this.y = y, this.ex = ex, this.ey = ey, this.ease = function (u) {
                if ((u.x != this.ex) || (u.y != this.ey)) {
                    this.ex = u.x;
                    this.ey = u.y;
                    this.sx = this.x;
                    this.sy = this.y;
                    this.ed = 0;
                }
                if ((this.ex != this.x) || (this.ey != this.y)) {
                    this.ed += delta;
                    if (this.ed > this.em) {
                        this.x = this.ex;
                        this.y = this.ey;
                    } else {
                        var e = this.fun(this.ed / this.em);
                        this.x = this.sx + ((this.ex - this.sx) * e);
                        this.y = this.sy + ((this.ey - this.sy) * e);
                    }
                }
            };
        },
        generate_token: function (len) {
            var token = "";
            for (var i = 0; i < len; i++) {
                token += String.fromCharCode(48 + Math.floor(Math.random() * 74));
            }
            return token;
        },
        gup: function (name, url) {
            if (!url)
                url = location.href;

            name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
            var regexS = ("[\\?&]" + name) + "=([^&#]*)";
            var regex = new RegExp(regexS);
            var results = regex.exec(url);
            return (results == null) ? null : results[1];
        },
        inside_box: function (p, box) {
            if ((((p.x >= box.x) && (p.x <= (box.x + box.w))) && (p.y >= box.y)) && (p.y <= (box.y + box.h)))
                return true;

            return false;
        },
        intersect_aabb: function (b1x1, b1x2, b1y1, b1y2, b2x1, b2x2, b2y1, b2y2) {
            if ((Math.max(b1x1, b2x1) < Math.min(b1x2, b2x2)) && (Math.max(b1y1, b2y1) < Math.min(b1y2, b2y2)))
                return 1;

            return 0;
        },
        lerp: function (p1, p2, w) {
            return ((1 - w) * p1) + (w * p2);
        },
        escape_html: function (unsafe) {
            return unsafe.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
        }
    };
    Math.sign = Math.sign || (function (n) {
        if (n === 0)
            return 0;
        else if (n > 0)
            return 1;
        else
            return -1;
    });
    Math.log10 = Math.log10 || (function (x) {
        return Math.log(x) / Math.LOG10;
    });

    (function (factory) {
        var registeredInModuleLoader = false;
        if ((typeof define === 'function') && define.amd) {
            define(factory);
            registeredInModuleLoader = true;
        }
        if (typeof exports === 'object') {
            module.exports = factory();
            registeredInModuleLoader = true;
        }
        if (!registeredInModuleLoader) {
            var OldCookies = window.Cookies;
            var api = window.Cookies = factory();
            api.noConflict = function () {
                window.Cookies = OldCookies;
                return api;
            };
        }
    })(function () {
        function extend() {
            var i = 0;
            var result = {};
            for (; i < arguments.length; i++) {
                var attributes = arguments[i];
                for (var key in attributes) {
                    result[key] = attributes[key];
                }
            }
            return result;
        };

        function init(converter) {
            function api(key, value, attributes) {
                var result;
                if (typeof document === 'undefined') {
                    return;
                }
                if (arguments.length > 1) {
                    attributes = extend({
                        path: '/'
                    }, api.defaults, attributes);
                    if (typeof attributes.expires === 'number') {
                        var expires = new Date;
                        expires.setMilliseconds(expires.getMilliseconds() + (attributes.expires * 86400000));
                        attributes.expires = expires;
                    }
                    try {
                        result = JSON.stringify(value);
                        if (/^[\{\[]/.test(result)) {
                            value = result;
                        }
                    } catch (e) {}
                    if (!converter.write) {
                        value = encodeURIComponent(String(value)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
                    } else {
                        value = converter.write(value, key);
                    }
                    key = encodeURIComponent(String(key));
                    key = key.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent);
                    key = key.replace(/[\(\)]/g, escape);
                    return document.cookie = ([key, '=', value, attributes.expires ? ('; expires=' + attributes.expires.toUTCString()) : '', attributes.path ? ('; path=' + attributes.path) : '', attributes.domain ? ('; domain=' + attributes.domain) : '', attributes.secure ? '; secure' : '']).join('');
                }
                if (!key) {
                    result = {};
                }
                var cookies = document.cookie ? document.cookie.split('; ') : ([]);
                var rdecode = /(%[0-9A-Z]{2})+/g;
                var i = 0;
                for (; i < cookies.length; i++) {
                    var parts = cookies[i].split('=');
                    var cookie = parts.slice(1).join('=');
                    if (cookie.charAt(0) === '\"') {
                        cookie = cookie.slice(1, -1);
                    }
                    try {
                        var name = parts[0].replace(rdecode, decodeURIComponent);
                        cookie = converter.read ? converter.read(cookie, name) : (converter(cookie, name) || cookie.replace(rdecode, decodeURIComponent));
                        if (this.json) {
                            try {
                                cookie = JSON.parse(cookie);
                            } catch (e) {}
                        }
                        if (key === name) {
                            result = cookie;
                            break;
                        }
                        if (!key) {
                            result[name] = cookie;
                        }
                    } catch (e) {}
                }
                return result;
            };
            api.set = api;
            api.get = function (key) {
                return api.call(api, key);
            };
            api.getJSON = function () {
                return api.apply({
                    json: true
                }, ([]).slice.call(arguments));
            };
            api.defaults = {};
            api.remove = function (key, attributes) {
                api(key, '', extend(attributes, {
                    expires: -1
                }));
            };
            api.withConverter = init;
            return api;
        };
        return init(function () {});
    });

    function reloadIframe() {
        try {
            if (window.self !== window.top) {
                loaded = Cookies.get("inIframe");
                if (loaded)
                    Cookies.remove("inIframe");
                else {
                    Cookies.set("inIframe", "1");
                }
            }
        } catch (e) {}
    };
    reloadIframe();
    window.blob = true;

    function Mouse() {
        this.DOWN = 0, this.UP = 1, this.IDLE = 2, this.IN = 0, this.OUT = 1, this.pos = {
            x: 0,
            y: 0
        };
        this.x_old = 0;
        this.y_old = 0;
        this.angle = 0;
        this.state = this.IDLE;
        this.dist = this.IN;
        this.down = function () {
            this.state = this.DOWN;
        };
        this.up = function () {
            this.state = this.UP;
        };
        this.update = function () {
            if ((this.pos.x != this.x_old) || (this.pos.y != this.y_old)) {
                this.x_old = this.pos.x;
                this.y_old = this.pos.y;
                return true;
            }
            return false;
        };
    };

    function Keyboard() {
        this.set_azerty = function () {
            this.LEFT = 81;
            this.RIGHT = 68;
            this.TOP = 90;
            this.DOWN = 83;
        };
        this.set_qwerty = function () {
            this.LEFT = 65;
            this.RIGHT = 68;
            this.TOP = 87;
            this.BOTTOM = 83;
        };
        this.UP = 0, this.DOWN = 1, this._1 = 49;
        this._2 = 50;
        this._3 = 51;
        this._4 = 52;
        this._5 = 53;
        this.CTRL = 17;
        this.ARROW_LEFT = 37;
        this.ARROW_RIGHT = 39;
        this.ARROW_TOP = 38;
        this.ARROW_BOTTOM = 40;
        this.SPACE = 32;
        this.R = 82;
        this.G = 71;
        this.V = 86;
        this.B = 66;
        this.set_qwerty();
        this.keys = new Array(255);
        for (var i = 0; i < 255; i++)
            this.keys[i] = this.UP;
        this.up = function (evt) {
            var k = Math.min(evt.charCode || evt.keyCode, 255);
            this.keys[k] = this.UP;
        };
        this.down = function (evt) {
            var k = Math.min(evt.charCode || evt.keyCode, 255);
            if ((k == this.LEFT) || (k == this.ARROW_LEFT))
                this.press_left();
            else if ((k == this.TOP) || (k == this.ARROW_TOP))
                this.press_top();
            else if ((k == this.DOWN) || (k == this.ARROW_DOWN))
                this.press_bottom();
            else if ((k == this.RIGHT) || (k == this.ARROW_RIGHT))
                this.press_right();

            this.keys[k] = this.DOWN;
            return k;
        };
        this.press_left = function () {
            this.keys[this.RIGHT] = this.UP;
            this.keys[this.ARROW_RIGHT] = this.UP;
        };
        this.press_right = function () {
            this.keys[this.LEFT] = this.UP;
            this.keys[this.ARROW_LEFT] = this.UP;
        };
        this.press_bottom = function () {
            this.keys[this.TOP] = this.UP;
            this.keys[this.ARROW_TOP] = this.UP;
        };
        this.press_top = function () {
            this.keys[this.BOTTOM] = this.UP;
            this.keys[this.ARROW_BOTTOM] = this.UP;
        };
        this.clear_directionnal = function () {
            this.keys[this.RIGHT] = this.UP;
            this.keys[this.ARROW_RIGHT] = this.UP;
            this.keys[this.LEFT] = this.UP;
            this.keys[this.ARROW_LEFT] = this.UP;
            this.keys[this.TOP] = this.UP;
            this.keys[this.ARROW_TOP] = this.UP;
            this.keys[this.BOTTOM] = this.UP;
            this.keys[this.ARROW_BOTTOM] = this.UP;
        };
        this.is_left = function () {
            return this.keys[this.LEFT] || this.keys[this.ARROW_LEFT];
        };
        this.is_right = function () {
            return this.keys[this.RIGHT] || this.keys[this.ARROW_RIGHT];
        };
        this.is_top = function () {
            return this.keys[this.TOP] || this.keys[this.ARROW_TOP];
        };
        this.is_bottom = function () {
            return this.keys[this.BOTTOM] || this.keys[this.ARROW_BOTTOM];
        };
        this.is_ctrl = function () {
            return this.keys[this.CTRL];
        };
        this.is_1 = function () {
            return this.keys[this._1];
        };
        this.is_2 = function () {
            return this.keys[this._2];
        };
        this.is_3 = function () {
            return this.keys[this._3];
        };
        this.is_4 = function () {
            return this.keys[this._4];
        };
        this.is_space = function () {
            return this.keys[this.SPACE];
        };
        this.is_r = function () {
            return this.keys[this.R];
        };
        this.is_g = function () {
            return this.keys[this.G];
        };
        this.is_v = function () {
            return this.keys[this.V];
        };
        this.is_b = function () {
            return this.keys[this.B];
        };
    };
    var can = document.getElementById('game_canvas');
    var ctx = can.getContext('2d');
    var canw = can.width;
    var canh = can.height;
    var canw2 = can.width / 2;
    var canh2 = can.height / 2;
    var canm = {
        x: canw2,
        y: canh2
    };
    var scale = 1;
    var ratio = 1;
    var ratio_opt = -1;
    can.oncontextmenu = function () {
        return false;
    };


    function CTI(c) {
        var img = new Image;
        img.src = c.toDataURL("image/png");
        img.width = c.width;
        img.height = c.height;
        img.isLoaded = 1;
        return img;
    };

    var devicePixelRatio = window.devicePixelRatio || 1;
    var backingStoreRatio = ((((ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio) || ctx.msBackingStorePixelRatio) || ctx.oBackingStorePixelRatio) || ctx.backingStorePixelRatio) || 1;

    function resize_canvas() {
        if (can.width != window.innerWidth) {
            can.width = window.innerWidth;
            canw = can.width;
            canw2 = can.width / 2;
        }
        if (can.height != window.innerHeight) {
            can.height = window.innerHeight;
            canh = can.height;
            canh2 = can.height / 2;
        }
        canm = {
            x: canw2,
            y: canh2
        };
        var ow = can.width;
        var oh = can.height;
        if (ratio_opt === -1)
            ratio = devicePixelRatio / backingStoreRatio;
        else
            ratio = ratio_opt;
        can.width = ow * ratio;
        can.height = oh * ratio;
        can.style.width = ow + "px";
        can.style.height = oh + "px";
        ctx.scale(ratio, ratio);
        if (user) {
            user.cam.rw = ow;
            user.cam.rh = oh;
        }
        if (loader.is_run)
            loader.update();
        else if (ui.is_run)
            ui.update();
        else if (game.is_run)
            game.update();
        else if (scoreboard.is_run)
            scoreboard.update();

    };
    var game_body = document.getElementById("game_body");
    game_body.ondragstart = function () {
        return false;
    };
    game_body.ondrop = function () {
        return false;
    };
    game_body.onresize = resize_canvas;
    (function () {
        var lastTime = 0;
        var vendors = ['ms', 'moz', 'webkit', 'o'];
        for (var x = 0;
            (x < vendors.length) && !window.requestAnimationFrame; ++x) {
            window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
            window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];
        }
        if (!window.requestAnimationFrame)
            window.requestAnimationFrame = function (callback, element) {
                var currTime = (new Date).getTime();
                var timeToCall = Math.max(0, 16 - (currTime - lastTime));
                var id = window.setTimeout(function () {
                    callback(currTime + timeToCall);
                }, timeToCall);
                lastTime = currTime + timeToCall;
                return id;
            };

        if (!window.cancelAnimationFrame)
            window.cancelAnimationFrame = function (id) {
                clearTimeout(id);
            };

    })();
    var lang = navigator.language || navigator.userLanguage;
    var timezone = -((new Date).getTimezoneOffset() / 60);
    var TZ_EU = "Europe";
    var TZ_RU = "Russia";
    var TZ_NA = "North America";
    var TZ_SA = "South America";
    var TZ_WA = "West America";
    var TZ_AS = "Asia";
    var TZ_AU = "Australia";
    var TZ = TZ_EU;
    if ((timezone >= -2) && (timezone <= 2))
        TZ = TZ_EU;
    else if ((timezone > 2) && (timezone <= 5))
        TZ = TZ_RU;
    else if ((timezone > 5) && (timezone <= 9))
        TZ = TZ_AS;
    else if (timezone > 9)
        TZ = TZ_AU;
    else if ((timezone >= -5) && (timezone < -2)) {
        if ((((lang === 'pt-BR') || (lang === 'pt-br')) || (lang === 'pt')) || (lang === 'pt-pt'))
            TZ = TZ_SA;
        else
            TZ = TZ_NA;
    } else if (timezone < -5) {
        if ((((lang === 'pt-BR') || (lang === 'pt-br')) || (lang === 'pt')) || (lang === 'pt-pt'))
            TZ = TZ_SA;
        else
            TZ = TZ_WA;
    }
    var RNG = (function () {
        function Random(seed) {
            var m = 2147483648;
            var a = 1103515245;
            var c = 12345;
            var state = seed ? seed : Math.floor(Math.random() * (m - 1));
            this.init = function (seed) {
                state = seed ? seed : Math.floor(Math.random() * (m - 1));
            };
            this.get = function () {
                state = ((a * state) + c) % m;
                return state / m;
            };
        };
        return {
            Random: Random
        };
    })();




    var set_english = function () {
        LANG[INV.EXTRACTOR_MACHINE_STONE] = ["Stone Extractor", "Can produce stone with wood", "It takes 10 seconds to drill Stone", "Durability: 2000"];
        LANG[INV.EXTRACTOR_MACHINE_GOLD] = ["Gold Extractor", "Can produce gold with wood", "It takes 10 seconds to drill Gold", "Durability: 2000"];
        LANG[INV.EXTRACTOR_MACHINE_DIAMOND] = ["Diamond Extractor", "Can produce diamond with wood", "It takes 10 seconds to drill Diamond", "Durability: 2000"];
        LANG[INV.EXTRACTOR_MACHINE_AMETHYST] = ["Amethyst Extractor", "Can produce amethyst with wood", "It takes 10 seconds to drill Amethyst", "Durability: 2000"];
        LANG[INV.EXTRACTOR_MACHINE_REIDITE] = ["Reidite Extractor", "Can produce reidite with wood", "It takes 10 seconds to drill Reidite", "Durability: 2000"];
        LANG[INV.REIDITE_SHIELD] = ["Reidite Shield", "A must for the pros of the getaway", "You can not attack when you use it", "Damage: 6", "Players Defense: 6"];
        LANG[INV.AMETHYST_SHIELD] = ["Amethyst Shield", "Because you know how to run away in style", "You can not attack when you use it", "Damage: 5", "Players Defense: 5"];
        LANG[INV.DIAMOND_SHIELD] = ["Diamond Shield", "Run or attack, you\'ve obviously made your choice.", "You can not attack when you use it", "Damage: 4", "Players Defense: 4"];
        LANG[INV.GOLD_SHIELD] = ["Gold Shield", "When it\'s golden, it\'s always better.", "You can not attack when you use it", "Damage: 3", "Players Defense: 3"];
        LANG[INV.STONE_SHIELD] = ["Stone Shield", "Protects you a bit more", "You can not attack when you use it", "Damage: 2", "Players Defense: 2"];
        LANG[INV.WOOD_SHIELD] = ["Wood Shield", "Protects you a bit", "You can not attack when you use it", "Damage: 1", "Players Defense: 1"];
        LANG[INV.MACHETE] = ["Machete", "You gather more from mob boxes", "Useless to attack mobs", "Damage against Players: 5"];
        LANG[INV.WOOD_TOWER] = ["Tower", "Allows you to shoot over walls with a bow", "Does not allow to pass through roofs"];
        LANG[INV.DRAGON_ARROW] = ["Dragon Arrow", "Must be used with a Dragon Bow", "Damage: 45", "Mobs Damage: 1200", "Building Damage: 45"];
        LANG[INV.DRAGON_BOW] = ["Dragon Bow", "Also called the One-Shot-Monster", "Requiers arrows to be used"];
        LANG[INV.REIDITE_ARROW] = ["Reidite Arrow", "Must be used with a Reidite or a Dragon Bow", "Damage: 40", "Mobs Damage: 900", "Building Damage: 40"];
        LANG[INV.REIDITE_BOW] = ["Reidite Bow", "Makes the most terrifying monster cry.", "Requiers any arrows, except dragon arrows, to be used"];
        LANG[INV.AMETHYST_ARROW] = ["Amethyst Arrow", "Must be used with Amethyst, Reidite or Dragon Bow", "Damage: 35", "Mobs Damage: 600", "Building Damage: 35"];
        LANG[INV.AMETHYST_BOW] = ["Amethyst Bow", "It\'s super efficient!", "Requiers any arrows, except dragon and reidite arrows, to be used"];
        LANG[INV.DIAMOND_ARROW] = ["Diamond Arrow", "Must be used with Diamond, Amethyst, Reidite or Dragon Bow", "Damage: 30", "Mobs Damage: 300", "Building Damage: 30"];
        LANG[INV.DIAMOND_BOW] = ["Diamond Bow", "Like a Robin Wood who would keep the diamonds", "Requiers wood, stone, gold or diamond arrows to be used"];
        LANG[INV.GOLD_ARROW] = ["Gold Arrow", "Must be used with a Bow, except a wooden and stone one", "Damage: 25", "Mobs Damage: 200", "Building Damage: 25"];
        LANG[INV.GOLD_BOW] = ["Gold Bow", "When it\'s golden, it\'s better.", "Requiers wood, stone or gold arrows to be used"];
        LANG[INV.STONE_ARROW] = ["Stone Arrow", "Must be used with a Bow, except a wooden one", "Damage: 20", "Mobs Damage: 100", "Building Damage: 20"];
        LANG[INV.STONE_BOW] = ["Stone Bow", "Like Robin Wood", "Requiers wood and stone arrows to be used"];
        LANG[INV.WOOD_ARROW] = ["Wood Arrow", "Must be used with any bow", "Damage: 15", "Mobs Damage: 20", "Building Damage: 15"];
        LANG[INV.WOOD_BOW] = ["Wood Bow", "A little bow that does not do many damages.", "Requiers wood arrows to be used"];
        LANG[INV.EMERALD_MACHINE] = ["Emerald Machine", "Allows to automatically generate score points.", "Be careful, you can only build one.", "Once placed your soul is connected to the machine, if the machine is destroyed, you will die.", "The machine can\'t be build in the sea", "You earn more points in the desert, than in the lava, than in winter, than in the forest."];
        LANG[INV.FUR_BOAR] = ["Boar fur", "Hakuna Matata, well, he can no longer say it"];
        LANG[INV.FUR_MAMMOTH] = ["Mammoth fur", "Soft and warm. Perfect for a hat."];
        LANG[INV.VULTURE_FEATHER] = ["Vulture Feather", "From a deadly vulture"];
        LANG[INV.EMERALD] = ["Emerald", "How many golden breads can you get from it?"];
        LANG[INV.SANDWORM_JUICE] = ["Sand Worm Juice", "I don\'t want to know how you got this."];
        LANG[INV.TURBAN1] = ["Turban", "Useful to survive in the desert."];
        LANG[INV.TURBAN2] = ["Ninja outfit", "Essential to survive in the desert"];
        LANG[INV.PILOT_HELMET] = ["Pilot Hat", "Take off and land with flying objects much faster."];
        LANG[INV.PILOT_GLASSES] = ["Pilot Glasses"];
        LANG[INV.MOUNT_BOAR] = ["Tamed Boar", "Fast on lands and slow on water."];
        LANG[INV.BABY_MAMMOTH] = ["Tamed Baby Mammoth", "Fast on lands and slow on water."];
        LANG[INV.CRAB_BOSS] = ["Tamed Crab Boss", "Fast on lands and water, and slow on winter.", "Gives a +10 damage bonus of the Crab Spear", "when holding a Crab Helmet"];
        LANG[INV.BABY_DRAGON] = ["Tamed Baby Dragon", "You can fly with it.", "Faster than a hawk", "When you are flying,", " you can only hit people who are flying too"];
        LANG[INV.BABY_LAVA] = ["Tamed Baby Lava Dragon", "You can fly with it.", "Faster than a baby dragon", "When you are flying,", " you can only hit people who are flying too"];
        LANG[INV.HAWK] = ["Tamed Hawk", "You can fly with it.", "When you are flying,", " you can only hit people who are flying too"];
        LANG[INV.SADDLE] = ["Saddle", "Hit a boar with it to tame it."];
        LANG[INV.WITCH] = ["Witch Hat", "You\'re a wizard Starvy!"];
        LANG[INV.NIMBUS] = ["Nimbus 2000", "That\'s not just a broomstick, Starvy, it\'s a Nimbus 2000!", "Only works with the witch hat."];
        LANG[INV.WAND1] = ["Wand of life", "Soon we must all choose between what is right and what is easy.", "You need the witch hat and firefly to cast spell"];
        LANG[INV.WAND2] = ["Death Wand", "The wand of He-Who-Must-Not-Be-Named... Lapa...", "You need the witch hat and firefly to cast spell"];
        LANG[INV.FIREFLY] = ["Firefly", "They make a cute little squeak.", "However, you must tear off his wings to make magical projectiles for use with magic wands."];
        LANG[INV.PIRATE_HAT] = ["Pirate hat", "You are faster with it in a boat", "Warm outside water and in winter"];
        LANG[INV.SLED] = ["Sled", "You are faster with it in the snow"];
        LANG[INV.BOAT] = ["Boat", "You are faster with it in the water"];
        LANG[INV.PLANE] = ["Plane", "Fly in the forest, ocean and winter", "Can\'t fly in desert or lava biome", "When you are flying,", " you can only hit people who are flying too"];
        LANG[INV.HAMMER_REIDITE] = ["Reidite Hammer", "Useful to destroy buildings", "Damage: 6", "Building Damage: 60"];
        LANG[INV.PENGUIN_FEATHER] = ["Penguin Feather", "From a deadly cute penguin."];
        LANG[INV.HAWK_FEATHER] = ["Hawk Feather", "From a deadly hawk."];
        LANG[INV.CACTUS] = ["Cactus", "Food : 20", "Water : 10"];
        LANG[INV.ALOE_VERA] = ["Aloe Vera", "Allows you to heal a little", "Heal : 30"];
        LANG[INV.ALOE_VERA_SEED] = ["Aloe Vera Seed", "Grows into Aloe Vera"];
        LANG[INV.WATERMELON] = ["Watermelon", "Like a melon, but with water", "Food : 15", "Water : 8"];
        LANG[INV.WATERMELON_SEED] = ["Watermelon Seed", "Grows into Watermelon", "Birth: 4min", "Growth: 180s", "Need water: 3min 20s", "Durability: 400", "Lifetime: 8 days"];
        LANG[INV.REIDITE_DOOR] = ["Reidite Door", "Noboby can destroy it. Except very reckless", "Damage: 5", "On-Hit Damage: 1", "Durability: 4000"];
        LANG[INV.REIDITE_WALL] = ["Reidite Wall", "Better wall in StarveLand", "Durability: 4000"];
        LANG[INV.REIDITE_SPIKE] = ["Reidite Spike", "It hurts", "Damage: 60", "On-Hit Damage: 5", "Durability: 3000"];
        LANG[INV.REIDITE_DOOR_SPIKE] = ["Reidite Door Spike", "Painful and useful at the same time", "Damage: 35", "On-Hit Damage: 4", "Durability: 2000"];
        LANG[INV.PICK_REIDITE] = ["Reidite Pickaxe", "Can also harvest reidite, better look!", "Damage: 6", "Building Damage: 1"];
        LANG[INV.WOOD_DOOR_SPIKE] = ["Wood Door Spike", "Can be opened or closed by you or your friends", "Damage: 5", "On-Hit Damage: 1", "Durability: 100"];
        LANG[INV.STONE_DOOR_SPIKE] = ["Stone Door Spike", "A stronger door is more serious", "Damage: 10", "On-Hit Damage: 2", "Durability: 200"];
        LANG[INV.GOLD_DOOR_SPIKE] = ["Gold Door Spike", 'Are you rebuilding the \"el dorado?\"', "Damage: 15", "On-Hit Damage: 2", "Durability: 400"];
        LANG[INV.DIAMOND_DOOR_SPIKE] = ["Diamond Door Spike", "For a shining house", "Damage: 25", "On-Hit Damage: 3", "Durability: 800"];
        LANG[INV.AMETHYST_DOOR_SPIKE] = ["Amethyst Door Spike", "Is your house a locked safe?", "Damage: 30", "On-Hit Damage: 3", "Durability: 1600"];
        LANG[INV.CARROT] = ["Carrot", "Eat it or sell it in exchange for Tomato Seed or Diamond", "Food : 20"];
        LANG[INV.TOMATO] = ["Tomato", "Eat it or sell it in exchange for Thornbush Seed or Amethyst", "Food : 16"];
        LANG[INV.CARROT_SEED] = ["Carrot Seed", "Grows into Carrot", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
        LANG[INV.TOMATO_SEED] = ["Tomato Seed", "Grows into Tomato", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
        LANG[INV.PITCHFORK] = ["Pitchfork", "Perfect for gathering"];
        LANG[INV.PITCHFORK2] = ["Golden Pitchfork", "Essential for a real farmer."];
        LANG[INV.PITCHFORK_PART] = ["Pitchfork Part", "Shaped by the gods. You\'ll never be hungry again."];
        LANG[INV.EGG0] = ["Easter Egg", "Eat it or sell it in exchange for wood or stone", "Food : 12"];
        LANG[INV.EGG1] = ["Easter Egg", "Eat it or sell it in exchange for gold", "Food : 25"];
        LANG[INV.EGG2] = ["Easter Egg", "Eat it or sell it in exchange for diamond", "Food : 50"];
        LANG[INV.EGG3] = ["Easter Egg", "Eat it or sell it in exchange for amethyst", "Food : 75"];
        LANG[INV.EGG4] = ["Easter Egg", "Eat it or sell it in exchange for reidite", "Food : 100"];
        LANG[INV.LAVA_CUBE] = ["Lava Cube", "You feel an immense power emanating from this cube"];
        LANG[INV.LAVA_ORB] = ["Lava Orb", "You feel an immense power emanating from this orb"];
        LANG[INV.LAVA_SWORD] = ["Lava Sword", "Don\'t be too mean with that.", "Damage: 33", "Building Damage: 11"];
        LANG[INV.LAVA_SPEAR] = ["Lava Spear", "Doing good or doing evil", "Damage: 24", "Building Damage: 8"];
        LANG[INV.LAVA_HEART] = ["Lava Heart", "You can feel a strange force.", "A huge power emanates from it.", "We must not find the secret."];
        LANG[INV.LAVA_HELMET] = ["Lava Helmet", "You will conquer the world", "Players Defense: 9", "Animals Defense: 30"];
        LANG[INV.REIDITE_SPEAR] = ["Reidite Spear", "Really useful against Lava Monsters", "Damage: 22", "Building Damage: 7"];
        LANG[INV.REIDITE_SWORD] = ["Reidite Sword", "Really useful against Lava Monsters", "Damage: 30", "Building Damage: 10"];
        LANG[INV.FLAME] = ["Flame", "It\'s hot!"];
        LANG[INV.DIAMOND_PROTECTION] = ["Diamond Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 2, Animals Defense: 8"];
        LANG[INV.AMETHYST_PROTECTION] = ["Amethyst Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 5, Animals Defense: 13"];
        LANG[INV.REIDITE_PROTECTION] = ["Reidite Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 6, Animals Defense: 19"];
        LANG[INV.REIDITE] = ["Reidite", "The ultimate ore"];
        LANG[INV.DRAGON_CUBE] = ["Dragon Cube", "You feel a great power emanating from this cube"];
        DIE[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        DIE[23] = ["The heat makes you suffocate, you can see your skin fall apart. You\'re charred. The grilled marshmallow has never been so tasty."];
        DIE[24] = ["Your vital organs melt inside, fortunately the toxic gases that escape from the lava make you faint and you do not feel the excruciating pain of death."];
        DIE[25] = ["The Will-O\'-The-Wisp devoured you from the inside with its fiery flames."];
        DIE[26] = ["Oh my God, you died in indescribable pain. Even Lapa turned his head not to see this massacre."];
        DIE[27] = ["You were trampled by that boar. From now on, your new nickname is \"the doormat\"."];
        DIE[28] = ["With a force of 3300 newtons, the shock wave from the closing of the crab king\'s claw made you explode your heart from the inside. In addition, the crab has eaten you by sharing your remains with its other small crabs. All dance in joy around your corpse by performing a singular dance called the \"crab rave\""];
        DIE[29] = ["Even if it is a baby, under the heat of the flames of this cute dragon, you become a delicious dish."];
        DIE[30] = ["Under its cute fake looks, the lava baby dismembers you so quickly that you don\'t have your life flashes before your eyes."];
        DIE[31] = ["The hawk slashed both your eyes out. Terrified, you try to escape by crawling and screaming in pain. Unfortunately the hawk catches you and takes you to distant skies that we already know will never see you again."];
        DIE[32] = ["Believing you saw an oasis, you dived into this tree that seemed to you to be full of juicy fruit. Unfortunately, these shiny fruits were in fact horribly painful thorns. Now stuck to the cactus, exhausted by the desert, you have fainted forever."];
        DIE[33] = ["That vulture had been spying on you for a long time. He was waiting for a moment of fragility from you. Once cornered by this harassing desert, barely able to breathe, the vulture twisted on you and in a flash ripped out your last hope. At your last breath, you could still see the vulture plunge his head into what was left of your body to enjoy your entrails."];
        DIE[34] = ["Out of nowhere, the sand worm devours you in a terrifying howl. But why did Lapa bring such a despicable monster to life?"];
        DIE[35] = ["Exhausted by so much heat. You would like to cry, but the sand quickly dries your tears. You suffocate, sand enters your mouth, the thumping sound of the sandstorm will be the last thing you will hear... Next time, use a turban or protect yourself under a roof"];
        DIE[36] = ["You feel weak, your vision becomes blurry, you can feel the darkness invading your body. Your soul flies away and leaves behind a lifeless body. Your emerald machine has been destroyed."];
        DIE[37] = ['You hear \"Avada Kedavra!\" before you turn to ashes.'];
        DIE[38] = ['You died crushed by an angry baby mammoth.'];
        DIE[39] = ["You were skewered by a mammoth. In the violence of the animal\'s charge, your heart was left hanging on the tip of the tusk. You could still see your heart beating in the open air before losing your life crushed by the mammoth\'s feet for good. Notice that under the pressure of the crushing your eyes have been exorbed and that the penguins use the frozen eyes of the starvers as a balloon to distract themselves."];
        DIE[40] = ["The blizzard storm is so intense that your frostbite causes necrosis of all your limbs. Next time protect yourself with a roof or with warmer clothes."];
        LANG[INV.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        LANG[TEXT.TEMPEST_ON] = "A sandstorm is approaching in a few seconds.";
        LANG[TEXT.TEMPEST_OFF] = "The sandstorm will soon stop.";
        LANG[TEXT.BLIZZARD_ON] = "A blizzard is approaching in a few seconds.";
        LANG[TEXT.BLIZZARD_OFF] = "The blizzard will soon stop.";
        LANG[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME";
        LANG[TEXT.TWITTER] = " Share on Twitter";
        LANG[TEXT.FACEBOOK] = " Share on Facebook";
        LANG[TEXT.KIT_NEXT] = "You can buy items on the shop in the next game with your points";
        LANG[TEXT.POINTS] = "points";
        LANG[TEXT.SCORE] = "Score";
        LANG[TEXT.KILL] = "Kill";
        LANG[TEXT.DAYS_SURVIVED] = "Days survived";
        LANG[TEXT.MODE_FREE] = "Building method: Free. Press G to change";
        LANG[TEXT.MODE_GRID] = "Building method: Grid. Press G to change";
        LANG[INV.CRAB_LOOT] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        LANG[INV.CRAB_SPEAR] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Gives a +10 damages bonus when holding it with", "a Crab Helmet on a Crab King", "Damage: 14", "Building Damage: 4"];
        LANG[INV.CROWN_CRAB] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can\'t hit you and you can\'t hit them", "Players Defense: 5", "Animals Defense: 19"];
        LANG[INV.BED] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart inside the cave";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = "100 bread in winter, alone, without come back";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var i = 0; i < 7; i++)
            document.getElementById("claim_reward_" + i).innerHTML = "CLAIM REWARD!";
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        LANG[INV.HAND] = ["Hand"];
        LANG[INV.GROUND] = ["Dirt", "Dirty!"];
        LANG[INV.SAND] = ["Sand", "I got it in my eyes!"];
        LANG[INV.WOOD] = ["Wood", "You can\'t get enough of it!"];
        LANG[INV.STONE] = ["Stone", "Also called a rock"];
        LANG[INV.GOLD] = ["Gold", "Be generous, give it to others"];
        LANG[INV.DIAMOND] = ["Diamond", "What will you make with it?"];
        LANG[INV.AMETHYST] = ["Amethyst", "It\'s Mauve like Lapa"];
        LANG[INV.FLOUR] = ["Flour", "Used in cooking"];
        LANG[INV.COOKIE] = ["Cookie", "A sumptuous grandmother\'s cookie", "Food: 50"];
        LANG[INV.CAKE] = ["A cake", "Dream cake for the gourmets", "Food: 100"];
        LANG[INV.MEAT] = ["Raw meat", "You can cook it with a fire", "Causes food poisoning: 10", "Food: 15"];
        LANG[INV.COOKED_MEAT] = ["Cooked meat", "A rare steak, please", "Food: 35"];
        LANG[INV.FOODFISH] = ["Raw fish", "I think it\'s still alive", "Causes food poisoning: 10", "Food: 18"];
        LANG[INV.FOODFISH_COOKED] = ["Cooked fish", "With lemon it\'s perfect", "Food: 35"];
        LANG[INV.BREAD] = ["Bread", "An excellent French bread", "It\'s the currency used in the market", "Food: 15"];
        LANG[INV.SANDWICH] = ["Sandwich", "Tastes like Krabby Patty", "Food: 100"];
        LANG[INV.CANDY] = ["Candies", "Only for children!", "Food: 20"];
        LANG[INV.SUGAR_CAN] = ["Sugar cane", "Taste it, it\'s delicious", "Food: 100"];
        LANG[INV.GARLAND] = ["Garland", "Perfect decoration for roofs"];
        LANG[INV.SEED] = ["Berries Seed", "Grows into Berry", "Birth: 2min", "Growth: 55s", "Need water: 3min 20s", "Durability: 700", "Lifetime: 8 days"];
        LANG[INV.PLANT] = ["Berry", "Berry tasty!", "Food: 10"];
        LANG[INV.WHEAT_SEED] = ["Wheat Seed", "Grows into Wheat", "Birth: 2min", "Growth: 16s", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
        LANG[INV.WILD_WHEAT] = ["Wild Wheat", "Turns into Flour when placed in Windmill"];
        LANG[INV.PUMPKIN_SEED] = ["Pumpkin Seed", "Grows into pumpkin", "Birth: 2min 40s", "Growth: 2min", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
        LANG[INV.PUMPKIN] = ["Pumpkin", "It reminds me of Halloween", "Food: 30"];
        LANG[INV.GARLIC_SEED] = ["Garlic Seed", "Very dangerous for vampires", "Damage: 20", "Birth: 4min", "Growth: 1min 10s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
        LANG[INV.GARLIC] = ["Garlic", "Reduces cold", "Food: 14", "Effect: 1"];
        LANG[INV.THORNBUSH_SEED] = ["Thorn bush Seed", "Can damage your enemies", "Damage: 20", "Birth: 4min", "Growth: 15s", "Need water: 3min", "Durability: 1000", "Lifetime: 8 days"];
        LANG[INV.THORNBUSH] = ["Thorn bush", "It stings!"];
        LANG[INV.PLOT] = ["Plot", "Seriously, use it", "With this GMO fertilizer your plants", "will growth really faster and need less water", "Durability: 2000"];
        LANG[INV.ICE] = ["Ice", "Useful for making cakes and water"];
        LANG[INV.SPANNER] = ["Wrench", "To repair doors, walls and spike", "Damage: 2"];
        LANG[INV.FUR_WOLF] = ["Wolf Fur", "Puppy? But where is Puppy?!"];
        LANG[INV.FUR] = ["Rabbit Fur", "That rabbit was so cute..."];
        LANG[INV.SPECIAL_FUR] = ["Pure Fur", "You\'re a bread factory"];
        LANG[INV.SPECIAL_FUR_2] = ["Dark Fur", "You get ready to do something wrong"];
        LANG[INV.FUR_WINTER] = ["Winter Fur", "These animals just wanted a hug..."];
        LANG[INV.SCALES] = ["Scales", "It smells like fish!"];
        LANG[INV.KRAKEN_SKIN] = ["Kraken Skin", "Weren\'t you too scared?"];
        LANG[INV.FIRE] = ["Firecamp", "Warm you up!", "Durability: 150", "Lifetime: 2min"];
        LANG[INV.BIG_FIRE] = ["Big Firecamp", "Warm you up more time!", "Durability: 400", "Lifetime: 6min"];
        LANG[INV.WORKBENCH] = ["Workbench", "Very useful to craft all kinds of objects"];
        LANG[INV.CORD] = ["Cord", "Used in crafting Hats and Bag"];
        LANG[INV.BLUE_CORD] = ["Diamond Cord", "Used in crafting Special Hats"];
        LANG[INV.CHEST] = ["Chest", "Allows you to store items", "Durability: 500"];
        LANG[INV.SWORD_WOOD] = ["Wood Sword", "Does that work?", "Damage: 12", "Building Damage: 4"];
        LANG[INV.SWORD] = ["Stone Sword", "Be nice to others", "Damage: 19", "Building Damage: 6"];
        LANG[INV.SWORD_GOLD] = ["Gold Sword", "King of the forest", "Damage: 22", "Building Damage: 7"];
        LANG[INV.SWORD_DIAMOND] = ["Diamond Sword", "You can feel the power", "Damage: 24", "Building Damage: 8"];
        LANG[INV.PIRATE_SWORD] = ["Pirate Sword", "Ayyyyy!", "Better range than a normal sword", "Damage: 24", "Building Damage: 8"];
        LANG[INV.SWORD_AMETHYST] = ["Amethyst Sword", "Mauve is the most beautiful color of the world", "Damage: 27", "Building Damage: 9"];
        LANG[INV.DRAGON_SWORD] = ["Dragon Sword", "No mercy!", "Damage: 30", "Building Damage: 10"];
        LANG[INV.DRAGON_SPEAR] = ["Dragon Spear", "Kill them all!", "Damage: 22", "Building Damage: 7"];
        LANG[INV.PICK_WOOD] = ["Wood Pickaxe", "Can harvest only stone and wood", "Damage: 1"];
        LANG[INV.PICK] = ["Stone Pickaxe", "Can harvest wood, stone and gold", "Damage: 2"];
        LANG[INV.PICK_GOLD] = ["Gold Pickaxe", "Can also harvest diamond", "Damage: 3", "Building Damage: 1"];
        LANG[INV.PICK_DIAMOND] = ["Diamond Pickaxe", "Can also harvest amethyst", "Damage: 4", "Building Damage: 1"];
        LANG[INV.PICK_AMETHYST] = ["Amethyst Pickaxe", "Can also harvest reidite, looks fancy!", "Damage: 5", "Building Damage: 1"];
        LANG[INV.HAMMER] = ["Stone Hammer", "Useful to destroy buildings", "Doesn\'t work well on diamond or amethyst", "Damage: 2", "Building Damage: 20"];
        LANG[INV.HAMMER_GOLD] = ["Gold Hammer", "Useful to destroy buildings", "Doesn\'t work well on amethyst", "Damage: 3", "Building Damage: 30"];
        LANG[INV.HAMMER_DIAMOND] = ["Diamond Hammer", "Useful to destroy buildings", "Damage: 4", "Building Damage: 40"];
        LANG[INV.HAMMER_AMETHYST] = ["Amethyst Hammer", "Useful to destroy buildings", "Damage: 5", "Building Damage: 50"];
        LANG[INV.SUPER_HAMMER] = ["Super Hammer", "Have you planned to destroy the world?", "Damage: 12", "Building Damage: 70"];
        LANG[INV.WOOD_SPEAR] = ["Wood Spear", "Like a wooden stick, but it stings.", "Damage: 10", "Building Damage: 3"];
        LANG[INV.SPEAR] = ["Stone Spear", "The beginning of evolution!", "Damage: 14", "Building Damage: 4"];
        LANG[INV.GOLD_SPEAR] = ["Gold Spear", "Careful, it stings!", "Damage: 15", "Buildings Damage: 5"];
        LANG[INV.DIAMOND_SPEAR] = ["Diamond Spear", "You\'re ready to kill a dragon", "Damage: 17", "Buildings Damage: 5"];
        LANG[INV.AMETHYST_SPEAR] = ["Amethyst Spear", "Dragons no longer frighten you", "Damage: 18", "Buildings Damage: 6"];
        LANG[INV.SHOVEL] = ["Stone Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 2"];
        LANG[INV.SHOVEL_GOLD] = ["Gold Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 3", "Buildings Damage: 1"];
        LANG[INV.SHOVEL_DIAMOND] = ["Diamond Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 4", "Buildings Damage: 1"];
        LANG[INV.SHOVEL_AMETHYST] = ["Amethyst Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 5", "Buildings Damage: 1"];
        LANG[INV.WOOD_HELMET] = ["Wood Helmet", "Better than nothing", "Players Defense: 1", "Animals Defense: 4"];
        LANG[INV.STONE_HELMET] = ["Stone Helmet", "You\'re ready for battle!", "Players Defense: 2", "Animals Defense: 8"];
        LANG[INV.GOLD_HELMET] = ["Gold Helmet", "AKA the helmet of the savages", "Players Defense: 4", "Animals Defense: 13"];
        LANG[INV.DIAMOND_HELMET] = ["Diamond Helmet", "Don\'t brag too much", "Players Defense: 5", "Animals Defense: 19"];
        LANG[INV.AMETHYST_HELMET] = ["Amethyst Helmet", "You\'re no longer afraid of anything", "Players Defense: 6", "Animals Defense: 23"];
        LANG[INV.REIDITE_HELMET] = ["Reidite Helmet", "You no longer feel pain", "Players Defense: 7", "Animals Defense: 25"];
        LANG[INV.DRAGON_HELMET] = ["Dragon Helmet", "You will conquer the world", "Players Defense: 8", "Animals Defense: 27"];
        LANG[INV.EXPLORER_HAT] = ["Explorer hat", "Animals won\'t pay attention to you", "but don\'t make noises!", "Warm outside water and in winter", "You also calm down aggressive monsters twice as fast"];
        LANG[INV.CHRISTMAS_HAT] = ["Christmas Hat", "Oh, oh, oh, Merry Christmas", "Warm outside water and in winter"];
        LANG[INV.ELF_HAT] = ["Elf Hat", "Don\'t let yourself be exploited, you little snow elf!", "Warm outside water and in winter"];
        LANG[INV.HOOD] = ["Hood", "You\'re a rogue", "You can steal someone only if", "1) It\'s night", "2) You\'re not wearing anything", "3) If you haven\'t been touched for eight seconds", "4) You are not close a fire", "5) Your target doesn\'t wear a peasant outfit", "Warm outside water and in winter"];
        LANG[INV.EARMUFFS] = ["Earmuffs", "Some kind of little chapka.", "Warm outside water and in winter"];
        LANG[INV.COAT] = ["Chapka", "Also called a coat.", "Warmer outside water and in winter"];
        LANG[INV.CAP_SCARF] = ["Winter Scarf and Cap", "Very comfortable", "Very Warm"];
        LANG[INV.FUR_HAT] = ["Mammoth fur hat", "The best blizzard protection", "Very Warm"];
        LANG[INV.PEASANT] = ["Peasant", "Your plants grow faster", "Warm outside water and in winter"];
        LANG[INV.WINTER_HOOD] = ["Winter Hood", "You can steal someone only if", "- It\'s night", "- You\'re not wearing anything", "- If you haven\'t been touched for four seconds", "- You are not close a fire", "- Your target doesn\'t wear a winter peasant outfit", "Warm outside water and in winter"];
        LANG[INV.WINTER_PEASANT] = ["Winter Peasant", "Your plants grow faster", "Warm outside water and in winter"];
        LANG[INV.DIVING_MASK] = ["Diving Mask", "You are fast in the water", "Warm in water", "Players Defense: 2, Animals Defense: 8"];
        LANG[INV.SUPER_DIVING_SUIT] = ["Super Diving Mask", "You are very fast in the water", "Warm in water", "Players Defense: 4, Animals Defense: 16"];
        LANG[INV.DRAGON_ORB] = ["Dragon Orb", "You feel a great power emanating from this orb"];
        LANG[INV.DRAGON_HEART] = ["Dragon Heart", "Turns you into a Ghost on Death!", "You are a ghost for 60 seconds", "Find a resurrection stone"];
        LANG[INV.GEMME_GREEN] = ["Green Gemstone", "You didn\'t cheat, promise?"];
        LANG[INV.GEMME_ORANGE] = ["Orange Gemstone", "Only a real pirate can find it!"];
        LANG[INV.GEMME_BLUE] = ["Blue Gemstone", "For too kind people"];
        LANG[INV.CROWN_GREEN] = ["Green Crown", "You heal yourself very quickly", "Heal over time: 40", "Players Defense: 4, Animals Defense: 16"];
        LANG[INV.CROWN_ORANGE] = ["Orange Crown", "You suddenly feel very lucky", "Players Defense: 4, Animals Defense: 16"];
        LANG[INV.CROWN_BLUE] = ["Blue Crown", "Once you\'re dead, you\'ll become a ghost", "Though you will lose your weapon", "Players Defense: 4, Animals Defense: 16"];
        LANG[INV.BUCKET_FULL] = ["Bucket", "Useful to fill a well", "One bucket is equivalent to twelve bottles"];
        LANG[INV.BUCKET_EMPTY] = ["Empty Bucket", "You need to fill this bucket near a water source"];
        LANG[INV.BOTTLE_FULL] = ["Bottle", "Allows you to drink water anywhere", "Water: 50"];
        LANG[INV.BOTTLE_EMPTY] = ["Empty Bottle", "You can fill this bottle near a water source"];
        LANG[INV.WATERING_CAN] = ["Empty Watering Can", "You must fill it with a water source to use it"];
        LANG[INV.WATERING_CAN_FULL] = ["Watering Can", "Allows watering of plants", "Damage: 1"];
        LANG[INV.BAG] = ["Bag", "More space for your items!"];
        LANG[INV.PAPER] = ["Paper", "Used in book-crafting"];
        LANG[INV.BOOK] = ["Book", "Allows to considerably reduce the time of crafting", "Must be wearing to work", "Damage: 1"];
        LANG[INV.BANDAGE] = ["Bandage", "Recover more quickly your life", "Heal over time: 30", "Effect: 5"];
        LANG[INV.LOCK] = ["Lock", "Allow you to lock your chest"];
        LANG[INV.LOCKPICK] = ["Lock-pick", "Allows you to unlock one chest"];
        LANG[INV.TOTEM] = ["Totem", "Allow you to create a team", "Share doors and chests", "Harmful building won\'t hurt your friend"];
        LANG[INV.BRIDGE] = ["Bridge", "Very useful on water", "It allows you to drink without drowning", "Walk faster in water"];
        LANG[INV.SIGN] = ["Sign", "Leave a message to others", "Durability: 200"];
        LANG[INV.ROOF] = ["Roof", "Hides you a little and warms you!", "Also protects you against sand storm"];
        LANG[INV.WELL] = ["Well", "Allows bottle filling", "Durability: 1000"];
        LANG[INV.WALL] = ["Wood Wall", "It\'s just a wall", "Durability: 1000"];
        LANG[INV.STONE_WALL] = ["Stone Wall", "It\'s a little more serious.", "Durability: 1500"];
        LANG[INV.GOLD_WALL] = ["Gold Wall", "Gold on your walls? It\'s kind of flashy.", "Durability: 2000"];
        LANG[INV.DIAMOND_WALL] = ["Diamond Wall", "So shiny, watch your eyes", "Durability: 2500"];
        LANG[INV.AMETHYST_WALL] = ["Amethyst Wall", "You must be very scared to go out!", "Durability: 3500"];
        LANG[INV.SPIKE] = ["Wood Spike", "Can damage your enemies", "Damage: 10, On-Hit Damage: 2", "Durability: 150"];
        LANG[INV.STONE_SPIKE] = ["Stone Spike", "I wouldn\'t want to be your enemy.", "Damage: 20", "On-Hit Damage: 3", "Durability: 300"];
        LANG[INV.GOLD_SPIKE] = ["Gold Spike", "You\'re so cruel.", "Damage: 30", "On-Hit Damage: 3", "Durability: 600"];
        LANG[INV.DIAMOND_SPIKE] = ["Diamond Spike", "You don\'t like to have company.", "Damage: 40", "On-Hit Damage: 4", "Durability: 1200"];
        LANG[INV.AMETHYST_SPIKE] = ["Amethyst Spike", "What the hell did your neighbors do to you?", "Damage: 50", "On-Hit Damage: 4", "Durability: 2400"];
        LANG[INV.WOOD_DOOR] = ["Wood Door", "Can be opened or closed by you or your friends", "Durability: 1000"];
        LANG[INV.STONE_DOOR] = ["Stone Door", "A stronger door is more serious", "Durability: 1500"];
        LANG[INV.GOLD_DOOR] = ["Gold Door", "Are you rebuilding the \"el dorado?\"", "Durability: 2000"];
        LANG[INV.DIAMOND_DOOR] = ["Diamond Door", "For a shining house", "Durability: 2500"];
        LANG[INV.AMETHYST_DOOR] = ["Amethyst Door", "Is your house a locked safe?", "Durability: 3500"];
        LANG[INV.FURNACE] = ["Furnace", "Warms you up", "It consumes wood all 5 seconds", "Durability: 1000"];
        LANG[INV.WINDMILL] = ["Windmill", "Can produce flour from wheat", "It takes 5 seconds to make Flour", "Returns points when working", "Durability: 2000"];
        LANG[INV.BREAD_OVEN] = ["Bread Oven", "Allows bread to be made from flour", "It takes 10 seconds to make bread", "Returns points when working", "Durability: 2000"];
        LANG[INV.RESURRECTION] = ["Resurrection stone", "It\'s magic", "Resurrect you if you\'re a ghost", "You will lose your weapon", "Durability: 200"];
        LANG[TEXT.YOU_CANNOT_JOIN] = "You cannot join this server";
        LANG[TEXT.KICKED] = "Kicked: ";
        LANG[TEXT.KEY_ALREADY] = "Your key is already used by someone else";
        LANG[TEXT.KEY_WRONG] = "Your key is wrong";
        LANG[TEXT.OLD_VERSION] = "You have an old version, you need to clear your cache";
        LANG[TEXT.NEW_VERSION] = "Your client version is too recent for this server. The server is being updated";
        LANG[TEXT.WRONG_PASSWORD] = "Wrong password! To enter a password: https://starve.io/?password=...";
        LANG[TEXT.NO_MORE_RESOURCES] = "There are no more new resources";
        LANG[TEXT.SURVIVED_1DAY] = "You survived 1 day";
        LANG[TEXT.SURVIVED] = "You survived ";
        LANG[TEXT.DAYS] = " days";
        LANG[TEXT.DEAD_SAD] = "You are dead ;-;";
        LANG[TEXT.SPAM_ME] = "Server cannot find spawn location! Spam the play button!";
        LANG[TEXT.SPAM_ME2] = "Server is full! Spam the play button!";
        LANG[TEXT.EMPTY] = "Resource is empty";
        LANG[TEXT.INV_FULL] = "Inventory is full (right-click to empty items)";
        LANG[TEXT.DEAD] = " is dead";
        LANG[TEXT.WRONG_TOOL] = "This is not the right tool";
        LANG[TEXT.JOIN_TEAM] = "You joined a team";
        LANG[TEXT.YOU_DEAD] = "You are dead";
        LANG[TEXT.JOINED_TEAM] = " joined the team";
        LANG[TEXT.TEAM_DESTROYED] = "Your team was destroyed";
        LANG[TEXT.LEFT_TEAM] = "You left the team";
        LANG[TEXT.LEFT_TEAM2] = " left the team";
        LANG[TEXT.TOKEN] = "Someone stole your token :>";
        LANG[TEXT.CHOOSE] = "Choose a server";
        LANG[TEXT.PLAYERS] = "players";
        LANG[TEXT.TOTAL_PLAYERS] = "total players";
        LANG[TEXT.TOTAL_MODE] = "players on this mode";
        LANG[TEXT.COMMING_SOON] = "Coming soon...";
        document.getElementById("nickname_input").placeholder = "Nickname";
        DIE[0] = ["You were killed for no reason"];
        DIE[1] = ["You starved to death, as the name of the game implies"];
        DIE[2] = ["You froze to death. So sad", "You got hypothermia. Next time, try sitting by a fire instead."];
        DIE[3] = ["A player killed you whilst telling you to \'git gud.\'", "You got murdered by a player. Don\'t worry, that player will die too, eventually."];
        DIE[4] = ["You stayed too close to the fire and burnt to death. Bad idea.", "You died to a fire. Fires hurt you. Go write a story about it."];
        DIE[5] = ["Your body will become a nest for spider eggs", "A spider killed you. At least it wasn\'t a rabbit."];
        DIE[6] = ["The wolf won\'t starve anymore after eating you", "They aren\'t dogs. Wolves don\'t like being pet."];
        DIE[7] = ["The fox was too quick for you", "The fox turned you into a box. Since when do animals have magic powers?"];
        DIE[8] = ["The bear only wanted a hug.", "The bear was too much to bare. I\'m not sorry."];
        DIE[9] = ["You were burnt to a crisp by a dragon. So sad.", "You got flattened by a dragon. Getting squished is a horrible way to die."];
        DIE[10] = ["You jumped into a spike wall. Not a good idea...", "You got killed by a spike wall. Most people are sensible enough not to touch pointy things."];
        DIE[11] = ["Even the ghost can die.", "You failed to be resurrected. This is a game, so you go to life after you die, so..."];
        DIE[12] = ["A bacterium from your raw food killed you. This game is definitely too hard.", "You killed the raw food. It killed you too."];
        DIE[13] = ["You died of thirst. Better drink your own piss."];
        DIE[14] = ["Did you know starver\'s mouths are always below water when swimming? Now you know."];
        DIE[15] = ["Do not worry, the piranha finds you tasty.", "Fun fact: Pirahnas eat people. Including you."];
        DIE[16] = ["EvelTeam does not plan that you can kill the kraken", "A kraken krak-ed your skull."];
        DIE[17] = ["Your skin\'s falling apart, the sun killed you."];
        DIE[18] = ["Garlic stored in your pockets boiled your brain."];
        DIE[19] = ["As a vampire, don\'t stand near the garlic cloves."];
        DIE[20] = ["You ate garlic as a vampire, what did you expect?"];
        DIE[21] = ["Your body wraps itself in thornbushes. As you try to escape, your skin comes off and your heart stops beating."];
        ZOMBIE_GRUMBLE = "Uuunnnggg";
        ZOMBIE_GRUMBLES = ["Uuunnnggg... I\'m starving", "Need your brain Uuunnnggg...", "Fresh meat here... Uuunnnggg", "Uuunnnggg... You are tasty", "Uuunnnggg...", "Eat... uuunnnggg...", "I can smell blood... Uuunnnggg"];
    };
    var set_russian = function () {
        LANG[INV.DRAGON_CUBE] = ["You feel a great power emanating from this orb"];
        DIE[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        LANG[INV.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        LANG[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME";
        LANG[TEXT.TWITTER] = " Share on Twitter";
        LANG[TEXT.FACEBOOK] = " Share on Facebook";
        LANG[TEXT.KIT_NEXT] = "You can buy items on the shop in the next game with your points";
        LANG[TEXT.POINTS] = "points";
        LANG[TEXT.SCORE] = "Score";
        LANG[TEXT.KILL] = "Kill";
        LANG[TEXT.DAYS_SURVIVED] = "Days survived";
        LANG[TEXT.MODE_FREE] = "Building method: Free. Press G to change";
        LANG[TEXT.MODE_GRID] = "Building method: Grid. Press G to change";
        LANG[INV.CRAB_LOOT] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        LANG[INV.CRAB_SPEAR] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
        LANG[INV.CROWN_CRAB] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can\'t hit you and you can\'t hit them", "Players Defense: 4", "Animals Defense: 13"];
        LANG[INV.BED] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var i = 0; i < 7; i++)
            document.getElementById("claim_reward_" + i).innerHTML = "CLAIM REWARD!";
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        LANG[INV.HAND] = ["Рука"];
        LANG[INV.GROUND] = ["Земля", "Грязно!"];
        LANG[INV.SAND] = ["Песок", "Он в моих глазах!"];
        LANG[INV.WOOD] = ["Дерево", "Постоянно нужно больше!"];
        LANG[INV.STONE] = ["Камень", "Твердый"];
        LANG[INV.GOLD] = ["Золото", "Будьте щедры, давайте его другим"];
        LANG[INV.DIAMOND] = ["Алмаз", "Что вы создадите с помощью него?"];
        LANG[INV.AMETHYST] = ["Аметист", "Он сиреневый, как Lapa"];
        LANG[INV.FLOUR] = ["Мука", "Используется в готовке"];
        LANG[INV.COOKIE] = ["Печенье", "Превосходное бабушкино печенье", "Еда: 50"];
        LANG[INV.CAKE] = ["Торт", "Торт мечты для гурманов", "Еда: 100"];
        LANG[INV.MEAT] = ["Сырое Мясо", "Ты можешь пожарить его с помощью огня", "Вызывает отравление: 10", "Еда: 15"];
        LANG[INV.COOKED_MEAT] = ["Жареное Мясо", "Превосходный стейк, пожалуйста", "Еда: 35"];
        LANG[INV.FOODFISH] = ["Сырая Рыба", "Я думаю она всё ещё жива", "Вызывает отравление: 10", "Еда: 18"];
        LANG[INV.FOODFISH_COOKED] = ["Жареная рыба", "С лимоном она прекрасна", "Еда: 35"];
        LANG[INV.BREAD] = ["Хлеб", "Прекрасный французский хлеб", "Это валюта, используемая на рынке", "Еда: 15"];
        LANG[INV.SANDWICH] = ["Бутерброд", "На вкус как Крабсбургер", "Еда: 100"];
        LANG[INV.CANDY] = ["Конфеты", "Только для детей!", "Еда: 20"];
        LANG[INV.SUGAR_CAN] = ["Сахарная Трость", "Попробуйте это, это вкусно", "Еда: 100"];
        LANG[INV.GARLAND] = ["Гирлянда", "Прекрасная декорация для крыши"];
        LANG[INV.SEED] = ["Семя Ягоды", "Вырастает в ягоды", "Рождение: 2мин", "Рост: 55сек", "Нужна вода: 3мин 20сек", "Прочность: 700", "Продолжительность: 8 дней"];
        LANG[INV.PLANT] = ["Ягода", "Ягода вкусная!", "Еда: 10"];
        LANG[INV.WHEAT_SEED] = ["Пшеничное Семя", "Вырастает в пшеницу", "Рождение: 2мин", "Рост: 16сек", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
        LANG[INV.WILD_WHEAT] = ["Дикая Пшеница", "Перемалывается в муку, когда помещается в мельницу"];
        LANG[INV.PUMPKIN_SEED] = ["Семена Тыквы", "Вырастает в тыкву", "Рождение: 2мин 40сек", "Рост: 2мин", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
        LANG[INV.PUMPKIN] = ["Тыква", "Это напоминает мне Хеллоуин", "Еда: 30"];
        LANG[INV.GARLIC_SEED] = ["Семена Чеснока", "Очень опасно для вампиров", "Урон: 20", "Рождение: 4мин", "Рост: 4 мин", "Нужна вода: 1мин 40сек", "Прочность: 700", "Продолжительность: 8 дней"];
        LANG[INV.GARLIC] = ["Чеснок", "Лечит и снижает получаемый холод", "Еда: 14", "Лечит: 30", "Эффект: 1"];
        LANG[INV.THORNBUSH_SEED] = ["Семена Колючего Куста", "Может нанести урон врагам", "Урон: 20", "Рождение: 4мин", "Рост: 15сек", "Нужна вода: 3мин", "Прочность: 1000", "Продолжительность: 8 дней"];
        LANG[INV.THORNBUSH] = ["Колючий Куст", "Это больно!"];
        LANG[INV.PLOT] = ["Грядка", "Серьезно, используйте это.", "С этим ГМО удобрением ваши растения", "будут расти быстрее и потребуют меньше воды", "Прочность: 2000"];
        LANG[INV.ICE] = ["Лёд", "Используется для изготовления тортов и воды"];
        LANG[INV.SPANNER] = ["Гаечный Ключ", "Для починки дверей, стен, колючек", "Урон: 2"];
        LANG[INV.FUR_WOLF] = ["Шкура Волка", "Щенок? Но где же Щенок?!"];
        LANG[INV.FUR] = ["Шкура Зайца", "Этот кролик был таким милым..."];
        LANG[INV.SPECIAL_FUR] = ["Чистая Шкура", "Вы - фабрика хлеба"];
        LANG[INV.SPECIAL_FUR_2] = ["Чёрная Шкура", "Вы готовы делать зло."];
        LANG[INV.FUR_WINTER] = ["Зимняя Шкура", "Эти животные просто хотели обнять тебя..."];
        LANG[INV.SCALES] = ["Чешуя", "Она пахнет рыбой!"];
        LANG[INV.KRAKEN_SKIN] = ["Шкура Кракена", "Вы не испугались?"];
        LANG[INV.FIRE] = ["Костёр", "Согрейтесь!", "Прочность: 150", "Продолжительность: 2мин"];
        LANG[INV.BIG_FIRE] = ["Большой Костёр", "Согрейтесь больше!", "Прочность: 400", "Продолжительность: 6мин"];
        LANG[INV.WORKBENCH] = ["Верстак", "Необходим для создания многих предметов"];
        LANG[INV.CORD] = ["Нить", "Используется в изготовлении Шапок и Рюкзака"];
        LANG[INV.BLUE_CORD] = ["Алмазная Нить", "Используется в изготовлении специальных шапок"];
        LANG[INV.CHEST] = ["Сундук", "Позволяет хранить предметы", "Прочность: 500"];
        LANG[INV.SWORD_WOOD] = ["Деревянный Меч", "Это работает?", "Урон: 12", "Урон по строениям: 4"];
        LANG[INV.SWORD] = ["Каменный Меч", "Будьте добры к другим", "Урон: 19", "Урон по строениям: 6"];
        LANG[INV.SWORD_GOLD] = ["Золотой Меч", "Король леса", "Урон: 22", "Урон по строениям: 7"];
        LANG[INV.SWORD_DIAMOND] = ["Алмазный Меч", "Ты можешь почувствовать силу", "Урон: 24", "Урон по строениям: 8"];
        LANG[INV.PIRATE_SWORD] = ["Пиратский Меч", "Aррррр!", "Дальность атаки больше чем у нормального меча", "Урон: 24", "Урон по строениям: 8"];
        LANG[INV.SWORD_AMETHYST] = ["Аметистовый Меч", "Сиреневый - самый красивый цвет в мире", "Урон: 27", "Урон по строениям: 9"];
        LANG[INV.DRAGON_SWORD] = ["Меч Дракона", "Без пощады!", "Урон: 30", "Урон по строениям: 10"];
        LANG[INV.DRAGON_SPEAR] = ["Копьё Дракона", "Убивай всех!", "Урон: 22", "Урон по строениям: 6"];
        LANG[INV.PICK_WOOD] = ["Деревянная Кирка", "Может добывать только дерево и камень", "Урон: 1"];
        LANG[INV.PICK] = ["Каменная Кирка", "Может добывать дерево, камень и золото", "Урон: 2"];
        LANG[INV.PICK_GOLD] = ["Золотая Кирка", "Также может добывать алмазы", "Урон: 3", "Урон по строениям: 1"];
        LANG[INV.PICK_DIAMOND] = ["Алмазная Кирка", "Можно добывать всё", "Урон: 4", "Урон по строениям: 1"];
        LANG[INV.PICK_AMETHYST] = ["Аметистовая Кирка", "Можно добывать всё, ещё и выглядит красиво!", "Урон: 5", "Урон по строениям: 1"];
        LANG[INV.HAMMER] = ["Каменный молот", "Используется для разрушения зданий", "Плохо разрушает алмазные и аметистовые здания", "Урон: 2", "Урон по строениям: 20"];
        LANG[INV.HAMMER_GOLD] = ["Золотой Молот", "Используется для разрушения зданий", "Плохо разрушает аметистовые здания", "Урон: 3", "Урон по строениям: 30"];
        LANG[INV.HAMMER_DIAMOND] = ["Алмазный Молот", "Используется для разрушения зданий", "Урон: 4", "Урон по строениям: 40"];
        LANG[INV.HAMMER_AMETHYST] = ["Аметистовый Молот", "Используется для разрушения зданий", "Урон: 5", "Урон по строениям: 50"];
        LANG[INV.SUPER_HAMMER] = ["Супер Молот", "У вас есть планы разрушить мир?", "Урон: 12", "Урон по строениям: 70"];
        LANG[INV.WOOD_SPEAR] = ["Деревянное Копьё", "Выглядит как деревянная палочка, но делает больно.", "Урон: 10", "Урон по строениям: 2"];
        LANG[INV.SPEAR] = ["Каменное Копьё", "Начало эволюции!", "Урон: 14", "Урон по строениям: 4"];
        LANG[INV.GOLD_SPEAR] = ["Золотое Копьё", "Осторожно, это больно!", "Урон: 15", "Урон по строениям: 5"];
        LANG[INV.DIAMOND_SPEAR] = ["Алмазное Копьё", "Вы готовы убивать дракона.", "Урон: 17", "Урон по строениям: 5"];
        LANG[INV.AMETHYST_SPEAR] = ["Аметистовое Копьё", "Драконы больше не пугают вас", "Урон: 18", "Урон по строениям: 6"];
        LANG[INV.SHOVEL] = ["Каменная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 2"];
        LANG[INV.SHOVEL_GOLD] = ["Золотая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 3", "Урон по строениям: 1"];
        LANG[INV.SHOVEL_DIAMOND] = ["Алмазная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 4", "Урон по строениям: 1"];
        LANG[INV.SHOVEL_AMETHYST] = ["Аметистовая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 5", "Урон по стреониям: 1"];
        LANG[INV.WOOD_HELMET] = ["Деревянный Шлем", "Лучше чем ничего", "Защита от игроков: 1", "Защита от животных: 4"];
        LANG[INV.STONE_HELMET] = ["Каменный Шлем", "Вы готовы к битве!", "Защита от игроков: 2", "Защита от животных: 8"];
        LANG[INV.GOLD_HELMET] = ["Золотой Шлем", "Также известен как шлем жестоких людей", "Защита от игроков: 4", "Защита от животных: 13"];
        LANG[INV.DIAMOND_HELMET] = ["Алмазный Шлем", "Не слишком хвастайтесь", "Защита от игроков: 5", "Защита от животных: 19"];
        LANG[INV.AMETHYST_HELMET] = ["Аметистовый Шлем", "Ты больше ничего не боишься", "Защита от игроков: 6", "Защита от животных: 23"];
        LANG[INV.DRAGON_HELMET] = ["Шлем Дракона", "Ты покоришь мир", "Защита от игроков: 8", "Защита от животных: 27"];
        LANG[INV.EXPLORER_HAT] = ["Шапка Исследователя", "Животные не обращают на вас внимания", "но не шумите!", "Защищает от холода вне воды."];
        LANG[INV.CHRISTMAS_HAT] = ["Рождественская Шапка", "Ох-хо-хо, Счастливого Рождества", "Защищает от холода вне воды."];
        LANG[INV.ELF_HAT] = ["Шапка Эльфа", "Не позволяйте себе эксплуатироваться, ведь вы маленький снежный эльф!", "Защищает от холода вне воды."];
        LANG[INV.HOOD] = ["Капюшон", "Вы разбойник", "Вы можете украсть что-то, если", "1) Ночь", "2) Вы ничего не носите", "3)Если вас не тронули в течение восьми секунд", "4) Вы не рядом с огнём", "5) Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
        LANG[INV.EARMUFFS] = ["Теплые Наушники", "Какая-то маленькая шапка.", "Защищает от холода вне воды."];
        LANG[INV.COAT] = ["Шапка", "Так же называется пальтом.", "Защищает от холода вне воды."];
        LANG[INV.CAP_SCARF] = ["Зимний Шарф и Шапка", "Очень комфортно", "Очень тепло"];
        LANG[INV.PEASANT] = ["Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
        LANG[INV.WINTER_HOOD] = ["Зимний Капюшон", "Вы можете украсть что-то, если", "- Ночь", "- Вы ничего не носите", "- Если вас не тронули в течение четырёх секунд", "- Вы не рядом с огнём", "- Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
        LANG[INV.WINTER_PEASANT] = ["Зимняя Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
        LANG[INV.DIVING_MASK] = ["Акваланг", "Вы быстрее передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 2, Защита от животных: 8"];
        LANG[INV.SUPER_DIVING_SUIT] = ["Супер Акваланг", "Вы очень быстро передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 4, Защита от животных: 16"];
        LANG[INV.DRAGON_ORB] = ["Шар Дракона", "Даётся за квест"];
        LANG[INV.DRAGON_HEART] = ["Сердце Дракона", "Превращает вас в призрака после смерти!", "Вы призрак на 60 секунд", "Найдите камень воскрешения"];
        LANG[INV.GEMME_GREEN] = ["Зелёный Драгоценный Камень", "Вы без читов, правильно?"];
        LANG[INV.GEMME_ORANGE] = ["Оранжевый Драгоценный Камень", "Только настоящий пират найдёт это!"];
        LANG[INV.GEMME_BLUE] = ["Синий Драгоценный Камень", "Для очень добрых людей"];
        LANG[INV.CROWN_GREEN] = ["Зеленая корона", "Вы лечите себя очень быстро", "Лечит: 40", "Защита от игроков: 4, Защита от животных: 16"];
        LANG[INV.CROWN_ORANGE] = ["Оранжевая Корона", "Вам очень повезло", "Защита от игроков: 4, Защита от животных: 16"];
        LANG[INV.CROWN_BLUE] = ["Синяя Корона", "Как только вы умрёте, вы станете призраком", "Но вы потеряете своё оружие", "Защита от игроков: 4, Защита от животных: 16"];
        LANG[INV.BUCKET_FULL] = ["Ведро", "Используется для заполнения колодца", "Одно ведро равняется двенадцати бутылкам"];
        LANG[INV.BUCKET_EMPTY] = ["Пустое ведро", "Вам надо заполнить это ведро возле воды"];
        LANG[INV.BOTTLE_FULL] = ["Бутылка", "Позволяет пить воду в любом месте", "Вода: 50"];
        LANG[INV.BOTTLE_EMPTY] = ["Пустая бутылка", "Вы можете заполнить бутылку возле воды"];
        LANG[INV.WATERING_CAN] = ["Пустая Лейка", "Вы можете заполнить лейку возле воды"];
        LANG[INV.WATERING_CAN_FULL] = ["Лейка", "Позволяет поливать растения", "Урон: 1"];
        LANG[INV.BAG] = ["Рюкзак", "Больше места для ваших предметов!"];
        LANG[INV.PAPER] = ["Бумага", "Используется при создании книги"];
        LANG[INV.BOOK] = ["Книга", "Сокращает время изготовления предметов", "Должно быть одето для работы", "Урон: 1"];
        LANG[INV.BANDAGE] = ["Бинт", "Восстанавливает ваше здоровье быстрее", "Лечит: 30", "Эффект: 5"];
        LANG[INV.LOCK] = ["Замок", "Позволяет вам закрыть ваш сундук"];
        LANG[INV.LOCKPICK] = ["Ключ", "Даёт вам открыть один запертый сундук"];
        LANG[INV.TOTEM] = ["Тотем", "Позволяет вам создать команду", "Совместное использование дверей и сундуков", "Вредное здание не повредит вашего друга"];
        LANG[INV.BRIDGE] = ["Мост", "Очень полезно на воде", "Позволяет вам пить без потери воздуха", "Передвигаетесь быстрее по воде"];
        LANG[INV.SIGN] = ["Табличка", "Оставьте сообщение другим", "Прочность: 200"];
        LANG[INV.ROOF] = ["Крыша", "Немного скрывает вас и согревает!"];
        LANG[INV.WELL] = ["Колодец", "Позволяет заполнить бутылку", "Прочность: 1000"];
        LANG[INV.WALL] = ["Деревянная Стена", "Это просто стена", "Прочность: 1000"];
        LANG[INV.STONE_WALL] = ["Каменная Стена", "Это немного посерьезнее.", "Прочность: 1500"];
        LANG[INV.GOLD_WALL] = ["Золотая Стена", "Золото на ваших стенах? Она ослепляет.", "Прочность: 2000"];
        LANG[INV.DIAMOND_WALL] = ["Алмазная Стена", "Очень блестит, следите за вашими глазами", "Прочность: 2500"];
        LANG[INV.AMETHYST_WALL] = ["Аметистовая стена", "Вы должны быть слишком напуганы, чтобы уйти!", "Прочность: 3500"];
        LANG[INV.SPIKE] = ["Деревянная Стена с Шипами", "Может наносить урон врагам", "Урон: 10, Урон за один удар: 2", "Прочность: 150"];
        LANG[INV.STONE_SPIKE] = ["Каменная Стена с Шипами", "Я не хотел бы быть вашим врагом", "Урон: 20", "Урон за один удар: 3", "Прочность: 300"];
        LANG[INV.GOLD_SPIKE] = ["Золотая Стена с Шипами", "Вы очень жестоки.", "Урон: 30", "Урон за один удар: 3", "Прочность: 600"];
        LANG[INV.DIAMOND_SPIKE] = ["Алмазная Стена с Шипами", "Вам не нравится иметь компанию.", "Урон: 40", "Урон за один удар: 4", "Прочность: 1200"];
        LANG[INV.AMETHYST_SPIKE] = ["Аметистовая Стена с Шипами", "Какого черта, что ваши соседи сделали с вами?", "Урон: 50", "Урон за один удар: 4", "Прочность: 2400"];
        LANG[INV.WOOD_DOOR] = ["Деревянная Дверь", "Может быть открыта и закрыта вами или друзьями", "Прочность: 1000"];
        LANG[INV.STONE_DOOR] = ["Каменная Дверь", "Более серьезная и сильная дверь", "Прочность: 1500"];
        LANG[INV.GOLD_DOOR] = ["Золотая Дверь", "Вы перестраиваете \"Эль Дорадо?\"", "Прочность: 2000"];
        LANG[INV.DIAMOND_DOOR] = ["Алмазная Дверь", "Для роскошного дома", "Прочность: 2500"];
        LANG[INV.AMETHYST_DOOR] = ["Аметистовая Дверь", "Ваш дом в безопасности?", "Прочность: 3000"];
        LANG[INV.FURNACE] = ["Печь", "Согревает", "Тратит дерево каждые 5 секунд", "Прочность: 1000"];
        LANG[INV.WINDMILL] = ["Мельница", "Может сделать муку из пшеницы", "Требует 5 секунд для получения муки", "Даёт очки при работе", "Прочность: 2000"];
        LANG[INV.BREAD_OVEN] = ["Хлебная Печь", "Позволяет готовить хлеб из муки", "Требует 10 секунд для получения хлеба", "Даёт очки при работе", "Прочность: 2000"];
        LANG[INV.RESURRECTION] = ["Камень Воскрешения", "Это магия", "Воскрешает вас, если вы призрак", "Вы потеряете своё оружие", "Прочность: 200"];
        LANG[TEXT.YOU_CANNOT_JOIN] = "Вы не можете зайти на этот сервер";
        LANG[TEXT.KICKED] = "Выгнаны: ";
        LANG[TEXT.KEY_ALREADY] = "Ваш ключ уже используется кем-то";
        LANG[TEXT.KEY_WRONG] = "Ваш ключ неправильный";
        LANG[TEXT.OLD_VERSION] = "У вас старая версия, вам нужно очистить кеш";
        LANG[TEXT.NO_MORE_RESOURCES] = "Ресурсов больше нет";
        LANG[TEXT.SURVIVED_1DAY] = "Вы выжили 1 день";
        LANG[TEXT.SURVIVED] = "Вы выжили ";
        LANG[TEXT.DAYS] = " дней";
        LANG[TEXT.DEAD_SAD] = "Вы умерли ;-;";
        LANG[TEXT.SPAM_ME] = "Сервер не может найти точку спавна! Спамьте кнопку играть!";
        LANG[TEXT.SPAM_ME2] = "Сервер заполнен! Спамьте кнопку играть!";
        LANG[TEXT.EMPTY] = "Ресурсы закончились";
        LANG[TEXT.INV_FULL] = "Инвентарь заполнен (правая кнопка мыши для удаления предметов)";
        LANG[TEXT.DEAD] = " умер";
        LANG[TEXT.WRONG_TOOL] = "Это не тот инструмент";
        LANG[TEXT.JOIN_TEAM] = "Вы вошли в команду";
        LANG[TEXT.YOU_DEAD] = "Вы умерли";
        LANG[TEXT.JOINED_TEAM] = " вошёл в команду";
        LANG[TEXT.TEAM_DESTROYED] = "Ваша команда была разрушена";
        LANG[TEXT.LEFT_TEAM] = "Вы покинули команду";
        LANG[TEXT.LEFT_TEAM2] = " покинул команду";
        LANG[TEXT.TOKEN] = "Кто-то использует ваш токен :>";
        LANG[TEXT.CHOOSE] = "Выберите сервер";
        LANG[TEXT.PLAYERS] = "игроков";
        LANG[TEXT.TOTAL_PLAYERS] = "игроков всего";
        LANG[TEXT.TOTAL_MODE] = "игроков в этом режиме";
        LANG[TEXT.COMMING_SOON] = "Скоро...";
        document.getElementById("nickname_input").placeholder = "Имя";
        DIE[0] = ["Вы были убиты без причины"];
        DIE[1] = ["Вы умерли от голода, как название игры подразумевает это"];
        DIE[2] = ["Вы замерзли до смерти. Так грустно", "У вас гипотермия. В следующий раз, постарайтесь быть рядом с огнём."];
        DIE[3] = ["Игрок убил тебя и сказал \'стань лучше.\'", "Ты был убит игроком. Не волнуйся, этот игрок тоже умрёт, в конце концов."];
        DIE[4] = ["Вы стояли слишком близко к огню и сгорели. Плохая идея.", "Ты умер от огня, он причинил вам боль. Напишите историю насчёт этого."];
        DIE[5] = ["Ваше тело станет гнездом для яиц паука", "Паук убил вас. По крайней мере это был не кролик."];
        DIE[6] = ["Волк больше не будет голодать после того, как наелся вами", "Они не собаки. Волки не любят ласкаться."];
        DIE[7] = ["Лиса была слишком быстрой для вас", "Лиса превратила тебя в ящик. С каких пор животные обладают магическими способностями?"];
        DIE[8] = ["Медведь просто хотел обнять тебя.", "Медведь был слишком грустным. Мне не жаль."];
        DIE[9] = ["Вы были сожжены драконом. Так грустно.", "Вы были сплющены драконом. Быть раздавленным - это ужасный способ умереть."];
        DIE[10] = ["Вы прыгнули в стену с шипами. Плохая идея...", "Вы были убиты стеной с шипами. Большинство людей достаточно разумны, чтобы не касаться острых вещей."];
        DIE[11] = ["Даже призрак может умереть.", "Вы не смогли воскреснуть. Это игра, и вы можете возвращаться к жизни после смерти, так что..."];
        DIE[12] = ["Бактерия из вашей сырой пищи убила вас. Эта игра безусловно сложна.", "Вы убили сырую пищу. Она тоже тебя убила."];
        DIE[13] = ["Вы умерли от жажды. Лучше пить собственную мочу."];
        DIE[14] = ["Знаешь ли ты, что у голодающих рот всегда под водой, когда они плавают? Теперь ты знаешь."];
        DIE[15] = ["Не волнуйся, пиранья сочла тебя вкусным.", "Веселый факт: Пираньи едят людей. В том числе тебя."];
        DIE[16] = ["LapaMauve не планировал, что ты убьёшь кракена", "Крак! Кракен сломал твой череп."];
        DIE[17] = ["Твоя кожа разваливается, солнце убило тебя"];
        DIE[18] = ["Чеснок, хранящийся в твоих карманах сварил твой мозг."];
        DIE[19] = ["Не стоит стоять рядом с чесночным зубком, когда вы вампир."];
        DIE[20] = ["Вы вампир, Вы ели чеснок, чего вы ожидали?"];
        DIE[21] = ["Ваше тело застревает в шипах, когда вы пытаетесь убежать, ваша кожа отрывается, и ваше сердце перестает биться."];
        ZOMBIE_GRUMBLE = "Uuunnnggg";
        ZOMBIE_GRUMBLES = ["Uuunnnggg... Я голоден", "Нужны твои мозги Uuunnnggg...", "Свежее мясо здесь... Uuunnnggg", "Uuunnnggg... Ты вкусный", "Uuunnnggg...", "Еда… Uuunnnggg...", "Я чувствую запах крови... Uuunnnggg"];
    };
    var set_spanish = function () {
        LANG[INV.DRAGON_CUBE] = ["You feel a great power emanating from this orb"];
        DIE[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        LANG[INV.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        LANG[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME";
        LANG[TEXT.TWITTER] = " Share on Twitter";
        LANG[TEXT.FACEBOOK] = " Share on Facebook";
        LANG[TEXT.KIT_NEXT] = "You can buy items on the shop in the next game with your points";
        LANG[TEXT.POINTS] = "points";
        LANG[TEXT.SCORE] = "Score";
        LANG[TEXT.KILL] = "Kill";
        LANG[TEXT.DAYS_SURVIVED] = "Days survived";
        LANG[TEXT.MODE_FREE] = "Building method: Free. Press G to change";
        LANG[TEXT.MODE_GRID] = "Building method: Grid. Press G to change";
        LANG[INV.CRAB_LOOT] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        LANG[INV.CRAB_SPEAR] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
        LANG[INV.CROWN_CRAB] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can\'t hit you and you can\'t hit them", "Players Defense: 4", "Animals Defense: 13"];
        LANG[INV.BED] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var i = 0; i < 7; i++)
            document.getElementById("claim_reward_" + i).innerHTML = "CLAIM REWARD!";
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        LANG[INV.HAND] = ["Mano"];
        LANG[INV.GROUND] = ["Tierra", "\xa1\x54\x61\x6e\x20\x6c\x69\x6d\x70\x69\x61\x20\x63\x6f\x6d\x6f\x20\x6d\x69\x73\x20\x6d\x61\x6e\x6f\x73\x21"];
        LANG[INV.SAND] = ["Arena", "\xa1\x54\x65\x6e\x67\x6f\x20\x61\x72\x65\x6e\x61\x20\x65\x6e\x20\x6d\x69\x73\x20\x6f\x6a\x6f\x73\x21"];
        LANG[INV.WOOD] = ["Madera", "\xa1\x4e\x75\x6e\x63\x61\x20\x68\x61\x79\x20\x73\x75\x66\x69\x63\x69\x65\x6e\x74\x65\x21"];
        LANG[INV.STONE] = ["Piedra", "\x54\x61\x6d\x62\x69\xe9\x6e\x20\x6c\x6c\x61\x6d\x61\x64\x61\x20\x72\x6f\x63\x61\x2e"];
        LANG[INV.GOLD] = ["Oro", "\x53\xe9\x20\x67\x65\x6e\x65\x72\x6f\x73\x6f\x2c\x20\x63\x6f\x6d\x70\xe1\x72\x74\x65\x6c\x6f\x20\x63\x6f\x6e\x20\x6c\x6f\x73\x20\x6f\x74\x72\x6f\x73"];
        LANG[INV.DIAMOND] = ["Diamante", "\xbf\x51\x75\x65\x20\x76\x61\x73\x20\x61\x20\x68\x61\x63\x65\x72\x20\x63\x6f\x6e\x20\xe9\x6c\x3f"];
        LANG[INV.AMETHYST] = ["Amatista", "Es Mauve como Lapa"];
        LANG[INV.FLOUR] = ["Harina", "Usada para cocinar."];
        LANG[INV.COOKIE] = ["Galleta", "Una galleta de la abuelita", "Comida: 50"];
        LANG[INV.CAKE] = ["Tarta", "\xa1\x43\x75\x6d\x70\x6c\x65\x61\xf1\x6f\x73\x20\x46\x65\x6c\x69\x7a\x21", "Comida: 100"];
        LANG[INV.MEAT] = ["Carne Cruda", "Se cocina con fuego", "Causa veneno. 10", "Comida: 15"];
        LANG[INV.COOKED_MEAT] = ["Carne Cocinada", "\x65\x73\x20\x6c\x61\x20\x73\x75\x70\x65\x72\x76\x69\x76\x65\x6e\x63\x69\x61\x20\x64\x65\x6c\x20\x6d\xe1\x73\x20\x66\x75\x65\x72\x74\x65\x20\x3a\x27\x28", "Comida: 35"];
        LANG[INV.FOODFISH] = ["Pescado Crudo", "Creo que sigue vivo", "Causa veneno de comida: 10", "Comida: 18"];
        LANG[INV.FOODFISH_COOKED] = ["Pescado Cocinado", "\x43\x6f\x6e\x20\x6c\x69\x6d\xf3\x6e\x20\x73\x65\x72\xed\x61\x20\x70\x65\x72\x66\x65\x63\x74\x6f", "Comida: 35"];
        LANG[INV.BREAD] = ["Pan", "\xa1\x43\x61\x6c\x69\x65\x6e\x74\x65\x2c\x20\x64\x65\x73\x64\x65\x20\x46\x72\x61\x6e\x63\x69\x61\x21", "Es dinero usado en la tienda", "Comida: 15"];
        LANG[INV.SANDWICH] = ["Bocadillo", "Sabe como un Krabby Patty", "Comida: 100"];
        LANG[INV.CANDY] = ["Caramelos", "\xa1\x53\x6f\x6c\x6f\x20\x70\x61\x72\x61\x20\x6e\x69\xf1\x6f\x73\x2f\x61\x73\x21", "Comida: 100"];
        LANG[INV.SUGAR_CAN] = ["\x43\x61\xf1\x61\x20\x64\x65\x20\x41\x7a\xfa\x63\x61\x72", "\x50\x72\x75\xe9\x62\x61\x6c\x61\x2c\x20\x65\x73\x20\x64\x65\x6c\x69\x63\x69\x6f\x73\x61", "Comida: 100"];
        LANG[INV.GARLAND] = ["Guirnalda", "Perfecta para decorar el techo"];
        LANG[INV.SEED] = ["Semillas de Bayas", "Se convierte en bayas", "Nacimiento: 2 Minutos", "Crecimiento: 55 Segundos", "Necesita agua: 3 Minutos 20 Segundos", "Durabilidad: 700", "\x54\x69\x65\x6d\x70\x6f\x20\x64\x65\x20\x76\x69\x64\x61\x3a\x20\x38\x20\x44\xed\x61\x73"];
        LANG[INV.PLANT] = ["Baya", "No es venenosa.", "Comida: 10"];
        LANG[INV.WHEAT_SEED] = ["Semilla de Trigo", "Se convierte en Trigo ", "Nacimiento: 2 Minutos", "Crecimiento: 16 Segundos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "\x54\x69\x65\x6d\x70\x6f\x20\x64\x65\x20\x76\x69\x64\x61\x3a\x20\x38\x20\x44\xed\x61\x73"];
        LANG[INV.WILD_WHEAT] = ["Trigo Silvestre", "Se convierte en harina cuando se coloca en un molino"];
        LANG[INV.PUMPKIN_SEED] = ["Semilla de Calabaza", "Crece a Calabazas", "Nacimiento: 2 Minutos 40 Segundos", "Crecimiento: 2 Minutos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "\x54\x69\x65\x6d\x70\x6f\x20\x64\x65\x20\x76\x69\x64\x61\x3a\x20\x38\x20\x44\xed\x61\x73"];
        LANG[INV.PUMPKIN] = ["Calabaza", "Me recuerda a Halloween", "Comida: 30"];
        LANG[INV.GARLIC_SEED] = ["Semilla de Ajo", "Muy peligroso para vampiros", "\x44\x61\xf1\x6f\x3a\x20\x32\x30", "Nacimiento: 4 Minutos", "Crecimiento: 1 Minutos 10 Segundos", "Necesita Agua: 1 Minutos 40 Segundos", "Durabilidad: 700", "\x54\x69\x65\x6d\x70\x6f\x20\x64\x65\x20\x56\x69\x64\x61\x3a\x20\x38\x20\x44\xed\x61\x73"];
        LANG[INV.GARLIC] = ["Ajo", "Te sana y reduce el frio", "Comida: 14", "\x73\x61\x6e\x61\x63\x69\xf3\x6e\x20\x63\x6f\x6e\x20\x65\x6c\x69\x65\x6d\x70\x6f\x3a\x20\x33\x30", "Efecto: 1"];
        LANG[INV.THORNBUSH_SEED] = ["Semilla de Planta de Espinas", "\x50\x75\x65\x64\x65\x20\x64\x61\xf1\x61\x72\x20\x61\x20\x74\x75\x73\x20\x65\x6e\x65\x6d\x69\x67\x6f\x73", "\x44\x61\xf1\x6f\x20\x70\x6f\x72\x20\x63\x6f\x6e\x74\x61\x63\x74\x6f\x3a\x20\x32\x30", "Nacimiento: 4 Minutos", "Crecimiento: 15 Segundos", "Necesita Agua: 3 Minutos", "Durabilidad: 1000", "\x54\x69\x65\x6d\x70\x6f\x20\x64\x65\x20\x56\x69\x64\x61\x3a\x20\x38\x20\x44\xed\x61\x73"];
        LANG[INV.THORNBUSH] = ["Planta de Espinas", "\xa1\x54\x65\x20\x64\x61\xf1\x61\x21"];
        LANG[INV.PLOT] = ["Parcela", "\x45\x6e\x20\x73\x65\x72\x69\x6f\x2c\x20\xfa\x73\x61\x6c\x61", "Se usa para plantar plantas en invierno o sobre puentes", "\x54\x75\x73\x20\x70\x6c\x61\x6e\x74\x61\x73\x20\x63\x72\x65\x63\x65\x72\xe1\x6e\x20\x6d\x75\x79\x20\x72\xe1\x70\x69\x64\x6f\x20\x79\x20\x6e\x65\x63\x65\x73\x69\x74\x61\x72\xe1\x6e\x20\x6d\x65\x6e\x6f\x73\x20\x61\x67\x75\x61", "Durabilidad: 2000"];
        LANG[INV.ICE] = ["Hielo", "Bueno para hacer tartas y agua"];
        LANG[INV.SPANNER] = ["\x4c\x6c\x61\x76\x65\x20\x64\x65\x20\x52\x65\x70\x61\x72\x61\x63\x69\xf3\x6e", "Puede reparar paredes, puertas y pinchos", "\x44\x61\xf1\x6f\x3a\x20\x32"];
        LANG[INV.FUR_WOLF] = ["Pelaje de Lobo", "\xbf\x50\x65\x72\x72\x69\x74\x6f\x3f\x20\xa1\xbf\x44\x6f\x6e\x64\x65\x20\x65\x73\x74\x61\x20\x65\x6c\x20\x70\x65\x72\x72\x69\x74\x6f\x3f\x21"];
        LANG[INV.FUR] = ["Pelaje de Conejo", "El Conejo era muy lindo..."];
        LANG[INV.SPECIAL_FUR] = ["Pelaje Puro", "\xa1\x45\x72\x65\x73\x20\x75\x6e\x61\x20\x6d\x61\x71\x75\x69\x6e\x61\x20\x64\x65\x20\x70\x61\x6e\x21"];
        LANG[INV.SPECIAL_FUR_2] = ["Pelaje Oscuro", "\xbf\x45\x73\x74\xe1\x73\x20\x6c\x69\x73\x74\x6f\x20\x70\x61\x72\x61\x20\x68\x61\x63\x65\x72\x20\x61\x6c\x67\x6f\x20\x6d\x61\x6c\x6f\x3f"];
        LANG[INV.FUR_WINTER] = ["Pelaje de Invierno", "\x45\x73\x6f\x73\x20\x61\x6e\x69\x6d\x61\x6c\x65\x73\x20\x73\x6f\x6c\x6f\x20\x71\x75\x65\x72\xed\x61\x6e\x20\x75\x6e\x20\x61\x62\x72\x61\x7a\x6f\x2e\x2e\x2e"];
        LANG[INV.SCALES] = ["Escamas", "\xa1\x48\x75\x65\x6c\x65\x20\x61\x20\x70\x65\x73\x63\x61\x64\x6f\x21"];
        LANG[INV.KRAKEN_SKIN] = ["Piel del Kraken", "\xa1\xbf\x4e\x6f\x20\x74\x69\x65\x6e\x65\x73\x20\x6d\x75\x63\x68\x6f\x20\x6d\x69\x65\x64\x6f\x3f\x21"];
        LANG[INV.FIRE] = ["Fogata", "\xa1\x54\x65\x20\x63\x61\x6c\x69\x65\x6e\x74\x61\x21", "Durabilidad: 150", "Tiempo de vida: 2 Minutos"];
        LANG[INV.BIG_FIRE] = ["Fogata Grande", "\xa1\x54\x65\x20\x63\x61\x6c\x69\x65\x6e\x74\x61\x20\x70\x6f\x72\x20\x6d\xe1\x73\x20\x74\x69\x65\x6d\x70\x6f\x21", "Durabilidad: 400", "Tiempo de Vida: 6 Minutos"];
        LANG[INV.WORKBENCH] = ["Mesa de Trabajo", "\xa1\x54\x65\x20\x73\x69\x72\x76\x65\x20\x6d\x75\x63\x68\x6f\x20\x70\x61\x72\x61\x20\x63\x72\x65\x61\x72\x20\x63\x6f\x73\x61\x73\x20\x64\x65\x20\x74\x6f\x64\x6f\x73\x20\x74\x69\x70\x6f\x73\x21"];
        LANG[INV.CORD] = ["Hilo", "Usado para craftear ropa y mochila"];
        LANG[INV.BLUE_CORD] = ["Hilo de Diamante", "Usado para craftear ropa especial"];
        LANG[INV.CHEST] = ["Cofre", "Te permite guardar cosas, o compartirlas", "Durabilidad: 500"];
        LANG[INV.SWORD_WOOD] = ["Espada de Madera", "\xbf\x45\x73\x6f\x20\x66\x75\x6e\x63\x69\x6f\x6e\x61\x3f", "\x44\x61\xf1\x6f\x3a\x20\x31\x32", "\x44\x61\xf1\x6f\x20\x70\x61\x72\x61\x20\x65\x73\x74\x72\x75\x63\x74\x75\x72\x61\x73\x3a\x20\x34"];
        LANG[INV.SWORD] = ["Espada de Piedra", "\x53\xe9\x20\x62\x75\x65\x6e\x6f\x20\x63\x6f\x6e\x20\x6c\x6f\x73\x20\x6f\x74\x72\x6f\x73", "\x44\x61\xf1\x6f\x3a\x20\x31\x39", "\x44\x61\xf1\x6f\x20\x70\x61\x72\x61\x20\x65\x73\x74\x72\x75\x63\x74\x75\x72\x61\x73\x3a\x20\x36"];
        LANG[INV.SWORD_GOLD] = ["Espada de Oro", "\xa1\x52\x65\x79\x20\x64\x65\x20\x6c\x61\x20\x73\x65\x6c\x76\x61\x21", "\x44\x61\xf1\x6f\x3a\x20\x32\x32", "\x44\x61\xf1\x6f\x20\x70\x61\x72\x61\x20\x65\x73\x74\x72\x75\x63\x74\x75\x72\x61\x73\x3a\x20\x37"];
        LANG[INV.SWORD_DIAMOND] = ["Espada de Diamante", "Puedes sentir el poder", "\x44\x61\xf1\x6f\x3a\x20\x32\x34", "\x44\x61\xf1\x6f\x20\x70\x61\x72\x61\x20\x65\x73\x74\x72\x75\x63\x74\x75\x72\x61\x73\x3a\x20\x38"];
        LANG[INV.PIRATE_SWORD] = ["Espada de Pirata", "Arrrrr!", "\xa1\x4d\x65\x6a\x6f\x72\x20\x64\x69\x73\x74\x61\x6e\x63\x69\x61\x20\x71\x75\x65\x20\x75\x6e\x61\x20\x65\x73\x70\x61\x64\x61\x20\x6e\x6f\x72\x6d\x61\x6c", "\x44\x61\xf1\x6f\x3a\x20\x32\x34", "\x44\x61\xf1\x6f\x20\x70\x61\x72\x61\x20\x65\x73\x74\x72\x75\x63\x74\x75\x72\x61\x73\x3a\x20\x38"];
        LANG[INV.SWORD_AMETHYST] = ["Espada de Amatista", "Mauve es el mejor color del mundo :3", "\x44\x61\xf1\x6f\x3a\x20\x32\x37", "\x44\x61\xf1\x6f\x20\x70\x61\x72\x61\x20\x65\x73\x74\x72\x75\x63\x74\x75\x72\x61\x73\x3a\x20\x39"];
        LANG[INV.DRAGON_SWORD] = ["\x45\x73\x70\x61\x64\x61\x20\x64\x65\x6c\x20\x44\x72\x61\x67\xf3\x6e", "\xa1\x54\x69\x65\x6e\x65\x73\x20\x65\x6c\x20\x70\x6f\x64\x65\x72\x20\x64\x65\x20\x75\x6e\x20\x44\x72\x61\x67\xf3\x6e\x21", "\x44\x61\xf1\x6f\x3a\x20\x33\x30", "\x44\x61\xf1\x6f\x20\x70\x61\x72\x61\x20\x65\x73\x74\x72\x75\x63\x74\x75\x72\x61\x73\x3a\x20\x31\x30"];
        LANG[INV.DRAGON_SPEAR] = ["\x4c\x61\x6e\x7a\x61\x20\x64\x65\x6c\x20\x44\x72\x61\x67\xf3\x6e", "\xa1\x4d\xe1\x74\x61\x6c\x6f\x73\x20\x61\x20\x74\x6f\x64\x6f\x73\x21", "\x44\x61\xf1\x6f\x3a\x20\x32\x32", "\x44\x61\xf1\x6f\x20\x70\x61\x72\x61\x20\x65\x73\x74\x72\x75\x63\x74\x75\x72\x61\x73\x3a\x20\x36"];
        LANG[INV.PICK_WOOD] = ["Pico de Madera", "Solo puede minar madera y piedra", "\x44\x61\xf1\x6f\x3a\x20\x31"];
        LANG[INV.PICK] = ["Pico de Piedra", "Puede minar hasta oro", "\x44\x61\xf1\x6f\x3a\x20\x32"];
        LANG[INV.PICK_GOLD] = ["Pico de Oro", "Puede minar hasta Diamante", "\x44\x61\xf1\x6f\x3a\x20\x33", "\x44\x61\xf1\x6f\x20\x70\x61\x72\x61\x20\x65\x73\x74\x72\x75\x63\x74\x75\x72\x61\x73\x3a\x20\x31"];
        LANG[INV.PICK_DIAMOND] = ["Pico de Diamante", "\xa1\x50\x75\x65\x64\x65\x20\x6d\x69\x6e\x61\x72\x6c\x6f\x20\x74\x6f\x64\x6f\x21", "\x44\x61\xf1\x6f\x3a\x20\x34", "\x44\x61\xf1\x6f\x20\x70\x61\x72\x61\x20\x65\x73\x74\x72\x75\x63\x74\x75\x72\x61\x73\x3a\x20\x31"];
        LANG[INV.PICK_AMETHYST] = ["Pico de Amatista", "\xa1\x50\x75\x65\x64\x65\x20\x6d\x69\x6e\x61\x72\x6c\x6f\x20\x74\x6f\x64\x6f\x2c\x20\x70\x61\x72\x65\x63\x65\x20\x66\x61\x6e\x74\x61\x73\x74\x69\x63\x6f\x21", "\x44\x61\xf1\x6f\x3a\x20\x35", "\x44\x61\xf1\x6f\x20\x70\x61\x72\x61\x20\x65\x73\x74\x72\x75\x63\x74\x75\x72\x61\x73\x3a\x20\x31"];
        LANG[INV.HAMMER] = ["Martillo de Piedra", "Bueno para destruir estructuras", "No funciona bien con diamante y amatista", "\x44\x61\xf1\x6f\x3a\x20\x32", "\x44\x61\xf1\x6f\x20\x70\x61\x72\x61\x20\x65\x73\x74\x72\x75\x63\x74\x75\x72\x61\x73\x3a\x20\x32\x30"];
        LANG[INV.HAMMER_GOLD] = ["Martillo de Oro", "Bueno para destruir estructuras", "No funciona bien con amatista ", "\x44\x61\xf1\x6f\x3a\x20\x33", "\x44\x61\xf1\x6f\x20\x70\x61\x72\x61\x20\x65\x73\x74\x72\x75\x63\x74\x75\x72\x61\x73\x3a\x20\x33\x30"];
        LANG[INV.HAMMER_DIAMOND] = ["Martillo de Diamante", "Bueno para destruir estructuras", "\x44\x61\xf1\x6f\x3a\x20\x34", "\x44\x61\xf1\x6f\x20\x70\x61\x72\x61\x20\x65\x73\x74\x72\x75\x63\x74\x75\x72\x61\x73\x3a\x20\x34\x30"];
        LANG[INV.HAMMER_AMETHYST] = ["Martillo de Amatista", "Bueno para destruir estructuras", "\x44\x61\xf1\x6f\x3a\x20\x35", "\x44\x61\xf1\x6f\x20\x70\x61\x72\x61\x20\x65\x73\x74\x72\x75\x63\x74\x75\x72\x61\x73\x3a\x20\x35\x30"];
        LANG[INV.SUPER_HAMMER] = ["Super Martillo", "\xbf\x48\x61\x73\x20\x70\x6c\x61\x6e\x65\x61\x64\x6f\x20\x64\x65\x73\x74\x72\x75\x69\x72\x20\x65\x6c\x20\x6d\x75\x6e\x64\x6f\x3f", "\x44\x61\xf1\x6f\x3a\x20\x31\x32", "\x44\x61\xf1\x6f\x20\x70\x61\x72\x61\x20\x65\x73\x74\x72\x75\x63\x74\x75\x72\x61\x73\x3a\x20\x37\x30"];
        LANG[INV.WOOD_SPEAR] = ["Lanza de Madera", "Como un palo de madera, pero mata.", "\x44\x61\xf1\x6f\x3a\x20\x31\x30", "\x44\x61\xf1\x6f\x20\x70\x61\x72\x61\x20\x65\x73\x74\x72\x75\x63\x74\x75\x72\x61\x73\x3a\x20\x32"];
        LANG[INV.SPEAR] = ["Lanza de Piedra", "\xa1\x45\x6c\x20\x63\x6f\x6d\x69\x65\x6e\x7a\x6f\x20\x64\x65\x20\x6c\x61\x20\x65\x76\x6f\x6c\x75\x63\x69\xf3\x6e\x21", "\x44\x61\xf1\x6f\x3a\x20\x31\x34", "\x44\x61\xf1\x6f\x20\x70\x61\x72\x61\x20\x65\x73\x74\x72\x75\x63\x74\x75\x72\x61\x73\x3a\x20\x34"];
        LANG[INV.GOLD_SPEAR] = ["Lanza de Oro", "\xa1\x43\x75\x69\x64\x61\x64\x6f\x2c\x20\x74\x65\x20\x68\x61\x63\x65\x20\x6d\x75\x63\x68\x6f\x20\x64\x61\xf1\x6f\x21", "\x44\x61\xf1\x6f\x3a\x20\x31\x35", "\x44\x61\xf1\x6f\x20\x70\x61\x72\x61\x20\x65\x73\x74\x72\x75\x63\x74\x75\x72\x61\x73\x3a\x20\x35"];
        LANG[INV.DIAMOND_SPEAR] = ["Lanza de Diamante", "\xa1\x45\x73\x74\x61\x73\x20\x70\x72\x65\x70\x61\x72\x61\x64\x6f\x20\x70\x61\x72\x61\x20\x6d\x61\x74\x61\x72\x20\x61\x6c\x20\x44\x72\x61\x67\x6f\x6e\x21", "\x44\x61\xf1\x6f\x3a\x20\x31\x37", "\x44\x61\xf1\x6f\x20\x70\x61\x72\x61\x20\x65\x73\x74\x72\x75\x63\x74\x75\x72\x61\x73\x3a\x20\x35"];
        LANG[INV.AMETHYST_SPEAR] = ["Lanza de Amatista", "Los dragones te tienen miedo", "\x44\x61\xf1\x6f\x3a\x20\x31\x38", "\x44\x61\xf1\x6f\x20\x70\x61\x72\x61\x20\x65\x73\x74\x72\x75\x63\x74\x75\x72\x61\x73\x3a\x20\x36"];
        LANG[INV.SHOVEL] = ["Pala de Piedra", "Cava para conseguir tierra, arena y hielo", "\x54\x61\x6d\x62\x69\xe9\x6e\x20\x70\x75\x65\x64\x65\x73\x20\x63\x6f\x6e\x73\x65\x67\x75\x69\x72\x20\x6d\x69\x6e\x65\x72\x61\x6c\x65\x73", "\x44\x61\xf1\x6f\x3a\x20\x32"];
        LANG[INV.SHOVEL_GOLD] = ["Pala de Oro", "Cava para conseguir tierra, arena y hielo", "\x54\x61\x6d\x62\x69\xe9\x6e\x20\x70\x75\x65\x64\x65\x73\x20\x63\x6f\x6e\x73\x65\x67\x75\x69\x72\x20\x6d\x69\x6e\x65\x72\x61\x6c\x65\x73", "\x44\x61\xf1\x6f\x3a\x20\x33", "\x44\x61\xf1\x6f\x20\x70\x61\x72\x61\x20\x65\x73\x74\x72\x75\x63\x74\x75\x72\x61\x73\x3a\x20\x31"];
        LANG[INV.SHOVEL_DIAMOND] = ["Pala de Diamante", "Cava para conseguir tierra, arena y hielo", "\x54\x61\x6d\x62\x69\xe9\x6e\x20\x70\x75\x65\x64\x65\x73\x20\x63\x6f\x6e\x73\x65\x67\x75\x69\x72\x20\x6d\x69\x6e\x65\x72\x61\x6c\x65\x73", "\x44\x61\xf1\x6f\x3a\x20\x34", "\x44\x61\xf1\x6f\x20\x70\x61\x72\x61\x20\x65\x73\x74\x72\x75\x63\x74\x75\x72\x61\x73\x3a\x20\x31"];
        LANG[INV.SHOVEL_AMETHYST] = ["Pala de Amatista", "Cava para conseguir tierra, arena y hielo", "\x54\x61\x6d\x62\x69\xe9\x6e\x20\x70\x75\x65\x64\x65\x73\x20\x63\x6f\x6e\x73\x65\x67\x75\x69\x72\x20\x6d\x69\x6e\x65\x72\x61\x6c\x65\x73", "\x44\x61\xf1\x6f\x3a\x20\x35", "\x44\x61\xf1\x6f\x20\x70\x61\x72\x61\x20\x65\x73\x74\x72\x75\x63\x74\x75\x72\x61\x73\x3a\x20\x31"];
        LANG[INV.WOOD_HELMET] = ["Casco de Madera", "\xa1\x4d\x65\x6a\x6f\x72\x20\x71\x75\x65\x20\x6e\x61\x64\x61\x21", "\x50\x72\x6f\x74\x65\x63\x63\x69\xf3\x6e\x20\x63\x6f\x6e\x74\x72\x61\x20\x6a\x75\x67\x61\x64\x6f\x72\x65\x73\x3a\x20\x31", "\x50\x72\x6f\x74\x65\x63\x63\x69\xf3\x6e\x20\x63\x6f\x6e\x74\x72\x61\x20\x61\x6e\x69\x6d\x61\x6c\x65\x73\x3a\x20\x34"];
        LANG[INV.STONE_HELMET] = ["Casco de Piedra", "\xa1\x45\x73\x74\x61\x73\x20\x6c\x69\x73\x74\x6f\x20\x70\x61\x72\x61\x20\x6c\x61\x20\x62\x61\x74\x61\x6c\x6c\x61\x21", "\x50\x72\x6f\x74\x65\x63\x63\x69\xf3\x6e\x20\x63\x6f\x6e\x74\x72\x61\x20\x6a\x75\x67\x61\x64\x6f\x72\x65\x73\x3a\x20\x32", "\x50\x72\x6f\x74\x65\x63\x63\x69\xf3\x6e\x20\x63\x6f\x6e\x74\x72\x61\x20\x61\x6e\x69\x6d\x61\x6c\x65\x73\x3a\x20\x38"];
        LANG[INV.GOLD_HELMET] = ["Casco de Oro", "AKA el casco de los salvajes", "\x50\x72\x6f\x74\x65\x63\x63\x69\xf3\x6e\x20\x63\x6f\x6e\x74\x72\x61\x20\x6a\x75\x67\x61\x64\x6f\x72\x65\x73\x3a\x20\x34", "\x50\x72\x6f\x74\x65\x63\x63\x69\xf3\x6e\x20\x63\x6f\x6e\x74\x72\x61\x20\x61\x6e\x69\x6d\x61\x6c\x65\x73\x3a\x20\x31\x33"];
        LANG[INV.DIAMOND_HELMET] = ["Casco de Diamante", "No ataques tanto", "\x50\x72\x6f\x74\x65\x63\x63\x69\xf3\x6e\x20\x64\x65\x20\x6a\x75\x67\x61\x64\x6f\x72\x65\x73\x3a\x20\x35", "\x50\x72\x6f\x74\x65\x63\x63\x69\xf3\x6e\x20\x63\x6f\x6e\x74\x72\x61\x20\x61\x6e\x69\x6d\x61\x6c\x65\x73\x3a\x20\x31\x39"];
        LANG[INV.AMETHYST_HELMET] = ["Casco de Amatista", "\xa1\x4e\x6f\x20\x74\x69\x65\x6e\x65\x73\x20\x6d\x69\x65\x64\x6f\x20\x64\x65\x20\x6e\x61\x64\x61\x21", "\x50\x72\x6f\x74\x65\x63\x63\x69\xf3\x6e\x20\x63\x6f\x6e\x74\x72\x61\x20\x6a\x75\x67\x61\x64\x6f\x72\x65\x73\x3a\x20\x36", "\x50\x72\x6f\x74\x65\x63\x63\x69\xf3\x6e\x20\x63\x6f\x6e\x74\x72\x61\x20\x61\x6e\x69\x6d\x61\x6c\x65\x73\x3a\x20\x32\x33"];
        LANG[INV.DRAGON_HELMET] = ["\x43\x61\x73\x63\x6f\x20\x64\x65\x6c\x20\x44\x72\x61\x67\xf3\x6e", "\xa1\x56\x61\x73\x20\x61\x20\x64\x6f\x6d\x69\x6e\x61\x72\x20\x65\x6c\x20\x6d\x75\x6e\x64\x6f\x21", "\x50\x72\x6f\x74\x65\x63\x63\x69\xf3\x6e\x20\x63\x6f\x6e\x74\x72\x61\x20\x6a\x75\x67\x61\x64\x6f\x72\x65\x73\x3a\x20\x38", "\x50\x72\x6f\x74\x65\x63\x63\x69\xf3\x6e\x20\x63\x6f\x6e\x74\x72\x61\x20\x61\x6e\x69\x6d\x61\x6c\x65\x73\x3a\x20\x32\x37"];
        LANG[INV.EXPLORER_HAT] = ["Gorro del Explorador", "\x4c\x6f\x73\x20\x61\x6e\x69\x6d\x61\x6c\x65\x73\x20\x6e\x6f\x20\x74\x65\x20\x61\x74\x61\x63\x61\x72\xe1\x6e", "\xa1\x50\x65\x72\x6f\x20\x6e\x6f\x20\x61\x74\x61\x71\x75\x65\x73\x21", " Te calienta en el invierno y fuera del agua"];
        LANG[INV.CHRISTMAS_HAT] = ["Gorro de Navidad", "\xa1\x48\x6f\x2c\x20\x68\x6f\x2c\x20\x68\x6f\x2c\x20\x66\x65\x6c\x69\x7a\x20\x4e\x61\x76\x69\x64\x61\x64\x21", "Te calienta en el invierno y fuera del  agua"];
        LANG[INV.ELF_HAT] = ["Gorro del Duende", "\xa1\x4e\x6f\x20\x64\x65\x6a\x65\x73\x20\x71\x75\x65\x20\x74\x65\x20\x64\x65\x73\x63\x75\x62\x72\x65\x6e\x20\x71\x75\x65\x20\x65\x72\x65\x73\x2c\x20\x64\x75\x65\x6e\x64\x65\x20\x64\x65\x6c\x20\x68\x69\x65\x6c\x6f\x21", "Te calienta en el invierno y fuera del agua"];
        LANG[INV.HOOD] = ["Capucha", "\xa1\x45\x72\x65\x73\x20\x75\x6e\x20\x6c\x61\x64\x72\x6f\x6e\x21", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado en los  8 segundos anteriores", "4) No estas cerca de una fogata", "5) Si tu objetivo no lleva puesto una gorra de campesino", "Te calienta en invierno y fuera del agua"];
        LANG[INV.EARMUFFS] = ["Orejeras", "\x43\x6f\x6d\x6f\x20\x75\x6e\x20\x61\x62\x72\x69\x67\x6f\x20\x70\x65\x71\x75\x65\xf1\x6f\x2e", "Te calienta en invierno y fuera del agua"];
        LANG[INV.COAT] = ["Chapka", "\x54\x61\x6d\x62\x69\xe9\x6e\x20\x6c\x6c\x61\x6d\x61\x64\x6f\x20\x61\x62\x72\x69\x67\x6f\x2e", "Te calienta en el invierno y fuera del agua"];
        LANG[INV.CAP_SCARF] = ["Gorro y Bufanda ", "\x4d\x75\x79\x20\x63\xf3\x6d\x6f\x64\x6f\x2c\x20\x6d\x75\x79\x20\x63\x61\x6c\x69\x65\x6e\x74\x65"];
        LANG[INV.PEASANT] = ["Gorra de Campesino", "\x54\x75\x73\x20\x70\x6c\x61\x6e\x74\x61\x73\x20\x63\x72\x65\x63\x65\x6e\x20\x6d\x61\x73\x20\x72\xe1\x70\x69\x64\x6f", "Te Calienta en el invierno y fuera del agua"];
        LANG[INV.WINTER_HOOD] = ["Capucha de Invierno", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado antes de 8 segundos", "4) No estas cerca de un fuego", "5) Si tu objetivo no lleva puesto una Gorra de Campesino", "Te calienta en invierno y fuera del agua"];
        LANG[INV.WINTER_PEASANT] = ["Gorra de Invierno del Campesino", "\x54\x75\x73\x20\x70\x6c\x61\x6e\x74\x61\x73\x20\x63\x72\x65\x63\x65\x6e\x20\x61\xfa\x6e\x20\x6d\xe1\x73\x20\x72\xe1\x70\x69\x64\x6f", "Te calienta en invierno y fuera del agua"];
        LANG[INV.DIVING_MASK] = ["\x4d\xe1\x73\x63\x61\x72\x61\x20\x64\x65\x20\x42\x75\x63\x65\x6f", "\x45\x72\x65\x73\x20\x75\x6e\x20\x74\x69\x62\x75\x72\xf3\x6e\x20\x65\x6e\x20\x65\x6c\x20\x61\x67\x75\x61", "Calienta en el agua", "\x50\x72\x6f\x74\x65\x63\x63\x69\xf3\x6e\x20\x63\x6f\x6e\x74\x72\x61\x20\x6a\x75\x67\x61\x64\x6f\x72\x65\x73\x3a\x20\x32\x2c\x20\x50\x72\x6f\x74\x65\x63\x63\x69\xf3\x6e\x20\x63\x6f\x6e\x74\x72\x61\x20\x61\x6e\x69\x6d\x61\x6c\x65\x73\x3a\x20\x38"];
        LANG[INV.SUPER_DIVING_SUIT] = ["\x53\xfa\x70\x65\x72\x20\x4d\xe1\x73\x63\x61\x72\x61\x20\x64\x65\x20\x42\x75\x63\x65\x6f", "\x45\x72\x65\x73\x20\x6d\x75\x79\x20\x72\xe1\x70\x69\x64\x6f\x20\x65\x6e\x20\x61\x67\x75\x61", "Calienta en el agua", "Defensa del Jugador: 4, Defensa de los animales: 16"];
        LANG[INV.DRAGON_ORB] = ["\x45\x73\x66\x65\x72\x61\x20\x64\x65\x6c\x20\x44\x72\x61\x67\xf3\x6e", "\x44\x61\x64\x61\x20\x65\x6e\x20\x6c\x61\x20\x6d\x69\x73\x69\xf3\x6e"];
        LANG[INV.DRAGON_HEART] = ["\x43\x6f\x72\x61\x7a\xf3\x6e\x20\x64\x65\x6c\x20\x44\x72\x61\x67\xf3\x6e", "\xa1\x54\x65\x20\x63\x6f\x6e\x76\x69\x65\x72\x74\x65\x20\x65\x6e\x20\x75\x6e\x20\x66\x61\x6e\x74\x61\x73\x6d\x61\x20\x63\x75\x61\x6e\x64\x6f\x20\x6d\x75\x65\x72\x65\x73\x21", "Eres un fantasma por 60 segundos", "\x45\x6e\x63\x75\x65\x6e\x74\x72\x61\x20\x75\x6e\x61\x20\x50\x69\x65\x64\x72\x61\x20\x64\x65\x20\x72\x65\x73\x75\x72\x72\x65\x63\x69\xf3\x6e"];
        LANG[INV.GEMME_GREEN] = ["Gema Verde", "\xbf\xbf\x4e\x6f\x20\x68\x61\x73\x20\x68\x65\x63\x68\x6f\x20\x74\x72\x61\x6d\x70\x61\x73\x2c\x20\x76\x65\x72\x64\x61\x64\x3f\x3f"];
        LANG[INV.GEMME_ORANGE] = ["Gema Naranja", "\xa1\x53\x6f\x6c\x6f\x20\x75\x6e\x20\x70\x69\x72\x61\x74\x61\x20\x76\x65\x72\x64\x61\x64\x65\x72\x6f\x20\x6c\x6f\x20\x70\x75\x65\x64\x65\x20\x65\x6e\x63\x6f\x6e\x74\x72\x61\x72\x21"];
        LANG[INV.GEMME_BLUE] = ["Gema Azul", "Para gente muy amable"];
        LANG[INV.CROWN_GREEN] = ["Corona Verde", "\x54\x65\x20\x73\x61\x6e\x61\x73\x20\x6d\x75\x79\x20\x72\xe1\x70\x69\x64\x6f", "\x53\x61\x6e\x61\x63\x69\xf3\x6e\x20\x63\x6f\x6e\x20\x65\x6c\x20\x74\x69\x65\x6d\x70\x6f\x3a\x20\x34\x30", "\x50\x72\x6f\x74\x65\x63\x63\x69\xf3\x6e\x20\x63\x6f\x6e\x74\x72\x61\x20\x6a\x75\x67\x61\x64\x6f\x72\x65\x73\x3a\x20\x34\x2c\x20\x50\x72\x6f\x74\x65\x63\x63\x69\xf3\x6e\x20\x63\x6f\x6e\x74\x72\x61\x20\x61\x6e\x69\x6d\x61\x6c\x65\x73\x3a\x20\x31\x36"];
        LANG[INV.CROWN_ORANGE] = ["Corona Naranja", "Ahora tienes much suerte", "\x50\x72\x6f\x74\x65\x63\x63\x69\xf3\x6e\x20\x63\x6f\x6e\x74\x72\x61\x20\x6a\x75\x67\x61\x64\x6f\x72\x65\x73\x3a\x20\x34\x2c\x20\x50\x72\x6f\x74\x65\x63\x63\x69\xf3\x6e\x20\x63\x6f\x6e\x74\x72\x61\x20\x61\x6e\x69\x6d\x61\x6c\x65\x73\x3a\x20\x31\x36"];
        LANG[INV.CROWN_BLUE] = ["Corona Azul", "Cuando mueres, te conviertes en un fantasma", "\x50\x65\x72\x6f\x20\x70\x65\x72\x64\x65\x72\xe1\x73\x20\x74\x75\x20\x61\x6c\x6d\x61", "\x50\x72\x6f\x74\x65\x63\x63\x69\xf3\x6e\x20\x63\x6f\x6e\x74\x72\x61\x20\x6a\x75\x67\x61\x64\x6f\x72\x3a\x20\x34\x2c\x20\x50\x72\x6f\x74\x65\x63\x63\x69\xf3\x6e\x20\x63\x6f\x6e\x74\x72\x61\x20\x61\x6e\x69\x6d\x61\x6c\x65\x73\x3a\x20\x31\x36"];
        LANG[INV.BUCKET_FULL] = ["Cubo", "Bueno para rellenar botellas", "Un cubo es equivalente a 12 botellas"];
        LANG[INV.BUCKET_EMPTY] = ["\x43\x75\x62\x6f\x20\x56\x61\x63\xed\x6f", "Tienes que llenar este cubo con agua"];
        LANG[INV.BOTTLE_FULL] = ["Botella", "Te permite beber agua donde quieras", "Agua: 50"];
        LANG[INV.BOTTLE_EMPTY] = ["Botella Vacia", "La puedes llenar de agua"];
        LANG[INV.WATERING_CAN] = ["\x52\x65\x67\x61\x64\x65\x72\x61\x20\x56\x61\x63\xed\x61", "La tienes que llenar de agua"];
        LANG[INV.WATERING_CAN_FULL] = ["Regadera", "Te permite regar las plantas", "\x44\x61\xf1\x6f\x3a\x20\x31"];
        LANG[INV.BAG] = ["Mochila", "\xa1\x4d\x61\x73\x20\x65\x73\x70\x61\x63\x69\x6f\x20\x70\x61\x72\x61\x20\x74\x75\x73\x20\x63\x6f\x73\x61\x73\x21"];
        LANG[INV.PAPER] = ["Hoja", "Usada para hacer un libro"];
        LANG[INV.BOOK] = ["Libro", "\x52\x65\x64\x75\x63\x65\x20\x65\x6c\x20\x74\x69\x65\x6d\x70\x6f\x20\x64\x65\x20\x65\x6c\x61\x62\x6f\x72\x61\x63\x69\xf3\x6e", "Lo tienes que tener en la mano para que funcione", "\x44\x61\xf1\x6f\x3a\x20\x31"];
        LANG[INV.BANDAGE] = ["Vendaje", "Recuperas vida mas rapido", "\x53\x61\x6e\x61\x63\x69\xf3\x6e\x20\x74\x69\x65\x6d\x70\x6f\x3a\x20\x33\x30", "Efecto: 5"];
        LANG[INV.LOCK] = ["Cerradura", "Te permite cerrar tu cofre"];
        LANG[INV.LOCKPICK] = ["Llave", "Te permite abrir un cofre cerrado"];
        LANG[INV.TOTEM] = ["\x54\xf3\x74\x65\x6d", "Te permite crear un equipo", "Compartir puertas y cofres cerrados", "\x54\x75\x73\x20\x70\x69\x6e\x63\x68\x6f\x73\x20\x6e\x6f\x20\x64\x61\xf1\x61\x6e\x20\x61\x6c\x20\x72\x65\x73\x74\x6f\x20\x74\x75\x20\x65\x71\x75\x69\x70\x6f"];
        LANG[INV.BRIDGE] = ["Puente", "\x4d\x75\x79\x20\xfa\x74\x69\x6c\x20\x65\x6e\x20\x65\x6c\x20\x61\x67\x75\x61", "Te permite beber agua sin tener que ahogarse", "\x50\x75\x65\x64\x65\x73\x20\x6e\x61\x64\x61\x72\x20\x6d\xe1\x73\x20\x72\xe1\x70\x69\x64\x6f\x20\x65\x6e\x63\x69\x6d\x61\x20\x64\x65\x6c\x20\x61\x67\x75\x61"];
        LANG[INV.SIGN] = ["Cartel", "Sirve para dejar un mensage para otros", "Durabilidad: 200"];
        LANG[INV.ROOF] = ["Techo", "\x54\x65\x20\x65\x73\x63\x6f\x6e\x64\x65\x20\x75\x6e\x20\x70\x6f\x63\x6f\x20\x79\x20\x74\x65\x20\x70\x72\x6f\x74\x65\x67\x65\x20\x64\x65\x6c\x20\x66\x72\xed\x6f"];
        LANG[INV.WELL] = ["Fuente", "Permite rellenar botellas", "Durabilidad: 1000"];
        LANG[INV.WALL] = ["Pared de Madera", "Es solo una pared.", "Durabilidad: 1000"];
        LANG[INV.STONE_WALL] = ["Pared de Piedra", "\x45\x73\x20\x75\x6e\x20\x70\x6f\x63\x6f\x20\x6d\xe1\x73\x20\x73\x65\x72\x69\x6f", "Durabilidad: 1500"];
        LANG[INV.GOLD_WALL] = ["Pared de Oro", "\xbf\x4f\x72\x6f\x20\x65\x6e\x20\x64\x65\x20\x74\x75\x73\x20\x70\x61\x72\x65\x64\x65\x73\x3f\x20\x45\x72\x65\x73\x20\x72\x69\x63\x6f", "Durabilidad: 2000"];
        LANG[INV.DIAMOND_WALL] = ["Pared de Diamante", "Muy brillante, cuidado con tus ojos", "Durabilidad: 2500"];
        LANG[INV.AMETHYST_WALL] = ["Pared de Amatista", "\xa1\x44\x65\x62\x65\x73\x20\x74\x65\x6e\x65\x72\x20\x6d\x75\x63\x68\x6f\x20\x6d\x69\x65\x64\x6f\x20\x64\x65\x20\x6c\x6f\x20\x71\x75\x65\x20\x68\x61\x79\x20\x66\x75\x65\x72\x61\x21", "Durabilidad: 3500"];
        LANG[INV.SPIKE] = ["Pincho de Madera", "\x50\x75\x65\x64\x65\x20\x64\x61\xf1\x61\x72\x20\x61\x20\x74\x75\x73\x20\x65\x6e\x65\x6d\x69\x67\x6f\x73", "\x44\x61\xf1\x6f\x3a\x20\x31\x30\x2c\x20\x44\x61\xf1\x6f\x20\x70\x6f\x72\x20\x67\x6f\x6c\x70\x65\x3a\x20\x32", "Durabilidad: 150"];
        LANG[INV.STONE_SPIKE] = ["Pincho de Piedra", "\x4e\x6f\x20\x71\x75\x65\x72\x72\xed\x61\x20\x73\x65\x72\x20\x74\x75\x20\x65\x6e\x65\x6d\x69\x67\x6f\x2e", "\x44\x61\xf1\x6f\x3a\x20\x32\x30", "\x44\x61\xf1\x6f\x20\x70\x6f\x72\x20\x63\x6f\x6e\x74\x61\x63\x74\x6f\x3a\x20\x33", "Durabilidad: 300"];
        LANG[INV.GOLD_SPIKE] = ["Pincho de Oro", "\xa1\x45\x72\x65\x73\x20\x74\x61\x6e\x20\x63\x72\x75\x65\x6c\x21", "\x44\x61\xf1\x6f\x3a\x20\x33\x30", "\x44\x61\xf1\x6f\x20\x70\x6f\x72\x20\x67\x6f\x6c\x70\x65\x3a\x20\x33", "Durabilidad: 600"];
        LANG[INV.DIAMOND_SPIKE] = ["Pincho de Diamante", "\x4e\x6f\x20\x74\x65\x20\x67\x75\x73\x74\x61\x20\x74\x65\x6e\x65\x72\x20\x63\x6f\x6d\x70\x61\xf1\xed\x61\x2e", "\x44\x61\xf1\x6f\x3a\x20\x34\x30", "\x44\x61\xf1\x6f\x20\x70\x6f\x72\x20\x63\x6f\x6e\x74\x61\x63\x74\x6f\x3a\x20\x34", "Durabilidad: 1200"];
        LANG[INV.AMETHYST_SPIKE] = ["Pincho de Amatista", "\xa1\xbf\x51\x75\x65\x20\x64\x65\x6d\x6f\x6e\x69\x6f\x73\x20\x74\x65\x20\x68\x69\x63\x69\x65\x72\x6f\x6e\x20\x74\x75\x73\x20\x76\x65\x63\x69\x6e\x6f\x73\x3f\x21", "\x44\x61\xf1\x6f\x3a\x20\x35\x30", "\x44\x61\xf1\x6f\x20\x70\x6f\x72\x20\x63\x6f\x6e\x74\x61\x63\x74\x6f\x3a\x20\x34", "Durabilidad: 2400"];
        LANG[INV.WOOD_DOOR] = ["Puerta de Madera", "Puedes abrir y cerrarla ", "Durabilidad: 1000"];
        LANG[INV.STONE_DOOR] = ["Puerta de Piedra", "\x55\x6e\x61\x20\x70\x75\x65\x72\x74\x61\x20\x6d\xe1\x73\x20\x62\x75\x65\x6e\x61\x20\x65\x73\x20\x6d\xe1\x73\x20\x73\x65\x72\x69\x61", "Durabilidad: 1500"];
        LANG[INV.GOLD_DOOR] = ["Puerta de Oro", "\xbf\x45\x73\x74\x61\x73\x20\x72\x65\x63\x6f\x6e\x73\x74\x72\x75\x79\x65\x6e\x64\x6f\x20\x45\x6c\x20\x44\x6f\x72\x61\x64\x6f\x3f", "Durabilidad: 2000"];
        LANG[INV.DIAMOND_DOOR] = ["Puerta de Diamante", "Para una casa brillante", "Durabilidad: 2500"];
        LANG[INV.AMETHYST_DOOR] = ["Puerta de Amatista", "\xbf\x54\x75\x20\x63\x61\x73\x61\x20\x65\x73\x20\x75\x6e\x61\x20\x63\x61\x6a\x61\x20\x66\x75\x65\x72\x74\x65\x3f", "Durabilidad: 3500"];
        LANG[INV.FURNACE] = ["Caldera", "Te calienta", "Consume 1 Madera cada 5 segundos", "Durabilidad: 1000"];
        LANG[INV.WINDMILL] = ["Molino", "Puede producir harina a partir del trigo", "Necesita 5 segundos para producir harina", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
        LANG[INV.BREAD_OVEN] = ["Horno de Pan", "Produce pan de harina", "Necesita 10 segundos para producir Pan", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
        LANG[INV.RESURRECTION] = ["\x50\x69\x65\x64\x72\x61\x20\x64\x65\x20\x52\x65\x73\x75\x72\x72\x65\x63\x69\xf3\x6e", "\xa1\x45\x73\x20\x6d\x61\x67\x69\x61\x21", "Te resucitacuando eres una fantasma", "\x50\x65\x72\x64\x65\x72\xe1\x73\x20\x74\x75\x20\x61\x72\x6d\x61", "Durabilidad: 200"];
        LANG[TEXT.YOU_CANNOT_JOIN] = "No puedes unirte a este servidor";
        LANG[TEXT.KICKED] = "Expulsado: ";
        LANG[TEXT.KEY_ALREADY] = "\x54\x75\x20\x6c\x6c\x61\x76\x65\x20\x79\x61\x20\x65\x73\x74\xe1\x20\x75\x73\x61\x64\x61";
        LANG[TEXT.KEY_WRONG] = "\x54\x75\x20\x6c\x6c\x61\x76\x65\x20\x65\x73\x74\xe1\x20\x6d\x61\x6c";
        LANG[TEXT.OLD_VERSION] = "\x54\x69\x65\x6e\x65\x73\x20\x75\x6e\x61\x20\x76\x65\x72\x73\x69\xf3\x6e\x20\x61\x6e\x74\x69\x67\x75\x61\x2c\x20\x6c\x69\x6d\x70\x69\x61\x20\x74\x75\x20\x63\x61\x63\x68\x65";
        LANG[TEXT.NO_MORE_RESOURCES] = "No hay mas recursos";
        LANG[TEXT.SURVIVED_1DAY] = "\x48\x61\x73\x20\x73\x6f\x62\x72\x65\x76\x69\x76\x69\x64\x6f\x20\x31\x20\x64\xed\x61";
        LANG[TEXT.SURVIVED] = "Has sobrevivido ";
        LANG[TEXT.DAYS] = "\x20\x64\xed\x61\x73";
        LANG[TEXT.DEAD_SAD] = "\x45\x73\x74\xe1\x73\x20\x6d\x75\x65\x72\x74\x6f\x20\x3b\x2d\x3b";
        LANG[TEXT.SPAM_ME] = "\x4e\x6f\x20\x73\x65\x20\x65\x6e\x63\x75\x65\x6e\x74\x72\x61\x20\x75\x6e\x20\x6c\x75\x67\x61\x72\x20\x70\x61\x72\x61\x20\x75\x6e\x69\x72\x73\x65\x2c\x20\xa1\x73\x70\x61\x6d\x65\x61\x20\x65\x6c\x20\x62\x6f\x74\xf3\x6e\x20\x64\x65\x20\x6a\x75\x67\x61\x72\x21";
        LANG[TEXT.SPAM_ME2] = "\x45\x6c\x20\x73\x65\x72\x76\x69\x64\x6f\x72\x20\x65\x73\x74\x61\x20\x6c\x6c\x65\x6e\x6f\x2c\x20\xa1\x73\x70\x61\x6d\x65\x61\x20\x65\x6c\x20\x62\x6f\x74\xf3\x6e\x20\x64\x65\x20\x6a\x75\x67\x61\x72\x21";
        LANG[TEXT.EMPTY] = "Recurso vacio";
        LANG[TEXT.INV_FULL] = "\xa1\x49\x6e\x76\x65\x6e\x74\x61\x72\x69\x6f\x20\x6c\x6c\x65\x6e\x6f\x21\x28\x48\x61\x7a\x20\x63\x6c\x69\x63\x6b\x20\x64\x65\x72\x65\x63\x68\x6f\x20\x70\x61\x72\x61\x20\x62\x6f\x72\x72\x61\x72\x20\x63\x6f\x73\x61\x73\x29\x20";
        LANG[TEXT.DEAD] = "\x20\x65\x73\x74\xe1\x20\x6d\x75\x65\x72\x74\x6f";
        LANG[TEXT.WRONG_TOOL] = "Esta no es la herramienta correcta";
        LANG[TEXT.JOIN_TEAM] = "Te has unido a un equipo";
        LANG[TEXT.YOU_DEAD] = "\x45\x73\x74\xe1\x73\x20\x6d\x75\x65\x72\x74\x6f";
        LANG[TEXT.JOINED_TEAM] = "\x20\x73\x65\x20\x75\x6e\x69\xf3\x20\x61\x6c\x20\x65\x71\x75\x69\x70\x6f";
        LANG[TEXT.TEAM_DESTROYED] = "Tu equipo ha sido destruido";
        LANG[TEXT.LEFT_TEAM] = "Has dejado el equipo";
        LANG[TEXT.LEFT_TEAM2] = " dejo el equipo ";
        LANG[TEXT.TOKEN] = "\x41\x6c\x67\x75\x69\x65\x6e\x20\x74\x65\x20\x72\x6f\x62\xf3\x20\x74\x75\x20\x74\x6f\x6b\x65\x6e\x20\x3a\x3e";
        LANG[TEXT.CHOOSE] = "Elige un servidor";
        LANG[TEXT.PLAYERS] = "jugadores";
        LANG[TEXT.TOTAL_PLAYERS] = "total de jugadores";
        LANG[TEXT.TOTAL_MODE] = "Jugadores en este modo de juego";
        LANG[TEXT.COMMING_SOON] = "\x50\x72\xf3\x78\x69\x6d\x61\x6d\x65\x6e\x74\x65\x2e\x2e\x2e";
        document.getElementById("nickname_input").placeholder = "Apodo";
        DIE[0] = ["\x48\x61\x73\x20\x6d\x75\x65\x72\x74\x6f\x20\x70\x6f\x72\x20\x6e\x69\x6e\x67\x75\x6e\x61\x20\x72\x61\x7a\xf3\x6e"];
        DIE[1] = ["Has muerto de hambre, como implica el nombre del juego dice"];
        DIE[2] = ["\x54\x65\x20\x68\x61\x73\x20\x63\x6f\x6e\x67\x65\x6c\x61\x64\x6f\x20\x68\x61\x73\x74\x61\x20\x6d\x6f\x72\x69\x72\x2c\x20\x71\x75\xe9\x20\x74\x72\x69\x73\x74\x65", "\x4d\x6f\x72\x69\x73\x74\x65\x20\x70\x6f\x72\x20\x68\x69\x70\x6f\x74\x65\x72\x6d\x69\x61\x2e\x20\x4c\x61\x20\x70\x72\xf3\x78\x69\x6d\x61\x20\x71\x75\xe9\x64\x61\x74\x65\x20\x63\x65\x72\x63\x61\x20\x64\x65\x20\x20\x75\x6e\x61\x20\x66\x6f\x67\x61\x74\x61\x2e"];
        DIE[3] = ["Un jugador te ha matado diciendo que mejores.", "\x46\x75\x69\x73\x74\x65\x20\x61\x73\x65\x73\x69\x6e\x61\x64\x6f\x20\x70\x6f\x72\x20\x75\x6e\x20\x6a\x75\x67\x61\x64\x6f\x72\x2c\x20\x70\x65\x72\x6f\x20\x6e\x6f\x20\x74\x65\x20\x70\x72\x65\x6f\x63\x75\x70\x65\x73\x2c\x20\x65\x73\x65\x20\x6a\x75\x67\x61\x64\x6f\x72\x20\x74\x61\x6d\x62\x69\xe9\x6e\x20\x6d\x6f\x72\x69\x72\xe1\x2c\x20\x65\x76\x65\x6e\x74\x75\x61\x6c\x6d\x65\x6e\x74\x65\x2e"];
        DIE[4] = ["Te has acercado demasiado al fuego, y te has quemado vivo, mala idea.", "Has muerto por el fuego, el fuego te quema, ve y escribe una historia sobre eso."];
        DIE[5] = ["\x54\x75\x20\x63\x75\x65\x72\x70\x6f\x20\x73\x65\x72\xe1\x20\x75\x6e\x20\x62\x75\x65\x6e\x20\x6e\x69\x64\x6f\x20\x70\x61\x72\x61\x20\x6c\x6f\x73\x20\x68\x75\x65\x76\x6f\x73\x20\x64\x65\x20\x6c\x61\x20\x61\x72\x61\xf1\x61\x73", "\x55\x6e\x61\x20\x61\x72\x61\xf1\x61\x20\x74\x65\x20\x68\x61\x20\x6d\x61\x74\x61\x64\x6f\x2c\x20\x61\x6c\x20\x6d\x65\x6e\x6f\x73\x20\x6e\x6f\x20\x66\x75\xe9\x20\x75\x6e\x20\x63\x6f\x6e\x65\x6a\x6f\x2e"];
        DIE[6] = ["\x45\x6c\x20\x6c\x6f\x62\x6f\x20\x6e\x6f\x20\x74\x65\x6e\x64\x72\xe1\x20\x68\x61\x6d\x62\x72\x65\x20\x64\x65\x73\x70\x75\xe9\x73\x20\x64\x65\x20\x63\x6f\x6d\x65\x72\x74\x65\x2e", "No son perros, no les gusta ser acariciados."];
        DIE[7] = ["\x45\x6c\x20\x7a\x6f\x72\x72\x6f\x20\x65\x72\x61\x20\x64\x65\x6d\x61\x73\x69\x61\x64\x6f\x20\x72\xe1\x70\x69\x64\x6f\x20\x70\x61\x72\x61\x20\x74\x69\x2e", "\x45\x6c\x20\x7a\x6f\x72\x72\x6f\x20\x74\x65\x20\x63\x6f\x6e\x76\x69\x72\x74\x69\xf3\x20\x65\x6e\x20\x75\x6e\x61\x20\x63\x61\x6a\x61\x2e\x20\xbf\x44\x65\x73\x64\x65\x20\x63\x75\xe1\x6e\x64\x6f\x20\x6c\x6f\x73\x20\x61\x6e\x69\x6d\x61\x6c\x65\x73\x20\x74\x69\x65\x6e\x65\x6e\x20\x70\x6f\x64\x65\x72\x65\x73\x20\x6d\xe1\x67\x69\x63\x6f\x73\x3f"];
        DIE[8] = ["\x45\x6c\x20\x6f\x73\x6f\x20\x73\x6f\x6c\x6f\x20\x71\x75\x65\x72\xed\x61\x20\x75\x6e\x20\x61\x62\x72\x61\x7a\x6f", "El oso era demasiado para ti. Lo siento."];
        DIE[9] = ["\x45\x6c\x20\x64\x72\x61\x67\xf3\x6e\x20\x74\x65\x20\x71\x75\x65\x6d\xf3\x20\x76\x69\x76\x6f\x2e", "\x45\x6c\x20\x64\x72\x61\x67\xf3\x6e\x20\x74\x65\x20\x68\x61\x20\x61\x70\x6c\x61\x73\x74\x61\x64\x6f\x2c\x20\x74\x6f\x64\x6f\x73\x20\x74\x75\x73\x20\x68\x75\x65\x73\x6f\x73\x20\x61\x68\x6f\x72\x61\x20\x73\x6f\x6e\x20\x76\x61\x70\x6f\x72\x2e\x2e\x2e\x20\x6f\x74\x72\x6f\x20\x63\x61\x64\x61\x76\x65\x72\x20\x6d\x61\x73\x2e"];
        DIE[10] = ["Has saltado a una pared de pinchos, mala idea", "Has muerto por una pared de pinchos. La gente suele ser lo suficientemente sensible para no tocar cosas puntiagudas.."];
        DIE[11] = ["\x55\x6e\x20\x66\x61\x6e\x74\x61\x73\x6d\x61\x20\x74\x61\x6d\x62\x69\xe9\x6e\x20\x70\x75\x65\x64\x65\x20\x6d\x6f\x72\x69\x72\x2e", "No has revivido a tiempo, asi que eres un fantasma de un fantasma."];
        DIE[12] = ["\x55\x6e\x61\x20\x62\x61\x63\x74\x65\x72\x69\x61\x20\x74\x65\x20\x68\x61\x20\x6d\x61\x74\x61\x64\x6f\x20\x70\x6f\x72\x20\x63\x6f\x6d\x65\x72\x20\x63\x61\x72\x6e\x65\x20\x63\x72\x75\x64\x61\x2e\x20\x45\x73\x74\x65\x20\x6a\x75\x65\x67\x6f\x20\x65\x73\x20\x6d\x75\x79\x20\x64\x69\x66\xed\x63\x69\x6c\x2e", "\x48\x61\x73\x20\x6d\x61\x74\x61\x64\x6f\x20\x61\x20\x6c\x61\x20\x63\x61\x72\x6e\x65\x20\x63\x72\x75\x64\x61\x2e\x20\x45\x6c\x6c\x61\x20\x74\x61\x6d\x62\x69\xe9\x6e\x20\x74\x65\x20\x68\x61\x20\x6d\x61\x74\x61\x64\x6f\x20\x61\x20\x74\x69\x2e\x2e"];
        DIE[13] = ["Has muerto de sed, mejor bebe tu propia orina."];
        DIE[14] = ["\xbf\x53\x61\x62\x69\xe1\x73\x20\x71\x75\x65\x20\x6c\x6f\x73\x20\x6a\x75\x67\x61\x64\x6f\x72\x65\x73\x20\x74\x69\x65\x6e\x65\x6e\x20\x73\x75\x20\x62\x6f\x63\x61\x20\x64\x65\x62\x61\x6a\x6f\x20\x64\x65\x6c\x20\x61\x67\x75\x61\x3f\x20\x41\x68\x6f\x72\x61\x20\x6c\x6f\x20\x73\x61\x62\x65\x73\x2e"];
        DIE[15] = ["\x4e\x6f\x20\x74\x65\x20\x70\x72\x65\x6f\x63\x75\x70\x65\x73\x2c\x20\x61\x20\x6c\x61\x20\x70\x69\x72\x61\xf1\x61\x20\x6c\x65\x20\x70\x61\x72\x65\x63\x69\x73\x74\x65\x20\x64\x65\x6c\x69\x63\x69\x6f\x73\x6f\x2e", "\x4c\x61\x73\x20\x70\x69\x72\x61\xf1\x61\x73\x20\x63\x6f\x6d\x65\x6e\x20\x61\x20\x70\x65\x72\x73\x6f\x6e\x61\x73\x2c\x20\x69\x6e\x63\x6c\x75\x79\x65\x6e\x64\x6f\x74\x65\x20\x61\x20\x74\x69\x20\x74\x61\x6d\x62\x69\xe9\x6e\x2e"];
        DIE[16] = ["LapaMauve no planea que puedas matar al kraken", "\x55\x6e\x20\x4b\x72\x61\x6b\x65\x6e\x20\x74\x65\x20\x70\x61\x72\x74\x69\xf3\x20\x65\x6c\x20\x6b\x72\x61\x2d\x6e\x65\x6f\x2e"];
        DIE[17] = ["\x54\x75\x20\x70\x69\x65\x6c\x20\x73\x65\x20\x63\x61\x79\xf3\x2c\x20\x65\x6c\x20\x73\x6f\x6c\x20\x74\x65\x20\x71\x75\x65\x6d\xf3\x2e"];
        DIE[18] = ["\x45\x6c\x20\x61\x6a\x6f\x20\x67\x75\x61\x72\x64\x61\x64\x6f\x20\x65\x6e\x20\x74\x75\x20\x62\x6f\x6c\x73\x69\x6c\x6c\x6f\x20\x74\x65\x20\x71\x75\x65\x6d\xf3\x20\x65\x6c\x20\x63\x65\x72\x65\x62\x72\x6f\x2e"];
        DIE[19] = ["Eres un vampiro, no te quedes cerca del ajo."];
        DIE[20] = ["\x48\x61\x73\x20\x63\x6f\x6d\x69\x64\x6f\x20\x75\x6e\x20\x61\x6a\x6f\x20\x73\x69\x65\x6e\x64\x6f\x20\x20\x76\x61\x6d\x70\x69\x72\x6f\x2c\xbf\x71\x75\x65\x20\x65\x73\x70\x65\x72\x61\x62\x61\x73\x3f"];
        DIE[21] = ["\x54\x65\x20\x68\x61\x73\x20\x71\x75\x65\x64\x61\x64\x6f\x20\x61\x74\x72\x61\x70\x61\x64\x6f\x20\x65\x6e\x20\x75\x6e\x61\x20\x70\x6c\x61\x6e\x74\x61\x20\x64\x65\x20\x65\x73\x70\x69\x6e\x61\x73\x2e\x20\x41\x6c\x20\x69\x6e\x74\x65\x6e\x74\x61\x72\x20\x65\x73\x63\x61\x70\x61\x72\x2c\x20\x74\x75\x20\x70\x69\x65\x6c\x20\x73\x65\x20\x63\x61\x65\x20\x79\x20\x65\x6e\x74\x72\x61\x20\x75\x6e\x20\x70\x69\x6e\x63\x68\x6f\x20\x65\x6e\x20\x74\x75\x20\x63\x6f\x72\x61\x7a\xf3\x6e\x2e"];
        ZOMBIE_GRUMBLE = "Uuunnnggg";
        ZOMBIE_GRUMBLES = ["Uuunnnggg... Tengo hambre", "Necesito tu cerebro uuunnnggg...", "Carne fresca... Uuunnnggg", "Uuunnnggg... Pareces delicioso", "Uuunnnggg...", "Comida... uuunnnggg...", "Puedo oler sangre... Uuunnnggg"];
    };
    var set_polish = function () {
        LANG[INV.DRAGON_CUBE] = ["You feel a great power emanating from this orb"];
        DIE[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        LANG[INV.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        LANG[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME";
        LANG[TEXT.TWITTER] = " Share on Twitter";
        LANG[TEXT.FACEBOOK] = " Share on Facebook";
        LANG[TEXT.KIT_NEXT] = "You can buy items on the shop in the next game with your points";
        LANG[TEXT.POINTS] = "points";
        LANG[TEXT.SCORE] = "Score";
        LANG[TEXT.KILL] = "Kill";
        LANG[TEXT.DAYS_SURVIVED] = "Days survived";
        LANG[TEXT.MODE_FREE] = "Building method: Free. Press G to change";
        LANG[TEXT.MODE_GRID] = "Building method: Grid. Press G to change";
        LANG[INV.CRAB_LOOT] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        LANG[INV.CRAB_SPEAR] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
        LANG[INV.CROWN_CRAB] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can\'t hit you and you can\'t hit them", "Players Defense: 4", "Animals Defense: 13"];
        LANG[INV.BED] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var i = 0; i < 7; i++)
            document.getElementById("claim_reward_" + i).innerHTML = "CLAIM REWARD!";
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        LANG[INV.HAND] = ["Ręka"];
        LANG[INV.GROUND] = ["Ziemia", "Brudna!"];
        LANG[INV.SAND] = ["Piasek", "Mam go w oczach!"];
        LANG[INV.WOOD] = ["Drewno", "Nie możesz mieć go wystarczająco!"];
        LANG[INV.STONE] = ["Kamień", "Także nazywany skałą"];
        LANG[INV.GOLD] = ["Złoto", "Bądź hojny, daj trochę innym"];
        LANG[INV.DIAMOND] = ["Diament", "Co z nim zrobisz?"];
        LANG[INV.AMETHYST] = ["Ametyst", "Jest Fiołkowy jak Lapa"];
        LANG[INV.FLOUR] = ["Mąka", "Używana w gotowaniu"];
        LANG[INV.COOKIE] = ["Ciastko", "Przepyszne ciasteczko od babci", "Jedzenie: 50"];
        LANG[INV.CAKE] = ["Ciasto", "Raj dla smakoszy", "Jedzenie: 100"];
        LANG[INV.MEAT] = ["Surowe mięso", "Możesz je upiec w ogniu", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 15"];
        LANG[INV.COOKED_MEAT] = ["Pieczone mięso", "Krwisty stek, proszę", "Jedzenie: 35"];
        LANG[INV.FOODFISH] = ["Surowa ryba", "Myślę, że nadal jest żywa", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 18"];
        LANG[INV.FOODFISH_COOKED] = ["Pieczona ryba", "Z cytryną jest idealna", " Jedzenie: 35"];
        LANG[INV.BREAD] = ["Chleb", "Świetny Francuski chleb", "Jest walutą używaną w markecie", "Jedzenie: 15"];
        LANG[INV.SANDWICH] = ["Kanapka", "Smakuje jak kraboburger", "Jedzenie: 100"];
        LANG[INV.CANDY] = ["Cukierki", "Tylko dla dzieci!", "Jedzenie: 100"];
        LANG[INV.SUGAR_CAN] = ["Laska cukrowa", "\x53\x70\x72\xf3\x62\x75\x6a\x2c\x20\x6a\x65\x73\x74\x20\x70\x72\x7a\x65\x70\x79\x73\x7a\x6e\x61", "Jedzenie: 100"];
        LANG[INV.GARLAND] = ["Girlanda", "\x49\x64\x65\x61\x6c\x6e\x61\x20\x64\x6f\x20\x64\x65\x6b\x6f\x72\x6f\x77\x61\x6e\x69\x61\x20\x64\x61\x63\x68\xf3\x77"];
        LANG[INV.SEED] = ["Nasionko jagody", "Wyrośnie w jagody", "Narodziny: 2min", "Rośnięcie: 55s", "Podlewanie: 3min 20s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
        LANG[INV.PLANT] = ["Jagody", "Jagody są pyszne!", "Jedzenie: 10"];
        LANG[INV.WHEAT_SEED] = ["Nasiono pszenicy", "Wyrośnie w pszenicę", "Narodziny: 2min", "Rośnięcie: 16s", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
        LANG[INV.WILD_WHEAT] = ["Pszenica", "Zamienia się w mąkę jeżeli wrzucisz ją do wiatraka"];
        LANG[INV.PUMPKIN_SEED] = ["Nasiono dyni", "Wyrośnie w dynię", "Narodziny: 2min 40s", "Rośnięcie: 2min", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
        LANG[INV.PUMPKIN] = ["Dynia", "Przypomina mi o Halloween", "Jedzenie: 30"];
        LANG[INV.GARLIC_SEED] = ["Nasionko czosnku", "\x42\x61\x72\x64\x7a\x6f\x20\x6e\x69\x65\x62\x65\x7a\x70\x69\x65\x63\x7a\x6e\x65\x20\x64\x6c\x61\x20\x77\x61\x6d\x70\x69\x72\xf3\x77", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 1min 10s", "Podlewanie: 1min 40s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
        LANG[INV.GARLIC] = ["Czosnek", "Leczy cię i redukuje zimno", "Jedzenie: 14", "Uzdrawia z biegiem czasu: 30", "Efekt: 1"];
        LANG[INV.THORNBUSH_SEED] = ["Nasiono kolczastego krzewu", "\x4d\x6f\u017c\x65\x20\x7a\x72\x61\x6e\x69\u0107\x20\x74\x77\x6f\x69\x63\x68\x20\x77\x72\x6f\x67\xf3\x77", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 15s", "Podlewanie: 3min", "Wytrzymałość: 1000", "Czas życia: 8 dni"];
        LANG[INV.THORNBUSH] = ["Kolczasty krzew", "Kłuje!"];
        LANG[INV.PLOT] = ["Donica", "Naprawdę, użyj jej", "Z tym genetycznie modyfikowanym nawozem, twoje rośliny", "będą rosły znacznie szybciej i będą potrzebować mniej wody", "Wytrzymałość: 2000"];
        LANG[INV.ICE] = ["\x4c\xf3\x64", "Użyteczny do robienia ciast i wody"];
        LANG[INV.SPANNER] = ["Klucz mechaniczny", "\x44\x6f\x20\x6e\x61\x70\x72\x61\x77\x69\x61\x6e\x69\x61\x20\x64\x72\x7a\x77\x69\x20\x69\x20\x6b\x6f\x6c\x63\xf3\x77", "Uszkodzenie: 2"];
        LANG[INV.FUR_WOLF] = ["\x57\x69\x6c\x63\x7a\x61\x20\x73\x6b\xf3\x72\x61", "Szczeniaczek? Ale gdzie jest szczeniaczek?!"];
        LANG[INV.FUR] = ["\x53\x6b\xf3\x72\x61\x20\x6b\x72\xf3\x6c\x69\x6b\x61", "\x54\x65\x6e\x20\x6b\x72\xf3\x6c\x69\x6b\x20\x62\x79\u0142\x20\x74\x61\x6b\x69\x20\x73\u0142\x6f\x64\x7a\x69\x75\x74\x6b\x69\x2e\x2e\x2e"];
        LANG[INV.SPECIAL_FUR] = ["\x53\x6b\xf3\x72\x61", "Jesteś fabryką chleba"];
        LANG[INV.SPECIAL_FUR_2] = ["\x43\x69\x65\x6d\x6e\x61\x20\x73\x6b\xf3\x72\x61", "Byłeś gotowy zrobić coś złego"];
        LANG[INV.FUR_WINTER] = ["\x5a\x69\x6d\x6f\x77\x61\x20\x73\x6b\xf3\x72\x61", "Te zwierzęta chciały się tylko przytulić..."];
        LANG[INV.SCALES] = ["Łuski", "Pachnie jak ryba!"];
        LANG[INV.KRAKEN_SKIN] = ["\x53\x6b\xf3\x72\x61\x20\x6b\x72\x61\x6b\x65\x6e\x61", "Nie byłeś zbyt przestraszony?"];
        LANG[INV.FIRE] = ["Ognisko", "Ociepli cię!", "Wytrzymałość: 150", "Czas życia: 2min"];
        LANG[INV.BIG_FIRE] = ["Duże ognisko", "Ociepli cię na dłużej!", "Wytrzymałość: 400", "Czas życia: 6min"];
        LANG[INV.WORKBENCH] = ["\x53\x74\xf3\u0142\x20\x72\x7a\x65\x6d\x69\x65\u015b\x6c\x6e\x69\x63\x7a\x79", "\x55\u017c\x79\x74\x65\x63\x7a\x6e\x79\x20\x64\x6f\x20\x73\x74\x77\x61\x72\x7a\x61\x6e\x69\x61\x20\x70\x72\x7a\x65\x64\x6d\x69\x6f\x74\xf3\x77"];
        LANG[INV.CORD] = ["Nić", "\x55\u017c\x79\x77\x61\x6e\x79\x20\x77\x20\x74\x77\x6f\x72\x7a\x65\x6e\x69\x75\x20\x63\x7a\x61\x70\x65\x6b\x20\x69\x20\x70\x6c\x65\x63\x61\x6b\xf3\x77"];
        LANG[INV.BLUE_CORD] = ["Diamentowa nić", "Używana w tworzeniu specjalnych czapek"];
        LANG[INV.CHEST] = ["Skrzynia", "\x50\x6f\x7a\x77\x61\x6c\x61\x20\x63\x69\x20\x6e\x61\x20\x70\x72\x7a\x65\x63\x68\x6f\x77\x79\x77\x61\x6e\x69\x65\x20\x70\x72\x7a\x65\x64\x6d\x69\x6f\x74\xf3\x77", "Wytrzymałość: 500"];
        LANG[INV.SWORD_WOOD] = ["Drewniany miecz", "To coś działa?", "Obrażenia: 12", "Obrażenia do budowli: 4"];
        LANG[INV.SWORD] = ["Kamienny miecz", "Bądź miły dla innych", "Obrażenia: 19", "Obrażenia do budowli: 6"];
        LANG[INV.SWORD_GOLD] = ["Złoty miecz", "\x4b\x72\xf3\x6c\x20\x6c\x61\x73\x75", "Obrażenia: 22", "Obrażenia do budowli: 7"];
        LANG[INV.SWORD_DIAMOND] = ["Diamentowy miecz", "Możesz poczuć moc", "Obrażenia: 24", "Obrażenia do budowli: 8"];
        LANG[INV.PIRATE_SWORD] = ["Piracki miecz", "Ayyyyy!", "Dłuższy niż zwykły miecz", "Obrażenia: 24", "Obrażenia do budowli: 8"];
        LANG[INV.SWORD_AMETHYST] = ["Ametystowy miecz", "fiołkowy to najpiękniejszy kolor na świecie", "Damage: 27", "Obrażenia do budowli: 9"];
        LANG[INV.DRAGON_SWORD] = ["Smoczy miecz", "Bez litości!", "Obrażenia: 30", "Obrażenia do budowli: 10"];
        LANG[INV.DRAGON_SPEAR] = ["\x53\x6d\x6f\x63\x7a\x61\x20\x77\u0142\xf3\x63\x7a\x6e\x69\x61", "Zabij ich wszystkich!", "Obrażenia: 22", "Obrażenia do budowli: 6"];
        LANG[INV.PICK_WOOD] = ["Drewniany kilof", "Może wydobywać tylko kamienie i drewno", "Obrażenia: 1"];
        LANG[INV.PICK] = ["Kamienny kilof", "Może wydobywać drewno, kamienie i złoto", "Obrażenia: 2"];
        LANG[INV.PICK_GOLD] = ["Złoty kilof", "Może także wydobywać diamenty", "Obrażenia: 3", "Obrażenia do budowli: 1"];
        LANG[INV.PICK_DIAMOND] = ["Diamentowy kilof", "Może wydobywać wszystko", "Obrażenia: 4", "Obrażenia do budowli: 1"];
        LANG[INV.PICK_AMETHYST] = ["Ametystowy kilof", "Może wydobywać wszystko. Wygląda fantastycznie!", "Obrażenia: 5", "Obrażenia do budowli: 1"];
        LANG[INV.HAMMER] = ["Kamienny młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 2", "Obrażenia do budowli: 20"];
        LANG[INV.HAMMER_GOLD] = ["Złoty młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 3", "Obrażenia do budowli: 30"];
        LANG[INV.HAMMER_DIAMOND] = ["Diamentowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 4", "Obrażenia do budowli: 40"];
        LANG[INV.HAMMER_AMETHYST] = ["Ametystowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 5", "Obrażenia do budowli: 50"];
        LANG[INV.SUPER_HAMMER] = ["Super młot", "Miałeś kiedyś plan zniszczenia świata?", "Obrażenia: 12", "Obrażenia do budowli: 70"];
        LANG[INV.WOOD_SPEAR] = ["\x44\x72\x65\x77\x6e\x69\x61\x6e\x61\x20\x77\u0142\xf3\x63\x7a\x6e\x69\x61", "Jak patyk, ale kłuje.", "Obrażenia: 10", "Obrażenia do budowli: 2"];
        LANG[INV.SPEAR] = ["\x4b\x61\x6d\x69\x65\x6e\x6e\x61\x20\x77\u0142\xf3\x63\x7a\x6e\x69\x61", "Początek ewolucji!", "Obrażenia: 14", "Obrażenia do budowli: 4"];
        LANG[INV.GOLD_SPEAR] = ["\x5a\u0142\x6f\x74\x61\x20\x77\u0142\xf3\x63\x7a\x6e\x69\x61", "Uważaj, kłuje!", "Obrażenia: 15", "Obrażenia do budowli: 5"];
        LANG[INV.DIAMOND_SPEAR] = ["\x44\x69\x61\x6d\x65\x6e\x74\x6f\x77\x61\x20\x77\u0142\xf3\x63\x7a\x6e\x69\x61", "Jesteś gotowy, aby zabić smoka", "Obrażenia: 17", "Obrażenia do budowli: 5"];
        LANG[INV.AMETHYST_SPEAR] = ["\x41\x6d\x65\x74\x79\x73\x74\x6f\x77\x61\x20\x77\u0142\xf3\x63\x7a\x6e\x69\x61", "Smoki już nie są dla ciebie zagrożeniem", "Obrażenia: 18", "Obrażenia do budowli: 6"];
        LANG[INV.SHOVEL] = ["Kamienna łopata", "\x4b\x6f\x70\x20\x77\x20\x7a\x69\x65\x6d\x69\x20\x61\x62\x79\x20\x7a\x64\x6f\x62\x79\u0107\x20\x7a\x69\x65\x6d\x69\u0119\x2c\x20\x6c\xf3\x64\x20\x69\x20\x70\x69\x61\x73\x65\x6b", "Możesz także zdobyć minerały", "Obrażenia: 2"];
        LANG[INV.SHOVEL_GOLD] = ["Złota łopata", "\x4b\x6f\x70\x20\x77\x20\x7a\x69\x65\x6d\x69\x20\x61\x62\x79\x20\x7a\x64\x6f\x62\x79\u0107\x20\x7a\x69\x65\x6d\x69\u0119\x2c\x20\x6c\xf3\x64\x20\x69\x20\x70\x69\x61\x73\x65\x6b", "Możesz także zdobyć minerały", "Obrażenia: 3", "Obrażenia do budowli: 1"];
        LANG[INV.SHOVEL_DIAMOND] = ["Diamentowa łopata", "\x4b\x6f\x70\x20\x77\x20\x7a\x69\x65\x6d\x69\x20\x61\x62\x79\x20\x7a\x64\x6f\x62\x79\u0107\x20\x7a\x69\x65\x6d\x69\u0119\x2c\x20\x6c\xf3\x64\x20\x69\x20\x70\x69\x61\x73\x65\x6b", "Możesz także zdobyć minerały", "Obrażenia: 4", "Obrażenia do budowli: 1"];
        LANG[INV.SHOVEL_AMETHYST] = ["Ametystowa łopata", "\x4b\x6f\x70\x20\x77\x20\x7a\x69\x65\x6d\x69\x20\x61\x62\x79\x20\x7a\x64\x6f\x62\x79\u0107\x20\x7a\x69\x65\x6d\x69\u0119\x2c\x20\x6c\xf3\x64\x20\x69\x20\x70\x69\x61\x73\x65\x6b", "Możesz także zdobyć minerały", "Obrażenia: 5", "Obrażenia do budowli: 1"];
        LANG[INV.WOOD_HELMET] = ["Drewniany hełm", "Lepsze niż nic", "Obrona przed graczami: 1", "Obrona przed zwierzętami: 4"];
        LANG[INV.STONE_HELMET] = ["Kamienny hełm", "Jesteś gotowy do bitwy!", "Obrona przed graczami: 2", "Obrona przed zwierzętami: 8"];
        LANG[INV.GOLD_HELMET] = ["Złoty hełm", "\x5a\x77\x61\x6e\x79\x20\x74\x61\x6b\u017c\x65\x20\x68\x65\u0142\x6d\x65\x6d\x20\x62\x61\x72\x62\x61\x72\x7a\x79\u0144\x63\xf3\x77", "Obrona przed graczami: 4", "Obrona przed zwierzętami: 13"];
        LANG[INV.DIAMOND_HELMET] = ["Diamentowy hełm", "Nie przechwalaj się za bardzo", "Obrona przed graczami: 5", "Obrona przed zwierzętami: 19"];
        LANG[INV.AMETHYST_HELMET] = ["Ametystowy hełm", "Nie boisz się już niczego", "Obrona przed graczami: 6", "Obrona przed zwierzętami: 23"];
        LANG[INV.DRAGON_HELMET] = ["Smoczy hełm", "Zmierzysz się z całym światem", "Obrona przed graczami: 8", "Obrona przed zwierzętami: 27"];
        LANG[INV.EXPLORER_HAT] = ["Czapka odkrywcy", "Zwierzęta nie będą zwracały na ciebie uwagi", "\x61\x6c\x65\x20\x6e\x69\x65\x20\x72\xf3\x62\x20\x68\x61\u0142\x61\x73\x75\x21", "Ciepło w i poza zimą"];
        LANG[INV.CHRISTMAS_HAT] = ["świąteczna czapka", "Oh, oh, oh, Wesołych Świąt", "Ciepło w i poza zimą"];
        LANG[INV.ELF_HAT] = ["Czapka elfa", "\x4e\x69\x65\x20\x70\x6f\x7a\x77\xf3\x6c\x20\x73\x69\u0119\x20\x62\x79\u0107\x20\x77\x79\x6b\x6f\x72\x7a\x79\x73\x74\x79\x77\x61\x6e\x79\x6d\x2c\x20\x6d\x61\u0142\x79\x20\u015b\x6e\x69\x65\u017c\x6e\x79\x20\x65\x6c\x66\x69\x65\x21", "Ciepło w i poza zimą"];
        LANG[INV.HOOD] = ["Kaptur", "Jesteś łobuzem", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "\x2d\x20\x54\x77\xf3\x6a\x20\x63\x65\x6c\x20\x6e\x69\x65\x20\x6a\x65\x73\x74\x20\x75\x62\x72\x61\x6e\x79\x20\x77\x20\x63\x68\u0142\x6f\x70\x73\x6b\u0105\x20\x74\x75\x6e\x69\x6b\u0119", "Jest ciepło w i poza zimą"];
        LANG[INV.EARMUFFS] = ["Nauszniki", "Jakiś inny rodzaj małej czapki.", "Ciepło w i poza zimą"];
        LANG[INV.COAT] = ["Czapka", "Także nazywana płaszczem.", "Ciepła w i poza zimą"];
        LANG[INV.CAP_SCARF] = ["Szal i czapka", "Bardzo wygodna, bardzo ciepła"];
        LANG[INV.PEASANT] = ["Chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepła w i poza zimą"];
        LANG[INV.WINTER_HOOD] = ["Zimowy kaptur", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "\x2d\x20\x54\x77\xf3\x6a\x20\x63\x65\x6c\x20\x6e\x69\x65\x20\x6a\x65\x73\x74\x20\x75\x62\x72\x61\x6e\x79\x20\x77\x20\x74\x75\x6e\x69\x6b\u0119\x20\x7a\x69\x6d\x6f\x77\x65\x67\x6f\x20\x63\x68\u0142\x6f\x70\x61", "Jest ciepło w i poza zimą"];
        LANG[INV.WINTER_PEASANT] = ["Zimowa chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepło w i poza zimą"];
        LANG[INV.DIVING_MASK] = ["Maska do nurkowania", "Jesteś szybki w wodzie", "Ciepło", "Obrona przed graczami: 2, Obrona przed zwierzętami: 8"];
        LANG[INV.SUPER_DIVING_SUIT] = ["\x53\x74\x72\xf3\x6a\x20\x67\u0142\u0119\x62\x69\x6e\x6f\x77\x79", "Jesteś bardzo szybki w wodzie", "Ciepło ci w wodzie", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
        LANG[INV.DRAGON_ORB] = ["Smocza kula", "Zdobyta podczas zadania"];
        LANG[INV.DRAGON_HEART] = ["Smocze serce", "Zamienia cię w ducha po śmierci!", "Jesteś duchem na 60 sekund", "Znajdź kamień rezurekcyjny"];
        LANG[INV.GEMME_GREEN] = ["Zielony kryształ", "Nie oszukiwałeś, przysięgasz?"];
        LANG[INV.GEMME_ORANGE] = ["Pomarańczowy kryształ", "Tylko prawdziwy pirat może go znaleźć!"];
        LANG[INV.GEMME_BLUE] = ["Niebieski kryształ", "Dla zbyt miłych ludzi"];
        LANG[INV.CROWN_GREEN] = ["Zielona korona", "Szybko się leczysz", "Uzdrawia z biegiem czasu: 40", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
        LANG[INV.CROWN_ORANGE] = ["Pomarańczowa korona", "Nagle poczułeś smak szczęścia", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
        LANG[INV.CROWN_BLUE] = ["Niebieska korona", "Gdy już będziesz martwy, zamienisz się w ducha", "Przy okazji stracisz swoją broń i kilof", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
        LANG[INV.BUCKET_FULL] = ["Wiadro", "\x52\xf3\x77\x6e\x69\x65\u017c\x20\x70\x72\x7a\x79\x64\x61\x74\x6e\x65\x20\x64\x6f\x20\x6e\x61\x70\x65\u0142\x6e\x69\x65\x6e\x69\x61\x20\x73\x74\x75\x64\x6e\x69", "Jedno wiadro jest jak dwanaście butelek"];
        LANG[INV.BUCKET_EMPTY] = ["Puste wiadro", "Musisz napełnić to wiadro wodą"];
        LANG[INV.BOTTLE_FULL] = ["Butelka", "Pozwala pić wodę wszędzie", "Woda: 50"];
        LANG[INV.BOTTLE_EMPTY] = ["Pusta butelka", "\x4d\x6f\u017c\x65\x73\x7a\x20\x6e\x61\x70\x65\u0142\x6e\x69\u0107\x20\x74\u0105\x20\x62\x75\x74\x65\x6c\x6b\u0119\x20\x62\x6c\x69\x73\x6b\x6f\x20\u017a\x72\xf3\x64\u0142\x61\x20\x77\x6f\x64\x79"];
        LANG[INV.WATERING_CAN] = ["Pusta konewka", "\x4d\x75\x73\x69\x73\x7a\x20\x6a\u0105\x20\x6e\x61\x70\x65\u0142\x6e\x69\u0107\x20\x77\x20\u017a\x72\xf3\x64\x6c\x65\x20\x77\x6f\x64\x79\x2c\x20\x61\x62\x79\x20\x6a\u0105\x20\x75\u017c\x79\u0107"];
        LANG[INV.WATERING_CAN_FULL] = ["Konewka", "Pozwala podlewać rośliny", "Obrażenia: 1"];
        LANG[INV.BAG] = ["Plecak", "Więcej miejsca na twoje przedmioty!"];
        LANG[INV.PAPER] = ["Papier", "Używany w tworzeniu książki"];
        LANG[INV.BOOK] = ["Książka", "\x50\x6f\x7a\x77\x61\x6c\x61\x20\x7a\x6e\x61\x63\x7a\x6e\x69\x65\x20\x73\x6b\x72\xf3\x63\x69\u0107\x20\x77\x79\x74\x77\x61\x72\x7a\x61\x6e\x69\x65", "Musisz ją nosić by zadziałała", "Uszkodzenie 1"];
        LANG[INV.BANDAGE] = ["Bandaż", "Szybciej zregeneruj życie", "Uzdrawia z biegiem czasu: 30", "Efekt: 5"];
        LANG[INV.LOCK] = ["Zamek", "Pozwala ci zamknąć skrzynię"];
        LANG[INV.LOCKPICK] = ["Wytrych", "Pozwala ci odblokować jedną skrzynię"];
        LANG[INV.TOTEM] = ["Totem", "Pozwala ci stworzyć drużynę", "Dziel się drzwiami i zamkniętymi skrzyniami", "\x53\x7a\x6b\x6f\x64\x6c\x69\x77\x65\x20\x62\x75\x64\x79\x6e\x6b\x69\x20\x6e\x69\x65\x20\x7a\x72\x61\x6e\x69\u0105\x20\x74\x77\x6f\x69\x63\x68\x20\x70\x72\x7a\x79\x6a\x61\x63\x69\xf3\u0142"];
        LANG[INV.BRIDGE] = ["Most", "Bardzo przydatny w wodzie", "Pozwala ci pić bez utonięcia", "Chodzisz szybciej w wodzie"];
        LANG[INV.SIGN] = ["Tabliczka", "Zostaw wiadomość dla innych", "Wytrzymałość: 200"];
        LANG[INV.ROOF] = ["Dach", "Trochę cie ogrzewa i chowa!"];
        LANG[INV.WELL] = ["Studnia", "Umożliwia napełnienie butelki", "Wytrzymałość: 1000"];
        LANG[INV.WALL] = ["Drewniany mur", "Znasz taniec ścian?", "Wytrzymałość: 1000"];
        LANG[INV.STONE_WALL] = ["Kamienny mur", "Jest to trochę bardziej poważniejsze.", "Wytrzymałość: 1500"];
        LANG[INV.GOLD_WALL] = [" Złoty mur", "Złoto na twoich murach? To trochę krzykliwe.", "Wytrzymałość: 2000"];
        LANG[INV.DIAMOND_WALL] = ["Diamentowy mur", "Jaki błyszczący, uważaj na oczy", "Wytrzymałość: 2500"];
        LANG[INV.AMETHYST_WALL] = ["Ametystowy mur", "Musisz bardzo się bać, aby wyjść!", "Wytrzymałość: 3000"];
        LANG[INV.SPIKE] = ["Drewniany kolczasty mur", "\x4d\x6f\u017c\x65\x20\x75\x73\x7a\x6b\x6f\x64\x7a\x69\u0107\x20\x77\x72\x6f\x67\xf3\x77", "Obrażenia: 10, Obrażenia po uszkodzeniu: 2", "Wytrzymałość: 150"];
        LANG[INV.STONE_SPIKE] = ["Kamienny kolczasty mur", "Nie chciałbym być twoim wrogiem.", "Obrażenia: 20", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 300"];
        LANG[INV.GOLD_SPIKE] = ["Złoty kolczasty mur", "Jesteśtaki okrutny.", "Obrażenia: 30", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 600"];
        LANG[INV.DIAMOND_SPIKE] = ["Diamentowy kolczasty mur", "Raczej nie lubisz towarzystwa.", "Obrażenia: 40", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 1200"];
        LANG[INV.AMETHYST_SPIKE] = ["Ametystowy kolczasty mur", "Co ci sąsiedzi ci zrobili?", "Obrażenia: 50", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 2400"];
        LANG[INV.WOOD_DOOR] = ["Drewniane drzwi", "\x4d\x6f\u017c\x65\x20\x62\x79\u0107\x20\x6f\x74\x77\x61\x72\x74\x65\x20\x70\x72\x7a\x65\x7a\x20\x63\x69\x65\x62\x69\x65\x20\x6c\x75\x62\x20\x70\x72\x7a\x79\x6a\x61\x63\x69\xf3\u0142", "Wytrzymałość: 1000"];
        LANG[INV.STONE_DOOR] = ["Kamienne drzwi", "Solidne drzwi są bardziej poważne ", "Wytrzymałość: 1500"];
        LANG[INV.GOLD_DOOR] = ["Złote drzwi", "Czy odbudowujesz El Dorado?", "Wytrzymałość: 2000"];
        LANG[INV.DIAMOND_DOOR] = ["Diamentowe drzwi", "Dla błyszczącego domu", "Wytrzymałość: 2500"];
        LANG[INV.AMETHYST_DOOR] = ["Ametystowe drzwi", "\x43\x7a\x79\x20\x74\x77\xf3\x6a\x20\x64\x6f\x6d\x20\x74\x6f\x20\x7a\x61\x6d\x6b\x6e\x69\u0119\x74\x79\x20\x73\x65\x6a\x66\x3f", "Wytrzymałość: 3000"];
        LANG[INV.FURNACE] = ["Piec", "Ogrzewa cię", "Zużywa drewno co 5 sekund", "Wytrzymałość: 1000"];
        LANG[INV.WINDMILL] = ["Młyn", "Może produkować mąkę z pszenicy", "Przygotowanie mąki zajmuje 5 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
        LANG[INV.BREAD_OVEN] = ["Piec do chleba", "Pozwala na wypiek chleba z mąki", "Przygotowanie chleba zajmuje 10 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
        LANG[INV.RESURRECTION] = ["Kamień rezurekcyjny", "To magia", "Wskrzesi cię jeśli jesteś duchem", "Stracisz swoja broń i kilof", "Wytrzymałość: 200"];
        LANG[TEXT.YOU_CANNOT_JOIN] = "Nie możesz dołączyć do tego serwera";
        LANG[TEXT.KICKED] = "Wyrzucony: ";
        LANG[TEXT.KEY_ALREADY] = "\x54\x77\xf3\x6a\x20\x6b\x6c\x75\x63\x7a\x20\x6a\x65\x73\x74\x20\x61\x6b\x74\x75\x61\x6c\x6e\x69\x65\x20\x75\u017c\x79\x77\x61\x6e\x79\x20\x70\x72\x7a\x65\x7a\x20\x69\x6e\x6e\x65\x67\x6f\x20\x67\x72\x61\x63\x7a\x61";
        LANG[TEXT.KEY_WRONG] = "\x54\x77\xf3\x6a\x20\x6b\x6c\x75\x63\x7a\x20\x6a\x65\x73\x74\x20\x6e\x69\x65\x70\x72\x61\x77\x69\x64\u0142\x6f\x77\x79";
        LANG[TEXT.OLD_VERSION] = "Posiadasz starszą wersję, musisz wyczyścić swoją pamięć";
        LANG[TEXT.NO_MORE_RESOURCES] = "\x4e\x69\x65\x20\x6d\x61\x20\x6e\x6f\x77\x79\x63\x68\x20\x6d\x69\x6e\x65\x72\x61\u0142\xf3\x77\x2c\x20\x7a\x77\x69\x65\x72\x7a\u0105\x74\x2c\x20\x69\x20\x6a\x65\x64\x7a\x65\x6e\x69\x61";
        LANG[TEXT.SURVIVED_1DAY] = "Przeżyłeś 1 dzień";
        LANG[TEXT.SURVIVED] = "Przeżyłeś ";
        LANG[TEXT.DAYS] = " dni";
        LANG[TEXT.DEAD_SAD] = "Jesteś martwy ;-;";
        LANG[TEXT.SPAM_ME] = "Serwer nie może znaleźć miejsca na spawn! Spamuj przycisk zagraj! Lub wybierz inny serwer...";
        LANG[TEXT.SPAM_ME2] = "Serwer jest pełny! Spamuj przycisk zagraj!";
        LANG[TEXT.EMPTY] = "\u0179\x72\xf3\x64\u0142\x6f\x20\x6a\x65\x73\x74\x20\x70\x75\x73\x74\x65";
        LANG[TEXT.INV_FULL] = "Ekwipunek jest pełny (użyj prawego przycisku myszy, żeby wyrzucić przedmiot)";
        LANG[TEXT.DEAD] = " jest martwy";
        LANG[TEXT.WRONG_TOOL] = "To nie jest właściwe narzędzie";
        LANG[TEXT.JOIN_TEAM] = "Dołączyłeś do drużyny";
        LANG[TEXT.YOU_DEAD] = "Jesteś martwy";
        LANG[TEXT.JOINED_TEAM] = " dołączył do drużyny";
        LANG[TEXT.TEAM_DESTROYED] = "Twoja drużyna została zniszczona";
        LANG[TEXT.LEFT_TEAM] = " Opuściłeś drużynę";
        LANG[TEXT.LEFT_TEAM2] = " opuścił drużynę";
        LANG[TEXT.TOKEN] = "\x4b\x74\x6f\u015b\x20\x75\x6b\x72\x61\x64\u0142\x20\x74\x77\xf3\x6a\x20\u017c\x65\x74\x6f\x6e\x20\x3a\x3e";
        LANG[TEXT.CHOOSE] = "Wybierz serwer";
        LANG[TEXT.PLAYERS] = "graczy";
        LANG[TEXT.TOTAL_PLAYERS] = "wszystkich graczy";
        LANG[TEXT.TOTAL_MODE] = "graczy w tym trybie";
        LANG[TEXT.COMMING_SOON] = "\x4a\x75\u017c\x20\x77\x6b\x72\xf3\x74\x63\x65\x2e\x2e\x2e";
        document.getElementById("nickname_input").placeholder = "Przydomek";
        DIE[0] = ["Zostałeś zabity bez powodu"];
        DIE[1] = ["Umarłeś z głodu, jak nazwa gry wskazuje"];
        DIE[2] = ["Zamarzłeś na śmierć. Ale smutne", "\x4d\x61\x73\x7a\x20\x68\x69\x70\x6f\x74\x65\x72\x6d\x69\u0119\x2e\x20\x4e\x61\x73\x74\u0119\x70\x6e\x79\x6d\x20\x72\x61\x7a\x65\x6d\x2c\x20\x7a\x61\x6d\x69\x61\x73\x74\x20\x74\x65\x67\x6f\x20\x73\x70\x72\xf3\x62\x75\x6a\x20\x73\x69\x65\x64\x7a\x69\x65\u0107\x20\x6f\x62\x6f\x6b\x20\x6f\x67\x6e\x69\x73\x6b\x61\x2e"];
        DIE[3] = ["\x47\x72\x61\x63\x7a\x20\x7a\x61\x62\x69\u0142\x20\x63\x69\u0119\x2c\x20\x6d\xf3\x77\x69\u0105\x63\x20\x63\x69\x20\x27\x67\x69\x74\x20\x67\x75\x64\x2e\x27\x20", "Zostałeś zamordowany przez gracza. Nie martw się, ten gracz też zginie, ewentualnie."];
        DIE[4] = ["Byłeś za blisko ogniska i spłonąłeś. Zły pomysł.", "Zginąłeś od ognia. Ogień cię rani. Idź i napisz o tym historię."];
        DIE[5] = ["Twoje ciało stało się gniazdem dla pajęczych jaj", "\x50\x61\x6a\u0105\x6b\x20\x63\x69\u0119\x20\x7a\x61\x62\x69\u0142\x2e\x20\x50\x72\x7a\x79\x6e\x61\x6a\x6d\x6e\x69\x65\x6a\x20\x74\x6f\x20\x6e\x69\x65\x20\x62\x79\u0142\x20\x6b\x72\xf3\x6c\x69\x6b\x2e"];
        DIE[6] = ["Wilk już nie będzie głodował po zjedzeniu cię", "To nie są pieski.Wilki nie lubią jak się je głaszcze."];
        DIE[7] = ["Lis był dla ciebie za szybki", "Lis zmienił cię w pudło.Od kiedy zwierzęta mają magiczne zdolności?"];
        DIE[8] = ["Niedźwiedź chciał się tylko przytulić.", "Niedźwiedź był biedny. Nie jest mi przykro."];
        DIE[9] = ["\x5a\x6f\x73\x74\x61\u0142\x65\u015b\x20\x73\x70\x61\x6c\x6f\x6e\x79\x20\x6e\x61\x20\x70\x6f\x70\x69\xf3\u0142\x20\x70\x72\x7a\x65\x7a\x20\x73\x6d\x6f\x6b\x61\x2e\x20\x4a\x61\x6b\x69\x65\x20\x74\x6f\x20\x73\x6d\x75\x74\x6e\x65\x2e", "\x5a\x6f\x73\x74\x61\u0142\x65\u015b\x20\x73\x70\u0142\x61\x73\x7a\x63\x7a\x6f\x6e\x79\x20\x70\x72\x7a\x65\x7a\x20\x73\x6d\x6f\x6b\x61\x2e\x20\x42\x79\u0107\x20\x7a\x6d\x69\x61\u017c\x64\u017c\x6f\x6e\x79\x6d\x20\x74\x6f\x20\x6f\x6b\x72\x6f\x70\x6e\x79\x20\x73\x70\x6f\x73\xf3\x62\x20\x6e\x61\x20\u015b\x6d\x69\x65\x72\u0107\x2e"];
        DIE[10] = ["Wskoczyłeś na kolczasty mur. Niezbyt dobry pomysł...", "Zostałeś zabity przez kolczasty mur. Większość ludzi ludzi jest wystarczająco rozsądna, aby nie dotykać spiczastych rzeczy."];
        DIE[11] = ["Nawet duch potrafi umrzeć.", "Nie udało ci się dokonać rezurekcji. To jest gra, więc żyjesz po śmierci, więc..."];
        DIE[12] = ["Bakterie z twojego surowego mięsa zabiły cię. Ta gra jest zdecydowanie za trudna.", "Ty zabiłeś surowe mięso. Ono zabiło ciebię."];
        DIE[13] = ["Zginąłeś z pragnienia. Lepiej pić własny mocz."];
        DIE[14] = ["Czy wiedziałeś, że usta głodomorka są zawsze pod wodą podczas pływania? Teraz wiesz."];
        DIE[15] = ["Nie martw się, zasmakowałeś pirani.", "Zabawny fakt: Piranie jedzą ludzi, włączając ciebie."];
        DIE[16] = ["\x4c\x61\x70\x61\x4d\x61\x75\x76\x65\x20\x6e\x69\x65\x20\x70\x6c\x61\x6e\x75\x6a\x65\x20\x61\x62\x79\u015b\x20\x6d\xf3\x67\u0142\x20\x7a\x61\x62\x69\u0107\x20\x6b\x72\x61\x6b\x65\x6e\x61", "Kraken rozwalił twoją czaszkę."];
        DIE[17] = ["\x54\x77\x6f\x6a\x61\x20\x73\x6b\xf3\x72\x61\x20\x6f\x64\x70\x61\x64\x61\x2c\x20\x73\u0142\x6f\u0144\x63\x65\x20\x63\x69\u0119\x20\x7a\x61\x62\x69\x6a\x61\x2e"];
        DIE[18] = ["\x43\x7a\x6f\x73\x6e\x65\x6b\x20\x77\x20\x74\x77\x6f\x69\x63\x68\x20\x6b\x69\x65\x73\x7a\x65\x6e\x69\x61\x63\x68\x20\x20\x75\x67\x6f\x74\x6f\x77\x61\u0142\x20\x63\x69\x20\x6d\xf3\x7a\x67\x2e"];
        DIE[19] = ["\x4a\x61\x6b\x6f\x20\x77\x61\x6d\x70\x69\x72\x2c\x20\x6e\x69\x65\x20\x73\x74\x61\u0142\x62\x79\x6d\x20\x62\x6c\x69\x73\x6b\x6f\x20\x7a\u0105\x62\x6b\xf3\x77\x20\x63\x7a\x6f\x73\x6e\x6b\x75\x2e"];
        DIE[20] = ["Zjadłeś czosnek jako wampir, czego oczekiwałeś?"];
        DIE[21] = ["\x54\x77\x6f\x6a\x65\x20\x63\x69\x61\u0142\x6f\x20\x6f\x77\x69\x6a\x61\x20\x73\x69\u0119\x20\x77\x20\x63\x69\x65\x72\x6e\x69\x73\x74\x65\x20\x6b\x72\x7a\x61\x6b\x69\x2e\x4b\x69\x65\x64\x79\x20\x70\x72\xf3\x62\x75\x6a\x65\x73\x7a\x20\x75\x63\x69\x65\x63\x2c\x74\x77\x6f\x6a\x61\x20\x73\x6b\xf3\x72\x61\x20\x6f\x64\x70\x61\x64\x61\x20\x69\x20\x74\x77\x6f\x6a\x65\x20\x73\x65\x72\x63\x65\x20\x70\x72\x7a\x65\x73\x74\x61\x6a\x65\x20\x62\x69\u0107\x2e"];
        ZOMBIE_GRUMBLE = "Uuunnnggg";
        ZOMBIE_GRUMBLES = ["Uuunnnggg... Głoduję", "\x50\x6f\x74\x72\x7a\x65\x62\x75\x6a\u0119\x20\x74\x77\x6f\x6a\x65\x67\x6f\x20\x6d\xf3\x7a\x67\x75\x20\x55\x75\x75\x6e\x6e\x6e\x67\x67\x67\x2e\x2e\x2e", "Świeże mięso tutaj.. Uuunnnggg", "Uuunnnggg... Jesteś pyszny", "Uuunnnggg...", "Jeść... uuunnnggg...", "Czuję krew... Uuunnnggg"];
    };
    var set_portuguese = function () {
        LANG[INV.DRAGON_CUBE] = ["You feel a great power emanating from this orb"];
        DIE[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        LANG[INV.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        LANG[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME";
        LANG[TEXT.TWITTER] = " Share on Twitter";
        LANG[TEXT.FACEBOOK] = " Share on Facebook";
        LANG[TEXT.KIT_NEXT] = "You can buy items on the shop in the next game with your points";
        LANG[TEXT.POINTS] = "points";
        LANG[TEXT.SCORE] = "Score";
        LANG[TEXT.KILL] = "Kill";
        LANG[TEXT.DAYS_SURVIVED] = "Days survived";
        LANG[TEXT.MODE_FREE] = "Building method: Free. Press G to change";
        LANG[TEXT.MODE_GRID] = "Building method: Grid. Press G to change";
        LANG[INV.CRAB_LOOT] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        LANG[INV.CRAB_SPEAR] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
        LANG[INV.CROWN_CRAB] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can\'t hit you and you can\'t hit them", "Players Defense: 4", "Animals Defense: 13"];
        LANG[INV.BED] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var i = 0; i < 7; i++)
            document.getElementById("claim_reward_" + i).innerHTML = "CLAIM REWARD!";
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        LANG[INV.HAND] = ["\x6d\xe3\x6f"];
        LANG[INV.GROUND] = ["terra", "\x65\x73\x74\xe1\x20\x73\x75\x6a\x6f\x21"];
        LANG[INV.SAND] = ["areia", "entrou nos meus olhos!"];
        LANG[INV.WOOD] = ["madeira", "\x76\x6f\x63\xea\x20\x6e\xe3\x6f\x20\x70\x6f\x64\x65\x20\x70\x65\x67\x61\x72\x20\x6f\x20\x73\x75\x66\x69\x63\x69\x65\x6e\x74\x65\x20\x64\x69\x73\x73\x6f\x21"];
        LANG[INV.STONE] = ["pedra", "\x74\x61\x6d\x62\xe9\x6d\x20\x63\x68\x61\x6d\x61\x64\x6f\x20\x72\x6f\x63\x68\x61"];
        LANG[INV.GOLD] = ["ouro", "\x73\x65\x6a\x61\x20\x67\x65\x6e\x65\x72\x6f\x73\x6f\x2c\x20\x64\xea\x20\x70\x61\x72\x61\x20\x6f\x75\x74\x72\x6f\x73"];
        LANG[INV.DIAMOND] = ["diamante", "\x6f\x20\x71\x75\x65\x20\x76\x6f\x63\xea\x20\x69\x72\xe1\x20\x66\x61\x7a\x65\x72\x20\x63\x6f\x6d\x20\x69\x73\x73\x6f\x3f"];
        LANG[INV.AMETHYST] = ["ametista", "\xe9\x20\x6d\x61\x75\x76\x65\x20\x63\x6f\x6d\x6f\x20\x6c\x61\x70\x61"];
        LANG[INV.FLOUR] = ["farinha", "usada na cozinha"];
        LANG[INV.COOKIE] = ["biscoito", "\x62\x69\x73\x63\x6f\x69\x74\x6f\x20\x64\x61\x20\x76\x6f\x76\xf3", "comida: 50"];
        LANG[INV.CAKE] = ["bolo", "bolo dos sonhos para gourmets", "comida: 100"];
        LANG[INV.MEAT] = ["carne crua", "\x76\x6f\x63\xea\x20\x70\x6f\x64\x65\x20\x63\x6f\x7a\x69\x6e\x68\x61\x72\x20\x6e\x61\x20\x66\x6f\x67\x75\x65\x69\x72\x61", "envenenamento por comida: 10", "comida: 15"];
        LANG[INV.COOKED_MEAT] = ["carne assada", "um mal passado, por favor", "comida: 35"];
        LANG[INV.FOODFISH] = ["peixe cru", "\x65\x75\x20\x61\x63\x68\x6f\x20\x71\x75\x65\x20\x61\x69\x6e\x64\x61\x20\x65\x73\x74\xe1\x20\x76\x69\x76\x6f", "causa envenenamento por comida: 10", "comida: 18"];
        LANG[INV.FOODFISH_COOKED] = ["peixe assado", "\x63\x6f\x6d\x20\x6c\x69\x6d\xe3\x6f\x20\xe9\x20\x70\x65\x72\x66\x65\x69\x74\x6f", "comida: 35"];
        LANG[INV.BREAD] = ["\x70\xe3\x6f", "\x75\x6d\x20\x65\x78\x63\x65\x6c\x65\x6e\x74\x65\x20\x70\xe3\x6f\x20\x66\x72\x61\x6e\x63\xea\x73", "\xe9\x20\x61\x20\x6d\x6f\x65\x64\x61\x20\x64\x6f\x20\x6d\x65\x72\x63\x61\x64\x6f", "comida: 15"];
        LANG[INV.SANDWICH] = ["\x73\x61\x6e\x64\x75\xed\x63\x68\x65", "saboroso com rissol de krabby", "comida: 100"];
        LANG[INV.CANDY] = ["doces", "\x61\x70\x65\x6e\x61\x73\x20\x70\x61\x72\x61\x20\x63\x72\x69\x61\x6e\xe7\x61\x73\x21", "comida: 100"];
        LANG[INV.SUGAR_CAN] = ["\x63\x61\x6e\x61\x2d\x64\x65\x2d\x61\xe7\xfa\x63\x61\x72", "\x70\x72\x6f\x76\x65\x2c\x20\xe9\x20\x64\x65\x6c\x69\x63\x69\x6f\x73\x6f\x21", "comida: 100"];
        LANG[INV.GARLAND] = ["pisca-pisca", "\x64\x65\x63\x6f\x72\x61\xe7\xe3\x6f\x20\x70\x65\x72\x66\x65\x69\x74\x61\x20\x64\x65\x20\x74\x65\x6c\x68\x61\x64\x6f"];
        LANG[INV.SEED] = ["sementes de berries", "cresce como berrie", "nasce em: 2min", "cresce em: 55s", "\x70\x72\x65\x63\x69\x73\x61\x20\x64\x65\x20\xe1\x67\x75\x61\x20\x65\x6d\x3a\x20\x33\x6d\x69\x6e\x20\x32\x30\x73", "durabilidade: 700", "tempo de vida: 8 dias"];
        LANG[INV.PLANT] = ["berry", "Berry saborosa!", "comida: 10"];
        LANG[INV.WHEAT_SEED] = ["semente de trigo", "cresce como trigo", "nasce em: 2min", "cresce em: 16s", "\x70\x72\x65\x63\x69\x73\x61\x20\x64\x65\x20\xe1\x67\x75\x61\x20\x65\x6d\x3a\x20\x32\x6d\x69\x6e", "durabilidade: 700", "tempo de vida: 8 days"];
        LANG[INV.WILD_WHEAT] = ["planta selvagem", "vira farinha quando coloca em um moinho de vento"];
        LANG[INV.PUMPKIN_SEED] = ["\x73\x65\x6d\x65\x6e\x74\x65\x20\x64\x65\x20\x61\x62\xf3\x62\x6f\x72\x61", "\x63\x72\x65\x73\x63\x65\x20\x63\x6f\x6d\x6f\x20\x61\x62\xf3\x62\x6f\x72\x61", "nasce em: 2min 40s", "cresce em: 2min", "\x70\x72\x65\x63\x69\x73\x61\x20\x64\x65\x20\xe1\x67\x75\x61\x20\x65\x6d\x3a\x20\x32\x6d\x69\x6e", "durabilidade: 700", "tempo de vida: 8 dias"];
        LANG[INV.PUMPKIN] = ["\x61\x62\xf3\x62\x6f\x72\x61", "\xe9\x20\x61\x20\x6c\x65\x6d\x62\x72\x61\x6e\xe7\x61\x20\x64\x6f\x20\x68\x61\x6c\x6c\x6f\x77\x65\x65\x6e", "comida: 30"];
        LANG[INV.GARLIC_SEED] = ["semente de alho", "muito perigoso para vampiros", "dano: 20", "nassce: 4min", "cresce em: 1min 10s", "\x70\x72\x65\x63\x69\x73\x61\x20\x64\x65\x20\xe1\x67\x75\x61\x20\x65\x6d\x3a\x20\x31\x6d\x69\x6e\x20\x34\x30\x73", "durabilidade: 700", "tempo de vida: 8 dias"];
        LANG[INV.GARLIC] = ["alho", "\x63\x75\x72\x61\x20\x76\x6f\x63\xea\x20\x65\x20\x72\x65\x64\x75\x7a\x20\x6f\x20\x66\x72\x69\x6f", "comida: 14", "cura ao longo do tempo: 30", "efeito: 1"];
        LANG[INV.THORNBUSH_SEED] = ["semente de mato de espinhos", "pode dar dano nos seus inimigos", "dano: 20", "nasce em: 4min", "cresce em: 15s", "\x70\x72\x65\x63\x69\x73\x61\x20\x64\x65\x20\xe1\x67\x75\x61\x20\x65\x6d\x3a\x20\x33\x6d\x69\x6e", "durabilidade: 1000", "tempo de vida: 8 days"];
        LANG[INV.THORNBUSH] = ["mato de espinhos", "pica!"];
        LANG[INV.PLOT] = ["pote", "\x73\xe9\x72\x69\x6f\x2c\x20\x75\x73\x65\x20\x69\x73\x73\x6f", "com esse GMO fertilize suas plantas", "\x76\x61\x69\x20\x63\x72\x65\x73\x63\x65\x72\x20\x6d\x61\x69\x73\x20\x72\xe1\x70\x69\x64\x6f\x20\x65\x20\x63\x6f\x6d\x20\x6d\x65\x6e\x6f\x73\x20\xe1\x67\x75\x61", "durabilidade: 2000"];
        LANG[INV.ICE] = ["gelo", "\xfa\x74\x69\x6c\x20\x70\x61\x72\x61\x20\x66\x61\x7a\x65\x72\x20\x62\x6f\x6c\x6f\x20\x65\x20\xe1\x67\x75\x61"];
        LANG[INV.SPANNER] = ["chave inglesa", "para reparar portas, muros e muros com espinho", "dano: 2"];
        LANG[INV.FUR_WOLF] = ["pele de lobo", "\x63\x61\x63\x68\x6f\x72\x72\x6f\x3f\x20\x6d\x61\x73\x20\x6f\x6e\x64\x65\x20\x65\x73\x74\xe1\x20\x6f\x20\x63\x61\x63\x68\x6f\x72\x72\x6f\x3f\x21"];
        LANG[INV.FUR] = ["pele de coelho", "\x6f\x20\x63\x6f\x65\x6c\x68\x6f\x20\x65\x72\x61\x20\x74\xe3\x6f\x20\x66\x6f\x66\x6f\x2e\x2e\x2e"];
        LANG[INV.SPECIAL_FUR] = ["pele pura", "\x76\x6f\x63\xea\x20\xe9\x20\x75\x6d\x61\x20\x66\xe1\x62\x72\x69\x63\x61\x20\x64\x65\x20\x70\xe3\x6f"];
        LANG[INV.SPECIAL_FUR_2] = ["pele negra", "\x76\x6f\x63\xea\x20\x65\x73\x74\xe1\x20\x70\x72\x6f\x6e\x74\x6f\x20\x70\x61\x72\x61\x20\x66\x61\x7a\x65\x72\x20\x61\x6c\x67\x6f\x20\x65\x72\x72\x61\x64\x6f"];
        LANG[INV.FUR_WINTER] = ["pele de inverno", "\x65\x6c\x65\x20\x73\xf3\x20\x71\x75\x65\x72\x69\x61\x20\x75\x6d\x20\x61\x62\x72\x61\xe7\x6f"];
        LANG[INV.SCALES] = ["escala", "\xe9\x20\x70\x65\x71\x75\x65\x6e\x6f\x20\x63\x6f\x6d\x6f\x20\x70\x65\x69\x78\x65\x21"];
        LANG[INV.KRAKEN_SKIN] = ["pele do kraken", "\x76\x6f\x63\xea\x20\x6e\xe3\x6f\x20\x65\x73\x74\xe1\x20\x63\x6f\x6d\x20\x6d\x65\x64\x6f\x3f"];
        LANG[INV.FIRE] = ["fogueira", "\x65\x73\x71\x75\x65\x6e\x74\x61\x20\x76\x6f\x63\xea\x21", "durabilidade: 150", "tempo de vida: 2min"];
        LANG[INV.BIG_FIRE] = ["fogueira grande", "te esquenta por mais tempo!", "durabilidade: 400", "tempo de vida: 6min"];
        LANG[INV.WORKBENCH] = ["mesa de trabalho", "\x6d\x75\x69\x74\x6f\x20\xfa\x74\x69\x6c\x20\x70\x61\x72\x61\x20\x66\x61\x7a\x65\x72\x20\x74\x6f\x64\x6f\x73\x20\x6f\x73\x20\x6f\x62\x6a\x65\x74\x6f\x73"];
        LANG[INV.CORD] = ["linha", "\x75\x73\x61\x64\x61\x20\x70\x61\x72\x61\x20\x66\x61\x7a\x65\x72\x20\x63\x68\x61\x70\xe9\x75\x73\x20\x65\x20\x6d\x6f\x63\x68\x69\x6c\x61"];
        LANG[INV.BLUE_CORD] = ["linha de diamante", "\x75\x73\x61\x64\x61\x20\x70\x61\x72\x61\x20\x66\x61\x7a\x65\x72\x20\x63\x68\x61\x70\xe9\x75\x73\x20\x65\x73\x70\x65\x63\x69\x61\x69\x73"];
        LANG[INV.CHEST] = ["\x62\x61\xfa", "\x70\x65\x72\x6d\x69\x74\x65\x20\x71\x75\x65\x20\x76\x6f\x63\xea\x20\x67\x75\x61\x72\x64\x65\x20\x69\x74\x65\x6e\x73", "durabilidade: 500"];
        LANG[INV.SWORD_WOOD] = ["espada de madeira", "isso funciona?", "dano: 12", "\x64\x61\x6e\x6f\x20\x65\x6d\x20\x63\x6f\x6e\x73\x74\x72\x75\xe7\xf5\x65\x73\x3a\x20\x34"];
        LANG[INV.SWORD] = ["espada de pedra", "seja legal com outros", "dano: 19", "\x64\x61\x6e\x6f\x20\x65\x6d\x20\x63\x6f\x6e\x73\x74\x72\x75\xe7\xf5\x65\x73\x3a\x20\x36"];
        LANG[INV.SWORD_GOLD] = ["espada de ouro", "rei da floresta", "dano: 22", "\x64\x61\x6e\x6f\x20\x65\x6d\x20\x63\x6f\x6e\x73\x74\x72\x75\xe7\xf5\x65\x73\x3a\x20\x37"];
        LANG[INV.SWORD_DIAMOND] = ["espada de diamante", "\x76\x6f\x63\xea\x20\x70\x6f\x64\x65\x20\x73\x65\x6e\x74\x69\x72\x20\x6f\x20\x70\x6f\x64\x65\x72", "dano: 24", "\x64\x61\x6e\x6f\x20\x65\x6d\x20\x63\x6f\x6e\x73\x74\x72\x75\xe7\xf5\x65\x73\x3a\x20\x38"];
        LANG[INV.PIRATE_SWORD] = ["espada de pirata", "AYYYYY!", "\x61\x6c\x63\x61\x6e\xe7\x61\x20\x6d\x61\x69\x73\x20\x64\x69\x73\x74\xe2\x6e\x63\x69\x61\x20\x71\x75\x65\x20\x61\x20\x65\x73\x70\x61\x64\x61\x20\x6e\x6f\x72\x6d\x61\x6c", "dano: 24", "\x64\x61\x6e\x6f\x20\x65\x6d\x20\x63\x6f\x6e\x73\x74\x72\x75\xe7\xf5\x65\x73\x3a\x20\x38"];
        LANG[INV.SWORD_AMETHYST] = ["espada de ametista", "\x6d\x61\x75\x76\x65\x20\xe9\x20\x61\x20\x63\x6f\x72\x20\x6d\x61\x69\x73\x20\x62\x6f\x6e\x69\x74\x61\x20\x64\x6f\x20\x6d\x75\x6e\x64\x6f", "dano: 27", "\x64\x61\x6e\x6f\x20\x65\x6d\x20\x63\x6f\x6e\x73\x74\x72\x75\xe7\xf5\x65\x73\x3a\x20\x39"];
        LANG[INV.DRAGON_SWORD] = ["\x65\x73\x70\x61\x64\x61\x20\x64\x6f\x20\x64\x72\x61\x67\xe3\x6f", "sem piedade!", "dano: 30", "\x64\x61\x6e\x6f\x20\x65\x6d\x20\x63\x6f\x6e\x73\x74\x72\x75\xe7\xf5\x65\x73\x3a\x20\x31\x30"];
        LANG[INV.DRAGON_SPEAR] = ["\x6c\x61\x6e\xe7\x61\x20\x64\x6f\x20\x64\x72\x61\x67\xe3\x6f", "mate todos eles!", "dano: 22", "\x64\x61\x6e\x6f\x20\x65\x6d\x20\x63\x6f\x6e\x73\x74\x72\x75\xe7\xf5\x65\x73\x3a\x20\x36"];
        LANG[INV.PICK_WOOD] = ["picareta de madeira", "pode coletar apenas madeira e pedra", "dano: 1"];
        LANG[INV.PICK_STONE] = ["picareta de pedra", "pode coletar madeira, pedra e ouro", "dano: 2"];
        LANG[INV.PICK_GOLD] = ["picareta de ouro", "pode coletar diamante", "dano: 3", "\x64\x61\x6e\x6f\x20\x65\x6d\x20\x63\x6f\x6e\x73\x74\x72\x75\xe7\xf5\x65\x73\x3a\x20\x31"];
        LANG[INV.PICK_DIAMOND] = ["picareta de diamante", "pode coletar tudo", "dano: 4", "\x64\x61\x6e\x6f\x20\x65\x6d\x20\x63\x6f\x6e\x73\x74\x72\x75\xe7\xf5\x65\x73\x3a\x20\x31"];
        LANG[INV.PICK_AMETHYST] = ["picareta de ametista", "pode coletar tudo, parece fantastico!", "dano: 5", "\x64\x61\x6e\x6f\x20\x65\x6d\x20\x63\x6f\x6e\x73\x74\x72\x75\xe7\xf5\x65\x73\x3a\x20\x31"];
        LANG[INV.HAMMER] = ["martelo de pedra", "\xfa\x74\x69\x6c\x20\x70\x61\x72\x61\x20\x64\x65\x73\x74\x72\x75\x69\x72\x20\x63\x6f\x6e\x73\x74\x72\x75\xe7\xf5\x65\x73", "\x6e\xe3\x6f\x20\x66\x75\x6e\x63\x69\x6f\x6e\x61\x20\x62\x65\x6d\x20\x6e\x6f\x20\x64\x69\x61\x6d\x61\x6e\x74\x65\x20\x65\x20\x6e\x61\x20\x61\x6d\x65\x74\x69\x73\x74\x61", "dano: 2", "\x64\x61\x6e\x6f\x20\x65\x6d\x20\x63\x6f\x6e\x73\x74\x72\x75\xe7\xf5\x65\x73\x3a\x20\x32\x30"];
        LANG[INV.HAMMER_GOLD] = ["martelo de ouro", "\xfa\x74\x69\x6c\x20\x70\x61\x72\x61\x20\x64\x65\x73\x74\x72\x75\x69\x72\x20\x63\x6f\x6e\x73\x74\x72\x75\xe7\xf5\x65\x73", "\x6e\xe3\x6f\x20\x66\x75\x6e\x63\x69\x6f\x6e\x61\x20\x62\x65\x6d\x20\x6e\x61\x20\x61\x6d\x65\x74\x69\x73\x74\x61", "dano: 3", "\x64\x61\x6e\x6f\x20\x65\x6d\x20\x63\x6f\x6e\x73\x74\x72\x75\xe7\xf5\x65\x73\x3a\x20\x33\x30"];
        LANG[INV.HAMMER_DIAMOND] = ["martelo de diamante", "\xfa\x74\x69\x6c\x20\x70\x61\x72\x61\x20\x64\x65\x73\x74\x72\x75\x69\x72\x20\x63\x6f\x6e\x73\x74\x72\x75\xe7\xf5\x65\x73", "dano: 4", "\x64\x61\x6e\x6f\x20\x65\x6d\x20\x63\x6f\x6e\x73\x74\x72\x75\xe7\xf5\x65\x73\x3a\x20\x34\x30"];
        LANG[INV.HAMMER_AMETHYST] = ["martelo de ametista", "\xfa\x74\x69\x6c\x20\x70\x61\x72\x61\x20\x64\x65\x73\x74\x72\x75\x69\x72\x20\x63\x6f\x6e\x73\x74\x72\x75\xe7\xf5\x65\x73", "dano: 5", "\x64\x61\x6e\x6f\x20\x65\x6d\x20\x63\x6f\x6e\x73\x74\x72\x75\xe7\xf5\x65\x73\x3a\x20\x35\x30"];
        LANG[INV.SUPER_HAMMER] = ["super martelo", "\x76\x6f\x63\xea\x20\x70\x6c\x61\x6e\x65\x6a\x61\x20\x64\x65\x73\x74\x72\x75\x69\x72\x20\x6f\x20\x6d\x75\x6e\x64\x6f\x3f", "dano: 12", "\x64\x61\x6e\x6f\x20\x65\x6d\x20\x63\x6f\x6e\x73\x74\x72\x75\xe7\xf5\x65\x73\x3a\x20\x37\x30"];
        LANG[INV.WOOD_SPEAR] = ["\x6c\x61\x6e\xe7\x61\x20\x64\x65\x20\x6d\x61\x64\x65\x69\x72\x61", "parece um graveto de madeira mas pica.", "dano: 10", "\x64\x61\x6e\x6f\x20\x65\x6d\x20\x63\x6f\x6e\x73\x74\x72\x75\xe7\xf5\x65\x73\x3a\x20\x32"];
        LANG[INV.SPEAR] = ["\x6c\x61\x6e\xe7\x61\x20\x64\x65\x20\x70\x65\x64\x72\x61", "\x6f\x20\x63\x6f\x6d\x65\xe7\x6f\x20\x64\x61\x20\x65\x76\x6f\x6c\x75\xe7\xe3\x6f\x21", "dano: 14", "\x64\x61\x6e\x6f\x20\x65\x6d\x20\x63\x6f\x6e\x73\x74\x72\x75\xe7\xf5\x65\x73\x3a\x20\x34"];
        LANG[INV.GOLD_SPEAR] = ["\x6c\x61\x6e\xe7\x61\x20\x64\x65\x20\x6f\x75\x72\x6f", "cuidado, pica!", "dano: 15", "\x64\x61\x6e\x6f\x20\x65\x6d\x20\x63\x6f\x6e\x73\x74\x72\x75\xe7\xf5\x65\x73\x3a\x20\x35"];
        LANG[INV.DIAMOND_SPEAR] = ["\x6c\x61\x6e\xe7\x61\x20\x64\x65\x20\x64\x69\x61\x6d\x61\x6e\x74\x65", "\x76\x6f\x63\xea\x20\x65\x73\x74\xe1\x20\x70\x72\x6f\x6e\x74\x6f\x20\x70\x61\x72\x61\x20\x6d\x61\x74\x61\x72\x20\x75\x6d\x20\x64\x72\x61\x67\xe3\x6f", "Dano: 17", "\x64\x61\x6e\x6f\x20\x65\x6d\x20\x63\x6f\x6e\x73\x74\x72\x75\xe7\xf5\x65\x73\x3a\x20\x35"];
        LANG[INV.AMETHYST_SPEAR] = ["\x6c\x61\x6e\xe7\x61\x20\x64\x65\x20\x61\x6d\x65\x74\x69\x73\x74\x61", "\x64\x72\x61\x67\xf5\x65\x73\x20\x6e\xe3\x6f\x20\x74\x65\x20\x61\x6d\x65\x64\x72\x6f\x6e\x74\x61\x6d", "Dano: 18", "\x64\x61\x6e\x6f\x20\x65\x6d\x20\x63\x6f\x6e\x73\x74\x72\x75\xe7\xf5\x65\x73\x3a\x20\x36"];
        LANG[INV.SHOVEL] = ["\x70\xe1\x20\x64\x65\x20\x70\x65\x64\x72\x61\x6c", "\x63\x61\x76\x65\x20\x6f\x20\x63\x68\xe3\x6f\x20\x70\x61\x72\x61\x20\x70\x65\x67\x61\x72\x20\x74\x65\x72\x72\x61\x2c\x20\x61\x72\x65\x69\x61\x20\x65\x20\x67\x65\x6c\x6f", "\x76\x6f\x63\xea\x20\x74\x61\x6d\x62\xe9\x6d\x20\x70\x6f\x64\x65\x20\x70\x65\x67\x61\x72\x20\x6d\x69\x6e\x65\x72\x61\x69\x73", "dano: 2"];
        LANG[INV.SHOVEL_GOLD] = ["\x70\xe1\x20\x64\x65\x20\x6f\x75\x72\x6f", "\x63\x61\x76\x65\x20\x6f\x20\x63\x68\xe3\x6f\x20\x70\x61\x72\x61\x20\x70\x65\x67\x61\x72\x20\x74\x65\x72\x72\x61\x2c\x20\x61\x72\x65\x69\x61\x20\x65\x20\x67\x65\x6c\x6f", "\x76\x6f\x63\xea\x20\x74\x61\x6d\x62\xe9\x6d\x20\x70\x6f\x64\x65\x20\x70\x65\x67\x61\x72\x20\x6d\x69\x6e\x65\x72\x61\x69\x73", "dano: 3", "\x64\x61\x6e\x6f\x20\x65\x6d\x20\x63\x6f\x6e\x73\x74\x72\x75\xe7\xf5\x65\x73\x3a\x20\x31"];
        LANG[INV.SHOVEL_DIAMOND] = ["\x70\xe1\x20\x64\x65\x20\x64\x69\x61\x6d\x61\x6e\x74\x65", "\x63\x61\x76\x65\x20\x6f\x20\x63\x68\xe3\x6f\x20\x70\x61\x72\x61\x20\x70\x65\x67\x61\x72\x20\x74\x65\x72\x72\x61\x2c\x20\x61\x72\x65\x69\x61\x20\x65\x20\x67\x65\x6c\x6f", "\x76\x6f\x63\xea\x20\x74\x61\x6d\x62\xe9\x6d\x20\x70\x6f\x64\x65\x20\x70\x65\x67\x61\x72\x20\x6d\x69\x6e\x65\x72\x61\x69\x73", "dano: 4", "\x64\x61\x6e\x6f\x20\x65\x6d\x20\x63\x6f\x6e\x73\x74\x72\x75\xe7\xf5\x65\x73\x3a\x20\x31"];
        LANG[INV.SHOVEL_AMETHYST] = ["\x70\xe1\x20\x64\x65\x20\x61\x6d\x65\x74\x69\x73\x74\x61", "\x63\x61\x76\x65\x20\x6f\x20\x63\x68\xe3\x6f\x20\x70\x61\x72\x61\x20\x70\x65\x67\x61\x72\x20\x74\x65\x72\x72\x61\x2c\x20\x61\x72\x65\x69\x61\x20\x65\x20\x67\x65\x6c\x6f", "\x76\x6f\x63\xea\x20\x74\x61\x6d\x62\xe9\x6d\x20\x70\x6f\x64\x65\x20\x70\x65\x67\x61\x72\x20\x6d\x69\x6e\x65\x72\x61\x69\x73", "dano: 5", "\x64\x61\x6e\x6f\x20\x65\x6d\x20\x63\x6f\x6e\x73\x74\x72\x75\xe7\xf5\x65\x73\x3a\x20\x31"];
        LANG[INV.WOOD_HELMET] = ["capacete de madeira", "melhor que nada", "defesa de jogadores: 1", "defesa de animais: 4"];
        LANG[INV.STONE_HELMET] = ["capacete de pedra", "\x76\x6f\x63\xea\x20\x65\x73\x74\xe1\x20\x70\x72\x6f\x6e\x74\x6f\x20\x70\x61\x72\x61\x20\x61\x20\x62\x61\x74\x61\x6c\x68\x61\x21", "defesa de jogadores: 2", "Animals Defense: 8"];
        LANG[INV.GOLD_HELMET] = ["capacete de ouro", "AKA o capacete dos selvagens", "defesa de jogadores: 4", "defesa de animais: 13"];
        LANG[INV.DIAMOND_HELMET] = ["capacete de diamante", "\x6e\xe3\x6f\x20\x73\x65\x20\x70\x72\x65\x63\x69\x70\x69\x74\x65\x20\x74\x61\x6e\x74\x6f", "defesa de jogadores: 5", "defesa de animais: 19"];
        LANG[INV.AMETHYST_HELMET] = ["capacete de ametista", "\x76\x6f\x63\xea\x20\x6e\xe3\x6f\x20\x74\x65\x6d\x20\x6d\x65\x64\x6f\x20\x64\x65\x20\x6d\x61\x69\x73\x20\x6e\x61\x64\x61", "defesa de jogadores: 6", "defesa de animais: 23"];
        LANG[INV.DRAGON_HELMET] = ["\x63\x61\x70\x61\x63\x65\x74\x65\x20\x64\x6f\x20\x64\x72\x61\x67\xe3\x6f", "\x76\x6f\x63\xea\x20\x76\x61\x69\x20\x63\x6f\x6e\x71\x75\x69\x73\x74\x61\x72\x20\x6f\x20\x6d\x75\x6e\x64\x6f", "defesa de jogadores: 8", "defesa de animais: 27"];
        LANG[INV.EXPLORER_HAT] = ["\x63\x68\x61\x70\xe9\x75\x20\x64\x65\x20\x65\x78\x70\x6c\x6f\x72\x61\x64\x6f\x72", "\x61\x6e\x69\x6d\x61\x69\x73\x20\x6e\xe3\x6f\x20\x76\xe3\x6f\x20\x74\x65\x20\x61\x74\x61\x63\x61\x72", "\x6d\x61\x73\x20\x6e\xe3\x6f\x20\x66\x61\xe7\x61\x20\x62\x61\x72\x75\x6c\x68\x6f\x21", "\x71\x75\x65\x6e\x74\x65\x20\x66\x6f\x72\x61\x20\x64\x61\x20\xe1\x67\x75\x61"];
        LANG[INV.CHRISTMAS_HAT] = ["gorro de natal", "Oh, oh, oh, feliz natal", "\x71\x75\x65\x6e\x74\x65\x20\x66\x6f\x72\x61\x20\x64\x61\x20\xe1\x67\x75\x61\x20\x65\x20\x6e\x65\x76\x65"];
        LANG[INV.ELF_HAT] = ["\x63\x68\x61\x70\xe9\x75\x20\x64\x65\x20\x65\x6c\x66\x6f", "\x6e\xe3\x6f\x20\x64\x65\x69\x78\x65\x2d\x73\x65\x20\x73\x65\x72\x20\x65\x78\x70\x6c\x6f\x72\x61\x64\x6f\x2c\x20\x73\x65\x75\x20\x70\x65\x71\x75\x65\x6e\x6f\x20\x65\x6c\x66\x6f\x20\x64\x65\x20\x6e\x65\x76\x65\x21", "\x71\x75\x65\x6e\x74\x65\x20\x66\x6f\x72\x61\x20\x64\x61\x20\xe1\x67\x75\x61\x20\x65\x20\x6e\x65\x76\x65"];
        LANG[INV.HOOD] = ["capuz", "\x76\x6f\x63\xea\x20\xe9\x20\x75\x6d\x20\x74\x72\x61\x70\x61\x63\x65\x69\x72\x6f", "\x76\x6f\x63\xea\x20\x70\x6f\x64\x65\x20\x72\x6f\x75\x62\x61\x72\x20\x61\x6c\x67\x75\xe9\x6d\x20\x61\x70\x65\x6e\x61\x73\x20\x73\x65", "\x31\x29\x20\xe9\x20\x64\x65\x20\x6e\x6f\x69\x74\x65", "\x32\x29\x76\x6f\x63\xea\x20\x6e\xe3\x6f\x20\x65\x73\x74\xe1\x20\x73\x65\x67\x75\x72\x61\x6e\x64\x6f\x20\x6e\x61\x64\x61", "\x33\x29\x20\x73\x65\x20\x76\x6f\x63\xea\x20\x6e\x20\x66\x6f\x69\x20\x74\x6f\x63\x61\x64\x6f\x20\x70\x6f\x72\x20\x35\x20\x73\x65\x67\x75\x6e\x64\x6f\x73", "\x34\x29\x20\x76\x6f\x63\xea\x20\x6e\xe3\x6f\x20\x65\x73\x74\xe1\x20\x70\x65\x72\x74\x6f\x20\x64\x65\x20\x75\x6d\x61\x20\x66\x6f\x67\x75\x65\x69\x72\x61", "\x35\x29\x20\x73\x65\x75\x20\x61\x6c\x76\x6f\x20\x6e\xe3\x6f\x20\x65\x73\x74\xe1\x20\x63\x6f\x6d\x20\x65\x71\x75\x69\x70\x61\x6d\x65\x6e\x74\x6f\x20\x63\x61\x6d\x70\x6f\x6e\xea\x73", "\x71\x75\x65\x6e\x74\x65\x20\x66\x6f\x72\x61\x20\x64\x61\x20\xe1\x67\x75\x61\x20\x65\x20\x6e\x61\x20\x6e\x65\x76\x65"];
        LANG[INV.EARMUFFS] = ["protetor de orelhas", "algum tipo de chapka pequena.", "\x71\x75\x65\x6e\x74\x65\x20\x66\x6f\x72\x61\x20\x64\x61\x20\xe1\x67\x75\x61\x20\x65\x20\x6e\x65\x76\x65"];
        LANG[INV.COAT] = ["Chapka", "\x74\x61\x6d\x62\xe9\x6d\x20\x63\x68\x61\x6d\x61\x64\x6f\x20\x64\x65\x20\x63\x61\x73\x61\x63\x6f\x2e", "\x65\x73\x71\x75\x65\x6e\x74\x61\x20\x66\x6f\x72\x61\x20\x64\x61\x20\xe1\x67\x75\x61\x20\x65\x20\x6e\x61\x20\x6e\x65\x76\x65", "muito quente"];
        LANG[INV.CAP_SCARF] = ["\x43\x68\x61\x70\xe9\x75\x20\x64\x65\x20\x69\x6e\x76\x65\x72\x6e\x6f", "\x4d\x75\x69\x74\x6f\x20\x63\x6f\x6e\x66\x6f\x72\x74\xe1\x76\x65\x6c", "Muito quente"];
        LANG[INV.PEASANT] = ["\x74\xfa\x6e\x69\x63\x61", "\x73\x75\x61\x73\x20\x70\x6c\x61\x6e\x74\x61\x73\x20\x63\x72\x65\x73\x63\x65\x6d\x20\x72\xe1\x70\x69\x64\x6f", "\x71\x75\x65\x6e\x74\x65\x20\x66\x6f\x72\x61\x20\x64\x61\x20\xe1\x67\x75\x61\x20\x65\x20\x6e\x61\x20\x6e\x65\x76\x65"];
        LANG[INV.WINTER_HOOD] = ["capuz de inferno", "\x76\x6f\x63\xea\x20\x73\xf3\x20\x70\x6f\x64\x65\x20\x72\x6f\x75\x62\x61\x72\x20\x61\x6c\x67\x75\xe9\x6d\x20\x73\x65", "\xe9\x20\x64\x65\x20\x6e\x6f\x69\x74\x65", "\x2d\x76\x6f\x63\xea\x20\x6e\xe3\x6f\x20\x65\x73\x74\xe1\x20\x73\x65\x67\x75\x72\x61\x6e\x64\x6f\x20\x6e\x61\x64\x61", "\x2d\x20\x73\x65\x20\x76\x6f\x63\xea\x20\x6e\xe3\x6f\x20\x66\x6f\x69\x20\x74\x6f\x63\x61\x64\x6f\x20\x70\x6f\x72\x20\x34\x20\x73\x65\x67\x75\x6e\x64\x6f\x73", "\x2d\x20\x76\x6f\x63\xea\x20\x6e\xe3\x6f\x20\x65\x73\x74\xe1\x20\x70\x65\x72\x74\x6f\x20\x64\x65\x20\x75\x6d\x61\x20\x66\x6f\x67\x75\x65\x69\x72\x61", "\x2d\x73\x65\x75\x20\x61\x6c\x76\x6f\x20\x6e\xe3\x6f\x20\x65\x73\x74\xe1\x20\x63\x6f\x6d\x20\x65\x71\x75\x69\x70\x61\x6d\x65\x6e\x74\x6f\x20\x64\x65\x20\x63\x61\x6d\x70\x6f\x6e\xea\x73\x20\x64\x65\x20\x69\x6e\x76\x65\x72\x6e\x6f", "\x65\x73\x71\x75\x65\x6e\x74\x61\x20\x66\x6f\x72\x61\x20\x64\x61\x20\xe1\x67\x75\x61\x20\x65\x20\x6e\x61\x20\x6e\x65\x76\x65"];
        LANG[INV.WINTER_PEASANT] = ["\x63\x61\x6d\x70\x6f\x6e\xea\x73\x20\x64\x65\x20\x69\x6e\x76\x65\x72\x6e\x6f", "\x73\x75\x61\x73\x20\x70\x6c\x61\x6e\x74\x61\x73\x20\x63\x72\x65\x73\x63\x65\x6d\x20\x72\xe1\x70\x69\x64\x6f", "\x71\x75\x65\x6e\x74\x65\x20\x66\x6f\x72\x61\x20\x64\x61\x20\xe1\x67\x75\x61\x20\x65\x20\x6e\x61\x20\x6e\x65\x76\x65"];
        LANG[INV.DIVING_MASK] = ["\x6d\xe1\x73\x63\x61\x72\x61\x20\x64\x65\x20\x6d\x65\x72\x67\x75\x6c\x68\x6f", "\x76\x6f\x63\xea\x20\xe9\x20\x72\xe1\x70\x69\x64\x6f\x20\x6e\x61\x20\xe1\x67\x75\x61", "\x71\x75\x65\x6e\x74\x65\x20\x6e\x61\x20\xe1\x67\x75\x61", "defesa de jogadores: 2, defesa de animais: 8"];
        LANG[INV.SUPER_DIVING_SUIT] = ["\x73\x75\x70\x65\x72\x20\x6d\xe1\x73\x63\x61\x72\x61\x20\x64\x65\x20\x6d\x65\x72\x67\x75\x6c\x68\x6f", "\x76\x6f\x63\xea\x20\xe9\x20\x6d\x75\x69\x74\x6f\x20\x72\xe1\x70\x69\x64\x6f\x20\x6e\x61\x20\xe1\x67\x75\x61", "\x71\x75\x65\x6e\x74\x65\x20\x6e\x61\x20\xe1\x67\x75\x61", "defesa de jogadores: 4, defesa de animais: 16"];
        LANG[INV.DRAGON_ORB] = ["\x65\x73\x66\x65\x72\x61\x20\x64\x6f\x20\x64\x72\x61\x67\xe3\x6f", "dado na questt"];
        LANG[INV.DRAGON_HEART] = ["\x63\x6f\x72\x61\xe7\xe3\x6f\x20\x64\x65\x20\x64\x72\x61\x67\xe3\x6f", "\x74\x6f\x72\x6e\x61\x20\x76\x6f\x63\xea\x20\x6e\x75\x6d\x20\x66\x61\x6e\x74\x61\x73\x6d\x61\x73\x20\x6e\x61\x20\x6d\x6f\x72\x74\x65\x21", "\x76\x6f\x63\xea\x20\xe9\x20\x75\x6d\x20\x66\x61\x6e\x74\x61\x73\x6d\x61\x20\x70\x6f\x72\x20\x36\x30\x20\x73\x65\x67\x75\x6e\x64\x6f\x73", "\x61\x63\x68\x65\x20\x75\x6d\x61\x20\x70\x65\x64\x72\x61\x20\x64\x61\x20\x72\x65\x73\x73\x75\x72\x72\x65\x69\xe7\xe3\x6f"];
        LANG[INV.GEMME_GREEN] = ["pedra verde", "\x76\x6f\x63\xea\x20\x6e\xe3\x6f\x20\x76\x61\x69\x20\x74\x72\x61\x70\x61\x63\x65\x61\x72\x2c\x20\x70\x72\x6f\x6d\x65\x74\x65\x3f"];
        LANG[INV.GEMME_ORANGE] = ["pedra laranja", "apenas um pirata de verdade pode achar-lo!"];
        LANG[INV.GEMME_BLUE] = ["pedra azul", "para pessoas muito gentis"];
        LANG[INV.CROWN_GREEN] = ["coroa verde", "\x76\x6f\x63\xea\x20\x73\x65\x20\x72\x65\x67\x65\x6e\x65\x72\x61\x20\x6d\x75\x69\x74\x6f\x20\x72\xe1\x70\x69\x64\x6f", "regenera ao longo do tempo: 40", "defesa de jogadores: 4, defesa de animais: 16"];
        LANG[INV.CROWN_ORANGE] = ["coroa laranja", "\x64\x65\x20\x72\x65\x70\x65\x6e\x74\x65\x20\x76\x6f\x63\xea\x20\x73\x65\x20\x73\x65\x6e\x74\x65\x20\x6d\x75\x69\x74\x6f\x20\x73\x6f\x72\x74\x75\x64\x6f", "defesa de jogadores: 4, defesa de animais: 16"];
        LANG[INV.CROWN_BLUE] = ["coroa azul", "\x71\x75\x61\x6e\x64\x6f\x20\x76\x6f\x63\xea\x20\x6d\x6f\x72\x72\x65\x72\x2c\x20\x76\x6f\x63\xea\x20\x76\x69\x72\x61\x20\x75\x6d\x20\x66\x61\x6e\x74\x61\x73\x6d\x61", "\x76\x6f\x63\xea\x20\x70\x65\x72\x64\x65\x72\xe1\x20\x73\x75\x61\x20\x61\x72\x6d\x61", "defesa de jogadores: 4, defesa de animais: 16"];
        LANG[INV.BUCKET_FULL] = ["balde", "\xfa\x74\x69\x6c\x20\x70\x61\x72\x61\x20\x65\x6e\x63\x68\x65\x72\x20\x75\x6d\x20\x70\x6f\xe7\x6f", "um balde equivale a doze garrafas"];
        LANG[INV.BUCKET_EMPTY] = ["balde vazio", "\x76\x6f\x63\xea\x20\x70\x72\x65\x63\x69\x73\x61\x20\x65\x6e\x63\x68\x65\x72\x20\x65\x73\x73\x65\x20\x62\x61\x6c\x64\x65\x20\x70\x65\x72\x74\x6f\x20\x64\x65\x20\x75\x6d\x61\x20\x66\x6f\x6e\x74\x65\x20\x64\x65\x20\xe1\x67\x75\x61"];
        LANG[INV.BOTTLE_FULL] = ["garrafa", "\x70\x65\x72\x6d\x69\x74\x65\x20\x71\x75\x65\x20\x76\x6f\x63\xea\x20\x62\x65\x62\x61\x20\xe1\x67\x75\x61\x20\x65\x6d\x20\x71\x75\x61\x6c\x71\x75\x65\x72\x20\x6c\x75\x67\x61\x72", "\xe1\x67\x75\x61\x3a\x20\x35\x30"];
        LANG[INV.BOTTLE_EMPTY] = ["garrafa vazia", "\x76\x6f\x63\xea\x20\x70\x6f\x64\x65\x20\x65\x6e\x63\x68\x65\x72\x20\x65\x73\x73\x61\x20\x67\x61\x72\x72\x61\x66\x61\x20\x70\x65\x72\x74\x6f\x20\x64\x65\x20\x75\x6d\x61\x20\x66\x6f\x6e\x74\x65\x20\x64\x65\x20\xe1\x67\x75\x61"];
        LANG[INV.WATERING_CAN] = ["regador vazio", "\x76\x6f\x63\xea\x20\x64\x65\x76\x65\x20\x65\x6e\x63\x68\x65\x2d\x6c\x6f\x20\x63\x6f\x6d\x20\x75\x6d\x61\x20\x66\x6f\x6e\x74\x65\x20\x64\x65\x20\xe1\x67\x75\x61\x20\x70\x61\x72\x61\x20\x75\x73\x61\x2d\x6c\x6f"];
        LANG[INV.WATERING_CAN_FULL] = ["regador", "permite regar as plantas", "dano: 1"];
        LANG[INV.BAG] = ["mochila", "\x6d\x61\x69\x73\x20\x65\x73\x70\x61\xe7\x6f\x20\x70\x61\x72\x61\x20\x73\x65\x75\x73\x20\x69\x74\x65\x6e\x73\x21"];
        LANG[INV.PAPER] = ["papel", "usado para fazer o livro"];
        LANG[INV.BOOK] = ["livro", "\x70\x65\x72\x6d\x69\x74\x65\x20\x72\x65\x64\x75\x7a\x69\x72\x20\x63\x6f\x6e\x73\x69\x64\x65\x72\x61\x64\x61\x6d\x65\x6e\x74\x65\x20\x6f\x20\x74\x65\x6d\x70\x6f\x20\x64\x65\x20\x63\x6f\x6e\x73\x74\x72\x75\xe7\xf5\x65\x73", "\x6d\x61\x73\x20\x70\x72\x65\x63\x69\x73\x61\x20\x65\x73\x74\xe1\x20\x65\x71\x75\x69\x70\x61\x64\x6f\x20\x70\x61\x72\x61\x20\x66\x75\x63\x69\x6f\x6e\x61\x72", "dano: 1"];
        LANG[INV.BANDAGE] = ["bandagem", "recupera sua vida mais rapidamente", "Heal over time: 30", "Effect: 5"];
        LANG[INV.LOCK] = ["fechadura", "\x70\x65\x72\x6d\x69\x74\x65\x20\x76\x6f\x63\xea\x20\x74\x72\x61\x6e\x63\x61\x72\x20\x73\x65\x75\x20\x62\x61\xfa"];
        LANG[INV.LOCKPICK] = ["chave", "\x70\x65\x72\x6d\x69\x74\x65\x20\x64\x65\x73\x74\x72\x61\x6e\x63\x61\x72\x20\x75\x6d\x20\x62\x61\xfa"];
        LANG[INV.TOTEM] = ["Totem", "\x70\x65\x72\x6d\x69\x74\x65\x20\x76\x6f\x63\xea\x20\x63\x72\x69\x61\x72\x20\x75\x6d\x20\x74\x69\x6d\x65", "\x63\x6f\x6d\x70\x61\x72\x74\x69\x6c\x68\x61\x20\x70\x6f\x72\x74\x61\x73\x20\x65\x20\x62\x61\xfa\x73", "\x65\x64\x69\x66\xed\x63\x69\x6f\x20\x70\x72\x65\x6a\x75\x64\x69\x63\x69\x61\x6c\x20\x6e\xe3\x6f\x20\x71\x75\x65\x72\x20\x6d\x61\x63\x68\x75\x63\x61\x72\x20\x73\x65\x75\x20\x61\x6d\x69\x67\x6f"];
        LANG[INV.BRIDGE] = ["ponte", "\x6d\x75\x69\x74\x6f\x20\xfa\x74\x69\x6c\x20\x6e\x61\x20\xe1\x67\x75\x61", "\x70\x65\x72\x6d\x69\x74\x65\x20\x76\x6f\x63\xea\x20\x62\x65\x62\x65\x72\x20\x73\x65\x6d\x20\x73\x65\x20\x61\x66\x6f\x67\x61\x72", "\x61\x6e\x64\x61\x20\x72\xe1\x70\x69\x64\x6f\x20\x6e\x61\x20\xe1\x67\x75\x61"];
        LANG[INV.SIGN] = ["placa", "deixe uma mensagem para outros", "durabilidade: 200"];
        LANG[INV.ROOF] = ["telhado", "\x65\x73\x63\x6f\x6e\x64\x65\x20\x76\x6f\x63\xea\x20\x75\x6d\x20\x70\x6f\x75\x63\x6f\x20\x65\x20\x74\x65\x20\x65\x73\x71\x75\x65\x6e\x74\x61\x21"];
        LANG[INV.WELL] = ["\x70\x6f\xe7\x6f", "permite encher garrafas", "durabilidade: 1000"];
        LANG[INV.WALL] = ["muro de madeira", "\x76\x6f\x63\xea\x20\x73\x61\x62\x69\x61\x20\x71\x75\x65\x20\x6f\x20\x6d\x75\x72\x6f\x20\x64\x61\x6e\xe7\x61\x3f", "durabilidade: 1000"];
        LANG[INV.STONE_WALL] = ["muro de pedra", "\xe9\x20\x75\x6d\x20\x70\x6f\x63\x75\x20\x6d\x61\x69\x73\x20\x73\xe9\x72\x69\x6f\x2e", "durabilidade: 1500"];
        LANG[INV.GOLD_WALL] = ["muro de ouro", "\x6f\x75\x72\x6f\x20\x6e\x6f\x73\x20\x73\x65\x75\x73\x20\x6d\x75\x72\x6f\x73\x3f\x20\xe9\x20\x6d\x75\x69\x74\x6f\x20\x63\x68\x61\x6d\x61\x74\x69\x76\x6f\x2e", "durabilidade: 2000"];
        LANG[INV.DIAMOND_WALL] = ["muro de diamante", "\x74\xe3\x6f\x20\x62\x72\x69\x6c\x68\x6f\x73\x6f\x2c\x20\x76\x65\x6a\x61\x20\x73\x65\x75\x73\x20\x6f\x6c\x68\x6f\x73", "durabilidade: 2500"];
        LANG[INV.AMETHYST_WALL] = ["muro de ametista", "\x76\x6f\x63\xea\x20\x65\x73\x74\xe1\x20\x6d\x75\x69\x74\x6f\x20\x61\x73\x73\x75\x73\x74\x61\x64\x6f\x20\x64\x65\x20\x73\x61\x69\x72\x21", "durabilidade: 3000"];
        LANG[INV.SPIKE] = ["espiga de madeira", "pode dar dano nos seus inimigos", "dano: 10, dano no acerto: 2", "durabilidade: 150"];
        LANG[INV.STONE_SPIKE] = ["espiga de pedra", "\x65\x75\x20\x6e\xe3\x6f\x20\x71\x75\x65\x72\x6f\x20\x73\x65\x72\x20\x73\x65\x75\x20\x69\x6e\x69\x6d\x69\x67\x6f\x2e", "dano: 20", "dano no acerto: 3", "durabilidade: 300"];
        LANG[INV.GOLD_SPIKE] = ["espiga de ouro", "\x76\x6f\x63\xea\x20\xe9\x20\x74\xe3\x6f\x20\x63\x72\x75\x65\x6c\x2e", "dano: 30", "dano no acerto: 3", "durabilidade: 600"];
        LANG[INV.DIAMOND_SPIKE] = ["espiga de diamante", "\x76\x6f\x63\xea\x20\x6e\xe3\x6f\x20\x67\x6f\x73\x74\x61\x20\x64\x65\x20\x74\x65\x72\x20\x63\x6f\x6d\x70\x61\x6e\x68\x69\x61\x2e", "dano: 40", "dano no acerto: 4", "durabilidade: 1200"];
        LANG[INV.AMETHYST_SPIKE] = ["espiga de ametista", "\x6f\x20\x71\x75\x65\x20\x64\x69\x61\x62\x6f\x73\x20\x73\x65\x75\x20\x76\x69\x7a\x69\x6e\x68\x6f\x73\x20\x66\x69\x7a\x65\x72\x61\x6d\x20\x70\x61\x72\x61\x20\x76\x6f\x63\xea\x3f", "dano: 50", "dano no acerto: 4", "durabilidade: 2400"];
        LANG[INV.WOOD_DOOR] = ["porta de madeira", "\x70\x6f\x64\x65\x20\x73\x65\x72\x20\x61\x62\x65\x72\x74\x61\x20\x6f\x75\x20\x66\x65\x63\x68\x61\x64\x61\x20\x70\x6f\x72\x20\x76\x6f\x63\xea\x20\x6f\x75\x20\x73\x65\x75\x73\x20\x61\x6d\x69\x67\x6f\x73", "durabilidade: 1000"];
        LANG[INV.STONE_DOOR] = ["porta de pedra", "\x75\x6d\x61\x20\x70\x6f\x72\x74\x61\x20\x6d\x61\x69\x73\x20\x66\x6f\x72\x74\x65\x20\xe9\x20\x6d\x61\x69\x73\x20\x73\xe9\x72\x69\x6f", "durabilidade: 1500"];
        LANG[INV.GOLD_DOOR] = ["porta de ouro", "\x76\x6f\x63\xea\x20\x65\x73\x74\xe1\x20\x72\x65\x2d\x63\x6f\x6e\x73\x74\x72\x75\x69\x6e\x64\x6f\x20\x6f\x20\x65\x6c\x20\x64\x6f\x72\x61\x64\x6f\x3f", "durabilidade: 2000"];
        LANG[INV.DIAMOND_DOOR] = ["porta de diamante", "para uma casa brilhante", "durabilidade: 2500"];
        LANG[INV.AMETHYST_DOOR] = ["porta de ametista", "\xe9\x20\x61\x20\x73\x75\x61\x20\x63\x61\x73\x61\x20\x75\x6d\x20\x6c\x75\x67\x61\x72\x20\x74\x72\x61\x6e\x63\x61\x64\x6f\x20\x73\x65\x67\x75\x72\x6f\x3f", "durabilidade: 3500"];
        LANG[INV.FURNACE] = ["fornalha", "\x65\x73\x71\x75\x65\x6e\x74\x61\x20\x76\x6f\x63\xea", "consumi madeira em todo 5 segundos", "durabilidade: 1000"];
        LANG[INV.WINDMILL] = ["moinho de vento", "pode produzir farinha do trigo", "demora 5 segundos para fazer farinha", "\x64\xe1\x20\x70\x6f\x6e\x74\x6f\x73\x20\x61\x6f\x20\x74\x72\x61\x62\x61\x6c\x68\x61\x72", "durabilidade: 2000"];
        LANG[INV.BREAD_OVEN] = ["\x66\x6f\x72\x6e\x6f\x20\x64\x65\x20\x70\xe3\x6f", "\x70\x65\x72\x6d\x69\x74\x65\x20\x66\x61\x7a\x65\x72\x20\x70\xe3\x6f\x20\x66\x65\x69\x74\x6f\x20\x64\x65\x20\x66\x61\x72\x69\x6e\x68\x61", "\x64\x65\x6d\x6f\x72\x61\x20\x31\x30\x20\x73\x65\x67\x75\x6e\x64\x6f\x73\x20\x70\x61\x72\x61\x20\x66\x61\x7a\x65\x72\x20\x70\xe3\x6f", "\x64\xe1\x20\x70\x6f\x6e\x74\x6f\x73\x20\x61\x6f\x20\x74\x72\x61\x62\x61\x6c\x68\x61\x72", "durabilidade: 2000"];
        LANG[INV.RESURRECTION] = ["\x70\x65\x64\x72\x61\x20\x64\x61\x20\x72\x65\x73\x73\x75\x72\x72\x65\x69\xe7\xe3\x6f", "\xe9\x20\x6d\xe1\x67\x69\x63\x6f", "\x74\x65\x20\x72\x65\x73\x73\x75\x73\x63\x69\x74\x61\x20\x73\x65\x20\x76\x6f\x63\xea\x20\x66\x6f\x72\x20\x75\x6d\x20\x66\x61\x6e\x74\x61\x73\x6d\x61\x73", "\x76\x6f\x63\xea\x20\x76\x61\x69\x20\x70\x65\x72\x64\x65\x72\x20\x73\x75\x61\x20\x61\x72\x6d\x61", "durabilidade 200: 200"];
        LANG[TEXT.YOU_CANNOT_JOIN] = "\x76\x6f\x63\xea\x20\x6e\xe3\x6f\x20\x70\x6f\x64\x65\x20\x65\x6e\x74\x72\x61\x72\x20\x6e\x6f\x20\x73\x65\x72\x76\x69\x64\x6f\x72";
        LANG[TEXT.KICKED] = "kickado: ";
        LANG[TEXT.KEY_ALREADY] = "\x73\x75\x61\x20\x63\x68\x61\x76\x65\x20\x65\x73\x74\xe1\x20\x65\x6d\x20\x75\x73\x6f\x20\x70\x6f\x72\x20\x6f\x75\x74\x72\x61\x20\x70\x65\x73\x73\x6f\x61";
        LANG[TEXT.KEY_WRONG] = "\x73\x75\x61\x20\x63\x68\x61\x76\x65\x20\x65\x73\x74\xe1\x20\x65\x72\x72\x61\x64\x61";
        LANG[TEXT.OLD_VERSION] = "\x76\x6f\x63\xea\x20\x74\x65\x6d\x20\x75\x6d\x61\x20\x76\x65\x72\x73\xe3\x6f\x20\x76\x65\x6c\x68\x61\x2c\x20\x6c\x69\x6d\x70\x65\x20\x73\x65\x75\x20\x63\x61\x63\x68\x65";
        LANG[TEXT.NO_MORE_RESOURCES] = "\x6e\xe3\x6f\x20\x74\x65\x6d\x20\x6d\x61\x69\x73\x20\x72\x65\x63\x75\x72\x73\x6f\x73";
        LANG[TEXT.SURVIVED_1DAY] = "\x76\x6f\x63\xea\x20\x73\x6f\x62\x72\x65\x76\x69\x76\x65\x75\x20\x31\x20\x64\x69\x61";
        LANG[TEXT.SURVIVED] = "\x76\x6f\x63\xea\x20\x73\x6f\x62\x72\x65\x76\x69\x76\x65\x75\x20";
        LANG[TEXT.DAYS] = " dias";
        LANG[TEXT.DEAD_SAD] = "\x76\x6f\x63\xea\x20\x65\x73\x74\xe1\x20\x6d\x6f\x72\x74\x6f\x20\x3b\x2d\x3b";
        LANG[TEXT.SPAM_ME] = "\x73\x65\x72\x76\x69\x64\x6f\x72\x20\x6e\xe3\x6f\x20\x70\xf4\x64\x65\x20\x61\x63\x68\x61\x72\x20\x75\x6d\x20\x6c\x6f\x63\x61\x6c\x20\x64\x65\x20\x73\x70\x61\x77\x6e\x21\x20\x73\x70\x61\x6d\x20\x6f\x20\x62\x6f\x74\xe3\x6f\x20\x64\x65\x20\x70\x6c\x61\x79\x21";
        LANG[TEXT.SPAM_ME2] = "\x73\x65\x72\x76\x69\x64\x6f\x72\x20\x65\x73\x74\xe1\x20\x63\x68\x65\x69\x6f\x21\x20\x73\x70\x61\x6d\x20\x6f\x20\x62\x6f\x74\xe3\x6f\x20\x64\x65\x20\x70\x6c\x61\x79\x21";
        LANG[TEXT.EMPTY] = "\x6e\xe3\x6f\x20\x74\x65\x6d\x20\x72\x65\x63\x75\x72\x73\x6f\x73";
        LANG[TEXT.INV_FULL] = "\x69\x6e\x76\x65\x6e\x74\xe1\x72\x69\x6f\x20\x65\x73\x74\xe1\x20\x63\x68\x65\x69\x6f\x20\x28\x62\x6f\x74\xe3\x6f\x20\x64\x69\x72\x65\x69\x74\x6f\x20\x70\x61\x72\x61\x20\x64\x65\x6c\x65\x74\x61\x72\x20\x69\x74\x65\x6e\x73\x29";
        LANG[TEXT.DEAD] = "\x20\x65\x73\x74\xe1\x20\x6d\x6f\x72\x74\x6f";
        LANG[TEXT.WRONG_TOOL] = "\x65\x73\x73\x61\x20\x6e\xe3\x6f\x20\xe9\x20\x61\x20\x66\x65\x72\x72\x61\x6d\x65\x6e\x74\x61\x20\x63\x65\x72\x74\x61";
        LANG[TEXT.JOIN_TEAM] = "\x76\x6f\x63\xea\x20\x65\x6e\x74\x72\x6f\x75\x20\x6e\x6f\x20\x74\x69\x6d\x65";
        LANG[TEXT.YOU_DEAD] = "\x76\x6f\x63\xea\x20\x65\x73\x74\xe1\x20\x6d\x6f\x72\x74\x6f";
        LANG[TEXT.JOINED_TEAM] = "entrou no time";
        LANG[TEXT.TEAM_DESTROYED] = "seu time foi destruido";
        LANG[TEXT.LEFT_TEAM] = "\x76\x6f\x63\xea\x20\x73\x61\x69\x75\x20\x64\x6f\x20\x74\x69\x6d\x65";
        LANG[TEXT.LEFT_TEAM2] = " saiu do time";
        LANG[TEXT.TOKEN] = "\x61\x6c\x67\x75\xe9\x6d\x20\x72\x6f\x75\x62\x6f\x75\x20\x73\x75\x61\x20\x66\x69\x63\x68\x61\x20\x3a\x3e";
        LANG[TEXT.CHOOSE] = "escolha um servidor";
        LANG[TEXT.PLAYERS] = "jogadores";
        LANG[TEXT.TOTAL_PLAYERS] = "jogadores totais";
        LANG[TEXT.TOTAL_MODE] = "jogadores nesse modo";
        LANG[TEXT.COMMING_SOON] = "Coming soon...";
        document.getElementById("nickname_input").placeholder = "Apelido";
        DIE[0] = ["\x76\x6f\x63\xea\x20\x6d\x6f\x72\x72\x65\x75\x20\x73\x65\x6d\x20\x6d\x6f\x74\x69\x76\x6f"];
        DIE[1] = ["\x76\x6f\x63\xea\x20\x6d\x6f\x72\x72\x65\x75\x20\x64\x65\x20\x66\x6f\x6d\x65\x2c\x20\x63\x6f\x6d\x6f\x20\x6f\x20\x6a\x6f\x67\x6f\x20\x64\x69\x7a"];
        DIE[2] = ["\x76\x6f\x63\xea\x20\x6d\x6f\x72\x72\x65\x75\x20\x64\x65\x20\x66\x72\x69\x6f\x2e\x20\x74\xe3\x6f\x20\x74\x72\x69\x73\x74\x65", "\x76\x6f\x63\xea\x20\x70\x65\x67\x6f\x75\x20\x68\x69\x70\x6f\x74\x65\x72\x6d\x69\x61\x20\x6e\x61\x20\x70\x72\xf3\x78\x69\x6d\x61\x20\x76\x65\x7a\x2c\x20\x74\x65\x6e\x74\x65\x20\x73\x65\x6e\x74\x61\x72\x20\x6e\x75\x6d\x61\x20\x66\x6f\x67\x75\x65\x69\x72\x61\x20\x65\x6d\x20\x76\x65\x7a\x20\x64\x69\x73\x73\x6f\x2e"];
        DIE[3] = ["\x75\x6d\x20\x6a\x6f\x67\x61\x64\x6f\x72\x20\x74\x65\x20\x6d\x61\x74\x6f\x75\x20\x64\x69\x7a\x65\x6e\x64\x6f\x20\x61\x20\x76\x6f\x63\xea\x20\x70\x61\x72\x61\x20\x6d\x61\x74\x61\x72\x2e\x2e\x27", "\x76\x6f\x63\xea\x20\x66\x6f\x69\x20\x6d\x6f\x72\x74\x6f\x20\x70\x6f\x72\x20\x75\x6d\x20\x6a\x6f\x67\x61\x64\x6f\x72\x2e\x20\x6e\xe3\x6f\x20\x73\x65\x20\x70\x72\x65\x6f\x63\x75\x70\x65\x2c\x20\x61\x71\x75\x65\x6c\x65\x20\x6a\x6f\x67\x61\x64\x6f\x72\x20\x6d\x6f\x72\x72\x65\x72\xe1\x20\x74\x61\x6d\x62\xe9\x6d\x2c\x20\x65\x76\x65\x6e\x74\x75\x61\x6c\x6d\x65\x6e\x74\x65\x2e"];
        DIE[4] = ["\x76\x6f\x63\xea\x20\x66\x69\x63\x6f\x75\x20\x6d\x75\x69\x74\x6f\x20\x70\x65\x72\x74\x6f\x20\x64\x65\x20\x75\x6d\x61\x20\x66\x6f\x67\x75\x65\x69\x72\x61\x20\x65\x20\x71\x75\x65\x69\x6d\x6f\x75\x20\x61\x74\xe9\x20\x61\x20\x6d\x6f\x72\x74\x65\x2e\x20\x6d\xe1\x20\x69\x64\x65\x69\x61\x2e", "\x76\x6f\x63\xea\x20\x6d\x6f\x72\x72\x65\x75\x20\x70\x6f\x72\x20\x75\x6d\x20\x69\x6e\x63\xea\x6e\x64\x69\x6f\x2e\x20\x66\x6f\x67\x75\x65\x69\x72\x61\x20\x74\x65\x20\x6d\x61\x63\x68\x75\x63\x61\x2e\x20\x76\xe1\x20\x65\x73\x63\x72\x65\x76\x65\x72\x20\x75\x6d\x61\x20\x68\x69\x73\x74\xf3\x72\x69\x61\x20\x73\x6f\x62\x72\x65\x20\x69\x73\x73\x6f\x2e"];
        DIE[5] = ["seu corpo vai virar um ninho para ovos de aranhas", "\x75\x6d\x61\x20\x61\x72\x61\x6e\x68\x61\x20\x74\x65\x20\x6d\x61\x74\x6f\x75\x2e\x20\x70\x65\x6c\x6f\x20\x6d\x65\x6e\x6f\x73\x20\x6e\xe3\x6f\x20\x65\x72\x61\x20\x75\x6d\x20\x63\x6f\x65\x6c\x68\x6f\x2e"];
        DIE[6] = ["\x6f\x20\x6c\x6f\x62\x6f\x20\x6e\xe3\x6f\x20\x76\xe3\x6f\x20\x6d\x6f\x72\x72\x65\x72\x20\x64\x65\x20\x66\x6f\x6d\x65\x20\x64\x65\x70\x6f\x69\x73\x20\x74\x65\x20\x74\x65\x20\x63\x6f\x6d\x65\x72", "\x65\x6c\x65\x73\x20\x6e\xe3\x6f\x20\x73\xe3\x6f\x20\x63\x61\x63\x68\x6f\x72\x72\x6f\x73\x2e\x20\x6c\x6f\x62\x6f\x73\x20\x6e\xe3\x6f\x20\x67\x6f\x73\x74\x61\x6d\x20\x64\x65\x20\x73\x65\x72\x20\x71\x75\x65\x20\x6e\x65\x6d\x20\x61\x6e\x69\x6d\x61\x69\x73\x20\x64\x65\x20\x65\x73\x74\x69\x6d\x61\xe7\xe3\x6f\x2e"];
        DIE[7] = ["\x61\x20\x72\x61\x70\x6f\x73\x61\x20\x65\x72\x61\x20\x6d\x75\x69\x74\x6f\x20\x72\xe1\x70\x69\x64\x61\x20\x70\x61\x72\x61\x20\x76\x6f\x63\xea", "\x61\x20\x72\x61\x70\x6f\x73\x61\x20\x74\x65\x20\x74\x6f\x72\x6e\x6f\x75\x20\x75\x6d\x61\x20\x63\x61\x69\x78\x61\x2e\x20\x64\x65\x73\x64\x65\x20\x71\x75\x61\x6e\x64\x6f\x20\x6f\x73\x20\x61\x6e\x69\x6d\x61\x69\x73\x20\x74\x65\x6d\x20\x70\x6f\x64\x65\x72\x65\x73\x20\x6d\xe1\x67\x69\x63\x6f\x73\x3f"];
        DIE[8] = ["\x6f\x20\x75\x72\x73\x6f\x20\x73\xf3\x20\x71\x75\x65\x72\x69\x61\x20\x75\x6d\x20\x61\x62\x72\x61\xe7\x6f\x2e", "\x20\x6f\x20\x75\x72\x73\x6f\x20\x65\x72\x61\x20\x6d\x75\x69\x74\x6f\x20\x6e\x75\x2e\x20\x65\x75\x20\x6e\xe3\x6f\x20\x73\x69\x6e\x74\x6f\x20\x6d\x75\x69\x74\x6f\x2e"];
        DIE[9] = ["\x76\x6f\x63\xea\x20\x66\x6f\x69\x20\x71\x75\x65\x69\x6d\x61\x64\x6f\x20\x70\x6f\x72\x20\x75\x6d\x20\x64\x72\x61\x67\xe3\x6f\x2e\x20\x74\xe3\x6f\x20\x74\x72\x69\x73\x74\x65\x2e\x2e", "\x76\x6f\x63\xea\x20\x66\x6f\x69\x20\x65\x73\x6d\x61\x67\x61\x64\x6f\x20\x70\x6f\x72\x20\x75\x6d\x20\x64\x72\x61\x67\xe3\x6f\x2e\x2e\x20\x73\x65\x72\x20\x65\x73\x6d\x61\x67\x61\x64\x6f\x20\xe9\x20\x75\x6d\x61\x20\x6d\x61\x6e\x65\x69\x72\x61\x20\x68\x6f\x72\x72\xed\x76\x65\x6c\x20\x64\x65\x20\x6d\x6f\x72\x72\x65\x72\x2e"];
        DIE[10] = ["\x76\x6f\x63\xea\x20\x70\x75\x6c\x6f\x75\x20\x65\x6d\x20\x75\x6d\x20\x6d\x75\x72\x6f\x20\x63\x6f\x6d\x20\x65\x73\x70\x69\x6e\x68\x6f\x73\x2e\x20\x6e\xe3\x6f\x20\xe9\x20\x75\x6d\x61\x20\x62\x6f\x61\x20\x69\x64\x65\x69\x61\x2e\x2e\x2e", "\x76\x6f\x63\xea\x20\x66\x6f\x69\x20\x6d\x6f\x72\x74\x6f\x20\x70\x6f\x72\x20\x75\x6d\x20\x6d\x75\x72\x6f\x20\x63\x6f\x6d\x20\x65\x73\x70\x69\x6e\x68\x6f\x73\x2e\x20\x6d\x75\x69\x74\x61\x73\x20\x70\x65\x73\x73\x6f\x61\x73\x20\x73\xe3\x6f\x20\x73\x65\x6e\x73\xed\x76\x65\x69\x73\x20\x6f\x20\x62\x61\x73\x74\x61\x6e\x74\x65\x20\x70\x61\x72\x61\x20\x6e\xe3\x6f\x20\x74\x6f\x63\x61\x72\x20\x65\x6d\x20\x63\x6f\x69\x73\x61\x73\x20\x70\x6f\x6e\x74\x75\x64\x61\x73\x2e"];
        DIE[11] = ["\x61\x74\xe9\x20\x66\x61\x6e\x74\x61\x73\x6d\x61\x73\x20\x70\x6f\x64\x65\x6d\x20\x6d\x6f\x72\x72\x65\x72\x2e", "\x76\x6f\x63\xea\x20\x66\x61\x6c\x68\x6f\x75\x20\x70\x61\x72\x61\x20\x73\x65\x72\x20\x72\x65\x73\x73\x75\x73\x63\x69\x74\x61\x64\x6f\x2e\x20\x54\x68\x69\x73\x20\x69\x73\x20\x61\x20\x67\x61\x6d\x65\x2c\x20\x73\x6f\x20\x79\x6f\x75\x20\x67\x6f\x20\x74\x6f\x20\x6c\x69\x66\x65\x20\x61\x66\x74\x65\x72\x20\x79\x6f\x75\x20\x64\x69\x65\x2c\x20\x73\x6f\x2e\x2e\x2e"];
        DIE[12] = ["\x75\x6d\x61\x20\x62\x61\x63\x74\xe9\x72\x69\x61\x20\x64\x61\x20\x73\x75\x61\x20\x63\x6f\x6d\x69\x64\x61\x20\x63\x72\x75\x61\x20\x74\x65\x20\x6d\x61\x74\x6f\x75\x20\x65\x73\x73\x65\x20\x6a\x6f\x67\x6f\x20\xe9\x20\x64\x65\x66\x69\x6e\x69\x74\x69\x76\x61\x6d\x65\x6e\x74\x65\x20\x6d\x75\x69\x74\x6f\x20\x64\xed\x66\x69\x63\x69\x6c\x2e", "\x76\x6f\x63\xea\x20\x6d\x61\x74\x6f\x75\x20\x61\x20\x63\x61\x72\x6e\x65\x20\x63\x72\x75\x61\x2e\x20\x61\x20\x63\x61\x72\x6e\x65\x20\x63\x72\x75\x61\x20\x74\x65\x20\x6d\x61\x74\x6f\x75\x20\x74\x61\x6d\x62\xe9\x6d\x2e"];
        DIE[13] = ["\x76\x6f\x63\xea\x20\x6d\x6f\x72\x72\x65\x75\x20\x64\x65\x20\x73\x65\x64\x65\x2e\x20\x6d\x65\x6c\x68\x6f\x72\x20\x62\x65\x62\x65\x72\x20\x73\x75\x61\x20\x70\x72\xf3\x70\x72\x69\x61\x20\x75\x72\x69\x6e\x61\x2e"];
        DIE[14] = ["\x76\x6f\x63\xea\x20\x73\x61\x62\x69\x61\x20\x71\x75\x65\x20\x76\x6f\x63\xea\x20\x6d\x6f\x72\x72\x65\x20\x61\x66\x6f\x67\x61\x64\x6f\x3f\x20\x61\x67\x6f\x72\x61\x20\x76\x6f\x63\xea\x20\x73\x61\x62\x65\x2e"];
        DIE[15] = ["\x6e\xe3\x6f\x20\x73\x65\x20\x70\x72\x65\x6f\x63\x75\x70\x65\x2c\x20\x61\x73\x20\x70\x69\x72\x61\x6e\x68\x61\x73\x20\x61\x63\x68\x61\x6d\x20\x76\x6f\x63\xea\x20\x73\x61\x62\x6f\x72\x6f\x73\x6f\x2e", "\x66\x61\x74\x6f\x20\x65\x6e\x67\x72\x61\xe7\x61\x64\x6f\x3a\x20\x50\x69\x72\x61\x6e\x68\x61\x73\x20\x63\x6f\x6d\x65\x6d\x20\x70\x65\x73\x73\x6f\x61\x73\x2e\x20\x69\x6e\x63\x6c\x75\x69\x6e\x64\x6f\x20\x76\x6f\x63\xea\x2e"];
        DIE[16] = ["\x4c\x61\x70\x61\x4d\x61\x75\x76\x65\x20\x6e\xe3\x6f\x20\x70\x6c\x61\x6e\x65\x6a\x61\x20\x76\x6f\x63\xea\x20\x6d\x61\x74\x61\x72\x20\x6f\x20\x6b\x72\x61\x6b\x65\x6e", "um kraken comeu seu esqueleto."];
        DIE[17] = ["\x73\x75\x61\x20\x70\x65\x6c\x65\x20\x63\x61\x69\x6e\x64\x6f\x20\x61\x6f\x73\x20\x70\x65\x64\x61\xe7\x6f\x73\x2c\x20\x6f\x20\x73\x6f\x6c\x20\x74\x65\x20\x6d\x61\x74\x6f\x75\x2e"];
        DIE[18] = ["\x6f\x20\x61\x6c\x68\x6f\x20\x61\x6d\x61\x72\x7a\x65\x6e\x61\x64\x6f\x20\x65\x6d\x20\x73\x65\x75\x73\x20\x62\x6f\x6c\x73\x6f\x73\x20\x66\x65\x72\x76\x65\x75\x20\x73\x65\x75\x20\x63\xe9\x72\x65\x62\x72\x6f\x2e"];
        DIE[19] = ["\x63\x6f\x6d\x6f\x20\x76\x61\x6d\x70\x69\x72\x6f\x2c\x20\x6e\xe3\x6f\x20\x63\x68\x65\x67\x75\x65\x20\x70\x65\x72\x74\x6f\x20\x64\x6f\x20\x61\x6c\x68\x6f\x2e"];
        DIE[20] = ["\x76\x6f\x63\xea\x20\x63\x6f\x6d\x65\x75\x20\x61\x6c\x68\x6f\x20\x63\x6f\x6d\x6f\x20\x76\x61\x6d\x70\x69\x72\x6f\x2c\x20\x6f\x20\x71\x75\x65\x20\x76\x6f\x63\xea\x20\x65\x73\x70\x65\x72\x61\x76\x61\x3f"];
        DIE[21] = ["\x73\x65\x75\x20\x63\x6f\x72\x70\x6f\x20\x73\x65\x20\x65\x6e\x72\x6f\x73\x63\x6f\x75\x20\x6e\x6f\x73\x20\x65\x73\x70\x69\x6e\x68\x6f\x73\x2e\x20\x71\x75\x61\x6e\x64\x6f\x20\x76\x6f\x63\xea\x20\x74\x65\x6e\x74\x61\x20\x65\x73\x63\x61\x70\x61\x72\x2c\x20\x73\x75\x61\x20\x70\x65\x6c\x65\x20\x73\x61\x69\x20\x65\x20\x73\x65\x75\x20\x63\x6f\x72\x61\xe7\xe3\x6f\x20\x70\x61\x72\x61\x20\x64\x65\x20\x62\x61\x74\x65\x72\x2e"];
        ZOMBIE_GRUMBLE = "Uuunnnggg";
        ZOMBIE_GRUMBLES = ["Uuunnnggg... estou morrendo de fome", "\x70\x72\x65\x63\x69\x73\x6f\x20\x64\x6f\x20\x73\x65\x75\x20\x63\x65\x72\xe9\x62\x72\x6f\x20\x55\x75\x75\x6e\x6e\x6e\x67\x67\x67\x2e\x2e\x2e", "carne fresca aqui... Uuunnnggg", "\x55\x75\x75\x6e\x6e\x6e\x67\x67\x67\x2e\x2e\x2e\x20\x76\x6f\x63\xea\x20\x70\x61\x72\x65\x63\x65\x20\x73\x61\x62\x6f\x72\x6f\x73\x6f", "Uuunnnggg...", "Eat... uuunnnggg...", "consigo sentir o cheiro de sangue... Uuunnnggg"];
    };
    var set_german = function () {
        LANG[INV.DRAGON_CUBE] = ["You feel a great power emanating from this orb"];
        DIE[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        LANG[INV.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        LANG[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME";
        LANG[TEXT.TWITTER] = " Share on Twitter";
        LANG[TEXT.FACEBOOK] = " Share on Facebook";
        LANG[TEXT.KIT_NEXT] = "You can buy items on the shop in the next game with your points";
        LANG[TEXT.POINTS] = "points";
        LANG[TEXT.SCORE] = "Score";
        LANG[TEXT.KILL] = "Kill";
        LANG[TEXT.DAYS_SURVIVED] = "Days survived";
        LANG[TEXT.MODE_FREE] = "Building method: Free. Press G to change";
        LANG[TEXT.MODE_GRID] = "Building method: Grid. Press G to change";
        LANG[INV.CRAB_LOOT] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        LANG[INV.CRAB_SPEAR] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
        LANG[INV.CROWN_CRAB] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can\'t hit you and you can\'t hit them", "Players Defense: 4", "Animals Defense: 13"];
        LANG[INV.BED] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var i = 0; i < 7; i++)
            document.getElementById("claim_reward_" + i).innerHTML = "CLAIM REWARD!";
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        LANG[INV.HAND] = ["Hand"];
        LANG[INV.GROUND] = ["Boden", "Dreckig!"];
        LANG[INV.SAND] = ["Sand", "Ich habe es in meine Augen bekommen!"];
        LANG[INV.WOOD] = ["Holz", "Du kannst niemals zu viel haben!"];
        LANG[INV.STONE] = ["Stein", "Auch Fels gennant"];
        LANG[INV.GOLD] = ["Gold", "\x53\x65\x69\x20\x67\x72\x6f\xdf\x7a\xfc\x67\x69\x67\x2c\x20\x67\x69\x62\x20\x61\x6e\x64\x65\x72\x65\x6e\x20\x65\x74\x77\x61\x73\x20\x61\x62\x20"];
        LANG[INV.DIAMOND] = ["Diamant", "Was wirst du daraus machen?"];
        LANG[INV.AMETHYST] = ["Amethyst", "Es ist Mauve farbend, genauso wie Lapa"];
        LANG[INV.FLOUR] = ["Mehl", "\x77\x69\x72\x64\x20\x66\xfc\x72\x73\x20\x42\x61\x63\x6b\x65\x6e\x20\x67\x65\x62\x72\x61\x75\x63\x68\x74"];
        LANG[INV.COOKIE] = ["Keks", "\x45\x69\x6e\x20\x70\x72\xe4\x63\x68\x74\x69\x67\x65\x72\x20\x4b\x65\x6b\x73\x20\x76\x6f\x6e\x20\x47\x72\x6f\xdf\x6d\x75\x74\x74\x65\x72", "Essen: 50"];
        LANG[INV.CAKE] = ["Ein Kuchen", "\x50\x65\x72\x66\x65\x6b\x74\x65\x72\x20\x4b\x75\x63\x68\x65\x6e\x20\x66\xfc\x72\x20\x47\x6f\x75\x72\x6d\x65\x74\x73", "Essen: 100"];
        LANG[INV.MEAT] = ["rohes Fleisch", "Du kannst es mit einem Feuer braten", "verursacht Lebensmittelvergiftung: 10", "Essen: 15"];
        LANG[INV.COOKED_MEAT] = ["gebratenes Fleisch", "Einmal blutiges Steak, bitte", "Essen: 35"];
        LANG[INV.FOODFISH] = ["roher Fisch", "Ich glaube es lebt noch", "verursacht Lebensmittelvergiftung: 10", "Essen: 18"];
        LANG[INV.FOODFISH_COOKED] = ["gebratener Fisch", "Mit einer Zitrone ist es perfekt", "Essen: 35"];
        LANG[INV.BREAD] = ["Brot", "\x45\x69\x6e\x20\x76\x6f\x72\x7a\xfc\x67\x6c\x69\x63\x68\x65\x73\x20\x66\x72\x61\x6e\x7a\xf6\x73\x69\x63\x68\x65\x73\x20\x42\x72\x6f\x74", "\x45\x73\x20\x77\x69\x72\x64\x20\x61\x6c\x73\x20\x57\xe4\x68\x72\x75\x6e\x67\x20\x69\x6d\x20\x4d\x61\x72\x6b\x74\x20\x62\x65\x6e\x75\x74\x7a\x74", "Essen: 15"];
        LANG[INV.SANDWICH] = ["Sandwich", "Schmeckt wie Krabbenburger", "Essen: 100"];
        LANG[INV.CANDY] = ["\x53\xfc\xdf\x69\x67\x6b\x65\x69\x74\x65\x6e", "\x4e\x75\x72\x20\x66\xfc\x72\x20\x4b\x69\x6e\x64\x65\x72\x21", "Essen: 100"];
        LANG[INV.SUGAR_CAN] = ["Zuckerstange", "Probier mal, es schmeckt hervorragend", "Essen: 100"];
        LANG[INV.GARLAND] = ["Girlande", "\x70\x65\x72\x66\x65\x6b\x74\x65\x72\x20\x53\x63\x68\x6d\x75\x63\x6b\x20\x66\xfc\x72\x20\x44\xe4\x63\x68\x65\x72"];
        LANG[INV.SEED] = ["Beeren Saatgut", "Wird eine Beere", "Entstehung: 2min", "Wachstum: 55s", "Wasserbedarf: 3min 20s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
        LANG[INV.PLANT] = ["Beere", "Beeren lecker!", "Essen: 10"];
        LANG[INV.WHEAT_SEED] = ["Weizen Saatgut", "Wird zu Weizen", "Entstehung: 2min", "Wachstum: 16s", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
        LANG[INV.WILD_WHEAT] = ["Wildes Weizen", "\x57\x65\x6e\x6e\x20\x65\x73\x20\x69\x6e\x20\x65\x69\x6e\x65\x20\x57\x69\x6e\x64\x6d\xfc\x68\x6c\x65\x20\x70\x6c\x61\x74\x7a\x69\x65\x72\x74\x20\x77\x69\x72\x64\x2c\x20\x77\x69\x72\x64\x20\x65\x73\x20\x7a\x75\x20\x4d\x65\x68\x6c"];
        LANG[INV.PUMPKIN_SEED] = ["\x4b\xfc\x72\x62\x69\x73\x20\x53\x61\x61\x74\x67\x75\x74", "\x57\x69\x72\x64\x20\x7a\x75\x20\x4b\xfc\x72\x62\x69\x73", "Entstehung: 2min 40s", "Wachstum: 2min", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
        LANG[INV.PUMPKIN] = ["\x4b\xfc\x72\x62\x69\x73", "Es erinnert mich an Halloween", "Essen: 30"];
        LANG[INV.GARLIC_SEED] = ["Knoblauch Saatgut", "\x53\x65\x68\x72\x20\x67\x65\x66\xe4\x68\x72\x6c\x69\x63\x68\x20\x66\xfc\x72\x20\x56\x61\x6d\x70\x69\x72\x65", "Schaden: 20", "Entstehung: 4min", "Wachstum: 1min 10s", "Wasserbedarf: 1min 40s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
        LANG[INV.GARLIC] = ["Knoblauch", "\x48\x65\x69\x6c\x74\x20\x64\x69\x63\x68\x20\x75\x6e\x64\x20\x68\xe4\x6c\x74\x20\x64\x69\x65\x20\x4b\xe4\x6c\x74\x65\x20\x66\x65\x72\x6e", "Essen: 14", "\x48\x65\x69\x6c\x75\x6e\x67\x20\xfc\x62\x65\x72\x20\x5a\x65\x69\x74\x3a\x20\x33\x30", "Effekt: 1"];
        LANG[INV.THORNBUSH_SEED] = ["Dornenbusch Saatgut", "\x4b\x61\x6e\x6e\x20\x64\x65\x69\x6e\x65\x6e\x20\x47\x65\x67\x6e\x65\x72\x6e\x20\x53\x63\x68\x61\x64\x65\x6e\x20\x7a\x75\x66\xfc\x67\x65\x6e", "Schaden: 20", "Entstehung: 4min", "Wachstum: 15s", "Wasserbedarf: 3min", "Haltbarkeit: 1000", "Lebenszeit: 8 Tage"];
        LANG[INV.THORNBUSH] = ["Dornenbusch", "Es sticht!"];
        LANG[INV.PLOT] = ["Topf", "Ernsthaft, benutz es", "\x4d\x69\x74\x20\x64\x69\x65\x73\x65\x6d\x20\x47\x4d\x4f\x20\x64\xfc\x6e\x67\x65\x72\x20\x64\x65\x69\x6e\x65\x20\x50\x66\x6c\x61\x6e\x7a\x65\x6e", "\x6c\xe4\x73\x73\x74\x20\x73\x69\x65\x20\x73\x63\x68\x6e\x65\x6c\x6c\x65\x72\x20\x77\x61\x63\x68\x73\x65\x6e\x20\x75\x6e\x64\x20\x72\x65\x64\x75\x7a\x69\x65\x72\x74\x20\x64\x65\x6e\x20\x57\x61\x73\x73\x65\x72\x76\x65\x72\x62\x72\x61\x75\x63\x68", "Haltbarkeit: 2000"];
        LANG[INV.ICE] = ["Eis", "\x4e\xfc\x74\x7a\x6c\x69\x63\x68\x20\x75\x6d\x20\x4b\x75\x63\x68\x65\x6e\x20\x75\x6e\x64\x20\x57\x61\x73\x73\x65\x72\x20\x68\x65\x72\x7a\x75\x73\x74\x65\x6c\x6c\x65\x6e"];
        LANG[INV.SPANNER] = ["\x53\x63\x68\x72\x61\x75\x62\x65\x6e\x73\x63\x68\x6c\xfc\x73\x73\x65\x6c", "\x45\x73\x20\x6b\x61\x6e\x6e\x20\x57\xe4\x6e\x64\x65\x2c\x20\x54\xfc\x72\x65\x6e\x20\x75\x6e\x64\x20\x53\x74\x61\x63\x68\x65\x6c\x6e\x20\x72\x65\x70\x61\x72\x69\x65\x72\x65\x6e", "Schaden: 2"];
        LANG[INV.FUR_WOLF] = ["Wolfsfell", "Welpe? Aber wo ist der Welpe?!"];
        LANG[INV.FUR] = ["Hasenfell", "\x44\x65\x72\x20\x48\x61\x73\x65\x20\x77\x61\x72\x20\x73\x6f\x20\x73\xfc\xdf\x2e\x2e\x2e"];
        LANG[INV.SPECIAL_FUR] = ["Klares Fell", "Du bist eine Brotfabrik"];
        LANG[INV.SPECIAL_FUR_2] = ["Dunkles Fell", "\x44\x75\x20\x6d\x61\x63\x68\x73\x74\x20\x64\x69\x63\x68\x20\x62\x65\x72\x65\x69\x74\x20\x65\x74\x77\x61\x73\x20\x66\x61\x6c\x73\x63\x68\x65\x73\x20\x7a\x75\x20\x76\x6f\x6c\x6c\x66\xfc\x68\x72\x65\x6e"];
        LANG[INV.FUR_WINTER] = ["Winter Fell", "Diese Tiere wollten nur eine Umarmung..."];
        LANG[INV.SCALES] = ["Schuppen", "Es riecht wie Fisch!"];
        LANG[INV.KRAKEN_SKIN] = ["Kraken Haut", "\x57\x61\x72\x73\x74\x20\x64\x75\x20\x6e\x69\x63\x68\x74\x20\x7a\x75\x20\xe4\x6e\x67\x73\x74\x6c\x69\x63\x68\x3f"];
        LANG[INV.FIRE] = ["Lagerfeuer", "\x57\xe4\x72\x6d\x74\x20\x64\x69\x63\x68\x21", "Haltbarkeit: 150", "Lebensdauer: 2min"];
        LANG[INV.BIG_FIRE] = ["\x47\x72\x6f\xdf\x65\x73\x20\x4c\x61\x67\x65\x72\x66\x65\x75\x65\x72", "\x57\xe4\x72\x6d\x74\x20\x64\x69\x63\x68\x20\x6c\xe4\x6e\x67\x65\x72\x21", "Haltbarkeit: 400", "Lebensdauer: 6min"];
        LANG[INV.WORKBENCH] = ["Werkbank", "\x53\x65\x68\x72\x20\x6e\xfc\x74\x7a\x6c\x69\x63\x68\x20\x75\x6d\x20\x61\x6c\x6c\x65\x72\x6c\x65\x69\x20\x53\x61\x63\x68\x65\x6e\x20\x68\x65\x72\x7a\x75\x73\x74\x65\x6c\x6c\x65\x6e"];
        LANG[INV.CORD] = ["Faden", "\x57\x69\x72\x64\x20\x62\x65\x6e\xf6\x74\x69\x67\x74\x20\x75\x6d\x20\x4d\xfc\x74\x7a\x65\x6e\x20\x75\x6e\x64\x20\x52\x75\x63\x6b\x73\xe4\x63\x6b\x65\x20\x68\x65\x72\x7a\x75\x73\x74\x65\x6c\x6c\x65\x6e\x20\x20"];
        LANG[INV.BLUE_CORD] = ["Diamant Faden", "\x57\x69\x72\x64\x20\x66\xfc\x72\x20\x73\x70\x65\x7a\x69\x65\x6c\x6c\x65\x20\x4d\xfc\x74\x7a\x65\x6e\x20\x67\x65\x62\x72\x61\x75\x63\x68\x74"];
        LANG[INV.CHEST] = ["Truhe", "\x44\x61\x6d\x69\x74\x20\x6b\x61\x6e\x6e\x73\x74\x20\x64\x75\x20\x47\x65\x67\x65\x6e\x73\x74\xe4\x6e\x64\x65\x20\x6c\x61\x67\x65\x72\x6e", "Haltbarkeit: 500"];
        LANG[INV.SWORD_WOOD] = ["Holzschwert", "Funktioniert das?", "Schaden: 12", "\x53\x63\x68\x61\x64\x65\x6e\x20\x61\x6e\x20\x47\x65\x62\xe4\x75\x64\x65\x6e\x3a\x20\x34"];
        LANG[INV.SWORD] = ["Steinschwert", "Sei nett zu Anderen", "Schaden: 19", "\x53\x63\x68\x61\x64\x65\x6e\x20\x61\x6e\x20\x47\x65\x62\xe4\x75\x64\x65\x6e\x3a\x20\x36"];
        LANG[INV.SWORD_GOLD] = ["Goldschwert", "\x4b\xf6\x6e\x69\x67\x20\x64\x65\x73\x20\x57\x61\x6c\x64\x65\x73", "Schaden: 22", "\x53\x63\x68\x61\x64\x65\x6e\x20\x61\x6e\x20\x47\x65\x62\xe4\x75\x64\x65\x6e\x3a\x20\x37"];
        LANG[INV.SWORD_DIAMOND] = ["Diamantschwert", "\x44\x75\x20\x6b\x61\x6e\x6e\x73\x74\x20\x64\x69\x65\x20\x4b\x72\x61\x66\x74\x20\x73\x70\xfc\x72\x65\x6e", "Schaden: 24", "\x53\x63\x68\x61\x64\x65\x6e\x20\x61\x6e\x20\x47\x65\x62\xe4\x75\x64\x65\x6e\x3a\x20\x38"];
        LANG[INV.PIRATE_SWORD] = ["Piratenschwert", "Ayyyyy!", "\x48\x61\x74\x20\x65\x69\x6e\x65\x20\x68\xf6\x68\x65\x72\x65\x20\x52\x65\x69\x63\x68\x77\x65\x69\x74\x65\x20\x61\x6c\x73\x20\x65\x69\x6e\x20\x6e\x6f\x72\x6d\x61\x6c\x65\x73\x20\x53\x63\x68\x77\x65\x72\x74", "Schaden: 24", "\x53\x63\x68\x61\x64\x65\x6e\x20\x61\x6e\x20\x47\x65\x62\xe4\x75\x64\x65\x6e\x3a\x20\x38"];
        LANG[INV.SWORD_AMETHYST] = ["Amethystschwert", "\x4d\x61\x75\x76\x65\x20\x69\x73\x74\x20\x64\x69\x65\x20\x73\x63\x68\xf6\x6e\x73\x74\x65\x20\x46\x61\x72\x62\x65\x20\x64\x65\x72\x20\x57\x65\x6c\x74", "Schaden: 27", "\x53\x63\x68\x61\x64\x65\x6e\x20\x61\x6e\x20\x47\x65\x62\xe4\x75\x64\x65\x6e\x3a\x20\x39"];
        LANG[INV.DRAGON_SWORD] = ["Drachenschwert", "Keine Gnade!", "Schaden: 30", "\x53\x63\x68\x61\x64\x65\x6e\x20\x61\x6e\x20\x47\x65\x62\xe4\x75\x64\x65\x6e\x3a\x20\x31\x30"];
        LANG[INV.DRAGON_SPEAR] = ["Drachenspeer", "\x54\xf6\x74\x65\x20\x73\x69\x65\x20\x61\x6c\x6c\x65\x21", "Schaden: 22", "\x53\x63\x68\x61\x64\x65\x6e\x20\x61\x6e\x20\x47\x65\x62\xe4\x75\x64\x65\x6e\x3a\x20\x36"];
        LANG[INV.PICK_WOOD] = ["Holzspitzhacke", "Kann nur Holz und Stein abbauen", "Schaden: 1"];
        LANG[INV.PICK] = ["Steinspitzhacke", "Kann Holz, Stein und Gold abbauen", "Schaden: 2"];
        LANG[INV.PICK_GOLD] = ["Goldspitzhacke", "Kann auch Diamanten abbauen", "Schaden: 3", "\x53\x63\x68\x61\x64\x65\x6e\x20\x61\x6e\x20\x47\x65\x62\xe4\x75\x64\x65\x6e\x3a\x20\x31"];
        LANG[INV.PICK_DIAMOND] = ["Diamantspitzhacke", "Kann alles abbauen", "Schaden: 4", "\x53\x63\x68\x61\x64\x65\x6e\x20\x61\x6e\x20\x47\x65\x62\xe4\x75\x64\x65\x6e\x3a\x20\x31"];
        LANG[INV.PICK_AMETHYST] = ["Amethystspitzhacke", "\x4b\x61\x6e\x6e\x20\x61\x6c\x6c\x65\x73\x20\x61\x62\x62\x61\x75\x65\x6e\x2c\x20\x73\x69\x65\x68\x74\x20\x61\x75\xdf\x65\x72\x64\x65\x6d\x20\x67\x75\x74\x20\x61\x75\x73\x21", "Schaden: 5", "\x53\x63\x68\x61\x64\x65\x6e\x20\x61\x6e\x20\x47\x65\x62\xe4\x75\x64\x65\x6e\x3a\x20\x31"];
        LANG[INV.HAMMER] = ["Steinhammer", "\x4e\xfc\x74\x7a\x6c\x69\x63\x68\x20\x75\x6d\x20\x47\x65\x62\xe4\x75\x64\x65\x20\x7a\x75\x20\x7a\x65\x72\x73\x74\xf6\x72\x65\x6e", "Funktioniert nicht gut gegen Diamant oder Amethyst", "Schaden: 2", "\x53\x63\x68\x61\x64\x65\x6e\x20\x61\x6e\x20\x47\x65\x62\xe4\x75\x64\x65\x6e\x3a\x20\x32\x30"];
        LANG[INV.HAMMER_GOLD] = ["Goldhammer", "\x4e\xfc\x74\x7a\x6c\x69\x63\x68\x20\x75\x6d\x20\x47\x65\x62\xe4\x75\x64\x65\x20\x7a\x75\x20\x7a\x65\x72\x73\x74\xf6\x72\x65\x6e", "Funktioniert nicht gut gegen Amethyst", "Schaden: 3", "\x53\x63\x68\x61\x64\x65\x6e\x20\x61\x6e\x20\x47\x65\x62\xe4\x75\x64\x65\x6e\x3a\x20\x33\x30"];
        LANG[INV.HAMMER_DIAMOND] = ["Diamanthammer", "\x4e\xfc\x74\x7a\x6c\x69\x63\x68\x20\x75\x6d\x20\x47\x65\x62\xe4\x75\x64\x65\x20\x7a\x75\x20\x7a\x65\x72\x73\x74\xf6\x72\x65\x6e", "Schaden: 4", "\x53\x63\x68\x61\x64\x65\x6e\x20\x61\x6e\x20\x47\x65\x62\xe4\x75\x64\x65\x6e\x3a\x20\x34\x30"];
        LANG[INV.HAMMER_AMETHYST] = ["Amethysthammer", "\x4e\xfc\x74\x7a\x6c\x69\x63\x68\x20\x75\x6d\x20\x47\x65\x62\xe4\x75\x64\x65\x20\x7a\x75\x20\x7a\x65\x72\x73\x74\xf6\x72\x65\x6e", "Schaden: 5", "\x53\x63\x68\x61\x64\x65\x6e\x20\x61\x6e\x20\x47\x65\x62\xe4\x75\x64\x65\x6e\x3a\x20\x35\x30"];
        LANG[INV.SUPER_HAMMER] = ["Superhammer", "\x57\x69\x6c\x6c\x73\x74\x20\x64\x75\x20\x64\x69\x65\x20\x57\x65\x6c\x74\x20\x7a\x65\x72\x73\x74\xf6\x72\x65\x6e\x3f", "Schaden: 12", "\x53\x63\x68\x61\x64\x65\x6e\x20\x61\x6e\x20\x47\x65\x62\xe4\x75\x64\x65\x6e\x3a\x20\x37\x30"];
        LANG[INV.WOOD_SPEAR] = ["Holzspeer", "Wie ein Stock, nur mit dem Unterschied, dass es sticht.", "Schaden: 10", "\x53\x63\x68\x61\x64\x65\x6e\x20\x61\x6e\x20\x47\x65\x62\xe4\x75\x64\x65\x6e\x3a\x20\x32"];
        LANG[INV.SPEAR] = ["Steinspeer", "Der Anfang der Evolution!", "Schaden: 14", "\x53\x63\x68\x61\x64\x65\x6e\x20\x61\x6e\x20\x47\x65\x62\xe4\x75\x64\x65\x6e\x3a\x20\x34"];
        LANG[INV.GOLD_SPEAR] = ["Goldspeer", "Pass auf, es sticht!", "Schaden: 15", "\x53\x63\x68\x61\x64\x65\x6e\x20\x61\x6e\x20\x47\x65\x62\xe4\x75\x64\x65\x6e\x3a\x20\x35"];
        LANG[INV.DIAMOND_SPEAR] = ["Diamantspeer", "\x44\x75\x20\x62\x69\x73\x74\x20\x62\x65\x72\x65\x69\x74\x20\x65\x69\x6e\x65\x6e\x20\x44\x72\x61\x63\x68\x65\x6e\x20\x7a\x75\x20\x74\xf6\x74\x65\x6e", "Schaden: 17", "\x53\x63\x68\x61\x64\x65\x6e\x20\x61\x6e\x20\x47\x65\x62\xe4\x75\x64\x65\x6e\x3a\x20\x35"];
        LANG[INV.AMETHYST_SPEAR] = ["AmethystSpeer", "Drachen jagen dir keine Angst mehr ein", "Schaden: 18", "\x53\x63\x68\x61\x64\x65\x6e\x20\x61\x6e\x20\x47\x65\x62\xe4\x75\x64\x65\x6e\x3a\x20\x36"];
        LANG[INV.SHOVEL] = ["Steinschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 2"];
        LANG[INV.SHOVEL_GOLD] = ["Goldschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 3", "\x53\x63\x68\x61\x64\x65\x6e\x20\x61\x6e\x20\x47\x65\x62\xe4\x75\x64\x65\x6e\x3a\x20\x31"];
        LANG[INV.SHOVEL_DIAMOND] = ["Diamantschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 4", "\x53\x63\x68\x61\x64\x65\x6e\x20\x61\x6e\x20\x47\x65\x62\xe4\x75\x64\x65\x6e\x3a\x20\x31"];
        LANG[INV.SHOVEL_AMETHYST] = ["Amethystschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 5", "\x53\x63\x68\x61\x64\x65\x6e\x20\x61\x6e\x20\x47\x65\x62\xe4\x75\x64\x65\x6e\x3a\x20\x31"];
        LANG[INV.WOOD_HELMET] = ["Holzhelm", "Besser als nichts", "Verteidigung gegen Spieler: 1", "Verteidigung gegen Tiere: 4"];
        LANG[INV.STONE_HELMET] = ["Steinhelm", "\x44\x75\x20\x62\x69\x73\x74\x20\x62\x65\x72\x65\x69\x74\x20\x7a\x75\x20\x6b\xe4\x6d\x70\x66\x65\x6e\x21", "Verteidigung gegen Spieler: 2", "Verteidigung gegen Tiere: 8"];
        LANG[INV.GOLD_HELMET] = ["Goldhelm", "AKA Der Helm der Unbarmherzigen", "Verteidigung gegen Spieler: 4", "Verteidigung gegen Tiere: 13"];
        LANG[INV.DIAMOND_HELMET] = ["Diamanthelm", "Gib nicht zu viel an", "Verteidigung gegen Spieler: 5", "Verteidigung gegen Tiere: 19"];
        LANG[INV.AMETHYST_HELMET] = ["Amethysthelm", "Du musst vor nichts mehr angst haben", "Verteidigung gegen Spieler: 6", "Verteidigung gegen Tiere: 23"];
        LANG[INV.DRAGON_HELMET] = ["Drachenhelm", "Du wirst die Welt erobern", "Verteidigung gegen Spieler: 8", "Verteidigung gegen Tiere: 27"];
        LANG[INV.EXPLORER_HAT] = ["Erkunderhut", "Tiere beachten dich nicht mehr", "\x6d\x61\x63\x68\x20\x61\x62\x65\x72\x20\x6b\x65\x69\x6e\x65\x20\x47\x65\x72\xe4\x75\x73\x63\x68\x65\x21", "\x48\xe4\x6c\x74\x20\x64\x69\x63\x68\x20\x77\x61\x72\x6d\x20\x61\x75\xdf\x65\x72\x68\x61\x6c\x62\x20\x76\x6f\x6e\x20\x57\x61\x73\x73\x65\x72\x20\x75\x6e\x64\x20\x57\x69\x6e\x74\x65\x72"];
        LANG[INV.CHRISTMAS_HAT] = ["Weihnachtshut", "\x4f\x68\x2c\x20\x6f\x68\x2c\x20\x6f\x68\x2c\x20\x66\x72\xf6\x68\x6c\x69\x63\x68\x65\x20\x57\x65\x69\x68\x6e\x61\x63\x68\x74\x65\x6e", "\x48\xe4\x6c\x74\x20\x64\x69\x63\x68\x20\x77\x61\x72\x6d\x20\x61\x75\xdf\x65\x72\x68\x61\x6c\x62\x20\x76\x6f\x6e\x20\x57\x61\x73\x73\x65\x72\x20\x75\x6e\x64\x20\x57\x69\x6e\x74\x65\x72"];
        LANG[INV.ELF_HAT] = ["Elfenhut", "Lass dich nicht ausnutzen, du kleiner Schneeelf!", "\x48\xe4\x6c\x74\x20\x64\x69\x63\x68\x20\x77\x61\x72\x6d\x20\x61\x75\xdf\x65\x72\x68\x61\x6c\x62\x20\x76\x6f\x6e\x20\x57\x61\x73\x73\x65\x72\x20\x75\x6e\x64\x20\x57\x69\x6e\x74\x65\x72"];
        LANG[INV.HOOD] = ["Kapuze", "Du bist ein Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "\x32\x29\x20\x44\x75\x20\x6e\x69\x63\x68\x74\x73\x20\x74\x72\xe4\x67\x73\x74", "\x33\x29\x20\x64\x69\x63\x68\x20\x6e\x69\x65\x6d\x61\x6e\x64\x20\x66\xfc\x72\x20\x61\x63\x68\x74\x20\x53\x65\x6b\x75\x6e\x64\x65\x6e\x20\x62\x65\x72\xfc\x68\x72\x74\x20\x68\x61\x74", "\x34\x29\x20\x44\x75\x20\x6e\x69\x63\x68\x74\x20\x69\x6e\x20\x64\x65\x72\x20\x4e\xe4\x68\x65\x20\x65\x69\x6e\x65\x73\x20\x46\x65\x75\x65\x72\x73\x20\x62\x69\x73\x74", "\x35\x29\x20\x44\x65\x69\x6e\x20\x5a\x69\x65\x6c\x20\x6b\x65\x69\x6e\x65\x20\x42\x61\x75\x65\x72\x6e\x6b\x6c\x65\x69\x64\x75\x6e\x67\x20\x74\x72\xe4\x67\x74", "\x48\xe4\x6c\x74\x20\x64\x69\x63\x68\x20\x77\x61\x72\x6d\x20\x61\x75\xdf\x65\x72\x68\x61\x6c\x62\x20\x76\x6f\x6e\x20\x57\x61\x73\x73\x65\x72\x20\x75\x6e\x64\x20\x57\x69\x6e\x74\x65\x72"];
        LANG[INV.EARMUFFS] = ["\x4f\x68\x72\x77\xe4\x72\x6d\x65\x72", "Eine Art kleiner chapka.", "\x48\xe4\x6c\x74\x20\x64\x69\x63\x68\x20\x77\x61\x72\x6d\x20\x61\x75\xdf\x65\x72\x68\x61\x6c\x62\x20\x76\x6f\x6e\x20\x57\x61\x73\x73\x65\x72\x20\x75\x6e\x64\x20\x57\x69\x6e\x74\x65\x72"];
        LANG[INV.COAT] = ["Chapka", "Auch Mantel genannt.", "\x48\xe4\x6c\x74\x20\x64\x69\x63\x68\x20\x77\x61\x72\x6d\x20\x61\x75\xdf\x65\x72\x68\x61\x6c\x62\x20\x76\x6f\x6e\x20\x57\x61\x73\x73\x65\x72\x20\x75\x6e\x64\x20\x57\x69\x6e\x74\x65\x72"];
        LANG[INV.CAP_SCARF] = ["Winterschaal und Kappe", "Sehr angenehm", "Sehr Warm"];
        LANG[INV.PEASANT] = ["Bauer", "Deine Pflanzen wachsen schneller", "\x48\xe4\x6c\x74\x20\x64\x69\x63\x68\x20\x77\x61\x72\x6d\x20\x61\x75\xdf\x65\x72\x68\x61\x6c\x62\x20\x76\x6f\x6e\x20\x57\x61\x73\x73\x65\x72\x20\x75\x6e\x64\x20\x57\x69\x6e\x74\x65\x72"];
        LANG[INV.WINTER_HOOD] = ["Winterkapuze", "Du bist ein Wilder Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "\x32\x29\x20\x44\x75\x20\x6e\x69\x63\x68\x74\x73\x20\x74\x72\xe4\x67\x73\x74", "\x33\x29\x20\x64\x69\x63\x68\x20\x6e\x69\x65\x6d\x61\x6e\x64\x20\x66\xfc\x72\x20\x76\x69\x65\x72\x20\x53\x65\x6b\x75\x6e\x64\x65\x6e\x20\x62\x65\x72\xfc\x68\x72\x74\x20\x68\x61\x74", "\x34\x29\x20\x44\x75\x20\x6e\x69\x63\x68\x74\x20\x69\x6e\x20\x64\x65\x72\x20\x4e\xe4\x68\x65\x20\x65\x69\x6e\x65\x73\x20\x46\x65\x75\x65\x72\x73\x20\x62\x69\x73\x74", "\x35\x29\x20\x44\x65\x69\x6e\x20\x5a\x69\x65\x6c\x20\x6b\x65\x69\x6e\x65\x20\x57\x69\x6e\x74\x65\x72\x62\x61\x75\x65\x72\x6e\x6b\x6c\x65\x69\x64\x75\x6e\x67\x20\x74\x72\xe4\x67\x74", "\x48\xe4\x6c\x74\x20\x64\x69\x63\x68\x20\x77\x61\x72\x6d\x20\x61\x75\xdf\x65\x72\x68\x61\x6c\x62\x20\x76\x6f\x6e\x20\x57\x61\x73\x73\x65\x72\x20\x75\x6e\x64\x20\x57\x69\x6e\x74\x65\x72"];
        LANG[INV.WINTER_PEASANT] = ["Winterbauern", "Deine Pflanzen wachsen deutlich schneller", "\x48\xe4\x6c\x74\x20\x64\x69\x63\x68\x20\x77\x61\x72\x6d\x20\x61\x75\xdf\x65\x72\x68\x61\x6c\x62\x20\x76\x6f\x6e\x20\x57\x61\x73\x73\x65\x72\x20\x75\x6e\x64\x20\x57\x69\x6e\x74\x65\x72"];
        LANG[INV.DIVING_MASK] = ["Tauchermaske", "Du bist schneller im Wasser", "\x48\xe4\x6c\x74\x20\x64\x69\x63\x68\x20\x77\x61\x72\x6d\x20\x69\x6d\x20\x57\x61\x73\x73\x65\x72", "Verteidigung gegen Spieler: 2, Verteidigung gegen Tiere: 8"];
        LANG[INV.SUPER_DIVING_SUIT] = ["Supertauchermaske", "Du bist sehr schnell im Wasser", "\x48\xe4\x6c\x74\x20\x64\x69\x63\x68\x20\x77\x61\x72\x6d\x20\x69\x6d\x20\x57\x61\x73\x73\x65\x72", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
        LANG[INV.DRAGON_ORB] = ["Drachenkugel", "\x45\x72\x68\x61\x6c\x74\x65\x6e\x20\x62\x65\x69\x20\x61\x62\x73\x63\x68\x6c\x69\x65\xdf\x75\x6e\x67\x20\x64\x65\x72\x20\x51\x75\x65\x73\x74"];
        LANG[INV.DRAGON_HEART] = ["Drachenherz", "Verwandelt dich in einen Geist, sobald du stirbst!", "\x44\x75\x20\x62\x69\x73\x74\x20\x66\xfc\x72\x20\x36\x30\x20\x53\x65\x6b\x75\x6e\x64\x65\x6e\x20\x65\x69\x6e\x20\x47\x65\x69\x73\x74", "Finde ein Wiederbelebungsstein."];
        LANG[INV.GEMME_GREEN] = ["\x47\x72\xfc\x6e\x65\x72\x20\x45\x64\x65\x6c\x73\x74\x65\x69\x6e", "Du hast nicht gemogelt, versprochen?"];
        LANG[INV.GEMME_ORANGE] = ["Orangener Edelstein", "Nur ein echter Pirat findet ihn!"];
        LANG[INV.GEMME_BLUE] = ["Blauer Edelstein", "\x46\xfc\x72\x20\x73\x65\x68\x72\x20\x6e\x65\x74\x74\x65\x20\x4c\x65\x75\x74\x65"];
        LANG[INV.CROWN_GREEN] = ["\x47\x72\xfc\x6e\x65\x20\x4b\x72\x6f\x6e\x65", "Du heilst dich selbst sehr schnell", "\x48\x65\x69\x6c\x75\x6e\x67\x20\xfc\x62\x65\x72\x20\x5a\x65\x69\x74\x3a\x20\x34\x30", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
        LANG[INV.CROWN_ORANGE] = ["Orangene Krone", "\x44\x75\x20\x66\xfc\x68\x6c\x73\x74\x20\x64\x69\x63\x68\x20\x70\x6c\xf6\x74\x7a\x6c\x69\x63\x68\x20\x61\x6c\x73\x20\x68\xe4\x74\x74\x65\x73\x74\x20\x64\x75\x20\x6d\x65\x68\x72\x20\x47\x6c\xfc\x63\x6b", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
        LANG[INV.CROWN_BLUE] = ["Blaue Krone", "Sobald du stirbst wirst du ein Geist", "Du wirst allerdings dein Schwert und deine Spitzhacke verlieren", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
        LANG[INV.BUCKET_FULL] = ["Eimer", "\x4e\xfc\x74\x7a\x6c\x69\x63\x68\x20\x75\x6d\x20\x65\x69\x6e\x65\x6e\x20\x42\x72\x75\x6e\x6e\x65\x6e\x20\x7a\x75\x20\x66\xfc\x6c\x6c\x65\x6e", "\x45\x69\x6e\x20\x45\x69\x6d\x65\x72\x20\x69\x73\x74\x20\x76\x65\x72\x67\x6c\x65\x69\x63\x68\x62\x61\x72\x20\x6d\x69\x74\x20\x7a\x77\xf6\x6c\x66\x20\x46\x6c\x61\x73\x63\x68\x65\x6e"];
        LANG[INV.BUCKET_EMPTY] = ["Leerer Eimer", "\x44\x75\x20\x6d\x75\x73\x73\x74\x20\x64\x65\x6e\x20\x45\x69\x6d\x65\x72\x20\x69\x6e\x20\x64\x65\x72\x20\x4e\xe4\x68\x65\x20\x65\x69\x6e\x65\x72\x20\x57\x61\x73\x73\x65\x72\x71\x75\x65\x6c\x6c\x65\x20\x66\xfc\x6c\x6c\x65\x6e"];
        LANG[INV.BOTTLE_FULL] = ["Flasche", "\x45\x72\x6c\x61\x75\x62\x74\x20\x64\x69\x72\x20\xfc\x62\x65\x72\x61\x6c\x6c\x20\x57\x61\x73\x73\x65\x72\x20\x7a\x75\x20\x74\x72\x69\x6e\x6b\x65\x6e", "Wasser: 50"];
        LANG[INV.BOTTLE_EMPTY] = ["Leere Flasche", "\x44\x75\x20\x6d\x75\x73\x73\x74\x20\x64\x69\x65\x20\x46\x6c\x61\x73\x63\x68\x65\x20\x69\x6e\x20\x64\x65\x72\x20\x4e\xe4\x68\x65\x20\x65\x69\x6e\x65\x72\x20\x57\x61\x73\x73\x65\x72\x71\x75\x65\x6c\x6c\x65\x20\x66\xfc\x6c\x6c\x65\x6e"];
        LANG[INV.WATERING_CAN] = ["\x4c\x65\x65\x72\x65\x20\x47\x69\x65\xdf\x6b\x61\x6e\x6e\x65", "\x44\x75\x20\x6d\x75\x73\x73\x74\x20\x65\x73\x20\x6d\x69\x74\x20\x65\x69\x6e\x65\x72\x20\x57\x61\x73\x73\x65\x72\x71\x75\x65\x6c\x6c\x65\x20\x66\xfc\x6c\x6c\x65\x6e"];
        LANG[INV.WATERING_CAN_FULL] = ["\x47\x69\x65\xdf\x6b\x61\x6e\x6e\x65", "\x45\x72\x6c\x61\x75\x62\x74\x20\x64\x61\x73\x20\x77\xe4\x73\x73\x65\x72\x6e\x20\x76\x6f\x6e\x20\x50\x66\x6c\x61\x6e\x7a\x65\x6e", "Schaden: 1"];
        LANG[INV.BAG] = ["Rucksack", "Mehr Platz im Inventar!"];
        LANG[INV.PAPER] = ["Papier", "\x57\x69\x72\x64\x20\x66\xfc\x72\x73\x20\x42\xfc\x63\x68\x65\x72\x6d\x61\x63\x68\x65\x6e\x20\x76\x65\x72\x77\x65\x6e\x64\x65\x74"];
        LANG[INV.BOOK] = ["Buch", "\x52\x65\x64\x75\x7a\x69\x65\x72\x74\x20\x64\x69\x65\x20\x62\x65\x6e\xf6\x74\x69\x67\x74\x65\x20\x5a\x65\x69\x74\x20\x62\x65\x69\x6d\x20\x68\x65\x72\x73\x74\x65\x6c\x6c\x65\x6e\x20\x76\x6f\x6e\x20\x47\x65\x67\x65\x6e\x73\x74\xe4\x6e\x64\x65\x6e", "Muss in der Hand gehalten werden um den Effekt zu nutzen", "Schaden: 1"];
        LANG[INV.BANDAGE] = ["Verband", "Heile dich schneller", "\x48\x65\x69\x6c\x75\x6e\x67\x20\xfc\x62\x65\x72\x20\x5a\x65\x69\x74\x3a\x20\x33\x30", "Effekt: 5"];
        LANG[INV.LOCK] = ["Schloss", "\x45\x72\x6c\x61\x75\x62\x74\x20\x64\x69\x72\x20\x64\x65\x69\x6e\x65\x20\x54\x72\x75\x68\x65\x20\x7a\x75\x20\x76\x65\x72\x73\x63\x68\x6c\x69\x65\xdf\x65\x6e"];
        LANG[INV.LOCKPICK] = ["Dietrich", "\x45\x72\x6c\x61\x75\x62\x74\x20\x64\x69\x72\x20\x65\x69\x6e\x65\x20\x76\x65\x72\x73\x63\x68\x6c\x6f\x73\x73\x65\x6e\x65\x20\x54\x72\x75\x68\x65\x20\x7a\x75\x20\xf6\x66\x66\x6e\x65\x6e"];
        LANG[INV.TOTEM] = ["Totem", "\x45\x72\x6c\x61\x75\x62\x74\x20\x64\x69\x72\x20\x65\x69\x6e\x20\x54\x65\x61\x6d\x20\x7a\x75\x20\x67\x72\xfc\x6e\x64\x65\x6e", "\x54\x65\x69\x6c\x65\x20\x54\xfc\x72\x65\x6e\x20\x75\x6e\x64\x20\x54\x72\x75\x68\x65\x6e", "verletzende Strukturen schaden deinen Freunden nicht mehr"];
        LANG[INV.BRIDGE] = ["\x42\x72\xfc\x63\x6b\x65", "\x53\x65\x68\x72\x20\x6e\xfc\x74\x7a\x6c\x69\x63\x68\x20\xfc\x62\x65\x72\x20\x57\x61\x73\x73\x65\x72", "Es erlaubt dir zu trinken ohne zu ertrinken", "\x6c\xe4\x73\x73\x74\x20\x64\x69\x63\x68\x20\x73\x63\x68\x6e\x65\x6c\x6c\x65\x72\x20\x61\x75\x66\x20\x64\x65\x6d\x20\x57\x61\x73\x73\x65\x72\x20\x6c\x61\x75\x66\x65\x6e"];
        LANG[INV.SIGN] = ["Schild", "\x48\x69\x6e\x74\x65\x72\x6c\x61\x73\x73\x65\x20\x65\x69\x6e\x65\x20\x4e\x61\x63\x68\x72\x69\x63\x68\x74\x20\x66\xfc\x72\x20\x61\x6e\x64\x65\x72\x65\x20\x68\x69\x65\x72", "Haltbarkeit: 200"];
        LANG[INV.ROOF] = ["Dach", "\x56\x65\x72\x73\x74\x65\x63\x6b\x74\x20\x64\x69\x63\x68\x20\x65\x69\x6e\x20\x77\x65\x6e\x69\x67\x20\x75\x6e\x64\x20\x68\xe4\x6c\x74\x20\x77\x61\x72\x6d\x20\x64\x61\x62\x65\x69\x21"];
        LANG[INV.WELL] = ["Brunnen", "\x45\x72\x6c\x61\x75\x62\x74\x20\x64\x69\x72\x20\x64\x65\x69\x6e\x65\x20\x46\x6c\x61\x73\x63\x68\x65\x20\x7a\x75\x20\x66\xfc\x6c\x6c\x65\x6e\x2c\x20\x65\x69\x6e\x65\x20\x6d\x6f\x62\x69\x6c\x65\x20\x57\x61\x73\x73\x65\x72\x71\x75\x65\x6c\x6c\x65", "Haltbarkeit: 1000"];
        LANG[INV.WALL] = ["Holzwand", "Kennst du den Wandtanz?", "Haltbarkeit: 1000"];
        LANG[INV.STONE_WALL] = ["Steinwand", "Es sieht ein wenig Ernsthafter aus.", "Haltbarkeit: 1500"];
        LANG[INV.GOLD_WALL] = ["Goldwand", "Gold an deiner Wand? Es leuchtet ein wenig.", "Haltbarkeit: 2000"];
        LANG[INV.DIAMOND_WALL] = ["Diamantwand", "So leuchtend, pass auf deine Augen auf", "Haltbarkeit: 2500"];
        LANG[INV.AMETHYST_WALL] = ["Amethystwand", "\x44\x75\x20\x6d\x75\x73\x73\x74\x20\x64\x69\x63\x68\x20\x77\x69\x72\x6b\x6c\x69\x63\x68\x20\x66\xfc\x72\x63\x68\x74\x65\x6e\x20\x72\x61\x75\x73\x20\x7a\x75\x20\x67\x65\x68\x65\x6e\x21", "Haltbarkeit: 3000"];
        LANG[INV.SPIKE] = ["Holzstacheln", "Kann deine Gegner verletzen", "Schaden: 10, Schaden beim Angreifen: 2", "Haltbarkeit: 150"];
        LANG[INV.STONE_SPIKE] = ["Steinstacheln", "\x49\x63\x68\x20\x77\xfc\x72\x64\x65\x20\x6c\x69\x65\x62\x65\x72\x20\x6e\x69\x63\x68\x74\x20\x64\x65\x69\x6e\x20\x47\x65\x67\x6e\x65\x72\x20\x73\x65\x69\x6e\x2e", "Schaden: 20", "Schaden beim Angreifen: 3", "Haltbarkeit: 300"];
        LANG[INV.GOLD_SPIKE] = ["Goldstacheln", "Du bist grausam.", "Schaden: 30", "Schaden beim Angreifen: 3", "Haltbarkeit: 600"];
        LANG[INV.DIAMOND_SPIKE] = ["Diamantstacheln", "Du magst Gesellschaft nicht.", "Schaden: 40", "Schaden beim Angreifen: 4", "Haltbarkeit: 1200"];
        LANG[INV.AMETHYST_SPIKE] = ["Amethyststacheln", "\x57\x61\x73\x20\x7a\x75\x72\x20\x48\xf6\x6c\x6c\x65\x20\x68\x61\x62\x65\x6e\x20\x64\x65\x69\x6e\x65\x20\x4e\x61\x63\x68\x62\x61\x72\x6e\x20\x64\x69\x72\x20\x61\x6e\x67\x65\x74\x61\x6e\x3f", "Schaden: 50", "Schaden beim Angreifen: 4", "Haltbarkeit: 2400"];
        LANG[INV.WOOD_DOOR] = ["\x48\x6f\x6c\x7a\x74\xfc\x72", "\x4b\x61\x6e\x6e\x20\x76\x6f\x6e\x20\x64\x69\x72\x20\x6f\x64\x65\x72\x20\x64\x65\x69\x6e\x65\x6e\x20\x46\x72\x65\x75\x6e\x64\x65\x6e\x20\x67\x65\xf6\x66\x66\x6e\x65\x74\x20\x77\x65\x72\x64\x65\x6e", "Haltbarkeit: 1000"];
        LANG[INV.STONE_DOOR] = ["\x53\x74\x65\x69\x6e\x74\xfc\x72", "\x45\x69\x6e\x65\x20\x73\x74\xe4\x72\x6b\x65\x72\x65\x20\x54\xfc\x72\x20\x69\x73\x74\x20\x65\x72\x6e\x73\x74\x68\x61\x66\x74\x65\x72", "Haltbarkeit: 1500"];
        LANG[INV.GOLD_DOOR] = ["\x47\x6f\x6c\x64\x74\xfc\x72", "Baust du el dorado?", "Haltbarkeit: 2000"];
        LANG[INV.DIAMOND_DOOR] = ["\x44\x69\x61\x6d\x61\x6e\x74\x74\xfc\x72", "\x46\xfc\x72\x20\x65\x69\x6e\x20\x73\x63\x68\x65\x69\x6e\x65\x6e\x64\x65\x73\x20\x48\x61\x75\x73", "Haltbarkeit: 2500"];
        LANG[INV.AMETHYST_DOOR] = ["\x41\x6d\x65\x74\x68\x79\x73\x74\x74\xfc\x72", "Ist dein Haus ein verschlossener Safe?", "Haltbarkeit: 3500"];
        LANG[INV.FURNACE] = ["Ofen", "\x57\xe4\x72\x6d\x74\x20\x64\x69\x63\x68", "Es verbraucht alle 5 Sekunden eine Einheit Holz", "Haltbarkeit: 1000"];
        LANG[INV.WINDMILL] = ["\x57\x69\x6e\x64\x6d\xfc\x68\x6c\x65", "Kann mit Weizen, Mehl herstellen", "Es braucht 5 Sekunden um Mehl herzustellen", "\x47\x69\x62\x74\x20\x64\x69\x72\x20\x50\x75\x6e\x6b\x74\x65\x20\x77\xe4\x68\x72\x65\x6e\x64\x20\x65\x73\x20\x61\x72\x62\x65\x69\x74\x65\x74", "Haltbarkeit: 2000"];
        LANG[INV.BREAD_OVEN] = ["Brotofen", "Erlaubt dir mit Mehl, Brot herzustellen", "Es braucht 5 Sekunden um Brot herzustellen", "\x47\x69\x62\x74\x20\x64\x69\x72\x20\x50\x75\x6e\x6b\x74\x65\x20\x77\xe4\x68\x72\x65\x6e\x64\x20\x65\x73\x20\x61\x72\x62\x65\x69\x74\x65\x74", "Haltbarkeit: 2000"];
        LANG[INV.RESURRECTION] = ["Wiederbelebungsstein", "Es ist Magie", "Wiederbelebt dich, wenn du ein Geist bist", "Du wirst deine Waffe und Spitzhacke verlieren", "Haltbarkeit: 200"];
        LANG[TEXT.YOU_CANNOT_JOIN] = "Du kannst diesem Server nicht beitreten";
        LANG[TEXT.KICKED] = "Gekickt: ";
        LANG[TEXT.KEY_ALREADY] = "\x44\x65\x69\x6e\x20\x53\x63\x68\x6c\xfc\x73\x73\x65\x6c\x20\x77\x75\x72\x64\x65\x20\x62\x65\x72\x65\x69\x74\x73\x20\x76\x6f\x6e\x20\x6a\x65\x6d\x61\x6e\x64\x20\x61\x6e\x64\x65\x72\x65\x6d\x20\x62\x65\x6e\x75\x74\x7a\x74";
        LANG[TEXT.KEY_WRONG] = "\x44\x65\x69\x6e\x20\x53\x63\x68\x6c\xfc\x73\x73\x65\x6c\x20\x69\x73\x74\x20\x66\x61\x6c\x73\x63\x68";
        LANG[TEXT.OLD_VERSION] = "\x44\x65\x69\x6e\x65\x20\x56\x65\x72\x73\x69\x6f\x6e\x20\x69\x73\x74\x20\x76\x65\x72\x61\x6c\x74\x65\x74\x2c\x20\x73\xe4\x75\x62\x65\x72\x65\x20\x64\x65\x69\x6e\x20\x43\x61\x63\x68\x65";
        LANG[TEXT.NO_MORE_RESOURCES] = "Es gibt keine neuen Ressourcen";
        LANG[TEXT.SURVIVED_1DAY] = "\x44\x75\x20\x68\x61\x73\x74\x20\x65\x69\x6e\x65\x6e\x20\x54\x61\x67\x20\xfc\x62\x65\x72\x6c\x65\x62\x74";
        LANG[TEXT.SURVIVED] = "\x44\x75\x20\x68\x61\x73\x74\x20\xfc\x62\x65\x72\x6c\x65\x62\x74\x20";
        LANG[TEXT.DAYS] = " Tage";
        LANG[TEXT.DEAD_SAD] = "Du bist gestorben ;-;";
        LANG[TEXT.SPAM_ME] = "\x53\x65\x72\x76\x65\x72\x20\x6b\x61\x6e\x6e\x20\x6b\x65\x69\x6e\x20\x53\x70\x61\x77\x6e\x70\x6c\x61\x74\x7a\x20\x66\x69\x6e\x64\x65\x6e\x21\x20\x44\x72\xfc\x63\x6b\x65\x20\x69\x6d\x6d\x65\x72\x20\x77\x69\x65\x64\x65\x72\x20\x61\x75\x66\x20\x73\x70\x69\x65\x6c\x65\x6e\x21";
        LANG[TEXT.SPAM_ME2] = "\x53\x65\x72\x76\x65\x72\x20\x69\x73\x74\x20\x76\x6f\x6c\x6c\x21\x20\x44\x72\xfc\x63\x6b\x65\x20\x69\x6d\x6d\x65\x72\x20\x77\x69\x65\x64\x65\x72\x20\x61\x75\x66\x20\x73\x70\x69\x65\x6c\x65\x6e\x21";
        LANG[TEXT.EMPTY] = "Ressource ist leer";
        LANG[TEXT.INV_FULL] = "\x44\x65\x69\x6e\x20\x49\x6e\x76\x65\x6e\x74\x61\x72\x20\x69\x73\x74\x20\x76\x6f\x6c\x6c\x20\x28\x72\x65\x63\x68\x74\x73\x2d\x6b\x6c\x69\x63\x6b\x20\x75\x6d\x20\x47\x65\x67\x65\x6e\x73\x74\xe4\x6e\x64\x65\x20\x7a\x75\x20\x65\x6e\x74\x66\x65\x72\x6e\x65\x6e\x29";
        LANG[TEXT.DEAD] = " ist gestorben";
        LANG[TEXT.WRONG_TOOL] = "Das ist nicht das richtige Werkzeug";
        LANG[TEXT.JOIN_TEAM] = "Du bist einem Team beigetreten";
        LANG[TEXT.YOU_DEAD] = "Du bist gestorben";
        LANG[TEXT.JOINED_TEAM] = " ist dem Team beigetreten";
        LANG[TEXT.TEAM_DESTROYED] = "\x44\x65\x69\x6e\x20\x54\x65\x61\x6d\x20\x77\x75\x72\x64\x65\x20\x7a\x65\x72\x73\x74\xf6\x72\x74";
        LANG[TEXT.LEFT_TEAM] = "Du hast das Team verlassen";
        LANG[TEXT.LEFT_TEAM2] = " hat das Team verlassen";
        LANG[TEXT.TOKEN] = "Jemand hat dein Token gestohlen :>";
        LANG[TEXT.CHOOSE] = "Suche dir ein Server aus";
        LANG[TEXT.PLAYERS] = "Spieler";
        LANG[TEXT.TOTAL_PLAYERS] = "alle Spieler";
        LANG[TEXT.TOTAL_MODE] = "Spieler in diesem Modus";
        LANG[TEXT.COMMING_SOON] = "\x42\x61\x6c\x64\x20\x76\x65\x72\x66\xfc\x67\x62\x61\x72\x2e\x2e\x2e";
        document.getElementById("nickname_input").placeholder = "Spitzname";
        DIE[0] = ["\x44\x75\x20\x77\x75\x72\x64\x65\x73\x74\x20\x6f\x68\x6e\x65\x20\x47\x72\x75\x6e\x64\x20\x67\x65\x74\xf6\x74\x65\x74"];
        DIE[1] = ["Du bist verhungert, wie der Name des Spiels andeutet"];
        DIE[2] = ["Du bist erfroren. Zu schade", "\x44\x75\x20\x62\x69\x73\x74\x20\x61\x6e\x20\x55\x6e\x74\x65\x72\x6b\xfc\x68\x6c\x75\x6e\x67\x20\x67\x65\x73\x74\x6f\x72\x62\x65\x6e\x2e\x20\x56\x65\x72\x73\x75\x63\x68\x65\x20\x6e\xe4\x63\x68\x73\x74\x65\x73\x20\x4d\x61\x6c\x20\x7a\x75\x20\x65\x69\x6e\x65\x6d\x20\x46\x65\x75\x65\x72\x20\x7a\x75\x20\x67\x65\x68\x65\x6e\x20\x2e"];
        DIE[3] = ["\x45\x69\x6e\x20\x53\x70\x69\x65\x6c\x65\x72\x20\x68\x61\x74\x20\x64\x69\x63\x68\x20\x67\x65\x74\xf6\x74\x65\x74\x2c\x20\x77\xe4\x68\x72\x65\x6e\x64\x20\x65\x72\x20\x64\x69\x72\x20\x67\x65\x73\x61\x67\x74\x20\x68\x61\x74\x20\x27\x67\x69\x74\x20\x67\x75\x64\x2e\x27", "Du wurdest von einem Spieler ermordet, mach dir keine Sorgen, er wird wahrscheinlich auch sterben ."];
        DIE[4] = ["Du bist zu nah ans Feuer gegangen und zu tode gebrannt. Schlechte Idee.", "\x44\x75\x20\x77\x75\x72\x64\x65\x73\x74\x20\x76\x6f\x6e\x20\x65\x69\x6e\x65\x6d\x20\x46\x65\x75\x65\x72\x20\x75\x6d\x67\x65\x62\x72\x61\x63\x68\x74\x2e\x20\x46\x65\x75\x65\x72\x20\x74\x75\x74\x20\x77\x65\x68\x2e\x20\x53\x63\x68\x72\x65\x69\x62\x20\x65\x69\x6e\x65\x20\x47\x65\x73\x63\x68\x69\x63\x68\x74\x65\x20\x64\x61\x72\xfc\x62\x65\x72\x2e"];
        DIE[5] = ["\x44\x65\x69\x6e\x20\x4b\xf6\x72\x70\x65\x72\x20\x77\x69\x72\x64\x20\x7a\x75\x20\x65\x69\x6e\x65\x6d\x20\x53\x70\x69\x6e\x6e\x65\x6e\x6e\x65\x73\x74", "\x45\x69\x6e\x65\x20\x53\x70\x69\x6e\x6e\x65\x20\x68\x61\x74\x20\x64\x69\x63\x68\x20\x67\x65\x74\xf6\x74\x65\x74\x2e\x20\x5a\x75\x6d\x69\x6e\x64\x65\x73\x74\x20\x77\x61\x72\x20\x65\x73\x20\x6b\x65\x69\x6e\x20\x48\x61\x73\x65\x2e"];
        DIE[6] = ["Dieser Wolf wird nicht mehr verhungern", "\x53\x69\x65\x20\x73\x69\x6e\x64\x20\x6b\x65\x69\x6e\x65\x20\x48\x75\x6e\x64\x65\x2e\x20\x57\xf6\x6c\x66\x65\x20\x6d\xf6\x67\x65\x6e\x20\x65\x73\x20\x6e\x69\x63\x68\x74\x20\x67\x65\x73\x74\x72\x65\x69\x63\x68\x65\x6c\x74\x20\x7a\x75\x20\x77\x65\x72\x64\x65\x6e\x2e"];
        DIE[7] = ["\x44\x65\x72\x20\x46\x75\x63\x68\x73\x20\x77\x61\x72\x20\x7a\x75\x20\x73\x63\x68\x6e\x65\x6c\x6c\x20\x66\xfc\x72\x20\x64\x69\x63\x68", "\x44\x65\x72\x20\x46\x75\x63\x68\x73\x20\x68\x61\x74\x20\x64\x69\x63\x68\x20\x69\x6e\x20\x65\x69\x6e\x65\x20\x42\x6f\x78\x20\x76\x65\x72\x77\x61\x6e\x64\x65\x6c\x74\x2e\x20\x53\x65\x69\x74\x20\x77\x61\x6e\x6e\x20\x68\x61\x62\x65\x6e\x20\x54\x69\x65\x72\x65\x20\x6d\x61\x67\x69\x73\x63\x68\x65\x20\x4b\x72\xe4\x66\x74\x65\x3f"];
        DIE[8] = ["\x44\x65\x72\x20\x42\xe4\x72\x20\x77\x6f\x6c\x6c\x74\x65\x20\x6e\x75\x72\x20\x65\x69\x6e\x65\x20\x55\x6d\x61\x72\x6d\x75\x6e\x67\x2e", "\x44\x65\x72\x20\x42\xe4\x72\x20\x77\x61\x72\x20\x7a\x75\x20\x76\x69\x65\x6c\x20\x7a\x75\x20\x65\x72\x74\x72\x61\x67\x65\x6e\x2e\x20\x45\x73\x20\x74\x75\x74\x20\x6d\x69\x72\x20\x6e\x69\x63\x68\x74\x20\x6c\x65\x69\x64\x2e"];
        DIE[9] = ["Du wurdest von einem Drachen knusprig gebraten. Zu schade.", "\x44\x75\x20\x77\x75\x72\x64\x65\x73\x74\x20\x76\x6f\x6e\x20\x65\x69\x6e\x65\x6d\x20\x44\x72\x61\x63\x68\x65\x6e\x20\x65\x72\x64\x72\xfc\x63\x6b\x74\x2e\x20\x5a\x65\x72\x71\x75\x65\x74\x73\x63\x68\x74\x20\x7a\x75\x20\x77\x65\x72\x64\x65\x6e\x20\x69\x73\x74\x20\x65\x69\x6e\x20\x73\x63\x68\x72\x65\x63\x6b\x6c\x69\x63\x68\x65\x72\x20\x57\x65\x67\x20\x7a\x75\x20\x73\x74\x65\x72\x62\x65\x6e\x2e"];
        DIE[10] = ["Du bist in eine Stachelwand gesprungen. Keine gute Idee...", "\x44\x75\x20\x77\x75\x72\x64\x65\x73\x74\x20\x76\x6f\x6e\x20\x65\x69\x6e\x65\x72\x20\x53\x74\x61\x63\x68\x65\x6c\x77\x61\x6e\x64\x20\x67\x65\x74\xf6\x74\x65\x74\x2e\x20\x44\x69\x65\x20\x6d\x65\x69\x73\x74\x65\x6e\x20\x4c\x65\x75\x74\x65\x20\x73\x69\x6e\x64\x20\x73\x65\x6e\x73\x69\x62\x65\x6c\x20\x67\x65\x6e\x75\x67\x20\x6b\x65\x69\x6e\x65\x20\x73\x70\x69\x74\x7a\x65\x6e\x20\x53\x61\x63\x68\x65\x6e\x20\x61\x6e\x7a\x75\x66\x61\x73\x73\x65\x6e\x2e"];
        DIE[11] = ["\x53\x6f\x67\x61\x72\x20\x47\x65\x69\x73\x74\x65\x72\x20\x6b\xf6\x6e\x6e\x65\x6e\x20\x73\x74\x65\x72\x62\x65\x6e\x2e", "Du hast es nicht geschafft wiederbelebt zu werden. Das ist ein Spiel, also lebst du nachdem du stirbst..."];
        DIE[12] = ["\x45\x69\x6e\x20\x42\x61\x6b\x74\x65\x72\x69\x75\x6d\x20\x76\x6f\x6e\x20\x64\x65\x69\x6e\x65\x6d\x20\x72\x6f\x68\x65\x6e\x20\x46\x6c\x65\x69\x73\x63\x68\x20\x68\x61\x74\x20\x64\x69\x63\x68\x20\x67\x65\x74\xf6\x74\x65\x74\x2e\x20\x44\x61\x73\x20\x53\x70\x69\x65\x6c\x20\x69\x73\x74\x20\x64\x65\x66\x69\x6e\x69\x74\x69\x76\x20\x7a\x75\x20\x73\x63\x68\x77\x69\x65\x72\x69\x67\x2e", "\x44\x75\x20\x68\x61\x73\x74\x20\x64\x61\x73\x20\x72\x6f\x68\x65\x20\x46\x6c\x65\x69\x73\x63\x68\x20\x67\x65\x74\xf6\x74\x65\x74\x2e\x20\x45\x73\x20\x68\x61\x74\x20\x64\x69\x63\x68\x20\x65\x62\x65\x6e\x66\x61\x6c\x6c\x73\x20\x67\x65\x74\xf6\x74\x65\x74\x2e"];
        DIE[13] = ["Du bist verdurstet. Solltest lieber deinen eigenen Urin trinken."];
        DIE[14] = ["\x57\x75\x73\x73\x74\x65\x73\x74\x20\x64\x75\x2c\x20\x64\x61\x73\x73\x20\x64\x65\x69\x6e\x20\x4d\x75\x6e\x64\x20\x62\x65\x69\x6d\x20\x53\x63\x68\x77\x69\x6d\x6d\x65\x6e\x20\x69\x6d\x6d\x65\x72\x20\x75\x6e\x74\x65\x72\x6d\x20\x57\x61\x73\x73\x65\x72\x20\x69\x73\x74\x3f\x20\x4a\x65\x74\x7a\x74\x20\x77\x65\x69\xdf\x74\x20\x64\x75\x20\x65\x73\x2e"];
        DIE[15] = ["Mach dir keine Sorge, der Piranha findet dich lecker.", "Nebenbei: Piranhas essen Menschen. Dich mit eingeschlossen."];
        DIE[16] = ["\x4c\x61\x70\x61\x4d\x61\x75\x76\x65\x20\x70\x6c\x61\x6e\x74\x20\x6e\x69\x63\x68\x74\x2c\x20\x64\x61\x73\x73\x20\x64\x75\x20\x64\x65\x6e\x20\x4b\x72\x61\x6b\x65\x6e\x20\x74\xf6\x74\x65\x6e\x20\x6b\x61\x6e\x6e\x73\x74", "\x45\x69\x6e\x20\x4b\x72\x61\x6b\x65\x6e\x20\x68\x61\x74\x20\x64\x65\x69\x6e\x65\x6e\x20\x53\x63\x68\xe4\x64\x65\x6c\x20\x7a\x65\x72\x74\x72\xfc\x6d\x6d\x65\x72\x74\x2e"];
        DIE[17] = ["\x44\x65\x69\x6e\x65\x20\x48\x61\x75\x74\x20\x66\xe4\x6c\x6c\x74\x20\x61\x75\x73\x65\x69\x6e\x61\x6e\x64\x65\x72\x2c\x20\x64\x69\x65\x20\x53\x6f\x6e\x6e\x65\x20\x68\x61\x74\x20\x64\x69\x63\x68\x20\x75\x6d\x67\x65\x62\x72\x61\x63\x68\x74\x2e"];
        DIE[18] = ["Knoblauch in deiner Tasche hat dein Gehirn gebraten "];
        DIE[19] = ["Stehe als ein Vampir nicht neben den Knoblauchnelken."];
        DIE[20] = ["Du hast als ein Vampir Knoblauch gegessen, was hast du erwartet?"];
        DIE[21] = ["\x44\x65\x69\x6e\x20\x4b\xf6\x72\x70\x65\x72\x20\x69\x73\x74\x20\x76\x6f\x6e\x20\x65\x69\x6e\x65\x6d\x20\x44\x6f\x72\x6e\x65\x6e\x62\x75\x73\x63\x68\x20\x75\x6d\x67\x65\x62\x65\x6e\x2e\x57\xe4\x68\x72\x65\x6e\x64\x20\x64\x75\x20\x76\x65\x72\x73\x75\x63\x68\x73\x74\x20\x7a\x75\x20\x65\x6e\x74\x6b\x6f\x6d\x6d\x65\x6e\x20\x6c\xf6\x73\x74\x20\x73\x69\x63\x68\x20\x64\x65\x69\x6e\x65\x20\x48\x61\x75\x74\x20\x76\x6f\x6e\x20\x64\x65\x69\x6e\x65\x6d\x20\x4b\xf6\x72\x70\x65\x72\x20\x75\x6e\x64\x20\x64\x65\x69\x6e\x20\x48\x65\x72\x7a\x20\x68\xf6\x72\x74\x20\x61\x75\x66\x20\x7a\x75\x20\x73\x63\x68\x6c\x61\x67\x65\x6e\x2e"];
        ZOMBIE_GRUMBLE = "Uuunnnggg";
        ZOMBIE_GRUMBLES = ["Uuunnnggg...Ich verhungere...", "Brauche dein Gehirn... Uuunnnggg...", "Hier gibt es frisches Fleisch... Uuunnnggg", "Uuunnnggg...Du bist lecker", "Uuunnnggg...", "Essen... uuunnnggg...", "Ich rieche Blut... Uuunnnggg"];
    };
    var set_french = function () {
        LANG[INV.DRAGON_CUBE] = ["You feel a great power emanating from this orb"];
        DIE[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        LANG[INV.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        LANG[TEXT.BACK_TO_THE_GAME] = " RETOUR AU JEU";
        LANG[TEXT.TWITTER] = " Partage sur Twitter";
        LANG[TEXT.FACEBOOK] = " Partage sur Facebook";
        LANG[TEXT.KIT_NEXT] = "\x54\x75\x20\x70\x65\x75\x78\x20\x61\x63\x68\x65\x74\x65\x72\x20\x64\x65\x73\x20\x6f\x62\x6a\x65\x74\x73\x20\x64\x61\x6e\x73\x20\x6c\x65\x20\x6d\x61\x67\x61\x73\x69\x6e\x20\xe0\x20\x74\x61\x20\x70\x72\x6f\x63\x68\x61\x69\x6e\x65\x20\x70\x61\x72\x74\x69\x65\x20\x61\x76\x65\x63\x20\x74\x65\x73\x20\x70\x6f\x69\x6e\x74\x73";
        LANG[TEXT.POINTS] = "points";
        LANG[TEXT.SCORE] = "Score";
        LANG[TEXT.KILL] = "\x54\x75\xe9\x73";
        LANG[TEXT.DAYS_SURVIVED] = "\x4a\x6f\x75\x72\x73\x20\x73\x75\x72\x76\xe9\x63\x75\x73";
        LANG[TEXT.MODE_FREE] = "Mode de construction: Libre. Appuie sur G pour changer";
        LANG[TEXT.MODE_GRID] = "Mode de construction: Grille. Appuie sur G pour changer";
        LANG[INV.CRAB_LOOT] = ["Pince de crabe", "\x4c\x65\x73\x20\x70\x69\x6e\x63\x65\x73\x20\x64\x65\x20\x63\x72\x61\x62\x65\x73\x20\x70\x65\x75\x76\x65\x6e\x74\x20\x61\x75\x73\x73\x69\x20\xea\x74\x72\x65\x20\x6d\x61\x6e\x67\xe9\x65\x73", "Food: 10"];
        LANG[INV.CRAB_SPEAR] = ["Lance en crabe", "Te permet de soigner les crabes et de les calmer", "\x44\x6f\x6e\x6e\x65\x20\x75\x6e\x20\x62\x6f\x6e\x75\x73\x20\x64\x65\x20\x2b\x31\x30\x20\x64\x65\x67\x61\x74\x73\x20\x71\x75\x61\x6e\x64\x20\x65\x6c\x6c\x65\x20\x65\x73\x74\x20\x70\x6f\x72\x74\xe9\x65", "avec un casque un crabe sur un Crab King", "Damage: 14", "Building Damage: 4"];
        LANG[INV.CROWN_CRAB] = ["Casque en crabe", "Tu es le Roi des Crabes!", "Les crabes te suivent", "Ils ne peuvent pas te frapper et toi non plus", "Players Defense: 4", "Animals Defense: 13"];
        LANG[INV.BED] = ["Lit", "Repose-toi dans ce lit douillet", "Tu as moins froid, moins faim et moins soif", "\x54\x75\x20\x74\x65\x20\x72\xe9\x67\xe9\x6e\xe8\x72\x65\x73\x20\x70\x6c\x75\x73\x20\x76\x69\x74\x65", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "\x43\x68\x72\x6f\x6e\x6f\x20\x51\x75\xea\x74\x65\x73";
        document.getElementById("timeremainingquest").innerHTML = "Temps Restant";
        document.getElementById("constraintquest").innerHTML = " Contraintes";
        document.getElementById("claim_rewards").innerHTML = "\x20\x52\xe9\x73\x75\x6c\x74\x61\x74";
        document.getElementById("rewardquest").innerHTML = "\x20\x52\xe9\x63\x6f\x6d\x70\x65\x6e\x73\x65\x73";
        document.getElementById("killdragon_1").innerHTML = " Collecte 1 Cœur de dragon dans la cave";
        document.getElementById("amethyst_2").innerHTML = "\x20\x52\xe9\x63\x6f\x6c\x74\x65\x20\x31\x20\x61\x6d\xe9\x74\x68\x79\x73\x74\x65";
        document.getElementById("survive20min_3").innerHTML = "Survis sans perdre de vie";
        document.getElementById("treasure_chest_4").innerHTML = "\x20\x4f\x75\x76\x72\x65\x20\x35\x20\x63\x6f\x66\x66\x72\x65\x73\x20\x61\x75\x20\x74\x72\xe9\x73\x6f\x72";
        document.getElementById("dont_hit_5").innerHTML = " Sois pacifique";
        document.getElementById("bread_6").innerHTML = "\x20\x43\x75\x69\x73\x69\x6e\x65\x20\x31\x30\x30\x20\x70\x61\x69\x6e\x73\x20\x65\x6e\x20\x68\x69\x76\x65\x72\x2c\x20\x73\x65\x75\x6c\x20\x65\x74\x20\x73\x61\x6e\x73\x20\x72\x65\x74\x6f\x75\x72\x20\x65\x6e\x20\x61\x72\x72\x69\xe8\x72\x65";
        document.getElementById("winter_7").innerHTML = "\x20\x41\x70\x72\xe8\x73\x20\x31\x20\x6a\x6f\x75\x72\x2c\x20\x73\x75\x72\x76\x69\x73\x20\x65\x6e\x20\x68\x69\x76\x65\x72";
        for (var i = 0; i < 7; i++)
            document.getElementById("claim_reward_" + i).innerHTML = "\x52\xc9\x43\x4f\x4d\x50\x45\x4e\x53\x45\x21";
        document.getElementById("quit_chronoquest").innerHTML = " QUITTER";
        LANG[INV.HAND] = ["Main"];
        LANG[INV.GROUND] = ["Terre", "C\'est sale!"];
        LANG[INV.SAND] = ["Sable", "J\'en ai dans les yeux"];
        LANG[INV.WOOD] = ["Bois", "Tu n\'en auras jamais trop!"];
        LANG[INV.STONE] = ["Pierre", "\x41\x75\x73\x73\x69\x20\x61\x70\x70\x65\x6c\xe9\x65\x20\x72\x6f\x63\x68\x65"];
        LANG[INV.GOLD] = ["Or", "\x53\x6f\x69\x73\x20\x67\xe9\x6e\xe9\x72\x65\x75\x78\x2c\x20\x64\x6f\x6e\x6e\x65\x20\x65\x6e\x20\x61\x75\x78\x20\x61\x75\x74\x72\x65\x73"];
        LANG[INV.DIAMOND] = ["Diamant", "Comme tes yeux! wesh"];
        LANG[INV.AMETHYST] = ["\x41\x6d\xe9\x74\x68\x79\x73\x74\x65", "C\'est Mauve comme Lapa"];
        LANG[INV.FLOUR] = ["Farine", "Utile pour la cuisine"];
        LANG[INV.COOKIE] = ["Cookie", "\x55\x6e\x20\x73\x6f\x6d\x70\x74\x75\x65\x75\x78\x20\x63\x6f\x6f\x6b\x69\x65\x20\x64\x65\x20\x47\x72\x61\x6e\x64\x2d\x4d\xe8\x72\x65", "Nourriture: 50"];
        LANG[INV.CAKE] = ["\x47\xe2\x74\x65\x61\x75", "Pour les fins gourmets", "Nourriture: 100"];
        LANG[INV.MEAT] = ["Viande crue", "Tu peux la cuisiner avec du feu", "Intoxication: 10", "Nourriture: 15"];
        LANG[INV.COOKED_MEAT] = ["Viande cuite", "Un steak saignant, s\'il vous plait", "Nourriture: 35"];
        LANG[INV.FOODFISH] = ["Poisson cru", "Je crois que c\'est encore vivant", "Intoxication: 10", "Nourriture: 18"];
        LANG[INV.FOODFISH_COOKED] = ["Poisson cuit", "Avec du citron, c\'est parfait", "Nourriture: 35"];
        LANG[INV.BREAD] = ["Baguette", "Une tradition s\'il vous plait", "\x43\x27\x65\x73\x74\x20\x6c\x61\x20\x6d\x6f\x6e\x6e\x61\x69\x65\x20\x64\x75\x20\x6d\x61\x72\x63\x68\xe9", "Nourriture: 15"];
        LANG[INV.SANDWICH] = ["Sandwich", "Le Jambon Beurre vaincra", "Nourriture: 100"];
        LANG[INV.CANDY] = ["Bonbons", "Il n\'y a pas de dentiste ici", "Nourriture: 100"];
        LANG[INV.SUGAR_CAN] = ["\x43\x61\x6e\x6e\x65\x20\xe0\x20\x73\x75\x63\x72\x65", "Sans sucre de canne", "Nourriture: 20"];
        LANG[INV.GARLAND] = ["Guirlandes", "Utilisable sur les toits"];
        LANG[INV.SEED] = ["Graines de baies", "Deviennent des baies", "Naissance: 2min", "Croissance: 55s", "Arrosage: 3min 20s", "\x44\x75\x72\x61\x62\x69\x6c\x69\x74\xe9\x3a\x20\x37\x30\x30", "\x44\x75\x72\xe9\x65\x20\x64\x65\x20\x76\x69\x65\x3a\x20\x38\x20\x6a\x6f\x75\x72\x73"];
        LANG[INV.PLANT] = ["Baies", "Peu nourrissant", "Nourriture: 10"];
        LANG[INV.WHEAT_SEED] = ["\x47\x72\x61\x69\x6e\x65\x73\x20\x64\x65\x20\x62\x6c\xe9", "\x44\x65\x76\x69\x65\x6e\x6e\x65\x6e\x74\x20\x64\x75\x20\x62\x6c\xe9", "Naissance: 2min", "Croissance: 16s", "Arrosage: 2min", "\x44\x75\x72\x61\x62\x69\x6c\x69\x74\xe9\x3a\x20\x37\x30\x30", "\x44\x75\x72\xe9\x65\x20\x64\x65\x20\x76\x69\x65\x3a\x20\x38\x20\x6a\x6f\x75\x72\x73"];
        LANG[INV.WILD_WHEAT] = ["\x42\x6c\xe9", "\x50\x65\x75\x74\x20\xea\x74\x72\x65\x20\x74\x72\x61\x6e\x73\x66\x6f\x72\x6d\xe9\x20\x65\x6e\x20\x66\x61\x72\x69\x6e\x65\x20\x64\x61\x6e\x73\x20\x6c\x65\x73\x20\x6d\x6f\x75\x6c\x69\x6e\x73"];
        LANG[INV.PUMPKIN_SEED] = ["Graines de citrouille", "Deviennent des citrouilles", "Naissance: 2min 40s", "Croissance: 2min", "Arrosage: 2min", "\x44\x75\x72\x61\x62\x69\x6c\x69\x74\xe9\x3a\x20\x37\x30\x30", "\x44\x75\x72\xe9\x65\x20\x64\x65\x20\x76\x69\x65\x3a\x20\x38\x20\x6a\x6f\x75\x72\x73"];
        LANG[INV.PUMPKIN] = ["Citrouille", "\xc7\x61\x20\x6d\x65\x20\x72\x61\x70\x70\x65\x6c\x6c\x65\x20\x48\x61\x6c\x6c\x6f\x77\x65\x65\x6e", "Nourriture: 30"];
        LANG[INV.GARLIC_SEED] = ["Graines d\'ail", "\x54\x72\xe8\x73\x20\x64\x61\x6e\x67\x65\x72\x65\x75\x78\x20\x70\x6f\x75\x72\x20\x6c\x65\x73\x20\x76\x61\x6d\x70\x69\x72\x65\x73", "\x44\xe9\x67\xe2\x74\x73\x3a\x20\x32\x30", "Naissance: 4min", "Croissance: 1min 10s", "Arrosage: 1min 40s", "\x44\x75\x72\x61\x62\x69\x6c\x69\x74\xe9\x3a\x20\x37\x30\x30", "\x44\x75\x72\xe9\x65\x20\x64\x65\x20\x76\x69\x65\x3a\x20\x38\x20\x6a\x6f\x75\x72\x73"];
        LANG[INV.GARLIC] = ["Ail", "\x53\x6f\x69\x67\x6e\x65\x20\x65\x74\x20\x72\xe9\x64\x75\x69\x74\x20\x6c\x65\x20\x66\x72\x6f\x69\x64", "Nourriture: 14", "Soigne sur le temps: 30", "Effet: 1 fois"];
        LANG[INV.THORNBUSH_SEED] = ["Graines de ronces", "Peuvent blesser vos ennemis", "\x44\xe9\x67\xe2\x74\x73\x3a\x20\x32\x30", "Naissance: 4min", "Croissance: 15s", "Arrosage: 3min", "\x44\x75\x72\x61\x62\x69\x6c\x69\x74\xe9\x3a\x20\x31\x30\x30\x30", "\x44\x75\x72\xe9\x65\x20\x64\x65\x20\x76\x69\x65\x3a\x20\x38\x20\x6a\x6f\x75\x72\x73"];
        LANG[INV.THORNBUSH] = ["Ronces", "\xc7\x61\x20\x70\x69\x71\x75\x65\x21"];
        LANG[INV.PLOT] = ["Terreau", "Indispensable", "Vos plantes grandiront plus vite", "et auront besoin de moins d\'eau", "\x44\x75\x72\x61\x62\x69\x6c\x69\x74\xe9\x3a\x20\x32\x30\x30\x30"];
        LANG[INV.ICE] = ["Glace", "\x50\x72\x61\x74\x69\x71\x75\x65\x20\x70\x6f\x75\x72\x20\x66\x61\x69\x72\x65\x20\x64\x65\x20\x6c\x27\x65\x61\x75\x20\x65\x74\x20\x64\x65\x73\x20\x67\xe2\x74\x65\x61\x75\x78"];
        LANG[INV.SPANNER] = ["\x43\x6c\xe9\x20\xe0\x20\x6d\x6f\x6c\x65\x74\x74\x65", "\x50\x6f\x75\x72\x20\x72\xe9\x70\x61\x72\x65\x72\x20\x6c\x65\x73\x20\x70\x6f\x72\x74\x65\x73\x2c\x20\x6c\x65\x73\x20\x6d\x75\x72\x73\x20\x65\x74\x20\x6c\x65\x73\x20\x70\x69\x71\x75\x65\x73", "\x44\xe9\x67\xe2\x74\x73\x3a\x20\x32"];
        LANG[INV.FUR_WOLF] = ["Peau de loup", "\x49\x6c\x20\xe9\x74\x61\x69\x74\x20\x6f\xf9\x20\x6c\x65\x20\x67\x65\x6e\x74\x69\x6c\x20\x74\x69\x20\x59\x6f\x75\x6b\x69\x3f"];
        LANG[INV.FUR] = ["Peau de lapin", "\x56\x6f\x75\x73\x20\xea\x74\x65\x73\x20\x75\x6e\x20\x6d\x6f\x6e\x73\x74\x72\x65"];
        LANG[INV.SPECIAL_FUR] = ["Fourrure blanche", "\x54\x75\x20\x65\x73\x20\x75\x6e\x65\x20\x75\x73\x69\x6e\x65\x20\xe0\x20\x70\x61\x69\x6e"];
        LANG[INV.SPECIAL_FUR_2] = ["Fourrure noire", "\x54\x75\x20\x74\x65\x20\x73\x65\x6e\x73\x20\x70\x72\xea\x74\x20\xe0\x20\x66\x61\x69\x72\x65\x20\x71\x75\x65\x6c\x71\x75\x65\x20\x63\x68\x6f\x73\x65\x20\x64\x65\x20\x6d\x61\x6c"];
        LANG[INV.FUR_WINTER] = ["Fourrure d\'hiver", "Il voulait juste un calin"];
        LANG[INV.SCALES] = ["\xc9\x63\x61\x69\x6c\x6c\x65\x73", "\xc7\x61\x20\x73\x65\x6e\x74\x20\x6c\x65\x20\x70\x6f\x69\x73\x73\x6f\x6e\x21"];
        LANG[INV.KRAKEN_SKIN] = ["Peau du kraken", "Tu n\'as pas eu trop peur?"];
        LANG[INV.FIRE] = ["Feu de camp", "\x52\xe9\x63\x68\x61\x75\x66\x66\x65", "\x44\x75\x72\x61\x62\x69\x6c\x69\x74\xe9\x3a\x20\x31\x35\x30", "\x44\x75\x72\xe9\x65\x20\x64\x65\x20\x76\x69\x65\x3a\x20\x32\x6d\x69\x6e"];
        LANG[INV.BIG_FIRE] = ["Grand feu de camp", "\x52\xe9\x63\x68\x61\x75\x66\x66\x65\x20\x70\x6c\x75\x73\x20\x6c\x6f\x6e\x67\x74\x65\x6d\x70\x73", "\x44\x75\x72\x61\x62\x69\x6c\x69\x74\xe9\x3a\x20\x34\x30\x30", "\x44\x75\x72\xe9\x65\x20\x64\x65\x20\x76\x69\x65\x3a\x20\x36\x6d\x69\x6e"];
        LANG[INV.WORKBENCH] = ["\xc9\x74\x61\x62\x6c\x69", "Utile pour fabriquer toute sorte d\'objets"];
        LANG[INV.CORD] = ["Fil", "Utile pour faire des chapeaux et un sac"];
        LANG[INV.BLUE_CORD] = ["Fil de diamant", "Utile pour faire des chapeaux"];
        LANG[INV.CHEST] = ["Coffre", "Permet de ranger des objets", "\x44\x75\x72\x61\x62\x69\x6c\x69\x74\xe9\x3a\x20\x35\x30\x30"];
        LANG[INV.SWORD_WOOD] = ["\xc9\x70\xe9\x65\x20\x65\x6e\x20\x62\x6f\x69\x73", "C\'est pour les enfants", "\x44\xe9\x67\xe2\x74\x73\x3a\x20\x31\x32", "\x44\xe9\x6d\x6f\x6c\x69\x74\x69\x6f\x6e\x3a\x20\x34"];
        LANG[INV.SWORD] = ["\xc9\x70\xe9\x65\x20\x65\x6e\x20\x70\x69\x65\x72\x72\x65", "Sois gentil avec les autres", "\x44\xe9\x67\xe2\x74\x73\x3a\x20\x31\x39", "\x44\xe9\x6d\x6f\x6c\x69\x74\x69\x6f\x6e\x3a\x20\x36"];
        LANG[INV.SWORD_GOLD] = ["\xc9\x70\xe9\x65\x20\x65\x6e\x20\x6f\x72", "\x52\x6f\x69\x20\x64\x65\x20\x6c\x61\x20\x66\x6f\x72\xea\x74", "\x44\xe9\x67\xe2\x74\x73\x3a\x20\x32\x32", "\x44\xe9\x6d\x6f\x6c\x69\x74\x69\x6f\x6e\x3a\x20\x37"];
        LANG[INV.SWORD_DIAMOND] = ["\xc9\x70\xe9\x65\x20\x65\x6e\x20\x64\x69\x61\x6d\x61\x6e\x74", "Tu te sens puissant", "\x44\xe9\x67\xe2\x74\x73\x3a\x20\x32\x34", "\x44\xe9\x6d\x6f\x6c\x69\x74\x69\x6f\x6e\x3a\x20\x38"];
        LANG[INV.PIRATE_SWORD] = ["\xc9\x70\xe9\x65\x20\x64\x65\x20\x70\x69\x72\x61\x74\x65", "Marin d\'eau douce!", "\x4d\x65\x69\x6c\x6c\x65\x75\x72\x65\x20\x70\x6f\x72\x74\xe9\x65\x20\x71\x75\x27\x75\x6e\x65\x20\xe9\x70\xe9\x65\x20\x6e\x6f\x72\x6d\x61\x6c\x65", "\x44\xe9\x67\xe2\x74\x73\x3a\x20\x32\x34", "\x44\xe9\x6d\x6f\x6c\x69\x74\x69\x6f\x6e\x3a\x20\x38"];
        LANG[INV.SWORD_AMETHYST] = ["\xc9\x70\xe9\x65\x20\x65\x6e\x20\x61\x6d\xe9\x74\x68\x79\x73\x74\x65", "Mauve est la plus belle couleur du monde", "\x44\xe9\x67\xe2\x74\x73\x3a\x20\x32\x37", "\x44\xe9\x6d\x6f\x6c\x69\x74\x69\x6f\x6e\x3a\x20\x39"];
        LANG[INV.DRAGON_SWORD] = ["\xc9\x70\xe9\x65\x20\x64\x75\x20\x44\x72\x61\x67\x6f\x6e", "\x50\x61\x73\x20\x64\x65\x20\x70\x69\x74\x69\xe9\x21", "\x44\xe9\x67\xe2\x74\x73\x3a\x20\x33\x30", "\x44\xe9\x6d\x6f\x6c\x69\x74\x69\x6f\x6e\x3a\x20\x31\x30"];
        LANG[INV.DRAGON_SPEAR] = ["Lance du Dragon", "Tuez-les tous!", "\x44\xe9\x67\xe2\x74\x73\x3a\x20\x32\x32", "\x44\xe9\x6d\x6f\x6c\x69\x74\x69\x6f\x6e\x3a\x20\x36"];
        LANG[INV.PICK_WOOD] = ["Pioche en bois", "\x50\x65\x75\x74\x20\x72\xe9\x63\x6f\x6c\x74\x65\x72\x20\x64\x75\x20\x62\x6f\x69\x73\x20\x65\x74\x20\x64\x65\x20\x6c\x61\x20\x70\x69\x65\x72\x72\x65", "\x44\xe9\x67\xe2\x74\x73\x3a\x20\x31"];
        LANG[INV.PICK] = ["Pioche en pierre", "\x50\x65\x75\x74\x20\x61\x75\x73\x73\x69\x20\x72\xe9\x63\x6f\x6c\x74\x65\x72\x20\x64\x65\x20\x6c\x27\x6f\x72", "\x44\xe9\x67\xe2\x74\x73\x3a\x20\x32"];
        LANG[INV.PICK_GOLD] = ["Pioche en or", "\x50\x65\x75\x74\x20\x61\x75\x73\x73\x69\x20\x72\xe9\x63\x6f\x6c\x74\x65\x72\x20\x64\x75\x20\x64\x69\x61\x6d\x61\x6e\x74", "\x44\xe9\x67\xe2\x74\x73\x3a\x20\x33", "\x44\xe9\x6d\x6f\x6c\x69\x74\x69\x6f\x6e\x3a\x20\x31"];
        LANG[INV.PICK_DIAMOND] = ["Pioche en diamant", "\x50\x65\x75\x74\x20\x74\x6f\x75\x74\x20\x72\xe9\x63\x6f\x6c\x74\x65\x72", "\x44\xe9\x67\xe2\x74\x73\x3a\x20\x34", "\x44\xe9\x6d\x6f\x6c\x69\x74\x69\x6f\x6e\x3a\x20\x31"];
        LANG[INV.PICK_AMETHYST] = ["\x50\x69\x6f\x63\x68\x65\x20\x65\x6e\x20\x61\x6d\xe9\x74\x68\x79\x73\x74\x65", "\x50\x65\x75\x74\x20\x74\x6f\x75\x74\x20\x72\xe9\x63\x6f\x6c\x74\x65\x72", "\x44\xe9\x67\xe2\x74\x73\x3a\x20\x35", "\x44\xe9\x6d\x6f\x6c\x69\x74\x69\x6f\x6e\x3a\x20\x31"];
        LANG[INV.HAMMER] = ["Marteau en pierre", "\x55\x74\x69\x6c\x65\x20\x70\x6f\x75\x72\x20\x64\xe9\x74\x72\x75\x69\x72\x65\x20\x6c\x65\x73\x20\x62\xe2\x74\x69\x6d\x65\x6e\x74\x73", "\x4e\x65\x20\x6d\x61\x72\x63\x68\x65\x20\x70\x61\x73\x20\x62\x69\x65\x6e\x20\x73\x75\x72\x20\x64\x75\x20\x64\x69\x61\x6d\x61\x6e\x74\x20\x65\x74\x20\x61\x6d\xe9\x74\x68\x79\x73\x74\x65", "\x44\xe9\x67\xe2\x74\x73\x3a\x20\x32", "\x44\xe9\x6d\x6f\x6c\x69\x74\x69\x6f\x6e\x3a\x20\x32\x30"];
        LANG[INV.HAMMER_GOLD] = ["Marteau en or", "\x55\x74\x69\x6c\x65\x20\x70\x6f\x75\x72\x20\x64\xe9\x74\x72\x75\x69\x72\x65\x20\x6c\x65\x73\x20\x62\xe2\x74\x69\x6d\x65\x6e\x74\x73", "\x4e\x65\x20\x6d\x61\x72\x63\x68\x65\x20\x70\x61\x73\x20\x62\x69\x65\x6e\x20\x73\x75\x72\x20\x6c\x27\x61\x6d\xe9\x74\x68\x79\x73\x74\x65", "\x44\xe9\x67\xe2\x74\x73\x3a\x20\x33", "\x44\xe9\x6d\x6f\x6c\x69\x74\x69\x6f\x6e\x3a\x20\x33\x30"];
        LANG[INV.HAMMER_DIAMOND] = ["Marteau en diamant", "\x55\x74\x69\x6c\x65\x20\x70\x6f\x75\x72\x20\x64\xe9\x74\x72\x75\x69\x72\x65\x20\x6c\x65\x73\x20\x62\xe2\x74\x69\x6d\x65\x6e\x74\x73", "\x44\xe9\x67\xe2\x74\x73\x3a\x20\x34", "\x44\xe9\x6d\x6f\x6c\x69\x74\x69\x6f\x6e\x3a\x20\x34\x30"];
        LANG[INV.HAMMER_AMETHYST] = ["\x4d\x61\x72\x74\x65\x61\x75\x20\x65\x6e\x20\x61\x6d\xe9\x74\x68\x79\x73\x74\x65", "\x55\x74\x69\x6c\x65\x20\x70\x6f\x75\x72\x20\x64\xe9\x74\x72\x75\x69\x72\x65\x20\x6c\x65\x73\x20\x62\xe2\x74\x69\x6d\x65\x6e\x74\x73", "\x44\xe9\x67\xe2\x74\x73\x3a\x20\x35", "\x44\xe9\x6d\x6f\x6c\x69\x74\x69\x6f\x6e\x3a\x20\x35\x30"];
        LANG[INV.SUPER_HAMMER] = ["Super Marteau", "\x41\x73\x2d\x74\x75\x20\x70\x72\xe9\x76\x75\x20\x64\x65\x20\x64\xe9\x74\x72\x75\x69\x72\x65\x20\x6c\x65\x20\x6d\x6f\x6e\x64\x65\x3f", "\x44\xe9\x67\xe2\x74\x73\x3a\x20\x31\x32", "\x44\xe9\x6d\x6f\x6c\x69\x74\x69\x6f\x6e\x3a\x20\x37\x30"];
        LANG[INV.WOOD_SPEAR] = ["Lance en bois", "Plus de peur que de mal", "\x44\xe9\x67\xe2\x74\x73\x3a\x20\x31\x30", "\x44\xe9\x6d\x6f\x6c\x69\x74\x69\x6f\x6e\x3a\x20\x32"];
        LANG[INV.SPEAR] = ["Lance en pierre", "\x43\x27\x65\x73\x74\x20\x6c\x65\x20\x64\xe9\x62\x75\x74\x20\x64\x65\x20\x6c\x27\xe9\x76\x6f\x6c\x75\x74\x69\x6f\x6e", "\x44\xe9\x67\xe2\x74\x73\x3a\x20\x31\x34", "\x44\xe9\x6d\x6f\x6c\x69\x74\x69\x6f\x6e\x3a\x20\x34"];
        LANG[INV.GOLD_SPEAR] = ["Lance en or", "\x41\x74\x74\x65\x6e\x74\x69\x6f\x6e\x2c\x20\xe7\x61\x20\x70\x69\x71\x75\x65\x21", "\x44\xe9\x67\xe2\x74\x73\x3a\x20\x31\x35", "\x42\x75\x69\x6c\x64\x69\x6e\x67\x73\x20\x44\xe9\x67\xe2\x74\x73\x3a\x20\x35"];
        LANG[INV.DIAMOND_SPEAR] = ["Lance en diamant", "\x54\x75\x20\x65\x73\x20\x70\x72\xea\x74\x20\xe0\x20\x74\x75\x65\x72\x20\x6c\x65\x73\x20\x64\x72\x61\x67\x6f\x6e\x73", "\x44\xe9\x67\xe2\x74\x73\x3a\x20\x31\x37", "\x42\x75\x69\x6c\x64\x69\x6e\x67\x73\x20\x44\xe9\x67\xe2\x74\x73\x3a\x20\x35"];
        LANG[INV.AMETHYST_SPEAR] = ["\x4c\x61\x6e\x63\x65\x20\x65\x6e\x20\x61\x6d\xe9\x74\x68\x79\x73\x74\x65", "Les dragons ne te font plus peur", "\x44\xe9\x67\xe2\x74\x73\x3a\x20\x31\x38", "\x42\x75\x69\x6c\x64\x69\x6e\x67\x73\x20\x44\xe9\x67\xe2\x74\x73\x3a\x20\x36"];
        LANG[INV.SHOVEL] = ["Pelle en pierre", "Creuse la terre, le sable et la neige", "\x50\x65\x75\x74\x20\x61\x75\x73\x73\x69\x20\x72\xe9\x63\x75\x70\xe9\x72\x65\x72\x20\x64\x65\x73\x20\x6d\x69\x6e\xe9\x72\x61\x75\x78", "\x44\xe9\x67\xe2\x74\x73\x3a\x20\x32"];
        LANG[INV.SHOVEL_GOLD] = ["Pelle en or", "Creuse la terre, le sable et la neige", "\x50\x65\x75\x74\x20\x61\x75\x73\x73\x69\x20\x72\xe9\x63\x75\x70\xe9\x72\x65\x72\x20\x64\x65\x73\x20\x6d\x69\x6e\xe9\x72\x61\x75\x78", "\x44\xe9\x67\xe2\x74\x73\x3a\x20\x33", "\x42\x75\x69\x6c\x64\x69\x6e\x67\x73\x20\x44\xe9\x67\xe2\x74\x73\x3a\x20\x31"];
        LANG[INV.SHOVEL_DIAMOND] = ["Pelle en diamant", "Creuse la terre, le sable et la neige", "\x50\x65\x75\x74\x20\x61\x75\x73\x73\x69\x20\x72\xe9\x63\x75\x70\xe9\x72\x65\x72\x20\x64\x65\x73\x20\x6d\x69\x6e\xe9\x72\x61\x75\x78", "\x44\xe9\x67\xe2\x74\x73\x3a\x20\x34", "\x42\x75\x69\x6c\x64\x69\x6e\x67\x73\x20\x44\xe9\x67\xe2\x74\x73\x3a\x20\x31"];
        LANG[INV.SHOVEL_AMETHYST] = ["\x50\x65\x6c\x6c\x65\x20\x65\x6e\x20\x61\x6d\xe9\x74\x68\x79\x73\x74\x65", "Creuse la terre, le sable et la neige", "\x50\x65\x75\x74\x20\x61\x75\x73\x73\x69\x20\x72\xe9\x63\x75\x70\xe9\x72\x65\x72\x20\x64\x65\x73\x20\x6d\x69\x6e\xe9\x72\x61\x75\x78", "\x44\xe9\x67\xe2\x74\x73\x3a\x20\x35", "\x42\x75\x69\x6c\x64\x69\x6e\x67\x73\x20\x44\xe9\x67\xe2\x74\x73\x3a\x20\x31"];
        LANG[INV.WOOD_HELMET] = ["Casque en bois", "Mieux que rien", "\x44\xe9\x66\x65\x6e\x73\x65\x3a\x20\x31", "\x44\xe9\x66\x65\x6e\x73\x65\x20\x63\x6f\x6e\x74\x72\x65\x20\x61\x6e\x69\x6d\x61\x75\x78\x3a\x20\x34"];
        LANG[INV.STONE_HELMET] = ["Casque en pierre", "\x50\x72\xea\x74\x20\x70\x6f\x75\x72\x20\x6c\x61\x20\x62\x61\x74\x61\x69\x6c\x6c\x65", "\x44\xe9\x66\x65\x6e\x73\x65\x3a\x20\x32", "\x44\xe9\x66\x65\x6e\x73\x65\x20\x63\x6f\x6e\x74\x72\x65\x20\x61\x6e\x69\x6d\x61\x75\x78\x3a\x20\x38"];
        LANG[INV.GOLD_HELMET] = ["Casque en or", "Alias le casque des sauvages", "\x44\xe9\x66\x65\x6e\x73\x65\x3a\x20\x34", "\x44\xe9\x66\x65\x6e\x73\x65\x20\x63\x6f\x6e\x74\x72\x65\x20\x61\x6e\x69\x6d\x61\x75\x78\x3a\x20\x31\x33"];
        LANG[INV.DIAMOND_HELMET] = ["Casque en diamant", "Ne te vante pas trop", "\x44\xe9\x66\x65\x6e\x73\x65\x3a\x20\x35", "\x44\xe9\x66\x65\x6e\x73\x65\x20\x63\x6f\x6e\x74\x72\x65\x20\x61\x6e\x69\x6d\x61\x75\x78\x3a\x20\x31\x39"];
        LANG[INV.AMETHYST_HELMET] = ["\x43\x61\x73\x71\x75\x65\x20\x65\x6e\x20\x61\x6d\xe9\x74\x68\x79\x73\x74\x65", "Tu n\'as plus peur de rien", "\x44\xe9\x66\x65\x6e\x73\x65\x3a\x20\x36", "\x44\xe9\x66\x65\x6e\x73\x65\x20\x63\x6f\x6e\x74\x72\x65\x20\x61\x6e\x69\x6d\x61\x75\x78\x3a\x20\x32\x33"];
        LANG[INV.DRAGON_HELMET] = ["Casque du Dragon", "\x54\x75\x20\x76\x61\x73\x20\x63\x6f\x6e\x71\x75\xe9\x72\x69\x72\x20\x6c\x65\x20\x6d\x6f\x6e\x64\x65", "\x44\xe9\x66\x65\x6e\x73\x65\x3a\x20\x38", "\x44\xe9\x66\x65\x6e\x73\x65\x20\x63\x6f\x6e\x74\x72\x65\x20\x61\x6e\x69\x6d\x61\x75\x78\x3a\x20\x32\x37"];
        LANG[INV.EXPLORER_HAT] = ["Chapeau d\'explorateur", "Les animaux t\'ignorent", "Mais ne faites pas de bruit!", "\x52\xe9\x63\x68\x61\x75\x66\x66\x65\x20\x65\x6e\x20\x64\x65\x68\x6f\x72\x73\x20\x64\x65\x20\x6c\x27\x65\x61\x75\x20\x65\x74\x20\x64\x61\x6e\x73\x20\x6c\x27\x68\x69\x76\x65\x72"];
        LANG[INV.CHRISTMAS_HAT] = ["\x43\x68\x61\x70\x65\x61\x75\x20\x64\x75\x20\x50\xe8\x72\x65\x20\x4e\x6f\xeb\x6c", "\x4f\x68\x2c\x20\x6f\x68\x2c\x20\x6f\x68\x2c\x20\x4a\x6f\x79\x65\x75\x78\x20\x4e\xf6\x65\x6c\x21", "\x52\xe9\x63\x68\x61\x75\x66\x66\x65\x20\x65\x6e\x20\x64\x65\x68\x6f\x72\x73\x20\x64\x65\x20\x6c\x27\x65\x61\x75\x20\x65\x74\x20\x64\x61\x6e\x73\x20\x6c\x27\x68\x69\x76\x65\x72"];
        LANG[INV.ELF_HAT] = ["\x43\x68\x61\x70\x65\x61\x75\x20\x64\x75\x20\x6c\x75\x74\x69\x6e\x20\x64\x65\x20\x4e\xf6\x65\x6c", "Tu as vu le nouveau chef d\'oeuvre d\'Alain Chabat?", "\x52\xe9\x63\x68\x61\x75\x66\x66\x65\x20\x65\x6e\x20\x64\x65\x68\x6f\x72\x73\x20\x64\x65\x20\x6c\x27\x65\x61\x75\x20\x65\x74\x20\x64\x61\x6e\x73\x20\x6c\x27\x68\x69\x76\x65\x72"];
        LANG[INV.HOOD] = ["Capuche", "Voyou!", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "\x33\x29\x20\x54\x75\x20\x6e\x27\x61\x73\x20\x70\x61\x73\x20\xe9\x74\xe9\x20\x74\x6f\x75\x63\x68\xe9\x20\x64\x65\x70\x75\x69\x73\x20\x38\x20\x73\x65\x63\x6f\x6e\x64\x65\x73", "4) Tu es loin d\'un feu", "5) Ta cible n\'est pas un paysan", "\x52\xe9\x63\x68\x61\x75\x66\x66\x65\x20\x65\x6e\x20\x64\x65\x68\x6f\x72\x73\x20\x64\x65\x20\x6c\x27\x65\x61\x75\x20\x65\x74\x20\x64\x61\x6e\x73\x20\x6c\x27\x68\x69\x76\x65\x72"];
        LANG[INV.EARMUFFS] = ["Cache-oreilles", "Une sorte de petite chapka.", "\x52\xe9\x63\x68\x61\x75\x66\x66\x65\x20\x65\x6e\x20\x64\x65\x68\x6f\x72\x73\x20\x64\x65\x20\x6c\x27\x65\x61\x75\x20\x65\x74\x20\x64\x61\x6e\x73\x20\x6c\x27\x68\x69\x76\x65\x72"];
        LANG[INV.COAT] = ["Chapka", "\x43\x6f\x6d\x6d\x65\x6e\x74\x20\xe7\x61\x20\x76\x61\x2c\x20\x63\x61\x6d\x61\x72\x61\x64\x65\x3f", "\x52\xe9\x63\x68\x61\x75\x66\x66\x65\x20\x65\x6e\x20\x64\x65\x68\x6f\x72\x73\x20\x64\x65\x20\x6c\x27\x65\x61\x75\x20\x65\x74\x20\x64\x61\x6e\x73\x20\x6c\x27\x68\x69\x76\x65\x72"];
        LANG[INV.CAP_SCARF] = ["Bonnet d\'hiver", "\x54\x72\xe8\x73\x20\x63\x6f\x6e\x66\x6f\x72\x74\x61\x62\x6c\x65", "\x54\x72\xe8\x73\x20\x63\x68\x61\x75\x64"];
        LANG[INV.PEASANT] = ["Tunique", "Les plantes poussent plus vite", "\x52\xe9\x63\x68\x61\x75\x66\x66\x65\x20\x65\x6e\x20\x64\x65\x68\x6f\x72\x73\x20\x64\x65\x20\x6c\x27\x65\x61\x75\x20\x65\x74\x20\x64\x61\x6e\x73\x20\x6c\x27\x68\x69\x76\x65\x72"];
        LANG[INV.WINTER_HOOD] = ["Capuche d\'hiver", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "\x33\x29\x20\x54\x75\x20\x6e\x27\x61\x73\x20\x70\x61\x73\x20\xe9\x74\xe9\x20\x74\x6f\x75\x63\x68\xe9\x20\x64\x65\x70\x75\x69\x73\x20\x34\x20\x73\x65\x63\x6f\x6e\x64\x65\x73", "4) Tu es loin d\'un feu", "5) Ta cible n\'est pas un paysan d\'hiver", "\x52\xe9\x63\x68\x61\x75\x66\x66\x65\x20\x65\x6e\x20\x64\x65\x68\x6f\x72\x73\x20\x64\x65\x20\x6c\x27\x65\x61\x75\x20\x65\x74\x20\x64\x61\x6e\x73\x20\x6c\x27\x68\x69\x76\x65\x72"];
        LANG[INV.WINTER_PEASANT] = ["Tunique d\'hiver", "Tes plantes poussent plus vite", "\x52\xe9\x63\x68\x61\x75\x66\x66\x65\x20\x65\x6e\x20\x64\x65\x68\x6f\x72\x73\x20\x64\x65\x20\x6c\x27\x65\x61\x75\x20\x65\x74\x20\x64\x61\x6e\x73\x20\x6c\x27\x68\x69\x76\x65\x72"];
        LANG[INV.DIVING_MASK] = ["\x4d\x61\x73\x71\x75\x65\x20\x64\x65\x20\x70\x6c\x6f\x6e\x67\xe9\x65", "Tu es rapide dans l\'eau", "\x52\xe9\x63\x68\x61\x75\x66\x66\x65\x20\x64\x61\x6e\x73\x20\x6c\x27\x65\x61\x75", "\x44\xe9\x66\x65\x6e\x73\x65\x3a\x20\x32\x2c\x20\x44\xe9\x66\x65\x6e\x73\x65\x20\x63\x6f\x6e\x74\x72\x65\x20\x61\x6e\x69\x6d\x61\x75\x78\x3a\x20\x38"];
        LANG[INV.SUPER_DIVING_SUIT] = ["Scaphandre", "\x54\x75\x20\x65\x73\x20\x74\x72\xe8\x73\x20\x72\x61\x70\x69\x64\x65\x20\x64\x61\x6e\x73\x20\x6c\x27\x65\x61\x75", "\x52\xe9\x63\x68\x61\x75\x66\x66\x65\x20\x64\x61\x6e\x73\x20\x6c\x27\x65\x61\x75", "\x44\xe9\x66\x65\x6e\x73\x65\x3a\x20\x34\x2c\x20\x44\xe9\x66\x65\x6e\x73\x65\x20\x63\x6f\x6e\x74\x72\x65\x20\x61\x6e\x69\x6d\x61\x75\x78\x3a\x20\x31\x36"];
        LANG[INV.DRAGON_ORB] = ["Orbe du Dragon", "\x44\x6f\x6e\x6e\xe9\x20\x65\x6e\x20\x51\x75\xea\x74\x65"];
        LANG[INV.DRAGON_HEART] = ["Coeur de Dragon", "\x54\x65\x20\x63\x68\x61\x6e\x67\x65\x20\x65\x6e\x20\x66\x61\x6e\x74\xf4\x6d\x65\x21", "\x54\x75\x20\x65\x73\x20\x75\x6e\x20\x66\x61\x6e\x74\xf4\x6d\x65\x20\x70\x65\x6e\x64\x61\x6e\x74\x20\x31\x20\x6d\x69\x6e", "\x54\x72\x6f\x75\x76\x65\x20\x75\x6e\x65\x20\x70\x69\x65\x72\x72\x65\x20\x64\x65\x20\x72\xe9\x73\x75\x72\x72\x65\x63\x74\x69\x6f\x6e"];
        LANG[INV.GEMME_GREEN] = ["Gemme verte", "\x54\x75\x20\x6e\x27\x61\x73\x20\x70\x61\x73\x20\x74\x72\x69\x63\x68\xe9\x2c\x20\x70\x72\x6f\x6d\x69\x73\x3f"];
        LANG[INV.GEMME_ORANGE] = ["Gemme orange", "Seul un vrai pirate peut l\'obtenir!"];
        LANG[INV.GEMME_BLUE] = ["Gemme bleue", "Pour les gens trop gentils"];
        LANG[INV.CROWN_GREEN] = ["Couronne verte", "\x54\x65\x20\x73\x6f\x69\x67\x6e\x65\x20\x74\x72\xe8\x73\x20\x72\x61\x70\x69\x64\x65\x6d\x65\x6e\x74", "Soigne sur le temps: 40", "\x44\xe9\x66\x65\x6e\x73\x65\x3a\x20\x34\x2c\x20\x44\xe9\x66\x65\x6e\x73\x65\x20\x63\x6f\x6e\x74\x72\x65\x20\x61\x6e\x69\x6d\x61\x75\x78\x3a\x20\x31\x36"];
        LANG[INV.CROWN_ORANGE] = ["Couronne orange", "\x54\x75\x20\x74\x65\x20\x73\x65\x6e\x73\x20\x73\x6f\x75\x64\x61\x69\x6e\x65\x6d\x65\x6e\x74\x20\x74\x72\xe8\x73\x20\x63\x68\x61\x6e\x63\x65\x75\x78", "\x44\xe9\x66\x65\x6e\x73\x65\x3a\x20\x34\x2c\x20\x44\xe9\x66\x65\x6e\x73\x65\x20\x63\x6f\x6e\x74\x72\x65\x20\x61\x6e\x69\x6d\x61\x75\x78\x3a\x20\x31\x36"];
        LANG[INV.CROWN_BLUE] = ["Couronne bleue", "\x55\x6e\x65\x20\x66\x6f\x69\x73\x20\x6d\x6f\x72\x74\x2c\x20\x74\x75\x20\x64\x65\x76\x69\x65\x6e\x73\x20\x75\x6e\x20\x66\x61\x6e\x74\xf4\x6d\x65", "Tu perdras toutes tes arguments", "\x44\xe9\x66\x65\x6e\x73\x65\x3a\x20\x34\x2c\x20\x44\xe9\x66\x65\x6e\x73\x65\x20\x63\x6f\x6e\x74\x72\x65\x20\x61\x6e\x69\x6d\x61\x75\x78\x3a\x20\x31\x36"];
        LANG[INV.BUCKET_FULL] = ["Seau", "Utile pour remplir un puit", "\x55\x6e\x20\x73\x63\x65\x61\x75\x20\x65\x73\x74\x20\xe9\x71\x75\x69\x76\x61\x6c\x65\x6e\x74\x20\xe0\x20\x32\x30\x20\x62\x6f\x75\x74\x65\x69\x6c\x6c\x65\x73"];
        LANG[INV.BUCKET_EMPTY] = ["Seau vide", "Pour remplir ce seau, approche-toi d\'une source d\'eau"];
        LANG[INV.BOTTLE_FULL] = ["Bouteille", "\x54\x65\x20\x70\x65\x72\x6d\x65\x74\x20\x64\x65\x20\x62\x6f\x69\x72\x65\x20\x6e\x27\x69\x6d\x70\x6f\x72\x74\x65\x20\x6f\xf9", "Eau: 50"];
        LANG[INV.BOTTLE_EMPTY] = ["Bouteille vide", "\x54\x75\x20\x70\x65\x75\x78\x20\x72\x65\x6d\x70\x6c\x69\x72\x20\x63\x65\x74\x74\x65\x20\x62\x6f\x75\x74\x65\x69\x6c\x6c\x65\x20\x70\x72\xe8\x73\x20\x64\x27\x75\x6e\x65\x20\x73\x6f\x75\x72\x63\x65\x20\x64\x27\x65\x61\x75"];
        LANG[INV.WATERING_CAN] = ["Arrosoir vide", "\x44\x6f\x69\x74\x20\xea\x74\x72\x65\x20\x72\x65\x6d\x70\x6c\x69\x20\x70\x72\xe8\x73\x20\x64\x27\x75\x6e\x65\x20\x73\x6f\x75\x72\x63\x65\x20\x64\x27\x65\x61\x75"];
        LANG[INV.WATERING_CAN_FULL] = ["Arrosoir", "Permet d\'arroser les plantes", "\x44\xe9\x67\xe2\x74\x73\x3a\x20\x31"];
        LANG[INV.BAG] = ["Sac", "Plus de place dans ton inventaire!"];
        LANG[INV.PAPER] = ["Papier", "Pour fabriquer toute sorte d\'objets"];
        LANG[INV.BOOK] = ["Livre", "\x52\xe9\x64\x75\x69\x74\x20\x63\x6f\x6e\x73\x69\x64\xe9\x72\x61\x62\x6c\x65\x6d\x65\x6e\x74\x20\x6c\x65\x20\x74\x65\x6d\x70\x73\x20\x64\x65\x20\x66\x61\x62\x72\x69\x63\x61\x74\x69\x6f\x6e", "\x44\x6f\x69\x74\x20\xea\x74\x72\x65\x20\x70\x6f\x72\x74\xe9\x20\x70\x6f\x75\x72\x20\x66\x6f\x6e\x63\x74\x69\x6f\x6e\x6e\x65\x72", "\x44\xe9\x67\xe2\x74\x73\x3a\x20\x31"];
        LANG[INV.BANDAGE] = ["Bandage", "Soigne plus rapidement", "Soigne sur le temps: 30", "Effet: 5"];
        LANG[INV.LOCK] = ["Cadenas", "Pour verrouiller un coffre"];
        LANG[INV.LOCKPICK] = ["\x43\x6c\xe9", "\x50\x6f\x75\x72\x20\x64\xe9\x76\x65\x72\x72\x6f\x75\x69\x6c\x6c\x65\x72\x20\x75\x6e\x20\x63\x6f\x66\x66\x72\x65"];
        LANG[INV.TOTEM] = ["Totem", "\x54\x65\x20\x70\x65\x72\x6d\x65\x74\x20\x64\x65\x20\x63\x72\xe9\x65\x72\x20\x75\x6e\x65\x20\xe9\x71\x75\x69\x70\x65", "Partage les portes et les coffres", "Les piques ne toucheront pas tes amis"];
        LANG[INV.BRIDGE] = ["Pont", "\x54\x72\xe8\x73\x20\x75\x74\x69\x6c\x65\x20\x73\x75\x72\x20\x6c\x27\x65\x61\x75", "Te permet de boire sans te noyer", "Marche plus vite sur l\'eau"];
        LANG[INV.SIGN] = ["Pancarte", "Laisse un message aux autres", "\x44\x75\x72\x61\x62\x69\x6c\x69\x74\xe9\x3a\x20\x32\x30\x30"];
        LANG[INV.ROOF] = ["Toit", "\x54\x65\x20\x63\x61\x63\x68\x65\x20\x75\x6e\x20\x70\x65\x75\x20\x65\x74\x20\x74\x65\x20\x72\xe9\x63\x68\x61\x75\x66\x66\x65"];
        LANG[INV.WELL] = ["Puit", "Permet de remplir des bouteilles", "\x44\x75\x72\x61\x62\x69\x6c\x69\x74\xe9\x3a\x20\x31\x30\x30\x30"];
        LANG[INV.WALL] = ["Mur en bois", "Tu connais la danse des murs?", "\x44\x75\x72\x61\x62\x69\x6c\x69\x74\xe9\x3a\x20\x31\x30\x30\x30"];
        LANG[INV.STONE_WALL] = ["Mur en pierre", "\xc7\x61\x20\x66\x61\x69\x74\x20\x75\x6e\x20\x70\x65\x75\x20\x70\x6c\x75\x73\x20\x73\xe9\x72\x69\x65\x75\x78", "\x44\x75\x72\x61\x62\x69\x6c\x69\x74\xe9\x3a\x20\x31\x35\x30\x30"];
        LANG[INV.GOLD_WALL] = ["Mur en or", "De l\'or sur tes murs? C\'est un peu voyant", "\x44\x75\x72\x61\x62\x69\x6c\x69\x74\xe9\x3a\x20\x32\x30\x30\x30"];
        LANG[INV.DIAMOND_WALL] = ["Mur en diamant", "\x54\x72\xe8\x73\x20\x62\x72\x69\x6c\x6c\x61\x6e\x74\x2c\x20\x63\x61\x63\x68\x65\x20\x74\x65\x73\x20\x79\x65\x75\x78", "\x44\x75\x72\x61\x62\x69\x6c\x69\x74\xe9\x3a\x20\x32\x35\x30\x30"];
        LANG[INV.AMETHYST_WALL] = ["\x4d\x75\x72\x20\x65\x6e\x20\x61\x6d\xe9\x74\x68\x79\x73\x74\x65", "\x54\x75\x20\x64\x6f\x69\x73\x20\x61\x76\x6f\x69\x72\x20\x74\x72\xe8\x73\x20\x70\x65\x75\x72\x20\x64\x65\x20\x73\x6f\x72\x74\x69\x72\x20\x64\x65\x68\x6f\x72\x73\x21", "\x44\x75\x72\x61\x62\x69\x6c\x69\x74\xe9\x3a\x20\x33\x35\x30\x30"];
        LANG[INV.SPIKE] = ["Piques en bois", "Peut blesser tes ennemis", "\x44\xe9\x67\xe2\x74\x73\x3a\x20\x31\x30\x2c\x20\x44\xe9\x67\xe2\x74\x73\x20\x70\x61\x72\x20\x63\x6f\x75\x70\x3a\x20\x32", "\x44\x75\x72\x61\x62\x69\x6c\x69\x74\xe9\x3a\x20\x31\x35\x30"];
        LANG[INV.STONE_SPIKE] = ["Pique en pierre", "\x4a\x65\x20\x6e\x65\x20\x76\x6f\x75\x64\x72\x61\x69\x73\x20\x70\x61\x73\x20\xea\x74\x72\x65\x20\x74\x6f\x6e\x20\x65\x6e\x6e\x65\x6d\x69", "\x44\xe9\x67\xe2\x74\x73\x3a\x20\x32\x30", "\x44\xe9\x67\xe2\x74\x73\x20\x70\x61\x72\x20\x63\x6f\x75\x70\x3a\x20\x33", "\x44\x75\x72\x61\x62\x69\x6c\x69\x74\xe9\x3a\x20\x33\x30\x30"];
        LANG[INV.GOLD_SPIKE] = ["Pique en or", "Tu es si cruel", "\x44\xe9\x67\xe2\x74\x73\x3a\x20\x33\x30", "\x44\xe9\x67\xe2\x74\x73\x20\x70\x61\x72\x20\x63\x6f\x75\x70\x3a\x20\x33", "\x44\x75\x72\x61\x62\x69\x6c\x69\x74\xe9\x3a\x20\x36\x30\x30"];
        LANG[INV.DIAMOND_SPIKE] = ["Pique en diamant", "Tu n\'as pas l\'air d\'aimer la compagnie", "\x44\xe9\x67\xe2\x74\x73\x3a\x20\x34\x30", "\x44\xe9\x67\xe2\x74\x73\x20\x70\x61\x72\x20\x63\x6f\x75\x70\x3a\x20\x34", "\x44\x75\x72\x61\x62\x69\x6c\x69\x74\xe9\x3a\x20\x31\x32\x30\x30"];
        LANG[INV.AMETHYST_SPIKE] = ["\x50\x69\x71\x75\x65\x20\x65\x6e\x20\x61\x6d\xe9\x74\x68\x79\x73\x74\x65", "Mais qu\'est ce que ton voisin t\'a fait?", "\x44\xe9\x67\xe2\x74\x73\x3a\x20\x35\x30", "\x44\xe9\x67\xe2\x74\x73\x20\x70\x61\x72\x20\x63\x6f\x75\x70\x3a\x20\x34", "\x44\x75\x72\x61\x62\x69\x6c\x69\x74\xe9\x3a\x20\x32\x34\x30\x30"];
        LANG[INV.WOOD_DOOR] = ["Porte en bois", "\x50\x65\x75\x74\x20\xea\x74\x72\x65\x20\x6f\x75\x76\x65\x72\x74\x20\x6f\x75\x20\x66\x65\x72\x6d\xe9\x20\x70\x61\x72\x20\x74\x6f\x69\x20\x6f\x75\x20\x74\x65\x73\x20\x61\x6d\x69\x73", "\x44\x75\x72\x61\x62\x69\x6c\x69\x74\xe9\x3a\x20\x31\x30\x30\x30"];
        LANG[INV.STONE_DOOR] = ["Porte en pierre", "Tu connais les trois petits cochons?", "\x44\x75\x72\x61\x62\x69\x6c\x69\x74\xe9\x3a\x20\x31\x35\x30\x30"];
        LANG[INV.GOLD_DOOR] = ["Porte en or", "Tu reconstruis l\'el dorado?", "\x44\x75\x72\x61\x62\x69\x6c\x69\x74\xe9\x3a\x20\x32\x30\x30\x30"];
        LANG[INV.DIAMOND_DOOR] = ["Porte en diamant", "\x50\x6f\x75\x72\x20\x75\x6e\x65\x20\x6d\x61\x69\x73\x6f\x6e\x20\xe9\x63\x6c\x61\x74\x61\x6e\x74\x65", "\x44\x75\x72\x61\x62\x69\x6c\x69\x74\xe9\x3a\x20\x32\x35\x30\x30"];
        LANG[INV.AMETHYST_DOOR] = ["\x50\x6f\x72\x74\x65\x20\x65\x6e\x20\x61\x6d\xe9\x74\x68\x79\x73\x74\x65", "Est-ce que ta maison est un coffre-fort?", "\x44\x75\x72\x61\x62\x69\x6c\x69\x74\xe9\x3a\x20\x33\x30\x30\x30"];
        LANG[INV.FURNACE] = ["\x43\x68\x61\x75\x64\x69\xe8\x72\x65", "\x52\xe9\x63\x68\x61\x75\x66\x66\x65", "Consume du bois toutes les 5 sec", "\x44\x75\x72\x61\x62\x69\x6c\x69\x74\xe9\x3a\x20\x31\x30\x30\x30"];
        LANG[INV.WINDMILL] = ["Moulin", "\x50\x65\x75\x74\x20\x70\x72\x6f\x64\x75\x69\x72\x65\x20\x64\x65\x20\x6c\x61\x20\x66\x61\x72\x69\x6e\x65\x20\xe0\x20\x70\x61\x72\x74\x69\x72\x20\x64\x75\x20\x62\x6c\xe9", "Prends 5 sec pour faire de la farine", "Tu obtiens des points quand c\'est en marche", "\x44\x75\x72\x61\x62\x69\x6c\x69\x74\xe9\x3a\x20\x32\x30\x30\x30"];
        LANG[INV.BREAD_OVEN] = ["\x46\x6f\x75\x72\x20\xe0\x20\x70\x61\x69\x6e", "Produit du pain avec de la farine et du bois", "Prends 10 sec pour faire du pain", "Tu obtiens des points quand c\'est en marche", "\x44\x75\x72\x61\x62\x69\x6c\x69\x74\xe9\x3a\x20\x32\x30\x30\x30"];
        LANG[INV.RESURRECTION] = ["\x50\x69\x65\x72\x72\x65\x20\x64\x65\x20\x72\xe9\x73\x75\x72\x72\x65\x63\x74\x69\x6f\x6e", "Magie magie!", "\x54\x65\x20\x72\x65\x73\x73\x75\x73\x63\x69\x74\x65\x20\x73\x69\x20\x74\x75\x20\x65\x73\x20\x75\x6e\x20\x66\x61\x6e\x74\xf4\x6d\x65", "Tu perds toutes tes armes", "\x44\x75\x72\x61\x62\x69\x6c\x69\x74\xe9\x3a\x20\x32\x30\x30"];
        LANG[TEXT.YOU_CANNOT_JOIN] = "Tu ne peux pas rejoindre le serveur";
        LANG[TEXT.KICKED] = "\x45\x78\x70\x75\x6c\x73\xe9\x3a\x20";
        LANG[TEXT.KEY_ALREADY] = "\x54\x61\x20\x63\x6c\xe9\x20\x65\x73\x74\x20\x64\xe9\x6a\xe0\x20\x75\x74\x69\x6c\x69\x73\xe9\x65\x20\x70\x61\x72\x20\x71\x75\x65\x6c\x71\x75\x27\x75\x6e\x20\x64\x27\x61\x75\x74\x72\x65";
        LANG[TEXT.KEY_WRONG] = "\x54\x61\x20\x63\x6c\xe9\x20\x65\x73\x74\x20\x66\x61\x75\x73\x73\x65";
        LANG[TEXT.OLD_VERSION] = "Tu as une vieille version, rafraichis tes caches";
        LANG[TEXT.NO_MORE_RESOURCES] = "Il n\'y a plus de nouvelles ressources";
        LANG[TEXT.SURVIVED_1DAY] = "\x54\x75\x20\x61\x73\x20\x73\x75\x72\x76\xe9\x63\x75\x20\x31\x20\x6a\x6f\x75\x72";
        LANG[TEXT.SURVIVED] = "\x54\x75\x20\x61\x73\x20\x73\x75\x72\x76\xe9\x63\x75\x20";
        LANG[TEXT.DAYS] = " jours";
        LANG[TEXT.DEAD_SAD] = "Tu es mort ;-;";
        LANG[TEXT.SPAM_ME] = "Le serveur ne trouve pas de points d\'apparitions! Spam le bouton jouer!";
        LANG[TEXT.SPAM_ME2] = "Le serveur est complet! Spam le bouton jouer";
        LANG[TEXT.EMPTY] = "Cette ressource est vide";
        LANG[TEXT.INV_FULL] = "Ton inventaire est rempli (Clic droit pour supprimer un objet)";
        LANG[TEXT.DEAD] = " est mort";
        LANG[TEXT.WRONG_TOOL] = "Ce n\'est pas le bon outil";
        LANG[TEXT.JOIN_TEAM] = "\x54\x75\x20\x61\x73\x20\x72\x65\x6a\x6f\x69\x6e\x73\x20\x75\x6e\x65\x20\xe9\x71\x75\x69\x70\x65";
        LANG[TEXT.YOU_DEAD] = "Tu es mort";
        LANG[TEXT.JOINED_TEAM] = "\x20\x61\x20\x72\x65\x6a\x6f\x69\x6e\x74\x20\x6c\x27\xe9\x71\x75\x69\x70\x65";
        LANG[TEXT.TEAM_DESTROYED] = "\x54\x6f\x6e\x20\xe9\x71\x75\x69\x70\x65\x20\x61\x20\xe9\x74\xe9\x20\x64\xe9\x74\x72\x75\x69\x74\x65";
        LANG[TEXT.LEFT_TEAM] = "\x54\x75\x20\x61\x73\x20\x71\x75\x69\x74\x74\xe9\x20\x6c\x27\xe9\x71\x75\x69\x70\x65";
        LANG[TEXT.LEFT_TEAM2] = "\x20\x61\x20\x71\x75\x69\x74\x74\xe9\x20\x6c\x27\xe9\x71\x75\x69\x70\x65";
        LANG[TEXT.TOKEN] = "\x51\x75\x65\x6c\x71\x75\x27\x75\x6e\x20\x61\x20\x76\x6f\x6c\xe9\x20\x74\x6f\x6e\x20\x74\x6f\x6b\x65\x6e\x20\x3a\x3e";
        LANG[TEXT.CHOOSE] = "Choisis un serveur";
        LANG[TEXT.PLAYERS] = "joueurs";
        LANG[TEXT.TOTAL_PLAYERS] = "joueurs";
        LANG[TEXT.TOTAL_MODE] = "joueurs dans ce mode";
        LANG[TEXT.COMMING_SOON] = "\x42\x69\x65\x6e\x74\xf4\x74\x2e\x2e\x2e";
        document.getElementById("nickname_input").placeholder = "Surnom";
        DIE[0] = ["\x54\x75\x20\x61\x73\x20\xe9\x74\xe9\x20\x74\x75\xe9\x20\x73\x61\x6e\x73\x20\x72\x61\x69\x73\x6f\x6e\x20\x70\x61\x72\x74\x69\x63\x75\x6c\x69\xe8\x72\x65\x2c\x20\x6a\x75\x73\x74\x65\x20\x63\x6f\x6d\x6d\x65\x20\xe7\x61"];
        DIE[1] = ["\x54\x75\x20\x65\x73\x20\x6d\x6f\x72\x74\x20\x64\x65\x20\x66\x61\x69\x6d\x2c\x20\x63\x27\x65\x73\x74\x20\x70\x6c\x75\x74\xf4\x74\x20\x69\x72\x6f\x6e\x69\x71\x75\x65\x2c\x20\x6e\x6f\x6e\x3f"];
        DIE[2] = ["Tu es mort de froid. Dommage", "\x54\x75\x20\x61\x73\x20\x66\x61\x69\x74\x20\x75\x6e\x65\x20\x68\x79\x70\x6f\x74\x68\x65\x72\x6d\x69\x65\x2c\x20\x6c\x61\x20\x70\x72\x6f\x63\x68\x61\x69\x6e\x65\x20\x66\x6f\x69\x73\x20\x72\x65\x73\x74\x65\x20\x70\x72\xe8\x73\x20\x64\x27\x75\x6e\x20\x66\x65\x75"];
        DIE[3] = ["\x55\x6e\x20\x6a\x6f\x75\x65\x75\x72\x20\x74\x27\x61\x20\x74\x75\xe9\x2c\x20\x61\x76\x61\x6e\x74\x20\x64\x65\x20\x6d\x6f\x75\x72\x69\x72\x20\x74\x75\x20\x70\x6f\x75\x76\x61\x69\x73\x20\x6c\x27\x65\x6e\x74\x65\x6e\x64\x72\x65\x20\x72\x69\x72\x65", "\x55\x6e\x20\x6a\x6f\x75\x65\x75\x72\x20\x74\x27\x61\x20\x74\x75\xe9\x2c\x20\x61\x76\x65\x63\x20\x75\x6e\x20\x70\x65\x75\x20\x64\x65\x20\x63\x68\x61\x6e\x63\x65\x20\x69\x6c\x20\x6d\x6f\x75\x72\x72\x61\x20\x61\x75\x73\x73\x69"];
        DIE[4] = ["\x54\x75\x20\x65\x73\x20\x72\x65\x73\x74\xe9\x20\x73\x75\x72\x20\x75\x6e\x20\x66\x65\x75\x20\x74\x72\x6f\x70\x20\x6c\x6f\x6e\x67\x74\x65\x6d\x70\x73\x20\x65\x74\x20\x74\x75\x20\x65\x73\x20\x6d\x6f\x72\x74\x20\x73\x75\x69\x74\x65\x20\x61\x75\x78\x20\x62\x72\xfb\x6c\x75\x72\x65\x73", "Tu es mort en restant trop longtemps sur un feu, tu voulais finir comme Jeanne d\'Arc?"];
        DIE[5] = ["\x54\x6f\x6e\x20\x63\x6f\x72\x70\x73\x20\x64\x65\x76\x69\x65\x6e\x64\x72\x61\x20\x75\x6e\x20\x6e\x69\x64\x20\x70\x6f\x75\x72\x20\x6c\x65\x73\x20\x6f\x65\x75\x66\x73\x20\x64\x27\x61\x72\x61\x69\x67\x6e\xe9\x65\x73\x2e"];
        DIE[6] = ["\x43\x65\x20\x6c\x6f\x75\x70\x20\x6e\x27\x61\x75\x72\x61\x20\x70\x6c\x75\x73\x20\x66\x61\x69\x6d\x20\x61\x70\x72\xe8\x73\x20\x74\x27\x61\x76\x6f\x69\x72\x20\x6d\x61\x6e\x67\xe9", "\x43\x65\x20\x6e\x65\x20\x73\x6f\x6e\x74\x20\x70\x61\x73\x20\x64\x65\x73\x20\x63\x68\x69\x65\x6e\x73\x2e\x20\x4c\x65\x73\x20\x6c\x6f\x75\x70\x73\x20\x6e\x27\x61\x69\x6d\x65\x6e\x74\x20\x70\x61\x73\x20\xea\x74\x72\x65\x20\x64\x6f\x6d\x65\x73\x74\x69\x71\x75\xe9\x73\x2e"];
        DIE[7] = ["\x43\x65\x20\x72\x65\x6e\x61\x72\x64\x20\xe9\x74\x61\x69\x74\x20\x74\x72\x6f\x70\x20\x72\x61\x70\x69\x64\x65\x20\x70\x6f\x75\x72\x20\x74\x6f\x69", "\x43\x65\x20\x72\x65\x6e\x61\x72\x64\x20\x74\x27\x61\x20\x74\x72\x61\x6e\x73\x66\x6f\x72\x6d\xe9\x20\x65\x6e\x20\x62\x6f\xee\x74\x65"];
        DIE[8] = ["\x43\x65\x74\x20\x6f\x75\x72\x73\x20\x76\x6f\x75\x6c\x61\x69\x74\x20\x6a\x75\x73\x74\x65\x20\x75\x6e\x20\x63\xe2\x6c\x69\x6e\x2e"];
        DIE[9] = ["\x54\x75\x20\x61\x73\x20\xe9\x74\xe9\x20\x62\x72\xfb\x6c\xe9\x20\x70\x61\x72\x20\x75\x6e\x20\x64\x72\x61\x67\x6f\x6e\x2e\x20\x51\x75\x65\x6c\x20\x67\xe2\x63\x68\x69\x73", "\x54\x75\x20\x74\x27\x65\x73\x20\x66\x61\x69\x74\x20\xe9\x63\x72\x61\x73\x65\x72\x20\x70\x61\x72\x20\x75\x6e\x20\x64\x72\x61\x67\x6f\x6e\x2e\x20\x55\x6e\x65\x20\x62\x69\x65\x6e\x20\x74\x65\x72\x72\x69\x62\x6c\x65\x20\x66\x61\xe7\x6f\x6e\x20\x64\x65\x20\x6d\x6f\x75\x72\x69\x72\x2e\x2e\x2e"];
        DIE[10] = ["\x54\x75\x20\x61\x73\x20\x73\x61\x75\x74\xe9\x20\x73\x75\x72\x20\x64\x65\x73\x20\x70\x69\x71\x75\x65\x73\x2c\x20\x63\x27\xe9\x74\x61\x69\x74\x20\x70\x61\x73\x20\x75\x6e\x65\x20\x62\x6f\x6e\x6e\x65\x20\x69\x64\xe9\x65\x2e\x2e\x2e", "\x54\x75\x20\x65\x73\x20\x6d\x6f\x72\x74\x20\x73\x75\x72\x20\x64\x65\x73\x20\x70\x69\x71\x75\x65\x73\x2e\x20\x4c\x61\x20\x70\x6c\x75\x70\x61\x72\x74\x20\x64\x65\x73\x20\x67\x65\x6e\x73\x20\x73\x6f\x6e\x74\x20\x61\x73\x73\x65\x7a\x20\x73\x65\x6e\x73\xe9\x73\x20\x70\x6f\x75\x72\x20\x6e\x65\x20\x70\x61\x73\x20\x74\x6f\x75\x63\x68\x65\x72\x20\x6c\x65\x73\x20\x63\x68\x6f\x73\x65\x73\x20\x70\x6f\x69\x6e\x74\x75\x65\x73"];
        DIE[11] = ["\x4d\xea\x6d\x65\x20\x6c\x65\x73\x20\x66\x61\x6e\x74\xf4\x6d\x65\x73\x20\x70\x65\x75\x76\x65\x6e\x74\x20\x6d\x6f\x75\x72\x69\x72", "\x54\x75\x20\x6e\x27\x61\x73\x20\x70\x61\x73\x20\x72\xe9\x75\x73\x73\x69\x20\xe0\x20\x74\x65\x20\x72\x65\x73\x73\x75\x73\x63\x69\x74\x65\x72\x2e\x20\x4d\x61\x69\x73\x20\x63\x27\x65\x73\x74\x20\x75\x6e\x20\x6a\x65\x75\x2c\x20\x74\x75\x20\x72\x65\x76\x69\x65\x6e\x73\x20\xe0\x20\x6c\x61\x20\x76\x69\x65\x20\x61\x70\x72\xe8\x73\x20\xea\x74\x72\x65\x20\x6d\x6f\x72\x74\x2c\x20\x64\x6f\x6e\x63\x2e\x2e\x2e"];
        DIE[12] = ["\x55\x6e\x65\x20\x62\x61\x63\x74\xe9\x72\x69\x65\x20\x6c\x6f\x67\xe9\x65\x20\x64\x61\x6e\x73\x20\x6c\x61\x20\x76\x69\x61\x6e\x64\x65\x20\x63\x72\x75\x65\x20\x74\x27\x61\x20\x74\x75\xe9\x2e\x20\x43\x65\x20\x6a\x65\x75\x20\x65\x73\x74\x20\x76\x72\x61\x69\x6d\x65\x6e\x74\x20\x74\x72\x6f\x70\x20\x64\x75\x72\x2e", "\x54\x75\x20\x61\x73\x20\x74\x75\xe9\x20\x6c\x27\x61\x6e\x69\x6d\x61\x6c\x2c\x20\x73\x61\x20\x76\x69\x61\x6e\x64\x65\x20\x74\x27\x61\x20\x74\x75\xe9\x2e"];
        DIE[13] = ["Tu es mort de soif. La prochaine fois, vas dans un lac, dans la mer ou fais-toi une bouteille"];
        DIE[14] = ["\x54\x75\x20\x74\x27\x65\x73\x20\x6e\x6f\x79\xe9\x2e\x20\x45\x73\x73\x61\x79\x65\x20\x64\x65\x20\x63\x6f\x6e\x73\x74\x72\x75\x69\x72\x65\x20\x75\x6e\x20\x70\x6f\x6e\x74\x20\x6c\x61\x20\x70\x72\x6f\x63\x68\x61\x69\x6e\x65\x20\x66\x6f\x69\x73"];
        DIE[15] = ["\x4e\x65\x20\x74\x27\x69\x6e\x71\x75\x69\xe8\x74\x65\x20\x70\x61\x73\x2c\x20\x6c\x65\x20\x70\x69\x72\x61\x6e\x68\x61\x20\x74\x27\x61\x20\x74\x72\x6f\x75\x76\xe9\x20\x61\x70\x70\xe9\x74\x69\x73\x73\x61\x6e\x74\x2e"];
        DIE[16] = ["\x55\x6e\x20\x6b\x72\x61\x6b\x65\x6e\x20\x61\x20\x27\x6b\x72\x61\x6b\xe9\x27\x20\x74\x65\x73\x20\x6f\x73\x2e"];
        DIE[17] = ["\x54\x61\x20\x70\x65\x61\x75\x20\x74\x6f\x6d\x62\x65\x20\x65\x6e\x20\x6c\x61\x6d\x62\x65\x61\x75\x2c\x20\x6c\x65\x20\x73\x6f\x6c\x65\x69\x6c\x20\x74\x27\x61\x20\x62\x72\xfb\x6c\xe9\x2e"];
        DIE[18] = ["L\'ail dans ta poche a fait bouillir ton cerveau."];
        DIE[19] = ["\x45\x6e\x20\x74\x61\x6e\x74\x20\x71\x75\x65\x20\x76\x61\x6d\x70\x69\x72\x65\x2c\x20\x6e\x65\x20\x72\x65\x73\x74\x65\x20\x70\x61\x73\x20\xe0\x20\x63\xf4\x74\xe9\x20\x64\x65\x73\x20\x67\x6f\x75\x73\x73\x65\x73\x20\x64\x27\x61\x69\x6c\x2e"];
        DIE[20] = ["\x54\x75\x20\x61\x73\x20\x6d\x61\x6e\x67\xe9\x20\x64\x65\x20\x6c\x27\x61\x69\x6c\x20\x65\x6e\x20\x74\x61\x6e\x74\x20\x71\x75\x65\x20\x76\x61\x6d\x70\x69\x72\x65\x2c\x20\x74\x75\x20\x74\x27\x61\x74\x74\x65\x6e\x64\x61\x69\x73\x20\xe0\x20\x71\x75\x6f\x69\x3f"];
        DIE[21] = ["\x54\x6f\x6e\x20\x63\x6f\x72\x70\x73\x20\x65\x73\x74\x20\x74\x6f\x6d\x62\xe9\x20\x64\x61\x6e\x73\x20\x6c\x65\x73\x20\x72\x6f\x6e\x63\x65\x73\x2e\x20\x45\x6e\x20\x65\x73\x73\x61\x79\x61\x6e\x74\x20\x64\x65\x20\x74\x27\xe9\x63\x68\x61\x70\x70\x65\x72\x2c\x20\x74\x61\x20\x70\x65\x61\x75\x20\x73\x27\x65\x73\x74\x20\x61\x72\x72\x61\x63\x68\xe9\x65\x20\x65\x74\x20\x6c\x61\x20\x64\x6f\x75\x6c\x65\x75\x72\x20\x61\x20\x66\x61\x69\x74\x20\x61\x72\x72\xea\x74\x65\x72\x20\x64\x65\x20\x62\x61\x74\x74\x72\x65\x20\x74\x6f\x6e\x20\x63\x6f\x65\x75\x72\x2e\x20\x6c\x6f\x6c\x20\xe7\x61\x20\x72\x69\x6d\x65\x2e"];
        ZOMBIE_GRUMBLE = "Uuunnnggg";
        ZOMBIE_GRUMBLES = ["Uuunnnggg... J\'ai faim", "Manger cerveau, Uuunnnggg...", "\x56\x69\x61\x6e\x64\x65\x20\x66\x72\x61\xee\x63\x68\x65\x20\x69\x63\x69\x2e\x2e\x2e\x20\x55\x75\x75\x6e\x6e\x6e\x67\x67\x67", "Uuunnnggg... Tu as l\'air bon", "Uuunnnggg...", "Manger... uuunnnggg...", "Je peux sentir ton sang... Uuunnnggg"];
    };
    var LANG = [];
    for (var i = 0; i < COUNTER; i++)
        LANG[i] = "";
    var DIE = [];
    $('.md-languages').on('click', function () {
        $(this).toggleClass('active');
    });
    $('.md-languages ul li').on('click', function () {
        var v = $(this).text();
        if (v === "English")
            set_english();
        else if (v === "\x46\x72\x61\x6e\xe7\x61\x69\x73")
            set_french();
        else if (v === "Deutsch")
            set_german();
        else if (v === "\x45\x73\x70\x61\xf1\x6f\x6c")
            set_spanish();
        else if (v === "\x50\x6f\x72\x74\x75\x67\x75\xea\x73")
            set_portuguese();
        else if (v === "Русский")
            set_russian();
        else if (v === "Polski")
            set_polish();

        INFO_BOX = [];
        user.craft.label = [];
        $('.md-languages ul li').removeClass('active');
        $(this).addClass('active');
        $('.md-languages label button').text(v);
    });
    var lang = "EN";
    var userlang = navigator.language || navigator.userLanguage;
    switch (userlang) {
        case "ru":
            lang = "RU";
            break;
        case "en":
            lang = "EN";
            break;
        case "es":
            lang = "SP";
            break;
        case "fr":
            lang = "FR";
            break;
        case "pl":
            lang = "PL";
            break;
        case "de":
            lang = "DE";
            break;
        case "pt":
            lang = "PT";
            break;
    }
    var next_lang;
    if (lang === "FR") {
        $('.md-languages label button').text("\x46\x72\x61\x6e\xe7\x61\x69\x73");
        next_lang = set_french;
    } else if (lang === "PL") {
        $('.md-languages label button').text("Polski");
        next_lang = set_polish;
    } else if (lang === "PT") {
        $('.md-languages label button').text("\x50\x6f\x72\x74\x75\x67\x75\xea\x73");
        next_lang = set_portuguese;
    } else if (lang === "SP") {
        $('.md-languages label button').text("\x45\x73\x70\x61\xf1\x6f\x6c");
        next_lang = set_spanish;
    } else if (lang === "RU") {
        $('.md-languages label button').text("Русский");
        next_lang = set_russian;
    } else if (lang === "DE") {
        $('.md-languages label button').text("Deutsch");
        next_lang = set_german;
    } else {
        $('.md-languages label button').text("English");
        next_lang = set_english;
    }
    IMAGES = {
        LOGO: 'img/logo.png',
        BIGDAY: 'img/mapday.png',
        BIGNIGHT: 'img/mapnight.png',
        BIGZDAY: 'img/bigzday.png',
        BIGZNIGHT: 'img/bigznight.png',
        MAPDAY_RIVER: 'img/bigday-river1.png',
        MAPDAY_LAKE: 'img/bigday-lake.png',
        MAPDAY_BERRY: 'img/bigday-berry.png',
        MAPDAY_STONE1: 'img/bigday-stone1.png',
        MAPDAY_STONE2: 'img/bigday-stone2.png',
        MAPDAY_GOLD1: 'img/bigday-gold1.png',
        MAPDAY_GOLD2: 'img/bigday-gold2.png',
        MAPDAY_EMERALD1: 'img/bigday-emerald1.png',
        MAPDAY_EMERALD2: 'img/bigday-emerald2.png',
        MAPDAY_AMETHYST: 'img/bigday-amethyst.png',
        MAPDAY_BEAR: 'img/bigday-bear.png',
        MAPDAY_CAVE: 'img/bigday-cave.png',
        MAPDAY_DIAMOND: 'img/bigday-diamond.png',
        MAPDAY_ISLAND: 'img/bigday-island.png',
        MAPDAY_REIDITE: 'img/bigday-reidite.png',
        MAPDAY_SPIDER: 'img/bigday-spider.png',
        MAPDAY_WOLF: 'img/bigday-wolf.png',
        MAPDAY_FIR_TREE: 'img/bigday-fir-tree.png',
        MAPDAY_FOX: 'img/bigday-fox.png',
        MAPDAY_KRAKEN: 'img/bigday-kraken.png',
        MAPDAY_PIRANHA: 'img/bigday-piranha.png',
        MAPDAY_CACTUS: 'img/bigday-cactus.png',
        MAPDAY_MAGMA: 'img/bigday-magma.png',
        MAPNIGHT_RIVER: 'img/bigday-river1.png',
        MAPNIGHT_LAKE: 'img/bignight-lake.png',
        MAPNIGHT_BERRY: 'img/bignight-berry.png',
        MAPNIGHT_STONE1: 'img/bignight-stone1.png',
        MAPNIGHT_STONE2: 'img/bignight-stone2.png',
        MAPNIGHT_GOLD1: 'img/bignight-gold1.png',
        MAPNIGHT_GOLD2: 'img/bignight-gold2.png',
        MAPNIGHT_EMERALD1: 'img/bignight-emerald1.png',
        MAPNIGHT_EMERALD2: 'img/bignight-emerald2.png',
        MAPNIGHT_AMETHYST: 'img/bignight-amethyst.png',
        MAPNIGHT_BEAR: 'img/bignight-bear.png',
        MAPNIGHT_CAVE: 'img/bignight-cave.png',
        MAPNIGHT_DIAMOND: 'img/bignight-diamond.png',
        MAPNIGHT_ISLAND: 'img/bignight-island.png',
        MAPNIGHT_REIDITE: 'img/bignight-reidite.png',
        MAPNIGHT_SPIDER: 'img/bignight-spider.png',
        MAPNIGHT_WOLF: 'img/bignight-wolf.png',
        MAPNIGHT_FIR_TREE: 'img/bignight-fir-tree.png',
        MAPNIGHT_FOX: 'img/bignight-fox.png',
        MAPNIGHT_KRAKEN: 'img/bignight-kraken.png',
        MAPNIGHT_PIRANHA: 'img/bignight-piranha.png',
        MAPNIGHT_CACTUS: 'img/bignight-cactus.png',
        MAPNIGHT_MAGMA: 'img/bignight-magma.png',
        MAPDAY_DESERT: 'img/bigday-desert.png',
        MAPDAY_WINTER: 'img/bigday-winter.png',
        MAPDAY_LAVA: 'img/bigday-lava.png',
        MAPDAY_FOREST: 'img/bigday-forest.png',
        MAPNIGHT_DESERT: 'img/bignight-desert.png',
        MAPNIGHT_WINTER: 'img/bignight-winter.png',
        MAPNIGHT_LAVA: 'img/bignight-lava.png',
        MAPNIGHT_FOREST: 'img/bignight-forest.png',
        RIVER_WAVED: 'img/day-river-wave.png',
        RIVER_WAVEN: 'img/night-river-wave.png',
        FOG0D: 'img/day-fog0.png',
        FOG1D: 'img/day-fog1.png',
        FOG2D: 'img/day-fog2.png',
        FOG0N: 'img/night-fog0.png',
        FOG1N: 'img/night-fog1.png',
        FOG2N: 'img/night-fog2.png',
        FOD0D: 'img/day-fogdesert0.png',
        FOD1D: 'img/day-fogdesert1.png',
        FOD2D: 'img/day-fogdesert2.png',
        FOD0N: 'img/night-fogdesert0.png',
        FOD1N: 'img/night-fogdesert1.png',
        FOD2N: 'img/night-fogdesert2.png',
        MARKER0D: 'img/day-cross-server.png',
        MARKER1D: 'img/day-here-server.png',
        MARKER2D: 'img/day-finish-server.png',
        MARKER3D: 'img/day-item-server.png',
        MARKER0N: 'img/night-cross-server.png',
        MARKER1N: 'img/night-here-server.png',
        MARKER2N: 'img/night-finish-server.png',
        MARKER3N: 'img/night-item-server.png',
        REIDITE0D: 'img/day-reidite0.png',
        REIDITE0N: 'img/night-reidite0.png',
        REIDITE1D: 'img/day-reidite1.png',
        REIDITE1N: 'img/night-reidite1.png',
        REIDITE2D: 'img/day-reidite2.png',
        REIDITE2N: 'img/night-reidite2.png',
        MAGMA1D: 'img/day-lava1.png',
        MAGMA1N: 'img/night-lava1.png',
        MAGMA2D: 'img/day-lava2.png',
        MAGMA2N: 'img/night-lava2.png',
        MAGMA3D: 'img/day-lava3.png',
        MAGMA3N: 'img/night-lava3.png',
        MAGMA4D: 'img/day-lava4.png',
        MAGMA4N: 'img/night-lava4.png',
        MAGMA5D: 'img/day-lava5.png',
        MAGMA5N: 'img/night-lava5.png',
        MAGMA6D: 'img/day-lava6.png',
        MAGMA6N: 'img/night-lava6.png',
        LAVA_GROUND1D: 'img/day-lava-ground1.png',
        LAVA_GROUND1N: 'img/night-lava-ground1.png',
        LAVA_GROUND2D: 'img/day-lava-ground2.png',
        LAVA_GROUND2N: 'img/night-lava-ground2.png',
        LAVA_GROUND3D: 'img/day-lava-ground3.png',
        LAVA_GROUND3N: 'img/night-lava-ground3.png',
        LAVA_GROUND4D: 'img/day-lava-ground4.png',
        LAVA_GROUND4N: 'img/night-lava-ground4.png',
        LAVA_GROUND5D: 'img/day-lava-ground5.png',
        LAVA_GROUND5N: 'img/night-lava-ground5.png',
        LAVA_GROUND6D: 'img/day-lava-ground6.png',
        LAVA_GROUND6N: 'img/night-lava-ground6.png',
        FIRE_MOBD: 'img/day-fire-mob.png',
        FIRE_MOBN: 'img/night-fire-mob.png',
        FIRE_MOB_HURT: 'img/hurt-fire-mob.png',
        DIAMOND_PROTECTIOND: 'img/day-diamond-protection.png',
        DIAMOND_PROTECTIONN: 'img/night-diamond-protection.png',
        HAND_DIAMOND_PROTECTIOND: 'img/day-hand-diamond-protection.png',
        HAND_DIAMOND_PROTECTIONN: 'img/night-hand-diamond-protection.png',
        INV_DIAMOND_PROTECTION_OUT: 'img/inv-diamond-protection-out.png',
        INV_DIAMOND_PROTECTION_IN: 'img/inv-diamond-protection-in.png',
        INV_DIAMOND_PROTECTION_CLICK: 'img/inv-diamond-protection-click.png',
        AMETHYST_PROTECTIOND: 'img/day-amethyst-protection.png',
        AMETHYST_PROTECTIONN: 'img/night-amethyst-protection.png',
        HAND_AMETHYST_PROTECTIOND: 'img/day-hand-amethyst-protection.png',
        HAND_AMETHYST_PROTECTIONN: 'img/night-hand-amethyst-protection.png',
        INV_AMETHYST_PROTECTION_OUT: 'img/inv-amethyst-protection-out.png',
        INV_AMETHYST_PROTECTION_IN: 'img/inv-amethyst-protection-in.png',
        INV_AMETHYST_PROTECTION_CLICK: 'img/inv-amethyst-protection-click.png',
        REIDITE_SWORDD: 'img/day-reidite-sword.png',
        REIDITE_SWORDN: 'img/night-reidite-sword.png',
        INV_REIDITE_SWORD_OUT: 'img/inv-reidite-sword-out.png',
        INV_REIDITE_SWORD_IN: 'img/inv-reidite-sword-in.png',
        INV_REIDITE_SWORD_CLICK: 'img/inv-reidite-sword-click.png',
        INV_REIDITE_OUT: 'img/inv-reidite-out.png',
        INV_REIDITE_IN: 'img/inv-reidite-in.png',
        INV_REIDITE_CLICK: 'img/inv-reidite-click.png',
        INV_FLAME_OUT: 'img/inv-flame-out.png',
        INV_FLAME_IN: 'img/inv-flame-in.png',
        INV_FLAME_CLICK: 'img/inv-flame-click.png',
        LAVA_BUBLE0D: 'img/day-magma-buble0.png',
        LAVA_BUBLE0N: 'img/night-magma-buble0.png',
        LAVA_BUBLE1D: 'img/day-magma-buble1.png',
        LAVA_BUBLE1N: 'img/night-magma-buble1.png',
        LAVA_BUBLE2D: 'img/day-magma-buble2.png',
        LAVA_BUBLE2N: 'img/night-magma-buble2.png',
        LAVA_DRAGOND: 'img/day-lava-dragon.png',
        LAVA_DRAGONN: 'img/night-lava-dragon.png',
        LAVA_FIRE_DRAGOND: 'img/day-fire-dragon.png',
        LAVA_FIRE_DRAGONN: 'img/night-fire-dragon.png',
        HURT_LAVA_DRAGON: 'img/hurt-lava-dragon.png',
        LAVA_WING_LEFTD: 'img/day-lava-wing-left.png',
        LAVA_WING_LEFTN: 'img/night-lava-wing-left.png',
        LAVA_WING_RIGHTD: 'img/day-lava-wing-right.png',
        LAVA_WING_RIGHTN: 'img/night-lava-wing-right.png',
        HURT_LAVA_WING_LEFT: 'img/hurt-lava-wing-left.png',
        HURT_LAVA_WING_RIGHT: 'img/hurt-lava-wing-right.png',
        REIDITE_SPEARD: 'img/day-reidite-spear.png',
        REIDITE_SPEARN: 'img/night-reidite-spear.png',
        INV_REIDITE_SPEAR_OUT: 'img/inv-reidite-spear-out.png',
        INV_REIDITE_SPEAR_IN: 'img/inv-reidite-spear-in.png',
        INV_REIDITE_SPEAR_CLICK: 'img/inv-reidite-spear-click.png',
        REIDITE_HELMETD: 'img/day-reidite-helmet.png',
        REIDITE_HELMETN: 'img/night-reidite-helmet.png',
        INV_REIDITE_HELMET_OUT: 'img/inv-reidite-helmet-out.png',
        INV_REIDITE_HELMET_IN: 'img/inv-reidite-helmet-in.png',
        INV_REIDITE_HELMET_CLICK: 'img/inv-reidite-helmet-click.png',
        HAND_REIDITE_PROTECTIOND: 'img/day-hand-reidite-protection.png',
        HAND_REIDITE_PROTECTIONN: 'img/night-hand-reidite-protection.png',
        REIDITE_PROTECTIOND: 'img/day-reidite-protection.png',
        REIDITE_PROTECTIONN: 'img/night-reidite-protection.png',
        INV_REIDITE_PROTECTION_OUT: 'img/inv-reidite-protection-out.png',
        INV_REIDITE_PROTECTION_IN: 'img/inv-reidite-protection-in.png',
        INV_REIDITE_PROTECTION_CLICK: 'img/inv-reidite-protection-click.png',
        LAVA_SWORDD: 'img/day-lava-dragon-sword.png',
        LAVA_SWORDN: 'img/night-lava-dragon-sword.png',
        INV_LAVA_SWORD_OUT: 'img/inv-lava-dragon-sword-out.png',
        INV_LAVA_SWORD_IN: 'img/inv-lava-dragon-sword-in.png',
        INV_LAVA_SWORD_CLICK: 'img/inv-lava-dragon-sword-click.png',
        LAVA_SPEARD: 'img/day-lava-spear.png',
        LAVA_SPEARN: 'img/night-lava-spear.png',
        INV_LAVA_SPEAR_OUT: 'img/inv-lava-spear-out.png',
        INV_LAVA_SPEAR_IN: 'img/inv-lava-spear-in.png',
        INV_LAVA_SPEAR_CLICK: 'img/inv-lava-spear-click.png',
        LAVA_HELMETD: 'img/day-lava-helmet.png',
        LAVA_HELMETN: 'img/night-lava-helmet.png',
        INV_LAVA_HELMET_OUT: 'img/inv-lava-helmet-out.png',
        INV_LAVA_HELMET_IN: 'img/inv-lava-helmet-in.png',
        INV_LAVA_HELMET_CLICK: 'img/inv-lava-helmet-click.png',
        WITCHD: 'img/day-witch-hat.png',
        WITCHN: 'img/night-witch-hat.png',
        INV_WITCH_OUT: 'img/inv-witch-hat-out.png',
        INV_WITCH_IN: 'img/inv-witch-hat-in.png',
        INV_WITCH_CLICK: 'img/inv-witch-hat-click.png',
        NIMBUSD: 'img/day-nimbus2000.png',
        NIMBUSN: 'img/night-nimbus2000.png',
        INV_NIMBUS_OUT: 'img/inv-nimbus2000-out.png',
        INV_NIMBUS_IN: 'img/inv-nimbus2000-in.png',
        INV_NIMBUS_CLICK: 'img/inv-nimbus2000-click.png',
        ACCESSORY1D: 'img/day-accessory1-pacques.png',
        ACCESSORY1N: 'img/night-accessory1-pacques.png',
        ACCESSORY2D: 'img/day-accessory2-pacques.png',
        ACCESSORY2N: 'img/night-accessory2-pacques.png',
        ACCESSORY3D: 'img/day-accessory3-pacques.png',
        ACCESSORY3N: 'img/night-accessory3-pacques.png',
        ACCESSORY5D: 'img/day-accessory5-pacques.png',
        ACCESSORY5N: 'img/night-accessory5-pacques.png',
        ACCESSORY6D: 'img/day-accessory6-pacques.png',
        ACCESSORY6N: 'img/night-accessory6-pacques.png',
        ACCESSORY7D: 'img/day-accessory7-pacques.png',
        ACCESSORY7N: 'img/night-accessory7-pacques.png',
        ACCESSORY8D: 'img/day-accessory8-pacques.png',
        ACCESSORY8N: 'img/night-accessory8-pacques.png',
        BAG_EASTERD: 'img/day-bag-pacques.png',
        BAG_EASTERN: 'img/night-bag-pacques.png',
        CARROTD: 'img/day-carrot.png',
        CARROTN: 'img/night-carrot.png',
        CARROT_DRIEDD: 'img/day-carrot-dried.png',
        CARROT_DRIEDN: 'img/night-carrot-dried.png',
        TOMATO_MINID: 'img/day-tomato-herb.png',
        TOMATO_MININ: 'img/night-tomato-herb.png',
        TOMATO_MINI_DRIEDD: 'img/day-tomato-herb-dried.png',
        TOMATO_MINI_DRIEDN: 'img/night-tomato-herb-dried.png',
        TOMATOD: 'img/day-tomato.png',
        TOMATON: 'img/night-tomato.png',
        INV_CARROT_OUT: 'img/inv-carrot-out.png',
        INV_CARROT_IN: 'img/inv-carrot-in.png',
        INV_CARROT_CLICK: 'img/inv-carrot-click.png',
        INV_TOMATO_OUT: 'img/inv-tomato-out.png',
        INV_TOMATO_IN: 'img/inv-tomato-in.png',
        INV_TOMATO_CLICK: 'img/inv-tomato-click.png',
        PLAYER0D: 'img/day-player0.png',
        PLAYER0N: 'img/night-player0.png',
        PLAYER1D: 'img/day-player1.png',
        PLAYER1N: 'img/night-player1.png',
        PLAYER2D: 'img/day-player2.png',
        PLAYER2N: 'img/night-player22.png',
        PLAYER3D: 'img/day-player3.png',
        PLAYER3N: 'img/night-player33.png',
        PLAYER4D: 'img/day-player4.png',
        PLAYER4N: 'img/night-player4.png',
        PLAYER5D: 'img/day-player5.png',
        PLAYER5N: 'img/night-player5.png',
        PLAYER6D: 'img/day-player6.png',
        PLAYER6N: 'img/night-player6.png',
        PLAYER7D: 'img/day-player7.png',
        PLAYER7N: 'img/night-player7.png',
        PLAYER8D: 'img/day-player8.png',
        PLAYER8N: 'img/night-player8.png',
        PLAYER9D: 'img/day-player9.png',
        PLAYER9N: 'img/night-player9.png',
        PLAYER10D: 'img/day-player10.png',
        PLAYER10N: 'img/night-player10.png',
        PLAYER11D: 'img/day-player11.png',
        PLAYER11N: 'img/night-player11.png',
        PLAYER12D: 'img/day-player12.png',
        PLAYER12N: 'img/night-player12.png',
        PLAYER13D: 'img/day-player13.png',
        PLAYER13N: 'img/night-player13.png',
        PLAYER14D: 'img/day-player14.png',
        PLAYER14N: 'img/night-player14.png',
        PLAYER15D: 'img/day-player15.png',
        PLAYER15N: 'img/night-player15.png',
        PLAYER16D: 'img/day-player16.png',
        PLAYER16N: 'img/night-player16.png',
        PLAYER17D: 'img/day-player17.png',
        PLAYER17N: 'img/night-player17.png',
        PLAYER18D: 'img/day-player18.png',
        PLAYER18N: 'img/night-player18.png',
        PLAYER19D: 'img/day-player19.png',
        PLAYER19N: 'img/night-player19.png',
        HAND0D: 'img/day-hand-player0.png',
        HAND0N: 'img/night-hand-player0.png',
        HAND1D: 'img/day-hand-player1.png',
        HAND1N: 'img/night-hand-player1.png',
        HAND2D: 'img/day-hand-player2.png',
        HAND2N: 'img/night-hand-player22.png',
        HAND3D: 'img/day-hand-player3.png',
        HAND3N: 'img/night-hand-player33.png',
        HAND4D: 'img/day-hand-player4.png',
        HAND4N: 'img/night-hand-player4.png',
        HAND5D: 'img/day-hand-player5.png',
        HAND5N: 'img/night-hand-player5.png',
        HAND6D: 'img/day-hand-player6.png',
        HAND6N: 'img/night-hand-player6.png',
        HAND7D: 'img/day-hand-player7.png',
        HAND7N: 'img/night-hand-player7.png',
        HAND8D: 'img/day-hand-player8.png',
        HAND8N: 'img/night-hand-player8.png',
        HAND9D: 'img/day-hand-player9.png',
        HAND9N: 'img/night-hand-player9.png',
        HAND10D: 'img/day-hand-player10.png',
        HAND10N: 'img/night-hand-player10.png',
        HAND11D: 'img/day-hand-player11.png',
        HAND11N: 'img/night-hand-player11.png',
        HAND12D: 'img/day-hand-player12.png',
        HAND12N: 'img/night-hand-player12.png',
        HAND13D: 'img/day-hand-player13.png',
        HAND13N: 'img/night-hand-player13.png',
        HAND14D: 'img/day-hand-player14.png',
        HAND14N: 'img/night-hand-player14.png',
        HAND15D: 'img/day-hand-player15.png',
        HAND15N: 'img/night-hand-player15.png',
        HAND16D: 'img/day-hand-player16.png',
        HAND16N: 'img/night-hand-player16.png',
        HAND17D: 'img/day-hand-player17.png',
        HAND17N: 'img/night-hand-player17.png',
        HAND18D: 'img/day-hand-player18.png',
        HAND18N: 'img/night-hand-player18.png',
        HAND19D: 'img/day-hand-player19.png',
        HAND19N: 'img/night-hand-player19.png',
        ACCESSORY4D: 'img/day-accessory4.png',
        ACCESSORY4N: 'img/night-accessory4.png',
        ACCESSORY9D: 'img/day-accessory9.png',
        ACCESSORY9N: 'img/night-accessory9.png',
        ACCESSORY10D: 'img/day-accessory10.png',
        ACCESSORY10N: 'img/night-accessory10.png',
        ACCESSORY11D: 'img/day-accessory11.png',
        ACCESSORY11N: 'img/night-accessory11.png',
        ACCESSORY12D: 'img/day-accessory12.png',
        ACCESSORY12N: 'img/night-accessory12.png',
        BAGD: 'img/day-bag.png',
        BAGN: 'img/night-bag.png',
        INV_BAG_OUT: 'img/inv-bag-out.png',
        INV_BAG_IN: 'img/inv-bag-in.png',
        INV_BAG_CLICK: 'img/inv-bag-click.png',
        PITCHFORKD: 'img/day-pitchfork.png',
        PITCHFORKN: 'img/night-pitchfork.png',
        INV_PITCHFORK_OUT: 'img/inv-pitchfork-out.png',
        INV_PITCHFORK_IN: 'img/inv-pitchfork-in.png',
        INV_PITCHFORK_CLICK: 'img/inv-pitchfork-click.png',
        INV_WOOD_DOOR_SPIKE_OUT: 'img/inv-wood-spike-door-out.png',
        INV_WOOD_DOOR_SPIKE_IN: 'img/inv-wood-spike-door-in.png',
        INV_WOOD_DOOR_SPIKE_CLICK: 'img/inv-wood-spike-door-click.png',
        INV_STONE_DOOR_SPIKE_OUT: 'img/inv-stone-spike-door-out.png',
        INV_STONE_DOOR_SPIKE_IN: 'img/inv-stone-spike-door-in.png',
        INV_STONE_DOOR_SPIKE_CLICK: 'img/inv-stone-spike-door-click.png',
        INV_GOLD_DOOR_SPIKE_OUT: 'img/inv-gold-spike-door-out.png',
        INV_GOLD_DOOR_SPIKE_IN: 'img/inv-gold-spike-door-in.png',
        INV_GOLD_DOOR_SPIKE_CLICK: 'img/inv-gold-spike-door-click.png',
        INV_DIAMOND_DOOR_SPIKE_OUT: 'img/inv-diamond-spike-door-out.png',
        INV_DIAMOND_DOOR_SPIKE_IN: 'img/inv-diamond-spike-door-in.png',
        INV_DIAMOND_DOOR_SPIKE_CLICK: 'img/inv-diamond-spike-door-click.png',
        INV_AMETHYST_DOOR_SPIKE_OUT: 'img/inv-amethyst-spike-door-out.png',
        INV_AMETHYST_DOOR_SPIKE_IN: 'img/inv-amethyst-spike-door-in.png',
        INV_AMETHYST_DOOR_SPIKE_CLICK: 'img/inv-amethyst-spike-door-click.png',
        WOOD_DOOR_SPIKED: 'img/day-wood-spike-door.png',
        WOOD_DOOR_SPIKEN: 'img/night-wood-spike-door.png',
        STONE_DOOR_SPIKED: 'img/day-stone-spike-door.png',
        STONE_DOOR_SPIKEN: 'img/night-stone-spike-door.png',
        GOLD_DOOR_SPIKED: 'img/day-gold-spike-door.png',
        GOLD_DOOR_SPIKEN: 'img/night-gold-spike-door.png',
        DIAMOND_DOOR_SPIKED: 'img/day-diamond-spike-door.png',
        DIAMOND_DOOR_SPIKEN: 'img/night-diamond-spike-door.png',
        AMETHYST_DOOR_SPIKED: 'img/day-amethyst-spike-door.png',
        AMETHYST_DOOR_SPIKEN: 'img/night-amethyst-spike-door.png',
        INV_REIDITE_DOOR_SPIKE_OUT: 'img/inv-reidite-spike-door-out.png',
        INV_REIDITE_DOOR_SPIKE_IN: 'img/inv-reidite-spike-door-in.png',
        INV_REIDITE_DOOR_SPIKE_CLICK: 'img/inv-reidite-spike-door-click.png',
        INV_REIDITE_DOOR_OUT: 'img/inv-reidite-door-out.png',
        INV_REIDITE_DOOR_IN: 'img/inv-reidite-door-in.png',
        INV_REIDITE_DOOR_CLICK: 'img/inv-reidite-door-click.png',
        INV_REIDITE_SPIKE_OUT: 'img/inv-reidite-spike-out.png',
        INV_REIDITE_SPIKE_IN: 'img/inv-reidite-spike-in.png',
        INV_REIDITE_SPIKE_CLICK: 'img/inv-reidite-spike-click.png',
        INV_REIDITE_WALL_OUT: 'img/inv-reidite-wall-out.png',
        INV_REIDITE_WALL_IN: 'img/inv-reidite-wall-in.png',
        INV_REIDITE_WALL_CLICK: 'img/inv-reidite-wall-click.png',
        REIDITE_WALLD: 'img/day-reidite-wall.png',
        REIDITE_WALLN: 'img/night-reidite-wall.png',
        REIDITE_DOORD: 'img/day-reidite-door.png',
        REIDITE_DOORN: 'img/night-reidite-door.png',
        REIDITE_SPIKED: 'img/day-reidite-spike.png',
        REIDITE_SPIKEN: 'img/night-reidite-spike.png',
        REIDITE_DOOR_SPIKED: 'img/day-reidite-spike-door.png',
        REIDITE_DOOR_SPIKEN: 'img/night-reidite-spike-door.png',
        INV_PICK_REIDITE_OUT: 'img/inv-reidite-pickaxe-out.png',
        INV_PICK_REIDITE_IN: 'img/inv-reidite-pickaxe-in.png',
        INV_PICK_REIDITE_CLICK: 'img/inv-reidite-pickaxe-click.png',
        PICK_REIDITED: 'img/day-reidite-pickaxe.png',
        PICK_REIDITEN: 'img/night-reidite-pickaxe.png',
        INV_HAMMER_REIDITE_OUT: 'img/inv-reidite-hammer-out.png',
        INV_HAMMER_REIDITE_IN: 'img/inv-reidite-hammer-in.png',
        INV_HAMMER_REIDITE_CLICK: 'img/inv-reidite-hammer-click.png',
        HAMMER_REIDITED: 'img/day-reidite-hammer.png',
        HAMMER_REIDITEN: 'img/night-reidite-hammer.png',
        WATERMELOND: 'img/day-watermelon1.png',
        WATERMELONN: 'img/night-watermelon1.png',
        DRIED_WATERMELOND: 'img/day-watermelon-dried1.png',
        DRIED_WATERMELONN: 'img/night-watermelon-dried1.png',
        INV_WATERMELON_OUT: 'img/inv-watermelon-out.png',
        INV_WATERMELON_IN: 'img/inv-watermelon-in.png',
        INV_WATERMELON_CLICK: 'img/inv-watermelon-click.png',
        BOATD: 'img/day-boat.png',
        BOATN: 'img/night-boat.png',
        BOAT_WAVED: 'img/day-boat-wave.png',
        BOAT_WAVEN: 'img/night-boat-wave.png',
        INV_BOAT_OUT: 'img/inv-boat-out.png',
        INV_BOAT_IN: 'img/inv-boat-in.png',
        INV_BOAT_CLICK: 'img/inv-boat-click.png',
        PLANED: 'img/day-plane.png',
        PLANEN: 'img/night-plane.png',
        INV_PLANE_OUT: 'img/inv-plane-out.png',
        INV_PLANE_IN: 'img/inv-plane-in.png',
        INV_PLANE_CLICK: 'img/inv-plane-click.png',
        SLEDD: 'img/day-sled.png',
        SLEDN: 'img/night-sled.png',
        SLED_WAVED: 'img/day-sled-wave.png',
        SLED_WAVEN: 'img/night-sled-wave.png',
        INV_SLED_OUT: 'img/inv-sled-out.png',
        INV_SLED_IN: 'img/inv-sled-in.png',
        INV_SLED_CLICK: 'img/inv-sled-click.png',
        PIRATE_HATD: 'img/day-pirate-hat.png',
        PIRATE_HATN: 'img/night-pirate-hat.png',
        INV_PIRATE_HAT_OUT: 'img/inv-pirate-hat-out.png',
        INV_PIRATE_HAT_IN: 'img/inv-pirate-hat-in.png',
        INV_PIRATE_HAT_CLICK: 'img/inv-pirate-hat-click.png',
        PENGUIND: 'img/day-penguin.png',
        PENGUINN: 'img/night-penguin.png',
        HURT_PENGUIN: 'img/hurt-penguin.png',
        INV_PENGUIN_FEATHER: 'img/inv-penguin-feather-click.png',
        INV_HAWK_FEATHER: 'img/inv-hawk-feather-click.png',
        BOARD: 'img/day-boar1.png',
        BOAR_TAMEDD: 'img/day-boar1-tamed.png',
        BOAR_ANGRYD: 'img/day-boar1-angry.png',
        BOARN: 'img/night-boar1.png',
        BOAR_TAMEDN: 'img/night-boar1-tamed.png',
        BOAR_ANGRYN: 'img/night-boar1-angry.png',
        INV_MOUNT_BOAR_OUT: 'img/inv-mount-boar-out.png',
        INV_MOUNT_BOAR_IN: 'img/inv-mount-boar-in.png',
        INV_MOUNT_BOAR_CLICK: 'img/inv-mount-boar-click.png',
        HURT_BOAR: 'img/day-hurt-boar1.png',
        BOAR_STEP: 'img/boar1-step.png',
        SADDLED: 'img/day-saddle1.png',
        SADDLEN: 'img/night-saddle1.png',
        INV_SADDLE_OUT: 'img/inv-saddle-out.png',
        INV_SADDLE_IN: 'img/inv-saddle-in.png',
        INV_SADDLE_CLICK: 'img/inv-saddle-click.png',
        WAND1D: 'img/day-magic-wand0.png',
        WAND1N: 'img/night-magic-wand0.png',
        LIGHT_WAND1D: 'img/day-light-wand1.png',
        LIGHT_WAND1N: 'img/night-light-wand1.png',
        INV_WAND1_OUT: 'img/inv-magic-wand0-out.png',
        INV_WAND1_IN: 'img/inv-magic-wand0-in.png',
        INV_WAND1_CLICK: 'img/inv-magic-wand0-click.png',
        WAND2D: 'img/day-magic-wand1.png',
        WAND2N: 'img/night-magic-wand1.png',
        LIGHT_WAND0D: 'img/day-light-wand0.png',
        LIGHT_WAND0N: 'img/night-light-wand0.png',
        INV_WAND2_OUT: 'img/inv-magic-wand1-out.png',
        INV_WAND2_IN: 'img/inv-magic-wand1-in.png',
        INV_WAND2_CLICK: 'img/inv-magic-wand1-click.png',
        FIREFLYD: 'img/day-firefly.png',
        FIREFLYN: 'img/night-firefly.png',
        HURT_FIREFLY: 'img/hurt-firefly.png',
        INV_FIREFLY_OUT: 'img/inv-firefly-out.png',
        INV_FIREFLY_IN: 'img/inv-firefly-in.png',
        INV_FIREFLY_CLICK: 'img/inv-firefly-click.png',
        BABY_DRAGOND: 'img/day-baby-dragon.png',
        BABY_DRAGONN: 'img/night-baby-dragon.png',
        BABY_DRAGON_ATTACKD: 'img/day-baby-dragon-angry.png',
        BABY_DRAGON_ATTACKN: 'img/night-baby-dragon-angry.png',
        BABY_DRAGON_TAMEDD: 'img/day-baby-dragon-tamed.png',
        BABY_DRAGON_TAMEDN: 'img/night-baby-dragon-tamed.png',
        BABY_DRAGON_WING_LEFT_ATTACKD: 'img/day-wing-dragon-left-angry.png',
        BABY_DRAGON_WING_LEFT_ATTACKN: 'img/night-dragon-wing-left-angry.png',
        BABY_DRAGON_WING_RIGHT_ATTACKD: 'img/day-wing-dragon-right-angry.png',
        BABY_DRAGON_WING_RIGHT_ATTACKN: 'img/night-dragon-wing-right-angry.png',
        BABY_DRAGON_WING_LEFT_TAMEDD: 'img/day-wing-dragon-left-tamed.png',
        BABY_DRAGON_WING_LEFT_TAMEDN: 'img/night-dragon-wing-left-tamed.png',
        BABY_DRAGON_WING_RIGHT_TAMEDD: 'img/day-wing-dragon-right-tamed.png',
        BABY_DRAGON_WING_RIGHT_TAMEDN: 'img/night-wing-dragon-right-tamed.png',
        BABY_DRAGON_WING_LEFTD: 'img/day-wing-dragon-left.png',
        BABY_DRAGON_WING_LEFTN: 'img/night-dragon-wing-left.png',
        BABY_DRAGON_WING_RIGHTD: 'img/day-wing-dragon-right.png',
        BABY_DRAGON_WING_RIGHTN: 'img/night-wing-dragon-right.png',
        HURT_BABY_DRAGON: 'img/hurt-baby-dragon.png',
        HURT_BABY_DRAGON_WING_LEFT: 'img/hurt-baby-dragon-wing-left.png',
        HURT_BABY_DRAGON_WING_RIGHT: 'img/hurt-baby-dragon-wing-right.png',
        INV_BABY_DRAGON_OUT: 'img/inv-baby-dragon-out.png',
        INV_BABY_DRAGON_IN: 'img/inv-baby-dragon-in.png',
        INV_BABY_DRAGON_CLICK: 'img/inv-baby-dragon-click.png',
        BABY_LAVAD: 'img/day-baby-lava.png',
        BABY_LAVAN: 'img/night-baby-lava.png',
        BABY_LAVA_ATTACKD: 'img/day-baby-lava-angry.png',
        BABY_LAVA_ATTACKN: 'img/night-baby-lava-angry.png',
        BABY_LAVA_TAMEDD: 'img/day-baby-lava-tamed.png',
        BABY_LAVA_TAMEDN: 'img/night-baby-lava-tamed.png',
        BABY_LAVA_WING_LEFT_ATTACKD: 'img/day-wing-lava-left-angry.png',
        BABY_LAVA_WING_LEFT_ATTACKN: 'img/night-wing-lava-left-angry.png',
        BABY_LAVA_WING_RIGHT_ATTACKD: 'img/day-wing-lava-right-angry.png',
        BABY_LAVA_WING_RIGHT_ATTACKN: 'img/night-wing-lava-right-angry.png',
        BABY_LAVA_WING_LEFT_TAMEDD: 'img/day-wing-lava-left-tamed.png',
        BABY_LAVA_WING_LEFT_TAMEDN: 'img/night-wing-lava-left-tamed.png',
        BABY_LAVA_WING_RIGHT_TAMEDD: 'img/day-wing-lava-right-tamed.png',
        BABY_LAVA_WING_RIGHT_TAMEDN: 'img/night-wing-lava-right-tamed.png',
        BABY_LAVA_WING_LEFTD: 'img/day-wing-lava-left.png',
        BABY_LAVA_WING_LEFTN: 'img/night-wing-lava-left.png',
        BABY_LAVA_WING_RIGHTD: 'img/day-wing-lava-right.png',
        BABY_LAVA_WING_RIGHTN: 'img/night-wing-lava-right.png',
        HURT_BABY_LAVA: 'img/hurt-baby-lava.png',
        HURT_BABY_LAVA_WING_LEFT: 'img/hurt-baby-lava-wing-left.png',
        HURT_BABY_LAVA_WING_RIGHT: 'img/hurt-baby-lava-wing-right.png',
        INV_BABY_LAVA_OUT: 'img/inv-baby-lava-out.png',
        INV_BABY_LAVA_IN: 'img/inv-baby-lava-in.png',
        INV_BABY_LAVA_CLICK: 'img/inv-baby-lava-click.png',
        HAWKD: 'img/day-falcon.png',
        HAWKN: 'img/night-falcon.png',
        HAWK_ATTACKD: 'img/day-falcon-angry.png',
        HAWK_ATTACKN: 'img/night-falcon-angry.png',
        HAWK_GROUNDD: 'img/day-falcon-ground.png',
        HAWK_GROUNDN: 'img/night-falcon-ground.png',
        HAWK_GROUND_ATTACKD: 'img/day-falcon-ground-angry.png',
        HAWK_GROUND_ATTACKN: 'img/night-falcon-ground-angry.png',
        HAWK_WING_LEFTD: 'img/day-falcon-wings-left.png',
        HAWK_WING_LEFTN: 'img/night-falcon-wings-left.png',
        HAWK_WING_RIGHTD: 'img/day-falcon-wings-right.png',
        HAWK_WING_RIGHTN: 'img/night-falcon-wings-right.png',
        HAWK_WING_LEFT_ATTACKD: 'img/day-falcon-angry-wings-left.png',
        HAWK_WING_LEFT_ATTACKN: 'img/night-falcon-angry-wings-left.png',
        HAWK_WING_RIGHT_ATTACKD: 'img/day-falcon-angry-wings-right.png',
        HAWK_WING_RIGHT_ATTACKN: 'img/night-falcon-angry-wings-right.png',
        HAWK_WING_LEFT_TAMEDD: 'img/day-falcon-wings-left-tamed.png',
        HAWK_WING_LEFT_TAMEDN: 'img/night-falcon-wings-left-tamed.png',
        HAWK_WING_RIGHT_TAMEDD: 'img/day-falcon-wings-right-tamed.png',
        HAWK_WING_RIGHT_TAMEDN: 'img/night-falcon-wings-right-tamed.png',
        HAWK_TAMEDD: 'img/day-falcon-tamed.png',
        HAWK_TAMEDN: 'img/night-falcon-tamed.png',
        HURT_HAWK_GROUND: 'img/hurt-falcon-ground.png',
        HURT_HAWK: 'img/hurt-falcon.png',
        HURT_HAWK_WING_LEFT: 'img/hurt-falcon-wings-left.png',
        HURT_HAWK_WING_RIGHT: 'img/hurt-falcon-wings-right.png',
        INV_HAWK_OUT: 'img/inv-falcon-out.png',
        INV_HAWK_IN: 'img/inv-falcon-in.png',
        INV_HAWK_CLICK: 'img/inv-falcon-click.png',
        CRAB_BOSSD: 'img/day-crab-boss.png',
        CRAB_BOSSN: 'img/night-crab-boss.png',
        CRAB_BOSS_ATTACKD: 'img/day-crab-boss-angry.png',
        CRAB_BOSS_ATTACKN: 'img/night-crab-boss-angry.png',
        CRAB_BOSS_TAMEDD: 'img/day-crab-boss-tamed.png',
        CRAB_BOSS_TAMEDN: 'img/night-crab-boss-tamed.png',
        CRAB_BOSS_CLAW_LEFT_ATTACKD: 'img/day-crab-boss-claw-left-attack.png',
        CRAB_BOSS_CLAW_LEFT_ATTACKN: 'img/night-crab-boss-claw-left-attack.png',
        CRAB_BOSS_CLAW_RIGHT_ATTACKD: 'img/day-crab-boss-claw-right-attack.png',
        CRAB_BOSS_CLAW_RIGHT_ATTACKN: 'img/night-crab-boss-claw-right-attack.png',
        CRAB_BOSS_CLAW_LEFT_TAMEDD: 'img/day-crab-boss-claw-left-tamed.png',
        CRAB_BOSS_CLAW_LEFT_TAMEDN: 'img/night-crab-boss-claw-left-tamed.png',
        CRAB_BOSS_CLAW_RIGHT_TAMEDD: 'img/day-crab-boss-claw-right-tamed.png',
        CRAB_BOSS_CLAW_RIGHT_TAMEDN: 'img/night-crab-boss-claw-right-tamed.png',
        CRAB_BOSS_CLAW_LEFTD: 'img/day-crab-boss-claw-left.png',
        CRAB_BOSS_CLAW_LEFTN: 'img/night-crab-boss-claw-left.png',
        CRAB_BOSS_CLAW_RIGHTD: 'img/day-crab-boss-claw-right.png',
        CRAB_BOSS_CLAW_RIGHTN: 'img/night-crab-boss-claw-right.png',
        HURT_CRAB_BOSS: 'img/hurt-crab-boss.png',
        HURT_CRAB_BOSS_CLAW_LEFT: 'img/hurt-crab-boss-claw-left.png',
        HURT_CRAB_BOSS_CLAW_RIGHT: 'img/hurt-crab-boss-claw-right.png',
        HEAL_CRAB_BOSS: 'img/heal-crab-boss.png',
        HEAL_CRAB_BOSS_CLAW_LEFT: 'img/heal-crab-boss-claw-left.png',
        HEAL_CRAB_BOSS_CLAW_RIGHT: 'img/heal-crab-boss-claw-right.png',
        CRAB_STEP: 'img/crab-step.png',
        INV_CRAB_BOSS_OUT: 'img/inv-crab-boss-out.png',
        INV_CRAB_BOSS_IN: 'img/inv-crab-boss-in.png',
        INV_CRAB_BOSS_CLICK: 'img/inv-crab-boss-click.png',
        CACTUSD: 'img/day-cactus10.png',
        CACTUSN: 'img/night-cactus10.png',
        INV_CACTUS_OUT: 'img/inv-cactus-out.png',
        INV_CACTUS_IN: 'img/inv-cactus-in.png',
        INV_CACTUS_CLICK: 'img/inv-cactus-click.png',
        SCORPIOND: 'img/day-scorpion.png',
        SCORPIONN: 'img/night-scorpion.png',
        SCORPION_HAND_LEFTD: 'img/day-scorpion-hand-left.png',
        SCORPION_HAND_LEFTN: 'img/night-scorpion-hand-left.png',
        SCORPION_HAND_RIGHTD: 'img/day-scorpion-hand-right.png',
        SCORPION_HAND_RIGHTN: 'img/night-scorpion-hand-right.png',
        HURT_SCORPION: 'img/hurt-scorpion.png',
        HURT_SCORPION_HAND_LEFT: 'img/hurt-scorpion-hand-left.png',
        HURT_SCORPION_HAND_RIGHT: 'img/hurt-scorpion-hand-right.png',
        VULTURED: 'img/day-vulture.png',
        VULTUREN: 'img/night-vulture.png',
        VULTURE_ATTACKD: 'img/day-vulture-angry.png',
        VULTURE_ATTACKN: 'img/night-vulture-angry.png',
        VULTURE_GROUNDD: 'img/day-vulture-ground.png',
        VULTURE_GROUNDN: 'img/night-vulture-ground.png',
        VULTURE_GROUND_ATTACKD: 'img/day-vulture-ground-angry.png',
        VULTURE_GROUND_ATTACKN: 'img/night-vulture-ground-angry.png',
        VULTURE_WING_LEFTD: 'img/day-vulture-wings-left.png',
        VULTURE_WING_LEFTN: 'img/night-vulture-wings-left.png',
        VULTURE_WING_RIGHTD: 'img/day-vulture-wings-right.png',
        VULTURE_WING_RIGHTN: 'img/night-vulture-wings-right.png',
        VULTURE_WING_LEFT_ATTACKD: 'img/day-vulture-angry-wings-left.png',
        VULTURE_WING_LEFT_ATTACKN: 'img/night-vulture-angry-wings-left.png',
        VULTURE_WING_RIGHT_ATTACKD: 'img/day-vulture-angry-wings-right.png',
        VULTURE_WING_RIGHT_ATTACKN: 'img/night-vulture-angry-wings-right.png',
        VULTURE_WING_LEFT_TAMEDD: 'img/day-vulture-wings-left-tamed.png',
        VULTURE_WING_LEFT_TAMEDN: 'img/night-vulture-wings-left-tamed.png',
        VULTURE_WING_RIGHT_TAMEDD: 'img/day-vulture-wings-right-tamed.png',
        VULTURE_WING_RIGHT_TAMEDN: 'img/night-vulture-wings-right-tamed.png',
        VULTURE_TAMEDD: 'img/day-vulture-tamed.png',
        VULTURE_TAMEDN: 'img/night-vulture-tamed.png',
        HURT_VULTURE_GROUND: 'img/hurt-vulture-ground.png',
        HURT_VULTURE: 'img/hurt-vulture.png',
        HURT_VULTURE_WING_LEFT: 'img/hurt-vulture-wings-left.png',
        HURT_VULTURE_WING_RIGHT: 'img/hurt-vulture-wings-right.png',
        ALOE_VERAD: 'img/day-aloe-vera.png',
        ALOE_VERAN: 'img/night-aloe-vera.png',
        INV_ALOE_VERA_OUT: 'img/inv-aloe-vera-out.png',
        INV_ALOE_VERA_IN: 'img/inv-aloe-vera-in.png',
        INV_ALOE_VERA_CLICK: 'img/inv-aloe-vera-click.png',
        ALOE_VERA_GROWND: 'img/day-aloe-vera-grown.png',
        ALOE_VERA_GROWNN: 'img/night-aloe-vera-grown.png',
        ALOE_VERA_DRIEDD: 'img/day-aloe-vera-dried.png',
        ALOE_VERAN_DRIEDN: 'img/night-aloe-vera-dried.png',
        TURBAN1D: 'img/day-turban1.png',
        TURBAN1N: 'img/night-turban1.png',
        TURBAN2D: 'img/day-turban2.png',
        TURBAN2N: 'img/night-turban2.png',
        INV_TURBAN2_OUT: 'img/inv-turban2-out.png',
        INV_TURBAN2_IN: 'img/inv-turban2-in.png',
        INV_TURBAN2_CLICK: 'img/inv-turban2-click.png',
        INV_TURBAN1_OUT: 'img/inv-turban1-out.png',
        INV_TURBAN1_IN: 'img/inv-turban1-in.png',
        INV_TURBAN1_CLICK: 'img/inv-turban1-click.png',
        PITCHFORK2D: 'img/day-pitchfork2.png',
        PITCHFORK2N: 'img/night-pitchfork2.png',
        INV_PITCHFORK2_OUT: 'img/inv-pitchfork2-out.png',
        INV_PITCHFORK2_IN: 'img/inv-pitchfork2-in.png',
        INV_PITCHFORK2_CLICK: 'img/inv-pitchfork2-click.png',
        INV_PITCHFORK_PART_CLICK: 'img/inv-gold-fork-click.png',
        INV_PILOT_GLASSES_CLICK: 'img/inv-pilot-glasses-click.png',
        PILOT_HELMETD: 'img/day-pilot-helmet.png',
        PILOT_HELMETN: 'img/night-pilot-helmet.png',
        INV_PILOT_HELMET_OUT: 'img/inv-pilot-helmet-out.png',
        INV_PILOT_HELMET_IN: 'img/inv-pilot-helmet-in.png',
        INV_PILOT_HELMET_CLICK: 'img/inv-pilot-helmet-click.png',
        SAND_WORM0D: 'img/day-sandworm0.png',
        SAND_WORM1D: 'img/day-sandworm1.png',
        SAND_WORM2D: 'img/day-sandworm2.png',
        SAND_WORM0N: 'img/night-sandworm0.png',
        SAND_WORM1N: 'img/night-sandworm1.png',
        SAND_WORM2N: 'img/night-sandworm2.png',
        HURT_SAND_WORM0: 'img/hurt-sandworm0.png',
        HURT_SAND_WORM1: 'img/hurt-sandworm1.png',
        HURT_SAND_WORM2: 'img/hurt-sandworm2.png',
        INV_VULTURE_FEATHER: 'img/inv-vulture-feather-click.png',
        EMERALD0D: 'img/day-emerald0.png',
        EMERALD0N: 'img/night-emerald0.png',
        EMERALD1D: 'img/day-emerald1.png',
        EMERALD1N: 'img/night-emerald1.png',
        EMERALD2D: 'img/day-emerald2.png',
        EMERALD2N: 'img/night-emerald2.png',
        INV_EMERALD: 'img/inv-emerald-click.png',
        INV_SANDWORM_JUICE_OUT: 'img/inv-sworm-juice-out.png',
        INV_SANDWORM_JUICE_IN: 'img/inv-sworm-juice-in.png',
        INV_SANDWORM_JUICE_CLICK: 'img/inv-sworm-juice-click.png',
        EMERALD_MACHINED: 'img/day-point-machine.png',
        EMERALD_MACHINEN: 'img/night-point-machine.png',
        EMERALD_MACHINE_HOLED: 'img/day-point-machine-hole.png',
        EMERALD_MACHINE_HOLEN: 'img/night-point-machine-hole.png',
        EMERALD_MACHINE_GROUNDD: 'img/day-point-machine-ground.png',
        EMERALD_MACHINE_GROUNDN: 'img/night-point-machine-ground.png',
        EMERALD_MACHINE_ROTATED: 'img/day-point-machine-rotate.png',
        EMERALD_MACHINE_ROTATEN: 'img/night-point-machine-rotate.png',
        INV_EMERALD_MACHINE_OUT: 'img/inv-point-machine-out.png',
        INV_EMERALD_MACHINE_IN: 'img/inv-point-machine-in.png',
        INV_EMERALD_MACHINE_CLICK: 'img/inv-point-machine-click.png',
        EXTRACTOR_MACHINE0_STONED: 'img/day-extractor-machine0-stone.png',
        EXTRACTOR_MACHINE0_STONEN: 'img/night-extractor-machine0-stone.png',
        EXTRACTOR_MACHINE_STONED: 'img/day-extractor-machine-stone.png',
        EXTRACTOR_MACHINE_STONEN: 'img/night-extractor-machine-stone.png',
        INV_EXTRACTOR_MACHINE_STONE_OUT: 'img/inv-extractor-machine-stone-out.png',
        INV_EXTRACTOR_MACHINE_STONE_IN: 'img/inv-extractor-machine-stone-in.png',
        INV_EXTRACTOR_MACHINE_STONE_CLICK: 'img/inv-extractor-machine-stone-click.png',
        EXTRACTOR_MACHINE0_GOLDD: 'img/day-extractor-machine0-gold.png',
        EXTRACTOR_MACHINE0_GOLDN: 'img/night-extractor-machine0-gold.png',
        EXTRACTOR_MACHINE_GOLDD: 'img/day-extractor-machine-gold.png',
        EXTRACTOR_MACHINE_GOLDN: 'img/night-extractor-machine-gold.png',
        INV_EXTRACTOR_MACHINE_GOLD_OUT: 'img/inv-extractor-machine-gold-out.png',
        INV_EXTRACTOR_MACHINE_GOLD_IN: 'img/inv-extractor-machine-gold-in.png',
        INV_EXTRACTOR_MACHINE_GOLD_CLICK: 'img/inv-extractor-machine-gold-click.png',
        EXTRACTOR_MACHINE0_DIAMONDD: 'img/day-extractor-machine0-diamond.png',
        EXTRACTOR_MACHINE0_DIAMONDN: 'img/night-extractor-machine0-diamond.png',
        EXTRACTOR_MACHINE_DIAMONDD: 'img/day-extractor-machine-diamond.png',
        EXTRACTOR_MACHINE_DIAMONDN: 'img/night-extractor-machine-diamond.png',
        INV_EXTRACTOR_MACHINE_DIAMOND_OUT: 'img/inv-extractor-machine-diamond-out.png',
        INV_EXTRACTOR_MACHINE_DIAMOND_IN: 'img/inv-extractor-machine-diamond-in.png',
        INV_EXTRACTOR_MACHINE_DIAMOND_CLICK: 'img/inv-extractor-machine-diamond-click.png',
        EXTRACTOR_MACHINE0_AMETHYSTD: 'img/day-extractor-machine0-amethyst.png',
        EXTRACTOR_MACHINE0_AMETHYSTN: 'img/night-extractor-machine0-amethyst.png',
        EXTRACTOR_MACHINE_AMETHYSTD: 'img/day-extractor-machine-amethyst.png',
        EXTRACTOR_MACHINE_AMETHYSTN: 'img/night-extractor-machine-amethyst.png',
        INV_EXTRACTOR_MACHINE_AMETHYST_OUT: 'img/inv-extractor-machine-amethyst-out.png',
        INV_EXTRACTOR_MACHINE_AMETHYST_IN: 'img/inv-extractor-machine-amethyst-in.png',
        INV_EXTRACTOR_MACHINE_AMETHYST_CLICK: 'img/inv-extractor-machine-amethyst-click.png',
        EXTRACTOR_MACHINE0_REIDITED: 'img/day-extractor-machine0-reidite.png',
        EXTRACTOR_MACHINE0_REIDITEN: 'img/night-extractor-machine0-reidite.png',
        EXTRACTOR_MACHINE_REIDITED: 'img/day-extractor-machine-reidite.png',
        EXTRACTOR_MACHINE_REIDITEN: 'img/night-extractor-machine-reidite.png',
        INV_EXTRACTOR_MACHINE_REIDITE_OUT: 'img/inv-extractor-machine-reidite-out.png',
        INV_EXTRACTOR_MACHINE_REIDITE_IN: 'img/inv-extractor-machine-reidite-in.png',
        INV_EXTRACTOR_MACHINE_REIDITE_CLICK: 'img/inv-extractor-machine-reidite-click.png',
        EXTRACTOR_CASES: 'img/extractor-cases.png',
        HEND: 'img/day-golden-hen.png',
        HENN: 'img/night-golden-hen.png',
        CHICKEND: 'img/day-golden-chicken.png',
        CHICKENN: 'img/night-golden-chicken.png',
        HURT_GOLDEN_HEN: 'img/hurt-golden-hen.png',
        HURT_GOLDEN_CHICKEN: 'img/hurt-golden-chicken.png',
        LOGO_INTERFACE: 'img/logo-interface.png',
        FOREST_MODE_HOVER: 'img/forest-mode-hover.png',
        NORMAL_MODE_HOVER: 'img/normal-mode-hover.png',
        VAMPIRE_MODE_HOVER: 'img/vampire-mode-hover.png',
        ZOMBIE_MODE_HOVER: 'img/zombie-mode-hover.png',
        MODE_COMMUNITY_HOVER: 'img/community-mode-hover2.png',
        MODE_EXPERIMENTAL_HOVER: 'img/experimental-mode-hover.png',
        ZOMBIE_MODE_OUT: 'img/zombie-mode-out.png',
        ZOMBIE_MODE_IN: 'img/zombie-mode-in.png',
        ZOMBIE_MODE_CLICK: 'img/zombie-mode-click.png',
        VAMPIRE_MODE_OUT: 'img/vampire-mode-out.png',
        VAMPIRE_MODE_IN: 'img/vampire-mode-in.png',
        VAMPIRE_MODE_CLICK: 'img/vampire-mode-click.png',
        NORMAL_MODE_OUT: 'img/normal-mode-out.png',
        NORMAL_MODE_IN: 'img/normal-mode-in.png',
        NORMAL_MODE_CLICK: 'img/normal-mode-click.png',
        FOREST_MODE_OUT: 'img/forest-mode-out.png',
        FOREST_MODE_IN: 'img/forest-mode-in.png',
        FOREST_MODE_CLICK: 'img/forest-mode-click.png',
        MODE_COMMUNITY_OUT: 'img/community-mode-out.png',
        MODE_COMMUNITY_IN: 'img/community-mode-in.png',
        MODE_COMMUNITY_CLICK: 'img/community-mode-click.png',
        MODE_EXPERIMENTAL_OUT: 'img/experimental-modes-out.png',
        MODE_EXPERIMENTAL_IN: 'img/experimental-modes-in.png',
        MODE_EXPERIMENTAL_CLICK: 'img/experimental-modes-click.png',
        YOUTUBE_BUTTON_OUT: 'img/youtube-button-out.png',
        YOUTUBE_BUTTON_IN: 'img/youtube-button-in.png',
        YOUTUBE_BUTTON_CLICK: 'img/youtube-button-click.png',
        WIKI_BUTTON_OUT: 'img/wiki-button-out.png',
        WIKI_BUTTON_IN: 'img/wiki-button-in.png',
        WIKI_BUTTON_CLICK: 'img/wiki-button-click.png',
        TWITTER_BUTTON_OUT: 'img/twitter-button-out.png',
        TWITTER_BUTTON_IN: 'img/twitter-button-in.png',
        TWITTER_BUTTON_CLICK: 'img/twitter-button-click.png',
        FACEBOOK_BUTTON_OUT: 'img/facebook-button-out.png',
        FACEBOOK_BUTTON_IN: 'img/facebook-button-in.png',
        FACEBOOK_BUTTON_CLICK: 'img/facebook-button-click.png',
        REDDIT_BUTTON_OUT: 'img/reddit-button-out.png',
        REDDIT_BUTTON_IN: 'img/reddit-button-in.png',
        REDDIT_BUTTON_CLICK: 'img/reddit-button-click.png',
        DISCORD_BUTTON_OUT: 'img/discord-button-out.png',
        DISCORD_BUTTON_IN: 'img/discord-button-in.png',
        DISCORD_BUTTON_CLICK: 'img/discord-button-click.png',
        TERMINAL_BUTTON_OUT: 'img/terminal-button-out.png',
        TERMINAL_BUTTON_IN: 'img/terminal-button-in.png',
        TERMINAL_BUTTON_CLICK: 'img/terminal-button-click.png',
        RESTART_OUT: 'img/restart-out.png',
        RESTART_IN: 'img/restart-in.png',
        RESTART_CLICK: 'img/restart-click.png',
        GUIDE_OUT: 'img/guide-out.png',
        GUIDE_IN: 'img/guide-in.png',
        GUIDE_CLICK: 'img/guide-click.png',
        COPY_PASTE_OUT: 'img/copy-paste-out.png',
        COPY_PASTE_IN: 'img/copy-paste-in.png',
        COPY_PASTE_CLICK: 'img/copy-paste-click.png',
        LINKS_BG: 'img/link-buttons-bg.png',
        CHANGELOG_BOX: 'img/changelog-box2.png',
        CHANGELOG_BUTTON_OUT: 'stk/changelog.png',
        DEVASTIO_BUTTON_OUT: 'img/banner-devast.png',
        PROFILE_BUTTON_OUT: 'img/profile-button-out.png',
        PROFILE_BUTTON_IN: 'img/profile-button-in.png',
        PROFILE_BUTTON_CLICK: 'img/profile-button-click.png',
        LOGIN_BUTTON_OUT: 'img/login-button-out.png',
        LOGIN_BUTTON_IN: 'img/login-button-in.png',
        LOGIN_BUTTON_CLICK: 'img/login-button-click.png',
        LOGIN_GOOGLE_OUT: 'img/login-google-out.png',
        LOGIN_GOOGLE_IN: 'img/login-google-in.png',
        LOGIN_GOOGLE_CLICK: 'img/login-google-click.png',
        LOGIN_FACEBOOK_OUT: 'img/login-facebook-out.png',
        LOGIN_FACEBOOK_IN: 'img/login-facebook-in.png',
        LOGIN_FACEBOOK_CLICK: 'img/login-facebook-click.png',
        ACCOUNT_BOX: 'img/account-box.png',
        ACCOUNT_MAINTENANCE: 'img/account-under-maintenance.png',
        CLOSE_BUTTON_OUT: 'img/close-button-account-out.png',
        CLOSE_BUTTON_IN: 'img/close-button-account-in.png',
        CLOSE_BUTTON_CLICK: 'img/close-button-account-click.png',
        PLAY_BUTTON_OUT: 'img/play-button-out.png',
        PLAY_BUTTON_IN: 'img/play-button-in.png',
        PLAY_BUTTON_CLICK: 'img/play-button-click.png',
        MODIFY_NAME_OUT: 'img/modify-name-out.png',
        MODIFY_NAME_IN: 'img/modify-name-in.png',
        MODIFY_NAME_CLICK: 'img/modify-name-click.png',
        YES_BUTTON_OUT: 'img/yes-button-out.png',
        YES_BUTTON_IN: 'img/yes-button-in.png',
        YES_BUTTON_CLICK: 'img/yes-button-click.png',
        YES_300_BUTTON_OUT: 'img/yes-300-button-out.png',
        YES_300_BUTTON_IN: 'img/yes-300-button-in.png',
        YES_300_BUTTON_CLICK: 'img/yes-300-button-click.png',
        NO_BUTTON_OUT: 'img/no-button-out.png',
        NO_BUTTON_IN: 'img/no-button-in.png',
        NO_BUTTON_CLICK: 'img/no-button-click.png',
        NO_THANKS_BUTTON_OUT: 'img/no-thanks-button-out.png',
        NO_THANKS_BUTTON_IN: 'img/no-thanks-button-in.png',
        NO_THANKS_BUTTON_CLICK: 'img/no-thanks-button-click.png',
        SHOP_BUTTON_OUT: 'img/shop-button-out.png',
        SHOP_BUTTON_IN: 'img/shop-button-in.png',
        SHOP_BUTTON_CLICK: 'img/shop-button-click.png',
        LOGOUT_OUT: 'img/logout-out.png',
        LOGOUT_IN: 'img/logout-in.png',
        LOGOUT_CLICK: 'img/logout-click.png',
        TERMS_BUTTON_OUT: 'img/terms-button-out.png',
        TERMS_BUTTON_IN: 'img/terms-button-in.png',
        TERMS_BUTTON_CLICK: 'img/terms-button-click.png',
        TUTORIAL_ICON: 'img/tutorial-icon.png',
        SKINS_ICON: 'img/skins-icon.png',
        SHOP_ICON: 'img/shop-icon.png',
        PAINT_ICON: 'img/paint-icon.png',
        LEADERBOARD_ICON: 'img/leaderboard-icon.png',
        START_ICON: 'img/start-icon.png',
        PROFILE_ICON: 'img/profile-icon.png',
        SERVER_ACCESS_ICON: 'img/server-access-icon2.png',
        ICONS_BG_BUTTON_OUT: 'img/button-homepage-bg-out.png',
        ICONS_BG_BUTTON_IN: 'img/button-homepage-bg-in.png',
        ICONS_BG_BUTTON_CLICK: 'img/button-homepage-bg-click.png',
        ICONS_BOTTOM_BG_BUTTON_OUT: 'img/button-bottom-homepage-bg-out.png',
        ICONS_BOTTOM_BG_BUTTON_IN: 'img/button-bottom-homepage-bg-in.png',
        ICONS_BOTTOM_BG_BUTTON_CLICK: 'img/button-bottom-homepage-bg-click.png',
        AVATAR_RESUME: 'img/lvl-player.png',
        AVATAR_LVL1: 'img/avatar-player.png',
        AVATAR_LVL2: 'img/avatar-player1.png',
        AVATAR_LVL3: 'img/avatar-player2.png',
        AVATAR_LVL4: 'img/avatar-player3.png',
        AVATAR_LVL5: 'img/avatar-player4.png',
        AVATAR_LVL6: 'img/avatar-player5.png',
        AVATAR_LVL7: 'img/avatar-player6.png',
        AVATAR_LVL8: 'img/avatar-player7.png',
        AVATAR_LVL9: 'img/avatar-player8.png',
        AVATAR_LVL10: 'img/avatar-player9.png',
        AVATAR_LVL11: 'img/avatar-player10.png',
        AVATAR_LVL12: 'img/avatar-player11.png',
        AVATAR_LVL13: 'img/avatar-player12.png',
        AVATAR_LVL14: 'img/avatar-player13.png',
        AVATAR_LVL15: 'img/avatar-player14.png',
        AVATAR_LVL16: 'img/avatar-player14.png',
        AVATAR_LVL17: 'img/avatar-player14.png',
        AVATAR_LVL18: 'img/avatar-player14.png',
        GOLDEN_BREAD: 'img/golden-bread.png',
        BUY_BREAD_OUT: 'img/buy-bread-out.png',
        BUY_BREAD_IN: 'img/buy-bread-in.png',
        BUY_BREAD_CLICK: 'img/buy-bread-click.png',
        GAUGE: 'img/gauge.png',
        SEASON_4: 'img/season-4-out.png',
        SEASON_4_IN: 'img/season-4-in.png',
        SEASON_4_OUT: 'img/season-4-click.png',
        SEASON4_BOX: 'img/season4-box.png',
        SEASON_5: 'img/season-5-out.png',
        SEASON_5_IN: 'img/season-5-in.png',
        SEASON_5_OUT: 'img/season-5-click.png',
        SEASON5_BOX: 'img/season5-box.png',
        PROFILE_BOX: 'img/profile2-box.png',
        SKINS_BOX: 'img/skins-box.png',
        SHOP_BOX: 'img/shop-box.png',
        PRIVATE_SERVER_BOX: 'img/private-server-box.png',
        SERVER_LOCATION_BOX: 'img/location-box.png',
        SERVER_DURATION_BOX: 'img/server-duration-box.png',
        TUTORIAL_BOX: 'img/tutorial-box.png',
        LEADERBOARD_BOX: 'img/leaderboard1-box.png',
        BUY_BREAD_BOX: 'img/buy-breads-box.png',
        BAG_BOX: 'img/bag-box.png',
        CRATE_BOX: 'img/deadbox-box.png',
        BOOK_BOX: 'img/book-box.png',
        ACCESSORIES_BOX: 'img/accessories-box.png',
        CUSTOM_SKIN_BOX: 'img/customskin-box.png',
        BAG_REMAIN_BOX: 'img/bag-lasts.png',
        SERVER_REMAIN_BOX: 'img/server-lasts.png',
        SERVER_ACCESS_BOX: 'img/server-access-box2.png',
        LOOT_BOX: 'img/lootbox-box.png',
        CHANGE_NICKNAME1_BOX: 'img/change-nickname0.png',
        CHANGE_NICKNAME0_BOX: 'img/change-nickname1.png',
        CHEATING_BOX: 'img/cheating-box.png',
        DAILY_QUEST_BOX: 'img/daily-quest-box.png',
        DAILY_5_BREAD: 'img/daily-5-bread.png',
        DAILY_10_BREAD: 'img/daily-10-bread.png',
        DAILY_VALID: 'img/daily-valid.png',
        NORMAL_PROFILE_OUT: 'img/normal-profile-out.png',
        NORMAL_PROFILE_IN: 'img/normal-profile-in.png',
        NORMAL_PROFILE_CLICK: 'img/normal-profile-click.png',
        FOREST_PROFILE_OUT: 'img/forest-profile-out.png',
        FOREST_PROFILE_IN: 'img/forest-profile-in.png',
        FOREST_PROFILE_CLICK: 'img/forest-profile-click.png',
        ZOMBIE_PROFILE_OUT: 'img/zombie-profile-out.png',
        ZOMBIE_PROFILE_IN: 'img/zombie-profile-in.png',
        ZOMBIE_PROFILE_CLICK: 'img/zombie-profile-click.png',
        VAMPIRE_PROFILE_OUT: 'img/vampire-profile-out.png',
        VAMPIRE_PROFILE_IN: 'img/vampire-profile-in.png',
        VAMPIRE_PROFILE_CLICK: 'img/vampire-profile-click.png',
        TOTAL_PROFILE_OUT: 'img/total-profile-out.png',
        TOTAL_PROFILE_IN: 'img/total-profile-in.png',
        TOTAL_PROFILE_CLICK: 'img/total-profile-click.png',
        SEASON1_PROFILE_OUT: 'img/season1-profile-out.png',
        SEASON1_PROFILE_IN: 'img/season1-profile-in.png',
        SEASON1_PROFILE_CLICK: 'img/season1-profile-click.png',
        SEASON2_PROFILE_OUT: 'img/season2-profile-out.png',
        SEASON2_PROFILE_IN: 'img/season2-profile-in.png',
        SEASON2_PROFILE_CLICK: 'img/season2-profile-click.png',
        SEASON3_PROFILE_OUT: 'img/season3-profile-out.png',
        SEASON3_PROFILE_IN: 'img/season3-profile-in.png',
        SEASON3_PROFILE_CLICK: 'img/season3-profile-click.png',
        SEASON4_PROFILE_OUT: 'img/season4-profile-out.png',
        SEASON4_PROFILE_IN: 'img/season4-profile-in.png',
        SEASON4_PROFILE_CLICK: 'img/season4-profile-click.png',
        SEASON5_PROFILE_OUT: 'img/season5-profile-out.png',
        SEASON5_PROFILE_IN: 'img/season5-profile-in.png',
        SEASON5_PROFILE_CLICK: 'img/season5-profile-click.png',
        LOCKED_SKIN_ALERT: 'img/locked-skin-alert.png',
        LOCKED_CUSTOM_ALERT: 'img/locked-custom-alert.png',
        RED_LOCKED: 'img/bg-red-locked.png',
        SKIN_BUTTON_OUT: 'img/skin-button-out.png',
        SKIN_BUTTON_IN: 'img/skin-button-in.png',
        SKIN_BUTTON_CLICK: 'img/skin-button-click.png',
        ACCESSORY_BUTTON_OUT: 'img/accessory-button-out.png',
        ACCESSORY_BUTTON_IN: 'img/accessory-button-in.png',
        ACCESSORY_BUTTON_CLICK: 'img/accessory-button-click.png',
        BAG_BUTTON_OUT: 'img/bag-button-out.png',
        BAG_BUTTON_IN: 'img/bag-button-in.png',
        BAG_BUTTON_CLICK: 'img/bag-button-click.png',
        BOOK_BUTTON_OUT: 'img/book-button-out.png',
        BOOK_BUTTON_IN: 'img/book-button-in.png',
        BOOK_BUTTON_CLICK: 'img/book-button-click.png',
        CRATE_BUTTON_OUT: 'img/deadbox-button-out.png',
        CRATE_BUTTON_IN: 'img/deadbox-button-in.png',
        CRATE_BUTTON_CLICK: 'img/deadbox-button-click.png',
        LOOT_BUTTON_OUT: 'img/loot-button-out.png',
        LOOT_BUTTON_IN: 'img/loot-button-in.png',
        LOOT_BUTTON_CLICK: 'img/loot-button-click.png',
        FREE_ITEM_OUT: 'img/free-item-out.png',
        FREE_ITEM_IN: 'img/free-item-in.png',
        FREE_ITEM_CLICK: 'img/free-item-click.png',
        WOOD_ITEM_OUT: 'img/wood-item-out.png',
        WOOD_ITEM_IN: 'img/wood-item-in.png',
        WOOD_ITEM_CLICK: 'img/wood-item-click.png',
        STONE_ITEM_OUT: 'img/stone-item.png',
        STONE_ITEM_IN: 'img/stone-item-in.png',
        STONE_ITEM_CLICK: 'img/stone-item-click.png',
        GOLD_ITEM_OUT: 'img/gold-item.png',
        GOLD_ITEM_IN: 'img/gold-item-in.png',
        GOLD_ITEM_CLICK: 'img/gold-item-click.png',
        DIAMOND_ITEM_OUT: 'img/diamond-item.png',
        DIAMOND_ITEM_IN: 'img/diamond-item-in.png',
        DIAMOND_ITEM_CLICK: 'img/diamond-item-click.png',
        AMETHYST_ITEM_OUT: 'img/amethyst-item.png',
        AMETHYST_ITEM_IN: 'img/amethyst-item-in.png',
        AMETHYST_ITEM_CLICK: 'img/amethyst-item-click.png',
        REIDITE_ITEM_OUT: 'img/reidite-item.png',
        REIDITE_ITEM_IN: 'img/reidite-item-in.png',
        REIDITE_ITEM_CLICK: 'img/reidite-item-click.png',
        SPECIAL_ITEM_OUT: 'img/special-item-out.png',
        SPECIAL_ITEM_IN: 'img/special-item-in.png',
        SPECIAL_ITEM_CLICK: 'img/special-item-click.png',
        LEVEL_ITEM_OUT: 'img/level-item-out.png',
        LEVEL_ITEM_IN: 'img/level-item-in.png',
        LEVEL_ITEM_CLICK: 'img/level-item-click.png',
        SKIN_PREVIOUS_OUT: 'img/skin-previous-out.png',
        SKIN_PREVIOUS_IN: 'img/skin-previous-in.png',
        SKIN_PREVIOUS_CLICK: 'img/skin-previous-click.png',
        SKIN_NEXT_OUT: 'img/skin-next-out.png',
        SKIN_NEXT_IN: 'img/skin-next-in.png',
        SKIN_NEXT_CLICK: 'img/skin-next-click.png',
        BACK_BUTTON_OUT: 'img/back-button-out.png',
        BACK_BUTTON_IN: 'img/back-button-in.png',
        BACK_BUTTON_CLICK: 'img/back-button-click.png',
        GET_MORE_BUTTON_OUT: 'img/get-more-button-out.png',
        GET_MORE_BUTTON_IN: 'img/get-more-button-in.png',
        GET_MORE_BUTTON_CLICK: 'img/get-more-button-click.png',
        CURRENCY1_OUT: 'img/currency1-out.png',
        CURRENCY1_IN: 'img/currency1-in.png',
        CURRENCY1_CLICK: 'img/currency1-click.png',
        CURRENCY2_OUT: 'img/currency2-out.png',
        CURRENCY2_IN: 'img/currency2-in.png',
        CURRENCY2_CLICK: 'img/currency2-click.png',
        CURRENCY3_OUT: 'img/currency3-out.png',
        CURRENCY3_IN: 'img/currency3-in.png',
        CURRENCY3_CLICK: 'img/currency3-click.png',
        CURRENCY4_OUT: 'img/currency4-out.png',
        CURRENCY4_IN: 'img/currency4-in.png',
        CURRENCY4_CLICK: 'img/currency4-click.png',
        CURRENCY5_OUT: 'img/currency5-out.png',
        CURRENCY5_IN: 'img/currency5-in.png',
        CURRENCY5_CLICK: 'img/currency5-click.png',
        PRICE1_OUT: 'img/price1-out.png',
        PRICE1_IN: 'img/price1-in.png',
        PRICE1_CLICK: 'img/price1-click.png',
        PRICE2_OUT: 'img/price2-out.png',
        PRICE2_IN: 'img/price2-in.png',
        PRICE2_CLICK: 'img/price2-click.png',
        PRICE3_OUT: 'img/price3-out.png',
        PRICE3_IN: 'img/price3-in.png',
        PRICE3_CLICK: 'img/price3-click.png',
        PRICE4_OUT: 'img/price4-out.png',
        PRICE4_IN: 'img/price4-in.png',
        PRICE4_CLICK: 'img/price4-click.png',
        PRICE5_OUT: 'img/price5-out.png',
        PRICE5_IN: 'img/price5-in.png',
        PRICE5_CLICK: 'img/price5-click.png',
        BUY_PRIVATE_SERVER_OUT: 'img/buy-private-server-out.png',
        BUY_PRIVATE_SERVER_IN: 'img/buy-private-server-in.png',
        BUY_PRIVATE_SERVER_CLICK: 'img/buy-private-server-click.png',
        ATLANTA_OUT: 'img/atlanta-out.png',
        ATLANTA_IN: 'img/atlanta-in.png',
        ATLANTA_CLICK: 'img/atlanta-click.png',
        DALLAS_OUT: 'img/dallas-out.png',
        DALLAS_IN: 'img/dallas-in.png',
        DALLAS_CLICK: 'img/dallas-click.png',
        FREMONT_OUT: 'img/fremont-out.png',
        FREMONT_IN: 'img/fremont-in.png',
        FREMONT_CLICK: 'img/fremont-click.png',
        NEWARK_OUT: 'img/newark-out.png',
        NEWARK_IN: 'img/newark-in.png',
        NEWARK_CLICK: 'img/newark-click.png',
        TORONTO_OUT: 'img/toronto-out.png',
        TORONTO_IN: 'img/toronto-in.png',
        TORONTO_CLICK: 'img/toronto-click.png',
        SINGAPORE_OUT: 'img/singapore-out.png',
        SINGAPORE_IN: 'img/singapore-in.png',
        SINGAPORE_CLICK: 'img/singapore-click.png',
        FRANKFURT_OUT: 'img/frankfurt-out.png',
        FRANKFURT_IN: 'img/frankfurt-in.png',
        FRANKFURT_CLICK: 'img/frankfurt-click.png',
        LONDON_OUT: 'img/london-out.png',
        LONDON_IN: 'img/london-in.png',
        LONDON_CLICK: 'img/london-click.png',
        MUMBAI_OUT: 'img/mumbai-out.png',
        MUMBAI_IN: 'img/mumbai-in.png',
        MUMBAI_CLICK: 'img/mumbai-click.png',
        TOKYO_OUT: 'img/tokyo-out.png',
        TOKYO_IN: 'img/tokyo-in.png',
        TOKYO_CLICK: 'img/tokyo-click.png',
        YES_LOCATION_OUT: 'img/yes-location-out.png',
        YES_LOCATION_IN: 'img/yes-location-in.png',
        YES_LOCATION_CLICK: 'img/yes-location-click.png',
        DAYS3_OUT: 'img/3days-out.png',
        DAYS3_IN: 'img/3days-in.png',
        DAYS3_CLICK: 'img/3days-click.png',
        DAYS7_OUT: 'img/7days-out.png',
        DAYS7_IN: 'img/7days-in.png',
        DAYS7_CLICK: 'img/7days-click.png',
        DAYS30_OUT: 'img/30days-out.png',
        DAYS30_IN: 'img/30days-in.png',
        DAYS30_CLICK: 'img/30days-click.png',
        DAYS90_OUT: 'img/90days-out.png',
        DAYS90_IN: 'img/90days-in.png',
        DAYS90_CLICK: 'img/90days-click.png',
        SPIN1: 'img/spin1.png',
        SPIN2: 'img/spin2.png',
        SPIN3: 'img/spin3.png',
        SPIN4: 'img/spin4.png',
        SPIN5: 'img/spin5.png',
        SPIN6: 'img/spin6.png',
        ARROW_SPIN: 'img/arrow-spin.png',
        SPIN_BUTTON_1_OUT: 'img/spin-button-1-out.png',
        SPIN_BUTTON_1_IN: 'img/spin-button-1-in.png',
        SPIN_BUTTON_1_CLICK: 'img/spin-button-1-click.png',
        SPIN_BUTTON_2_OUT: 'img/spin-button-2-out.png',
        SPIN_BUTTON_2_IN: 'img/spin-button-2-in.png',
        SPIN_BUTTON_2_CLICK: 'img/spin-button-2-click.png',
        SPIN_BUTTON_3_OUT: 'img/spin-button-3-out.png',
        SPIN_BUTTON_3_IN: 'img/spin-button-3-in.png',
        SPIN_BUTTON_3_CLICK: 'img/spin-button-3-click.png',
        SPIN_BUTTON_4_OUT: 'img/spin-button-4-out.png',
        SPIN_BUTTON_4_IN: 'img/spin-button-4-in.png',
        SPIN_BUTTON_4_CLICK: 'img/spin-button-4-click.png',
        SPIN_BUTTON_5_OUT: 'img/spin-button-5-out.png',
        SPIN_BUTTON_5_IN: 'img/spin-button-5-in.png',
        SPIN_BUTTON_5_CLICK: 'img/spin-button-5-click.png',
        SPIN_LIGHT: 'img/spin-light.png',
        TUTO_WIKI_OUT: 'img/tuto-wiki-out.png',
        TUTO_WIKI_IN: 'img/tuto-wiki-in.png',
        TUTO_WIKI_CLICK: 'img/tuto-wiki-click.png',
        TUTO_PREVIOUS_OUT: 'img/tuto-previous-out.png',
        TUTO_PREVIOUS_IN: 'img/tuto-previous-in.png',
        TUTO_PREVIOUS_CLICK: 'img/tuto-previous-click.png',
        TUTO_NEXT_OUT: 'img/tuto-next-out.png',
        TUTO_NEXT_IN: 'img/tuto-next-in.png',
        TUTO_NEXT_CLICK: 'img/tuto-next-click.png',
        TIME_LEADERBOARD_OUT: 'img/time-leaderboard-out.png',
        TIME_LEADERBOARD_IN: 'img/time-leaderboard-in.png',
        TIME_LEADERBOARD_CLICK: 'img/time-leaderboard-click.png',
        SCORE_LEADERBOARD_OUT: 'img/score-leaderboard-out.png',
        SCORE_LEADERBOARD_IN: 'img/score-leaderboard-in.png',
        SCORE_LEADERBOARD_CLICK: 'img/score-leaderboard-click.png',
        LVL_LEADERBOARD_OUT: 'img/lvl-leaderboard-out.png',
        LVL_LEADERBOARD_IN: 'img/lvl-leaderboard-in.png',
        LVL_LEADERBOARD_CLICK: 'img/lvl-leaderboard-click.png',
        KILL_LEADERBOARD_OUT: 'img/kill-leaderboard-out.png',
        KILL_LEADERBOARD_IN: 'img/kill-leaderboard-in.png',
        KILL_LEADERBOARD_CLICK: 'img/kill-leaderboard-click.png',
        ALL_LEADERBOARD_OUT: 'img/all-leaderboard-out.png',
        ALL_LEADERBOARD_IN: 'img/all-leaderboard-in.png',
        ALL_LEADERBOARD_CLICK: 'img/all-leaderboard-click.png',
        TODAY_LEADERBOARD_OUT: 'img/today-leaderboard-out.png',
        TODAY_LEADERBOARD_IN: 'img/today-leaderboard-in.png',
        TODAY_LEADERBOARD_CLICK: 'img/today-leaderboard-click.png',
        WEEK_LEADERBOARD_OUT: 'img/week-leaderboard-out.png',
        WEEK_LEADERBOARD_IN: 'img/week-leaderboard-in.png',
        WEEK_LEADERBOARD_CLICK: 'img/week-leaderboard-click.png',
        SEASON1_LEADERBOARD_OUT: 'img/season1-out.png',
        SEASON1_LEADERBOARD_IN: 'img/season1-in.png',
        SEASON1_LEADERBOARD_CLICK: 'img/season1-click.png',
        SEASON2_LEADERBOARD_OUT: 'img/season2--out.png',
        SEASON2_LEADERBOARD_IN: 'img/season2--in.png',
        SEASON2_LEADERBOARD_CLICK: 'img/season2--click.png',
        SEASON3_LEADERBOARD_OUT: 'img/season3-out.png',
        SEASON3_LEADERBOARD_IN: 'img/season3-in.png',
        SEASON3_LEADERBOARD_CLICK: 'img/season3-click.png',
        SEASON4_LEADERBOARD_OUT: 'img/season4-out.png',
        SEASON4_LEADERBOARD_IN: 'img/season4-in.png',
        SEASON4_LEADERBOARD_CLICK: 'img/season4-click.png',
        SEASON5_LEADERBOARD_OUT: 'img/season5-out.png',
        SEASON5_LEADERBOARD_IN: 'img/season5-in.png',
        SEASON5_LEADERBOARD_CLICK: 'img/season5-click.png',
        TOTAL_LEAD_OUT: 'img/total-lead-out.png',
        TOTAL_LEAD_IN: 'img/total-lead-in.png',
        TOTAL_LEAD_CLICK: 'img/total-lead-click.png',
        NORMAL_LEAD_OUT: 'img/normal-lead-out.png',
        NORMAL_LEAD_IN: 'img/normal-lead-in.png',
        NORMAL_LEAD_CLICK: 'img/normal-lead-click.png',
        FOREST_LEAD_OUT: 'img/forest-lead-out.png',
        FOREST_LEAD_IN: 'img/forest-lead-in.png',
        FOREST_LEAD_CLICK: 'img/forest-lead-click.png',
        VAMPIRE_LEAD_OUT: 'img/vampire-lead-out.png',
        VAMPIRE_LEAD_IN: 'img/vampire-lead-in.png',
        VAMPIRE_LEAD_CLICK: 'img/vampire-lead-click.png',
        ZOMBIE_LEAD_OUT: 'img/zombie-lead-out.png',
        ZOMBIE_LEAD_IN: 'img/zombie-lead-in.png',
        ZOMBIE_LEAD_CLICK: 'img/zombie-lead-click.png',
        LEVEL5D: 'img/day-level5.png',
        LEVEL5N: 'img/night-level5.png',
        LEVEL10D: 'img/day-level10.png',
        LEVEL10N: 'img/night-level10.png',
        LEVEL15D: 'img/day-level15.png',
        LEVEL15N: 'img/night-level15.png',
        LEVEL20D: 'img/day-level20.png',
        LEVEL20N: 'img/night-level20.png',
        LEVEL25D: 'img/day-level25.png',
        LEVEL25N: 'img/night-level25.png',
        LEVEL30D: 'img/day-level30.png',
        LEVEL30N: 'img/night-level30.png',
        LEVEL35D: 'img/day-level35.png',
        LEVEL35N: 'img/night-level35.png',
        LEVEL40D: 'img/day-level40.png',
        LEVEL40N: 'img/night-level40.png',
        LEVEL45D: 'img/day-level45.png',
        LEVEL45N: 'img/night-level45.png',
        LEVEL50D: 'img/day-level50.png',
        LEVEL50N: 'img/night-level50.png',
        LEVEL55D: 'img/day-level55.png',
        LEVEL55N: 'img/night-level55.png',
        LEVEL60D: 'img/day-level60.png',
        LEVEL60N: 'img/night-level60.png',
        SKIN_DEVASTD: 'img/day-skin-devast0.png',
        SKIN_DEVASTN: 'img/night-skin-devast0.png',
        HAND_DEVASTD: 'img/day-hand-devaster.png',
        HAND_DEVASTN: 'img/night-hand-devaster.png',
        SKIN_STARD: 'img/day-skin-star0.png',
        SKIN_STARN: 'img/night-skin-star0.png',
        HAND_STARD: 'img/day-hand-star0.png',
        HAND_STARN: 'img/night-hand-star0.png',
        SKIN_VAMPIRED: 'img/day-vampire.png',
        SKIN_VAMPIREN: 'img/night-vampire.png',
        HAND_VAMPIRED: 'img/day-hand-vampire.png',
        HAND_VAMPIREN: 'img/night-hand-vampire.png',
        SKIN_ZOMBIED: 'img/day-zombie.png',
        SKIN_ZOMBIEN: 'img/night-zombie.png',
        HAND_ZOMBIED: 'img/day-hand-zombie.png',
        HAND_ZOMBIEN: 'img/night-hand-zombie.png',
        SKIN_ROBOTD: 'img/day-skin113.png',
        SKIN_ROBOTN: 'img/night-skin113.png',
        HAND_ROBOTD: 'img/day-hand-skin113.png',
        HAND_ROBOTN: 'img/night-hand-skin113.png',
        SKIN0D: 'img/day-skin0.png',
        SKIN0N: 'img/night-skin0.png',
        SKIN1D: 'img/day-skin1.png',
        SKIN1N: 'img/night-skin1.png',
        SKIN2D: 'img/day-skin2.png',
        SKIN2N: 'img/night-skin2.png',
        SKIN3D: 'img/day-skin3.png',
        SKIN3N: 'img/night-skin3.png',
        SKIN4D: 'img/day-skin4.png',
        SKIN4N: 'img/night-skin4.png',
        SKIN5D: 'img/day-skin5.png',
        SKIN5N: 'img/night-skin5.png',
        SKIN6D: 'img/day-skin6.png',
        SKIN6N: 'img/night-skin6.png',
        SKIN7D: 'img/day-skin7.png',
        SKIN7N: 'img/night-skin7.png',
        SKIN8D: 'img/day-skin8.png',
        SKIN8N: 'img/night-skin8.png',
        SKIN9D: 'img/day-skin9.png',
        SKIN9N: 'img/night-skin9.png',
        SKIN10D: 'img/day-skin10.png',
        SKIN10N: 'img/night-skin10.png',
        SKIN11D: 'img/day-skin11.png',
        SKIN11N: 'img/night-skin11.png',
        SKIN12D: 'img/day-skin12.png',
        SKIN12N: 'img/night-skin12.png',
        SKIN13D: 'img/day-skin13.png',
        SKIN13N: 'img/night-skin13.png',
        SKIN14D: 'img/day-skin14.png',
        SKIN14N: 'img/night-skin14.png',
        SKIN15D: 'img/day-skin15.png',
        SKIN15N: 'img/night-skin15.png',
        SKIN16D: 'img/day-skin16.png',
        SKIN16N: 'img/night-skin16.png',
        SKIN17D: 'img/day-skin17.png',
        SKIN17N: 'img/night-skin17.png',
        SKIN18D: 'img/day-skin18.png',
        SKIN18N: 'img/night-skin18.png',
        SKIN19D: 'img/day-skin19.png',
        SKIN19N: 'img/night-skin19.png',
        SKIN20D: 'img/day-skin20.png',
        SKIN20N: 'img/night-skin20.png',
        SKIN21D: 'img/day-skin21.png',
        SKIN21N: 'img/night-skin21.png',
        SKIN22D: 'img/day-skin22.png',
        SKIN22N: 'img/night-skin22.png',
        SKIN23D: 'img/day-skin23.png',
        SKIN23N: 'img/night-skin23.png',
        SKIN24D: 'img/day-skin24.png',
        SKIN24N: 'img/night-skin24.png',
        SKIN25D: 'img/day-skin25.png',
        SKIN25N: 'img/night-skin25.png',
        SKIN26D: 'img/day-skin26.png',
        SKIN26N: 'img/night-skin26.png',
        SKIN27D: 'img/day-skin27.png',
        SKIN27N: 'img/night-skin27.png',
        SKIN28D: 'img/day-skin28.png',
        SKIN28N: 'img/night-skin28.png',
        SKIN29D: 'img/day-skin29.png',
        SKIN29N: 'img/night-skin29.png',
        SKIN30D: 'img/day-skin30.png',
        SKIN30N: 'img/night-skin30.png',
        SKIN31D: 'img/day-skin31.png',
        SKIN31N: 'img/night-skin31.png',
        SKIN32D: 'img/day-skin32.png',
        SKIN32N: 'img/night-skin32.png',
        SKIN33D: 'img/day-skin33.png',
        SKIN33N: 'img/night-skin33.png',
        SKIN34D: 'img/day-skin34.png',
        SKIN34N: 'img/night-skin34.png',
        SKIN35D: 'img/day-skin35.png',
        SKIN35N: 'img/night-skin35.png',
        SKIN36D: 'img/day-skin36.png',
        SKIN36N: 'img/night-skin36.png',
        SKIN37D: 'img/day-skin37.png',
        SKIN37N: 'img/night-skin37.png',
        SKIN38D: 'img/day-skin38.png',
        SKIN38N: 'img/night-skin38.png',
        SKIN39D: 'img/day-skin39.png',
        SKIN39N: 'img/night-skin39.png',
        SKIN40D: 'img/day-skin40.png',
        SKIN40N: 'img/night-skin40.png',
        SKIN41D: 'img/day-skin41.png',
        SKIN41N: 'img/night-skin41.png',
        SKIN42D: 'img/day-skin42.png',
        SKIN42N: 'img/night-skin42.png',
        SKIN43D: 'img/day-skin43.png',
        SKIN43N: 'img/night-skin43.png',
        SKIN44D: 'img/day-skin44.png',
        SKIN44N: 'img/night-skin44.png',
        SKIN45D: 'img/day-skin45.png',
        SKIN45N: 'img/night-skin45.png',
        SKIN46D: 'img/day-skin46.png',
        SKIN46N: 'img/night-skin46.png',
        SKIN47D: 'img/day-skin47.png',
        SKIN47N: 'img/night-skin47.png',
        SKIN48D: 'img/day-skin48.png',
        SKIN48N: 'img/night-skin48.png',
        SKIN49D: 'img/day-skin49.png',
        SKIN49N: 'img/night-skin49.png',
        SKIN50D: 'img/day-skin50.png',
        SKIN50N: 'img/night-skin50.png',
        SKIN51D: 'img/day-skin51.png',
        SKIN51N: 'img/night-skin51.png',
        SKIN52D: 'img/day-skin52.png',
        SKIN52N: 'img/night-skin52.png',
        SKIN53D: 'img/day-skin53.png',
        SKIN53N: 'img/night-skin53.png',
        SKIN54D: 'img/day-skin54.png',
        SKIN54N: 'img/night-skin54.png',
        SKIN55D: 'img/day-skin55.png',
        SKIN55N: 'img/night-skin55.png',
        SKIN56D: 'img/day-skin56.png',
        SKIN56N: 'img/night-skin56.png',
        SKIN57D: 'img/day-skin57.png',
        SKIN57N: 'img/night-skin57.png',
        SKIN58D: 'img/day-skin58.png',
        SKIN58N: 'img/night-skin58.png',
        SKIN59D: 'img/day-skin59.png',
        SKIN59N: 'img/night-skin59.png',
        SKIN60D: 'img/day-skin60.png',
        SKIN60N: 'img/night-skin60.png',
        SKIN61D: 'img/day-skin61.png',
        SKIN61N: 'img/night-skin61.png',
        SKIN62D: 'img/day-skin62.png',
        SKIN62N: 'img/night-skin62.png',
        SKIN63D: 'img/day-skin63.png',
        SKIN63N: 'img/night-skin63.png',
        SKIN64D: 'img/day-skin64.png',
        SKIN64N: 'img/night-skin64.png',
        SKIN65D: 'img/day-skin65.png',
        SKIN65N: 'img/night-skin65.png',
        SKIN66D: 'img/day-skin66.png',
        SKIN66N: 'img/night-skin66.png',
        SKIN67D: 'img/day-skin67.png',
        SKIN67N: 'img/night-skin67.png',
        SKIN68D: 'img/day-skin68.png',
        SKIN68N: 'img/night-skin68.png',
        SKIN69D: 'img/day-skin69.png',
        SKIN69N: 'img/night-skin69.png',
        SKIN70D: 'img/day-skin70.png',
        SKIN70N: 'img/night-skin70.png',
        SKIN71D: 'img/day-skin71.png',
        SKIN71N: 'img/night-skin71.png',
        SKIN72D: 'img/day-skin72.png',
        SKIN72N: 'img/night-skin72.png',
        SKIN73D: 'img/day-skin73.png',
        SKIN73N: 'img/night-skin73.png',
        SKIN74D: 'img/day-skin74.png',
        SKIN74N: 'img/night-skin74.png',
        SKIN75D: 'img/day-skin75.png',
        SKIN75N: 'img/night-skin75.png',
        SKIN76D: 'img/day-skin76.png',
        SKIN76N: 'img/night-skin76.png',
        SKIN77D: 'img/day-skin77.png',
        SKIN77N: 'img/night-skin77.png',
        SKIN78D: 'img/day-skin78.png',
        SKIN78N: 'img/night-skin78.png',
        SKIN79D: 'img/day-skin79.png',
        SKIN79N: 'img/night-skin79.png',
        SKIN80D: 'img/day-skin80.png',
        SKIN80N: 'img/night-skin80.png',
        SKIN81D: 'img/day-skin81.png',
        SKIN81N: 'img/night-skin81.png',
        SKIN82D: 'img/day-skin82.png',
        SKIN82N: 'img/night-skin82.png',
        SKIN83D: 'img/day-skin83.png',
        SKIN83N: 'img/night-skin83.png',
        SKIN84D: 'img/day-skin84.png',
        SKIN84N: 'img/night-skin84.png',
        SKIN85D: 'img/day-skin85.png',
        SKIN85N: 'img/night-skin85.png',
        SKIN86D: 'img/day-skin86.png',
        SKIN86N: 'img/night-skin86.png',
        SKIN87D: 'img/day-skin87.png',
        SKIN87N: 'img/night-skin87.png',
        SKIN88D: 'img/day-skin88.png',
        SKIN88N: 'img/night-skin88.png',
        SKIN89D: 'img/day-skin89.png',
        SKIN89N: 'img/night-skin89.png',
        SKIN90D: 'img/day-skin90.png',
        SKIN90N: 'img/night-skin90.png',
        SKIN91D: 'img/day-skin91.png',
        SKIN91N: 'img/night-skin91.png',
        SKIN92D: 'img/day-skin92.png',
        SKIN92N: 'img/night-skin92.png',
        SKIN93D: 'img/day-skin93.png',
        SKIN93N: 'img/night-skin93.png',
        SKIN94D: 'img/day-skin94.png',
        SKIN94N: 'img/night-skin94.png',
        SKIN95D: 'img/day-skin95.png',
        SKIN95N: 'img/night-skin95.png',
        SKIN96D: 'img/day-skin96.png',
        SKIN96N: 'img/night-skin96.png',
        SKIN97D: 'img/day-skin97.png',
        SKIN97N: 'img/night-skin97.png',
        SKIN98D: 'img/day-skin98.png',
        SKIN98N: 'img/night-skin98.png',
        SKIN99D: 'img/day-skin99.png',
        SKIN99N: 'img/night-skin99.png',
        SKIN100D: 'img/day-skin100.png',
        SKIN100N: 'img/night-skin100.png',
        SKIN101D: 'img/day-skin101.png',
        SKIN101N: 'img/night-skin101.png',
        SKIN102D: 'img/day-skin102.png',
        SKIN102N: 'img/night-skin102.png',
        SKIN103D: 'img/day-skin103.png',
        SKIN103N: 'img/night-skin103.png',
        SKIN104D: 'img/day-skin104.png',
        SKIN104N: 'img/night-skin104.png',
        SKIN105D: 'img/day-skin105.png',
        SKIN105N: 'img/night-skin105.png',
        SKIN106D: 'img/day-skin106.png',
        SKIN106N: 'img/night-skin106.png',
        SKIN107D: 'img/day-skin107.png',
        SKIN107N: 'img/night-skin107.png',
        SKIN108D: 'img/day-skin108.png',
        SKIN108N: 'img/night-skin108.png',
        SKIN109D: 'img/day-skin109.png',
        SKIN109N: 'img/night-skin109.png',
        SKIN110D: 'img/day-skin110.png',
        SKIN110N: 'img/night-skin110.png',
        SKIN111D: 'img/day-skin111.png',
        SKIN111N: 'img/night-skin111.png',
        SKIN112D: 'img/day-skin112.png',
        SKIN112N: 'img/night-skin112.png',
        SKIN113D: 'img/day-skin113.png',
        SKIN113N: 'img/night-skin113.png',
        SKIN114D: 'img/day-skin114.png',
        SKIN114N: 'img/night-skin114.png',
        SKIN115D: 'img/day-skin115.png',
        SKIN115N: 'img/night-skin115.png',
        SKIN116D: 'img/day-skin116.png',
        SKIN116N: 'img/night-skin116.png',
        SKIN117D: 'img/day-skin117.png',
        SKIN117N: 'img/night-skin117.png',
        SKIN118D: 'img/day-skin118.png',
        SKIN118N: 'img/night-skin118.png',
        SKIN119D: 'img/day-skin119.png',
        SKIN119N: 'img/night-skin119.png',
        SKIN120D: 'img/day-skin120.png',
        SKIN120N: 'img/night-skin120.png',
        SKIN121D: 'img/day-skin121.png',
        SKIN121N: 'img/night-skin121.png',
        SKIN122D: 'img/day-skin122.png',
        SKIN122N: 'img/night-skin122.png',
        SKIN123D: 'img/day-skin123.png',
        SKIN123N: 'img/night-skin123.png',
        SKIN124D: 'img/day-skin124.png',
        SKIN124N: 'img/night-skin124.png',
        SKIN125D: 'img/day-skin125.png',
        SKIN125N: 'img/night-skin125.png',
        SKIN126D: 'img/day-skin126.png',
        SKIN126N: 'img/night-skin126.png',
        SKIN127D: 'img/day-skin127.png',
        SKIN127N: 'img/night-skin127.png',
        SKIN128D: 'img/day-skin128.png',
        SKIN128N: 'img/night-skin128.png',
        SKIN129D: 'img/day-skin129.png',
        SKIN129N: 'img/night-skin129.png',
        SKIN130D: 'img/day-skin130-1.png',
        SKIN130N: 'img/night-skin130-1.png',
        SKIN131D: 'img/day-skin131.png',
        SKIN131N: 'img/night-skin131.png',
        SKIN132D: 'img/day-skin132.png',
        SKIN132N: 'img/night-skin132.png',
        SKIN133D: 'img/day-skin133.png',
        SKIN133N: 'img/night-skin133.png',
        SKIN134D: 'img/day-skin134.png',
        SKIN134N: 'img/night-skin134.png',
        SKIN135D: 'img/day-skin135.png',
        SKIN135N: 'img/night-skin135.png',
        SKIN136D: 'img/day-skin136.png',
        SKIN136N: 'img/night-skin136.png',
        SKIN137D: 'img/day-skin137.png',
        SKIN137N: 'img/night-skin137.png',
        SKIN138D: 'img/day-skin138.png',
        SKIN138N: 'img/night-skin138.png',
        SKIN139D: 'img/day-skin139.png',
        SKIN139N: 'img/night-skin139.png',
        SKIN140D: 'img/day-skin140.png',
        SKIN140N: 'img/night-skin140.png',
        SKIN141D: 'img/day-skin141.png',
        SKIN141N: 'img/night-skin141.png',
        SKIN142D: 'img/day-skin142.png',
        SKIN142N: 'img/night-skin142.png',
        SKIN143D: 'img/day-skin143.png',
        SKIN143N: 'img/night-skin143.png',
        SKIN144D: 'img/day-skin144.png',
        SKIN144N: 'img/night-skin144.png',
        SKIN145D: 'img/day-skin145.png',
        SKIN145N: 'img/night-skin145.png',
        SKIN146D: 'img/day-skin146.png',
        SKIN146N: 'img/night-skin146.png',
        SKIN147D: 'img/day-skin147.png',
        SKIN147N: 'img/night-skin147.png',
        SKIN148D: 'img/day-skin148.png',
        SKIN148N: 'img/night-skin148.png',
        SKIN149D: 'img/day-skin149.png',
        SKIN149N: 'img/night-skin149.png',
        SKIN150D: 'img/day-skin150.png',
        SKIN150N: 'img/night-skin150.png',
        HAND_SKIN0D: 'img/day-hand-skin0.png',
        HAND_SKIN0N: 'img/night-hand-skin0.png',
        HAND_SKIN1D: 'img/day-hand-skin1.png',
        HAND_SKIN1N: 'img/night-hand-skin1.png',
        HAND_SKIN2D: 'img/day-hand-skin2.png',
        HAND_SKIN2N: 'img/night-hand-skin2.png',
        HAND_SKIN3D: 'img/day-hand-skin3.png',
        HAND_SKIN3N: 'img/night-hand-skin3.png',
        HAND_SKIN4D: 'img/day-hand-skin4.png',
        HAND_SKIN4N: 'img/night-hand-skin4.png',
        HAND_SKIN5D: 'img/day-hand-skin5.png',
        HAND_SKIN5N: 'img/night-hand-skin5.png',
        HAND_SKIN6D: 'img/day-hand-skin6.png',
        HAND_SKIN6N: 'img/night-hand-skin6.png',
        HAND_SKIN7D: 'img/day-hand-skin6.png',
        HAND_SKIN7N: 'img/night-hand-skin6.png',
        HAND_SKIN8D: 'img/day-hand-skin8.png',
        HAND_SKIN8N: 'img/night-hand-skin8.png',
        HAND_SKIN9D: 'img/day-hand-skin9.png',
        HAND_SKIN9N: 'img/night-hand-skin9.png',
        HAND_SKIN10D: 'img/day-hand-skin10.png',
        HAND_SKIN10N: 'img/night-hand-skin10.png',
        HAND_SKIN11D: 'img/day-hand-skin11.png',
        HAND_SKIN11N: 'img/night-hand-skin11.png',
        HAND_SKIN12D: 'img/day-hand-skin12.png',
        HAND_SKIN12N: 'img/night-hand-skin12.png',
        HAND_SKIN13D: 'img/day-hand-skin13.png',
        HAND_SKIN13N: 'img/night-hand-skin13.png',
        HAND_SKIN14D: 'img/day-hand-skin14.png',
        HAND_SKIN14N: 'img/night-hand-skin14.png',
        HAND_SKIN15D: 'img/day-hand-skin15.png',
        HAND_SKIN15N: 'img/night-hand-skin15.png',
        HAND_SKIN16D: 'img/day-hand-skin16.png',
        HAND_SKIN16N: 'img/night-hand-skin16.png',
        HAND_SKIN17D: 'img/day-hand-skin17.png',
        HAND_SKIN17N: 'img/night-hand-skin17.png',
        HAND_SKIN18D: 'img/day-hand-skin18.png',
        HAND_SKIN18N: 'img/night-hand-skin18.png',
        HAND_SKIN19D: 'img/day-hand-skin19.png',
        HAND_SKIN19N: 'img/night-hand-skin19.png',
        HAND_SKIN20D: 'img/day-hand-skin20.png',
        HAND_SKIN20N: 'img/night-hand-skin20.png',
        HAND_SKIN21D: 'img/day-hand-skin21.png',
        HAND_SKIN21N: 'img/night-hand-skin21.png',
        HAND_SKIN22D: 'img/day-hand-skin22.png',
        HAND_SKIN22N: 'img/night-hand-skin22.png',
        HAND_SKIN23D: 'img/day-hand-skin23.png',
        HAND_SKIN23N: 'img/night-hand-skin23.png',
        HAND_SKIN24D: 'img/day-hand-skin24.png',
        HAND_SKIN24N: 'img/night-hand-skin24.png',
        HAND_SKIN25D: 'img/day-hand-skin25.png',
        HAND_SKIN25N: 'img/night-hand-skin25.png',
        HAND_SKIN26D: 'img/day-hand-skin26.png',
        HAND_SKIN26N: 'img/night-hand-skin26.png',
        HAND_SKIN27D: 'img/day-hand-skin27.png',
        HAND_SKIN27N: 'img/night-hand-skin27.png',
        HAND_SKIN28D: 'img/day-hand-skin28.png',
        HAND_SKIN28N: 'img/night-hand-skin28.png',
        HAND_SKIN29D: 'img/day-hand-skin29.png',
        HAND_SKIN29N: 'img/night-hand-skin29.png',
        HAND_SKIN30D: 'img/day-hand-skin30.png',
        HAND_SKIN30N: 'img/night-hand-skin30.png',
        HAND_SKIN31D: 'img/day-hand-skin31.png',
        HAND_SKIN31N: 'img/night-hand-skin31.png',
        HAND_SKIN32D: 'img/day-hand-skin32.png',
        HAND_SKIN32N: 'img/night-hand-skin32.png',
        HAND_SKIN33D: 'img/day-hand-skin33.png',
        HAND_SKIN33N: 'img/night-hand-skin33.png',
        HAND_SKIN34D: 'img/day-hand-skin34.png',
        HAND_SKIN34N: 'img/night-hand-skin34.png',
        HAND_SKIN35D: 'img/day-hand-skin35.png',
        HAND_SKIN35N: 'img/night-hand-skin35.png',
        HAND_SKIN36D: 'img/day-hand-skin36.png',
        HAND_SKIN36N: 'img/night-hand-skin36.png',
        HAND_SKIN37D: 'img/day-hand-skin37.png',
        HAND_SKIN37N: 'img/night-hand-skin37.png',
        HAND_SKIN38D: 'img/day-hand-skin38.png',
        HAND_SKIN38N: 'img/night-hand-skin38.png',
        HAND_SKIN39D: 'img/day-hand-skin39.png',
        HAND_SKIN39N: 'img/night-hand-skin39.png',
        HAND_SKIN40D: 'img/day-hand-skin40.png',
        HAND_SKIN40N: 'img/night-hand-skin40.png',
        HAND_SKIN41D: 'img/day-hand-skin41.png',
        HAND_SKIN41N: 'img/night-hand-skin41.png',
        HAND_SKIN42D: 'img/day-hand-skin42.png',
        HAND_SKIN42N: 'img/night-hand-skin42.png',
        HAND_SKIN43D: 'img/day-hand-skin43.png',
        HAND_SKIN43N: 'img/night-hand-skin43.png',
        HAND_SKIN44D: 'img/day-hand-skin16.png',
        HAND_SKIN44N: 'img/night-hand-skin16.png',
        HAND_SKIN45D: 'img/day-hand-skin45.png',
        HAND_SKIN45N: 'img/night-hand-skin45.png',
        HAND_SKIN46D: 'img/day-hand-skin46.png',
        HAND_SKIN46N: 'img/night-hand-skin46.png',
        HAND_SKIN47D: 'img/day-hand-skin47.png',
        HAND_SKIN47N: 'img/night-hand-skin47.png',
        HAND_SKIN48D: 'img/day-hand-skin48.png',
        HAND_SKIN48N: 'img/night-hand-skin48.png',
        HAND_SKIN49D: 'img/day-hand-skin49.png',
        HAND_SKIN49N: 'img/night-hand-skin49.png',
        HAND_SKIN50D: 'img/day-hand-skin49.png',
        HAND_SKIN50N: 'img/night-hand-skin49.png',
        HAND_SKIN51D: 'img/day-hand-skin51.png',
        HAND_SKIN51N: 'img/night-hand-skin51.png',
        HAND_SKIN52D: 'img/day-hand-skin52.png',
        HAND_SKIN52N: 'img/night-hand-skin52.png',
        HAND_SKIN53D: 'img/day-hand-skin53.png',
        HAND_SKIN53N: 'img/night-hand-skin53.png',
        HAND_SKIN54D: 'img/day-hand-skin53.png',
        HAND_SKIN54N: 'img/night-hand-skin53.png',
        HAND_SKIN55D: 'img/day-hand-skin55.png',
        HAND_SKIN55N: 'img/night-hand-skin55.png',
        HAND_SKIN56D: 'img/day-hand-skin56.png',
        HAND_SKIN56N: 'img/night-hand-skin56.png',
        HAND_SKIN57D: 'img/day-hand-skin57.png',
        HAND_SKIN57N: 'img/night-hand-skin57.png',
        HAND_SKIN58D: 'img/day-hand-skin58.png',
        HAND_SKIN58N: 'img/night-hand-skin58.png',
        HAND_SKIN59D: 'img/day-hand-skin59.png',
        HAND_SKIN59N: 'img/night-hand-skin59.png',
        HAND_SKIN60D: 'img/day-hand-skin61.png',
        HAND_SKIN60N: 'img/night-hand-skin61.png',
        HAND_SKIN61D: 'img/day-hand-skin61.png',
        HAND_SKIN61N: 'img/night-hand-skin61.png',
        HAND_SKIN62D: 'img/day-hand-skin62.png',
        HAND_SKIN62N: 'img/night-hand-skin62.png',
        HAND_SKIN63D: 'img/day-hand-skin63.png',
        HAND_SKIN63N: 'img/night-hand-skin63.png',
        HAND_SKIN64D: 'img/day-hand-skin64.png',
        HAND_SKIN64N: 'img/night-hand-skin64.png',
        HAND_SKIN65D: 'img/day-hand-skin65.png',
        HAND_SKIN65N: 'img/night-hand-skin65.png',
        HAND_SKIN66D: 'img/day-hand-skin66.png',
        HAND_SKIN66N: 'img/night-hand-skin66.png',
        HAND_SKIN67D: 'img/day-hand-skin67.png',
        HAND_SKIN67N: 'img/night-hand-skin67.png',
        HAND_SKIN68D: 'img/day-hand-skin68.png',
        HAND_SKIN68N: 'img/night-hand-skin68.png',
        HAND_SKIN69D: 'img/day-hand-skin69.png',
        HAND_SKIN69N: 'img/night-hand-skin69.png',
        HAND_SKIN70D: 'img/day-hand-skin70.png',
        HAND_SKIN70N: 'img/night-hand-skin70.png',
        HAND_SKIN71D: 'img/day-hand-skin71.png',
        HAND_SKIN71N: 'img/night-hand-skin71.png',
        HAND_SKIN72D: 'img/day-hand-skin72.png',
        HAND_SKIN72N: 'img/night-hand-skin72.png',
        HAND_SKIN73D: 'img/day-hand-skin73.png',
        HAND_SKIN73N: 'img/night-hand-skin73.png',
        HAND_SKIN74D: 'img/day-hand-skin74.png',
        HAND_SKIN74N: 'img/night-hand-skin74.png',
        HAND_SKIN75D: 'img/day-hand-skin75.png',
        HAND_SKIN75N: 'img/night-hand-skin75.png',
        HAND_SKIN76D: 'img/day-hand-skin76.png',
        HAND_SKIN76N: 'img/night-hand-skin76.png',
        HAND_SKIN77D: 'img/day-hand-skin77.png',
        HAND_SKIN77N: 'img/night-hand-skin77.png',
        HAND_SKIN78D: 'img/day-hand-skin78.png',
        HAND_SKIN78N: 'img/night-hand-skin78.png',
        HAND_SKIN79D: 'img/day-hand-skin79.png',
        HAND_SKIN79N: 'img/night-hand-skin79.png',
        HAND_SKIN80D: 'img/day-hand-skin80.png',
        HAND_SKIN80N: 'img/night-hand-skin80.png',
        HAND_SKIN81D: 'img/day-hand-skin81.png',
        HAND_SKIN81N: 'img/night-hand-skin81.png',
        HAND_SKIN82D: 'img/day-hand-skin82.png',
        HAND_SKIN82N: 'img/night-hand-skin82.png',
        HAND_SKIN83D: 'img/day-hand-skin83.png',
        HAND_SKIN83N: 'img/night-hand-skin83.png',
        HAND_SKIN84D: 'img/day-hand-skin84.png',
        HAND_SKIN84N: 'img/night-hand-skin84.png',
        HAND_SKIN85D: 'img/day-hand-skin85.png',
        HAND_SKIN85N: 'img/night-hand-skin85.png',
        HAND_SKIN86D: 'img/day-hand-skin86.png',
        HAND_SKIN86N: 'img/night-hand-skin86.png',
        HAND_SKIN87D: 'img/day-hand-skin87.png',
        HAND_SKIN87N: 'img/night-hand-skin87.png',
        HAND_SKIN88D: 'img/day-hand-skin88.png',
        HAND_SKIN88N: 'img/night-hand-skin88.png',
        HAND_SKIN89D: 'img/day-hand-skin89.png',
        HAND_SKIN89N: 'img/night-hand-skin89.png',
        HAND_SKIN90D: 'img/day-hand-skin90.png',
        HAND_SKIN90N: 'img/night-hand-skin90.png',
        HAND_SKIN91D: 'img/day-hand-skin91.png',
        HAND_SKIN91N: 'img/night-hand-skin91.png',
        HAND_SKIN92D: 'img/day-hand-skin92.png',
        HAND_SKIN92N: 'img/night-hand-skin92.png',
        HAND_SKIN93D: 'img/day-hand-skin93.png',
        HAND_SKIN93N: 'img/night-hand-skin93.png',
        HAND_SKIN94D: 'img/day-hand-skin94.png',
        HAND_SKIN94N: 'img/night-hand-skin94.png',
        HAND_SKIN95D: 'img/day-hand-skin95.png',
        HAND_SKIN95N: 'img/night-hand-skin95.png',
        HAND_SKIN96D: 'img/day-hand-skin96.png',
        HAND_SKIN96N: 'img/night-hand-skin96.png',
        HAND_SKIN97D: 'img/day-hand-skin97.png',
        HAND_SKIN97N: 'img/night-hand-skin97.png',
        HAND_SKIN98D: 'img/day-hand-skin98.png',
        HAND_SKIN98N: 'img/night-hand-skin98.png',
        HAND_SKIN99D: 'img/day-hand-skin99.png',
        HAND_SKIN99N: 'img/night-hand-skin99.png',
        HAND_SKIN100D: 'img/day-hand-skin100.png',
        HAND_SKIN100N: 'img/night-hand-skin100.png',
        HAND_SKIN101D: 'img/day-hand-skin101.png',
        HAND_SKIN101N: 'img/night-hand-skin101.png',
        HAND_SKIN102D: 'img/day-hand-skin102.png',
        HAND_SKIN102N: 'img/night-hand-skin102.png',
        HAND_SKIN103D: 'img/day-hand-skin103.png',
        HAND_SKIN103N: 'img/night-hand-skin103.png',
        HAND_SKIN104D: 'img/day-hand-skin104.png',
        HAND_SKIN104N: 'img/night-hand-skin104.png',
        HAND_SKIN105D: 'img/day-hand-skin105.png',
        HAND_SKIN105N: 'img/night-hand-skin105.png',
        HAND_SKIN106D: 'img/day-hand-skin106.png',
        HAND_SKIN106N: 'img/night-hand-skin106.png',
        HAND_SKIN107D: 'img/day-hand-skin107.png',
        HAND_SKIN107N: 'img/night-hand-skin107.png',
        HAND_SKIN108D: 'img/day-hand-skin108.png',
        HAND_SKIN108N: 'img/night-hand-skin108.png',
        HAND_SKIN109D: 'img/day-hand-skin109.png',
        HAND_SKIN109N: 'img/night-hand-skin109.png',
        HAND_SKIN110D: 'img/day-hand-skin110.png',
        HAND_SKIN110N: 'img/night-hand-skin110.png',
        HAND_SKIN111D: 'img/day-hand-skin111.png',
        HAND_SKIN111N: 'img/night-hand-skin111.png',
        HAND_SKIN112D: 'img/day-hand-skin112.png',
        HAND_SKIN112N: 'img/night-hand-skin112.png',
        HAND_SKIN113D: 'img/day-hand-skin113.png',
        HAND_SKIN113N: 'img/night-hand-skin113.png',
        HAND_SKIN114D: 'img/day-hand-skin114.png',
        HAND_SKIN114N: 'img/night-hand-skin114.png',
        HAND_SKIN115D: 'img/day-hand-skin115.png',
        HAND_SKIN115N: 'img/night-hand-skin115.png',
        HAND_SKIN116D: 'img/day-hand-skin116.png',
        HAND_SKIN116N: 'img/night-hand-skin116.png',
        HAND_SKIN117D: 'img/day-hand-skin117.png',
        HAND_SKIN117N: 'img/night-hand-skin117.png',
        HAND_SKIN118D: 'img/day-hand-skin118.png',
        HAND_SKIN118N: 'img/night-hand-skin118.png',
        HAND_SKIN119D: 'img/day-hand-skin119.png',
        HAND_SKIN119N: 'img/night-hand-skin119.png',
        HAND_SKIN120D: 'img/day-hand-skin120.png',
        HAND_SKIN120N: 'img/night-hand-skin120.png',
        HAND_SKIN121D: 'img/day-hand-skin122.png',
        HAND_SKIN121N: 'img/night-hand-skin122.png',
        HAND_SKIN122D: 'img/day-hand-skin122.png',
        HAND_SKIN122N: 'img/night-hand-skin122.png',
        HAND_SKIN123D: 'img/day-hand-skin122.png',
        HAND_SKIN123N: 'img/night-hand-skin122.png',
        HAND_SKIN124D: 'img/day-hand-skin124.png',
        HAND_SKIN124N: 'img/night-hand-skin124.png',
        HAND_SKIN125D: 'img/day-hand-skin125.png',
        HAND_SKIN125N: 'img/night-hand-skin125.png',
        HAND_SKIN126D: 'img/day-hand-skin126.png',
        HAND_SKIN126N: 'img/night-hand-skin126.png',
        HAND_SKIN127D: 'img/day-hand-skin127.png',
        HAND_SKIN127N: 'img/night-hand-skin127.png',
        HAND_SKIN128D: 'img/day-hand-skin128.png',
        HAND_SKIN128N: 'img/night-hand-skin128.png',
        HAND_SKIN129D: 'img/day-hand-skin129.png',
        HAND_SKIN129N: 'img/night-hand-skin129.png',
        HAND_SKIN130D: 'img/day-hand-skin130.png',
        HAND_SKIN130N: 'img/night-hand-skin130.png',
        HAND_SKIN131D: 'img/day-hand-skin131.png',
        HAND_SKIN131N: 'img/night-hand-skin131.png',
        HAND_SKIN132D: 'img/day-hand-skin130.png',
        HAND_SKIN132N: 'img/night-hand-skin130.png',
        HAND_SKIN133D: 'img/day-hand-skin133.png',
        HAND_SKIN133N: 'img/night-hand-skin133.png',
        HAND_SKIN134D: 'img/day-hand-skin134.png',
        HAND_SKIN134N: 'img/night-hand-skin134.png',
        HAND_SKIN135D: 'img/day-hand-skin135.png',
        HAND_SKIN135N: 'img/night-hand-skin135.png',
        HAND_SKIN136D: 'img/day-hand-skin136.png',
        HAND_SKIN136N: 'img/night-hand-skin136.png',
        HAND_SKIN137D: 'img/day-hand-skin137.png',
        HAND_SKIN137N: 'img/night-hand-skin137.png',
        HAND_SKIN138D: 'img/day-hand-skin138.png',
        HAND_SKIN138N: 'img/night-hand-skin138.png',
        HAND_SKIN139D: 'img/day-hand-skin139.png',
        HAND_SKIN139N: 'img/night-hand-skin139.png',
        HAND_SKIN140D: 'img/day-hand-skin140.png',
        HAND_SKIN140N: 'img/night-hand-skin140.png',
        HAND_SKIN141D: 'img/day-hand-skin141.png',
        HAND_SKIN141N: 'img/night-hand-skin141.png',
        HAND_SKIN142D: 'img/day-hand-skin142.png',
        HAND_SKIN142N: 'img/night-hand-skin142.png',
        HAND_SKIN143D: 'img/day-hand-skin143.png',
        HAND_SKIN143N: 'img/night-hand-skin143.png',
        HAND_SKIN144D: 'img/day-hand-skin144.png',
        HAND_SKIN144N: 'img/night-hand-skin144.png',
        HAND_SKIN145D: 'img/day-hand-skin145.png',
        HAND_SKIN145N: 'img/night-hand-skin145.png',
        HAND_SKIN146D: 'img/day-hand-skin146.png',
        HAND_SKIN146N: 'img/night-hand-skin146.png',
        HAND_SKIN147D: 'img/day-hand-skin147.png',
        HAND_SKIN147N: 'img/night-hand-skin147.png',
        HAND_SKIN148D: 'img/day-hand-skin148.png',
        HAND_SKIN148N: 'img/night-hand-skin148.png',
        HAND_SKIN149D: 'img/day-hand-skin149.png',
        HAND_SKIN149N: 'img/night-hand-skin149.png',
        HAND_SKIN150D: 'img/day-hand-skin150.png',
        HAND_SKIN150N: 'img/night-hand-skin150.png',
        BAG_STARD: 'img/day-bag-star0.png',
        BAG_STARN: 'img/night-bag-star0.png',
        BAG0D: 'img/day-bag0.png',
        BAG0N: 'img/night-bag0.png',
        BAG1D: 'img/day-bag1.png',
        BAG1N: 'img/night-bag1.png',
        BAG2D: 'img/day-bag2.png',
        BAG2N: 'img/night-bag2.png',
        BAG3D: 'img/day-bag3.png',
        BAG3N: 'img/night-bag3.png',
        BAG4D: 'img/day-bag4.png',
        BAG4N: 'img/night-bag4.png',
        BAG5D: 'img/day-bag5.png',
        BAG5N: 'img/night-bag5.png',
        BAG6D: 'img/day-bag6.png',
        BAG6N: 'img/night-bag6.png',
        BAG7D: 'img/day-bag7.png',
        BAG7N: 'img/night-bag7.png',
        BAG8D: 'img/day-bag8.png',
        BAG8N: 'img/night-bag8.png',
        BAG9D: 'img/day-bag9.png',
        BAG9N: 'img/night-bag9.png',
        BAG10D: 'img/day-bag10.png',
        BAG10N: 'img/night-bag10.png',
        BAG11D: 'img/day-bag11.png',
        BAG11N: 'img/night-bag11.png',
        BAG13D: 'img/day-bag13.png',
        BAG13N: 'img/night-bag13.png',
        BAG14D: 'img/day-bag14.png',
        BAG14N: 'img/night-bag14.png',
        BAG16D: 'img/day-bag16.png',
        BAG16N: 'img/night-bag16.png',
        BAG17D: 'img/day-bag17.png',
        BAG17N: 'img/night-bag17.png',
        BAG18D: 'img/day-bag18.png',
        BAG18N: 'img/night-bag18.png',
        BAG19D: 'img/day-bag19.png',
        BAG19N: 'img/night-bag19.png',
        BAG20D: 'img/day-bag20.png',
        BAG20N: 'img/night-bag20.png',
        BAG21D: 'img/day-bag21.png',
        BAG21N: 'img/night-bag21.png',
        BAG22D: 'img/day-bag22.png',
        BAG22N: 'img/night-bag22.png',
        BAG23D: 'img/day-bag23.png',
        BAG23N: 'img/night-bag23.png',
        BAG24D: 'img/day-bag24.png',
        BAG24N: 'img/night-bag24.png',
        BAG25D: 'img/day-bag25.png',
        BAG25N: 'img/night-bag25.png',
        BAG26D: 'img/day-bag26.png',
        BAG26N: 'img/night-bag26.png',
        BAG27D: 'img/day-bag27.png',
        BAG27N: 'img/night-bag27.png',
        BAG28D: 'img/day-bag28.png',
        BAG28N: 'img/night-bag28.png',
        BAG29D: 'img/day-bag29.png',
        BAG29N: 'img/night-bag29.png',
        BAG30D: 'img/day-bag30.png',
        BAG30N: 'img/night-bag30.png',
        BAG31D: 'img/day-bag31.png',
        BAG31N: 'img/night-bag31.png',
        BAG32D: 'img/day-bag32.png',
        BAG32N: 'img/night-bag32.png',
        BAG33D: 'img/day-bag33.png',
        BAG33N: 'img/night-bag33.png',
        BAG34D: 'img/day-bag34.png',
        BAG34N: 'img/night-bag34.png',
        BAG35D: 'img/day-bag35.png',
        BAG35N: 'img/night-bag35.png',
        BAG36D: 'img/day-bag36.png',
        BAG36N: 'img/night-bag36.png',
        BAG37D: 'img/day-bag37.png',
        BAG37N: 'img/night-bag37.png',
        BAG38D: 'img/day-bag38.png',
        BAG38N: 'img/night-bag38.png',
        BAG39D: 'img/day-bag39.png',
        BAG39N: 'img/night-bag39.png',
        BAG40D: 'img/day-bag40.png',
        BAG40N: 'img/night-bag40.png',
        BAG41D: 'img/day-bag41.png',
        BAG41N: 'img/night-bag41.png',
        BAG42D: 'img/day-bag42.png',
        BAG42N: 'img/night-bag42.png',
        BAG43D: 'img/day-bag43.png',
        BAG43N: 'img/night-bag43.png',
        BAG44D: 'img/day-bag44.png',
        BAG44N: 'img/night-bag44.png',
        BAG45D: 'img/day-bag45.png',
        BAG45N: 'img/night-bag45.png',
        BAG46D: 'img/day-bag46.png',
        BAG46N: 'img/night-bag46.png',
        BAG47D: 'img/day-bag47.png',
        BAG47N: 'img/night-bag47.png',
        BAG48D: 'img/day-bag48.png',
        BAG48N: 'img/night-bag48.png',
        BAG49D: 'img/day-bag49.png',
        BAG49N: 'img/night-bag49.png',
        BAG50D: 'img/day-bag50.png',
        BAG50N: 'img/night-bag50.png',
        BAG51D: 'img/day-bag51.png',
        BAG51N: 'img/night-bag51.png',
        BAG52D: 'img/day-bag52.png',
        BAG52N: 'img/night-bag52.png',
        BAG53D: 'img/day-bag53.png',
        BAG53N: 'img/night-bag53.png',
        BAG54D: 'img/day-bag54.png',
        BAG54N: 'img/night-bag54.png',
        BAG55D: 'img/day-bag55.png',
        BAG55N: 'img/night-bag55.png',
        BAG56D: 'img/day-bag56.png',
        BAG56N: 'img/night-bag56.png',
        BAG57D: 'img/day-bag57.png',
        BAG57N: 'img/night-bag57.png',
        BAG58D: 'img/day-bag58.png',
        BAG58N: 'img/night-bag58.png',
        BAG59D: 'img/day-bag59.png',
        BAG59N: 'img/night-bag59.png',
        BAG60D: 'img/day-bag60.png',
        BAG60N: 'img/night-bag60.png',
        BAG61D: 'img/day-bag61.png',
        BAG61N: 'img/night-bag61.png',
        BAG62D: 'img/day-bag62.png',
        BAG62N: 'img/night-bag62.png',
        BAG63D: 'img/day-bag63.png',
        BAG63N: 'img/night-bag63.png',
        BAG64D: 'img/day-bag64.png',
        BAG64N: 'img/night-bag64.png',
        BAG65D: 'img/day-bag65.png',
        BAG65N: 'img/night-bag65.png',
        BAG66D: 'img/day-bag66.png',
        BAG66N: 'img/night-bag66.png',
        BAG67D: 'img/day-bag67.png',
        BAG67N: 'img/night-bag67.png',
        BAG68D: 'img/day-bag68.png',
        BAG68N: 'img/night-bag68.png',
        ACCESSORY0D: 'img/day-accessory0.png',
        ACCESSORY17D: 'img/day-accessory0-pacques.png',
        ACCESSORY17N: 'img/night-accessory0-pacques.png',
        ACCESSORY13D: 'img/day-accessory13.png',
        ACCESSORY13N: 'img/night-accessory13.png',
        ACCESSORY14D: 'img/day-accessory14.png',
        ACCESSORY14N: 'img/night-accessory14.png',
        ACCESSORY15D: 'img/day-accessory15.png',
        ACCESSORY15N: 'img/night-accessory15.png',
        ACCESSORY16D: 'img/day-accessory16.png',
        ACCESSORY16N: 'img/night-accessory16.png',
        ACCESSORY18D: 'img/day-accessory17.png',
        ACCESSORY18N: 'img/day-accessory17.png',
        ACCESSORY19D: 'img/day-accessory19.png',
        ACCESSORY19N: 'img/night-accessory19.png',
        ACCESSORY20D: 'img/day-accessory20.png',
        ACCESSORY20N: 'img/night-accessory20.png',
        ACCESSORY21D: 'img/day-accessory21.png',
        ACCESSORY21N: 'img/night-accessory21.png',
        ACCESSORY22D: 'img/day-accessory22.png',
        ACCESSORY22N: 'img/night-accessory22.png',
        ACCESSORY23D: 'img/day-accessory23.png',
        ACCESSORY23N: 'img/night-accessory23.png',
        ACCESSORY24D: 'img/day-accessory24.png',
        ACCESSORY24N: 'img/night-accessory24.png',
        ACCESSORY25D: 'img/day-accessory25.png',
        ACCESSORY25N: 'img/night-accessory25.png',
        ACCESSORY26D: 'img/day-accessory26.png',
        ACCESSORY26N: 'img/night-accessory26.png',
        ACCESSORY27D: 'img/day-accessory27.png',
        ACCESSORY27N: 'img/night-accessory27.png',
        ACCESSORY28D: 'img/day-accessory18.png',
        ACCESSORY28N: 'img/night-accessory18.png',
        ACCESSORY29D: 'img/day-accessory29.png',
        ACCESSORY29N: 'img/night-accessory29.png',
        ACCESSORY30D: 'img/day-accessory30.png',
        ACCESSORY30N: 'img/night-accessory30.png',
        ACCESSORY31D: 'img/day-accessory31.png',
        ACCESSORY31N: 'img/night-accessory31.png',
        ACCESSORY32D: 'img/day-accessory32.png',
        ACCESSORY32N: 'img/night-accessory32.png',
        ACCESSORY33D: 'img/day-accessory33.png',
        ACCESSORY33N: 'img/night-accessory33.png',
        ACCESSORY34D: 'img/day-accessory34.png',
        ACCESSORY34N: 'img/night-accessory34.png',
        ACCESSORY35D: 'img/day-accessory35.png',
        ACCESSORY35N: 'img/night-accessory35.png',
        ACCESSORY36D: 'img/day-accessory28.png',
        ACCESSORY36N: 'img/night-accessory28.png',
        ACCESSORY37D: 'img/day-accessory36.png',
        ACCESSORY37N: 'img/night-accessory36.png',
        ACCESSORY38D: 'img/day-accessory37.png',
        ACCESSORY38N: 'img/night-accessory37.png',
        ACCESSORY39D: 'img/day-accessory39.png',
        ACCESSORY39N: 'img/night-accessory39.png',
        ACCESSORY40D: 'img/day-accessory40.png',
        ACCESSORY40N: 'img/night-accessory40.png',
        ACCESSORY41D: 'img/day-accessory41.png',
        ACCESSORY41N: 'img/night-accessory41.png',
        ACCESSORY42D: 'img/day-accessory42.png',
        ACCESSORY42N: 'img/night-accessory42.png',
        ACCESSORY43D: 'img/day-accessory43.png',
        ACCESSORY43N: 'img/night-accessory43.png',
        ACCESSORY44D: 'img/day-accessory44.png',
        ACCESSORY44N: 'img/night-accessory44.png',
        ACCESSORY45D: 'img/day-accessory38.png',
        ACCESSORY45N: 'img/night-accessory38.png',
        ACCESSORY46D: 'img/day-accessory46.png',
        ACCESSORY46N: 'img/night-accessory46.png',
        ACCESSORY47D: 'img/day-accessory47.png',
        ACCESSORY47N: 'img/night-accessory47.png',
        ACCESSORY48D: 'img/day-accessory48.png',
        ACCESSORY48N: 'img/night-accessory48.png',
        ACCESSORY49D: 'img/day-accessory49.png',
        ACCESSORY49N: 'img/night-accessory49.png',
        ACCESSORY50D: 'img/day-accessory45.png',
        ACCESSORY50N: 'img/night-accessory45.png',
        ACCESSORY51D: 'img/day-accessory50.png',
        ACCESSORY51N: 'img/night-accessory50.png',
        ACCESSORY52D: 'img/day-accessory51.png',
        ACCESSORY52N: 'img/night-accessory51.png',
        ACCESSORY53D: 'img/day-accessory52.png',
        ACCESSORY53N: 'img/night-accessory52.png',
        ACCESSORY54D: 'img/day-accessory53.png',
        ACCESSORY54N: 'img/night-accessory53.png',
        ACCESSORY55D: 'img/day-accessory54.png',
        ACCESSORY55N: 'img/night-accessory54.png',
        ACCESSORY56D: 'img/day-accessory55.png',
        ACCESSORY56N: 'img/night-accessory55.png',
        ACCESSORY57D: 'img/day-accessory56.png',
        ACCESSORY57N: 'img/night-accessory56.png',
        ACCESSORY58D: 'img/day-accessory57.png',
        ACCESSORY58N: 'img/night-accessory57.png',
        ACCESSORY59D: 'img/day-accessory58.png',
        ACCESSORY59N: 'img/night-accessory58.png',
        ACCESSORY60D: 'img/day-accessory59.png',
        ACCESSORY60N: 'img/night-accessory59.png',
        ACCESSORY61D: 'img/day-accessory60.png',
        ACCESSORY61N: 'img/night-accessory60.png',
        ACCESSORY62D: 'img/day-accessory61.png',
        ACCESSORY62N: 'img/night-accessory61.png',
        ACCESSORY63D: 'img/day-accessory62.png',
        ACCESSORY63N: 'img/night-accessory62.png',
        ACCESSORY64D: 'img/day-accessory63.png',
        ACCESSORY64N: 'img/night-accessory63.png',
        ACCESSORY65D: 'img/day-accessory64.png',
        ACCESSORY65N: 'img/night-accessory64.png',
        ACCESSORY66D: 'img/day-accessory65.png',
        ACCESSORY66N: 'img/night-accessory65.png',
        ACCESSORY67D: 'img/day-accessory66.png',
        ACCESSORY67N: 'img/night-accessory66.png',
        ACCESSORY68D: 'img/day-accessory67.png',
        ACCESSORY68N: 'img/night-accessory67.png',
        ACCESSORY69D: 'img/day-accessory68.png',
        ACCESSORY69N: 'img/night-accessory68.png',
        ACCESSORY70D: 'img/day-accessory69.png',
        ACCESSORY70N: 'img/night-accessory69.png',
        ACCESSORY71D: 'img/day-accessory70.png',
        ACCESSORY71N: 'img/night-accessory70.png',
        ACCESSORY72D: 'img/day-accessory71.png',
        ACCESSORY72N: 'img/night-accessory71.png',
        ACCESSORY73D: 'img/day-accessory72.png',
        ACCESSORY73N: 'img/night-accessory72.png',
        ACCESSORY74D: 'img/day-accessory73.png',
        ACCESSORY74N: 'img/night-accessory73.png',
        ACCESSORY75D: 'img/day-accessory74.png',
        ACCESSORY75N: 'img/night-accessory74.png',
        ACCESSORY76D: 'img/day-accessory75.png',
        ACCESSORY76N: 'img/night-accessory75.png',
        ACCESSORY77D: 'img/day-accessory76.png',
        ACCESSORY77N: 'img/night-accessory76.png',
        ACCESSORY78D: 'img/day-accessory77.png',
        ACCESSORY78N: 'img/night-accessory77.png',
        ACCESSORY79D: 'img/day-accessory78.png',
        ACCESSORY79N: 'img/night-accessory78.png',
        ACCESSORY80D: 'img/day-accessory79.png',
        ACCESSORY80N: 'img/night-accessory79.png',
        ACCESSORY81D: 'img/day-accessory80.png',
        ACCESSORY81N: 'img/night-accessory80.png',
        ACCESSORY82D: 'img/day-accessory81.png',
        ACCESSORY82N: 'img/night-accessory81.png',
        BOOK0D: 'img/day-book0.png',
        BOOK0N: 'img/night-book0.png',
        BOOK1D: 'img/day-book1.png',
        BOOK1N: 'img/night-book1.png',
        BOOK2D: 'img/day-book2.png',
        BOOK2N: 'img/night-book2.png',
        BOOK3D: 'img/day-book3.png',
        BOOK3N: 'img/night-book3.png',
        BOOK4D: 'img/day-book4.png',
        BOOK4N: 'img/night-book4.png',
        BOOK5D: 'img/day-book5.png',
        BOOK5N: 'img/night-book5.png',
        BOOK6D: 'img/day-book6.png',
        BOOK6N: 'img/night-book6.png',
        BOOK7D: 'img/day-book7.png',
        BOOK7N: 'img/night-book7.png',
        BOOK8D: 'img/day-book8.png',
        BOOK8N: 'img/night-book8.png',
        BOOK9D: 'img/day-book9.png',
        BOOK9N: 'img/night-book9.png',
        BOOK10D: 'img/day-book10.png',
        BOOK10N: 'img/night-book10.png',
        BOOK11D: 'img/day-book11.png',
        BOOK11N: 'img/night-book11.png',
        BOOK12D: 'img/day-book12.png',
        BOOK12N: 'img/night-book12.png',
        BOOK13D: 'img/day-book13.png',
        BOOK13N: 'img/night-book13.png',
        BOOK14D: 'img/day-book14.png',
        BOOK14N: 'img/night-book14.png',
        BOOK15D: 'img/day-book15.png',
        BOOK15N: 'img/night-book15.png',
        BOOK16D: 'img/day-book16.png',
        BOOK16N: 'img/night-book16.png',
        BOOK17D: 'img/day-book17.png',
        BOOK17N: 'img/night-book17.png',
        BOOK18D: 'img/day-book18.png',
        BOOK18N: 'img/night-book18.png',
        BOOK19D: 'img/day-book19.png',
        BOOK19N: 'img/night-book19.png',
        BOOK20D: 'img/day-book20.png',
        BOOK20N: 'img/night-book20.png',
        BOOK21D: 'img/day-book21.png',
        BOOK21N: 'img/night-book21.png',
        BOOK22D: 'img/day-book22.png',
        BOOK22N: 'img/night-book22.png',
        BOOK23D: 'img/day-book23.png',
        BOOK23N: 'img/night-book23.png',
        BOOK24D: 'img/day-book24.png',
        BOOK24N: 'img/night-book24.png',
        BOOK25D: 'img/day-book25.png',
        BOOK25N: 'img/night-book25.png',
        BOOK26D: 'img/day-book26.png',
        BOOK26N: 'img/night-book26.png',
        BOOK27D: 'img/day-book27.png',
        BOOK27N: 'img/night-book27.png',
        BOOK28D: 'img/day-book28.png',
        BOOK28N: 'img/night-book28.png',
        BOOK29D: 'img/day-book29.png',
        BOOK29N: 'img/night-book29.png',
        BOOK30D: 'img/day-book30.png',
        BOOK30N: 'img/night-book30.png',
        BOOK31D: 'img/day-book31.png',
        BOOK31N: 'img/night-book31.png',
        BOOK32D: 'img/day-book32.png',
        BOOK32N: 'img/night-book32.png',
        BOOK33D: 'img/day-book33.png',
        BOOK33N: 'img/night-book33.png',
        BOOK34D: 'img/day-book34.png',
        BOOK34N: 'img/night-book34.png',
        BOOK35D: 'img/day-book35.png',
        BOOK35N: 'img/night-book35.png',
        BOOK36D: 'img/day-book36.png',
        BOOK36N: 'img/night-book36.png',
        BOOK37D: 'img/day-book37.png',
        BOOK37N: 'img/night-book37.png',
        BOOK38D: 'img/day-book38.png',
        BOOK38N: 'img/night-book38.png',
        BOOK39D: 'img/day-book39.png',
        BOOK39N: 'img/night-book39.png',
        BOOK40D: 'img/day-book40.png',
        BOOK40N: 'img/night-book40.png',
        BOOK41D: 'img/day-book41.png',
        BOOK41N: 'img/night-book41.png',
        BOOK42D: 'img/day-book42.png',
        BOOK42N: 'img/night-book42.png',
        BOOK43D: 'img/day-book43.png',
        BOOK43N: 'img/night-book43.png',
        BOOK44D: 'img/day-book44.png',
        BOOK44N: 'img/night-book44.png',
        BOOK45D: 'img/day-book45.png',
        BOOK45N: 'img/night-book45.png',
        CRATE1D: 'img/day-crate1.png',
        CRATE1N: 'img/night-crate1.png',
        CRATE2D: 'img/day-crate2.png',
        CRATE2N: 'img/night-crate2.png',
        CRATE3D: 'img/day-crate3.png',
        CRATE3N: 'img/night-crate3.png',
        CRATE4D: 'img/day-crate4.png',
        CRATE4N: 'img/night-crate4.png',
        CRATE5D: 'img/day-crate5.png',
        CRATE5N: 'img/night-crate5.png',
        CRATE6D: 'img/day-crate6.png',
        CRATE6N: 'img/night-crate6.png',
        CRATE7D: 'img/day-crate7.png',
        CRATE7N: 'img/night-crate7.png',
        CRATE8D: 'img/day-crate8.png',
        CRATE8N: 'img/night-crate8.png',
        CRATE9D: 'img/day-crate9.png',
        CRATE9N: 'img/night-crate9.png',
        CRATE10D: 'img/day-crate10.png',
        CRATE10N: 'img/night-crate10.png',
        CRATE11D: 'img/day-crate11.png',
        CRATE11N: 'img/night-crate11.png',
        CRATE12D: 'img/day-crate12.png',
        CRATE12N: 'img/night-crate12.png',
        CRATE13D: 'img/day-crate13.png',
        CRATE13N: 'img/night-crate13.png',
        CRATE14D: 'img/day-crate14.png',
        CRATE14N: 'img/night-crate14.png',
        CRATE15D: 'img/day-crate15.png',
        CRATE15N: 'img/night-crate15.png',
        CRATE16D: 'img/day-crate16.png',
        CRATE16N: 'img/night-crate16.png',
        CRATE17D: 'img/day-crate17.png',
        CRATE17N: 'img/night-crate17.png',
        CRATE18D: 'img/day-crate18.png',
        CRATE18N: 'img/night-crate18.png',
        CRATE19D: 'img/day-crate19.png',
        CRATE19N: 'img/night-crate19.png',
        CRATE20D: 'img/day-crate20.png',
        CRATE20N: 'img/night-crate20.png',
        CRATE21D: 'img/day-crate21.png',
        CRATE21N: 'img/night-crate21.png',
        CRATE22D: 'img/day-crate22.png',
        CRATE22N: 'img/night-crate22.png',
        CRATE23D: 'img/day-crate23.png',
        CRATE23N: 'img/night-crate23.png',
        CRATE24D: 'img/day-crate24.png',
        CRATE24N: 'img/night-crate24.png',
        CRATE25D: 'img/day-crate25.png',
        CRATE25N: 'img/night-crate25.png',
        CRATE26D: 'img/day-crate26.png',
        CRATE26N: 'img/night-crate26.png',
        CRATE27D: 'img/day-crate27.png',
        CRATE27N: 'img/night-crate27.png',
        CRATE28D: 'img/day-crate28.png',
        CRATE28N: 'img/night-crate28.png',
        CRATE29D: 'img/day-crate29.png',
        CRATE29N: 'img/night-crate29.png',
        CRATE30D: 'img/day-crate30.png',
        CRATE30N: 'img/night-crate30.png',
        CRATE31D: 'img/day-crate31.png',
        CRATE31N: 'img/night-crate31.png',
        CRATE32D: 'img/day-crate32.png',
        CRATE32N: 'img/night-crate32.png',
        CRATE33D: 'img/day-crate33.png',
        CRATE33N: 'img/night-crate33.png',
        CRATE34D: 'img/day-crate34.png',
        CRATE34N: 'img/night-crate34.png',
        CRATE35D: 'img/day-crate35.png',
        CRATE35N: 'img/night-crate35.png',
        CRATE36D: 'img/day-crate36.png',
        CRATE36N: 'img/night-crate36.png',
        CRATE37D: 'img/day-crate37.png',
        CRATE37N: 'img/night-crate37.png',
        CRATE38D: 'img/day-crate38.png',
        CRATE38N: 'img/night-crate38.png',
        CRATE39D: 'img/day-crate39.png',
        CRATE39N: 'img/night-crate39.png',
        CRATE40D: 'img/day-crate40.png',
        CRATE40N: 'img/night-crate40.png',
        CRATE41D: 'img/day-crate41.png',
        CRATE41N: 'img/night-crate41.png',
        CRATE42D: 'img/day-crate42.png',
        CRATE42N: 'img/night-crate42.png',
        CRATE43D: 'img/day-crate43.png',
        CRATE43N: 'img/night-crate43.png',
        CRATE44D: 'img/day-crate44.png',
        CRATE44N: 'img/night-crate44.png',
        CRATE45D: 'img/day-crate45.png',
        CRATE45N: 'img/night-crate45.png',
        CRATE46D: 'img/day-crate46.png',
        CRATE46N: 'img/night-crate46.png',
        CRATE47D: 'img/day-crate47.png',
        CRATE47N: 'img/night-crate47.png',
        CRATE48D: 'img/day-crate48.png',
        CRATE48N: 'img/night-crate48.png',
        CRATE49D: 'img/day-crate49.png',
        CRATE49N: 'img/night-crate49.png',
        CRATE50D: 'img/day-crate50.png',
        CRATE50N: 'img/night-crate50.png',
        CRATE51D: 'img/day-crate51.png',
        CRATE51N: 'img/night-crate51.png',
        CRATE52D: 'img/day-crate52.png',
        CRATE52N: 'img/night-crate52.png',
        CRATE53D: 'img/day-crate53.png',
        CRATE53N: 'img/night-crate53.png',
        CRATE54D: 'img/day-crate54.png',
        CRATE54N: 'img/night-crate54.png',
        CRATE55D: 'img/day-crate55.png',
        CRATE55N: 'img/night-crate55.png',
        CRATE56D: 'img/day-crate56.png',
        CRATE56N: 'img/night-crate56.png',
        CRATE57D: 'img/day-crate57.png',
        CRATE57N: 'img/night-crate57.png',
        CRATE58D: 'img/day-crate58.png',
        CRATE58N: 'img/night-crate58.png',
        CRATE59D: 'img/day-crate59.png',
        CRATE59N: 'img/night-crate59.png',
        CRATE60D: 'img/day-crate60.png',
        CRATE60N: 'img/night-crate60.png',
        CRATE61D: 'img/day-crate61.png',
        CRATE61N: 'img/night-crate61.png',
        CRATE62D: 'img/day-crate62.png',
        CRATE62N: 'img/night-crate62.png',
        CRATE63D: 'img/day-crate63.png',
        CRATE63N: 'img/night-crate63.png',
        CRATE64D: 'img/day-crate64.png',
        CRATE64N: 'img/night-crate64.png',
        CRATE65D: 'img/day-crate65.png',
        CRATE65N: 'img/night-crate65.png',
        CRATE66D: 'img/day-crate66.png',
        CRATE66N: 'img/night-crate66.png',
        CRATE67D: 'img/day-crate67.png',
        CRATE67N: 'img/night-crate67.png',
        CRATE68D: 'img/day-crate68.png',
        CRATE68N: 'img/night-crate68.png',
        CRATE69D: 'img/day-crate69.png',
        CRATE69N: 'img/night-crate69.png',
        CRATE70D: 'img/day-crate70.png',
        CRATE70N: 'img/night-crate70.png',
        CRATE71D: 'img/day-crate71.png',
        CRATE71N: 'img/night-crate71.png',
        CRATE72D: 'img/day-crate72.png',
        CRATE72N: 'img/night-crate72.png',
        DECORATION_0D: 'img/day-herb0.png',
        DECORATION_1D: 'img/day-herb1.png',
        DECORATION_2D: 'img/day-herb2.png',
        DECORATION_3D: 'img/day-herb3.png',
        DECORATION_4D: 'img/day-herb4.png',
        DECORATION_5D: 'img/day-herb5.png',
        DECORATION_6D: 'img/day-herb6.png',
        DECORATION_7D: 'img/day-herb7.png',
        DECORATION_8D: 'img/day-herb8.png',
        DECORATION_9D: 'img/day-herb9.png',
        DECORATION_10D: 'img/day-herb10.png',
        DECORATION_11D: 'img/day-herb11.png',
        DECORATION_12D: 'img/day-herb12.png',
        DECORATION_13D: 'img/day-herb13.png',
        DECORATION_14D: 'img/day-herb14.png',
        DECORATION_15D: 'img/day-herb15.png',
        DECORATION_16D: 'img/day-shell0.png',
        DECORATION_17D: 'img/day-shell1.png',
        DECORATION_18D: 'img/day-shell2.png',
        DECORATION_19D: 'img/day-leaf1.png',
        DECORATION_20D: 'img/day-leaf2.png',
        DECORATION_21D: 'img/day-leaf3.png',
        DECORATION_22D: 'img/day-leaf4.png',
        DECORATION_23D: 'img/day-leaf5.png',
        DECORATION_24D: 'img/day-leaf6.png',
        DECORATION_25D: 'img/day-leaf7.png',
        DECORATION_26D: 'img/day-leaf8.png',
        DECORATION_27D: 'img/day-rock0.png',
        DECORATION_28D: 'img/day-rock1.png',
        DECORATION_29D: 'img/day-rock2.png',
        DECORATION_30D: 'img/day-rock3.png',
        DECORATION_31D: 'img/day-rock4.png',
        DECORATION_32D: 'img/day-rock5.png',
        DECORATION_33D: 'img/day-rock6.png',
        DECORATION_34D: 'img/day-rock7.png',
        DECORATION_35D: 'img/day-rock8.png',
        DECORATION_36D: 'img/day-rock9.png',
        DECORATION_37D: 'img/day-rock10.png',
        DECORATION_38D: 'img/day-rock11.png',
        DECORATION_39D: 'img/day-rock12.png',
        DECORATION_40D: 'img/day-rock13.png',
        DECORATION_41D: 'img/day-flower1.png',
        DECORATION_42D: 'img/day-flower2.png',
        DECORATION_43D: 'img/day-flower3.png',
        DECORATION_44D: 'img/day-flower4.png',
        DECORATION_45D: 'img/day-flower5.png',
        DECORATION_46D: 'img/day-flower6.png',
        DECORATION_47D: 'img/day-flower7.png',
        DECORATION_48D: 'img/day-flower8.png',
        DECORATION_49D: 'img/day-flower9.png',
        DECORATION_50D: 'img/day-herb16.png',
        DECORATION_51D: 'img/day-herb17.png',
        DECORATION_52D: 'img/day-herb18.png',
        DECORATION_53D: 'img/day-herb19.png',
        DECORATION_54D: 'img/day-herb20.png',
        DECORATION_55D: 'img/day-herb21.png',
        DECORATION_0N: 'img/night-herb0.png',
        DECORATION_1N: 'img/night-herb1.png',
        DECORATION_2N: 'img/night-herb2.png',
        DECORATION_3N: 'img/night-herb3.png',
        DECORATION_4N: 'img/night-herb4.png',
        DECORATION_5N: 'img/night-herb5.png',
        DECORATION_6N: 'img/night-herb6.png',
        DECORATION_7N: 'img/night-herb7.png',
        DECORATION_8N: 'img/night-herb8.png',
        DECORATION_9N: 'img/night-herb9.png',
        DECORATION_10N: 'img/night-herb10.png',
        DECORATION_11N: 'img/night-herb11.png',
        DECORATION_12N: 'img/night-herb12.png',
        DECORATION_13N: 'img/night-herb13.png',
        DECORATION_14N: 'img/night-herb14.png',
        DECORATION_15N: 'img/night-herb15.png',
        DECORATION_16N: 'img/night-shell0.png',
        DECORATION_17N: 'img/night-shell1.png',
        DECORATION_18N: 'img/night-shell2.png',
        DECORATION_19N: 'img/night-leaf1.png',
        DECORATION_20N: 'img/night-leaf2.png',
        DECORATION_21N: 'img/night-leaf3.png',
        DECORATION_22N: 'img/night-leaf4.png',
        DECORATION_23N: 'img/night-leaf5.png',
        DECORATION_24N: 'img/night-leaf6.png',
        DECORATION_25N: 'img/night-leaf7.png',
        DECORATION_26N: 'img/night-leaf8.png',
        DECORATION_27N: 'img/night-rock0.png',
        DECORATION_28N: 'img/night-rock1.png',
        DECORATION_29N: 'img/night-rock2.png',
        DECORATION_30N: 'img/night-rock3.png',
        DECORATION_31N: 'img/night-rock4.png',
        DECORATION_32N: 'img/night-rock5.png',
        DECORATION_33N: 'img/night-rock6.png',
        DECORATION_34N: 'img/night-rock7.png',
        DECORATION_35N: 'img/night-rock8.png',
        DECORATION_36N: 'img/night-rock9.png',
        DECORATION_37N: 'img/night-rock10.png',
        DECORATION_38N: 'img/night-rock11.png',
        DECORATION_39N: 'img/night-rock12.png',
        DECORATION_40N: 'img/night-rock13.png',
        DECORATION_41N: 'img/night-flower1.png',
        DECORATION_42N: 'img/night-flower2.png',
        DECORATION_43N: 'img/night-flower3.png',
        DECORATION_44N: 'img/night-flower4.png',
        DECORATION_45N: 'img/night-flower5.png',
        DECORATION_46N: 'img/night-flower6.png',
        DECORATION_47N: 'img/night-flower7.png',
        DECORATION_48N: 'img/night-flower8.png',
        DECORATION_49N: 'img/night-flower9.png',
        DECORATION_50N: 'img/night-herb16.png',
        DECORATION_51N: 'img/night-herb17.png',
        DECORATION_52N: 'img/night-herb18.png',
        DECORATION_53N: 'img/night-herb19.png',
        DECORATION_54N: 'img/night-herb20.png',
        DECORATION_55N: 'img/night-herb21.png',
        DAY_RIVER_000_010_000: 'img/day-river000-010-000.png',
        DAY_RIVER_000_010_010: 'img/day-river000-010-010.png',
        DAY_RIVER_000_011_000: 'img/day-river000-011-000.png',
        DAY_RIVER_000_011_010: 'img/day-river000-011-010.png',
        DAY_RIVER_000_011_011: 'img/day-river000-011-011.png',
        DAY_RIVER_000_110_000: 'img/day-river000-110-000.png',
        DAY_RIVER_000_110_010: 'img/day-river000-110-010.png',
        DAY_RIVER_000_110_110: 'img/day-river000-110-110.png',
        DAY_RIVER_000_111_000: 'img/day-river000-111-000.png',
        DAY_RIVER_000_111_010: 'img/day-river000-111-010.png',
        DAY_RIVER_000_111_011: 'img/day-river000-111-011.png',
        DAY_RIVER_000_111_110: 'img/day-river000-111-110.png',
        DAY_RIVER_000_111_111: 'img/day-river000-111-111.png',
        DAY_RIVER_010_010_000: 'img/day-river010-010-000.png',
        DAY_RIVER_010_010_010: 'img/day-river010-010-010.png',
        DAY_RIVER_010_011_000: 'img/day-river010-011-000.png',
        DAY_RIVER_010_011_010: 'img/day-river010-011-010.png',
        DAY_RIVER_010_011_011: 'img/day-river010-011-011.png',
        DAY_RIVER_010_110_000: 'img/day-river010-110-000.png',
        DAY_RIVER_010_110_010: 'img/day-river010-110-010.png',
        DAY_RIVER_010_110_110: 'img/day-river010-110-110.png',
        DAY_RIVER_010_111_000: 'img/day-river010-111-000.png',
        DAY_RIVER_010_111_010: 'img/day-river010-111-010.png',
        DAY_RIVER_010_111_011: 'img/day-river010-111-011.png',
        DAY_RIVER_010_111_110: 'img/day-river010-111-110.png',
        DAY_RIVER_010_111_111: 'img/day-river010-111-111.png',
        DAY_RIVER_011_011_000: 'img/day-river011-011-000.png',
        DAY_RIVER_011_011_010: 'img/day-river011-011-010.png',
        DAY_RIVER_011_011_011: 'img/day-river011-011-011.png',
        DAY_RIVER_011_111_000: 'img/day-river011-111-000.png',
        DAY_RIVER_011_111_010: 'img/day-river011-111-010.png',
        DAY_RIVER_011_111_011: 'img/day-river011-111-011.png',
        DAY_RIVER_011_111_110: 'img/day-river011-111-110.png',
        DAY_RIVER_011_111_111: 'img/day-river011-111-111.png',
        DAY_RIVER_110_110_000: 'img/day-river110-110-000.png',
        DAY_RIVER_110_110_010: 'img/day-river110-110-010.png',
        DAY_RIVER_110_110_110: 'img/day-river110-110-110.png',
        DAY_RIVER_110_111_000: 'img/day-river110-111-000.png',
        DAY_RIVER_110_111_010: 'img/day-river110-111-010.png',
        DAY_RIVER_110_111_011: 'img/day-river110-111-011.png',
        DAY_RIVER_110_111_110: 'img/day-river110-111-110.png',
        DAY_RIVER_110_111_111: 'img/day-river110-111-111.png',
        DAY_RIVER_111_111_011: 'img/day-river111-111-011.png',
        DAY_RIVER_111_111_110: 'img/day-river111-111-110.png',
        DAY_RIVER_111_111_011: 'img/day-river111-111-011.png',
        DAY_RIVER_111_111_000: 'img/day-river111-111-000.png',
        DAY_RIVER_111_111_111: 'img/day-river111-111-111.png',
        DAY_RIVER_111_111_010: 'img/day-river111-111-010.png',
        NIGHT_RIVER_000_010_000: 'img/night-river000-010-000.png',
        NIGHT_RIVER_000_010_010: 'img/night-river000-010-010.png',
        NIGHT_RIVER_000_011_000: 'img/night-river000-011-000.png',
        NIGHT_RIVER_000_011_010: 'img/night-river000-011-010.png',
        NIGHT_RIVER_000_011_011: 'img/night-river000-011-011.png',
        NIGHT_RIVER_000_110_000: 'img/night-river000-110-000.png',
        NIGHT_RIVER_000_110_010: 'img/night-river000-110-010.png',
        NIGHT_RIVER_000_110_110: 'img/night-river000-110-110.png',
        NIGHT_RIVER_000_111_000: 'img/night-river000-111-000.png',
        NIGHT_RIVER_000_111_010: 'img/night-river000-111-010.png',
        NIGHT_RIVER_000_111_011: 'img/night-river000-111-011.png',
        NIGHT_RIVER_000_111_110: 'img/night-river000-111-110.png',
        NIGHT_RIVER_000_111_111: 'img/night-river000-111-111.png',
        NIGHT_RIVER_010_010_000: 'img/night-river010-010-000.png',
        NIGHT_RIVER_010_010_010: 'img/night-river010-010-010.png',
        NIGHT_RIVER_010_011_000: 'img/night-river010-011-000.png',
        NIGHT_RIVER_010_011_010: 'img/night-river010-011-010.png',
        NIGHT_RIVER_010_011_011: 'img/night-river010-011-011.png',
        NIGHT_RIVER_010_110_000: 'img/night-river010-110-000.png',
        NIGHT_RIVER_010_110_010: 'img/night-river010-110-010.png',
        NIGHT_RIVER_010_110_110: 'img/night-river010-110-110.png',
        NIGHT_RIVER_010_111_000: 'img/night-river010-111-000.png',
        NIGHT_RIVER_010_111_010: 'img/night-river010-111-010.png',
        NIGHT_RIVER_010_111_011: 'img/night-river010-111-011.png',
        NIGHT_RIVER_010_111_110: 'img/night-river010-111-110.png',
        NIGHT_RIVER_010_111_111: 'img/night-river010-111-111.png',
        NIGHT_RIVER_011_011_000: 'img/night-river011-011-000.png',
        NIGHT_RIVER_011_011_010: 'img/night-river011-011-010.png',
        NIGHT_RIVER_011_011_011: 'img/night-river011-011-011.png',
        NIGHT_RIVER_011_111_000: 'img/night-river011-111-000.png',
        NIGHT_RIVER_011_111_010: 'img/night-river011-111-010.png',
        NIGHT_RIVER_011_111_011: 'img/night-river011-111-011.png',
        NIGHT_RIVER_011_111_110: 'img/night-river011-111-110.png',
        NIGHT_RIVER_011_111_111: 'img/night-river011-111-111.png',
        NIGHT_RIVER_110_110_000: 'img/night-river110-110-000.png',
        NIGHT_RIVER_110_110_010: 'img/night-river110-110-010.png',
        NIGHT_RIVER_110_110_110: 'img/night-river110-110-110.png',
        NIGHT_RIVER_110_111_000: 'img/night-river110-111-000.png',
        NIGHT_RIVER_110_111_010: 'img/night-river110-111-010.png',
        NIGHT_RIVER_110_111_011: 'img/night-river110-111-011.png',
        NIGHT_RIVER_110_111_110: 'img/night-river110-111-110.png',
        NIGHT_RIVER_110_111_111: 'img/night-river110-111-111.png',
        NIGHT_RIVER_111_111_011: 'img/night-river111-111-011.png',
        NIGHT_RIVER_111_111_110: 'img/night-river111-111-110.png',
        NIGHT_RIVER_111_111_011: 'img/night-river111-111-011.png',
        NIGHT_RIVER_111_111_000: 'img/night-river111-111-000.png',
        NIGHT_RIVER_111_111_111: 'img/night-river111-111-111.png',
        NIGHT_RIVER_111_111_010: 'img/night-river111-111-010.png',
        DAY_RIVER_COMPO1: 'img/day-pebblecompo1.png',
        DAY_RIVER_COMPO2: 'img/day-pebblecompo2.png',
        DAY_RIVER_COMPO3: 'img/day-pebblecompo3.png',
        DAY_RIVER_COMPO4: 'img/day-pebblecompo4.png',
        DAY_RIVER_COMPO5: 'img/day-pebblecompo5.png',
        DAY_RIVER_COMPO6: 'img/day-pebblecompo6.png',
        DAY_RIVER_COMPO7: 'img/day-pebblecompo7.png',
        DAY_RIVER_COMPO8: 'img/day-pebblecompo8.png',
        DAY_RIVER_COMPO9: 'img/day-pebblecompo9.png',
        DAY_RIVER_COMPO10: 'img/day-pebblecompo10.png',
        DAY_RIVER_COMPO11: 'img/day-pebblecompo11.png',
        DAY_RIVER_COMPO12: 'img/day-pebblecompo12.png',
        DAY_RIVER_COMPO13: 'img/day-pebblecompo13.png',
        DAY_RIVER_COMPO14: 'img/day-pebblecompo14.png',
        DAY_RIVER_COMPO15: 'img/day-pebblecompo15.png',
        DAY_RIVER_COMPO16: 'img/day-pebblecompo16.png',
        DAY_RIVER_COMPO17: 'img/day-pebblecompo17.png',
        DAY_RIVER_COMPO18: 'img/day-pebblecompo18.png',
        DAY_RIVER_COMPO19: 'img/day-pebblecompo19.png',
        DAY_RIVER_COMPO20: 'img/day-pebblecompo20.png',
        DAY_RIVER_COMPO21: 'img/day-pebblecompo21.png',
        DAY_RIVER_COMPO22: 'img/day-pebblecompo22.png',
        DAY_RIVER_COMPO23: 'img/day-pebblecompo23.png',
        DAY_RIVER_COMPO24: 'img/day-pebblecompo24.png',
        DAY_RIVER_COMPO25: 'img/day-pebblecompo25.png',
        DAY_RIVER_COMPO26: 'img/day-pebblecompo26.png',
        DAY_RIVER_COMPO27: 'img/day-pebblecompo27.png',
        DAY_RIVER_COMPO28: 'img/day-pebblecompo28.png',
        NIGHT_RIVER_COMPO1: 'img/night-pebblecompo1.png',
        NIGHT_RIVER_COMPO2: 'img/night-pebblecompo2.png',
        NIGHT_RIVER_COMPO3: 'img/night-pebblecompo3.png',
        NIGHT_RIVER_COMPO4: 'img/night-pebblecompo4.png',
        NIGHT_RIVER_COMPO5: 'img/night-pebblecompo5.png',
        NIGHT_RIVER_COMPO6: 'img/night-pebblecompo6.png',
        NIGHT_RIVER_COMPO7: 'img/night-pebblecompo7.png',
        NIGHT_RIVER_COMPO8: 'img/night-pebblecompo8.png',
        NIGHT_RIVER_COMPO9: 'img/night-pebblecompo9.png',
        NIGHT_RIVER_COMPO10: 'img/night-pebblecompo10.png',
        NIGHT_RIVER_COMPO11: 'img/night-pebblecompo11.png',
        NIGHT_RIVER_COMPO12: 'img/night-pebblecompo12.png',
        NIGHT_RIVER_COMPO13: 'img/night-pebblecompo13.png',
        NIGHT_RIVER_COMPO14: 'img/night-pebblecompo14.png',
        NIGHT_RIVER_COMPO15: 'img/night-pebblecompo15.png',
        NIGHT_RIVER_COMPO16: 'img/night-pebblecompo16.png',
        NIGHT_RIVER_COMPO17: 'img/night-pebblecompo17.png',
        NIGHT_RIVER_COMPO18: 'img/night-pebblecompo18.png',
        NIGHT_RIVER_COMPO19: 'img/night-pebblecompo19.png',
        NIGHT_RIVER_COMPO20: 'img/night-pebblecompo20.png',
        NIGHT_RIVER_COMPO21: 'img/night-pebblecompo21.png',
        NIGHT_RIVER_COMPO22: 'img/night-pebblecompo22.png',
        NIGHT_RIVER_COMPO23: 'img/night-pebblecompo23.png',
        NIGHT_RIVER_COMPO24: 'img/night-pebblecompo24.png',
        NIGHT_RIVER_COMPO25: 'img/night-pebblecompo25.png',
        NIGHT_RIVER_COMPO26: 'img/night-pebblecompo26.png',
        NIGHT_RIVER_COMPO27: 'img/night-pebblecompo27.png',
        NIGHT_RIVER_COMPO28: 'img/night-pebblecompo28.png',
        BABY_MAMMOTHD: 'img/day-baby-mammoth.png',
        BABY_MAMMOTH_TAMEDD: 'img/day-baby-mammoth-tamed.png',
        BABY_MAMMOTH_ATTACKD: 'img/day-baby-mammoth-angry.png',
        BABY_MAMMOTHN: 'img/night-baby-mammoth.png',
        BABY_MAMMOTH_TAMEDN: 'img/night-baby-mammoth-tamed.png',
        BABY_MAMMOTH_ATTACKN: 'img/night-baby-mammoth-angry.png',
        INV_BABY_MAMMOTH_OUT: 'img/inv-mammoth-out.png',
        INV_BABY_MAMMOTH_IN: 'img/inv-mammoth-in.png',
        INV_BABY_MAMMOTH_CLICK: 'img/inv-mammoth-click.png',
        HURT_BABY_MAMMOTH: 'img/hurt-baby-mammoth.png',
        BABY_MAMMOTH_STEP: 'img/baby-mammoth-step.png',
        FLOWER_HATD: 'img/day-flower-hat.png',
        FLOWER_HATN: 'img/night-flower-hat.png',
        INV_FLOWER_HAT_OUT: 'img/inv-flower-hat-out.png',
        INV_FLOWER_HAT_IN: 'img/inv-flower-hat-in.png',
        INV_FLOWER_HAT_CLICK: 'img/inv-flower-hat-click.png',
        FUR_HATD: 'img/day-fur-hat.png',
        FUR_HATN: 'img/night-fur-hat.png',
        INV_FUR_HAT_OUT: 'img/inv-fur-hat-out.png',
        INV_FUR_HAT_IN: 'img/inv-fur-hat-in.png',
        INV_FUR_HAT_CLICK: 'img/inv-fur-hat-click.png',
        MAMMOTHD: 'img/day-mammoth.png',
        MAMMOTHN: 'img/night-mammoth.png',
        HURT_MAMMOTH: 'img/hurt-mammoth.png',
        INV_FUR_MAMMOTH_OUT: 'img/inv-mammoth-fur-out.png',
        INV_FUR_MAMMOTH_IN: 'img/inv-mammoth-fur-in.png',
        INV_FUR_MAMMOTH_CLICK: 'img/inv-mammoth-fur-click.png',
        INV_WOOD_BOW_OUT: 'img/inv-wood-bow-out.png',
        INV_WOOD_BOW_IN: 'img/inv-wood-bow-in.png',
        INV_WOOD_BOW_CLICK: 'img/inv-wood-bow-click.png',
        INV_WOOD_ARROW_OUT: 'img/inv-wood-arrow-out.png',
        INV_WOOD_ARROW_IN: 'img/inv-wood-arrow-in.png',
        INV_WOOD_ARROW_CLICK: 'img/inv-wood-arrow-click.png',
        WOOD_BOWD: 'img/day-wood-bow2.png',
        WOOD_BOWN: 'img/night-wood-bow2.png',
        WOOD_ARROWD: 'img/day-wood-arrow.png',
        WOOD_ARROWN: 'img/night-wood-arrow.png',
        INV_STONE_BOW_OUT: 'img/inv-stone-bow-out.png',
        INV_STONE_BOW_IN: 'img/inv-stone-bow-in.png',
        INV_STONE_BOW_CLICK: 'img/inv-stone-bow-click.png',
        INV_STONE_ARROW_OUT: 'img/inv-stone-arrow-out.png',
        INV_STONE_ARROW_IN: 'img/inv-stone-arrow-in.png',
        INV_STONE_ARROW_CLICK: 'img/inv-stone-arrow-click.png',
        STONE_BOWD: 'img/day-stone-bow.png',
        STONE_BOWN: 'img/night-stone-bow.png',
        STONE_ARROWD: 'img/day-stone-arrow.png',
        STONE_ARROWN: 'img/night-stone-arrow.png',
        INV_GOLD_BOW_OUT: 'img/inv-gold-bow-out.png',
        INV_GOLD_BOW_IN: 'img/inv-gold-bow-in.png',
        INV_GOLD_BOW_CLICK: 'img/inv-gold-bow-click.png',
        INV_GOLD_ARROW_OUT: 'img/inv-gold-arrow-out.png',
        INV_GOLD_ARROW_IN: 'img/inv-gold-arrow-in.png',
        INV_GOLD_ARROW_CLICK: 'img/inv-gold-arrow-click.png',
        GOLD_BOWD: 'img/day-gold-bow.png',
        GOLD_BOWN: 'img/night-gold-bow.png',
        GOLD_ARROWD: 'img/day-gold-arrow.png',
        GOLD_ARROWN: 'img/night-gold-arrow.png',
        INV_DIAMOND_BOW_OUT: 'img/inv-diamond-bow-out.png',
        INV_DIAMOND_BOW_IN: 'img/inv-diamond-bow-in.png',
        INV_DIAMOND_BOW_CLICK: 'img/inv-diamond-bow-click.png',
        INV_DIAMOND_ARROW_OUT: 'img/inv-diamond-arrow-out.png',
        INV_DIAMOND_ARROW_IN: 'img/inv-diamond-arrow-in.png',
        INV_DIAMOND_ARROW_CLICK: 'img/inv-diamond-arrow-click.png',
        DIAMOND_BOWD: 'img/day-diamond-bow.png',
        DIAMOND_BOWN: 'img/night-diamond-bow.png',
        DIAMOND_ARROWD: 'img/day-diamond-arrow.png',
        DIAMOND_ARROWN: 'img/night-diamond-arrow.png',
        INV_AMETHYST_BOW_OUT: 'img/inv-amethyst-bow-out.png',
        INV_AMETHYST_BOW_IN: 'img/inv-amethyst-bow-in.png',
        INV_AMETHYST_BOW_CLICK: 'img/inv-amethyst-bow-click.png',
        INV_AMETHYST_ARROW_OUT: 'img/inv-amethyst-arrow-out.png',
        INV_AMETHYST_ARROW_IN: 'img/inv-amethyst-arrow-in.png',
        INV_AMETHYST_ARROW_CLICK: 'img/inv-amethyst-arrow-click.png',
        AMETHYST_BOWD: 'img/day-amethyst-bow.png',
        AMETHYST_BOWN: 'img/night-amethyst-bow.png',
        AMETHYST_ARROWD: 'img/day-amethyst-arrow.png',
        AMETHYST_ARROWN: 'img/night-amethyst-arrow.png',
        INV_DRAGON_BOW_OUT: 'img/inv-dragon-bow-out.png',
        INV_DRAGON_BOW_IN: 'img/inv-dragon-bow-in.png',
        INV_DRAGON_BOW_CLICK: 'img/inv-dragon-bow-click.png',
        INV_DRAGON_ARROW_OUT: 'img/inv-dragon-arrow-out.png',
        INV_DRAGON_ARROW_IN: 'img/inv-dragon-arrow-in.png',
        INV_DRAGON_ARROW_CLICK: 'img/inv-dragon-arrow-click.png',
        DRAGON_BOWD: 'img/day-dragon-bow.png',
        DRAGON_BOWN: 'img/night-dragon-bow.png',
        DRAGON_ARROWD: 'img/day-dragon-arrow.png',
        DRAGON_ARROWN: 'img/night-dragon-arrow.png',
        INV_REIDITE_BOW_OUT: 'img/inv-reidite-bow-out.png',
        INV_REIDITE_BOW_IN: 'img/inv-reidite-bow-in.png',
        INV_REIDITE_BOW_CLICK: 'img/inv-reidite-bow-click.png',
        INV_REIDITE_ARROW_OUT: 'img/inv-reidite-arrow-out.png',
        INV_REIDITE_ARROW_IN: 'img/inv-reidite-arrow-in.png',
        INV_REIDITE_ARROW_CLICK: 'img/inv-reidite-arrow-click.png',
        REIDITE_BOWD: 'img/day-reidite-bow.png',
        REIDITE_BOWN: 'img/night-reidite-bow.png',
        REIDITE_ARROWD: 'img/day-reidite-arrow.png',
        REIDITE_ARROWN: 'img/night-reidite-arrow.png',
        BANDAGE_ACTIVATED: 'img/bandage-activated.png',
        AUTO_FEED: 'img/auto-feed.png',
        STOP_REGENERATION_BLIZZARD: 'img/stop-regeneration.png',
        STOP_REGENERATION: 'img/stop-regeneration2.png',
        WOOD_TOWERD: 'img/day-wood-platform.png',
        WOOD_TOWERN: 'img/night-wood-platform.png',
        INV_WOOD_TOWER_IN: 'img/inv-wood-platform-in.png',
        INV_WOOD_TOWER_OUT: 'img/inv-wood-platform-out.png',
        INV_WOOD_TOWER_CLICK: 'img/inv-wood-platform-click.png',
        WOOD_SHIELDD: 'img/day-wood-shield.png',
        WOOD_SHIELDN: 'img/night-wood-shield.png',
        STONE_SHIELDD: 'img/day-stone-shield.png',
        STONE_SHIELDN: 'img/night-stone-shield.png',
        GOLD_SHIELDD: 'img/day-gold-shield.png',
        GOLD_SHIELDN: 'img/night-gold-shield.png',
        DIAMOND_SHIELDD: 'img/day-diamond-shield.png',
        DIAMOND_SHIELDN: 'img/night-diamond-shield.png',
        AMETHYST_SHIELDD: 'img/day-amethyst-shield.png',
        AMETHYST_SHIELDN: 'img/night-amethyst-shield.png',
        REIDITE_SHIELDD: 'img/day-reidite-shield.png',
        REIDITE_SHIELDN: 'img/night-reidite-shield.png',
        INV_WOOD_SHIELD_IN: 'img/inv-wood-shield-in.png',
        INV_WOOD_SHIELD_OUT: 'img/inv-wood-shield-out.png',
        INV_WOOD_SHIELD_CLICK: 'img/inv-wood-shield-click.png',
        INV_STONE_SHIELD_IN: 'img/inv-stone-shield-in.png',
        INV_STONE_SHIELD_OUT: 'img/inv-stone-shield-out.png',
        INV_STONE_SHIELD_CLICK: 'img/inv-stone-shield-click.png',
        INV_GOLD_SHIELD_IN: 'img/inv-gold-shield-in.png',
        INV_GOLD_SHIELD_OUT: 'img/inv-gold-shield-out.png',
        INV_GOLD_SHIELD_CLICK: 'img/inv-gold-shield-click.png',
        INV_DIAMOND_SHIELD_IN: 'img/inv-diamond-shield-in.png',
        INV_DIAMOND_SHIELD_OUT: 'img/inv-diamond-shield-out.png',
        INV_DIAMOND_SHIELD_CLICK: 'img/inv-diamond-shield-click.png',
        INV_AMETHYST_SHIELD_IN: 'img/inv-amethyst-shield-in.png',
        INV_AMETHYST_SHIELD_OUT: 'img/inv-amethyst-shield-out.png',
        INV_AMETHYST_SHIELD_CLICK: 'img/inv-amethyst-shield-click.png',
        INV_REIDITE_SHIELD_IN: 'img/inv-reidite-shield-in.png',
        INV_REIDITE_SHIELD_OUT: 'img/inv-reidite-shield-out.png',
        INV_REIDITE_SHIELD_CLICK: 'img/inv-reidite-shield-click.png',
        MACHETED: 'img/day-machete.png',
        MACHETEN: 'img/night-machete.png',
        INV_MACHETE_IN: 'img/inv-machete-in.png',
        INV_MACHETE_OUT: 'img/inv-machete-out.png',
        INV_MACHETE_CLICK: 'img/inv-machete-click.png'
    };

    DUMP_IMAGES = {};
    PREPROC_IMAGES = {};
    for (var i in IMAGES)
        DUMP_IMAGES[i] = IMAGES[i];
    sprite = [];

    let ReiditeSpikeAlly = new Image;
    ReiditeSpikeAlly.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-reidite-spike-ally.png"
    let AmethystSpikeAlly = new Image;
    AmethystSpikeAlly.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-amethyst-spike-ally.png"
    let DiamondSpikeAlly = new Image;
    DiamondSpikeAlly.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-diamond-spike-ally.png"
    let GoldSpikeAlly = new Image;
    GoldSpikeAlly.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-gold-spike-ally.png"
    let StoneSpikeAlly = new Image;
    StoneSpikeAlly.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-stone-spike-ally.png"
    let WoodSpikeAlly = new Image;
    WoodSpikeAlly.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-wood-spike-ally.png"

    let ReiditeSpikeEnemy = new Image;
    ReiditeSpikeEnemy.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-reidite-spike-enemy.png"
    let AmethystSpikeEnemy = new Image;
    AmethystSpikeEnemy.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-amethyst-spike-enemy.png"
    let DiamondSpikeEnemy = new Image;
    DiamondSpikeEnemy.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-diamond-spike-enemy.png"
    let GoldSpikeEnemy = new Image;
    GoldSpikeEnemy.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-gold-spike-enemy.png"
    let StoneSpikeEnemy = new Image;
    StoneSpikeEnemy.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-stone-spike-enemy.png"
    let WoodSpikeEnemy = new Image;
    WoodSpikeEnemy.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-wood-spike-enemy.png"

    let ReiditeSpikeDoorAlly = new Image;
    ReiditeSpikeDoorAlly.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-reidite-spike-door-ally.png"
    let AmethystSpikeDoorAlly = new Image;
    AmethystSpikeDoorAlly.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-amethyst-spike-door-ally.png"
    let DiamondSpikeDoorAlly = new Image;
    DiamondSpikeDoorAlly.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-diamond-spike-door-ally.png"
    let GoldSpikeDoorAlly = new Image;
    GoldSpikeDoorAlly.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-gold-spike-door-ally.png"
    let StoneSpikeDoorAlly = new Image;
    StoneSpikeDoorAlly.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-stone-spike-door-ally.png"
    let WoodSpikeDoorAlly = new Image;
    WoodSpikeDoorAlly.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-wood-spike-door-ally.png"

    let ReiditeSpikeDoorEnemy = new Image;
    ReiditeSpikeDoorEnemy.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-reidite-spike-door-enemy.png"
    let AmethystSpikeDoorEnemy = new Image;
    AmethystSpikeDoorEnemy.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-amethyst-spike-door-enemy.png"
    let DiamondSpikeDoorEnemy = new Image;
    DiamondSpikeDoorEnemy.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-diamond-spike-door-enemy.png"
    let GoldSpikeDoorEnemy = new Image;
    GoldSpikeDoorEnemy.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-gold-spike-door-enemy.png"
    let StoneSpikeDoorEnemy = new Image;
    StoneSpikeDoorEnemy.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-stone-spike-door-enemy.png"
    let WoodSpikeDoorEnemy = new Image;
    WoodSpikeDoorEnemy.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-wood-spike-door-enemy.png"

    let ReiditeDoorAlly = new Image;
    ReiditeDoorAlly.src = "https://raw.githubusercontent.com/XmreLoux/images/main/door_reidite2.png"
    let AmethystDoorAlly = new Image;
    AmethystDoorAlly.src = "https://raw.githubusercontent.com/XmreLoux/images/main/door_amethyst1.png"
    let DiamondDoorAlly = new Image;
    DiamondDoorAlly.src = "https://raw.githubusercontent.com/XmreLoux/images/main/door_diamond2.png"
    let GoldDoorAlly = new Image;
    GoldDoorAlly.src = "https://raw.githubusercontent.com/XmreLoux/images/main/door_gold2.png"
    let StoneDoorAlly = new Image;
    StoneDoorAlly.src = "https://raw.githubusercontent.com/XmreLoux/images/main/door_stone1.png"
    let WoodDoorAlly = new Image;
    WoodDoorAlly.src = "https://raw.githubusercontent.com/XmreLoux/images/main/door_wood2.png"

    let ReiditeDoorEnemy= new Image;
    ReiditeDoorEnemy.src = "https://raw.githubusercontent.com/XmreLoux/images/main/door_reidite1.png"
    let AmethystDoorEnemy = new Image;
    AmethystDoorEnemy.src = "https://raw.githubusercontent.com/XmreLoux/images/main/door_amethyst2.png"
    let DiamondDoorEnemy = new Image;
    DiamondDoorEnemy.src = "https://raw.githubusercontent.com/XmreLoux/images/main/door_diamond1.png"
    let GoldDoorEnemy = new Image;
    GoldDoorEnemy.src = "https://raw.githubusercontent.com/XmreLoux/images/main/door_gold1.png"
    let StoneDoorEnemy = new Image;
    StoneDoorEnemy.src = "https://raw.githubusercontent.com/XmreLoux/images/main/door_stone2.png"
    let WoodDoorEnemy = new Image;
    WoodDoorEnemy.src = "https://raw.githubusercontent.com/XmreLoux/images/main/door_wood1.png"

    sprite[10000] = [WoodSpikeAlly, WoodSpikeAlly];
    sprite[10001] = [WoodSpikeEnemy, WoodSpikeEnemy];

    sprite[10002] = [StoneSpikeAlly, StoneSpikeAlly];
    sprite[10003] = [StoneSpikeEnemy, StoneSpikeEnemy];

    sprite[10004] = [GoldSpikeAlly, GoldSpikeAlly];
    sprite[10005] = [GoldSpikeEnemy, GoldSpikeEnemy];

    sprite[10006] = [DiamondSpikeAlly, DiamondSpikeAlly];
    sprite[10007] = [DiamondSpikeEnemy, DiamondSpikeEnemy];

    sprite[10008] = [AmethystSpikeAlly, AmethystSpikeAlly];
    sprite[10009] = [AmethystSpikeEnemy, AmethystSpikeEnemy];

    sprite[10010] = [ReiditeSpikeAlly, ReiditeSpikeAlly];
    sprite[10011] = [ReiditeSpikeEnemy, ReiditeSpikeEnemy];


    sprite[10012] = [WoodSpikeDoorAlly, WoodSpikeDoorAlly];
    sprite[10013] = [WoodSpikeDoorEnemy, WoodSpikeDoorEnemy];

    sprite[10014] = [StoneSpikeDoorAlly, StoneSpikeDoorAlly];
    sprite[10015] = [StoneSpikeDoorEnemy, StoneSpikeDoorEnemy];

    sprite[10016] = [GoldSpikeDoorAlly, GoldSpikeDoorAlly];
    sprite[10017] = [GoldSpikeDoorEnemy, GoldSpikeDoorEnemy];

    sprite[10018] = [DiamondSpikeDoorAlly, DiamondSpikeDoorAlly];
    sprite[10019] = [DiamondSpikeDoorEnemy, DiamondSpikeDoorEnemy];

    sprite[10020] = [AmethystSpikeDoorAlly, AmethystSpikeDoorAlly];
    sprite[10021] = [AmethystSpikeDoorEnemy, AmethystSpikeDoorEnemy];

    sprite[10022] = [ReiditeSpikeDoorAlly, ReiditeSpikeDoorAlly];
    sprite[10023] = [ReiditeSpikeDoorEnemy, ReiditeSpikeDoorEnemy];

    sprite[10024] = [WoodDoorAlly, WoodDoorAlly];
    sprite[10025] = [WoodDoorEnemy, WoodDoorEnemy];

    sprite[10026] = [StoneDoorAlly, StoneDoorAlly];
    sprite[10027] = [StoneDoorEnemy, StoneDoorEnemy];

    sprite[10028] = [GoldDoorAlly, GoldDoorAlly];
    sprite[10029] = [GoldDoorEnemy, GoldDoorEnemy];

    sprite[10030] = [DiamondDoorAlly, DiamondDoorAlly];
    sprite[10031] = [DiamondDoorEnemy, DiamondDoorEnemy];

    sprite[10032] = [AmethystDoorAlly, AmethystDoorAlly];
    sprite[10033] = [AmethystDoorEnemy, AmethystDoorEnemy];

    sprite[10034] = [ReiditeDoorAlly, ReiditeDoorAlly];
    sprite[10035] = [ReiditeDoorEnemy, ReiditeDoorEnemy];

    RARITY = {};
    RARITY.FREE = 0;
    RARITY.WOOD = 1;
    RARITY.STONE = 2;
    RARITY.GOLD = 3;
    RARITY.DIAMOND = 4;
    RARITY.AMETHYST = 5;
    RARITY.REIDITE = 6;
    RARITY.SPECIAL = 7;
    RARITY.LEVEL = 8;
    COSMETICS = {};
    MINIMAP_UTILS = [];
    find_cosmetics_per_id = function (cosmetics, id) {
        for (var i = 0; i < cosmetics.length; i++) {
            if (cosmetics[i].id === id)
                return i;

        }
        return -1;
    };
    var MINIMAP_LIST = [];

    function render_type_resources_minimap(type, gap) {
        for (var i = 0; i < MINIMAP_LIST.length; i += gap) {
            var r = MINIMAP_LIST[i];
            if (r[0] === type)
                render_resource_minimap(r[0], r[1], r[2], r[3]);

        }
    };

    function render_all_resources_minimap() {
        render_type_resources_minimap("isl", 1);
        render_type_resources_minimap("wtb", 20);
        render_type_resources_minimap("la", 1);
        render_type_resources_minimap("c", 1);
        render_type_resources_minimap("s", 1);
        render_type_resources_minimap("f", 1);
        render_type_resources_minimap("p", 1);
        render_type_resources_minimap("g", 1);
        render_type_resources_minimap("d", 1);
        render_type_resources_minimap("a", 1);
        render_type_resources_minimap("re", 1);
        render_type_resources_minimap("m", 1);
        MINIMAP_LIST = [];
    };

    function add_resource_minimap(type, subtype, i, j) {
        MINIMAP_LIST.push([type, subtype, i, j]);
    };

    function render_resource_minimap(type, subtype, i, j) {
        var resource = MINIMAP_UTILS[type];
        if (resource === undefined)
            return;

        for (var k = 0; k < 2; k++) {
            var img = resource[subtype][k];
            var x = (193 * j) / world.nw;
            var y = (193 * i) / world.nh;
            var w = img.width / 3.5;
            var h = img.height / 3.5;
            sprite[SPRITE.MINIMAP_CTX][k].drawImage(img, x - (w / 2), y - (h / 2), w, h);
            x = (600 * j) / world.nw;
            y = (600 * i) / world.nh;
            w = img.width / 1.5;
            h = img.height / 1.5;
            sprite[SPRITE.BIGMAP_CTX][k].drawImage(img, x - (w / 2), y - (h / 2), w, h);
        }
    };
    render_minimap = function () {
        for (var i = 0; i < 2; i++) {
            sprite[SPRITE.MINIMAP_CTX][i].clearRect(0, 0, 193, 193);
            sprite[SPRITE.MINIMAP_CTX][i].drawImage(MINIMAP_UTILS["MAP"][i], 0, 0, 193, 193);
            sprite[SPRITE.BIGMAP_CTX][i].clearRect(0, 0, 600, 600);
            sprite[SPRITE.BIGMAP_CTX][i].drawImage(MINIMAP_UTILS["MAP"][i], 0, 0, 600, 600);
            for (var j = world.biomes.length - 1; j >= 0; j--) {
                var biome = world.biomes[j];
                var x = (193 * biome.x1) / (100 * world.nw);
                var y = (193 * biome.y1) / (100 * world.nh);
                var w = (193 * biome.w) / (100 * world.nw);
                var h = (193 * biome.h) / (100 * world.nh);
                var bx = (600 * biome.x1) / (100 * world.nw);
                var by = (600 * biome.y1) / (100 * world.nh);
                var bw = (600 * biome.w) / (100 * world.nw);
                var bh = (600 * biome.h) / (100 * world.nh);
                if (biome.t === world.BIOME_FOREST) {
                    sprite[SPRITE.MINIMAP_CTX][i].drawImage(MINIMAP_UTILS["FOREST"][i], x, y, w, h);
                    sprite[SPRITE.BIGMAP_CTX][i].drawImage(MINIMAP_UTILS["FOREST"][i], bx, by, bw, bh);
                }
                if (biome.t === world.BIOME_WINTER) {
                    sprite[SPRITE.MINIMAP_CTX][i].drawImage(MINIMAP_UTILS["WINTER"][i], x, y, w, h);
                    sprite[SPRITE.BIGMAP_CTX][i].drawImage(MINIMAP_UTILS["WINTER"][i], bx, by, bw, bh);
                }
                if (biome.t === world.BIOME_LAVA) {
                    sprite[SPRITE.MINIMAP_CTX][i].drawImage(MINIMAP_UTILS["LAVA"][i], x, y, w, h);
                    sprite[SPRITE.BIGMAP_CTX][i].drawImage(MINIMAP_UTILS["LAVA"][i], bx, by, bw, bh);
                }
                if (biome.t === world.BIOME_DRAGON) {
                    sprite[SPRITE.MINIMAP_CTX][i].drawImage(MINIMAP_UTILS["CAVE"][i], x, y, w, h);
                    sprite[SPRITE.BIGMAP_CTX][i].drawImage(MINIMAP_UTILS["CAVE"][i], bx, by, bw, bh);
                }
                if (biome.t === world.BIOME_DESERT) {
                    sprite[SPRITE.MINIMAP_CTX][i].drawImage(MINIMAP_UTILS["DESERT"][i], x, y, w, h);
                    sprite[SPRITE.BIGMAP_CTX][i].drawImage(MINIMAP_UTILS["DESERT"][i], bx, by, bw, bh);
                }
            }
        }
    };
    render_cosmetics = function () {
        COSMETICS = {
            SKIN: [{
                id: 0,
                day: IMAGES.PLAYER0D,
                night: IMAGES.PLAYER0N,
                dayHand: IMAGES.HAND0D,
                nightHand: IMAGES.HAND0N,
                rarity: RARITY.FREE,
                author: "Starve.io",
                name: "Starver"
            }, {
                id: 3,
                day: IMAGES.PLAYER3D,
                night: IMAGES.PLAYER3N,
                dayHand: IMAGES.HAND3D,
                nightHand: IMAGES.HAND3N,
                rarity: RARITY.FREE,
                author: "Starve.io",
                name: "Angry"
            }, {
                id: 2,
                day: IMAGES.PLAYER2D,
                night: IMAGES.PLAYER2N,
                dayHand: IMAGES.HAND2D,
                nightHand: IMAGES.HAND2N,
                rarity: RARITY.FREE,
                author: "Starve.io",
                name: "Sad"
            }, {
                id: 9,
                day: IMAGES.PLAYER9D,
                night: IMAGES.PLAYER9N,
                dayHand: IMAGES.HAND9D,
                nightHand: IMAGES.HAND9N,
                rarity: RARITY.FREE,
                author: "Starve.io",
                name: "Happy 1"
            }, {
                id: 1,
                day: IMAGES.PLAYER1D,
                night: IMAGES.PLAYER1N,
                dayHand: IMAGES.HAND1D,
                nightHand: IMAGES.HAND1N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "What?"
            }, {
                id: 4,
                day: IMAGES.PLAYER4D,
                night: IMAGES.PLAYER4N,
                dayHand: IMAGES.HAND4D,
                nightHand: IMAGES.HAND4N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Suspicious"
            }, {
                id: 5,
                day: IMAGES.PLAYER5D,
                night: IMAGES.PLAYER5N,
                dayHand: IMAGES.HAND5D,
                nightHand: IMAGES.HAND5N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Scar"
            }, {
                id: 6,
                day: IMAGES.PLAYER6D,
                night: IMAGES.PLAYER6N,
                dayHand: IMAGES.HAND6D,
                nightHand: IMAGES.HAND6N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "In Trouble"
            }, {
                id: 7,
                day: IMAGES.PLAYER7D,
                night: IMAGES.PLAYER7N,
                dayHand: IMAGES.HAND7D,
                nightHand: IMAGES.HAND7N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Cute"
            }, {
                id: 8,
                day: IMAGES.PLAYER8D,
                night: IMAGES.PLAYER8N,
                dayHand: IMAGES.HAND8D,
                nightHand: IMAGES.HAND8N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Bored 1"
            }, {
                id: 10,
                day: IMAGES.PLAYER10D,
                night: IMAGES.PLAYER10N,
                dayHand: IMAGES.HAND10D,
                nightHand: IMAGES.HAND10N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Happy 2"
            }, {
                id: 11,
                day: IMAGES.PLAYER11D,
                night: IMAGES.PLAYER11N,
                dayHand: IMAGES.HAND11D,
                nightHand: IMAGES.HAND11N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Crazy"
            }, {
                id: 12,
                day: IMAGES.PLAYER12D,
                night: IMAGES.PLAYER12N,
                dayHand: IMAGES.HAND12D,
                nightHand: IMAGES.HAND12N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Happy 3"
            }, {
                id: 13,
                day: IMAGES.PLAYER13D,
                night: IMAGES.PLAYER13N,
                dayHand: IMAGES.HAND13D,
                nightHand: IMAGES.HAND13N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Very Cute"
            }, {
                id: 14,
                day: IMAGES.PLAYER14D,
                night: IMAGES.PLAYER14N,
                dayHand: IMAGES.HAND14D,
                nightHand: IMAGES.HAND14N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Curious"
            }, {
                id: 15,
                day: IMAGES.PLAYER15D,
                night: IMAGES.PLAYER15N,
                dayHand: IMAGES.HAND15D,
                nightHand: IMAGES.HAND15N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Bored 2"
            }, {
                id: 16,
                day: IMAGES.PLAYER16D,
                night: IMAGES.PLAYER16N,
                dayHand: IMAGES.HAND16D,
                nightHand: IMAGES.HAND16N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Happy 4"
            }, {
                id: 17,
                day: IMAGES.PLAYER17D,
                night: IMAGES.PLAYER17N,
                dayHand: IMAGES.HAND17D,
                nightHand: IMAGES.HAND17N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Scar 2"
            }, {
                id: 18,
                day: IMAGES.PLAYER18D,
                night: IMAGES.PLAYER18N,
                dayHand: IMAGES.HAND18D,
                nightHand: IMAGES.HAND18N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Sick"
            }, {
                id: 19,
                day: IMAGES.PLAYER19D,
                night: IMAGES.PLAYER19N,
                dayHand: IMAGES.HAND19D,
                nightHand: IMAGES.HAND19N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Somnambule"
            }, {
                id: 24,
                day: IMAGES.SKIN7D,
                night: IMAGES.SKIN7N,
                dayHand: IMAGES.HAND_SKIN7D,
                nightHand: IMAGES.HAND_SKIN7N,
                rarity: RARITY.WOOD,
                author: "Pixelbitie",
                name: "Feel Bad"
            }, {
                id: 23,
                day: IMAGES.SKIN0D,
                night: IMAGES.SKIN0N,
                dayHand: IMAGES.HAND_SKIN0D,
                nightHand: IMAGES.HAND_SKIN0N,
                rarity: RARITY.WOOD,
                author: "Pixelbitie",
                name: "Mmmh."
            }, {
                id: 103,
                day: IMAGES.SKIN78D,
                night: IMAGES.SKIN78N,
                dayHand: IMAGES.HAND_SKIN78D,
                nightHand: IMAGES.HAND_SKIN78N,
                rarity: RARITY.WOOD,
                author: "pizza wa",
                name: "Panic"
            }, {
                id: 105,
                day: IMAGES.SKIN80D,
                night: IMAGES.SKIN80N,
                dayHand: IMAGES.HAND_SKIN80D,
                nightHand: IMAGES.HAND_SKIN80N,
                rarity: RARITY.WOOD,
                author: "pizza wa",
                name: "Hypnotic"
            }, {
                id: 106,
                day: IMAGES.SKIN81D,
                night: IMAGES.SKIN81N,
                dayHand: IMAGES.HAND_SKIN81D,
                nightHand: IMAGES.HAND_SKIN81N,
                rarity: RARITY.WOOD,
                author: "pizza wa",
                name: "Stars in the eyes"
            }, {
                id: 104,
                day: IMAGES.SKIN79D,
                night: IMAGES.SKIN79N,
                dayHand: IMAGES.HAND_SKIN79D,
                nightHand: IMAGES.HAND_SKIN79N,
                rarity: RARITY.STONE,
                author: "pizza wa",
                name: "Scared at night"
            }, {
                id: 20,
                day: IMAGES.SKIN_VAMPIRED,
                night: IMAGES.SKIN_VAMPIREN,
                dayHand: IMAGES.HAND_VAMPIRED,
                nightHand: IMAGES.HAND_VAMPIREN,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Vampire"
            }, {
                id: 21,
                day: IMAGES.SKIN_ZOMBIED,
                night: IMAGES.SKIN_ZOMBIEN,
                dayHand: IMAGES.HAND_ZOMBIED,
                nightHand: IMAGES.HAND_ZOMBIEN,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Zombie"
            }, {
                id: 22,
                day: IMAGES.SKIN_DEVASTD,
                night: IMAGES.SKIN_DEVASTN,
                dayHand: IMAGES.HAND_DEVASTD,
                nightHand: IMAGES.HAND_DEVASTN,
                rarity: RARITY.STONE,
                author: "Pixelbitie",
                name: "Devaster"
            }, {
                id: 116,
                day: IMAGES.SKIN91D,
                night: IMAGES.SKIN91N,
                dayHand: IMAGES.HAND_SKIN91D,
                nightHand: IMAGES.HAND_SKIN91N,
                rarity: RARITY.STONE,
                author: "Fukss",
                name: "Dead Devaster"
            }, {
                id: 27,
                day: IMAGES.SKIN19D,
                night: IMAGES.SKIN19N,
                dayHand: IMAGES.HAND_SKIN19D,
                nightHand: IMAGES.HAND_SKIN19N,
                rarity: RARITY.STONE,
                author: "Winter",
                name: "Cactus"
            }, {
                id: 28,
                day: IMAGES.SKIN20D,
                night: IMAGES.SKIN20N,
                dayHand: IMAGES.HAND_SKIN20D,
                nightHand: IMAGES.HAND_SKIN20N,
                rarity: RARITY.STONE,
                author: "pizza wa",
                name: "Bee"
            }, {
                id: 49,
                day: IMAGES.SKIN24D,
                night: IMAGES.SKIN24N,
                dayHand: IMAGES.HAND_SKIN24D,
                nightHand: IMAGES.HAND_SKIN24N,
                rarity: RARITY.STONE,
                author: "Taco4Life",
                name: "Camo Skin"
            }, {
                id: 58,
                day: IMAGES.SKIN34D,
                night: IMAGES.SKIN34N,
                dayHand: IMAGES.HAND_SKIN34D,
                nightHand: IMAGES.HAND_SKIN34N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Blue Limax Skin"
            }, {
                id: 59,
                day: IMAGES.SKIN33D,
                night: IMAGES.SKIN33N,
                dayHand: IMAGES.HAND_SKIN33D,
                nightHand: IMAGES.HAND_SKIN33N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Red Limax Skin"
            }, {
                id: 94,
                day: IMAGES.SKIN69D,
                night: IMAGES.SKIN69N,
                dayHand: IMAGES.HAND_SKIN69D,
                nightHand: IMAGES.HAND_SKIN69N,
                rarity: RARITY.STONE,
                author: "Taco4Life",
                name: "Mr. Pumpkin"
            }, {
                id: 109,
                day: IMAGES.SKIN84D,
                night: IMAGES.SKIN84N,
                dayHand: IMAGES.HAND_SKIN84D,
                nightHand: IMAGES.HAND_SKIN84N,
                rarity: RARITY.STONE,
                author: "pizza wa",
                name: "Wood"
            }, {
                id: 114,
                day: IMAGES.SKIN89D,
                night: IMAGES.SKIN89N,
                dayHand: IMAGES.HAND_SKIN89D,
                nightHand: IMAGES.HAND_SKIN89N,
                rarity: RARITY.STONE,
                author: "pizza wa",
                name: "Zebra"
            }, {
                id: 120,
                day: IMAGES.SKIN95D,
                night: IMAGES.SKIN95N,
                dayHand: IMAGES.HAND_SKIN95D,
                nightHand: IMAGES.HAND_SKIN95N,
                rarity: RARITY.STONE,
                author: "CrysTal",
                name: "Tiger"
            }, {
                id: 134,
                day: IMAGES.SKIN109D,
                night: IMAGES.SKIN109N,
                dayHand: IMAGES.HAND_SKIN109D,
                nightHand: IMAGES.HAND_SKIN109N,
                rarity: RARITY.STONE,
                author: "Franchestcreator",
                name: "Day or Night"
            }, {
                id: 135,
                day: IMAGES.SKIN110D,
                night: IMAGES.SKIN110N,
                dayHand: IMAGES.HAND_SKIN110D,
                nightHand: IMAGES.HAND_SKIN110N,
                rarity: RARITY.STONE,
                author: "Poinet",
                name: "Square Starver"
            }, {
                id: 136,
                day: IMAGES.SKIN111D,
                night: IMAGES.SKIN111N,
                dayHand: IMAGES.HAND_SKIN111D,
                nightHand: IMAGES.HAND_SKIN111N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Voodoo Doll"
            }, {
                id: 137,
                day: IMAGES.SKIN112D,
                night: IMAGES.SKIN112N,
                dayHand: IMAGES.HAND_SKIN112D,
                nightHand: IMAGES.HAND_SKIN112N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Frankenstein"
            }, {
                id: 138,
                day: IMAGES.SKIN114D,
                night: IMAGES.SKIN114N,
                dayHand: IMAGES.HAND_SKIN114D,
                nightHand: IMAGES.HAND_SKIN114N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Old Mummy"
            }, {
                id: 139,
                day: IMAGES.SKIN115D,
                night: IMAGES.SKIN115N,
                dayHand: IMAGES.HAND_SKIN115D,
                nightHand: IMAGES.HAND_SKIN115N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Werewolf"
            }, {
                id: 140,
                day: IMAGES.SKIN116D,
                night: IMAGES.SKIN116N,
                dayHand: IMAGES.HAND_SKIN116D,
                nightHand: IMAGES.HAND_SKIN116N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Old Cthulhu"
            }, {
                id: 141,
                day: IMAGES.SKIN117D,
                night: IMAGES.SKIN117N,
                dayHand: IMAGES.HAND_SKIN117D,
                nightHand: IMAGES.HAND_SKIN117N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Sea Man"
            }, {
                id: 142,
                day: IMAGES.SKIN118D,
                night: IMAGES.SKIN118N,
                dayHand: IMAGES.HAND_SKIN118D,
                nightHand: IMAGES.HAND_SKIN118N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Old Pumpkin"
            }, {
                id: 148,
                day: IMAGES.SKIN124D,
                night: IMAGES.SKIN124N,
                dayHand: IMAGES.HAND_SKIN124D,
                nightHand: IMAGES.HAND_SKIN124N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Old Snowman"
            }, {
                id: 149,
                day: IMAGES.SKIN125D,
                night: IMAGES.SKIN125N,
                dayHand: IMAGES.HAND_SKIN125D,
                nightHand: IMAGES.HAND_SKIN125N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Old Christmas Tree Man"
            }, {
                id: 150,
                day: IMAGES.SKIN126D,
                night: IMAGES.SKIN126N,
                dayHand: IMAGES.HAND_SKIN126D,
                nightHand: IMAGES.HAND_SKIN126N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Old Mrs Bell"
            }, {
                id: 151,
                day: IMAGES.SKIN127D,
                night: IMAGES.SKIN127N,
                dayHand: IMAGES.HAND_SKIN127D,
                nightHand: IMAGES.HAND_SKIN127N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Old Elfy"
            }, {
                id: 152,
                day: IMAGES.SKIN128D,
                night: IMAGES.SKIN128N,
                dayHand: IMAGES.HAND_SKIN128D,
                nightHand: IMAGES.HAND_SKIN128N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Old Mr Present"
            }, {
                id: 153,
                day: IMAGES.SKIN129D,
                night: IMAGES.SKIN129N,
                dayHand: IMAGES.HAND_SKIN129D,
                nightHand: IMAGES.HAND_SKIN129N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "My Dear Old Deer"
            }, {
                id: 154,
                day: IMAGES.SKIN130D,
                night: IMAGES.SKIN130N,
                dayHand: IMAGES.HAND_SKIN130D,
                nightHand: IMAGES.HAND_SKIN130N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Mr Angel"
            }, {
                id: 155,
                day: IMAGES.SKIN131D,
                night: IMAGES.SKIN131N,
                dayHand: IMAGES.HAND_SKIN131D,
                nightHand: IMAGES.HAND_SKIN131N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Mr Ice Cube"
            }, {
                id: 156,
                day: IMAGES.SKIN132D,
                night: IMAGES.SKIN132N,
                dayHand: IMAGES.HAND_SKIN132D,
                nightHand: IMAGES.HAND_SKIN132N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Mr Snowman"
            }, {
                id: 159,
                day: IMAGES.SKIN135D,
                night: IMAGES.SKIN135N,
                dayHand: IMAGES.HAND_SKIN135D,
                nightHand: IMAGES.HAND_SKIN135N,
                rarity: RARITY.STONE,
                author: "CrysTal",
                name: "Crystal Sky Skin"
            }, {
                id: 167,
                day: IMAGES.SKIN143D,
                night: IMAGES.SKIN143N,
                dayHand: IMAGES.HAND_SKIN143D,
                nightHand: IMAGES.HAND_SKIN143N,
                rarity: RARITY.STONE,
                author: "Franchestcreator",
                name: "Radioactive Starver"
            }, {
                id: 169,
                day: IMAGES.SKIN146D,
                night: IMAGES.SKIN146N,
                dayHand: IMAGES.HAND_SKIN146D,
                nightHand: IMAGES.HAND_SKIN146N,
                rarity: RARITY.STONE,
                author: "TheScaryBlaze",
                name: "Eaten Cookie"
            }, {
                id: 170,
                day: IMAGES.SKIN147D,
                night: IMAGES.SKIN147N,
                dayHand: IMAGES.HAND_SKIN147D,
                nightHand: IMAGES.HAND_SKIN147N,
                rarity: RARITY.STONE,
                author: "aloner",
                name: "Blob Thing"
            }, {
                id: 172,
                day: IMAGES.SKIN149D,
                night: IMAGES.SKIN149N,
                dayHand: IMAGES.HAND_SKIN149D,
                nightHand: IMAGES.HAND_SKIN149N,
                rarity: RARITY.STONE,
                author: "aloner",
                name: "Machine Mask"
            }, {
                id: 29,
                day: IMAGES.SKIN2D,
                night: IMAGES.SKIN2N,
                dayHand: IMAGES.HAND_SKIN2D,
                nightHand: IMAGES.HAND_SKIN2N,
                rarity: RARITY.GOLD,
                author: "Pixelbitie",
                name: "Lollipop 1"
            }, {
                id: 30,
                day: IMAGES.SKIN3D,
                night: IMAGES.SKIN3N,
                dayHand: IMAGES.HAND_SKIN3D,
                nightHand: IMAGES.HAND_SKIN3N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Lollipop 2"
            }, {
                id: 31,
                day: IMAGES.SKIN4D,
                night: IMAGES.SKIN4N,
                dayHand: IMAGES.HAND_SKIN4D,
                nightHand: IMAGES.HAND_SKIN4N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Lollipop 3"
            }, {
                id: 32,
                day: IMAGES.SKIN5D,
                night: IMAGES.SKIN5N,
                dayHand: IMAGES.HAND_SKIN5D,
                nightHand: IMAGES.HAND_SKIN5N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Lollipop 4"
            }, {
                id: 33,
                day: IMAGES.SKIN8D,
                night: IMAGES.SKIN8N,
                dayHand: IMAGES.HAND_SKIN8D,
                nightHand: IMAGES.HAND_SKIN8N,
                rarity: RARITY.GOLD,
                author: "Sushui",
                name: "Yellow Bird"
            }, {
                id: 34,
                day: IMAGES.SKIN9D,
                night: IMAGES.SKIN9N,
                dayHand: IMAGES.HAND_SKIN9D,
                nightHand: IMAGES.HAND_SKIN9N,
                rarity: RARITY.GOLD,
                author: "Sushui",
                name: "Red Bird"
            }, {
                id: 35,
                day: IMAGES.SKIN10D,
                night: IMAGES.SKIN10N,
                dayHand: IMAGES.HAND_SKIN10D,
                nightHand: IMAGES.HAND_SKIN10N,
                rarity: RARITY.GOLD,
                author: "Sushui",
                name: "Blue Bird"
            }, {
                id: 37,
                day: IMAGES.SKIN17D,
                night: IMAGES.SKIN17N,
                dayHand: IMAGES.HAND_SKIN17D,
                nightHand: IMAGES.HAND_SKIN17N,
                rarity: RARITY.GOLD,
                author: "Winter",
                name: "Owl"
            }, {
                id: 52,
                day: IMAGES.SKIN27D,
                night: IMAGES.SKIN27N,
                dayHand: IMAGES.HAND_SKIN27D,
                nightHand: IMAGES.HAND_SKIN27N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Nemo"
            }, {
                id: 53,
                day: IMAGES.SKIN28D,
                night: IMAGES.SKIN28N,
                dayHand: IMAGES.HAND_SKIN28D,
                nightHand: IMAGES.HAND_SKIN28N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Mr. Bread"
            }, {
                id: 74,
                day: IMAGES.SKIN49D,
                night: IMAGES.SKIN49N,
                dayHand: IMAGES.HAND_SKIN49D,
                nightHand: IMAGES.HAND_SKIN49N,
                rarity: RARITY.GOLD,
                author: "Communist & Taco4Life",
                name: "Mr. Bread 2"
            }, {
                id: 75,
                day: IMAGES.SKIN50D,
                night: IMAGES.SKIN50N,
                dayHand: IMAGES.HAND_SKIN50D,
                nightHand: IMAGES.HAND_SKIN50N,
                rarity: RARITY.GOLD,
                author: "Communist & Taco4Life",
                name: "Mr. Bread 3"
            }, {
                id: 60,
                day: IMAGES.SKIN35D,
                night: IMAGES.SKIN35N,
                dayHand: IMAGES.HAND_SKIN35D,
                nightHand: IMAGES.HAND_SKIN35N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Red Berry"
            }, {
                id: 61,
                day: IMAGES.SKIN36D,
                night: IMAGES.SKIN36N,
                dayHand: IMAGES.HAND_SKIN36D,
                nightHand: IMAGES.HAND_SKIN36N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Old Berry"
            }, {
                id: 70,
                day: IMAGES.SKIN45D,
                night: IMAGES.SKIN45N,
                dayHand: IMAGES.HAND_SKIN45D,
                nightHand: IMAGES.HAND_SKIN45N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Cake"
            }, {
                id: 71,
                day: IMAGES.SKIN46D,
                night: IMAGES.SKIN46N,
                dayHand: IMAGES.HAND_SKIN46D,
                nightHand: IMAGES.HAND_SKIN46N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Christmas Cake"
            }, {
                id: 77,
                day: IMAGES.SKIN52D,
                night: IMAGES.SKIN52N,
                dayHand: IMAGES.HAND_SKIN52D,
                nightHand: IMAGES.HAND_SKIN52N,
                rarity: RARITY.GOLD,
                author: "Pancakez",
                name: "Mr. Pancake"
            }, {
                id: 87,
                day: IMAGES.SKIN62D,
                night: IMAGES.SKIN62N,
                dayHand: IMAGES.HAND_SKIN62D,
                nightHand: IMAGES.HAND_SKIN62N,
                rarity: RARITY.GOLD,
                author: "Taco4Life",
                name: "Mr. Taco"
            }, {
                id: 78,
                day: IMAGES.SKIN53D,
                night: IMAGES.SKIN53N,
                dayHand: IMAGES.HAND_SKIN53D,
                nightHand: IMAGES.HAND_SKIN53N,
                rarity: RARITY.GOLD,
                author: "Taco4Life",
                name: "Mr. Bottle"
            }, {
                id: 79,
                day: IMAGES.SKIN54D,
                night: IMAGES.SKIN54N,
                dayHand: IMAGES.HAND_SKIN54D,
                nightHand: IMAGES.HAND_SKIN54N,
                rarity: RARITY.GOLD,
                author: "Taco4Life",
                name: "Mr. Bottle 2"
            }, {
                id: 97,
                day: IMAGES.SKIN71D,
                night: IMAGES.SKIN71N,
                dayHand: IMAGES.HAND_SKIN71D,
                nightHand: IMAGES.HAND_SKIN71N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Pink Rabbit"
            }, {
                id: 102,
                day: IMAGES.SKIN77D,
                night: IMAGES.SKIN77N,
                dayHand: IMAGES.HAND_SKIN77D,
                nightHand: IMAGES.HAND_SKIN77N,
                rarity: RARITY.GOLD,
                author: "pizza wa",
                name: "Marshmallow"
            }, {
                id: 107,
                day: IMAGES.SKIN82D,
                night: IMAGES.SKIN82N,
                dayHand: IMAGES.HAND_SKIN82D,
                nightHand: IMAGES.HAND_SKIN82N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Fox"
            }, {
                id: 132,
                day: IMAGES.SKIN107D,
                night: IMAGES.SKIN107N,
                dayHand: IMAGES.HAND_SKIN107D,
                nightHand: IMAGES.HAND_SKIN107N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Raccoon"
            }, {
                id: 111,
                day: IMAGES.SKIN86D,
                night: IMAGES.SKIN86N,
                dayHand: IMAGES.HAND_SKIN86D,
                nightHand: IMAGES.HAND_SKIN86N,
                rarity: RARITY.GOLD,
                author: "pizza wa",
                name: "Cloud"
            }, {
                id: 113,
                day: IMAGES.SKIN88D,
                night: IMAGES.SKIN88N,
                dayHand: IMAGES.HAND_SKIN88D,
                nightHand: IMAGES.HAND_SKIN88N,
                rarity: RARITY.GOLD,
                author: "pizza wa",
                name: "Moon"
            }, {
                id: 117,
                day: IMAGES.SKIN92D,
                night: IMAGES.SKIN92N,
                dayHand: IMAGES.HAND_SKIN92D,
                nightHand: IMAGES.HAND_SKIN92N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Mr. Panda"
            }, {
                id: 118,
                day: IMAGES.SKIN93D,
                night: IMAGES.SKIN93N,
                dayHand: IMAGES.HAND_SKIN93D,
                nightHand: IMAGES.HAND_SKIN93N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Mr. Strawberry"
            }, {
                id: 119,
                day: IMAGES.SKIN94D,
                night: IMAGES.SKIN94N,
                dayHand: IMAGES.HAND_SKIN94D,
                nightHand: IMAGES.HAND_SKIN94N,
                rarity: RARITY.GOLD,
                author: "eogito & Sushuui",
                name: "Mummy"
            }, {
                id: 122,
                day: IMAGES.SKIN97D,
                night: IMAGES.SKIN97N,
                dayHand: IMAGES.HAND_SKIN97D,
                nightHand: IMAGES.HAND_SKIN97N,
                rarity: RARITY.GOLD,
                author: "Taco4Life",
                name: "Dino"
            }, {
                id: 127,
                day: IMAGES.SKIN102D,
                night: IMAGES.SKIN102N,
                dayHand: IMAGES.HAND_SKIN102D,
                nightHand: IMAGES.HAND_SKIN102N,
                rarity: RARITY.GOLD,
                author: "MADBalgouthi",
                name: "Mr. Koala"
            }, {
                id: 160,
                day: IMAGES.SKIN136D,
                night: IMAGES.SKIN136N,
                dayHand: IMAGES.HAND_SKIN136D,
                nightHand: IMAGES.HAND_SKIN136N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Bottle Protection"
            }, {
                id: 162,
                day: IMAGES.SKIN138D,
                night: IMAGES.SKIN138N,
                dayHand: IMAGES.HAND_SKIN138D,
                nightHand: IMAGES.HAND_SKIN138N,
                rarity: RARITY.GOLD,
                author: "CrysTal",
                name: "Leaf Man"
            }, {
                id: 166,
                day: IMAGES.SKIN142D,
                night: IMAGES.SKIN142N,
                dayHand: IMAGES.HAND_SKIN142D,
                nightHand: IMAGES.HAND_SKIN142N,
                rarity: RARITY.GOLD,
                author: "pizza wa",
                name: "Bubble"
            }, {
                id: 174,
                day: IMAGES.SKIN145D,
                night: IMAGES.SKIN145N,
                dayHand: IMAGES.HAND_SKIN145D,
                nightHand: IMAGES.HAND_SKIN145N,
                rarity: RARITY.GOLD,
                author: "upfiz",
                name: "Potato"
            }, {
                id: 171,
                day: IMAGES.SKIN148D,
                night: IMAGES.SKIN148N,
                dayHand: IMAGES.HAND_SKIN148D,
                nightHand: IMAGES.HAND_SKIN148N,
                rarity: RARITY.GOLD,
                author: "aloner",
                name: "Axolotl"
            }, {
                id: 25,
                day: IMAGES.SKIN6D,
                night: IMAGES.SKIN6N,
                dayHand: IMAGES.HAND_SKIN6D,
                nightHand: IMAGES.HAND_SKIN0N,
                rarity: RARITY.DIAMOND,
                author: "Pixelbitie",
                name: "Test Dummy"
            }, {
                id: 41,
                day: IMAGES.SKIN_STARD,
                night: IMAGES.SKIN_STARN,
                dayHand: IMAGES.HAND_STARD,
                nightHand: IMAGES.HAND_STARN,
                rarity: RARITY.DIAMOND,
                author: "pizza wa",
                name: "Star-ver"
            }, {
                id: 43,
                day: IMAGES.SKIN11D,
                night: IMAGES.SKIN11N,
                dayHand: IMAGES.HAND_SKIN11D,
                nightHand: IMAGES.HAND_SKIN11N,
                rarity: RARITY.DIAMOND,
                author: "Communist",
                name: "Starver Chest"
            }, {
                id: 88,
                day: IMAGES.SKIN63D,
                night: IMAGES.SKIN63N,
                dayHand: IMAGES.HAND_SKIN63D,
                nightHand: IMAGES.HAND_SKIN63N,
                rarity: RARITY.DIAMOND,
                author: "Communist",
                name: "Starver Workbench"
            }, {
                id: 121,
                day: IMAGES.SKIN96D,
                night: IMAGES.SKIN96N,
                dayHand: IMAGES.HAND_SKIN96D,
                nightHand: IMAGES.HAND_SKIN96N,
                rarity: RARITY.DIAMOND,
                author: "MADBalgouthi",
                name: "Fish"
            }, {
                id: 39,
                day: IMAGES.SKIN22D,
                night: IMAGES.SKIN22N,
                dayHand: IMAGES.HAND_SKIN22D,
                nightHand: IMAGES.HAND_SKIN22N,
                rarity: RARITY.DIAMOND,
                author: "Negligent4Dia",
                name: "Crab"
            }, {
                id: 40,
                day: IMAGES.SKIN23D,
                night: IMAGES.SKIN23N,
                dayHand: IMAGES.HAND_SKIN23D,
                nightHand: IMAGES.HAND_SKIN23N,
                rarity: RARITY.DIAMOND,
                author: "Negligent4Dia",
                name: "Piranha"
            }, {
                id: 36,
                day: IMAGES.SKIN16D,
                night: IMAGES.SKIN16N,
                dayHand: IMAGES.HAND_SKIN16D,
                nightHand: IMAGES.HAND_SKIN16N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Winter Fox"
            }, {
                id: 69,
                day: IMAGES.SKIN44D,
                night: IMAGES.SKIN44N,
                dayHand: IMAGES.HAND_SKIN44D,
                nightHand: IMAGES.HAND_SKIN44N,
                rarity: RARITY.DIAMOND,
                author: "Zed",
                name: "Baby Foxy"
            }, {
                id: 51,
                day: IMAGES.SKIN26D,
                night: IMAGES.SKIN26N,
                dayHand: IMAGES.HAND_SKIN26D,
                nightHand: IMAGES.HAND_SKIN26N,
                rarity: RARITY.DIAMOND,
                author: "HOWI",
                name: "Winter Bear"
            }, {
                id: 133,
                day: IMAGES.SKIN108D,
                night: IMAGES.SKIN108N,
                dayHand: IMAGES.HAND_SKIN108D,
                nightHand: IMAGES.HAND_SKIN108N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Hawk"
            }, {
                id: 55,
                day: IMAGES.SKIN30D,
                night: IMAGES.SKIN30N,
                dayHand: IMAGES.HAND_SKIN30D,
                nightHand: IMAGES.HAND_SKIN30N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Nice Little Yuki"
            }, {
                id: 68,
                day: IMAGES.SKIN43D,
                night: IMAGES.SKIN43N,
                dayHand: IMAGES.HAND_SKIN43D,
                nightHand: IMAGES.HAND_SKIN43N,
                rarity: RARITY.DIAMOND,
                author: "Taco4Life",
                name: "Baby Yuki"
            }, {
                id: 62,
                day: IMAGES.SKIN37D,
                night: IMAGES.SKIN37N,
                dayHand: IMAGES.HAND_SKIN37D,
                nightHand: IMAGES.HAND_SKIN37N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Mr. Carrot"
            }, {
                id: 56,
                day: IMAGES.SKIN31D,
                night: IMAGES.SKIN31N,
                dayHand: IMAGES.HAND_SKIN31D,
                nightHand: IMAGES.HAND_SKIN31N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Bat Limax"
            }, {
                id: 72,
                day: IMAGES.SKIN47D,
                night: IMAGES.SKIN47N,
                dayHand: IMAGES.HAND_SKIN47D,
                nightHand: IMAGES.HAND_SKIN47N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Mr. Crate"
            }, {
                id: 73,
                day: IMAGES.SKIN48D,
                night: IMAGES.SKIN48N,
                dayHand: IMAGES.HAND_SKIN48D,
                nightHand: IMAGES.HAND_SKIN48N,
                rarity: RARITY.DIAMOND,
                author: "Taco4Life & eogito",
                name: "Mr. Spider"
            }, {
                id: 93,
                day: IMAGES.SKIN68D,
                night: IMAGES.SKIN68N,
                dayHand: IMAGES.HAND_SKIN68D,
                nightHand: IMAGES.HAND_SKIN68N,
                rarity: RARITY.DIAMOND,
                author: "Anyone want to play?",
                name: "Mr. Spider 2"
            }, {
                id: 82,
                day: IMAGES.SKIN57D,
                night: IMAGES.SKIN57N,
                dayHand: IMAGES.HAND_SKIN57D,
                nightHand: IMAGES.HAND_SKIN57N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Mr. Blue Starfish"
            }, {
                id: 83,
                day: IMAGES.SKIN58D,
                night: IMAGES.SKIN58N,
                dayHand: IMAGES.HAND_SKIN58D,
                nightHand: IMAGES.HAND_SKIN58N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Mr. Orange Starfish"
            }, {
                id: 84,
                day: IMAGES.SKIN59D,
                night: IMAGES.SKIN59N,
                dayHand: IMAGES.HAND_SKIN59D,
                nightHand: IMAGES.HAND_SKIN59N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Mr. Pink Starfish"
            }, {
                id: 85,
                day: IMAGES.SKIN60D,
                night: IMAGES.SKIN60N,
                dayHand: IMAGES.HAND_SKIN60D,
                nightHand: IMAGES.HAND_SKIN60N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Mr. ShellMauve"
            }, {
                id: 86,
                day: IMAGES.SKIN61D,
                night: IMAGES.SKIN61N,
                dayHand: IMAGES.HAND_SKIN61D,
                nightHand: IMAGES.HAND_SKIN61N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Mr. Shell Bead"
            }, {
                id: 96,
                day: IMAGES.SKIN72D,
                night: IMAGES.SKIN72N,
                dayHand: IMAGES.HAND_SKIN72D,
                nightHand: IMAGES.HAND_SKIN72N,
                rarity: RARITY.DIAMOND,
                author: "Fukss",
                name: "Angry Crab"
            }, {
                id: 98,
                day: IMAGES.SKIN73D,
                night: IMAGES.SKIN73N,
                dayHand: IMAGES.HAND_SKIN73D,
                nightHand: IMAGES.HAND_SKIN73N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Penguin"
            }, {
                id: 126,
                day: IMAGES.SKIN101D,
                night: IMAGES.SKIN101N,
                dayHand: IMAGES.HAND_SKIN101D,
                nightHand: IMAGES.HAND_SKIN101N,
                rarity: RARITY.DIAMOND,
                author: "Anyone want to play?",
                name: "Mr. Boar"
            }, {
                id: 145,
                day: IMAGES.SKIN121D,
                night: IMAGES.SKIN121N,
                dayHand: IMAGES.HAND_SKIN121D,
                nightHand: IMAGES.HAND_SKIN121N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "I saw you"
            }, {
                id: 146,
                day: IMAGES.SKIN122D,
                night: IMAGES.SKIN122N,
                dayHand: IMAGES.HAND_SKIN122D,
                nightHand: IMAGES.HAND_SKIN122N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "It was funny"
            }, {
                id: 147,
                day: IMAGES.SKIN123D,
                night: IMAGES.SKIN123N,
                dayHand: IMAGES.HAND_SKIN123D,
                nightHand: IMAGES.HAND_SKIN123N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "You can scream"
            }, {
                id: 158,
                day: IMAGES.SKIN134D,
                night: IMAGES.SKIN134N,
                dayHand: IMAGES.HAND_SKIN134D,
                nightHand: IMAGES.HAND_SKIN134N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Mr. Book"
            }, {
                id: 163,
                day: IMAGES.SKIN139D,
                night: IMAGES.SKIN139N,
                dayHand: IMAGES.HAND_SKIN139D,
                nightHand: IMAGES.HAND_SKIN139N,
                rarity: RARITY.DIAMOND,
                author: "Anyone want to play?",
                name: "Mr. Mammoth"
            }, {
                id: 164,
                day: IMAGES.SKIN140D,
                night: IMAGES.SKIN140N,
                dayHand: IMAGES.HAND_SKIN140D,
                nightHand: IMAGES.HAND_SKIN140N,
                rarity: RARITY.DIAMOND,
                author: "SoOw",
                name: "Mr. Mammoth 2"
            }, {
                id: 161,
                day: IMAGES.SKIN137D,
                night: IMAGES.SKIN137N,
                dayHand: IMAGES.HAND_SKIN137D,
                nightHand: IMAGES.HAND_SKIN137N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Nightmare"
            }, {
                id: 168,
                day: IMAGES.SKIN144D,
                night: IMAGES.SKIN144N,
                dayHand: IMAGES.HAND_SKIN144D,
                nightHand: IMAGES.HAND_SKIN144N,
                rarity: RARITY.DIAMOND,
                author: "pizza wa",
                name: "Shiny Crystal"
            }, {
                id: 173,
                day: IMAGES.SKIN150D,
                night: IMAGES.SKIN150N,
                dayHand: IMAGES.HAND_SKIN150D,
                nightHand: IMAGES.HAND_SKIN150N,
                rarity: RARITY.DIAMOND,
                author: "pizza wa",
                name: "Water skin"
            }, {
                id: 42,
                day: IMAGES.SKIN14D,
                night: IMAGES.SKIN14N,
                dayHand: IMAGES.HAND_SKIN14D,
                nightHand: IMAGES.HAND_SKIN14N,
                rarity: RARITY.AMETHYST,
                author: "Winter",
                name: "Will-O\'-The-Wisp"
            }, {
                id: 91,
                day: IMAGES.SKIN66D,
                night: IMAGES.SKIN66N,
                dayHand: IMAGES.HAND_SKIN66D,
                nightHand: IMAGES.HAND_SKIN66N,
                rarity: RARITY.AMETHYST,
                author: "ExpertyAnimations",
                name: "Flame"
            }, {
                id: 26,
                day: IMAGES.SKIN15D,
                night: IMAGES.SKIN15N,
                dayHand: IMAGES.HAND_SKIN15D,
                nightHand: IMAGES.HAND_SKIN15N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "Be a Tree"
            }, {
                id: 38,
                day: IMAGES.SKIN18D,
                night: IMAGES.SKIN18N,
                dayHand: IMAGES.HAND_SKIN18D,
                nightHand: IMAGES.HAND_SKIN18N,
                rarity: RARITY.AMETHYST,
                author: "Winter",
                name: "Toxic Mutant"
            }, {
                id: 50,
                day: IMAGES.SKIN25D,
                night: IMAGES.SKIN25N,
                dayHand: IMAGES.HAND_SKIN25D,
                nightHand: IMAGES.HAND_SKIN25N,
                rarity: RARITY.AMETHYST,
                author: "Communist",
                name: "Mr. Tomato"
            }, {
                id: 54,
                day: IMAGES.SKIN29D,
                night: IMAGES.SKIN29N,
                dayHand: IMAGES.HAND_SKIN29D,
                nightHand: IMAGES.HAND_SKIN29N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "Mr. Mauve, the Lapa"
            }, {
                id: 57,
                day: IMAGES.SKIN32D,
                night: IMAGES.SKIN32N,
                dayHand: IMAGES.HAND_SKIN32D,
                nightHand: IMAGES.HAND_SKIN32N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "Golden Fish"
            }, {
                id: 64,
                day: IMAGES.SKIN39D,
                night: IMAGES.SKIN39N,
                dayHand: IMAGES.HAND_SKIN39D,
                nightHand: IMAGES.HAND_SKIN39N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "LapaMauve"
            }, {
                id: 65,
                day: IMAGES.SKIN40D,
                night: IMAGES.SKIN40N,
                dayHand: IMAGES.HAND_SKIN40D,
                nightHand: IMAGES.HAND_SKIN40N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "LapaMauve "
            }, {
                id: 92,
                day: IMAGES.SKIN67D,
                night: IMAGES.SKIN67N,
                dayHand: IMAGES.HAND_SKIN67D,
                nightHand: IMAGES.HAND_SKIN67N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "Mr. Burger"
            }, {
                id: 66,
                day: IMAGES.SKIN41D,
                night: IMAGES.SKIN41N,
                dayHand: IMAGES.HAND_SKIN41D,
                nightHand: IMAGES.HAND_SKIN41N,
                rarity: RARITY.AMETHYST,
                author: "pizza wa",
                name: "Tropical Starver"
            }, {
                id: 80,
                day: IMAGES.SKIN55D,
                night: IMAGES.SKIN55N,
                dayHand: IMAGES.HAND_SKIN55D,
                nightHand: IMAGES.HAND_SKIN55N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "Mr. ShellPink"
            }, {
                id: 81,
                day: IMAGES.SKIN56D,
                night: IMAGES.SKIN56N,
                dayHand: IMAGES.HAND_SKIN56D,
                nightHand: IMAGES.HAND_SKIN56N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "Mr. OranShell"
            }, {
                id: 99,
                day: IMAGES.SKIN74D,
                night: IMAGES.SKIN74N,
                dayHand: IMAGES.HAND_SKIN74D,
                nightHand: IMAGES.HAND_SKIN74N,
                rarity: RARITY.AMETHYST,
                author: "eogito",
                name: "Pepe"
            }, {
                id: 100,
                day: IMAGES.SKIN75D,
                night: IMAGES.SKIN75N,
                dayHand: IMAGES.HAND_SKIN75D,
                nightHand: IMAGES.HAND_SKIN75N,
                rarity: RARITY.AMETHYST,
                author: "fatant",
                name: "Mr. Ant"
            }, {
                id: 115,
                day: IMAGES.SKIN90D,
                night: IMAGES.SKIN90N,
                dayHand: IMAGES.HAND_SKIN90D,
                nightHand: IMAGES.HAND_SKIN90N,
                rarity: RARITY.AMETHYST,
                author: "MADBalgouthi",
                name: "Mr. Watermelon"
            }, {
                id: 101,
                day: IMAGES.SKIN76D,
                night: IMAGES.SKIN76N,
                dayHand: IMAGES.HAND_SKIN76D,
                nightHand: IMAGES.HAND_SKIN76N,
                rarity: RARITY.AMETHYST,
                author: "Taco4Life",
                name: "Mr. Thornbush"
            }, {
                id: 131,
                day: IMAGES.SKIN106D,
                night: IMAGES.SKIN106N,
                dayHand: IMAGES.HAND_SKIN106D,
                nightHand: IMAGES.HAND_SKIN106N,
                rarity: RARITY.AMETHYST,
                author: "Taco4Life",
                name: "Cthulhu"
            }, {
                id: 143,
                day: IMAGES.SKIN119D,
                night: IMAGES.SKIN119N,
                dayHand: IMAGES.HAND_SKIN119D,
                nightHand: IMAGES.HAND_SKIN119N,
                rarity: RARITY.AMETHYST,
                author: "eogito",
                name: "Mr. Cactus"
            }, {
                id: 144,
                day: IMAGES.SKIN120D,
                night: IMAGES.SKIN120N,
                dayHand: IMAGES.HAND_SKIN120D,
                nightHand: IMAGES.HAND_SKIN120N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "Momo"
            }, {
                id: 95,
                day: IMAGES.SKIN70D,
                night: IMAGES.SKIN70N,
                dayHand: IMAGES.HAND_SKIN70D,
                nightHand: IMAGES.HAND_SKIN70N,
                rarity: RARITY.REIDITE,
                author: "Taco4Life",
                name: "Mr. Garlic"
            }, {
                id: 76,
                day: IMAGES.SKIN51D,
                night: IMAGES.SKIN51N,
                dayHand: IMAGES.HAND_SKIN51D,
                nightHand: IMAGES.HAND_SKIN51N,
                rarity: RARITY.REIDITE,
                author: "Winter",
                name: "Robot Dragon"
            }, {
                id: 44,
                day: IMAGES.SKIN1D,
                night: IMAGES.SKIN1N,
                dayHand: IMAGES.HAND_SKIN1D,
                nightHand: IMAGES.HAND_SKIN1N,
                rarity: RARITY.REIDITE,
                author: "Winter",
                name: "Lava Dragon Version 1"
            }, {
                id: 90,
                day: IMAGES.SKIN65D,
                night: IMAGES.SKIN65N,
                dayHand: IMAGES.HAND_SKIN65D,
                nightHand: IMAGES.HAND_SKIN65N,
                rarity: RARITY.REIDITE,
                author: "ExpertyAnimations",
                name: "Lava Dragon Version 2"
            }, {
                id: 124,
                day: IMAGES.SKIN99D,
                night: IMAGES.SKIN99N,
                dayHand: IMAGES.HAND_SKIN99D,
                nightHand: IMAGES.HAND_SKIN99N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Lava Dragon Version 3"
            }, {
                id: 45,
                day: IMAGES.SKIN12D,
                night: IMAGES.SKIN12N,
                dayHand: IMAGES.HAND_SKIN12D,
                nightHand: IMAGES.HAND_SKIN12N,
                rarity: RARITY.REIDITE,
                author: "Sushui",
                name: "Ice Dragon Version 1"
            }, {
                id: 46,
                day: IMAGES.SKIN13D,
                night: IMAGES.SKIN13N,
                dayHand: IMAGES.HAND_SKIN13D,
                nightHand: IMAGES.HAND_SKIN13N,
                rarity: RARITY.REIDITE,
                author: "Winter",
                name: "Ice Dragon Version 2"
            }, {
                id: 108,
                day: IMAGES.SKIN83D,
                night: IMAGES.SKIN83N,
                dayHand: IMAGES.HAND_SKIN83D,
                nightHand: IMAGES.HAND_SKIN83N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Ice Dragon Version 3"
            }, {
                id: 123,
                day: IMAGES.SKIN98D,
                night: IMAGES.SKIN98N,
                dayHand: IMAGES.HAND_SKIN98D,
                nightHand: IMAGES.HAND_SKIN98N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Baby Dragon Version 1"
            }, {
                id: 128,
                day: IMAGES.SKIN103D,
                night: IMAGES.SKIN103N,
                dayHand: IMAGES.HAND_SKIN103D,
                nightHand: IMAGES.HAND_SKIN103N,
                rarity: RARITY.REIDITE,
                author: "MADBalgouthi",
                name: "Baby Dragon Version 2"
            }, {
                id: 125,
                day: IMAGES.SKIN100D,
                night: IMAGES.SKIN100N,
                dayHand: IMAGES.HAND_SKIN100D,
                nightHand: IMAGES.HAND_SKIN100N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Baby Lava"
            }, {
                id: 47,
                day: IMAGES.SKIN21D,
                night: IMAGES.SKIN21N,
                dayHand: IMAGES.HAND_SKIN21D,
                nightHand: IMAGES.HAND_SKIN21N,
                rarity: RARITY.REIDITE,
                author: "Taco4Life",
                name: "Kraken"
            }, {
                id: 129,
                day: IMAGES.SKIN104D,
                night: IMAGES.SKIN104N,
                dayHand: IMAGES.HAND_SKIN104D,
                nightHand: IMAGES.HAND_SKIN104N,
                rarity: RARITY.REIDITE,
                author: "Taco4Life",
                name: "Sandworm"
            }, {
                id: 63,
                day: IMAGES.SKIN38D,
                night: IMAGES.SKIN38N,
                dayHand: IMAGES.HAND_SKIN38D,
                nightHand: IMAGES.HAND_SKIN38N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Mr. Golden Bread"
            }, {
                id: 67,
                day: IMAGES.SKIN42D,
                night: IMAGES.SKIN42N,
                dayHand: IMAGES.HAND_SKIN42D,
                nightHand: IMAGES.HAND_SKIN42N,
                rarity: RARITY.REIDITE,
                author: "ForgottenHeroe",
                name: "Starver Ores"
            }, {
                id: 130,
                day: IMAGES.SKIN105D,
                night: IMAGES.SKIN105N,
                dayHand: IMAGES.HAND_SKIN105D,
                nightHand: IMAGES.HAND_SKIN105N,
                rarity: RARITY.REIDITE,
                author: "Taco4Life",
                name: "Poo"
            }, {
                id: 89,
                day: IMAGES.SKIN64D,
                night: IMAGES.SKIN64N,
                dayHand: IMAGES.HAND_SKIN64D,
                nightHand: IMAGES.HAND_SKIN64N,
                rarity: RARITY.REIDITE,
                author: "Poinet",
                name: "Volcano Starver"
            }, {
                id: 112,
                day: IMAGES.SKIN87D,
                night: IMAGES.SKIN87N,
                dayHand: IMAGES.HAND_SKIN87D,
                nightHand: IMAGES.HAND_SKIN87N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Lava Starver"
            }, {
                id: 48,
                day: IMAGES.SKIN_ROBOTD,
                night: IMAGES.SKIN_ROBOTN,
                dayHand: IMAGES.HAND_ROBOTD,
                nightHand: IMAGES.HAND_ROBOTN,
                rarity: RARITY.SPECIAL,
                author: "eogito",
                name: "Robot"
            }, {
                id: 110,
                day: IMAGES.SKIN85D,
                night: IMAGES.SKIN85N,
                dayHand: IMAGES.HAND_SKIN85D,
                nightHand: IMAGES.HAND_SKIN85N,
                rarity: RARITY.SPECIAL,
                author: "pizza wa",
                name: "Blue Butterfly"
            }, {
                id: 157,
                day: IMAGES.SKIN133D,
                night: IMAGES.SKIN133N,
                dayHand: IMAGES.HAND_SKIN133D,
                nightHand: IMAGES.HAND_SKIN133N,
                rarity: RARITY.SPECIAL,
                author: "eogito",
                name: "Yrifox"
            }, {
                id: 165,
                day: IMAGES.SKIN141D,
                night: IMAGES.SKIN141N,
                dayHand: IMAGES.HAND_SKIN141D,
                nightHand: IMAGES.HAND_SKIN141N,
                rarity: RARITY.SPECIAL,
                author: "OmarJr13",
                name: "Blob Skin"
            }],
            BAG: [{
                id: 0,
                day: IMAGES.BAGD,
                night: IMAGES.BAGN,
                rarity: RARITY.FREE,
                author: "Starve.io",
                name: "Bag 1"
            }, {
                id: 1,
                day: IMAGES.BAG0D,
                night: IMAGES.BAG0N,
                rarity: RARITY.FREE,
                author: "Starve.io",
                name: "Old Bag"
            }, {
                id: 2,
                day: IMAGES.BAG4D,
                night: IMAGES.BAG4N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Bag 2"
            }, {
                id: 3,
                day: IMAGES.BAG5D,
                night: IMAGES.BAG5N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Bag 3"
            }, {
                id: 4,
                day: IMAGES.BAG6D,
                night: IMAGES.BAG6N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Bag 4"
            }, {
                id: 5,
                day: IMAGES.BAG7D,
                night: IMAGES.BAG7N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Bag 5"
            }, {
                id: 11,
                day: IMAGES.BAG23D,
                night: IMAGES.BAG23N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Wood Pickaxe Bag"
            }, {
                id: 19,
                day: IMAGES.BAG16D,
                night: IMAGES.BAG16N,
                rarity: RARITY.WOOD,
                author: "Starve.io ",
                name: "Wood Carrier"
            }, {
                id: 37,
                day: IMAGES.BAG36D,
                night: IMAGES.BAG36N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Bag 6"
            }, {
                id: 39,
                day: IMAGES.BAG38D,
                night: IMAGES.BAG38N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Bag with Wooden Swords"
            }, {
                id: 44,
                day: IMAGES.BAG43D,
                night: IMAGES.BAG43N,
                rarity: RARITY.WOOD,
                author: "Communist",
                name: "Big Bag"
            }, {
                id: 7,
                day: IMAGES.BAG14D,
                night: IMAGES.BAG14N,
                rarity: RARITY.STONE,
                author: "Communist",
                name: "Bag 6"
            }, {
                id: 8,
                day: IMAGES.BAG_EASTERD,
                night: IMAGES.BAG_EASTERN,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Easter Bag"
            }, {
                id: 9,
                day: IMAGES.BAG_STARD,
                night: IMAGES.BAG_STARN,
                rarity: RARITY.STONE,
                author: "pizza wa",
                name: "Star Bag"
            }, {
                id: 10,
                day: IMAGES.BAG9D,
                night: IMAGES.BAG9N,
                rarity: RARITY.STONE,
                author: "eogito",
                name: "Winter Bag"
            }, {
                id: 20,
                day: IMAGES.BAG17D,
                night: IMAGES.BAG17N,
                rarity: RARITY.STONE,
                author: "Starve.io ",
                name: "Stone Carrier"
            }, {
                id: 24,
                day: IMAGES.BAG24D,
                night: IMAGES.BAG24N,
                rarity: RARITY.STONE,
                author: "eogito",
                name: "Stone Pickaxe Bag"
            }, {
                id: 6,
                day: IMAGES.BAG13D,
                night: IMAGES.BAG13N,
                rarity: RARITY.STONE,
                author: "Communist",
                name: "Bag Camouflage"
            }, {
                id: 38,
                day: IMAGES.BAG37D,
                night: IMAGES.BAG37N,
                rarity: RARITY.STONE,
                author: "eogito",
                name: "Bag with Stone Swords"
            }, {
                id: 54,
                day: IMAGES.BAG53D,
                night: IMAGES.BAG53N,
                rarity: RARITY.STONE,
                author: "eogito",
                name: "Cow Bag"
            }, {
                id: 59,
                day: IMAGES.BAG58D,
                night: IMAGES.BAG58N,
                rarity: RARITY.STONE,
                author: "CrysTal",
                name: "Starver Bag"
            }, {
                id: 62,
                day: IMAGES.BAG61D,
                night: IMAGES.BAG61N,
                rarity: RARITY.STONE,
                author: "CrysTal",
                name: "Crystal Sky Bag"
            }, {
                id: 13,
                day: IMAGES.BAG10D,
                night: IMAGES.BAG10N,
                rarity: RARITY.GOLD,
                author: "pizza wa",
                name: "Honey Pot"
            }, {
                id: 21,
                day: IMAGES.BAG18D,
                night: IMAGES.BAG18N,
                rarity: RARITY.GOLD,
                author: "Starve.io ",
                name: "Gold Carrier"
            }, {
                id: 30,
                day: IMAGES.BAG25D,
                night: IMAGES.BAG25N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Gold Pickaxe Bag"
            }, {
                id: 29,
                day: IMAGES.BAG31D,
                night: IMAGES.BAG31N,
                rarity: RARITY.GOLD,
                author: "Ariel",
                name: "Mr and Mrs Bakers"
            }, {
                id: 41,
                day: IMAGES.BAG40D,
                night: IMAGES.BAG40N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Bag with Golden Swords"
            }, {
                id: 47,
                day: IMAGES.BAG46D,
                night: IMAGES.BAG46N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Explorer Bag"
            }, {
                id: 51,
                day: IMAGES.BAG50D,
                night: IMAGES.BAG50N,
                rarity: RARITY.GOLD,
                author: "pizza wa",
                name: "Bamboo Bag"
            }, {
                id: 53,
                day: IMAGES.BAG52D,
                night: IMAGES.BAG52N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Mummy Bag"
            }, {
                id: 58,
                day: IMAGES.BAG57D,
                night: IMAGES.BAG57N,
                rarity: RARITY.GOLD,
                author: "MADBalgouthi",
                name: "Watermelon Bag"
            }, {
                id: 60,
                day: IMAGES.BAG59D,
                night: IMAGES.BAG60N,
                rarity: RARITY.GOLD,
                author: "Taco4Life",
                name: "Garlic Bag"
            }, {
                id: 61,
                day: IMAGES.BAG60D,
                night: IMAGES.BAG59N,
                rarity: RARITY.GOLD,
                author: "Taco4Life",
                name: "Pumpkin Bag"
            }, {
                id: 64,
                day: IMAGES.BAG63D,
                night: IMAGES.BAG63N,
                rarity: RARITY.GOLD,
                author: "upfiz",
                name: "Oil Barel bag"
            }, {
                id: 67,
                day: IMAGES.BAG68D,
                night: IMAGES.BAG68N,
                rarity: RARITY.GOLD,
                author: "pizza wa",
                name: "Tree Bag"
            }, {
                id: 14,
                day: IMAGES.BAG1D,
                night: IMAGES.BAG1N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "a Rabbit in my Bag"
            }, {
                id: 15,
                day: IMAGES.BAG2D,
                night: IMAGES.BAG2N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Bird\'s nest"
            }, {
                id: 16,
                day: IMAGES.BAG3D,
                night: IMAGES.BAG3N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "a Fish on your Back"
            }, {
                id: 17,
                day: IMAGES.BAG8D,
                night: IMAGES.BAG8N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "a Squirrel in my Bag"
            }, {
                id: 22,
                day: IMAGES.BAG19D,
                night: IMAGES.BAG19N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io ",
                name: "Diamond Carrier"
            }, {
                id: 12,
                day: IMAGES.BAG22D,
                night: IMAGES.BAG22N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Resources Bag"
            }, {
                id: 32,
                day: IMAGES.BAG26D,
                night: IMAGES.BAG26N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Diamond Pickaxe Bag"
            }, {
                id: 40,
                day: IMAGES.BAG39D,
                night: IMAGES.BAG39N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Bag with Diamond Swords"
            }, {
                id: 45,
                day: IMAGES.BAG44D,
                night: IMAGES.BAG44N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "My Cake Bag"
            }, {
                id: 46,
                day: IMAGES.BAG45D,
                night: IMAGES.BAG45N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "My Christmas Cake Bag"
            }, {
                id: 52,
                day: IMAGES.BAG51D,
                night: IMAGES.BAG51N,
                rarity: RARITY.DIAMOND,
                author: "MADBalgouthi",
                name: "Fish Bag"
            }, {
                id: 65,
                day: IMAGES.BAG64D,
                night: IMAGES.BAG64N,
                rarity: RARITY.DIAMOND,
                author: "pizza wa",
                name: "Cloud Bag"
            }, {
                id: 68,
                day: IMAGES.BAG66D,
                night: IMAGES.BAG66N,
                rarity: RARITY.DIAMOND,
                author: "pizza wa",
                name: "Bee Bag"
            }, {
                id: 48,
                day: IMAGES.BAG47D,
                night: IMAGES.BAG47N,
                rarity: RARITY.AMETHYST,
                author: "fatant",
                name: "Natural Bag"
            }, {
                id: 23,
                day: IMAGES.BAG20D,
                night: IMAGES.BAG20N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io ",
                name: "Amethyst Carrier"
            }, {
                id: 25,
                day: IMAGES.BAG27D,
                night: IMAGES.BAG27N,
                rarity: RARITY.AMETHYST,
                author: "eogito",
                name: "Amethyst Pickaxe Bag"
            }, {
                id: 28,
                day: IMAGES.BAG30D,
                night: IMAGES.BAG30N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "Your Baby"
            }, {
                id: 33,
                day: IMAGES.BAG32D,
                night: IMAGES.BAG32N,
                rarity: RARITY.AMETHYST,
                author: "pizza wa",
                name: "Tropical Bag"
            }, {
                id: 43,
                day: IMAGES.BAG42D,
                night: IMAGES.BAG42N,
                rarity: RARITY.AMETHYST,
                author: "eogito",
                name: "Bag with Amethyst Swords"
            }, {
                id: 35,
                day: IMAGES.BAG34D,
                night: IMAGES.BAG34N,
                rarity: RARITY.AMETHYST,
                author: "eogito",
                name: "Ice Bag"
            }, {
                id: 50,
                day: IMAGES.BAG49D,
                night: IMAGES.BAG49N,
                rarity: RARITY.AMETHYST,
                author: "Taco4Life",
                name: "Thornbush Bag"
            }, {
                id: 56,
                day: IMAGES.BAG55D,
                night: IMAGES.BAG55N,
                rarity: RARITY.AMETHYST,
                author: "eogito",
                name: "Autumn Bag"
            }, {
                id: 57,
                day: IMAGES.BAG56D,
                night: IMAGES.BAG56N,
                rarity: RARITY.AMETHYST,
                author: "Taco4Life",
                name: "Dino Egg Bag"
            }, {
                id: 66,
                day: IMAGES.BAG65D,
                night: IMAGES.BAG65N,
                rarity: RARITY.AMETHYST,
                author: "pizza wa",
                name: "Magic Cloud Bag"
            }, {
                id: 69,
                day: IMAGES.BAG67D,
                night: IMAGES.BAG67N,
                rarity: RARITY.AMETHYST,
                author: "pizza wa",
                name: "Chest Bag"
            }, {
                id: 31,
                day: IMAGES.BAG21D,
                night: IMAGES.BAG21N,
                rarity: RARITY.REIDITE,
                author: "Starve.io ",
                name: "Reidite Carrier"
            }, {
                id: 18,
                day: IMAGES.BAG11D,
                night: IMAGES.BAG11N,
                rarity: RARITY.REIDITE,
                author: "Winter",
                name: "Lava Bag"
            }, {
                id: 49,
                day: IMAGES.BAG48D,
                night: IMAGES.BAG48N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Lava Bag 2"
            }, {
                id: 36,
                day: IMAGES.BAG35D,
                night: IMAGES.BAG35N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Dragon Bag"
            }, {
                id: 55,
                day: IMAGES.BAG54D,
                night: IMAGES.BAG54N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Winter Ice Bag"
            }, {
                id: 26,
                day: IMAGES.BAG28D,
                night: IMAGES.BAG28N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Reidite Pickaxe Bag"
            }, {
                id: 27,
                day: IMAGES.BAG29D,
                night: IMAGES.BAG29N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Octopus Bowl"
            }, {
                id: 34,
                day: IMAGES.BAG33D,
                night: IMAGES.BAG33N,
                rarity: RARITY.REIDITE,
                author: "Taco4Life",
                name: "Cave Bag"
            }, {
                id: 42,
                day: IMAGES.BAG41D,
                night: IMAGES.BAG41N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Bag with Reidite Swords"
            }, {
                id: 63,
                day: IMAGES.BAG62D,
                night: IMAGES.BAG62N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Engineer Bag"
            }],
            CRATE: [{
                id: 0,
                day: IMAGES.CRATE7D,
                night: IMAGES.CRATE7N,
                rarity: RARITY.FREE,
                author: "eogito",
                name: "Wooden Dead Box"
            }, {
                id: 1,
                day: IMAGES.CRATE6D,
                night: IMAGES.CRATE6N,
                rarity: RARITY.FREE,
                author: "eogito",
                name: "Hidden item"
            }, {
                id: 2,
                day: IMAGES.CRATE1D,
                night: IMAGES.CRATE1N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Wooden Box 1"
            }, {
                id: 3,
                day: IMAGES.CRATE2D,
                night: IMAGES.CRATE2N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Wooden Box 2"
            }, {
                id: 4,
                day: IMAGES.CRATE3D,
                night: IMAGES.CRATE3N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Wooden Box 3"
            }, {
                id: 5,
                day: IMAGES.CRATE4D,
                night: IMAGES.CRATE4N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Broken Wooden Box"
            }, {
                id: 6,
                day: IMAGES.CRATE5D,
                night: IMAGES.CRATE5N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Wooden Box"
            }, {
                id: 7,
                day: IMAGES.CRATE8D,
                night: IMAGES.CRATE8N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Wooden Battle Box"
            }, {
                id: 8,
                day: IMAGES.CRATE9D,
                night: IMAGES.CRATE9N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Wooden Box with a Cross"
            }, {
                id: 9,
                day: IMAGES.CRATE10D,
                night: IMAGES.CRATE10N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Wooden Box with Bubbles"
            }, {
                id: 10,
                day: IMAGES.CRATE11D,
                night: IMAGES.CRATE11N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Wooden Box with Eyes"
            }, {
                id: 11,
                day: IMAGES.CRATE12D,
                night: IMAGES.CRATE12N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Dark Wooden Box"
            }, {
                id: 38,
                day: IMAGES.CRATE39D,
                night: IMAGES.CRATE39N,
                rarity: RARITY.WOOD,
                author: "Weddlz",
                name: "Noob Box"
            }, {
                id: 12,
                day: IMAGES.CRATE13D,
                night: IMAGES.CRATE13N,
                rarity: RARITY.STONE,
                author: "eogito",
                name: "Wooden and Stone Box"
            }, {
                id: 14,
                day: IMAGES.CRATE19D,
                night: IMAGES.CRATE19N,
                rarity: RARITY.STONE,
                author: "pizza wa",
                name: "Star Box 1"
            }, {
                id: 15,
                day: IMAGES.CRATE20D,
                night: IMAGES.CRATE20N,
                rarity: RARITY.STONE,
                author: "pizza wa",
                name: "Star Box 2"
            }, {
                id: 27,
                day: IMAGES.CRATE29D,
                night: IMAGES.CRATE29N,
                rarity: RARITY.STONE,
                author: "eogito",
                name: "Flower Box"
            }, {
                id: 46,
                day: IMAGES.CRATE47D,
                night: IMAGES.CRATE47N,
                rarity: RARITY.STONE,
                author: "MADBalgouthi",
                name: "Blue Box"
            }, {
                id: 19,
                day: IMAGES.CRATE21D,
                night: IMAGES.CRATE21N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Beehive"
            }, {
                id: 13,
                day: IMAGES.CRATE14D,
                night: IMAGES.CRATE14N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Wooden and Golden Box"
            }, {
                id: 21,
                day: IMAGES.CRATE22D,
                night: IMAGES.CRATE22N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Gravestone"
            }, {
                id: 25,
                day: IMAGES.CRATE26D,
                night: IMAGES.CRATE26N,
                rarity: RARITY.GOLD,
                author: "Communist",
                name: "Sky Box"
            }, {
                id: 29,
                day: IMAGES.CRATE30D,
                night: IMAGES.CRATE30N,
                rarity: RARITY.GOLD,
                author: "Winter",
                name: "Golden Box"
            }, {
                id: 34,
                day: IMAGES.CRATE35D,
                night: IMAGES.CRATE35N,
                rarity: RARITY.GOLD,
                author: "Communist",
                name: "Water Crate"
            }, {
                id: 35,
                day: IMAGES.CRATE36D,
                night: IMAGES.CRATE36N,
                rarity: RARITY.GOLD,
                author: "Communist",
                name: "Glass Crate"
            }, {
                id: 16,
                day: IMAGES.CRATE15D,
                night: IMAGES.CRATE15N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Wooden and Diamond Box"
            }, {
                id: 18,
                day: IMAGES.CRATE18D,
                night: IMAGES.CRATE18N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Don\'t Hit Me"
            }, {
                id: 26,
                day: IMAGES.CRATE27D,
                night: IMAGES.CRATE27N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Underwater Box"
            }, {
                id: 31,
                day: IMAGES.CRATE32D,
                night: IMAGES.CRATE32N,
                rarity: RARITY.DIAMOND,
                author: "Communist",
                name: "Items Pile"
            }, {
                id: 32,
                day: IMAGES.CRATE33D,
                night: IMAGES.CRATE33N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Cake Box"
            }, {
                id: 33,
                day: IMAGES.CRATE34D,
                night: IMAGES.CRATE34N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Christmas Cake Box"
            }, {
                id: 36,
                day: IMAGES.CRATE37D,
                night: IMAGES.CRATE37N,
                rarity: RARITY.DIAMOND,
                author: "Fukss",
                name: "Crab Box"
            }, {
                id: 42,
                day: IMAGES.CRATE43D,
                night: IMAGES.CRATE43N,
                rarity: RARITY.DIAMOND,
                author: "MADBalgouthi",
                name: "Fishing Box"
            }, {
                id: 22,
                day: IMAGES.CRATE23D,
                night: IMAGES.CRATE23N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "Let me out of here"
            }, {
                id: 17,
                day: IMAGES.CRATE16D,
                night: IMAGES.CRATE16N,
                rarity: RARITY.AMETHYST,
                author: "eogito",
                name: "Wooden and Amethyst Box"
            }, {
                id: 24,
                day: IMAGES.CRATE25D,
                night: IMAGES.CRATE25N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "Aquarium"
            }, {
                id: 28,
                day: IMAGES.CRATE28D,
                night: IMAGES.CRATE28N,
                rarity: RARITY.AMETHYST,
                author: "eogito",
                name: "Gift Box"
            }, {
                id: 40,
                day: IMAGES.CRATE41D,
                night: IMAGES.CRATE41N,
                rarity: RARITY.AMETHYST,
                author: "MADBalgouthi",
                name: "Open Watermelon Box"
            }, {
                id: 41,
                day: IMAGES.CRATE42D,
                night: IMAGES.CRATE42N,
                rarity: RARITY.AMETHYST,
                author: "MADBalgouthi",
                name: "Watermelon Box"
            }, {
                id: 39,
                day: IMAGES.CRATE40D,
                night: IMAGES.CRATE40N,
                rarity: RARITY.AMETHYST,
                author: "Taco4Life",
                name: "Thornbush Box"
            }, {
                id: 43,
                day: IMAGES.CRATE44D,
                night: IMAGES.CRATE44N,
                rarity: RARITY.AMETHYST,
                author: "eogito",
                name: "Rabbit in the Box"
            }, {
                id: 47,
                day: IMAGES.CRATE48D,
                night: IMAGES.CRATE48N,
                rarity: RARITY.AMETHYST,
                author: "Taco4Life",
                name: "Garlic Plot"
            }, {
                id: 48,
                day: IMAGES.CRATE49D,
                night: IMAGES.CRATE49N,
                rarity: RARITY.AMETHYST,
                author: "Taco4Life",
                name: "Pumpkin Plot"
            }, {
                id: 45,
                day: IMAGES.CRATE46D,
                night: IMAGES.CRATE46N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Autumn Box"
            }, {
                id: 44,
                day: IMAGES.CRATE45D,
                night: IMAGES.CRATE45N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Winter Box"
            }, {
                id: 20,
                day: IMAGES.CRATE17D,
                night: IMAGES.CRATE17N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Metal and Reidite Box"
            }, {
                id: 23,
                day: IMAGES.CRATE24D,
                night: IMAGES.CRATE24N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Kraken Box"
            }, {
                id: 30,
                day: IMAGES.CRATE31D,
                night: IMAGES.CRATE31N,
                rarity: RARITY.REIDITE,
                author: "Winter",
                name: "Lava Box"
            }, {
                id: 37,
                day: IMAGES.CRATE38D,
                night: IMAGES.CRATE38N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Lava Box 2"
            }, {
                id: 49,
                day: IMAGES.CRATE50D,
                night: IMAGES.CRATE50N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Rabbit"
            }, {
                id: 50,
                day: IMAGES.CRATE51D,
                night: IMAGES.CRATE51N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Wolf"
            }, {
                id: 51,
                day: IMAGES.CRATE52D,
                night: IMAGES.CRATE52N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Spider"
            }, {
                id: 52,
                day: IMAGES.CRATE53D,
                night: IMAGES.CRATE53N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Hawk"
            }, {
                id: 53,
                day: IMAGES.CRATE54D,
                night: IMAGES.CRATE54N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Bear"
            }, {
                id: 54,
                day: IMAGES.CRATE55D,
                night: IMAGES.CRATE55N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Fox"
            }, {
                id: 55,
                day: IMAGES.CRATE56D,
                night: IMAGES.CRATE56N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Baby Mammoth"
            }, {
                id: 56,
                day: IMAGES.CRATE57D,
                night: IMAGES.CRATE57N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Mammoth"
            }, {
                id: 57,
                day: IMAGES.CRATE58D,
                night: IMAGES.CRATE58N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Sandworm"
            }, {
                id: 58,
                day: IMAGES.CRATE59D,
                night: IMAGES.CRATE59N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Vulture"
            }, {
                id: 59,
                day: IMAGES.CRATE60D,
                night: IMAGES.CRATE60N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Kraken"
            }, {
                id: 60,
                day: IMAGES.CRATE61D,
                night: IMAGES.CRATE61N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Piranha"
            }, {
                id: 61,
                day: IMAGES.CRATE62D,
                night: IMAGES.CRATE62N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Baby Dragon"
            }, {
                id: 62,
                day: IMAGES.CRATE63D,
                night: IMAGES.CRATE63N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Baby Lava"
            }, {
                id: 63,
                day: IMAGES.CRATE64D,
                night: IMAGES.CRATE64N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Dragon"
            }, {
                id: 64,
                day: IMAGES.CRATE65D,
                night: IMAGES.CRATE65N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Penguin"
            }, {
                id: 65,
                day: IMAGES.CRATE66D,
                night: IMAGES.CRATE66N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Lava Dragon"
            }, {
                id: 66,
                day: IMAGES.CRATE67D,
                night: IMAGES.CRATE67N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Boar"
            }, {
                id: 67,
                day: IMAGES.CRATE68D,
                night: IMAGES.CRATE68N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Fire mob"
            }, {
                id: 68,
                day: IMAGES.CRATE69D,
                night: IMAGES.CRATE69N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Crab"
            }, {
                id: 69,
                day: IMAGES.CRATE70D,
                night: IMAGES.CRATE70N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the King Crab"
            }, {
                id: 70,
                day: IMAGES.CRATE71D,
                night: IMAGES.CRATE71N,
                rarity: RARITY.GOLD,
                author: "CrysTal",
                name: "Crystal Sky Box"
            }, {
                id: 71,
                day: IMAGES.CRATE72D,
                night: IMAGES.CRATE72N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Dragon Box"
            }],
            BOOK: [{
                id: 0,
                day: IMAGES.BOOK0D,
                night: IMAGES.BOOK0N,
                rarity: RARITY.FREE,
                author: "Starve.io",
                name: "Book 1"
            }, {
                id: 1,
                day: IMAGES.BOOK3D,
                night: IMAGES.BOOK3N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Book 2"
            }, {
                id: 2,
                day: IMAGES.BOOK4D,
                night: IMAGES.BOOK4N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Book 3"
            }, {
                id: 3,
                day: IMAGES.BOOK5D,
                night: IMAGES.BOOK5N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Book 4"
            }, {
                id: 4,
                day: IMAGES.BOOK6D,
                night: IMAGES.BOOK6N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Damaged Book 1"
            }, {
                id: 18,
                day: IMAGES.BOOK18D,
                night: IMAGES.BOOK18N,
                rarity: RARITY.WOOD,
                author: "SeveR",
                name: "Damaged Book 2"
            }, {
                id: 5,
                day: IMAGES.BOOK1D,
                night: IMAGES.BOOK1N,
                rarity: RARITY.STONE,
                author: "Doctorpus",
                name: "Scroll"
            }, {
                id: 6,
                day: IMAGES.BOOK2D,
                night: IMAGES.BOOK2N,
                rarity: RARITY.STONE,
                author: "Doctorpus",
                name: "Clipboard"
            }, {
                id: 7,
                day: IMAGES.BOOK7D,
                night: IMAGES.BOOK7N,
                rarity: RARITY.STONE,
                author: "eogito",
                name: "Seed Book"
            }, {
                id: 20,
                day: IMAGES.BOOK20D,
                night: IMAGES.BOOK20N,
                rarity: RARITY.STONE,
                author: "Taco4Life",
                name: "Camo Book"
            }, {
                id: 24,
                day: IMAGES.BOOK24D,
                night: IMAGES.BOOK24N,
                rarity: RARITY.STONE,
                author: "Communist",
                name: "Stone Tablet"
            }, {
                id: 10,
                day: IMAGES.BOOK13D,
                night: IMAGES.BOOK13N,
                rarity: RARITY.GOLD,
                author: "pizza wa",
                name: "Star Book"
            }, {
                id: 8,
                day: IMAGES.BOOK9D,
                night: IMAGES.BOOK9N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Gold Book"
            }, {
                id: 15,
                day: IMAGES.BOOK15D,
                night: IMAGES.BOOK15N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Old Mysterious Paper"
            }, {
                id: 17,
                day: IMAGES.BOOK17D,
                night: IMAGES.BOOK17N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Gold Engraving"
            }, {
                id: 25,
                day: IMAGES.BOOK25D,
                night: IMAGES.BOOK25N,
                rarity: RARITY.GOLD,
                author: "fatant",
                name: "Ant Book"
            }, {
                id: 32,
                day: IMAGES.BOOK32D,
                night: IMAGES.BOOK32N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Mummy Book"
            }, {
                id: 37,
                day: IMAGES.BOOK39D,
                night: IMAGES.BOOK39N,
                rarity: RARITY.GOLD,
                author: "Taco4Life",
                name: "Garlic Book"
            }, {
                id: 38,
                day: IMAGES.BOOK38D,
                night: IMAGES.BOOK38N,
                rarity: RARITY.GOLD,
                author: "Taco4Life",
                name: "Pumpkin Book"
            }, {
                id: 39,
                day: IMAGES.BOOK40D,
                night: IMAGES.BOOK40N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Christmas Tree Book"
            }, {
                id: 11,
                day: IMAGES.BOOK10D,
                night: IMAGES.BOOK10N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Diamond Book"
            }, {
                id: 9,
                day: IMAGES.BOOK8D,
                night: IMAGES.BOOK8N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Obscure Book"
            }, {
                id: 16,
                day: IMAGES.BOOK16D,
                night: IMAGES.BOOK16N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Rolled Parchment"
            }, {
                id: 22,
                day: IMAGES.BOOK22D,
                night: IMAGES.BOOK22N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Cake Book"
            }, {
                id: 23,
                day: IMAGES.BOOK23D,
                night: IMAGES.BOOK23N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Christmas Cake Book"
            }, {
                id: 30,
                day: IMAGES.BOOK30D,
                night: IMAGES.BOOK30N,
                rarity: RARITY.DIAMOND,
                author: "MADBalgouthi",
                name: "Fish Book"
            }, {
                id: 31,
                day: IMAGES.BOOK31D,
                night: IMAGES.BOOK31N,
                rarity: RARITY.DIAMOND,
                author: "CrysTal",
                name: "Once upon a time"
            }, {
                id: 13,
                day: IMAGES.BOOK11D,
                night: IMAGES.BOOK11N,
                rarity: RARITY.AMETHYST,
                author: "eogito",
                name: "Amethyst Book"
            }, {
                id: 28,
                day: IMAGES.BOOK28D,
                night: IMAGES.BOOK28N,
                rarity: RARITY.AMETHYST,
                author: "eogito",
                name: "Paint Pallet"
            }, {
                id: 29,
                day: IMAGES.BOOK29D,
                night: IMAGES.BOOK29N,
                rarity: RARITY.AMETHYST,
                author: "CrysTal",
                name: "Watermelon Book"
            }, {
                id: 27,
                day: IMAGES.BOOK27D,
                night: IMAGES.BOOK27N,
                rarity: RARITY.AMETHYST,
                author: "Taco4Life",
                name: "Thornbush Book"
            }, {
                id: 35,
                day: IMAGES.BOOK35D,
                night: IMAGES.BOOK35N,
                rarity: RARITY.AMETHYST,
                author: "Taco4Life",
                name: "Menu"
            }, {
                id: 36,
                day: IMAGES.BOOK36D,
                night: IMAGES.BOOK36N,
                rarity: RARITY.AMETHYST,
                author: "CrysTal",
                name: "Lover Letter"
            }, {
                id: 40,
                day: IMAGES.BOOK41D,
                night: IMAGES.BOOK41N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "Fresh-Baked Cookies"
            }, {
                id: 41,
                day: IMAGES.BOOK42D,
                night: IMAGES.BOOK42N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "Inside, there is just a book."
            }, {
                id: 33,
                day: IMAGES.BOOK33D,
                night: IMAGES.BOOK33N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Winter Book"
            }, {
                id: 34,
                day: IMAGES.BOOK34D,
                night: IMAGES.BOOK34N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Autumn Book"
            }, {
                id: 14,
                day: IMAGES.BOOK12D,
                night: IMAGES.BOOK12N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Reidite Book"
            }, {
                id: 12,
                day: IMAGES.BOOK14D,
                night: IMAGES.BOOK14N,
                rarity: RARITY.REIDITE,
                author: "Winter",
                name: "Lava Book"
            }, {
                id: 26,
                day: IMAGES.BOOK26D,
                night: IMAGES.BOOK26N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Lava Book 2"
            }, {
                id: 19,
                day: IMAGES.BOOK19D,
                night: IMAGES.BOOK19N,
                rarity: RARITY.REIDITE,
                author: "Winter",
                name: "Ocean Mystery"
            }, {
                id: 21,
                day: IMAGES.BOOK21D,
                night: IMAGES.BOOK21N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Dragon Book"
            }, {
                id: 42,
                day: IMAGES.BOOK43D,
                night: IMAGES.BOOK43N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Engineer Book"
            }, {
                id: 43,
                day: IMAGES.BOOK44D,
                night: IMAGES.BOOK44N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Nightmare Book"
            }, {
                id: 44,
                day: IMAGES.BOOK45D,
                night: IMAGES.BOOK45N,
                rarity: RARITY.REIDITE,
                author: "aloner",
                name: "Mystery Book"
            }],
            ACCESSORY: [{
                id: 0,
                day: IMAGES.ACCESSORY0D,
                night: IMAGES.ACCESSORY0D,
                rarity: RARITY.FREE,
                author: "Starve.io",
                name: "Nothing"
            }, {
                id: 2,
                day: IMAGES.ACCESSORY4D,
                night: IMAGES.ACCESSORY4N,
                rarity: RARITY.FREE,
                author: "Starve.io",
                name: "Pink Cheeks"
            }, {
                id: 3,
                day: IMAGES.ACCESSORY5D,
                night: IMAGES.ACCESSORY5N,
                rarity: RARITY.FREE,
                author: "Starve.io",
                name: "Heart"
            }, {
                id: 1,
                day: IMAGES.ACCESSORY3D,
                night: IMAGES.ACCESSORY3N,
                rarity: RARITY.FREE,
                author: "Starve.io",
                name: "Bandage 1"
            }, {
                id: 4,
                day: IMAGES.ACCESSORY6D,
                night: IMAGES.ACCESSORY6N,
                rarity: RARITY.FREE,
                author: "Starve.io",
                name: "Flower 1"
            }, {
                id: 5,
                day: IMAGES.ACCESSORY8D,
                night: IMAGES.ACCESSORY8N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Bow 1"
            }, {
                id: 6,
                day: IMAGES.ACCESSORY9D,
                night: IMAGES.ACCESSORY9N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Bandage 2"
            }, {
                id: 7,
                day: IMAGES.ACCESSORY15D,
                night: IMAGES.ACCESSORY15N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Flower 2"
            }, {
                id: 8,
                day: IMAGES.ACCESSORY10D,
                night: IMAGES.ACCESSORY10N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Bandage 3"
            }, {
                id: 36,
                day: IMAGES.ACCESSORY36D,
                night: IMAGES.ACCESSORY36N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Foliage"
            }, {
                id: 59,
                day: IMAGES.ACCESSORY47D,
                night: IMAGES.ACCESSORY47N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Peaceful"
            }, {
                id: 67,
                day: IMAGES.ACCESSORY55D,
                night: IMAGES.ACCESSORY55N,
                rarity: RARITY.WOOD,
                author: "pizza wa",
                name: "Sparkles"
            }, {
                id: 68,
                day: IMAGES.ACCESSORY56D,
                night: IMAGES.ACCESSORY56N,
                rarity: RARITY.WOOD,
                author: "pizza wa",
                name: "Luxury"
            }, {
                id: 69,
                day: IMAGES.ACCESSORY57D,
                night: IMAGES.ACCESSORY57N,
                rarity: RARITY.WOOD,
                author: "pizza wa",
                name: "Snow Flakes Crown"
            }, {
                id: 17,
                day: IMAGES.ACCESSORY17D,
                night: IMAGES.ACCESSORY17N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Glasses 1"
            }, {
                id: 10,
                day: IMAGES.ACCESSORY7D,
                night: IMAGES.ACCESSORY7N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Bow 2"
            }, {
                id: 11,
                day: IMAGES.ACCESSORY13D,
                night: IMAGES.ACCESSORY13N,
                rarity: RARITY.STONE,
                author: "pizza wa",
                name: "Little Stars"
            }, {
                id: 12,
                day: IMAGES.ACCESSORY11D,
                night: IMAGES.ACCESSORY11N,
                rarity: RARITY.STONE,
                author: "eogito",
                name: "Pirate Eye Patch 1"
            }, {
                id: 44,
                day: IMAGES.ACCESSORY44D,
                night: IMAGES.ACCESSORY44N,
                rarity: RARITY.STONE,
                author: "Taco4Life",
                name: "Pirate Eye Patch 2"
            }, {
                id: 23,
                day: IMAGES.ACCESSORY23D,
                night: IMAGES.ACCESSORY23N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Clown nose"
            }, {
                id: 16,
                day: IMAGES.ACCESSORY2D,
                night: IMAGES.ACCESSORY2N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Eye Patch"
            }, {
                id: 30,
                day: IMAGES.ACCESSORY30D,
                night: IMAGES.ACCESSORY30N,
                rarity: RARITY.STONE,
                author: "eogito",
                name: "Flower 3"
            }, {
                id: 38,
                day: IMAGES.ACCESSORY38D,
                night: IMAGES.ACCESSORY38N,
                rarity: RARITY.STONE,
                author: "Winter",
                name: "False Nose"
            }, {
                id: 74,
                day: IMAGES.ACCESSORY62D,
                night: IMAGES.ACCESSORY62N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Red Cloth"
            }, {
                id: 75,
                day: IMAGES.ACCESSORY63D,
                night: IMAGES.ACCESSORY63N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Blue Cloth"
            }, {
                id: 79,
                day: IMAGES.ACCESSORY67D,
                night: IMAGES.ACCESSORY67N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Transparent Mask"
            }, {
                id: 89,
                day: IMAGES.ACCESSORY77D,
                night: IMAGES.ACCESSORY77N,
                rarity: RARITY.STONE,
                author: "Anyone want to play?",
                name: "Starve.io Anime"
            }, {
                id: 94,
                day: IMAGES.ACCESSORY78D,
                night: IMAGES.ACCESSORY78N,
                rarity: RARITY.STONE,
                author: "Ant",
                name: "Hero Mask"
            }, {
                id: 15,
                day: IMAGES.ACCESSORY16D,
                night: IMAGES.ACCESSORY16N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Star Glasses"
            }, {
                id: 21,
                day: IMAGES.ACCESSORY21D,
                night: IMAGES.ACCESSORY21N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Great-aunt\'s Glasses"
            }, {
                id: 24,
                day: IMAGES.ACCESSORY24D,
                night: IMAGES.ACCESSORY24N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Little Starver"
            }, {
                id: 22,
                day: IMAGES.ACCESSORY22D,
                night: IMAGES.ACCESSORY22N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Little Glasses"
            }, {
                id: 13,
                day: IMAGES.ACCESSORY14D,
                night: IMAGES.ACCESSORY14N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Flower Chain"
            }, {
                id: 29,
                day: IMAGES.ACCESSORY29D,
                night: IMAGES.ACCESSORY29N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Horns"
            }, {
                id: 31,
                day: IMAGES.ACCESSORY31D,
                night: IMAGES.ACCESSORY31N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Golden Flower"
            }, {
                id: 40,
                day: IMAGES.ACCESSORY40D,
                night: IMAGES.ACCESSORY40N,
                rarity: RARITY.GOLD,
                author: "pizza wa",
                name: "Sleeping Mask"
            }, {
                id: 57,
                day: IMAGES.ACCESSORY50D,
                night: IMAGES.ACCESSORY50N,
                rarity: RARITY.GOLD,
                author: "Taco4Life",
                name: "Fish on your head"
            }, {
                id: 58,
                day: IMAGES.ACCESSORY46D,
                night: IMAGES.ACCESSORY46N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Rose"
            }, {
                id: 91,
                day: IMAGES.ACCESSORY80D,
                night: IMAGES.ACCESSORY80N,
                rarity: RARITY.GOLD,
                author: "upfiz",
                name: "Grey Scarf"
            }, {
                id: 92,
                day: IMAGES.ACCESSORY81D,
                night: IMAGES.ACCESSORY81N,
                rarity: RARITY.GOLD,
                author: "upfiz",
                name: "Black Scarf"
            }, {
                id: 93,
                day: IMAGES.ACCESSORY82D,
                night: IMAGES.ACCESSORY82N,
                rarity: RARITY.GOLD,
                author: "upfiz",
                name: "Skull Mask"
            }, {
                id: 9,
                day: IMAGES.ACCESSORY1D,
                night: IMAGES.ACCESSORY1N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Fancy Glasses"
            }, {
                id: 25,
                day: IMAGES.ACCESSORY25D,
                night: IMAGES.ACCESSORY25N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Medecin Mask"
            }, {
                id: 14,
                day: IMAGES.ACCESSORY12D,
                night: IMAGES.ACCESSORY12N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Mr. Mayor"
            }, {
                id: 19,
                day: IMAGES.ACCESSORY19D,
                night: IMAGES.ACCESSORY19N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Sunglasses 2"
            }, {
                id: 28,
                day: IMAGES.ACCESSORY28D,
                night: IMAGES.ACCESSORY28N,
                rarity: RARITY.DIAMOND,
                author: "pizza wa",
                name: "Starfish"
            }, {
                id: 37,
                day: IMAGES.ACCESSORY37D,
                night: IMAGES.ACCESSORY37N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Berry"
            }, {
                id: 39,
                day: IMAGES.ACCESSORY39D,
                night: IMAGES.ACCESSORY39N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Flake"
            }, {
                id: 43,
                day: IMAGES.ACCESSORY43D,
                night: IMAGES.ACCESSORY43N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Leaf "
            }, {
                id: 61,
                day: IMAGES.ACCESSORY49D,
                night: IMAGES.ACCESSORY49N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "A sword in your head"
            }, {
                id: 62,
                day: IMAGES.ACCESSORY51D,
                night: IMAGES.ACCESSORY51N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Winter Scarf"
            }, {
                id: 64,
                day: IMAGES.ACCESSORY53D,
                night: IMAGES.ACCESSORY53N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Winter Scarf 2"
            }, {
                id: 66,
                day: IMAGES.ACCESSORY54D,
                night: IMAGES.ACCESSORY54N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Winter Scarf 3"
            }, {
                id: 70,
                day: IMAGES.ACCESSORY58D,
                night: IMAGES.ACCESSORY58N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Mask with animal tracks"
            }, {
                id: 71,
                day: IMAGES.ACCESSORY59D,
                night: IMAGES.ACCESSORY59N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Spring Mask"
            }, {
                id: 72,
                day: IMAGES.ACCESSORY60D,
                night: IMAGES.ACCESSORY60N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Pink Mask"
            }, {
                id: 73,
                day: IMAGES.ACCESSORY61D,
                night: IMAGES.ACCESSORY61N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Blue Mask"
            }, {
                id: 76,
                day: IMAGES.ACCESSORY64D,
                night: IMAGES.ACCESSORY64N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Military Mask"
            }, {
                id: 77,
                day: IMAGES.ACCESSORY65D,
                night: IMAGES.ACCESSORY65N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Orange Mask"
            }, {
                id: 78,
                day: IMAGES.ACCESSORY66D,
                night: IMAGES.ACCESSORY66N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "White and Red Points Mask"
            }, {
                id: 80,
                day: IMAGES.ACCESSORY68D,
                night: IMAGES.ACCESSORY68N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Stick out your tongue Mask"
            }, {
                id: 81,
                day: IMAGES.ACCESSORY69D,
                night: IMAGES.ACCESSORY69N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Two Teeth Mask"
            }, {
                id: 82,
                day: IMAGES.ACCESSORY70D,
                night: IMAGES.ACCESSORY70N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Make-up Mask"
            }, {
                id: 83,
                day: IMAGES.ACCESSORY71D,
                night: IMAGES.ACCESSORY71N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Sad Mask"
            }, {
                id: 84,
                day: IMAGES.ACCESSORY72D,
                night: IMAGES.ACCESSORY72N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Happy Mask"
            }, {
                id: 90,
                day: IMAGES.ACCESSORY79D,
                night: IMAGES.ACCESSORY79N,
                rarity: RARITY.DIAMOND,
                author: "aloner",
                name: "Blood"
            }, {
                id: 27,
                day: IMAGES.ACCESSORY27D,
                night: IMAGES.ACCESSORY27N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "Clown Face"
            }, {
                id: 20,
                day: IMAGES.ACCESSORY20D,
                night: IMAGES.ACCESSORY20N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "Sunglasses 3"
            }, {
                id: 32,
                day: IMAGES.ACCESSORY32D,
                night: IMAGES.ACCESSORY32N,
                rarity: RARITY.AMETHYST,
                author: "eogito",
                name: "Engineer\'s Glasses"
            }, {
                id: 33,
                day: IMAGES.ACCESSORY33D,
                night: IMAGES.ACCESSORY33N,
                rarity: RARITY.AMETHYST,
                author: "eogito",
                name: "Engineer\'s Monocle"
            }, {
                id: 34,
                day: IMAGES.ACCESSORY34D,
                night: IMAGES.ACCESSORY34N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "Mauve\'s butt"
            }, {
                id: 41,
                day: IMAGES.ACCESSORY41D,
                night: IMAGES.ACCESSORY41N,
                rarity: RARITY.AMETHYST,
                author: "eogito",
                name: "Lapa Head"
            }, {
                id: 42,
                day: IMAGES.ACCESSORY42D,
                night: IMAGES.ACCESSORY42N,
                rarity: RARITY.AMETHYST,
                author: "eogito",
                name: "Lapa Head "
            }, {
                id: 85,
                day: IMAGES.ACCESSORY73D,
                night: IMAGES.ACCESSORY73N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "Mask and Glasses"
            }, {
                id: 60,
                day: IMAGES.ACCESSORY48D,
                night: IMAGES.ACCESSORY48N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Jason"
            }, {
                id: 26,
                day: IMAGES.ACCESSORY26D,
                night: IMAGES.ACCESSORY26N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Devil Horns"
            }, {
                id: 18,
                day: IMAGES.ACCESSORY18D,
                night: IMAGES.ACCESSORY18N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Big Boss"
            }, {
                id: 35,
                day: IMAGES.ACCESSORY35D,
                night: IMAGES.ACCESSORY35N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Baby Kraken"
            }, {
                id: 63,
                day: IMAGES.ACCESSORY52D,
                night: IMAGES.ACCESSORY52N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Deer Antlers"
            }, {
                id: 65,
                day: IMAGES.ACCESSORY45D,
                night: IMAGES.ACCESSORY45N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Baby Dragon on your head"
            }, {
                id: 86,
                day: IMAGES.ACCESSORY74D,
                night: IMAGES.ACCESSORY74N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Gaz Mask and Glasses"
            }, {
                id: 87,
                day: IMAGES.ACCESSORY75D,
                night: IMAGES.ACCESSORY75N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Pink Gaz Mask and Glasses"
            }, {
                id: 88,
                day: IMAGES.ACCESSORY76D,
                night: IMAGES.ACCESSORY76N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Engineer Glasses"
            }, {
                id: 45,
                day: IMAGES.LEVEL5D,
                night: IMAGES.LEVEL5N,
                rarity: RARITY.LEVEL,
                author: "Starve.io",
                name: "More than Level 5",
                level: 5
            }, {
                id: 46,
                day: IMAGES.LEVEL10D,
                night: IMAGES.LEVEL10N,
                rarity: RARITY.LEVEL,
                author: "Starve.io",
                name: "More than Level 10",
                level: 10
            }, {
                id: 47,
                day: IMAGES.LEVEL15D,
                night: IMAGES.LEVEL15N,
                rarity: RARITY.LEVEL,
                author: "Starve.io",
                name: "More than Level 15",
                level: 15
            }, {
                id: 48,
                day: IMAGES.LEVEL20D,
                night: IMAGES.LEVEL20N,
                rarity: RARITY.LEVEL,
                author: "Starve.io",
                name: "More than Level 20",
                level: 20
            }, {
                id: 49,
                day: IMAGES.LEVEL25D,
                night: IMAGES.LEVEL25N,
                rarity: RARITY.LEVEL,
                author: "Starve.io",
                name: "More than Level 25",
                level: 25
            }, {
                id: 50,
                day: IMAGES.LEVEL30D,
                night: IMAGES.LEVEL30N,
                rarity: RARITY.LEVEL,
                author: "Starve.io",
                name: "More than Level 30",
                level: 30
            }, {
                id: 51,
                day: IMAGES.LEVEL35D,
                night: IMAGES.LEVEL35N,
                rarity: RARITY.LEVEL,
                author: "Starve.io",
                name: "More than Level 35",
                level: 35
            }, {
                id: 52,
                day: IMAGES.LEVEL40D,
                night: IMAGES.LEVEL40N,
                rarity: RARITY.LEVEL,
                author: "Starve.io",
                name: "More than Level 40",
                level: 40
            }, {
                id: 53,
                day: IMAGES.LEVEL45D,
                night: IMAGES.LEVEL45N,
                rarity: RARITY.LEVEL,
                author: "Starve.io",
                name: "More than Level 45",
                level: 45
            }, {
                id: 54,
                day: IMAGES.LEVEL50D,
                night: IMAGES.LEVEL50N,
                rarity: RARITY.LEVEL,
                author: "Starve.io",
                name: "More than Level 50",
                level: 50
            }, {
                id: 55,
                day: IMAGES.LEVEL55D,
                night: IMAGES.LEVEL55N,
                rarity: RARITY.LEVEL,
                author: "Starve.io",
                name: "More than Level 55",
                level: 55
            }, {
                id: 56,
                day: IMAGES.LEVEL60D,
                night: IMAGES.LEVEL60N,
                rarity: RARITY.LEVEL,
                author: "Starve.io",
                name: "More than Level 60",
                level: 60
            }]
        };
        WORLD.ZOMBIE_SKIN = find_cosmetics_per_id(COSMETICS.SKIN, 21);
        WORLD.VAMPIRE_SKIN = find_cosmetics_per_id(COSMETICS.SKIN, 20);
        sprite[SPRITE.BODY] = [];
        sprite[SPRITE.HAND] = [];
        sprite[SPRITE.CRATE] = [];
        sprite[SPRITE.BOOK] = [];
        sprite[SPRITE.BAG] = [];
        sprite[SPRITE.ACCESSORY] = [];
        for (var i = 0; i < COSMETICS.SKIN.length; i++) {
            sprite[SPRITE.BODY][i] = [COSMETICS.SKIN[i].day, COSMETICS.SKIN[i].night];
            sprite[SPRITE.HAND][i] = [COSMETICS.SKIN[i].dayHand, COSMETICS.SKIN[i].nightHand];
        }
        for (var i = 0; i < COSMETICS.BOOK.length; i++)
            sprite[SPRITE.BOOK][i] = [COSMETICS.BOOK[i].day, COSMETICS.BOOK[i].night];
        for (var i = 0; i < COSMETICS.CRATE.length; i++)
            sprite[SPRITE.CRATE][i] = [COSMETICS.CRATE[i].day, COSMETICS.CRATE[i].night];
        for (var i = 0; i < COSMETICS.BAG.length; i++)
            sprite[SPRITE.BAG][i] = [COSMETICS.BAG[i].day, COSMETICS.BAG[i].night];
        for (var i = 0; i < COSMETICS.ACCESSORY.length; i++)
            sprite[SPRITE.ACCESSORY][i] = [COSMETICS.ACCESSORY[i].day, COSMETICS.ACCESSORY[i].night];
    };

    function fill_path(ctx, fill, stroke, width) {
        if (fill) {
            ctx.fillStyle = fill;
            ctx.fill();
        }
        if (stroke) {
            ctx.lineWidth = width;
            ctx.strokeStyle = stroke;
            ctx.stroke();
        }
    };

    function round_rect(ctx, a, b, d, c, e) {
        (d < (2 * e)) && (e = d / 2);
        (c < (2 * e)) && (e = c / 2);
        (0 > e) && (e = 0);
        ctx.beginPath();
        ctx.moveTo(a + e, b);
        ctx.arcTo(a + d, b, a + d, b + c, e);
        ctx.arcTo(a + d, b + c, a, b + c, e);
        ctx.arcTo(a, b + c, a, b, e);
        ctx.arcTo(a, b, a + d, b, e);
        ctx.closePath();
    };

    function semi_round_rect(ctx, a, b, d, c, e) {
        (d < (2 * e)) && (e = d / 2);
        (c < (2 * e)) && (e = c / 2);
        (0 > e) && (e = 0);
        ctx.beginPath();
        ctx.moveTo(a + e, b);
        ctx.arcTo(a + d, b, a + d, b + c, 0);
        ctx.arcTo(a + d, b + c, a, b + c, e);
        ctx.arcTo(a, b + c, a, b, 0);
        ctx.arcTo(a, b, a + d, b, e);
        ctx.closePath();
    };

    function circle(ctx, x, y, r) {
        ctx.beginPath();
        ctx.arc(x, y, r, 0, Math.PI * 2);
    };

    function circle_angle(ctx, x, y, r, a) {
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.arc(x, y, r, 0, (Math.PI * 2) * a);
    };

    function round_regular_polygon(ctx, n, r, round) {
        var a = (Math.PI * 2) / n;
        ctx.beginPath();
        var vertex = [{
            x: r,
            y: 0
        }];
        var middle = [];
        for (var i = 1; i < n; i++) {
            vertex.push({
                x: Math.cos(i * a) * r,
                y: Math.sin(i * a) * r
            });
            var len = vertex.length;
            middle.push(Utils.middle_point(vertex[len - 2], vertex[len - 1]));
        }
        middle.push(Utils.middle_point(vertex[vertex.length - 1], vertex[0]));
        var v = middle[middle.length - 1];
        ctx.moveTo(v.x, v.y);
        for (var i = 0; i < n; i++)
            ctx.arcTo(vertex[i].x, vertex[i].y, middle[i].x, middle[i].y, round);
        ctx.closePath();
    };

    function create_rotated_img(r, img) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        var d = Math.sqrt((img.width * img.width) + (img.height * img.height));
        d2 = d / 2;
        can.width = d;
        can.height = d;
        ctx.translate(d2, d2);
        ctx.rotate(r);
        ctx.drawImage(img, -img.width / 2, -img.height / 2);
        return can;
    };

    function create_message(scale, msg) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        var h = Math.floor(scale * 28);
        var hf = Math.floor(scale * 20);
        ctx.font = hf + "px Baloo Paaji";
        var gap = 8 * scale;
        var w = ctx.measureText(msg).width + (gap * 2);
        can.width = w;
        can.height = h;
        round_rect(ctx, 0, 0, w, h, 10 * scale);
        ctx.globalAlpha = 0.5;
        fill_path(ctx, "#000");
        ctx.globalAlpha = 1;
        ctx.textBaseline = "middle", ctx.font = hf + "px Baloo Paaji";
        ctx.beginPath();
        ctx.fillStyle = "#FFF";
        ctx.fillText(msg, gap, h / 2);
        return can;
    };

    function create_accessory(scale, color, i) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 120 * scale;
        can.height = 110 * scale;
        if (i == 1) {
            circle(ctx, 35 * scale, 75 * scale, 19.72308292331602 * scale);
            fill_path(ctx, color[1], color[0], 4 * scale);
            ctx.save();
            ctx.translate(11 * scale, 77 * scale);
            round_rect(ctx, -4 * scale, -4 * scale, 8 * scale, 8 * scale, 10 * scale);
            ctx.restore();
            fill_path(ctx, undefined, color[0], 4 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(11 * scale, 81 * scale);
            ctx.bezierCurveTo(13 * scale, 105 * scale, 9 * scale, 106 * scale, 8 * scale, 91 * scale);
            fill_path(ctx, undefined, color[0], 4 * scale);
        } else if (i == 2) {
            circle(ctx, 85 * scale, 75 * scale, 16 * scale);
            fill_path(ctx, color[0], color[0], 4 * scale);
            ctx.scale(-1.7 * scale, 1.7 * scale);
            ctx.translate(-120 * scale, 0 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(20 * scale, 95 * scale);
            ctx.bezierCurveTo(56.5 * scale, 54 * scale, 56.5 * scale, 54 * scale, 93 * scale, 13 * scale);
            ctx.bezierCurveTo(89 * scale, 13 * scale, 89 * scale, 13 * scale, 85 * scale, 13 * scale);
            ctx.bezierCurveTo(49.5 * scale, 53 * scale, 49.5 * scale, 53 * scale, 14 * scale, 93 * scale);
            ctx.bezierCurveTo(15 * scale, 94 * scale, 15 * scale, 94 * scale, 19 * scale, 95 * scale);
            ctx.closePath();
            fill_path(ctx, color[0], color[0], 4 * scale);
        } else if (i == 3) {
            ctx.translate(-52 * scale, 0);
            ctx.save();
            ctx.translate(84.5 * scale, 36.5 * scale);
            ctx.rotate(-0.96);
            round_rect(ctx, -5.5 * scale, -15.5 * scale, 11 * scale, 31 * scale, 4 * scale);
            ctx.restore();
            fill_path(ctx, color[0], color[1], 4 * scale);
            ctx.save();
            ctx.translate(84 * scale, 36 * scale);
            ctx.rotate(0.64);
            round_rect(ctx, -5 * scale, -16 * scale, 10 * scale, 32 * scale, 4 * scale);
            ctx.restore();
            fill_path(ctx, color[0], color[1], 4 * scale);
            ctx.save();
            ctx.translate(83.5 * scale, 36.5 * scale);
            ctx.rotate(0.68);
            round_rect(ctx, -2.5 * scale, -6.5 * scale, 5 * scale, 13 * scale, 4 * scale);
            ctx.restore();
            fill_path(ctx, color[1]);
        } else if (i == 4) {
            circle(ctx, 35 * scale, 85 * scale, 17 * scale);
            fill_path(ctx, color[1], color[0], 3 * scale);
            circle(ctx, 85 * scale, 85 * scale, 17 * scale);
            fill_path(ctx, color[1], color[0], 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(53 * scale, 86 * scale);
            ctx.bezierCurveTo(59 * scale, 83 * scale, 63 * scale, 83 * scale, 67 * scale, 86 * scale);
            fill_path(ctx, undefined, color[0], 4 * scale);
        } else if (i == 5) {
            ctx.scale(1.2, 1.2);
            ctx.translate(-27 * scale, -8 * scale);
            ctx.scale(1.2, 1.2);
            ctx.translate(-10 * scale, 0);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(97 * scale, 23 * scale);
            ctx.bezierCurveTo(105 * scale, 24 * scale, 107 * scale, 37 * scale, 97 * scale, 39 * scale);
            ctx.bezierCurveTo(85 * scale, 40 * scale, 84 * scale, 22 * scale, 97 * scale, 23 * scale);
            ctx.closePath();
            fill_path(ctx, undefined, color[0], 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(96 * scale, 24 * scale);
            ctx.bezierCurveTo(96 * scale, 30.5 * scale, 96 * scale, 30.5 * scale, 96 * scale, 37 * scale);
            ctx.closePath();
            fill_path(ctx, undefined, color[0], 3 * scale);
            ctx.translate(0, -2 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(88 * scale, 37 * scale);
            ctx.bezierCurveTo(93 * scale, 33 * scale, 91.5 * scale, 34.5 * scale, 95 * scale, 32 * scale);
            ctx.bezierCurveTo(98.5 * scale, 34 * scale, 98.5 * scale, 34 * scale, 102 * scale, 36 * scale);
            fill_path(ctx, undefined, color[0], 3 * scale);
        } else if (i == 6) {
            circle(ctx, 13 * scale, 79 * scale, 5 * scale);
            fill_path(ctx, color[0]);
            circle(ctx, 106 * scale, 79 * scale, 5 * scale);
            fill_path(ctx, color[0]);
        } else if (i == 7) {
            ctx.translate(0 * scale, 5 * scale);
            ctx.globalAlpha = 0.5;
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(27 * scale, 14.399993896484375 * scale);
            ctx.bezierCurveTo(29 * scale, 4.399993896484375 * scale, 44 * scale, 16.399993896484375 * scale, 37 * scale, 21.399993896484375 * scale);
            ctx.bezierCurveTo(47 * scale, 17.399993896484375 * scale, 45 * scale, 36.399993896484375 * scale, 37 * scale, 32.399993896484375 * scale);
            ctx.bezierCurveTo(44 * scale, 40.399993896484375 * scale, 28 * scale, 47.399993896484375 * scale, 26 * scale, 37.399993896484375 * scale);
            ctx.bezierCurveTo(22 * scale, 46.399993896484375 * scale, 9 * scale, 37.399993896484375 * scale, 16 * scale, 30.399993896484375 * scale);
            ctx.bezierCurveTo(6 * scale, 34.399993896484375 * scale, 9 * scale, 15.399993896484375 * scale, 18 * scale, 19.399993896484375 * scale);
            ctx.bezierCurveTo(10 * scale, 12.399993896484375 * scale, 26 * scale, 7.399993896484375 * scale, 26 * scale, 14.399993896484375 * scale);
            ctx.closePath();
            fill_path(ctx, color[3]);
            ctx.globalAlpha = 1;
            ctx.translate(0 * scale, -5 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(27 * scale, 14.399993896484375 * scale);
            ctx.bezierCurveTo(29 * scale, 4.399993896484375 * scale, 44 * scale, 16.399993896484375 * scale, 37 * scale, 21.399993896484375 * scale);
            ctx.bezierCurveTo(47 * scale, 17.399993896484375 * scale, 45 * scale, 36.399993896484375 * scale, 37 * scale, 32.399993896484375 * scale);
            ctx.bezierCurveTo(44 * scale, 40.399993896484375 * scale, 28 * scale, 47.399993896484375 * scale, 26 * scale, 37.399993896484375 * scale);
            ctx.bezierCurveTo(22 * scale, 46.399993896484375 * scale, 9 * scale, 37.399993896484375 * scale, 16 * scale, 30.399993896484375 * scale);
            ctx.bezierCurveTo(6 * scale, 34.399993896484375 * scale, 9 * scale, 15.399993896484375 * scale, 18 * scale, 19.399993896484375 * scale);
            ctx.bezierCurveTo(10 * scale, 12.399993896484375 * scale, 26 * scale, 7.399993896484375 * scale, 26 * scale, 14.399993896484375 * scale);
            ctx.closePath();
            fill_path(ctx, color[1], color[2], 2 * scale);
            circle(ctx, 27 * scale, 26.800003051757812 * scale, 5 * scale);
            fill_path(ctx, color[0]);
        } else if (i == 8) {
            ctx.translate(-32 * scale, -19 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(123 * scale, 46 * scale);
            ctx.bezierCurveTo(132 * scale, 46 * scale, 135 * scale, 39 * scale, 134 * scale, 33 * scale);
            ctx.bezierCurveTo(145 * scale, 43 * scale, 142 * scale, 65 * scale, 127 * scale, 66 * scale);
            ctx.bezierCurveTo(118 * scale, 61 * scale, 119 * scale, 51 * scale, 123 * scale, 46 * scale);
            ctx.closePath();
            fill_path(ctx, color[0], color[1], 4 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(49 * scale, 32 * scale);
            ctx.bezierCurveTo(49 * scale, 44 * scale, 56 * scale, 44 * scale, 61 * scale, 46 * scale);
            ctx.bezierCurveTo(67 * scale, 52 * scale, 65 * scale, 65 * scale, 55 * scale, 66 * scale);
            ctx.bezierCurveTo(37 * scale, 60 * scale, 42 * scale, 38 * scale, 49 * scale, 32 * scale);
            ctx.closePath();
            fill_path(ctx, color[0], color[1], 4 * scale);
        }
        return can;
    };

    function create_hurt_player(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        var w = scale * 120;
        var h = scale * 110;
        var w2 = w / 2;
        var h2 = h / 2;
        var round = scale * 20;
        var wp = scale * 112;
        var hp = scale * 82;
        var wp2 = wp / 2;
        var hp2 = hp / 2;
        var width = scale * 4;
        can.width = w;
        can.height = h;
        ctx.globalAlpha = 1;
        ctx.translate(w2, h2);
        round_rect(ctx, -wp2, -hp2, wp, hp, round);
        fill_path(ctx, color, color, width);
        return can;
    };

    function create_player(scale, color, i) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 176 * scale;
        can.height = 127 * scale;
        if (i == 8) {
            ctx.globalAlpha = 0.3;
            ctx.save();
            ctx.translate(87 * scale, 64.5 * scale);
            round_rect(ctx, -56 * scale, -41.5 * scale, 112 * scale, 83 * scale, 18 * scale);
            ctx.restore();
            fill_path(ctx, color[0], color[1], 4 * scale);
            ctx.save();
            ctx.translate(82 * scale, 69.5 * scale);
            round_rect(ctx, -51 * scale, -36.5 * scale, 102 * scale, 73 * scale, 18 * scale);
            ctx.restore();
            fill_path(ctx, color[2], color[1], 4 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(55 * scale, 41 * scale);
            ctx.bezierCurveTo(38 * scale, 41 * scale, 37 * scale, 50 * scale, 38 * scale, 61 * scale);
            ctx.bezierCurveTo(42 * scale, 50 * scale, 46 * scale, 46 * scale, 55 * scale, 42 * scale);
            ctx.closePath();
            fill_path(ctx, color[3]);
            ctx.globalAlpha = 1;
            ctx.translate(26 * scale, 10 * scale);
            circle(ctx, 35 * scale, 75 * scale, 15 * scale);
            fill_path(ctx, color[4]);
            circle(ctx, 85 * scale, 75 * scale, 15 * scale);
            fill_path(ctx, color[4]);
            circle(ctx, 32 * scale, 67 * scale, 5 * scale);
            fill_path(ctx, color[5]);
            circle(ctx, 82 * scale, 67 * scale, 5 * scale);
            fill_path(ctx, color[5]);
        } else if (i == 9) {
            var can = document.createElement("canvas");
            var ctx = can.getContext("2d");
            can.width = 332 * scale;
            can.height = 127 * scale;
            ctx.globalAlpha = 0.5;
            ctx.translate(0, -36 * scale);
            ctx.save();
            ctx.translate(165.25 * scale, 106.84375 * scale);
            round_rect(ctx, -56.5 * scale, -41.5 * scale, 113 * scale, 83 * scale, 18 * scale);
            ctx.restore();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(0, 20 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(210.75 * scale, 72.84375 * scale);
            ctx.bezierCurveTo(238.75 * scale, 74.84375 * scale, 270.75 * scale, 85.84375 * scale, 269.75 * scale, 90.84375 * scale);
            ctx.bezierCurveTo(268.75 * scale, 94.84375 * scale, 221.75 * scale, 81.84375 * scale, 206.75 * scale, 85.84375 * scale);
            ctx.closePath();
            fill_path(ctx, color[1], color[2], 4 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(208.75 * scale, 69.84375 * scale);
            ctx.bezierCurveTo(241.75 * scale, 61.84375 * scale, 265.75 * scale, 65.84375 * scale, 286.75 * scale, 69.84375 * scale);
            ctx.bezierCurveTo(290.75 * scale, 75.84375 * scale, 225.75 * scale, 69.84375 * scale, 215.75 * scale, 80.84375 * scale);
            ctx.closePath();
            fill_path(ctx, color[1], color[2], 4 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(209.75 * scale, 69.84375 * scale);
            ctx.bezierCurveTo(228.75 * scale, 51.84375 * scale, 265.75 * scale, 46.84375 * scale, 294.75 * scale, 51.84375 * scale);
            ctx.bezierCurveTo(301.75 * scale, 55.84375 * scale, 224.75 * scale, 60.84375 * scale, 216.75 * scale, 80.84375 * scale);
            ctx.closePath();
            fill_path(ctx, color[1], color[2], 4 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(193.75 * scale, 72.84375 * scale);
            ctx.bezierCurveTo(206.75 * scale, 47.84375 * scale, 221.75 * scale, 37.84375 * scale, 249.75 * scale, 35.84375 * scale);
            ctx.bezierCurveTo(264.75 * scale, 34.84375 * scale, 305.75 * scale, 16.84375 * scale, 300.75 * scale, 24.84375 * scale);
            ctx.bezierCurveTo(273.75 * scale, 45.84375 * scale, 245.75 * scale, 46.84375 * scale, 235.75 * scale, 62.84375 * scale);
            ctx.bezierCurveTo(218.75 * scale, 82.84375 * scale, 215.75 * scale, 87.84375 * scale, 199.75 * scale, 84.84375 * scale);
            ctx.closePath();
            fill_path(ctx, color[1], color[2], 4 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(126.75 * scale, 80.34375 * scale);
            ctx.bezierCurveTo(94.75 * scale, 88.34375 * scale, 83.75 * scale, 88.34375 * scale, 65.75 * scale, 90.34375 * scale);
            ctx.bezierCurveTo(61.75 * scale, 87.34375 * scale, 86.75 * scale, 77.34375 * scale, 129.75 * scale, 70.34375 * scale);
            ctx.closePath();
            fill_path(ctx, color[1], color[2], 4 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(120.75 * scale, 72.34375 * scale);
            ctx.bezierCurveTo(128.75 * scale, 62.34375 * scale, 98.75 * scale, 64.34375 * scale, 49.75 * scale, 68.34375 * scale);
            ctx.bezierCurveTo(34.75 * scale, 75.34375 * scale, 101.75 * scale, 72.34375 * scale, 124.75 * scale, 78.34375 * scale);
            ctx.closePath();
            fill_path(ctx, color[1], color[2], 4 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(128.75 * scale, 76.34375 * scale);
            ctx.bezierCurveTo(111.75 * scale, 54.34375 * scale, 69.75 * scale, 48.34375 * scale, 39.75 * scale, 50.34375 * scale);
            ctx.bezierCurveTo(26.75 * scale, 53.34375 * scale, 86.75 * scale, 59.34375 * scale, 123.75 * scale, 78.34375 * scale);
            ctx.closePath();
            fill_path(ctx, color[1], color[2], 4 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(143.75 * scale, 74.34375 * scale);
            ctx.bezierCurveTo(128.75 * scale, 48.34375 * scale, 108.75 * scale, 35.34375 * scale, 81.75 * scale, 35.34375 * scale);
            ctx.bezierCurveTo(63.75 * scale, 33.34375 * scale, 26.75 * scale, 15.34375 * scale, 29.75 * scale, 25.34375 * scale);
            ctx.bezierCurveTo(33.75 * scale, 30.34375 * scale, 49.75 * scale, 40.34375 * scale, 70.75 * scale, 49.34375 * scale);
            ctx.bezierCurveTo(94.75 * scale, 54.34375 * scale, 104.75 * scale, 72.34375 * scale, 128.75 * scale, 88.34375 * scale);
            ctx.closePath();
            fill_path(ctx, color[1], color[2], 4 * scale);
            ctx.translate(0, -28 * scale);
            ctx.save();
            ctx.translate(165.25 * scale, 106.84375 * scale);
            round_rect(ctx, -56.5 * scale, -41.5 * scale, 113 * scale, 83 * scale, 18 * scale);
            ctx.restore();
            fill_path(ctx, color[1], color[2], 4 * scale);
            ctx.translate(28 * scale, 15 * scale);
            ctx.translate(0, 8 * scale);
            ctx.globalAlpha = 0.5;
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(83 * scale, 52 * scale);
            ctx.bezierCurveTo(78 * scale, 65 * scale, 110 * scale, 72 * scale, 139 * scale, 71 * scale);
            ctx.bezierCurveTo(176 * scale, 71 * scale, 193 * scale, 61 * scale, 191 * scale, 54 * scale);
            ctx.bezierCurveTo(202 * scale, 58 * scale, 198 * scale, 72 * scale, 187 * scale, 75 * scale);
            ctx.bezierCurveTo(143 * scale, 87 * scale, 107 * scale, 79 * scale, 89 * scale, 75 * scale);
            ctx.bezierCurveTo(72 * scale, 69 * scale, 74 * scale, 58 * scale, 83 * scale, 52 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(0 * scale, -8 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(83 * scale, 52 * scale);
            ctx.bezierCurveTo(78 * scale, 65 * scale, 110 * scale, 72 * scale, 139 * scale, 71 * scale);
            ctx.bezierCurveTo(176 * scale, 71 * scale, 193 * scale, 61 * scale, 191 * scale, 54 * scale);
            ctx.bezierCurveTo(202 * scale, 58 * scale, 198 * scale, 72 * scale, 187 * scale, 75 * scale);
            ctx.bezierCurveTo(143 * scale, 87 * scale, 107 * scale, 79 * scale, 89 * scale, 75 * scale);
            ctx.bezierCurveTo(72 * scale, 69 * scale, 74 * scale, 58 * scale, 83 * scale, 52 * scale);
            ctx.closePath();
            fill_path(ctx, color[5], color[6], 4 * scale);
            ctx.translate(-28 * scale, -15 * scale);
            circle(ctx, 141.75 * scale, 127.34375 * scale, 15 * scale);
            fill_path(ctx, color[3]);
            circle(ctx, 191.75 * scale, 127.09375 * scale, 15 * scale);
            fill_path(ctx, color[3]);
            circle(ctx, 138.75 * scale, 119.34375 * scale, 5 * scale);
            fill_path(ctx, color[4]);
            circle(ctx, 188.75 * scale, 119.34375 * scale, 5 * scale);
            fill_path(ctx, color[4]);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(125.75 * scale, 139.34375 * scale);
            ctx.bezierCurveTo(134.75 * scale, 134.34375 * scale, 143.75 * scale, 134.34375 * scale, 156.75 * scale, 139.34375 * scale);
            ctx.bezierCurveTo(153.25 * scale, 141.84375 * scale, 153.25 * scale, 141.84375 * scale, 149.75 * scale, 144.34375 * scale);
            ctx.bezierCurveTo(140.25 * scale, 144.34375 * scale, 140.25 * scale, 144.34375 * scale, 130.75 * scale, 144.34375 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(176.75 * scale, 139.34375 * scale);
            ctx.bezierCurveTo(183.75 * scale, 135.34375 * scale, 199.75 * scale, 135.34375 * scale, 205.75 * scale, 139.34375 * scale);
            ctx.bezierCurveTo(203.25 * scale, 141.34375 * scale, 203.25 * scale, 141.34375 * scale, 200.75 * scale, 143.34375 * scale);
            ctx.bezierCurveTo(190.75 * scale, 143.84375 * scale, 190.75 * scale, 143.84375 * scale, 180.75 * scale, 144.34375 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
        } else {
            ctx.globalAlpha = 0.75;
            ctx.translate(0, 8 * scale);
            ctx.save();
            ctx.translate(87 * scale, 64.5 * scale);
            round_rect(ctx, -56 * scale, -41.5 * scale, 112 * scale, 83 * scale, 18 * scale);
            ctx.restore();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(0, -8 * scale);
            ctx.save();
            ctx.translate(87 * scale, 64.5 * scale);
            round_rect(ctx, -56 * scale, -41.5 * scale, 112 * scale, 83 * scale, 18 * scale);
            ctx.restore();
            fill_path(ctx, color[1], color[2], 4 * scale);
            if (i == 0) {
                ctx.translate(27 * scale, 10 * scale);
                circle(ctx, 35 * scale, 75 * scale, 15 * scale);
                fill_path(ctx, color[3]);
                circle(ctx, 85 * scale, 75 * scale, 15 * scale);
                fill_path(ctx, color[3]);
                circle(ctx, 32 * scale, 67 * scale, 5 * scale);
                fill_path(ctx, color[4]);
                circle(ctx, 82 * scale, 67 * scale, 5 * scale);
                fill_path(ctx, color[4]);
            } else if (i == 1) {
                ctx.beginPath();
                ctx.lineCap = "round";
                ctx.lineJoin = "round";
                ctx.moveTo(35 * scale, 73 * scale);
                ctx.bezierCurveTo(40 * scale, 72 * scale, 38 * scale, 68 * scale, 35 * scale, 67 * scale);
                ctx.bezierCurveTo(25 * scale, 67 * scale, 21 * scale, 65 * scale, 16 * scale, 61 * scale);
                ctx.bezierCurveTo(10 * scale, 60 * scale, 16 * scale, 64 * scale, 20 * scale, 67 * scale);
                ctx.bezierCurveTo(3 * scale, 70 * scale, 12 * scale, 68.5 * scale, 4 * scale, 70 * scale);
                ctx.bezierCurveTo(2 * scale, 71 * scale, 6 * scale, 72 * scale, 13 * scale, 73 * scale);
                ctx.bezierCurveTo(12.5 * scale, 76.5 * scale, 12.5 * scale, 76.5 * scale, 12 * scale, 80 * scale);
                ctx.bezierCurveTo(12 * scale, 83 * scale, 15 * scale, 80 * scale, 18 * scale, 73 * scale);
                ctx.bezierCurveTo(26.5 * scale, 73.5 * scale, 26.5 * scale, 73.5 * scale, 35 * scale, 74 * scale);
                ctx.closePath();
                fill_path(ctx, color[5], color[6], 4 * scale);
                ctx.beginPath();
                ctx.lineCap = "round";
                ctx.lineJoin = "round";
                ctx.moveTo(134 * scale, 64 * scale);
                ctx.bezierCurveTo(141.5 * scale, 64 * scale, 141.5 * scale, 64 * scale, 149 * scale, 64 * scale);
                ctx.bezierCurveTo(153 * scale, 59 * scale, 156 * scale, 56 * scale, 159 * scale, 56 * scale);
                ctx.bezierCurveTo(161 * scale, 57 * scale, 160 * scale, 60 * scale, 155 * scale, 65 * scale);
                ctx.bezierCurveTo(165 * scale, 71 * scale, 168 * scale, 72 * scale, 169 * scale, 74 * scale);
                ctx.bezierCurveTo(169 * scale, 76 * scale, 159 * scale, 71 * scale, 156 * scale, 72 * scale);
                ctx.bezierCurveTo(154 * scale, 72 * scale, 155 * scale, 75 * scale, 156 * scale, 79 * scale);
                ctx.bezierCurveTo(155 * scale, 81 * scale, 153 * scale, 78 * scale, 150 * scale, 72 * scale);
                ctx.bezierCurveTo(142 * scale, 71.5 * scale, 142 * scale, 71.5 * scale, 134 * scale, 71 * scale);
                ctx.bezierCurveTo(130 * scale, 69 * scale, 131 * scale, 65 * scale, 135 * scale, 64 * scale);
                ctx.closePath();
                fill_path(ctx, color[5], color[6], 4 * scale);
                ctx.beginPath();
                ctx.lineCap = "round";
                ctx.lineJoin = "round";
                ctx.moveTo(80 * scale, 95 * scale);
                ctx.bezierCurveTo(83 * scale, 88 * scale, 89 * scale, 88 * scale, 92 * scale, 95 * scale);
                ctx.bezierCurveTo(92 * scale, 105 * scale, 88 * scale, 110 * scale, 86 * scale, 110 * scale);
                ctx.bezierCurveTo(83 * scale, 107 * scale, 82 * scale, 104 * scale, 80 * scale, 96 * scale);
                ctx.closePath();
                fill_path(ctx, color[7], color[8], 3 * scale);
                ctx.beginPath();
                ctx.lineCap = "round";
                ctx.lineJoin = "round";
                ctx.moveTo(81 * scale, 100 * scale);
                ctx.bezierCurveTo(82 * scale, 97 * scale, 83 * scale, 96 * scale, 85 * scale, 96 * scale);
                ctx.bezierCurveTo(82 * scale, 100 * scale, 82 * scale, 101 * scale, 83 * scale, 103 * scale);
                ctx.closePath();
                fill_path(ctx, color[8]);
                ctx.beginPath();
                ctx.lineCap = "round";
                ctx.lineJoin = "round";
                ctx.moveTo(83 * scale, 103 * scale);
                ctx.bezierCurveTo(83 * scale, 102 * scale, 84 * scale, 100 * scale, 86 * scale, 100 * scale);
                ctx.bezierCurveTo(84 * scale, 103 * scale, 84 * scale, 105 * scale, 84 * scale, 106 * scale);
                ctx.closePath();
                fill_path(ctx, color[8]);
                ctx.translate(27 * scale, 10 * scale);
                circle(ctx, 35 * scale, 75 * scale, 15 * scale);
                fill_path(ctx, color[3]);
                circle(ctx, 85 * scale, 75 * scale, 15 * scale);
                fill_path(ctx, color[3]);
                circle(ctx, 32 * scale, 67 * scale, 5 * scale);
                fill_path(ctx, color[4]);
                circle(ctx, 82 * scale, 67 * scale, 5 * scale);
                fill_path(ctx, color[4]);
            } else if (i == 2) {
                ctx.beginPath();
                ctx.lineCap = "round";
                ctx.lineJoin = "round";
                ctx.moveTo(48 * scale, 22 * scale);
                ctx.bezierCurveTo(85.5 * scale, 22 * scale, 85.5 * scale, 22 * scale, 123 * scale, 22 * scale);
                ctx.bezierCurveTo(138 * scale, 23 * scale, 147 * scale, 34 * scale, 143 * scale, 62 * scale);
                ctx.bezierCurveTo(142 * scale, 67 * scale, 144 * scale, 70 * scale, 149 * scale, 73 * scale);
                ctx.bezierCurveTo(147 * scale, 77 * scale, 145 * scale, 77 * scale, 143 * scale, 77 * scale);
                ctx.bezierCurveTo(141 * scale, 85 * scale, 145 * scale, 92 * scale, 148 * scale, 97 * scale);
                ctx.bezierCurveTo(142 * scale, 103 * scale, 134 * scale, 105 * scale, 121 * scale, 106 * scale);
                ctx.bezierCurveTo(85 * scale, 106 * scale, 85 * scale, 106 * scale, 49 * scale, 106 * scale);
                ctx.bezierCurveTo(32 * scale, 104 * scale, 29 * scale, 101 * scale, 24 * scale, 95 * scale);
                ctx.bezierCurveTo(30 * scale, 86 * scale, 31 * scale, 85 * scale, 30 * scale, 78 * scale);
                ctx.bezierCurveTo(27.5 * scale, 76 * scale, 27.5 * scale, 76 * scale, 25 * scale, 74 * scale);
                ctx.bezierCurveTo(31 * scale, 68 * scale, 31 * scale, 60 * scale, 30 * scale, 46 * scale);
                ctx.bezierCurveTo(31 * scale, 31 * scale, 37 * scale, 23 * scale, 47 * scale, 22 * scale);
                ctx.closePath();
                fill_path(ctx, color[1], color[2], 4 * scale);
                ctx.beginPath();
                ctx.lineCap = "round";
                ctx.lineJoin = "round";
                ctx.moveTo(30 * scale, 44 * scale);
                ctx.bezierCurveTo(66 * scale, 48 * scale, 99 * scale, 45 * scale, 141 * scale, 39 * scale);
                fill_path(ctx, undefined, color[3], 4 * scale);
                ctx.beginPath();
                ctx.lineCap = "round";
                ctx.lineJoin = "round";
                ctx.moveTo(30 * scale, 67 * scale);
                ctx.bezierCurveTo(80 * scale, 44 * scale, 118 * scale, 43 * scale, 141 * scale, 60 * scale);
                fill_path(ctx, undefined, color[3], 4 * scale);
                ctx.globalAlpha = 0.4;
                circle(ctx, 31 * scale, 44 * scale, 9 * scale);
                fill_path(ctx, color[4]);
                circle(ctx, 42 * scale, 47 * scale, 9 * scale);
                fill_path(ctx, color[5]);
                circle(ctx, 70 * scale, 42 * scale, 9 * scale);
                fill_path(ctx, color[6]);
                circle(ctx, 53 * scale, 45 * scale, 9 * scale);
                fill_path(ctx, color[7]);
                circle(ctx, 103 * scale, 40 * scale, 9 * scale);
                fill_path(ctx, color[8]);
                circle(ctx, 116 * scale, 41 * scale, 9 * scale);
                fill_path(ctx, color[5]);
                circle(ctx, 131 * scale, 41 * scale, 9 * scale);
                fill_path(ctx, color[4]);
                circle(ctx, 39 * scale, 64 * scale, 9 * scale);
                fill_path(ctx, color[7]);
                circle(ctx, 51 * scale, 60 * scale, 9 * scale);
                fill_path(ctx, color[6]);
                circle(ctx, 74 * scale, 53 * scale, 9 * scale);
                fill_path(ctx, color[4]);
                circle(ctx, 83 * scale, 51 * scale, 9 * scale);
                fill_path(ctx, color[8]);
                circle(ctx, 95 * scale, 51 * scale, 9 * scale);
                fill_path(ctx, color[6]);
                circle(ctx, 107 * scale, 49 * scale, 9 * scale);
                fill_path(ctx, color[7]);
                circle(ctx, 120 * scale, 50 * scale, 9 * scale);
                fill_path(ctx, color[4]);
                circle(ctx, 137 * scale, 57 * scale, 9 * scale);
                fill_path(ctx, color[5]);
                ctx.globalAlpha = 1;
                circle(ctx, 31 * scale, 44 * scale, 4 * scale);
                fill_path(ctx, color[4]);
                circle(ctx, 42 * scale, 47 * scale, 4 * scale);
                fill_path(ctx, color[5]);
                circle(ctx, 53 * scale, 45 * scale, 4 * scale);
                fill_path(ctx, color[7]);
                circle(ctx, 70 * scale, 43 * scale, 4 * scale);
                fill_path(ctx, color[6]);
                circle(ctx, 50 * scale, 59 * scale, 4 * scale);
                fill_path(ctx, color[6]);
                circle(ctx, 39 * scale, 64 * scale, 4 * scale);
                fill_path(ctx, color[7]);
                circle(ctx, 83 * scale, 51 * scale, 4 * scale);
                fill_path(ctx, color[4]);
                circle(ctx, 74 * scale, 53 * scale, 4 * scale);
                fill_path(ctx, color[8]);
                circle(ctx, 95 * scale, 51 * scale, 4 * scale);
                fill_path(ctx, color[6]);
                circle(ctx, 103 * scale, 41 * scale, 4 * scale);
                fill_path(ctx, color[8]);
                circle(ctx, 107 * scale, 49 * scale, 4 * scale);
                fill_path(ctx, color[7]);
                circle(ctx, 116 * scale, 41 * scale, 4 * scale);
                fill_path(ctx, color[5]);
                circle(ctx, 131 * scale, 41 * scale, 4 * scale);
                fill_path(ctx, color[4]);
                circle(ctx, 137 * scale, 57 * scale, 4 * scale);
                fill_path(ctx, color[5]);
                circle(ctx, 120 * scale, 50 * scale, 4 * scale);
                fill_path(ctx, color[4]);
                ctx.translate(27 * scale, 10 * scale);
                circle(ctx, 35 * scale, 75 * scale, 15 * scale);
                fill_path(ctx, color[9]);
                circle(ctx, 85 * scale, 75 * scale, 15 * scale);
                fill_path(ctx, color[9]);
                circle(ctx, 32 * scale, 67 * scale, 5 * scale);
                fill_path(ctx, color[10]);
                circle(ctx, 82 * scale, 67 * scale, 5 * scale);
                fill_path(ctx, color[10]);
            } else if (i == 3) {
                ctx.beginPath();
                ctx.lineCap = "round";
                ctx.lineJoin = "round";
                ctx.moveTo(23 * scale, 95 * scale);
                ctx.bezierCurveTo(30 * scale, 85 * scale, 30 * scale, 83 * scale, 30 * scale, 72 * scale);
                ctx.bezierCurveTo(30 * scale, 61.5 * scale, 30 * scale, 61.5 * scale, 30 * scale, 51 * scale);
                ctx.bezierCurveTo(29 * scale, 33 * scale, 42 * scale, 23 * scale, 54 * scale, 24 * scale);
                ctx.bezierCurveTo(86.5 * scale, 24 * scale, 86.5 * scale, 24 * scale, 119 * scale, 24 * scale);
                ctx.bezierCurveTo(135 * scale, 24 * scale, 143 * scale, 33 * scale, 143 * scale, 47 * scale);
                ctx.bezierCurveTo(143 * scale, 63.5 * scale, 143 * scale, 63.5 * scale, 143 * scale, 80 * scale);
                ctx.bezierCurveTo(142 * scale, 86 * scale, 147 * scale, 93 * scale, 150 * scale, 96 * scale);
                ctx.bezierCurveTo(144 * scale, 107 * scale, 113 * scale, 112 * scale, 84 * scale, 111 * scale);
                ctx.bezierCurveTo(52 * scale, 112 * scale, 34 * scale, 106 * scale, 23 * scale, 96 * scale);
                ctx.closePath();
                fill_path(ctx, color[1], color[2], 4 * scale);
                ctx.beginPath();
                ctx.lineCap = "round";
                ctx.lineJoin = "round";
                ctx.moveTo(30 * scale, 81 * scale);
                ctx.bezierCurveTo(56 * scale, 99 * scale, 104 * scale, 98 * scale, 142 * scale, 84 * scale);
                ctx.bezierCurveTo(145.5 * scale, 89.5 * scale, 145.5 * scale, 89.5 * scale, 149 * scale, 95 * scale);
                ctx.bezierCurveTo(142 * scale, 106 * scale, 127 * scale, 110 * scale, 81 * scale, 110 * scale);
                ctx.bezierCurveTo(36 * scale, 112 * scale, 28 * scale, 99 * scale, 23 * scale, 95 * scale);
                ctx.bezierCurveTo(31 * scale, 87 * scale, 31 * scale, 82 * scale, 30 * scale, 81 * scale);
                ctx.closePath();
                fill_path(ctx, color[3], color[2], 4 * scale);
                ctx.beginPath();
                ctx.lineCap = "round";
                ctx.lineJoin = "round";
                ctx.moveTo(23 * scale, 95 * scale);
                ctx.bezierCurveTo(30 * scale, 85 * scale, 30 * scale, 83 * scale, 30 * scale, 72 * scale);
                ctx.bezierCurveTo(30 * scale, 61.5 * scale, 30 * scale, 61.5 * scale, 30 * scale, 51 * scale);
                ctx.bezierCurveTo(29 * scale, 33 * scale, 42 * scale, 23 * scale, 54 * scale, 24 * scale);
                ctx.bezierCurveTo(86.5 * scale, 24 * scale, 86.5 * scale, 24 * scale, 119 * scale, 24 * scale);
                ctx.bezierCurveTo(135 * scale, 24 * scale, 143 * scale, 33 * scale, 143 * scale, 47 * scale);
                ctx.bezierCurveTo(143 * scale, 63.5 * scale, 143 * scale, 63.5 * scale, 143 * scale, 80 * scale);
                ctx.bezierCurveTo(142 * scale, 86 * scale, 147 * scale, 93 * scale, 150 * scale, 96 * scale);
                ctx.bezierCurveTo(144 * scale, 107 * scale, 113 * scale, 112 * scale, 84 * scale, 111 * scale);
                ctx.bezierCurveTo(52 * scale, 112 * scale, 34 * scale, 106 * scale, 23 * scale, 96 * scale);
                ctx.closePath();
                fill_path(ctx, undefined, color[2], 4 * scale);
                ctx.translate(27 * scale, 10 * scale);
                circle(ctx, 35 * scale, 75 * scale, 15 * scale);
                fill_path(ctx, color[6]);
                circle(ctx, 85 * scale, 75 * scale, 15 * scale);
                fill_path(ctx, color[6]);
                circle(ctx, 32 * scale, 67 * scale, 5 * scale);
                fill_path(ctx, color[7]);
                circle(ctx, 82 * scale, 67 * scale, 5 * scale);
                fill_path(ctx, color[7]);
                ctx.translate(-96 * scale, -25 * scale);
                ctx.scale(1.8, 1.8);
                ctx.beginPath();
                ctx.lineCap = "round";
                ctx.lineJoin = "round";
                ctx.moveTo(85 * scale, 21 * scale);
                ctx.bezierCurveTo(73 * scale, 16 * scale, 70 * scale, 16 * scale, 70 * scale, 26 * scale);
                ctx.bezierCurveTo(72 * scale, 34 * scale, 75 * scale, 37 * scale, 85 * scale, 26 * scale);
                ctx.closePath();
                fill_path(ctx, color[4], color[5], 3 * scale);
                ctx.beginPath();
                ctx.lineCap = "round";
                ctx.lineJoin = "round";
                ctx.moveTo(89 * scale, 21 * scale);
                ctx.bezierCurveTo(104 * scale, 16 * scale, 105 * scale, 19 * scale, 106 * scale, 24 * scale);
                ctx.bezierCurveTo(105 * scale, 36 * scale, 97 * scale, 36 * scale, 90 * scale, 28 * scale);
                ctx.closePath();
                fill_path(ctx, color[4], color[5], 3 * scale);
                circle(ctx, 87 * scale, 23 * scale, 6.324555320336759 * scale);
                fill_path(ctx, color[4], color[5], 3 * scale);
            } else if (i == 4) {
                ctx.translate(27 * scale, 8 * scale);
                circle(ctx, 15 * scale, 76 * scale, 9.219544457292887 * scale);
                fill_path(ctx, color[3]);
                circle(ctx, 106 * scale, 76 * scale, 9.219544457292887 * scale);
                fill_path(ctx, color[3]);
                ctx.translate(-27 * scale, -8 * scale);
                ctx.translate(27 * scale, 10 * scale);
                circle(ctx, 35 * scale, 75 * scale, 15 * scale);
                fill_path(ctx, color[5]);
                circle(ctx, 85 * scale, 75 * scale, 15 * scale);
                fill_path(ctx, color[5]);
                circle(ctx, 32 * scale, 67 * scale, 5 * scale);
                fill_path(ctx, color[6]);
                circle(ctx, 82 * scale, 67 * scale, 5 * scale);
                fill_path(ctx, color[6]);
                ctx.translate(-27 * scale, -10 * scale);
                ctx.translate(27 * scale, 8 * scale);
                ctx.beginPath();
                ctx.lineCap = "round";
                ctx.lineJoin = "round";
                ctx.moveTo(52 * scale, 86 * scale);
                ctx.bezierCurveTo(54 * scale, 78 * scale, 65 * scale, 80 * scale, 67 * scale, 85 * scale);
                ctx.bezierCurveTo(69 * scale, 89 * scale, 64 * scale, 99 * scale, 71 * scale, 106 * scale);
                ctx.bezierCurveTo(75 * scale, 109 * scale, 61 * scale, 108 * scale, 58 * scale, 102 * scale);
                ctx.bezierCurveTo(53 * scale, 97 * scale, 52 * scale, 91 * scale, 52 * scale, 86 * scale);
                ctx.closePath();
                fill_path(ctx, color[4]);
            } else if (i == 6) {
                ctx.beginPath();
                ctx.lineCap = "round";
                ctx.lineJoin = "round";
                ctx.translate(2 * scale, 0);
                ctx.moveTo(28 * scale, 69 * scale);
                ctx.bezierCurveTo(26 * scale, 39 * scale, 31 * scale, 25 * scale, 52 * scale, 24 * scale);
                ctx.bezierCurveTo(86 * scale, 23.5 * scale, 86 * scale, 23.5 * scale, 120 * scale, 23 * scale);
                ctx.bezierCurveTo(137 * scale, 23 * scale, 145 * scale, 33 * scale, 144 * scale, 53 * scale);
                ctx.bezierCurveTo(144.5 * scale, 63 * scale, 144.5 * scale, 63 * scale, 145 * scale, 73 * scale);
                ctx.bezierCurveTo(141 * scale, 41 * scale, 106 * scale, 41 * scale, 98 * scale, 59 * scale);
                ctx.bezierCurveTo(92 * scale, 69 * scale, 94 * scale, 98 * scale, 90 * scale, 95 * scale);
                ctx.bezierCurveTo(86 * scale, 95 * scale, 86 * scale, 95 * scale, 82 * scale, 95 * scale);
                ctx.bezierCurveTo(79 * scale, 94 * scale, 87 * scale, 33 * scale, 48 * scale, 47 * scale);
                ctx.bezierCurveTo(31 * scale, 57 * scale, 30 * scale, 65 * scale, 28 * scale, 72 * scale);
                ctx.closePath();
                fill_path(ctx, color[3]);
                ctx.save();
                ctx.translate(87 * scale, 64.5 * scale);
                round_rect(ctx, -56 * scale, -41.5 * scale, 112 * scale, 83 * scale, 18 * scale);
                ctx.restore();
                fill_path(ctx, undefined, color[2], 4 * scale);
                ctx.translate(27 * scale, 10 * scale);
                circle(ctx, 35 * scale, 75 * scale, 15 * scale);
                fill_path(ctx, color[3]);
                circle(ctx, 85 * scale, 75 * scale, 15 * scale);
                fill_path(ctx, color[3]);
                circle(ctx, 32 * scale, 67 * scale, 5 * scale);
                fill_path(ctx, color[4]);
                circle(ctx, 82 * scale, 67 * scale, 5 * scale);
                fill_path(ctx, color[4]);
                ctx.scale(1.4, 1.4);
                ctx.translate(-43.5 * scale, -32 * scale);
                ctx.beginPath();
                ctx.lineCap = "round";
                ctx.lineJoin = "round";
                ctx.moveTo(86 * scale, 105 * scale);
                ctx.bezierCurveTo(89 * scale, 103 * scale, 90 * scale, 100 * scale, 92 * scale, 97 * scale);
                ctx.bezierCurveTo(93 * scale, 91 * scale, 85 * scale, 90 * scale, 81 * scale, 95 * scale);
                ctx.bezierCurveTo(80 * scale, 97 * scale, 83 * scale, 101 * scale, 85 * scale, 105 * scale);
                ctx.closePath();
                fill_path(ctx, color[5], color[6], 3 * scale);
            } else if (i == 7) {
                ctx.save();
                ctx.translate(86 * scale, 64.5 * scale);
                round_rect(ctx, -16 * scale, -43.5 * scale, 32 * scale, 87 * scale, 5 * scale);
                ctx.restore();
                fill_path(ctx, color[3], color[4], 4 * scale);
                ctx.translate(0, 6 * scale);
                ctx.globalAlpha = 0.5;
                ctx.save();
                ctx.translate(85.5 * scale, 47 * scale);
                round_rect(ctx, -58.5 * scale, -8 * scale, 117 * scale, 16 * scale, 5 * scale);
                ctx.restore();
                fill_path(ctx, color[0]);
                ctx.translate(0, -6 * scale);
                ctx.globalAlpha = 1;
                ctx.save();
                ctx.translate(85.5 * scale, 47 * scale);
                round_rect(ctx, -58.5 * scale, -8 * scale, 117 * scale, 16 * scale, 5 * scale);
                ctx.restore();
                fill_path(ctx, color[3], color[4], 4 * scale);
                ctx.translate(0, 7 * scale);
                ctx.globalAlpha = 0.5;
                ctx.beginPath();
                ctx.lineCap = "round";
                ctx.lineJoin = "round";
                ctx.moveTo(84 * scale, 44 * scale);
                ctx.bezierCurveTo(85 * scale, 26 * scale, 96 * scale, 23 * scale, 103 * scale, 30 * scale);
                ctx.bezierCurveTo(110 * scale, 36 * scale, 110 * scale, 47 * scale, 92 * scale, 50 * scale);
                ctx.closePath();
                fill_path(ctx, color[0]);
                ctx.beginPath();
                ctx.lineCap = "round";
                ctx.lineJoin = "round";
                ctx.moveTo(87 * scale, 44 * scale);
                ctx.bezierCurveTo(108 * scale, 47 * scale, 109 * scale, 54 * scale, 102 * scale, 63 * scale);
                ctx.bezierCurveTo(92 * scale, 77 * scale, 80 * scale, 61 * scale, 84 * scale, 49 * scale);
                ctx.closePath();
                fill_path(ctx, color[0]);
                ctx.beginPath();
                ctx.lineCap = "round";
                ctx.lineJoin = "round";
                ctx.moveTo(84 * scale, 43 * scale);
                ctx.bezierCurveTo(86 * scale, 24 * scale, 72 * scale, 23 * scale, 68 * scale, 31 * scale);
                ctx.bezierCurveTo(56 * scale, 42 * scale, 70 * scale, 49 * scale, 81 * scale, 47 * scale);
                ctx.closePath();
                fill_path(ctx, color[0]);
                ctx.beginPath();
                ctx.lineCap = "round";
                ctx.lineJoin = "round";
                ctx.moveTo(78 * scale, 45 * scale);
                ctx.bezierCurveTo(61 * scale, 49 * scale, 60 * scale, 58 * scale, 68 * scale, 64 * scale);
                ctx.bezierCurveTo(78 * scale, 75 * scale, 84 * scale, 65 * scale, 89 * scale, 54 * scale);
                ctx.closePath();
                fill_path(ctx, color[0]);
                ctx.translate(0, -7 * scale);
                ctx.globalAlpha = 1;
                ctx.beginPath();
                ctx.lineCap = "round";
                ctx.lineJoin = "round";
                ctx.moveTo(84 * scale, 44 * scale);
                ctx.bezierCurveTo(85 * scale, 26 * scale, 96 * scale, 23 * scale, 103 * scale, 30 * scale);
                ctx.bezierCurveTo(110 * scale, 36 * scale, 110 * scale, 47 * scale, 92 * scale, 50 * scale);
                ctx.closePath();
                fill_path(ctx, color[3], color[4], 4 * scale);
                ctx.beginPath();
                ctx.lineCap = "round";
                ctx.lineJoin = "round";
                ctx.moveTo(87 * scale, 44 * scale);
                ctx.bezierCurveTo(108 * scale, 47 * scale, 109 * scale, 54 * scale, 102 * scale, 63 * scale);
                ctx.bezierCurveTo(92 * scale, 77 * scale, 80 * scale, 61 * scale, 84 * scale, 49 * scale);
                ctx.closePath();
                fill_path(ctx, color[3], color[4], 4 * scale);
                ctx.beginPath();
                ctx.lineCap = "round";
                ctx.lineJoin = "round";
                ctx.moveTo(84 * scale, 43 * scale);
                ctx.bezierCurveTo(86 * scale, 24 * scale, 72 * scale, 23 * scale, 68 * scale, 31 * scale);
                ctx.bezierCurveTo(56 * scale, 42 * scale, 70 * scale, 49 * scale, 81 * scale, 47 * scale);
                ctx.closePath();
                fill_path(ctx, color[3], color[4], 4 * scale);
                ctx.beginPath();
                ctx.lineCap = "round";
                ctx.lineJoin = "round";
                ctx.moveTo(78 * scale, 45 * scale);
                ctx.bezierCurveTo(61 * scale, 49 * scale, 60 * scale, 58 * scale, 68 * scale, 64 * scale);
                ctx.bezierCurveTo(78 * scale, 75 * scale, 84 * scale, 65 * scale, 89 * scale, 54 * scale);
                ctx.closePath();
                fill_path(ctx, color[3], color[4], 4 * scale);
                ctx.translate(0, 6 * scale);
                ctx.globalAlpha = 0.5;
                ctx.save();
                ctx.translate(85 * scale, 47.5 * scale);
                ctx.rotate(0);
                round_rect(ctx, -10 * scale, -10.5 * scale, 20 * scale, 21 * scale, 5 * scale);
                ctx.restore();
                fill_path(ctx, color[0]);
                ctx.translate(0, -6 * scale);
                ctx.globalAlpha = 1;
                ctx.save();
                ctx.translate(85 * scale, 47.5 * scale);
                ctx.rotate(0);
                round_rect(ctx, -10 * scale, -10.5 * scale, 20 * scale, 21 * scale, 5 * scale);
                ctx.restore();
                fill_path(ctx, color[3], color[4], 4 * scale);
                ctx.translate(27 * scale, 10 * scale);
                circle(ctx, 35 * scale, 75 * scale, 15 * scale);
                fill_path(ctx, color[5]);
                circle(ctx, 85 * scale, 75 * scale, 15 * scale);
                fill_path(ctx, color[5]);
                circle(ctx, 32 * scale, 67 * scale, 5 * scale);
                fill_path(ctx, color[6]);
                circle(ctx, 82 * scale, 67 * scale, 5 * scale);
                fill_path(ctx, color[6]);
            } else if (i == 5) {
                can.width = 211 * scale;
                can.height = 152 * scale;
                ctx.globalAlpha = 0.5;
                ctx.translate(0, 8 * scale);
                ctx.save();
                ctx.translate(105.5 * scale, 76.5 * scale);
                round_rect(ctx, -56 * scale, -41.5 * scale, 112 * scale, 83 * scale, 18 * scale);
                ctx.restore();
                fill_path(ctx, color[0]);
                ctx.globalAlpha = 1;
                ctx.translate(0, -8 * scale);
                ctx.save();
                ctx.translate(105.5 * scale, 76.5 * scale);
                round_rect(ctx, -56 * scale, -41.5 * scale, 112 * scale, 83 * scale, 18 * scale);
                ctx.restore();
                fill_path(ctx, color[1], color[2], 4 * scale);
                ctx.beginPath();
                ctx.lineCap = "round";
                ctx.lineJoin = "round";
                ctx.moveTo(68 * scale, 39 * scale);
                ctx.bezierCurveTo(48 * scale, 37 * scale, 43 * scale, 27 * scale, 40 * scale, 12 * scale);
                ctx.bezierCurveTo(31 * scale, 25 * scale, 20 * scale, 17 * scale, 11 * scale, 9 * scale);
                ctx.bezierCurveTo(9 * scale, 41 * scale, 40 * scale, 44 * scale, 62 * scale, 45 * scale);
                ctx.closePath();
                fill_path(ctx, color[3], color[2], 4 * scale);
                ctx.beginPath();
                ctx.lineCap = "round";
                ctx.lineJoin = "round";
                ctx.moveTo(143 * scale, 38 * scale);
                ctx.bezierCurveTo(161 * scale, 40 * scale, 169 * scale, 24 * scale, 171 * scale, 13 * scale);
                ctx.bezierCurveTo(181 * scale, 23 * scale, 188 * scale, 20 * scale, 199 * scale, 9 * scale);
                ctx.bezierCurveTo(204 * scale, 35 * scale, 182 * scale, 44 * scale, 152 * scale, 45 * scale);
                ctx.closePath();
                fill_path(ctx, color[3], color[2], 4 * scale);
                ctx.save();
                ctx.translate(105.5 * scale, 76.5 * scale);
                round_rect(ctx, -55 * scale, -40.5 * scale, 106 * scale, 77 * scale, 18 * scale);
                ctx.restore();
                fill_path(ctx, color[1]);
                ctx.beginPath();
                ctx.lineCap = "round";
                ctx.lineJoin = "round";
                ctx.moveTo(149 * scale, 45 * scale);
                ctx.bezierCurveTo(155 * scale, 37 * scale, 158 * scale, 37 * scale, 161 * scale, 52 * scale);
                ctx.bezierCurveTo(164 * scale, 60 * scale, 161 * scale, 65 * scale, 152 * scale, 58 * scale);
                ctx.bezierCurveTo(145 * scale, 51 * scale, 143 * scale, 49 * scale, 149 * scale, 45 * scale);
                ctx.closePath();
                fill_path(ctx, color[4], color[2], 4 * scale);
                ctx.beginPath();
                ctx.lineCap = "round";
                ctx.lineJoin = "round";
                ctx.moveTo(60 * scale, 43 * scale);
                ctx.bezierCurveTo(67 * scale, 47 * scale, 67 * scale, 51 * scale, 57 * scale, 59 * scale);
                ctx.bezierCurveTo(50 * scale, 64 * scale, 47 * scale, 64 * scale, 49 * scale, 55 * scale);
                ctx.bezierCurveTo(49 * scale, 42 * scale, 51 * scale, 38 * scale, 59 * scale, 42 * scale);
                ctx.closePath();
                fill_path(ctx, color[4], color[2], 4 * scale);
                circle(ctx, 105 * scale, 107 * scale, 10.63014581273465 * scale);
                fill_path(ctx, color[5], color[6], 4 * scale);
                ctx.beginPath();
                ctx.lineCap = "round";
                ctx.lineJoin = "round";
                ctx.moveTo(105 * scale, 100 * scale);
                ctx.bezierCurveTo(111 * scale, 101 * scale, 113 * scale, 104 * scale, 112 * scale, 109 * scale);
                ctx.closePath();
                fill_path(ctx, color[7]);
                ctx.translate(44.5 * scale, 22 * scale);
                circle(ctx, 35 * scale, 75 * scale, 15 * scale);
                fill_path(ctx, color[8]);
                circle(ctx, 85 * scale, 75 * scale, 15 * scale);
                fill_path(ctx, color[8]);
                circle(ctx, 32 * scale, 67 * scale, 5 * scale);
                fill_path(ctx, color[9]);
                circle(ctx, 82 * scale, 67 * scale, 5 * scale);
                fill_path(ctx, color[9]);
            } else if (i == 9) {
                ctx.save();
                ctx.translate(110 * scale, 22 * scale);
                round_rect(ctx, -16 * scale, -5 * scale, 32 * scale, 10 * scale, 10 * scale);
                ctx.restore();
                fill_path(ctx, color[1], color[2], 3 * scale);
                ctx.save();
                ctx.translate(109.5 * scale, 17 * scale);
                round_rect(ctx, -18.5 * scale, -3 * scale, 37 * scale, 6 * scale, 10 * scale);
                ctx.restore();
                fill_path(ctx, color[3], color[4], 3 * scale);
                ctx.globalAlpha = 0.5;
                ctx.translate(0, 5 * scale);
                ctx.save();
                ctx.translate(86 * scale, 40 * scale);
                round_rect(ctx, -58 * scale, -9 * scale, 116 * scale, 18 * scale, 6 * scale);
                ctx.restore();
                fill_path(ctx, color[0]);
                ctx.globalAlpha = 1;
                ctx.translate(0, -5 * scale);
                ctx.save();
                ctx.translate(86 * scale, 40 * scale);
                round_rect(ctx, -58 * scale, -9 * scale, 116 * scale, 18 * scale, 6 * scale);
                ctx.restore();
                fill_path(ctx, color[3], color[4], 3 * scale);
                ctx.globalAlpha = 0.75;
                ctx.translate(0, 5 * scale);
                ctx.beginPath();
                ctx.lineCap = "round";
                ctx.lineJoin = "round";
                ctx.moveTo(109 * scale, 47 * scale);
                ctx.bezierCurveTo(110.5 * scale, 45 * scale, 110.5 * scale, 45 * scale, 112 * scale, 43 * scale);
                ctx.bezierCurveTo(114 * scale, 44 * scale, 114 * scale, 44 * scale, 116 * scale, 45 * scale);
                ctx.bezierCurveTo(117.5 * scale, 43 * scale, 117.5 * scale, 43 * scale, 119 * scale, 41 * scale);
                ctx.bezierCurveTo(121 * scale, 41.5 * scale, 121 * scale, 41.5 * scale, 123 * scale, 42 * scale);
                ctx.closePath();
                fill_path(ctx, color[0]);
                ctx.beginPath();
                ctx.translate(0, 5 * scale);
                ctx.lineCap = "round";
                ctx.lineJoin = "round";
                ctx.moveTo(54 * scale, 35 * scale);
                ctx.bezierCurveTo(61.5 * scale, 35 * scale, 61.5 * scale, 35 * scale, 69 * scale, 35 * scale);
                ctx.bezierCurveTo(70 * scale, 48 * scale, 70 * scale, 60 * scale, 60 * scale, 59 * scale);
                ctx.bezierCurveTo(45 * scale, 61 * scale, 44 * scale, 60 * scale, 43 * scale, 53 * scale);
                ctx.bezierCurveTo(42 * scale, 49 * scale, 55 * scale, 51 * scale, 55 * scale, 44 * scale);
                ctx.closePath();
                fill_path(ctx, color[0]);
                ctx.globalAlpha = 1;
                ctx.translate(0, -5 * scale);
                ctx.beginPath();
                ctx.lineCap = "round";
                ctx.lineJoin = "round";
                ctx.moveTo(105 * scale, 38 * scale);
                ctx.bezierCurveTo(110 * scale, 48 * scale, 110 * scale, 50 * scale, 105 * scale, 53 * scale);
                ctx.bezierCurveTo(98 * scale, 62 * scale, 107 * scale, 66 * scale, 117 * scale, 60 * scale);
                ctx.bezierCurveTo(128 * scale, 56 * scale, 130 * scale, 56 * scale, 126 * scale, 49 * scale);
                ctx.bezierCurveTo(123.5 * scale, 41.5 * scale, 123.5 * scale, 41.5 * scale, 121 * scale, 34 * scale);
                ctx.closePath();
                fill_path(ctx, color[7], color[8], 3 * scale);
                ctx.beginPath();
                ctx.lineCap = "round";
                ctx.lineJoin = "round";
                ctx.moveTo(109 * scale, 47 * scale);
                ctx.bezierCurveTo(110.5 * scale, 45 * scale, 110.5 * scale, 45 * scale, 112 * scale, 43 * scale);
                ctx.bezierCurveTo(114 * scale, 44 * scale, 114 * scale, 44 * scale, 116 * scale, 45 * scale);
                ctx.bezierCurveTo(117.5 * scale, 43 * scale, 117.5 * scale, 43 * scale, 119 * scale, 41 * scale);
                ctx.bezierCurveTo(121 * scale, 41.5 * scale, 121 * scale, 41.5 * scale, 123 * scale, 42 * scale);
                ctx.closePath();
                fill_path(ctx, undefined, color[6], 3 * scale);
                ctx.beginPath();
                ctx.lineCap = "round";
                ctx.lineJoin = "round";
                ctx.moveTo(84 * scale, 33 * scale);
                ctx.bezierCurveTo(88.5 * scale, 34.5 * scale, 88.5 * scale, 34.5 * scale, 93 * scale, 36 * scale);
                ctx.bezierCurveTo(87 * scale, 43 * scale, 88 * scale, 45 * scale, 91 * scale, 46 * scale);
                ctx.bezierCurveTo(98 * scale, 56 * scale, 91 * scale, 57 * scale, 85 * scale, 53 * scale);
                ctx.bezierCurveTo(80 * scale, 50 * scale, 78 * scale, 49 * scale, 82 * scale, 43 * scale);
                ctx.bezierCurveTo(83.5 * scale, 38 * scale, 83.5 * scale, 38 * scale, 85 * scale, 33 * scale);
                ctx.closePath();
                fill_path(ctx, color[5], color[6], 3 * scale);
                ctx.beginPath();
                ctx.lineCap = "round";
                ctx.lineJoin = "round";
                ctx.moveTo(54 * scale, 35 * scale);
                ctx.bezierCurveTo(61.5 * scale, 35 * scale, 61.5 * scale, 35 * scale, 69 * scale, 35 * scale);
                ctx.bezierCurveTo(70 * scale, 48 * scale, 70 * scale, 60 * scale, 60 * scale, 59 * scale);
                ctx.bezierCurveTo(45 * scale, 61 * scale, 44 * scale, 60 * scale, 43 * scale, 53 * scale);
                ctx.bezierCurveTo(42 * scale, 49 * scale, 55 * scale, 51 * scale, 55 * scale, 44 * scale);
                ctx.closePath();
                fill_path(ctx, color[7], color[8], 3 * scale);
                ctx.beginPath();
                ctx.lineCap = "round";
                ctx.lineJoin = "round";
                ctx.moveTo(48 * scale, 49 * scale);
                ctx.bezierCurveTo(50 * scale, 50 * scale, 50 * scale, 50 * scale, 52 * scale, 51 * scale);
                ctx.bezierCurveTo(50.5 * scale, 52 * scale, 50.5 * scale, 52 * scale, 49 * scale, 53 * scale);
                ctx.bezierCurveTo(51 * scale, 54.5 * scale, 51 * scale, 54.5 * scale, 53 * scale, 56 * scale);
                ctx.bezierCurveTo(51 * scale, 57.5 * scale, 51 * scale, 57.5 * scale, 49 * scale, 59 * scale);
                ctx.closePath();
                fill_path(ctx, undefined, color[6], 3 * scale);
                ctx.beginPath();
                ctx.lineCap = "round";
                ctx.lineJoin = "round";
                ctx.moveTo(54 * scale, 39 * scale);
                ctx.bezierCurveTo(61.5 * scale, 39.5 * scale, 61.5 * scale, 39.5 * scale, 69 * scale, 40 * scale);
                ctx.closePath();
                fill_path(ctx, undefined, color[6], 3 * scale);
                ctx.beginPath();
                ctx.lineCap = "round";
                ctx.lineJoin = "round";
                ctx.moveTo(55 * scale, 43 * scale);
                ctx.bezierCurveTo(61.5 * scale, 43.5 * scale, 61.5 * scale, 43.5 * scale, 68 * scale, 44 * scale);
                ctx.closePath();
                fill_path(ctx, undefined, color[6], 3 * scale);
                ctx.translate(27 * scale, 5 * scale);
                circle(ctx, 35 * scale, 75 * scale, 15 * scale);
                fill_path(ctx, color[9]);
                circle(ctx, 85 * scale, 75 * scale, 15 * scale);
                fill_path(ctx, color[9]);
                circle(ctx, 32 * scale, 67 * scale, 5 * scale);
                fill_path(ctx, color[10]);
                circle(ctx, 82 * scale, 67 * scale, 5 * scale);
                fill_path(ctx, color[10]);
            }
        }
        return can;
    };

    function create_robotskin(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 350 * scale;
        can.height = 350 * scale;
        ctx.translate(0, 15 * scale);
        ctx.globalAlpha = 0.5;
        ctx.save();
        ctx.translate(174 * scale, 172 * scale);
        round_rect(ctx, -81 * scale, -60 * scale, 162 * scale, 120 * scale, 26 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.translate(0, -15 * scale);
        ctx.globalAlpha = 1;
        ctx.save();
        ctx.translate(174 * scale, 172 * scale);
        round_rect(ctx, -81 * scale, -60 * scale, 162 * scale, 120 * scale, 26 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 7 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(179 * scale, 211 * scale);
        ctx.bezierCurveTo(183 * scale, 204.5 * scale, 183 * scale, 204.5 * scale, 187 * scale, 198 * scale);
        ctx.bezierCurveTo(198.5 * scale, 191.5 * scale, 198.5 * scale, 191.5 * scale, 210 * scale, 185 * scale);
        ctx.bezierCurveTo(215 * scale, 176.5 * scale, 215 * scale, 176.5 * scale, 220 * scale, 168 * scale);
        ctx.bezierCurveTo(213 * scale, 173.5 * scale, 213 * scale, 173.5 * scale, 206 * scale, 179 * scale);
        ctx.bezierCurveTo(195 * scale, 184 * scale, 195 * scale, 184 * scale, 184 * scale, 189 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(167 * scale, 233 * scale);
        ctx.bezierCurveTo(167 * scale, 207 * scale, 167 * scale, 207 * scale, 167 * scale, 181 * scale);
        ctx.bezierCurveTo(167 * scale, 166 * scale, 157 * scale, 164 * scale, 148 * scale, 165 * scale);
        ctx.bezierCurveTo(120 * scale, 165 * scale, 120 * scale, 165 * scale, 92 * scale, 165 * scale);
        ctx.bezierCurveTo(92 * scale, 186.5 * scale, 92 * scale, 186.5 * scale, 92 * scale, 208 * scale);
        ctx.bezierCurveTo(93 * scale, 222 * scale, 102 * scale, 234 * scale, 119 * scale, 233 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 7 * scale);
        circle(ctx, 152 * scale, 179 * scale, 6 * scale);
        fill_path(ctx, color[4]);
        circle(ctx, 107 * scale, 179 * scale, 6 * scale);
        fill_path(ctx, color[4]);
        ctx.save();
        ctx.translate(210 * scale, 200 * scale);
        ctx.rotate(0.2);
        round_regular_polygon(ctx, 6, 32 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[5], color[2], 7 * scale);
        ctx.save();
        ctx.translate(210 * scale, 200 * scale);
        ctx.rotate(1.0471975511965976);
        round_regular_polygon(ctx, 6, 19 * scale, 6 * scale);
        ctx.restore();
        fill_path(ctx, color[6], color[7], 7 * scale);
        ctx.save();
        ctx.translate(205 * scale, 193 * scale);
        ctx.rotate(0);
        round_regular_polygon(ctx, 6, 10 * scale, 3 * scale);
        ctx.restore();
        fill_path(ctx, color[8]);
        ctx.save();
        ctx.translate(137 * scale, 200 * scale);
        ctx.rotate(-0.5235987755982988);
        round_regular_polygon(ctx, 6, 20 * scale, 5 * scale);
        ctx.restore();
        fill_path(ctx, color[6], color[7], 7 * scale);
        ctx.save();
        ctx.translate(131 * scale, 194 * scale);
        round_regular_polygon(ctx, 6, 10 * scale, 3 * scale);
        ctx.restore();
        fill_path(ctx, color[8]);
        ctx.save();
        ctx.translate(150.5 * scale, 120 * scale);
        ctx.rotate(0);
        round_rect(ctx, -19.5 * scale, -8 * scale, 39 * scale, 16 * scale, 0 * scale);
        ctx.restore();
        fill_path(ctx, undefined, color[2], 7 * scale);
        return can;
    };

    function create_skins(scale, color, i) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 175 * scale;
        can.height = 150 * scale;
        if (i == 0) {
            ctx.globalAlpha = 0.5;
            ctx.translate(-88 * scale, -95 * scale);
            ctx.save();
            ctx.translate(174 * scale, 195.5 * scale);
            round_rect(ctx, -82 * scale, -46.5 * scale, 164 * scale, 93 * scale, 30 * scale);
            ctx.restore();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.save();
            ctx.translate(174 * scale, 170.5 * scale);
            round_rect(ctx, -81 * scale, -59.5 * scale, 162 * scale, 119 * scale, 28 * scale);
            ctx.restore();
            fill_path(ctx, color[1], color[2], 6.5 * scale);
            circle(ctx, 137 * scale, 200 * scale, 22.090722034374522 * scale);
            fill_path(ctx, color[3]);
            circle(ctx, 210 * scale, 200 * scale, 22.20360331117452 * scale);
            fill_path(ctx, color[3]);
            circle(ctx, 131 * scale, 194 * scale, 7 * scale);
            fill_path(ctx, color[4]);
            circle(ctx, 206 * scale, 194 * scale, 7 * scale);
            fill_path(ctx, color[4]);
            ctx.translate(0, 1 * scale);
            ctx.save();
            ctx.translate(138.5 * scale, 180.5 * scale);
            round_rect(ctx, -22.5 * scale, -11.5 * scale, 45 * scale, 23 * scale, 0 * scale);
            ctx.restore();
            fill_path(ctx, color[1]);
            ctx.save();
            ctx.translate(207 * scale, 177.5 * scale);
            round_rect(ctx, -31 * scale, -9.5 * scale, 62 * scale, 19 * scale, 0 * scale);
            ctx.restore();
            fill_path(ctx, color[1]);
            ctx.save();
            ctx.translate(171.5 * scale, 220 * scale);
            round_rect(ctx, -52.5 * scale, -2 * scale, 105 * scale, 4 * scale, 0 * scale);
            ctx.restore();
            fill_path(ctx, color[1]);
        } else if (i == 1) {
            ctx.globalAlpha = 0.5;
            ctx.translate(-88 * scale, -95 * scale);
            ctx.save();
            ctx.translate(174 * scale, 195.5 * scale);
            round_rect(ctx, -82 * scale, -46.5 * scale, 164 * scale, 93 * scale, 30 * scale);
            ctx.restore();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.save();
            ctx.translate(174 * scale, 170.5 * scale);
            round_rect(ctx, -81 * scale, -59.5 * scale, 162 * scale, 119 * scale, 28 * scale);
            ctx.restore();
            fill_path(ctx, color[1], color[2], 6.5 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(183 * scale, 223 * scale);
            ctx.bezierCurveTo(193 * scale, 187 * scale, 215 * scale, 193 * scale, 227 * scale, 159 * scale);
            ctx.bezierCurveTo(227 * scale, 194 * scale, 209 * scale, 187 * scale, 183 * scale, 223 * scale);
            ctx.closePath();
            fill_path(ctx, color[5]);
            circle(ctx, 137 * scale, 200 * scale, 22.090722034374522 * scale);
            fill_path(ctx, color[3]);
            circle(ctx, 210 * scale, 200 * scale, 22.20360331117452 * scale);
            fill_path(ctx, color[3]);
            circle(ctx, 131 * scale, 190 * scale, 7 * scale);
            fill_path(ctx, color[4]);
            circle(ctx, 204 * scale, 190 * scale, 7 * scale);
            fill_path(ctx, color[4]);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(120 * scale, 154 * scale);
            ctx.bezierCurveTo(125 * scale, 146 * scale, 131 * scale, 143 * scale, 147 * scale, 137 * scale);
            ctx.bezierCurveTo(139 * scale, 147 * scale, 129 * scale, 152 * scale, 121 * scale, 154 * scale);
            ctx.closePath();
            fill_path(ctx, color[5]);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(120 * scale, 162 * scale);
            ctx.bezierCurveTo(134 * scale, 153 * scale, 139 * scale, 149 * scale, 150 * scale, 144 * scale);
            ctx.bezierCurveTo(143 * scale, 155 * scale, 128 * scale, 163 * scale, 121 * scale, 161 * scale);
            ctx.closePath();
            fill_path(ctx, color[5]);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(127 * scale, 142 * scale);
            ctx.bezierCurveTo(129 * scale, 151 * scale, 132 * scale, 157 * scale, 137 * scale, 162 * scale);
            ctx.bezierCurveTo(134 * scale, 152 * scale, 132 * scale, 146 * scale, 127 * scale, 142 * scale);
            ctx.closePath();
            fill_path(ctx, color[5]);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(135 * scale, 140 * scale);
            ctx.bezierCurveTo(141 * scale, 144 * scale, 143 * scale, 150 * scale, 143 * scale, 157 * scale);
            ctx.bezierCurveTo(138 * scale, 150 * scale, 136 * scale, 145 * scale, 135 * scale, 140 * scale);
            ctx.closePath();
            fill_path(ctx, color[5]);
        } else if (i == 2) {
            ctx.globalAlpha = 0.5;
            ctx.translate(-88 * scale, -95 * scale);
            ctx.save();
            ctx.translate(174 * scale, 195.5 * scale);
            round_rect(ctx, -82 * scale, -46.5 * scale, 164 * scale, 93 * scale, 30 * scale);
            ctx.restore();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.save();
            ctx.translate(174 * scale, 170.5 * scale);
            round_rect(ctx, -81 * scale, -59.5 * scale, 162 * scale, 119 * scale, 28 * scale);
            ctx.restore();
            fill_path(ctx, color[1], color[2], 6.5 * scale);
            circle(ctx, 137 * scale, 200 * scale, 22.090722034374522 * scale);
            fill_path(ctx, color[3]);
            circle(ctx, 210 * scale, 200 * scale, 22.20360331117452 * scale);
            fill_path(ctx, color[3]);
            circle(ctx, 130 * scale, 192 * scale, 7 * scale);
            fill_path(ctx, color[4]);
            circle(ctx, 203 * scale, 192 * scale, 7 * scale);
            fill_path(ctx, color[4]);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(115 * scale, 224 * scale);
            ctx.bezierCurveTo(173 * scale, 223.5 * scale, 173 * scale, 223.5 * scale, 231 * scale, 223 * scale);
            ctx.bezierCurveTo(230 * scale, 222 * scale, 198 * scale, 223 * scale, 186 * scale, 209 * scale);
            ctx.bezierCurveTo(173.5 * scale, 209 * scale, 173.5 * scale, 209 * scale, 161 * scale, 209 * scale);
            ctx.bezierCurveTo(146 * scale, 224 * scale, 114 * scale, 223 * scale, 116 * scale, 224 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(112 * scale, 193 * scale);
            ctx.bezierCurveTo(154 * scale, 182 * scale, 194 * scale, 183 * scale, 234 * scale, 192 * scale);
            ctx.bezierCurveTo(217 * scale, 154 * scale, 148 * scale, 127 * scale, 112 * scale, 192 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
        } else if (i == 3) {
            ctx.globalAlpha = 0.5;
            ctx.translate(-88 * scale, -95 * scale);
            ctx.save();
            ctx.translate(174 * scale, 195.5 * scale);
            round_rect(ctx, -82 * scale, -46.5 * scale, 164 * scale, 93 * scale, 30 * scale);
            ctx.restore();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.save();
            ctx.translate(174 * scale, 170.5 * scale);
            round_rect(ctx, -81 * scale, -59.5 * scale, 162 * scale, 119 * scale, 28 * scale);
            ctx.restore();
            fill_path(ctx, color[1], color[2], 6.5 * scale);
            circle(ctx, 137 * scale, 200 * scale, 22.090722034374522 * scale);
            fill_path(ctx, color[3]);
            circle(ctx, 210 * scale, 200 * scale, 22.20360331117452 * scale);
            fill_path(ctx, color[3]);
            circle(ctx, 130 * scale, 192 * scale, 7 * scale);
            fill_path(ctx, color[4]);
            circle(ctx, 203 * scale, 192 * scale, 7 * scale);
            fill_path(ctx, color[4]);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(120 * scale, 176 * scale);
            ctx.bezierCurveTo(175 * scale, 193 * scale, 147.5 * scale, 184.5 * scale, 175 * scale, 193 * scale);
            ctx.bezierCurveTo(200 * scale, 184.5 * scale, 200 * scale, 184.5 * scale, 225 * scale, 176 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(226 * scale, 223 * scale);
            ctx.bezierCurveTo(173.5 * scale, 223 * scale, 173.5 * scale, 223 * scale, 121 * scale, 223 * scale);
            ctx.bezierCurveTo(148 * scale, 218 * scale, 148 * scale, 218 * scale, 175 * scale, 213 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
        } else if (i == 4) {
            ctx.globalAlpha = 0.5;
            ctx.translate(-88 * scale, -95 * scale);
            ctx.save();
            ctx.translate(174 * scale, 195.5 * scale);
            round_rect(ctx, -82 * scale, -46.5 * scale, 164 * scale, 93 * scale, 30 * scale);
            ctx.restore();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.save();
            ctx.translate(174 * scale, 170.5 * scale);
            ctx.rotate(0);
            round_rect(ctx, -81 * scale, -59.5 * scale, 162 * scale, 119 * scale, 28 * scale);
            ctx.restore();
            fill_path(ctx, color[1], color[2], 6.5 * scale);
            circle(ctx, 137 * scale, 200 * scale, 22.090722034374522 * scale);
            fill_path(ctx, color[3]);
            circle(ctx, 210 * scale, 200 * scale, 22.20360331117452 * scale);
            fill_path(ctx, color[3]);
            circle(ctx, 137 * scale, 203 * scale, 8 * scale);
            fill_path(ctx, color[4]);
            circle(ctx, 209 * scale, 203 * scale, 8 * scale);
            fill_path(ctx, color[4]);
            ctx.save();
            ctx.translate(174.5 * scale, 218 * scale);
            ctx.rotate(0);
            round_rect(ctx, -60.5 * scale, -5 * scale, 121 * scale, 10 * scale, 28 * scale);
            ctx.restore();
            fill_path(ctx, color[1]);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(113 * scale, 190 * scale);
            ctx.bezierCurveTo(144 * scale, 181.5 * scale, 144 * scale, 181.5 * scale, 175 * scale, 173 * scale);
            ctx.bezierCurveTo(205 * scale, 182 * scale, 205 * scale, 182 * scale, 235 * scale, 191 * scale);
            ctx.bezierCurveTo(242 * scale, 141 * scale, 106 * scale, 119 * scale, 112 * scale, 189 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
        } else if (i == 5) {
            ctx.globalAlpha = 0.5;
            ctx.translate(-88 * scale, -95 * scale);
            ctx.save();
            ctx.translate(174 * scale, 195.5 * scale);
            round_rect(ctx, -82 * scale, -46.5 * scale, 164 * scale, 93 * scale, 30 * scale);
            ctx.restore();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.save();
            ctx.translate(174 * scale, 170.5 * scale);
            ctx.rotate(0);
            round_rect(ctx, -81 * scale, -59.5 * scale, 162 * scale, 119 * scale, 28 * scale);
            ctx.restore();
            fill_path(ctx, color[1], color[2], 6.5 * scale);
            circle(ctx, 137 * scale, 200 * scale, 22.090722034374522 * scale);
            fill_path(ctx, color[3]);
            circle(ctx, 210 * scale, 200 * scale, 22.20360331117452 * scale);
            fill_path(ctx, color[3]);
            circle(ctx, 140 * scale, 196 * scale, 7 * scale);
            fill_path(ctx, color[4]);
            circle(ctx, 213 * scale, 196 * scale, 7 * scale);
            fill_path(ctx, color[4]);
            circle(ctx, 131 * scale, 206 * scale, 3 * scale);
            fill_path(ctx, color[4]);
            circle(ctx, 204 * scale, 206 * scale, 3 * scale);
            fill_path(ctx, color[4]);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(113 * scale, 181 * scale);
            ctx.bezierCurveTo(159 * scale, 204 * scale, 190 * scale, 202 * scale, 235 * scale, 181 * scale);
            ctx.bezierCurveTo(241 * scale, 137 * scale, 109 * scale, 130 * scale, 112 * scale, 180 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.save();
            ctx.translate(174 * scale, 220 * scale);
            ctx.rotate(0);
            round_rect(ctx, -56 * scale, -5 * scale, 112 * scale, 10 * scale, 1 * scale);
            ctx.restore();
            fill_path(ctx, color[1]);
        } else if (i == 6) {
            ctx.globalAlpha = 0.5;
            ctx.translate(-88 * scale, -95 * scale);
            ctx.save();
            ctx.translate(174 * scale, 195.5 * scale);
            round_rect(ctx, -82 * scale, -46.5 * scale, 164 * scale, 93 * scale, 30 * scale);
            ctx.restore();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.save();
            ctx.translate(174 * scale, 170.5 * scale);
            round_rect(ctx, -81 * scale, -59.5 * scale, 162 * scale, 119 * scale, 28 * scale);
            ctx.restore();
            fill_path(ctx, color[1], color[2], 6.5 * scale);
            circle(ctx, 137 * scale, 200 * scale, 22.090722034374522 * scale);
            fill_path(ctx, color[3]);
            circle(ctx, 210 * scale, 200 * scale, 22.20360331117452 * scale);
            fill_path(ctx, color[3]);
            circle(ctx, 133 * scale, 188 * scale, 7 * scale);
            fill_path(ctx, color[4]);
            circle(ctx, 206 * scale, 188 * scale, 7 * scale);
            fill_path(ctx, color[4]);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(110 * scale, 193 * scale);
            ctx.bezierCurveTo(130 * scale, 182 * scale, 142 * scale, 183 * scale, 162 * scale, 193 * scale);
            ctx.bezierCurveTo(164 * scale, 176.5 * scale, 164 * scale, 176.5 * scale, 166 * scale, 160 * scale);
            ctx.bezierCurveTo(137 * scale, 159 * scale, 137 * scale, 159 * scale, 108 * scale, 158 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(184 * scale, 192 * scale);
            ctx.bezierCurveTo(205 * scale, 183 * scale, 216 * scale, 183 * scale, 234 * scale, 192 * scale);
            ctx.bezierCurveTo(233.5 * scale, 177 * scale, 233.5 * scale, 177 * scale, 233 * scale, 162 * scale);
            ctx.bezierCurveTo(209 * scale, 161.5 * scale, 186 * scale, 162 * scale, 185 * scale, 161 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
        } else if (i == 7) {
            ctx.globalAlpha = 0.5;
            ctx.translate(-88 * scale, -95 * scale);
            ctx.save();
            ctx.translate(174 * scale, 195.5 * scale);
            round_rect(ctx, -82 * scale, -46.5 * scale, 164 * scale, 93 * scale, 30 * scale);
            ctx.restore();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.save();
            ctx.translate(174 * scale, 170.5 * scale);
            round_rect(ctx, -81 * scale, -59.5 * scale, 162 * scale, 119 * scale, 28 * scale);
            ctx.restore();
            fill_path(ctx, color[1], color[2], 6.5 * scale);
            circle(ctx, 137 * scale, 200 * scale, 22.090722034374522 * scale);
            fill_path(ctx, color[3]);
            circle(ctx, 210 * scale, 200 * scale, 22.20360331117452 * scale);
            fill_path(ctx, color[3]);
            circle(ctx, 130 * scale, 206 * scale, 7 * scale);
            fill_path(ctx, color[4]);
            circle(ctx, 203 * scale, 206 * scale, 7 * scale);
            fill_path(ctx, color[4]);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(108 * scale, 191 * scale);
            ctx.bezierCurveTo(141 * scale, 184 * scale, 141 * scale, 184 * scale, 174 * scale, 177 * scale);
            ctx.bezierCurveTo(207 * scale, 184 * scale, 207 * scale, 184 * scale, 240 * scale, 191 * scale);
            ctx.bezierCurveTo(244 * scale, 140 * scale, 113 * scale, 121 * scale, 108 * scale, 191 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
        } else if (i == 8) {
            ctx.globalAlpha = 0.5;
            ctx.translate(-88 * scale, -95 * scale);
            ctx.save();
            ctx.translate(174 * scale, 195.5 * scale);
            round_rect(ctx, -82 * scale, -46.5 * scale, 164 * scale, 93 * scale, 30 * scale);
            ctx.restore();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.save();
            ctx.translate(174 * scale, 170.5 * scale);
            round_rect(ctx, -81 * scale, -59.5 * scale, 162 * scale, 119 * scale, 28 * scale);
            ctx.restore();
            fill_path(ctx, color[1], color[2], 6.5 * scale);
            circle(ctx, 137 * scale, 200 * scale, 22.090722034374522 * scale);
            fill_path(ctx, color[3]);
            circle(ctx, 210 * scale, 200 * scale, 22.20360331117452 * scale);
            fill_path(ctx, color[3]);
            circle(ctx, 127 * scale, 198 * scale, 7 * scale);
            fill_path(ctx, color[4]);
            circle(ctx, 200 * scale, 198 * scale, 7 * scale);
            fill_path(ctx, color[4]);
            ctx.save();
            ctx.translate(175 * scale, 175.5 * scale);
            round_rect(ctx, -67 * scale, -13.5 * scale, 134 * scale, 27 * scale, 0 * scale);
            ctx.restore();
            fill_path(ctx, color[1]);
            ctx.save();
            ctx.translate(172 * scale, 219 * scale);
            round_rect(ctx, -60 * scale, -4 * scale, 120 * scale, 8 * scale, 0 * scale);
            ctx.restore();
            fill_path(ctx, color[1]);
        } else if (i == 9) {
            ctx.globalAlpha = 0.5;
            ctx.translate(-88 * scale, -95 * scale);
            ctx.save();
            ctx.translate(174 * scale, 195.5 * scale);
            round_rect(ctx, -82 * scale, -46.5 * scale, 164 * scale, 93 * scale, 30 * scale);
            ctx.restore();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.save();
            ctx.translate(174 * scale, 170.5 * scale);
            round_rect(ctx, -81 * scale, -59.5 * scale, 162 * scale, 119 * scale, 28 * scale);
            ctx.restore();
            fill_path(ctx, color[1], color[2], 6.5 * scale);
            circle(ctx, 137 * scale, 200 * scale, 22.090722034374522 * scale);
            fill_path(ctx, color[3]);
            circle(ctx, 210 * scale, 200 * scale, 22.090722034374522 * scale);
            fill_path(ctx, color[3]);
            circle(ctx, 143 * scale, 200 * scale, 7 * scale);
            fill_path(ctx, color[4]);
            circle(ctx, 204 * scale, 200 * scale, 7 * scale);
            fill_path(ctx, color[4]);
        }
        return can;
    };

    function create_garlic(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 264 * scale;
        can.height = 246 * scale;
        ctx.translate(0, 10 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(75 * scale, 54 * scale);
        ctx.bezierCurveTo(79 * scale, 21 * scale, 131 * scale, 13 * scale, 153 * scale, 36 * scale);
        ctx.bezierCurveTo(204 * scale, 27 * scale, 221 * scale, 52 * scale, 216 * scale, 83 * scale);
        ctx.bezierCurveTo(241 * scale, 103 * scale, 232 * scale, 138 * scale, 214 * scale, 147 * scale);
        ctx.bezierCurveTo(223 * scale, 184 * scale, 201 * scale, 200 * scale, 175 * scale, 199 * scale);
        ctx.bezierCurveTo(156 * scale, 218 * scale, 135 * scale, 222 * scale, 114 * scale, 203 * scale);
        ctx.bezierCurveTo(62 * scale, 213 * scale, 66 * scale, 189 * scale, 59 * scale, 170 * scale);
        ctx.bezierCurveTo(27 * scale, 164 * scale, 31 * scale, 134 * scale, 38 * scale, 123 * scale);
        ctx.bezierCurveTo(11 * scale, 80 * scale, 51 * scale, 52 * scale, 75 * scale, 54 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.translate(0, -10 * scale);
        ctx.globalAlpha = 1;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(75 * scale, 54 * scale);
        ctx.bezierCurveTo(79 * scale, 21 * scale, 131 * scale, 13 * scale, 153 * scale, 36 * scale);
        ctx.bezierCurveTo(204 * scale, 27 * scale, 221 * scale, 52 * scale, 216 * scale, 83 * scale);
        ctx.bezierCurveTo(241 * scale, 103 * scale, 232 * scale, 138 * scale, 214 * scale, 147 * scale);
        ctx.bezierCurveTo(223 * scale, 184 * scale, 201 * scale, 200 * scale, 175 * scale, 199 * scale);
        ctx.bezierCurveTo(156 * scale, 218 * scale, 135 * scale, 222 * scale, 114 * scale, 203 * scale);
        ctx.bezierCurveTo(62 * scale, 213 * scale, 66 * scale, 189 * scale, 59 * scale, 170 * scale);
        ctx.bezierCurveTo(27 * scale, 164 * scale, 31 * scale, 134 * scale, 38 * scale, 123 * scale);
        ctx.bezierCurveTo(11 * scale, 80 * scale, 51 * scale, 52 * scale, 75 * scale, 54 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(121 * scale, 102 * scale);
        ctx.bezierCurveTo(111 * scale, 80 * scale, 110 * scale, 66 * scale, 108 * scale, 51 * scale);
        ctx.bezierCurveTo(119 * scale, 65 * scale, 129 * scale, 85 * scale, 135 * scale, 99 * scale);
        ctx.bezierCurveTo(142 * scale, 67 * scale, 146 * scale, 60 * scale, 152 * scale, 50 * scale);
        ctx.bezierCurveTo(154 * scale, 71 * scale, 152 * scale, 85 * scale, 149 * scale, 104 * scale);
        ctx.bezierCurveTo(166 * scale, 88 * scale, 175 * scale, 83 * scale, 188 * scale, 78 * scale);
        ctx.bezierCurveTo(179 * scale, 91 * scale, 170 * scale, 103 * scale, 160 * scale, 112 * scale);
        ctx.bezierCurveTo(186 * scale, 107 * scale, 191 * scale, 107 * scale, 204 * scale, 108 * scale);
        ctx.bezierCurveTo(195 * scale, 114 * scale, 179 * scale, 120 * scale, 163 * scale, 123 * scale);
        ctx.bezierCurveTo(183 * scale, 130 * scale, 186 * scale, 135 * scale, 192 * scale, 140 * scale);
        ctx.bezierCurveTo(179 * scale, 141 * scale, 164 * scale, 139 * scale, 153 * scale, 135 * scale);
        ctx.bezierCurveTo(158 * scale, 145 * scale, 163 * scale, 159 * scale, 165 * scale, 177 * scale);
        ctx.bezierCurveTo(154 * scale, 166 * scale, 145 * scale, 153 * scale, 138 * scale, 139 * scale);
        ctx.bezierCurveTo(133 * scale, 155 * scale, 125 * scale, 170 * scale, 117 * scale, 182 * scale);
        ctx.bezierCurveTo(116 * scale, 160 * scale, 119 * scale, 151 * scale, 124 * scale, 138 * scale);
        ctx.bezierCurveTo(107 * scale, 150 * scale, 95 * scale, 156 * scale, 82 * scale, 159 * scale);
        ctx.bezierCurveTo(94 * scale, 140 * scale, 101 * scale, 136 * scale, 113 * scale, 128 * scale);
        ctx.bezierCurveTo(78 * scale, 123 * scale, 75 * scale, 121 * scale, 67 * scale, 118 * scale);
        ctx.bezierCurveTo(85 * scale, 112 * scale, 94 * scale, 112 * scale, 111 * scale, 113 * scale);
        ctx.bezierCurveTo(89 * scale, 97 * scale, 85 * scale, 93 * scale, 78 * scale, 82 * scale);
        ctx.bezierCurveTo(92 * scale, 85 * scale, 101 * scale, 90 * scale, 121 * scale, 102 * scale);
        ctx.closePath();
        fill_path(ctx, color[2]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(128 * scale, 103 * scale);
        ctx.bezierCurveTo(111 * scale, 112 * scale, 117 * scale, 136 * scale, 140 * scale, 130 * scale);
        ctx.bezierCurveTo(151 * scale, 126 * scale, 156 * scale, 115 * scale, 155 * scale, 107 * scale);
        ctx.bezierCurveTo(155 * scale, 96 * scale, 154 * scale, 94 * scale, 148 * scale, 94 * scale);
        ctx.bezierCurveTo(141 * scale, 94 * scale, 146 * scale, 104 * scale, 136 * scale, 104 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 4 * scale);
        return can;
    };

    function create_garland_inv(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 70 * scale;
        can.height = 70 * scale;
        ctx.globalAlpha = 0.5;
        circle(ctx, 26 * scale, 26 * scale, 9 * scale);
        fill_path(ctx, color[0]);
        circle(ctx, 56 * scale, 36 * scale, 9 * scale);
        fill_path(ctx, color[1]);
        circle(ctx, 40 * scale, 50 * scale, 9 * scale);
        fill_path(ctx, color[2]);
        ctx.globalAlpha = 1;
        circle(ctx, 26 * scale, 26 * scale, 5 * scale);
        fill_path(ctx, color[0]);
        circle(ctx, 56 * scale, 36 * scale, 5 * scale);
        fill_path(ctx, color[1]);
        circle(ctx, 40 * scale, 50 * scale, 5 * scale);
        fill_path(ctx, color[2]);
        return can;
    };

    function create_garland(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 22 * scale;
        can.height = 22 * scale;
        ctx.globalAlpha = 0.4;
        circle(ctx, 11 * scale, 11 * scale, 10 * scale);
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 0.7;
        circle(ctx, 11 * scale, 11 * scale, 7 * scale);
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        circle(ctx, 11 * scale, 11 * scale, 4 * scale);
        fill_path(ctx, color[0]);
        return can;
    };

    function create_garland_light(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 20 * scale;
        can.height = 20 * scale;
        ctx.globalAlpha = 0.5;
        circle(ctx, 10 * scale, 10 * scale, 9 * scale);
        fill_path(ctx, color[0]);
        return can;
    };

    function create_roof(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 248 * scale;
        can.height = 247 * scale;
        ctx.save();
        ctx.translate(69.5 * scale, 145 * scale);
        round_rect(ctx, -8.5 * scale, -63 * scale, 17 * scale, 127 * scale, 1 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.save();
        ctx.translate(183 * scale, 145 * scale);
        round_rect(ctx, -8 * scale, -63 * scale, 16 * scale, 126 * scale, 1 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.save();
        ctx.translate(123.5 * scale, 62.5 * scale);
        ctx.rotate(6.28);
        round_rect(ctx, -84.5 * scale, -25.5 * scale, 169 * scale, 51 * scale, 5 * scale);
        ctx.restore();
        fill_path(ctx, color[2], color[1], 6 * scale);
        ctx.save();
        ctx.translate(123.5 * scale, 118 * scale);
        ctx.rotate(6.24);
        round_rect(ctx, -85.5 * scale, -24 * scale, 169 * scale, 48 * scale, 5 * scale);
        ctx.restore();
        fill_path(ctx, color[3], color[1], 6 * scale);
        ctx.save();
        ctx.translate(122 * scale, 177.5 * scale);
        ctx.rotate(6.32);
        round_rect(ctx, -84 * scale, -23.5 * scale, 169 * scale, 47 * scale, 5 * scale);
        ctx.restore();
        fill_path(ctx, color[2], color[1], 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(37 * scale, 157 * scale);
        ctx.bezierCurveTo(49 * scale, 160 * scale, 49 * scale, 160 * scale, 61 * scale, 163 * scale);
        ctx.bezierCurveTo(49.5 * scale, 165.5 * scale, 49.5 * scale, 165.5 * scale, 38 * scale, 168 * scale);
        ctx.closePath();
        fill_path(ctx, color[1]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(205 * scale, 175 * scale);
        ctx.bezierCurveTo(192.5 * scale, 180 * scale, 192.5 * scale, 180 * scale, 180 * scale, 185 * scale);
        ctx.bezierCurveTo(193 * scale, 188 * scale, 193 * scale, 188 * scale, 206 * scale, 191 * scale);
        ctx.closePath();
        fill_path(ctx, color[1]);
        return can;
    };

    function create_roof1(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 248 * scale;
        can.height = 247 * scale;
        ctx.save();
        ctx.translate(182 * scale, 120 * scale);
        round_rect(ctx, -8 * scale, -67 * scale, 16 * scale, 134 * scale, 1 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.save();
        ctx.translate(68.5 * scale, 127.5 * scale);
        round_rect(ctx, -8.5 * scale, -70.5 * scale, 17 * scale, 141 * scale, 1 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.save();
        ctx.translate(123.5 * scale, 68 * scale);
        round_rect(ctx, -82.5 * scale, -24 * scale, 165 * scale, 48 * scale, 4 * scale);
        ctx.restore();
        fill_path(ctx, color[2], color[1], 6 * scale);
        ctx.save();
        ctx.translate(123 * scale, 179.5 * scale);
        round_rect(ctx, -83 * scale, -24.5 * scale, 166 * scale, 49 * scale, 4 * scale);
        ctx.restore();
        fill_path(ctx, color[2], color[1], 6 * scale);
        ctx.save();
        ctx.translate(123.5 * scale, 123.5 * scale);
        ctx.rotate(6.24);
        round_rect(ctx, -82.5 * scale, -24.5 * scale, 165 * scale, 49 * scale, 4 * scale);
        ctx.restore();
        fill_path(ctx, color[3], color[1], 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(204 * scale, 112 * scale);
        ctx.bezierCurveTo(149 * scale, 121.5 * scale, 96 * scale, 130 * scale, 94 * scale, 131 * scale);
        ctx.bezierCurveTo(149.5 * scale, 127.5 * scale, 149.5 * scale, 127.5 * scale, 205 * scale, 124 * scale);
        ctx.closePath();
        fill_path(ctx, color[1]);
        return can;
    };

    function create_roof2(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 248 * scale;
        can.height = 247 * scale;
        ctx.save();
        ctx.translate(183 * scale, 107 * scale);
        round_rect(ctx, -8 * scale, -70.5 * scale, 16 * scale, 141 * scale, 1 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.save();
        ctx.translate(69.5 * scale, 110 * scale);
        round_rect(ctx, -8.5 * scale, -71 * scale, 17 * scale, 143 * scale, 1 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.save();
        ctx.translate(123.5 * scale, 181 * scale);
        round_rect(ctx, -84.5 * scale, -26 * scale, 169 * scale, 52 * scale, 5 * scale);
        ctx.restore();
        fill_path(ctx, color[2], color[1], 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(41 * scale, 95 * scale);
        ctx.bezierCurveTo(105 * scale, 96 * scale, 113 * scale, 99 * scale, 134 * scale, 102 * scale);
        ctx.bezierCurveTo(147 * scale, 106 * scale, 173 * scale, 100 * scale, 207 * scale, 105 * scale);
        ctx.bezierCurveTo(210 * scale, 105 * scale, 207 * scale, 140 * scale, 207 * scale, 154 * scale);
        ctx.bezierCurveTo(123.5 * scale, 151.5 * scale, 123.5 * scale, 151.5 * scale, 40 * scale, 149 * scale);
        ctx.bezierCurveTo(37 * scale, 145 * scale, 39 * scale, 95 * scale, 41 * scale, 96 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[1], 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(68 * scale, 75 * scale);
        ctx.bezierCurveTo(54 * scale, 72.5 * scale, 54 * scale, 72.5 * scale, 40 * scale, 70 * scale);
        ctx.bezierCurveTo(38 * scale, 46 * scale, 40 * scale, 46 * scale, 53 * scale, 46 * scale);
        ctx.bezierCurveTo(201 * scale, 41 * scale, 201 * scale, 41 * scale, 201 * scale, 42 * scale);
        ctx.bezierCurveTo(211 * scale, 40 * scale, 208 * scale, 53 * scale, 208 * scale, 72 * scale);
        ctx.bezierCurveTo(209 * scale, 91 * scale, 210 * scale, 96 * scale, 194 * scale, 94 * scale);
        ctx.bezierCurveTo(119 * scale, 97 * scale, 119 * scale, 97 * scale, 44 * scale, 100 * scale);
        ctx.bezierCurveTo(39 * scale, 99 * scale, 40 * scale, 96 * scale, 40 * scale, 80 * scale);
        ctx.bezierCurveTo(54 * scale, 77.5 * scale, 54 * scale, 77.5 * scale, 68 * scale, 75 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[1], 6 * scale);
        return can;
    };

    function create_zombie_head(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 191 * scale;
        can.height = 153 * scale;
        ctx.globalAlpha = 0.5;
        ctx.translate(0, 10 * scale);
        ctx.save();
        ctx.translate(97.49996948242188 * scale, 95.12844848632812 * scale);
        round_rect(ctx, -62.5 * scale, -41.5 * scale, 125 * scale, 83 * scale, 20 * scale);
        ctx.restore();
        fill_path(ctx, color[0], color[0], 4 * scale);
        ctx.globalAlpha = 1;
        ctx.translate(0, -10 * scale);
        ctx.save();
        ctx.translate(97.49996948242188 * scale, 95.12844848632812 * scale);
        round_rect(ctx, -62.5 * scale, -41.5 * scale, 125 * scale, 83 * scale, 20 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 4 * scale);
        ctx.globalCompositeOperation = "destination-out";
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(26.999969482421875 * scale, 50.850677490234375 * scale);
        ctx.bezierCurveTo(46.499969482421875 * scale, 64.85067749023438 * scale, 46.499969482421875 * scale, 64.85067749023438 * scale, 65.99996948242188 * scale, 78.85067749023438 * scale);
        ctx.bezierCurveTo(80.99996948242188 * scale, 87.85067749023438 * scale, 105.99996948242188 * scale, 82.85067749023438 * scale, 114.99996948242188 * scale, 80.85067749023438 * scale);
        ctx.bezierCurveTo(130.99996948242188 * scale, 69.85067749023438 * scale, 152.99996948242188 * scale, 70.85067749023438 * scale, 166.99996948242188 * scale, 67.85067749023438 * scale);
        ctx.bezierCurveTo(156.99996948242188 * scale, 52.850677490234375 * scale, 156.99996948242188 * scale, 52.850677490234375 * scale, 146.99996948242188 * scale, 37.850677490234375 * scale);
        ctx.bezierCurveTo(101.49996948242188 * scale, 37.350677490234375 * scale, 101.49996948242188 * scale, 37.350677490234375 * scale, 55.999969482421875 * scale, 36.850677490234375 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[3], 4 * scale);
        ctx.globalCompositeOperation = "source-over";
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(40.999969482421875 * scale, 59.850677490234375 * scale);
        ctx.bezierCurveTo(41.999969482421875 * scale, 50.850677490234375 * scale, 47.999969482421875 * scale, 47.850677490234375 * scale, 56.999969482421875 * scale, 49.850677490234375 * scale);
        ctx.bezierCurveTo(65.99996948242188 * scale, 41.850677490234375 * scale, 76.99996948242188 * scale, 42.850677490234375 * scale, 90.99996948242188 * scale, 47.850677490234375 * scale);
        ctx.bezierCurveTo(94.99996948242188 * scale, 42.850677490234375 * scale, 104.99996948242188 * scale, 42.850677490234375 * scale, 114.99996948242188 * scale, 47.850677490234375 * scale);
        ctx.bezierCurveTo(131.99996948242188 * scale, 42.850677490234375 * scale, 142.99996948242188 * scale, 48.850677490234375 * scale, 145.99996948242188 * scale, 56.850677490234375 * scale);
        ctx.bezierCurveTo(160.99996948242188 * scale, 63.850677490234375 * scale, 154.99996948242188 * scale, 69.85067749023438 * scale, 155.99996948242188 * scale, 70.85067749023438 * scale);
        ctx.bezierCurveTo(141.99996948242188 * scale, 71.85067749023438 * scale, 141.99996948242188 * scale, 71.85067749023438 * scale, 127.99996948242188 * scale, 72.85067749023438 * scale);
        ctx.bezierCurveTo(110.99996948242188 * scale, 83.85067749023438 * scale, 107.99996948242188 * scale, 82.85067749023438 * scale, 90.99996948242188 * scale, 85.85067749023438 * scale);
        ctx.bezierCurveTo(70.99996948242188 * scale, 83.85067749023438 * scale, 64.99996948242188 * scale, 79.85067749023438 * scale, 53.999969482421875 * scale, 70.85067749023438 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(33.999969482421875 * scale, 65.85067749023438 * scale);
        ctx.bezierCurveTo(36.999969482421875 * scale, 59.850677490234375 * scale, 34.999969482421875 * scale, 60.850677490234375 * scale, 39.999969482421875 * scale, 59.850677490234375 * scale);
        ctx.bezierCurveTo(47.999969482421875 * scale, 61.850677490234375 * scale, 62.999969482421875 * scale, 76.85067749023438 * scale, 74.99996948242188 * scale, 79.85067749023438 * scale);
        ctx.bezierCurveTo(93.99996948242188 * scale, 85.85067749023438 * scale, 111.99996948242188 * scale, 83.85067749023438 * scale, 124.99996948242188 * scale, 70.85067749023438 * scale);
        ctx.bezierCurveTo(129.99996948242188 * scale, 67.85067749023438 * scale, 145.99996948242188 * scale, 65.85067749023438 * scale, 159.99996948242188 * scale, 67.85067749023438 * scale);
        ctx.bezierCurveTo(159.99996948242188 * scale, 71.85067749023438 * scale, 159.99996948242188 * scale, 71.85067749023438 * scale, 159.99996948242188 * scale, 75.85067749023438 * scale);
        ctx.bezierCurveTo(146.99996948242188 * scale, 72.85067749023438 * scale, 144.99996948242188 * scale, 75.85067749023438 * scale, 143.99996948242188 * scale, 82.85067749023438 * scale);
        ctx.bezierCurveTo(144.99996948242188 * scale, 86.85067749023438 * scale, 140.99996948242188 * scale, 90.85067749023438 * scale, 137.99996948242188 * scale, 86.85067749023438 * scale);
        ctx.bezierCurveTo(139.99996948242188 * scale, 72.85067749023438 * scale, 135.99996948242188 * scale, 72.85067749023438 * scale, 133.99996948242188 * scale, 82.85067749023438 * scale);
        ctx.bezierCurveTo(127.99996948242188 * scale, 88.85067749023438 * scale, 124.99996948242188 * scale, 70.85067749023438 * scale, 116.99996948242188 * scale, 86.85067749023438 * scale);
        ctx.bezierCurveTo(110.99996948242188 * scale, 91.85067749023438 * scale, 96.99996948242188 * scale, 81.85067749023438 * scale, 89.99996948242188 * scale, 90.85067749023438 * scale);
        ctx.bezierCurveTo(85.99996948242188 * scale, 92.85067749023438 * scale, 81.99996948242188 * scale, 95.85067749023438 * scale, 76.99996948242188 * scale, 86.85067749023438 * scale);
        ctx.bezierCurveTo(67.99996948242188 * scale, 93.85067749023438 * scale, 67.99996948242188 * scale, 91.85067749023438 * scale, 60.999969482421875 * scale, 79.85067749023438 * scale);
        ctx.bezierCurveTo(53.999969482421875 * scale, 71.85067749023438 * scale, 52.999969482421875 * scale, 72.85067749023438 * scale, 46.999969482421875 * scale, 77.85067749023438 * scale);
        ctx.bezierCurveTo(41.999969482421875 * scale, 78.85067749023438 * scale, 42.999969482421875 * scale, 69.85067749023438 * scale, 33.999969482421875 * scale, 65.85067749023438 * scale);
        ctx.closePath();
        fill_path(ctx, color[5], color[6], 4 * scale);
        circle(ctx, 68 * scale, 111.29513549804688 * scale, 15 * scale);
        fill_path(ctx, color[7], color[8], 4 * scale);
        circle(ctx, 123 * scale, 111.29510498046875 * scale, 15 * scale);
        fill_path(ctx, color[7], color[8], 4 * scale);
        circle(ctx, 63 * scale, 106 * scale, 5 * scale);
        fill_path(ctx, color[9]);
        circle(ctx, 118 * scale, 106 * scale, 5 * scale);
        fill_path(ctx, color[9]);
        return can;
    };

    function create_zombie_boss(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 191 * scale;
        can.height = 153 * scale;
        ctx.globalAlpha = 0.5;
        ctx.translate(0, 10 * scale);
        ctx.save();
        ctx.translate(96.49996948242188 * scale, 66.79510498046875 * scale);
        ctx.rotate(0);
        round_rect(ctx, -79.5 * scale, -48.5 * scale, 159 * scale, 97 * scale, 22 * scale);
        ctx.restore();
        fill_path(ctx, color[0], color[0], 4 * scale);
        ctx.globalAlpha = 1;
        ctx.translate(0, -10 * scale);
        ctx.save();
        ctx.translate(96.49996948242188 * scale, 66.79510498046875 * scale);
        ctx.rotate(0);
        round_rect(ctx, -79.5 * scale, -48.5 * scale, 159 * scale, 97 * scale, 22 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 4 * scale);
        ctx.translate(2 * scale, 0);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(119 * scale, 28 * scale);
        ctx.bezierCurveTo(119 * scale, 22 * scale, 119 * scale, 20 * scale, 122 * scale, 16 * scale);
        ctx.bezierCurveTo(149 * scale, 39 * scale, 149 * scale, 39 * scale, 176 * scale, 63 * scale);
        ctx.bezierCurveTo(176 * scale, 75 * scale, 176 * scale, 75 * scale, 175 * scale, 88 * scale);
        ctx.bezierCurveTo(174 * scale, 90 * scale, 174 * scale, 90 * scale, 172 * scale, 93 * scale);
        ctx.bezierCurveTo(171 * scale, 101 * scale, 169 * scale, 109 * scale, 164 * scale, 113 * scale);
        ctx.bezierCurveTo(163 * scale, 104 * scale, 163 * scale, 104 * scale, 162 * scale, 95 * scale);
        ctx.bezierCurveTo(155 * scale, 105 * scale, 155 * scale, 105 * scale, 147 * scale, 116 * scale);
        ctx.bezierCurveTo(87 * scale, 114 * scale, 87 * scale, 114 * scale, 26 * scale, 112 * scale);
        ctx.bezierCurveTo(27 * scale, 106 * scale, 27 * scale, 106 * scale, 27 * scale, 101 * scale);
        ctx.bezierCurveTo(24 * scale, 104 * scale, 24 * scale, 104 * scale, 20 * scale, 108 * scale);
        ctx.bezierCurveTo(17 * scale, 103 * scale, 20 * scale, 86 * scale, 23 * scale, 72 * scale);
        ctx.bezierCurveTo(15 * scale, 74 * scale, 14 * scale, 78 * scale, 12 * scale, 83 * scale);
        ctx.bezierCurveTo(12 * scale, 65 * scale, 12 * scale, 54 * scale, 16 * scale, 42 * scale);
        ctx.bezierCurveTo(14 * scale, 39 * scale, 14 * scale, 39 * scale, 12 * scale, 36 * scale);
        ctx.bezierCurveTo(16 * scale, 33 * scale, 16 * scale, 33 * scale, 19 * scale, 30 * scale);
        ctx.bezierCurveTo(18 * scale, 27 * scale, 18 * scale, 27 * scale, 17 * scale, 25 * scale);
        ctx.bezierCurveTo(24 * scale, 24 * scale, 31 * scale, 21 * scale, 29 * scale, 19 * scale);
        ctx.bezierCurveTo(37 * scale, 25 * scale, 37 * scale, 25 * scale, 45 * scale, 31 * scale);
        ctx.bezierCurveTo(40 * scale, 23 * scale, 40 * scale, 21 * scale, 42 * scale, 16 * scale);
        ctx.bezierCurveTo(74 * scale, 16 * scale, 74 * scale, 16 * scale, 106 * scale, 16 * scale);
        ctx.bezierCurveTo(113 * scale, 21 * scale, 113 * scale, 21 * scale, 119 * scale, 26 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 4 * scale);
        return can;
    };

    function create_zombie_hurt(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 191 * scale;
        can.height = 153 * scale;
        ctx.save();
        ctx.translate(96.49996948242188 * scale, 66.79510498046875 * scale);
        round_rect(ctx, -79.5 * scale, -48.5 * scale, 159 * scale, 97 * scale, 22 * scale);
        ctx.restore();
        fill_path(ctx, color[0], color[0], 4 * scale);
        ctx.translate(2 * scale, 0);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(119 * scale, 28 * scale);
        ctx.bezierCurveTo(119 * scale, 22 * scale, 119 * scale, 20 * scale, 122 * scale, 16 * scale);
        ctx.bezierCurveTo(149 * scale, 39 * scale, 149 * scale, 39 * scale, 176 * scale, 63 * scale);
        ctx.bezierCurveTo(176 * scale, 75 * scale, 176 * scale, 75 * scale, 175 * scale, 88 * scale);
        ctx.bezierCurveTo(174 * scale, 90 * scale, 174 * scale, 90 * scale, 172 * scale, 93 * scale);
        ctx.bezierCurveTo(171 * scale, 101 * scale, 169 * scale, 109 * scale, 164 * scale, 113 * scale);
        ctx.bezierCurveTo(163 * scale, 104 * scale, 163 * scale, 104 * scale, 162 * scale, 95 * scale);
        ctx.bezierCurveTo(155 * scale, 105 * scale, 155 * scale, 105 * scale, 147 * scale, 116 * scale);
        ctx.bezierCurveTo(87 * scale, 114 * scale, 87 * scale, 114 * scale, 26 * scale, 112 * scale);
        ctx.bezierCurveTo(27 * scale, 106 * scale, 27 * scale, 106 * scale, 27 * scale, 101 * scale);
        ctx.bezierCurveTo(24 * scale, 104 * scale, 24 * scale, 104 * scale, 20 * scale, 108 * scale);
        ctx.bezierCurveTo(17 * scale, 103 * scale, 20 * scale, 86 * scale, 23 * scale, 72 * scale);
        ctx.bezierCurveTo(15 * scale, 74 * scale, 14 * scale, 78 * scale, 12 * scale, 83 * scale);
        ctx.bezierCurveTo(12 * scale, 65 * scale, 12 * scale, 54 * scale, 16 * scale, 42 * scale);
        ctx.bezierCurveTo(14 * scale, 39 * scale, 14 * scale, 39 * scale, 12 * scale, 36 * scale);
        ctx.bezierCurveTo(16 * scale, 33 * scale, 16 * scale, 33 * scale, 19 * scale, 30 * scale);
        ctx.bezierCurveTo(18 * scale, 27 * scale, 18 * scale, 27 * scale, 17 * scale, 25 * scale);
        ctx.bezierCurveTo(24 * scale, 24 * scale, 31 * scale, 21 * scale, 29 * scale, 19 * scale);
        ctx.bezierCurveTo(37 * scale, 25 * scale, 37 * scale, 25 * scale, 45 * scale, 31 * scale);
        ctx.bezierCurveTo(40 * scale, 23 * scale, 40 * scale, 21 * scale, 42 * scale, 16 * scale);
        ctx.bezierCurveTo(74 * scale, 16 * scale, 74 * scale, 16 * scale, 106 * scale, 16 * scale);
        ctx.bezierCurveTo(113 * scale, 21 * scale, 113 * scale, 21 * scale, 119 * scale, 26 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 4 * scale);
        ctx.save();
        ctx.translate(97.49996948242188 * scale, 95.12844848632812 * scale);
        round_rect(ctx, -62.5 * scale, -41.5 * scale, 125 * scale, 83 * scale, 20 * scale);
        ctx.restore();
        fill_path(ctx, color[0], color[0], 4 * scale);
        return can;
    };

    function create_plant_seed(scale, useless, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        var w = scale * 40;
        var h = scale * 40;
        can.width = w;
        can.height = h;
        var x = (scale * w) / 2;
        var y = (scale * h) / 2;
        var r = scale * 15;
        ctx.save();
        ctx.translate(x, y);
        ctx.globalAlpha = 1;
        circle(ctx, 0, 0, r);
        fill_path(ctx, color[0]);
        var r = 5 * scale;
        var x = 2 * scale;
        var y = 1 * scale;
        ctx.translate(x, y);
        ctx.globalAlpha = 1;
        circle(ctx, 0, 0, r);
        fill_path(ctx, color[1]);
        ctx.restore();
        return can;
    };

    function create_fish1(scale, useless, color, i) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 185 * scale;
        can.height = 240 * scale;
        ctx.globalAlpha = 0.5;
        ctx.translate(0, 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(44 * scale, 137 * scale);
        ctx.bezierCurveTo(60 * scale, 87 * scale, 68 * scale, 66 * scale, 92 * scale, 67 * scale);
        ctx.bezierCurveTo(115 * scale, 64 * scale, 129 * scale, 97 * scale, 137 * scale, 136 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(53 * scale, 181 * scale);
        ctx.bezierCurveTo(30 * scale, 164 * scale, 19 * scale, 150 * scale, 11 * scale, 136 * scale);
        ctx.bezierCurveTo(28 * scale, 121 * scale, 38 * scale, 132 * scale, 48 * scale, 150 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(63 * scale, 208 * scale);
        ctx.bezierCurveTo(75 * scale, 224 * scale, 86 * scale, 228 * scale, 93 * scale, 228 * scale);
        ctx.bezierCurveTo(104 * scale, 229 * scale, 116 * scale, 219 * scale, 122 * scale, 205 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(130 * scale, 170 * scale);
        ctx.bezierCurveTo(146 * scale, 125 * scale, 156 * scale, 126 * scale, 173 * scale, 137 * scale);
        ctx.bezierCurveTo(167 * scale, 151 * scale, 143 * scale, 174 * scale, 131 * scale, 183 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(39 * scale, 140 * scale);
        ctx.bezierCurveTo(75 * scale, 126 * scale, 113 * scale, 127 * scale, 143 * scale, 137 * scale);
        ctx.bezierCurveTo(141 * scale, 186 * scale, 130 * scale, 202 * scale, 113 * scale, 214 * scale);
        ctx.bezierCurveTo(85 * scale, 228 * scale, 56 * scale, 219 * scale, 48 * scale, 173 * scale);
        ctx.bezierCurveTo(40 * scale, 148 * scale, 43 * scale, 145 * scale, 39 * scale, 140 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(0, -10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(44 * scale, 137 * scale);
        ctx.bezierCurveTo(60 * scale, 87 * scale, 68 * scale, 66 * scale, 92 * scale, 67 * scale);
        ctx.bezierCurveTo(115 * scale, 64 * scale, 129 * scale, 97 * scale, 137 * scale, 136 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(53 * scale, 181 * scale);
        ctx.bezierCurveTo(30 * scale, 164 * scale, 19 * scale, 150 * scale, 11 * scale, 136 * scale);
        ctx.bezierCurveTo(28 * scale, 121 * scale, 38 * scale, 132 * scale, 48 * scale, 150 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(63 * scale, 208 * scale);
        ctx.bezierCurveTo(75 * scale, 224 * scale, 86 * scale, 228 * scale, 93 * scale, 228 * scale);
        ctx.bezierCurveTo(104 * scale, 229 * scale, 116 * scale, 219 * scale, 122 * scale, 205 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(130 * scale, 170 * scale);
        ctx.bezierCurveTo(146 * scale, 125 * scale, 156 * scale, 126 * scale, 173 * scale, 137 * scale);
        ctx.bezierCurveTo(167 * scale, 151 * scale, 143 * scale, 174 * scale, 131 * scale, 183 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(39 * scale, 140 * scale);
        ctx.bezierCurveTo(75 * scale, 126 * scale, 113 * scale, 127 * scale, 143 * scale, 137 * scale);
        ctx.bezierCurveTo(141 * scale, 186 * scale, 130 * scale, 202 * scale, 113 * scale, 214 * scale);
        ctx.bezierCurveTo(85 * scale, 228 * scale, 56 * scale, 219 * scale, 48 * scale, 173 * scale);
        ctx.bezierCurveTo(40 * scale, 148 * scale, 43 * scale, 145 * scale, 39 * scale, 140 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(59 * scale, 99 * scale);
        ctx.bezierCurveTo(71 * scale, 68 * scale, 81 * scale, 68 * scale, 94 * scale, 67 * scale);
        ctx.bezierCurveTo(105 * scale, 66 * scale, 119 * scale, 75 * scale, 123 * scale, 96 * scale);
        ctx.bezierCurveTo(104 * scale, 91 * scale, 101 * scale, 94 * scale, 94 * scale, 97 * scale);
        ctx.bezierCurveTo(76 * scale, 92 * scale, 73 * scale, 93 * scale, 60 * scale, 99 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[2], 4 * scale);
        if (i === 0) {
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(47 * scale, 149 * scale);
            ctx.bezierCurveTo(43 * scale, 140 * scale, 48 * scale, 130 * scale, 59 * scale, 127 * scale);
            ctx.bezierCurveTo(77 * scale, 126 * scale, 90 * scale, 131 * scale, 131 * scale, 127 * scale);
            ctx.bezierCurveTo(143 * scale, 130 * scale, 144 * scale, 143 * scale, 132 * scale, 154 * scale);
            ctx.bezierCurveTo(90 * scale, 152 * scale, 90 * scale, 152 * scale, 48 * scale, 150 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(40 * scale, 139 * scale);
            ctx.bezierCurveTo(48 * scale, 113 * scale, 76 * scale, 119 * scale, 91 * scale, 126 * scale);
            ctx.bezierCurveTo(117 * scale, 113 * scale, 135 * scale, 117 * scale, 144 * scale, 134 * scale);
            ctx.bezierCurveTo(144 * scale, 138 * scale, 144 * scale, 138 * scale, 144 * scale, 142 * scale);
            ctx.bezierCurveTo(128 * scale, 124 * scale, 108 * scale, 124 * scale, 91 * scale, 136 * scale);
            ctx.bezierCurveTo(59 * scale, 124 * scale, 50 * scale, 137 * scale, 42 * scale, 148 * scale);
            ctx.closePath();
            fill_path(ctx, color[3], color[2], 4 * scale);
        } else {
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(41 * scale, 139 * scale);
            ctx.bezierCurveTo(53 * scale, 117 * scale, 69 * scale, 118 * scale, 92 * scale, 127 * scale);
            ctx.bezierCurveTo(124 * scale, 111 * scale, 136 * scale, 121 * scale, 143 * scale, 136 * scale);
            ctx.bezierCurveTo(142 * scale, 144 * scale, 142 * scale, 144 * scale, 141 * scale, 152 * scale);
            ctx.bezierCurveTo(128 * scale, 131 * scale, 113 * scale, 138 * scale, 92 * scale, 145 * scale);
            ctx.bezierCurveTo(57 * scale, 133 * scale, 57 * scale, 147 * scale, 44 * scale, 154 * scale);
            ctx.closePath();
            fill_path(ctx, color[3], color[2], 4 * scale);
        }
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(90 * scale, 95 * scale);
        ctx.bezierCurveTo(99 * scale, 82 * scale, 98 * scale, 58 * scale, 99 * scale, 40 * scale);
        ctx.bezierCurveTo(90 * scale, 38 * scale, 89 * scale, 34 * scale, 92 * scale, 17 * scale);
        ctx.bezierCurveTo(92 * scale, 5 * scale, 83 * scale, 16 * scale, 78 * scale, 29 * scale);
        ctx.bezierCurveTo(72 * scale, 59 * scale, 87 * scale, 81 * scale, 89 * scale, 87 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(90 * scale, 86 * scale);
        ctx.bezierCurveTo(95 * scale, 74 * scale, 95 * scale, 62 * scale, 95 * scale, 43 * scale);
        ctx.bezierCurveTo(84 * scale, 37 * scale, 86 * scale, 34 * scale, 89 * scale, 16 * scale);
        ctx.bezierCurveTo(75 * scale, 29 * scale, 80 * scale, 58 * scale, 90 * scale, 85 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[3], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(92 * scale, 117 * scale);
        ctx.bezierCurveTo(98 * scale, 87 * scale, 93 * scale, 78 * scale, 85 * scale, 76 * scale);
        ctx.bezierCurveTo(85.5 * scale, 79.5 * scale, 85.5 * scale, 79.5 * scale, 86 * scale, 83 * scale);
        ctx.bezierCurveTo(84 * scale, 85.5 * scale, 84 * scale, 85.5 * scale, 82 * scale, 88 * scale);
        ctx.bezierCurveTo(90 * scale, 93 * scale, 89 * scale, 100 * scale, 92 * scale, 117 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[3], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(92 * scale, 175 * scale);
        ctx.bezierCurveTo(95 * scale, 135 * scale, 98 * scale, 125 * scale, 109 * scale, 121 * scale);
        ctx.bezierCurveTo(106 * scale, 114 * scale, 104 * scale, 114 * scale, 102 * scale, 113 * scale);
        ctx.bezierCurveTo(103 * scale, 106 * scale, 104 * scale, 103 * scale, 107 * scale, 96 * scale);
        ctx.bezierCurveTo(74 * scale, 108 * scale, 86 * scale, 157 * scale, 92 * scale, 174 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[3], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(48 * scale, 169 * scale);
        ctx.bezierCurveTo(42 * scale, 187 * scale, 50 * scale, 193 * scale, 59 * scale, 198 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[2], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(136 * scale, 171 * scale);
        ctx.bezierCurveTo(139 * scale, 186 * scale, 138 * scale, 191 * scale, 124 * scale, 199 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[2], 4 * scale);
        circle(ctx, 63 * scale, 180 * scale, 15.231546211727817 * scale);
        fill_path(ctx, color[4]);
        circle(ctx, 121 * scale, 181 * scale, 15.652475842498529 * scale);
        fill_path(ctx, color[4]);
        circle(ctx, 58 * scale, 175 * scale, 5.656854249492381 * scale);
        fill_path(ctx, color[2]);
        circle(ctx, 116 * scale, 175 * scale, 5.656854249492381 * scale);
        fill_path(ctx, color[2]);
        return can;
    };

    function create_hurt_fish1(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 185 * scale;
        can.height = 240 * scale;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(44 * scale, 137 * scale);
        ctx.bezierCurveTo(60 * scale, 87 * scale, 68 * scale, 66 * scale, 92 * scale, 67 * scale);
        ctx.bezierCurveTo(115 * scale, 64 * scale, 129 * scale, 97 * scale, 137 * scale, 136 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(53 * scale, 181 * scale);
        ctx.bezierCurveTo(30 * scale, 164 * scale, 19 * scale, 150 * scale, 11 * scale, 136 * scale);
        ctx.bezierCurveTo(28 * scale, 121 * scale, 38 * scale, 132 * scale, 48 * scale, 150 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(63 * scale, 208 * scale);
        ctx.bezierCurveTo(75 * scale, 224 * scale, 86 * scale, 228 * scale, 93 * scale, 228 * scale);
        ctx.bezierCurveTo(104 * scale, 229 * scale, 116 * scale, 219 * scale, 122 * scale, 205 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(130 * scale, 170 * scale);
        ctx.bezierCurveTo(146 * scale, 125 * scale, 156 * scale, 126 * scale, 173 * scale, 137 * scale);
        ctx.bezierCurveTo(167 * scale, 151 * scale, 143 * scale, 174 * scale, 131 * scale, 183 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(39 * scale, 140 * scale);
        ctx.bezierCurveTo(75 * scale, 126 * scale, 113 * scale, 127 * scale, 143 * scale, 137 * scale);
        ctx.bezierCurveTo(141 * scale, 186 * scale, 130 * scale, 202 * scale, 113 * scale, 214 * scale);
        ctx.bezierCurveTo(85 * scale, 228 * scale, 56 * scale, 219 * scale, 48 * scale, 173 * scale);
        ctx.bezierCurveTo(40 * scale, 148 * scale, 43 * scale, 145 * scale, 39 * scale, 140 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(90 * scale, 95 * scale);
        ctx.bezierCurveTo(99 * scale, 82 * scale, 98 * scale, 58 * scale, 99 * scale, 40 * scale);
        ctx.bezierCurveTo(90 * scale, 38 * scale, 89 * scale, 34 * scale, 92 * scale, 17 * scale);
        ctx.bezierCurveTo(92 * scale, 5 * scale, 83 * scale, 16 * scale, 78 * scale, 29 * scale);
        ctx.bezierCurveTo(72 * scale, 59 * scale, 87 * scale, 81 * scale, 89 * scale, 87 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(90 * scale, 86 * scale);
        ctx.bezierCurveTo(95 * scale, 74 * scale, 95 * scale, 62 * scale, 95 * scale, 43 * scale);
        ctx.bezierCurveTo(84 * scale, 37 * scale, 86 * scale, 34 * scale, 89 * scale, 16 * scale);
        ctx.bezierCurveTo(75 * scale, 29 * scale, 80 * scale, 58 * scale, 90 * scale, 85 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(92 * scale, 117 * scale);
        ctx.bezierCurveTo(98 * scale, 87 * scale, 93 * scale, 78 * scale, 85 * scale, 76 * scale);
        ctx.bezierCurveTo(85.5 * scale, 79.5 * scale, 85.5 * scale, 79.5 * scale, 86 * scale, 83 * scale);
        ctx.bezierCurveTo(84 * scale, 85.5 * scale, 84 * scale, 85.5 * scale, 82 * scale, 88 * scale);
        ctx.bezierCurveTo(90 * scale, 93 * scale, 89 * scale, 100 * scale, 92 * scale, 117 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(92 * scale, 175 * scale);
        ctx.bezierCurveTo(95 * scale, 135 * scale, 98 * scale, 125 * scale, 109 * scale, 121 * scale);
        ctx.bezierCurveTo(106 * scale, 114 * scale, 104 * scale, 114 * scale, 102 * scale, 113 * scale);
        ctx.bezierCurveTo(103 * scale, 106 * scale, 104 * scale, 103 * scale, 107 * scale, 96 * scale);
        ctx.bezierCurveTo(74 * scale, 108 * scale, 86 * scale, 157 * scale, 92 * scale, 174 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        return can;
    };

    function create_fish2(scale, useless, color, i) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 185 * scale;
        can.height = 240 * scale;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(58 * scale, 205 * scale);
        ctx.bezierCurveTo(74 * scale, 227 * scale, 83 * scale, 230 * scale, 92 * scale, 230 * scale);
        ctx.bezierCurveTo(101 * scale, 232 * scale, 119 * scale, 219 * scale, 122 * scale, 205 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(46 * scale, 151 * scale);
        ctx.bezierCurveTo(34 * scale, 126 * scale, 21 * scale, 130 * scale, 10 * scale, 139 * scale);
        ctx.bezierCurveTo(27 * scale, 168 * scale, 48 * scale, 180 * scale, 53 * scale, 184 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(122 * scale, 165 * scale);
        ctx.bezierCurveTo(143 * scale, 140 * scale, 154 * scale, 123 * scale, 172 * scale, 139 * scale);
        ctx.bezierCurveTo(169 * scale, 149 * scale, 147 * scale, 173 * scale, 126 * scale, 192 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(47 * scale, 129 * scale);
        ctx.bezierCurveTo(55 * scale, 90 * scale, 71 * scale, 66 * scale, 93 * scale, 69 * scale);
        ctx.bezierCurveTo(116 * scale, 70 * scale, 122 * scale, 88 * scale, 136 * scale, 127 * scale);
        ctx.bezierCurveTo(143 * scale, 137 * scale, 144 * scale, 137 * scale, 144 * scale, 142 * scale);
        ctx.bezierCurveTo(138 * scale, 199 * scale, 128 * scale, 206 * scale, 108 * scale, 219 * scale);
        ctx.bezierCurveTo(84 * scale, 228 * scale, 65 * scale, 224 * scale, 50 * scale, 191 * scale);
        ctx.bezierCurveTo(41 * scale, 161 * scale, 41 * scale, 157 * scale, 39 * scale, 144 * scale);
        ctx.bezierCurveTo(40 * scale, 140 * scale, 42 * scale, 137 * scale, 47 * scale, 129 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(47 * scale, 133 * scale);
        ctx.bezierCurveTo(65 * scale, 143 * scale, 74 * scale, 162 * scale, 70 * scale, 186 * scale);
        ctx.bezierCurveTo(71 * scale, 188.5 * scale, 71 * scale, 188.5 * scale, 72 * scale, 191 * scale);
        ctx.bezierCurveTo(81 * scale, 185.5 * scale, 81 * scale, 185.5 * scale, 90 * scale, 180 * scale);
        ctx.bezierCurveTo(99 * scale, 185 * scale, 99 * scale, 185 * scale, 108 * scale, 190 * scale);
        ctx.bezierCurveTo(110.5 * scale, 184.5 * scale, 110.5 * scale, 184.5 * scale, 113 * scale, 179 * scale);
        ctx.bezierCurveTo(110 * scale, 156 * scale, 121 * scale, 156 * scale, 142 * scale, 141 * scale);
        ctx.bezierCurveTo(137.5 * scale, 133 * scale, 137.5 * scale, 133 * scale, 133 * scale, 125 * scale);
        ctx.bezierCurveTo(116 * scale, 78 * scale, 112 * scale, 70 * scale, 91 * scale, 71 * scale);
        ctx.bezierCurveTo(62 * scale, 69 * scale, 59 * scale, 107 * scale, 48 * scale, 132 * scale);
        ctx.closePath();
        fill_path(ctx, color[4]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(93 * scale, 86 * scale);
        ctx.bezierCurveTo(101 * scale, 79 * scale, 99 * scale, 56 * scale, 100 * scale, 37 * scale);
        ctx.bezierCurveTo(90 * scale, 34 * scale, 90 * scale, 27 * scale, 93 * scale, 13 * scale);
        ctx.bezierCurveTo(96 * scale, 0 * scale, 85 * scale, 13 * scale, 82 * scale, 26 * scale);
        ctx.bezierCurveTo(78 * scale, 43 * scale, 89 * scale, 74 * scale, 93 * scale, 85 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(94 * scale, 86 * scale);
        ctx.bezierCurveTo(120 * scale, 88 * scale, 132 * scale, 109 * scale, 122 * scale, 128 * scale);
        ctx.bezierCurveTo(118 * scale, 139 * scale, 101 * scale, 146 * scale, 90 * scale, 143 * scale);
        ctx.bezierCurveTo(57 * scale, 141 * scale, 49 * scale, 109 * scale, 68 * scale, 94 * scale);
        ctx.bezierCurveTo(78 * scale, 85 * scale, 90 * scale, 86 * scale, 95 * scale, 86 * scale);
        ctx.closePath();
        fill_path(ctx, color[1]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(91 * scale, 178 * scale);
        ctx.bezierCurveTo(78 * scale, 136 * scale, 81 * scale, 88 * scale, 93 * scale, 87 * scale);
        ctx.bezierCurveTo(101 * scale, 84 * scale, 94 * scale, 97 * scale, 94 * scale, 107 * scale);
        ctx.bezierCurveTo(91 * scale, 112 * scale, 92 * scale, 117 * scale, 94 * scale, 121 * scale);
        ctx.bezierCurveTo(98 * scale, 126 * scale, 102 * scale, 128 * scale, 97 * scale, 135 * scale);
        ctx.bezierCurveTo(92 * scale, 140 * scale, 93 * scale, 160 * scale, 91 * scale, 179 * scale);
        ctx.closePath();
        fill_path(ctx, color[5], color[1], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(20 * scale, 151 * scale);
        ctx.bezierCurveTo(22 * scale, 147 * scale, 22 * scale, 147 * scale, 24 * scale, 143 * scale);
        ctx.bezierCurveTo(27 * scale, 144.5 * scale, 27 * scale, 144.5 * scale, 30 * scale, 146 * scale);
        ctx.bezierCurveTo(31 * scale, 143 * scale, 31 * scale, 143 * scale, 32 * scale, 140 * scale);
        ctx.bezierCurveTo(35 * scale, 140.5 * scale, 35 * scale, 140.5 * scale, 38 * scale, 141 * scale);
        ctx.bezierCurveTo(31 * scale, 132 * scale, 29 * scale, 131 * scale, 22 * scale, 132 * scale);
        ctx.bezierCurveTo(14 * scale, 135 * scale, 13 * scale, 135 * scale, 11 * scale, 138 * scale);
        ctx.bezierCurveTo(15.5 * scale, 144.5 * scale, 15.5 * scale, 144.5 * scale, 20 * scale, 151 * scale);
        ctx.closePath();
        fill_path(ctx, color[6]);
        circle(ctx, 61 * scale, 183 * scale, 16.15549442140351 * scale);
        fill_path(ctx, color[7]);
        circle(ctx, 121 * scale, 184 * scale, 14.866068747318506 * scale);
        fill_path(ctx, color[7]);
        circle(ctx, 57 * scale, 178 * scale, 5.656854249492381 * scale);
        fill_path(ctx, color[2]);
        circle(ctx, 116 * scale, 177 * scale, 5.830951894845301 * scale);
        fill_path(ctx, color[2]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(162 * scale, 152 * scale);
        ctx.bezierCurveTo(161.5 * scale, 148 * scale, 161.5 * scale, 148 * scale, 161 * scale, 144 * scale);
        ctx.bezierCurveTo(157.5 * scale, 145 * scale, 157.5 * scale, 145 * scale, 154 * scale, 146 * scale);
        ctx.bezierCurveTo(153.5 * scale, 143 * scale, 153.5 * scale, 143 * scale, 153 * scale, 140 * scale);
        ctx.bezierCurveTo(149 * scale, 140.5 * scale, 149 * scale, 140.5 * scale, 145 * scale, 141 * scale);
        ctx.bezierCurveTo(150 * scale, 132 * scale, 161 * scale, 131 * scale, 170 * scale, 138 * scale);
        ctx.bezierCurveTo(173 * scale, 141 * scale, 165 * scale, 150 * scale, 162 * scale, 150 * scale);
        ctx.closePath();
        fill_path(ctx, color[6]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(106 * scale, 110 * scale);
        ctx.bezierCurveTo(104 * scale, 98 * scale, 112 * scale, 91 * scale, 118 * scale, 101 * scale);
        ctx.bezierCurveTo(122 * scale, 115 * scale, 121 * scale, 119 * scale, 117 * scale, 124 * scale);
        ctx.bezierCurveTo(112 * scale, 129 * scale, 107 * scale, 124 * scale, 106 * scale, 112 * scale);
        ctx.closePath();
        fill_path(ctx, color[1]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(64 * scale, 106 * scale);
        ctx.bezierCurveTo(66 * scale, 97 * scale, 72 * scale, 89 * scale, 76 * scale, 98 * scale);
        ctx.bezierCurveTo(78 * scale, 106 * scale, 79 * scale, 118 * scale, 72 * scale, 126 * scale);
        ctx.bezierCurveTo(65 * scale, 130 * scale, 63 * scale, 117 * scale, 64 * scale, 108 * scale);
        ctx.closePath();
        fill_path(ctx, color[1]);
        return can;
    };

    function create_food_plant(scale) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        var w = scale * 200;
        var h = scale * 200;
        can.width = w;
        can.height = h;
        var img = create_plant(0.35, false, ["#0e3022", "#0b8052", "#077b49"]);
        ctx.drawImage(img, 10, 10);
        var img = create_fruit(0.9, false, ["#3d2a6e", "#8255b5"]);
        ctx.drawImage(img, 21, 20);
        var img = create_fruit(0.9, false, ["#3d2a6e", "#8255b5"]);
        ctx.drawImage(img, 38, 28);
        var img = create_fruit(0.9, false, ["#3d2a6e", "#8255b5"]);
        ctx.drawImage(img, 15, 37);
        var img = create_fruit(0.9, false, ["#3d2a6e", "#8255b5"]);
        ctx.drawImage(img, 32, 45);
        return can;
    };

    function create_gear(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        var w = scale * 100;
        var h = scale * 100;
        var x = w / 2;
        var y = h / 2;
        can.width = w;
        can.height = h;
        var wr = scale * 5;
        var hr = scale * 28;
        var wr2 = wr / 2;
        var hr2 = hr / 2;
        ctx.translate(x, y);
        for (var i = 0; i < 4; i++) {
            round_rect(ctx, -wr2, -hr2, wr, hr, scale * 2);
            ctx.rotate(Math.PI / 4);
            fill_path(ctx, color);
        }
        ctx.arc(0, 0, 10 * scale, 0, Math.PI * 2);
        fill_path(ctx, color);
        ctx.globalCompositeOperation = "destination-out";
        circle(ctx, 0, 0, scale * 4);
        ctx.fill();
        return can;
    };

    function create_gear_option(scale, color, t) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        var w = scale * 32;
        var h = scale * 32;
        var x = w / 2;
        var y = h / 2;
        can.width = w;
        can.height = h;
        var wr = scale * 5;
        var hr = scale * 28;
        var wr2 = wr / 2;
        var hr2 = hr / 2;
        ctx.translate(0 * scale, 0 * scale);
        ctx.translate(x, y);
        if (t == 1) {
            circle(ctx, 0, 0, 10 * scale, 0);
            fill_path(ctx, color[2], color[2], 3 * scale);
            for (var i = 0; i < 4; i++) {
                round_rect(ctx, -wr2, -hr2, wr, hr, scale * 2);
                ctx.rotate(Math.PI / 4);
                fill_path(ctx, color[2], color[2], 4 * scale);
            }
        }
        circle(ctx, 0, 0, 10 * scale, 0);
        fill_path(ctx, color[0], color[1], 1.5 * scale);
        for (var i = 0; i < 4; i++) {
            round_rect(ctx, -wr2, -hr2, wr, hr, scale * 2);
            ctx.rotate(Math.PI / 4);
            fill_path(ctx, color[0], color[1], 1.5 * scale);
        }
        circle(ctx, 0, 0, 10 * scale, 0);
        fill_path(ctx, color[0]);
        circle(ctx, 0, 0, 4 * scale, 0);
        fill_path(ctx, color[2], color[1], 1.5 * scale);
        ctx.globalCompositeOperation = "destination-out";
        circle(ctx, 0, 0, 4 * scale, 0);
        fill_path(ctx, color[0], color[1], 2 * scale);
        ctx.globalCompositeOperation = "source-over";
        circle(ctx, 0, 0, 4 * scale, 0);
        fill_path(ctx, undefined, color[1], 2 * scale);
        return can;
    };

    function create_minimap_object(ctx, scale, color, t, r, max, min) {
        if (min === undefined)
            min = 0;

        for (var k = (max == -1) ? 0 : max; k >= min; k--) {
            for (var i = 0; i < 200; i++) {
                for (var j = 0; j < 200; j++) {
                    var tile = MAP.tiles[j][i];
                    if (!tile || !tile[t])
                        continue;

                    if (max == -1)
                        var o = tile[t];
                    else
                        var o = tile[t][k];
                    for (var l = 0; o && (l < o.length); l++) {
                        var object = o[l];
                        ctx.fillStyle = color;
                        circle(ctx, (object.x * scale) * 0.0095, (object.y * scale) * 0.0095, r * scale);
                        ctx.fill();
                    }
                }
            }
        }
    };

    function create_minimap(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 200 * scale;
        can.height = 200 * scale;
        ctx.translate(9 * scale, 12 * scale);
        ctx.fillStyle = color[0];
        ctx.fillRect(-2, -3, can.width, can.height);
        ctx.fillStyle = color[9];
        ctx.fillRect(0, 0, can.width, can.height);
        ctx.fillStyle = color[17];
        ctx.fillRect(0, 0, can.width, can.height / 2.1);
        ctx.fillStyle = color[26];
        ctx.fillRect(can.width / 1.77, can.height / 2.1, can.width / 2.1, can.height / 2.1);
        ctx.fillStyle = color[28];
        ctx.fillRect(can.width / 1.77, can.height / 2.1, 5, can.height / 2.1);
        create_minimap_object(ctx, scale, color[17], "so", 3, 6, 0);
        create_minimap_object(ctx, scale, color[28], "isl", 6, 2, 2);
        create_minimap_object(ctx, scale, color[28], "isl", 6, 1, 1);
        create_minimap_object(ctx, scale, color[28], "isl", 6, 0, 0);
        create_minimap_object(ctx, scale, color[5], "plm", 2, 2, 2);
        create_minimap_object(ctx, scale, color[5], "plm", 2, 1, 1);
        create_minimap_object(ctx, scale, color[5], "plm", 2, 0, 0);
        create_minimap_object(ctx, scale, color[5], "t", 2, 5, 4);
        create_minimap_object(ctx, scale, color[6], "t", 3, 3, 2);
        create_minimap_object(ctx, scale, color[7], "t", 4, 1, 0);
        create_minimap_object(ctx, scale, color[8], "b", 3, 3, 2);
        create_minimap_object(ctx, scale, color[9], "b", 4, 1, 0);
        create_minimap_object(ctx, scale, color[2], "s", 2, 2, 2);
        create_minimap_object(ctx, scale, color[3], "s", 3, 1, 1);
        create_minimap_object(ctx, scale, color[4], "s", 4, 0, 0);
        create_minimap_object(ctx, scale, color[10], "g", 2, 2, 2);
        create_minimap_object(ctx, scale, color[11], "g", 3, 1, 1);
        create_minimap_object(ctx, scale, color[12], "g", 4, 0, 0);
        create_minimap_object(ctx, scale, color[1], "p", 4, -1);
        create_minimap_object(ctx, scale, color[25], "dg", 3, 6, 0);
        create_minimap_object(ctx, scale, color[27], "cs", 2, 2, 2);
        create_minimap_object(ctx, scale, color[27], "cs", 2, 1, 1);
        create_minimap_object(ctx, scale, color[27], "cs", 2, 0, 0);
        create_minimap_object(ctx, scale, color[19], "f", 2, 2, 2);
        create_minimap_object(ctx, scale, color[20], "f", 3, 1, 1);
        create_minimap_object(ctx, scale, color[21], "f", 4, 0, 0);
        create_minimap_object(ctx, scale, color[22], "gw", 2, 2, 2);
        create_minimap_object(ctx, scale, color[22], "gw", 3, 1, 1);
        create_minimap_object(ctx, scale, color[22], "gw", 4, 0, 0);
        create_minimap_object(ctx, scale, color[23], "dw", 3, 1, 1);
        create_minimap_object(ctx, scale, color[23], "dw", 4, 0, 0);
        create_minimap_object(ctx, scale, color[23], "dw", 2, 2, 2);
        create_minimap_object(ctx, scale, color[23], "d", 3, 1, 1);
        create_minimap_object(ctx, scale, color[23], "d", 4, 0, 0);
        create_minimap_object(ctx, scale, color[23], "d", 2, 2, 2);
        create_minimap_object(ctx, scale, color[24], "a", 2, 2, 2);
        create_minimap_object(ctx, scale, color[24], "a", 3, 1, 1);
        create_minimap_object(ctx, scale, color[24], "a", 4, 0, 0);
        create_minimap_object(ctx, scale, color[30], "l", 4, 2, 2);
        create_minimap_object(ctx, scale, color[30], "l", 4, 1, 1);
        create_minimap_object(ctx, scale, color[30], "l", 4, 0, 0);
        circle(ctx, 0, 0, 0);
        ctx.globalCompositeOperation = "destination-out";
        ctx.translate(-9 * scale, -4 * scale);
        ctx.rect(5 * scale, 0, can.width * scale, can.height * scale, 10 * scale);
        ctx.lineWidth = 7 * scale;
        ctx.strokeStyle = color[16];
        ctx.stroke();
        return can;
    };

    function create_workbench(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        var w = scale * 125;
        var h = scale * 95;
        var w2 = w / 2;
        var h2 = h / 2;
        var round = scale * 10;
        var shadow = scale * 8;
        var ww = scale * 112;
        var hw = scale * 82;
        var ww2 = ww / 2;
        var hw2 = hw / 2;
        var width = scale * 4;
        can.width = w;
        can.height = h;
        ctx.translate(w2 - (4 * scale), h2 + (4 * scale));
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        round_rect(ctx, -ww2, -hw2, ww, hw, round);
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(0, -shadow);
        round_rect(ctx, -ww2, -hw2, ww, hw, round);
        fill_path(ctx, color[1], color[2], width);
        var w = 55 * scale;
        var h = 45 * scale;
        var round = 5;
        ctx.translate(-40 * scale, -30 * scale);
        round_rect(ctx, 0, 0, w, h, round);
        fill_path(ctx, color[3]);
        var img = create_gear(0.7 * scale, color[3]);
        ctx.drawImage(img, 45 * scale, -25 * scale);
        var img = create_gear(0.7 * scale, color[3]);
        ctx.drawImage(img, 45 * scale, 15 * scale);
        var img = create_gear(1.2 * scale, color[3]);
        ctx.drawImage(img, 28 * scale, -30 * scale);
        var w = 15 * scale;
        var h = 70 * scale;
        var round = 5 * scale;
        ctx.translate(78 * scale, -5 * scale);
        round_rect(ctx, 0, 0, w, h, round);
        fill_path(ctx, color[4]);
        var w = 9 * scale;
        var h = 50 * scale;
        var round = 3 * scale;
        ctx.translate(-20 * scale, 20 * scale);
        ctx.rotate(Math.PI / 5);
        ctx.globalAlpha = 0.6;
        round_rect(ctx, 0, 0, w, h, round);
        fill_path(ctx, color[5]);
        ctx.translate(-20 * scale, 29 * scale);
        ctx.rotate(Math.PI / 5);
        ctx.globalAlpha = 0.6;
        ctx.beginPath();
        ctx.lineJoin = "round";
        ctx.moveTo(0, 0);
        ctx.lineTo(0, 30 * scale);
        ctx.lineTo(30 * scale, 30 * scale);
        ctx.closePath();
        fill_path(ctx, null, color[5], 8 * scale);
        return can;
    };

    function create_rabbit(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        var w = scale * 85;
        var h = scale * 115;
        var shadow = scale * 6;
        var width = scale * 4;
        can.width = w;
        can.height = h;
        ctx.translate(-130 * scale, (-60 * scale) + shadow);
        ctx.globalAlpha = 0.5;
        ctx.beginPath();
        ctx.bezierCurveTo(190 * scale, 87 * scale, 201 * scale, 59 * scale, 208 * scale, 64 * scale);
        ctx.bezierCurveTo(213 * scale, 68 * scale, 204 * scale, 93 * scale, 195 * scale, 109 * scale);
        ctx.bezierCurveTo(195 * scale, 109 * scale, 202 * scale, 124 * scale, 191 * scale, 141 * scale);
        ctx.bezierCurveTo(182 * scale, 151 * scale, 164 * scale, 155 * scale, 148 * scale, 144 * scale);
        ctx.bezierCurveTo(136 * scale, 135 * scale, 138 * scale, 111 * scale, 145 * scale, 104 * scale);
        ctx.bezierCurveTo(140 * scale, 92 * scale, 131 * scale, 67 * scale, 138 * scale, 63 * scale);
        ctx.bezierCurveTo(145 * scale, 61 * scale, 153 * scale, 82 * scale, 155 * scale, 96 * scale);
        ctx.bezierCurveTo(167 * scale, 91 * scale, 178 * scale, 92 * scale, 187 * scale, 98 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.translate(0, -shadow);
        ctx.globalAlpha = 1;
        ctx.beginPath();
        ctx.bezierCurveTo(190 * scale, 87 * scale, 201 * scale, 59 * scale, 208 * scale, 64 * scale);
        ctx.bezierCurveTo(213 * scale, 68 * scale, 204 * scale, 93 * scale, 195 * scale, 109 * scale);
        ctx.bezierCurveTo(195 * scale, 109 * scale, 202 * scale, 124 * scale, 191 * scale, 141 * scale);
        ctx.bezierCurveTo(182 * scale, 151 * scale, 164 * scale, 155 * scale, 148 * scale, 144 * scale);
        ctx.bezierCurveTo(136 * scale, 135 * scale, 138 * scale, 111 * scale, 145 * scale, 104 * scale);
        ctx.bezierCurveTo(140 * scale, 92 * scale, 131 * scale, 67 * scale, 138 * scale, 63 * scale);
        ctx.bezierCurveTo(145 * scale, 61 * scale, 153 * scale, 82 * scale, 155 * scale, 96 * scale);
        ctx.bezierCurveTo(167 * scale, 91 * scale, 178 * scale, 92 * scale, 187 * scale, 98 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 4);
        var x_eye = scale * 155;
        var y_eye = scale * 133;
        var r_eye = scale * 10;
        var r_pupil1 = scale * 3;
        var x_pupil = x_eye + (scale * -3);
        var y_pupil = y_eye + (scale * -5);
        ctx.save();
        ctx.translate(x_eye, y_eye);
        ctx.globalAlpha = 1;
        circle(ctx, 0, 0, r_eye);
        fill_path(ctx, color[3]);
        ctx.restore();
        ctx.save();
        ctx.translate(x_pupil, y_pupil);
        ctx.globalAlpha = 1;
        circle(ctx, 0, 0, r_pupil1);
        fill_path(ctx, color[4]);
        ctx.restore();
        ctx.save();
        ctx.translate(x_eye + (27 * scale), y_eye);
        ctx.globalAlpha = 1;
        circle(ctx, 0, 0, r_eye);
        fill_path(ctx, color[3]);
        ctx.restore();
        ctx.save();
        ctx.translate((27 * scale) + x_pupil, y_pupil);
        ctx.globalAlpha = 1;
        circle(ctx, 0, 0, r_pupil1);
        fill_path(ctx, color[4]);
        return can;
    };

    function create_hurt_rabbit(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        var w = scale * 85;
        var h = scale * 115;
        var shadow = scale * 6;
        var width = scale * 4;
        can.width = w;
        can.height = h;
        ctx.translate(-130 * scale, -60 * scale);
        ctx.globalAlpha = 1;
        ctx.beginPath();
        ctx.bezierCurveTo(190 * scale, 87 * scale, 201 * scale, 59 * scale, 208 * scale, 64 * scale);
        ctx.bezierCurveTo(213 * scale, 68 * scale, 204 * scale, 93 * scale, 195 * scale, 109 * scale);
        ctx.bezierCurveTo(195 * scale, 109 * scale, 202 * scale, 124 * scale, 191 * scale, 141 * scale);
        ctx.bezierCurveTo(182 * scale, 151 * scale, 164 * scale, 155 * scale, 148 * scale, 144 * scale);
        ctx.bezierCurveTo(136 * scale, 135 * scale, 138 * scale, 111 * scale, 145 * scale, 104 * scale);
        ctx.bezierCurveTo(140 * scale, 92 * scale, 131 * scale, 67 * scale, 138 * scale, 63 * scale);
        ctx.bezierCurveTo(145 * scale, 61 * scale, 153 * scale, 82 * scale, 155 * scale, 96 * scale);
        ctx.bezierCurveTo(167 * scale, 91 * scale, 178 * scale, 92 * scale, 187 * scale, 98 * scale);
        ctx.closePath();
        fill_path(ctx, color, color, width);
        return can;
    };

    function create_hurt_wolf(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 188 * scale;
        can.height = 190 * scale;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(33.00567626953125 * scale, 95.44320678710938 * scale);
        ctx.bezierCurveTo(42.00567626953125 * scale, 87.44320678710938 * scale, 48.00567626953125 * scale, 51.443206787109375 * scale, 74.00567626953125 * scale, 47.443206787109375 * scale);
        ctx.bezierCurveTo(100.00567626953125 * scale, 42.443206787109375 * scale, 118.00567626953125 * scale, 49.443206787109375 * scale, 131.00567626953125 * scale, 55.443206787109375 * scale);
        ctx.bezierCurveTo(140.00567626953125 * scale, 70.44320678710938 * scale, 145.00567626953125 * scale, 87.44320678710938 * scale, 152.00567626953125 * scale, 94.44320678710938 * scale);
        ctx.bezierCurveTo(149.00567626953125 * scale, 99.44320678710938 * scale, 147.00567626953125 * scale, 98.44320678710938 * scale, 141.00567626953125 * scale, 101.44320678710938 * scale);
        ctx.bezierCurveTo(147.00567626953125 * scale, 108.44320678710938 * scale, 147.00567626953125 * scale, 111.44320678710938 * scale, 147.00567626953125 * scale, 112.44320678710938 * scale);
        ctx.bezierCurveTo(143.00567626953125 * scale, 112.44320678710938 * scale, 141.00567626953125 * scale, 112.44320678710938 * scale, 137.00567626953125 * scale, 111.44320678710938 * scale);
        ctx.bezierCurveTo(138.00567626953125 * scale, 117.44320678710938 * scale, 138.00567626953125 * scale, 120.44320678710938 * scale, 138.00567626953125 * scale, 124.44320678710938 * scale);
        ctx.bezierCurveTo(125.00567626953125 * scale, 107.44320678710938 * scale, 121.00567626953125 * scale, 124.44320678710938 * scale, 110.00567626953125 * scale, 141.44320678710938 * scale);
        ctx.bezierCurveTo(102.00567626953125 * scale, 158.44320678710938 * scale, 89.00567626953125 * scale, 158.44320678710938 * scale, 80.00567626953125 * scale, 144.44320678710938 * scale);
        ctx.bezierCurveTo(61.00567626953125 * scale, 111.44320678710938 * scale, 56.00567626953125 * scale, 117.44320678710938 * scale, 48.00567626953125 * scale, 120.44320678710938 * scale);
        ctx.bezierCurveTo(46.00567626953125 * scale, 118.44320678710938 * scale, 47.00567626953125 * scale, 112.44320678710938 * scale, 48.00567626953125 * scale, 107.44320678710938 * scale);
        ctx.bezierCurveTo(43.00567626953125 * scale, 111.44320678710938 * scale, 40.00567626953125 * scale, 111.44320678710938 * scale, 37.00567626953125 * scale, 110.44320678710938 * scale);
        ctx.bezierCurveTo(39.50567626953125 * scale, 104.94320678710938 * scale, 39.50567626953125 * scale, 104.94320678710938 * scale, 42.00567626953125 * scale, 99.44320678710938 * scale);
        ctx.bezierCurveTo(33.00567626953125 * scale, 99.44320678710938 * scale, 33.00567626953125 * scale, 98.44320678710938 * scale, 33.00567626953125 * scale, 96.44320678710938 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(51.00567626953125 * scale, 72.53409576416016 * scale);
        ctx.bezierCurveTo(48.00567626953125 * scale, 56.534095764160156 * scale, 48.00567626953125 * scale, 49.534095764160156 * scale, 54.00567626953125 * scale, 35.534095764160156 * scale);
        ctx.bezierCurveTo(58.00567626953125 * scale, 26.534095764160156 * scale, 65.00567626953125 * scale, 27.534095764160156 * scale, 73.00567626953125 * scale, 40.534095764160156 * scale);
        ctx.bezierCurveTo(81.00567626953125 * scale, 49.534095764160156 * scale, 82.00567626953125 * scale, 50.534095764160156 * scale, 83.00567626953125 * scale, 51.534095764160156 * scale);
        ctx.bezierCurveTo(77.00567626953125 * scale, 71.53409576416016 * scale, 64.00567626953125 * scale, 75.53409576416016 * scale, 51.00567626953125 * scale, 72.53409576416016 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(105.00567626953125 * scale, 50.53410339355469 * scale);
        ctx.bezierCurveTo(112.00567626953125 * scale, 48.53410339355469 * scale, 125.00567626953125 * scale, 21.534103393554688 * scale, 132.00567626953125 * scale, 33.53410339355469 * scale);
        ctx.bezierCurveTo(138.00567626953125 * scale, 42.53410339355469 * scale, 140.00567626953125 * scale, 64.53410339355469 * scale, 136.00567626953125 * scale, 75.53410339355469 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 2 * scale);
        return can;
    };

    function create_wolf(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 188 * scale;
        can.height = 190 * scale;
        ctx.globalAlpha = 0.5;
        ctx.translate(0, 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(33.00567626953125 * scale, 95.44320678710938 * scale);
        ctx.bezierCurveTo(42.00567626953125 * scale, 87.44320678710938 * scale, 48.00567626953125 * scale, 51.443206787109375 * scale, 74.00567626953125 * scale, 47.443206787109375 * scale);
        ctx.bezierCurveTo(100.00567626953125 * scale, 42.443206787109375 * scale, 118.00567626953125 * scale, 49.443206787109375 * scale, 131.00567626953125 * scale, 55.443206787109375 * scale);
        ctx.bezierCurveTo(140.00567626953125 * scale, 70.44320678710938 * scale, 145.00567626953125 * scale, 87.44320678710938 * scale, 152.00567626953125 * scale, 94.44320678710938 * scale);
        ctx.bezierCurveTo(149.00567626953125 * scale, 99.44320678710938 * scale, 147.00567626953125 * scale, 98.44320678710938 * scale, 141.00567626953125 * scale, 101.44320678710938 * scale);
        ctx.bezierCurveTo(147.00567626953125 * scale, 108.44320678710938 * scale, 147.00567626953125 * scale, 111.44320678710938 * scale, 147.00567626953125 * scale, 112.44320678710938 * scale);
        ctx.bezierCurveTo(143.00567626953125 * scale, 112.44320678710938 * scale, 141.00567626953125 * scale, 112.44320678710938 * scale, 137.00567626953125 * scale, 111.44320678710938 * scale);
        ctx.bezierCurveTo(138.00567626953125 * scale, 117.44320678710938 * scale, 138.00567626953125 * scale, 120.44320678710938 * scale, 138.00567626953125 * scale, 124.44320678710938 * scale);
        ctx.bezierCurveTo(125.00567626953125 * scale, 107.44320678710938 * scale, 121.00567626953125 * scale, 124.44320678710938 * scale, 110.00567626953125 * scale, 141.44320678710938 * scale);
        ctx.bezierCurveTo(102.00567626953125 * scale, 158.44320678710938 * scale, 89.00567626953125 * scale, 158.44320678710938 * scale, 80.00567626953125 * scale, 144.44320678710938 * scale);
        ctx.bezierCurveTo(61.00567626953125 * scale, 111.44320678710938 * scale, 56.00567626953125 * scale, 117.44320678710938 * scale, 48.00567626953125 * scale, 120.44320678710938 * scale);
        ctx.bezierCurveTo(46.00567626953125 * scale, 118.44320678710938 * scale, 47.00567626953125 * scale, 112.44320678710938 * scale, 48.00567626953125 * scale, 107.44320678710938 * scale);
        ctx.bezierCurveTo(43.00567626953125 * scale, 111.44320678710938 * scale, 40.00567626953125 * scale, 111.44320678710938 * scale, 37.00567626953125 * scale, 110.44320678710938 * scale);
        ctx.bezierCurveTo(39.50567626953125 * scale, 104.94320678710938 * scale, 39.50567626953125 * scale, 104.94320678710938 * scale, 42.00567626953125 * scale, 99.44320678710938 * scale);
        ctx.bezierCurveTo(33.00567626953125 * scale, 99.44320678710938 * scale, 33.00567626953125 * scale, 98.44320678710938 * scale, 33.00567626953125 * scale, 96.44320678710938 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(60.00567626953125 * scale, 99.35227966308594 * scale);
        ctx.bezierCurveTo(70.00567626953125 * scale, 82.35227966308594 * scale, 85.00567626953125 * scale, 86.35227966308594 * scale, 87.00567626953125 * scale, 97.35227966308594 * scale);
        ctx.bezierCurveTo(89.00567626953125 * scale, 101.35227966308594 * scale, 88.00567626953125 * scale, 105.35227966308594 * scale, 87.00567626953125 * scale, 110.35227966308594 * scale);
        ctx.bezierCurveTo(89.00567626953125 * scale, 111.35227966308594 * scale, 91.00567626953125 * scale, 112.35227966308594 * scale, 93.00567626953125 * scale, 115.35227966308594 * scale);
        ctx.bezierCurveTo(96.00567626953125 * scale, 111.35227966308594 * scale, 99.00567626953125 * scale, 111.35227966308594 * scale, 100.00567626953125 * scale, 110.35227966308594 * scale);
        ctx.bezierCurveTo(98.00567626953125 * scale, 92.35227966308594 * scale, 103.00567626953125 * scale, 86.35227966308594 * scale, 113.00567626953125 * scale, 89.35227966308594 * scale);
        ctx.bezierCurveTo(122.00567626953125 * scale, 92.35227966308594 * scale, 123.00567626953125 * scale, 94.35227966308594 * scale, 126.00567626953125 * scale, 98.35227966308594 * scale);
        ctx.bezierCurveTo(124.00567626953125 * scale, 102.35227966308594 * scale, 123.00567626953125 * scale, 103.35227966308594 * scale, 121.00567626953125 * scale, 104.35227966308594 * scale);
        ctx.bezierCurveTo(124.00567626953125 * scale, 105.35227966308594 * scale, 126.00567626953125 * scale, 107.35227966308594 * scale, 129.00567626953125 * scale, 111.35227966308594 * scale);
        ctx.bezierCurveTo(115.00567626953125 * scale, 122.35227966308594 * scale, 113.00567626953125 * scale, 145.35227966308594 * scale, 100.00567626953125 * scale, 152.35227966308594 * scale);
        ctx.bezierCurveTo(91.00567626953125 * scale, 158.35227966308594 * scale, 83.00567626953125 * scale, 149.35227966308594 * scale, 76.00567626953125 * scale, 138.35227966308594 * scale);
        ctx.bezierCurveTo(67.00567626953125 * scale, 114.35227966308594 * scale, 63.00567626953125 * scale, 113.35227966308594 * scale, 59.00567626953125 * scale, 111.35227966308594 * scale);
        ctx.bezierCurveTo(62.00567626953125 * scale, 107.35227966308594 * scale, 64.00567626953125 * scale, 105.35227966308594 * scale, 66.00567626953125 * scale, 104.35227966308594 * scale);
        ctx.bezierCurveTo(63.00567626953125 * scale, 100.35227966308594 * scale, 62.00567626953125 * scale, 100.35227966308594 * scale, 60.00567626953125 * scale, 99.35227966308594 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(51.00567626953125 * scale, 72.53409576416016 * scale);
        ctx.bezierCurveTo(48.00567626953125 * scale, 56.534095764160156 * scale, 48.00567626953125 * scale, 49.534095764160156 * scale, 54.00567626953125 * scale, 35.534095764160156 * scale);
        ctx.bezierCurveTo(58.00567626953125 * scale, 26.534095764160156 * scale, 65.00567626953125 * scale, 27.534095764160156 * scale, 73.00567626953125 * scale, 40.534095764160156 * scale);
        ctx.bezierCurveTo(81.00567626953125 * scale, 49.534095764160156 * scale, 82.00567626953125 * scale, 50.534095764160156 * scale, 83.00567626953125 * scale, 51.534095764160156 * scale);
        ctx.bezierCurveTo(77.00567626953125 * scale, 71.53409576416016 * scale, 64.00567626953125 * scale, 75.53409576416016 * scale, 51.00567626953125 * scale, 72.53409576416016 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(105.00567626953125 * scale, 50.53410339355469 * scale);
        ctx.bezierCurveTo(112.00567626953125 * scale, 48.53410339355469 * scale, 125.00567626953125 * scale, 21.534103393554688 * scale, 132.00567626953125 * scale, 33.53410339355469 * scale);
        ctx.bezierCurveTo(138.00567626953125 * scale, 42.53410339355469 * scale, 140.00567626953125 * scale, 64.53410339355469 * scale, 136.00567626953125 * scale, 75.53410339355469 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 2 * scale);
        ctx.globalAlpha = 1;
        ctx.translate(0, -5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(33.00567626953125 * scale, 95.44320678710938 * scale);
        ctx.bezierCurveTo(42.00567626953125 * scale, 87.44320678710938 * scale, 48.00567626953125 * scale, 51.443206787109375 * scale, 74.00567626953125 * scale, 47.443206787109375 * scale);
        ctx.bezierCurveTo(100.00567626953125 * scale, 42.443206787109375 * scale, 118.00567626953125 * scale, 49.443206787109375 * scale, 131.00567626953125 * scale, 55.443206787109375 * scale);
        ctx.bezierCurveTo(140.00567626953125 * scale, 70.44320678710938 * scale, 145.00567626953125 * scale, 87.44320678710938 * scale, 152.00567626953125 * scale, 94.44320678710938 * scale);
        ctx.bezierCurveTo(149.00567626953125 * scale, 99.44320678710938 * scale, 147.00567626953125 * scale, 98.44320678710938 * scale, 141.00567626953125 * scale, 101.44320678710938 * scale);
        ctx.bezierCurveTo(147.00567626953125 * scale, 108.44320678710938 * scale, 147.00567626953125 * scale, 111.44320678710938 * scale, 147.00567626953125 * scale, 112.44320678710938 * scale);
        ctx.bezierCurveTo(143.00567626953125 * scale, 112.44320678710938 * scale, 141.00567626953125 * scale, 112.44320678710938 * scale, 137.00567626953125 * scale, 111.44320678710938 * scale);
        ctx.bezierCurveTo(138.00567626953125 * scale, 117.44320678710938 * scale, 138.00567626953125 * scale, 120.44320678710938 * scale, 138.00567626953125 * scale, 124.44320678710938 * scale);
        ctx.bezierCurveTo(125.00567626953125 * scale, 107.44320678710938 * scale, 121.00567626953125 * scale, 124.44320678710938 * scale, 110.00567626953125 * scale, 141.44320678710938 * scale);
        ctx.bezierCurveTo(102.00567626953125 * scale, 158.44320678710938 * scale, 89.00567626953125 * scale, 158.44320678710938 * scale, 80.00567626953125 * scale, 144.44320678710938 * scale);
        ctx.bezierCurveTo(61.00567626953125 * scale, 111.44320678710938 * scale, 56.00567626953125 * scale, 117.44320678710938 * scale, 48.00567626953125 * scale, 120.44320678710938 * scale);
        ctx.bezierCurveTo(46.00567626953125 * scale, 118.44320678710938 * scale, 47.00567626953125 * scale, 112.44320678710938 * scale, 48.00567626953125 * scale, 107.44320678710938 * scale);
        ctx.bezierCurveTo(43.00567626953125 * scale, 111.44320678710938 * scale, 40.00567626953125 * scale, 111.44320678710938 * scale, 37.00567626953125 * scale, 110.44320678710938 * scale);
        ctx.bezierCurveTo(39.50567626953125 * scale, 104.94320678710938 * scale, 39.50567626953125 * scale, 104.94320678710938 * scale, 42.00567626953125 * scale, 99.44320678710938 * scale);
        ctx.bezierCurveTo(33.00567626953125 * scale, 99.44320678710938 * scale, 33.00567626953125 * scale, 98.44320678710938 * scale, 33.00567626953125 * scale, 96.44320678710938 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 3 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(60.00567626953125 * scale, 99.35227966308594 * scale);
        ctx.bezierCurveTo(70.00567626953125 * scale, 82.35227966308594 * scale, 85.00567626953125 * scale, 86.35227966308594 * scale, 87.00567626953125 * scale, 97.35227966308594 * scale);
        ctx.bezierCurveTo(89.00567626953125 * scale, 101.35227966308594 * scale, 88.00567626953125 * scale, 105.35227966308594 * scale, 87.00567626953125 * scale, 110.35227966308594 * scale);
        ctx.bezierCurveTo(89.00567626953125 * scale, 111.35227966308594 * scale, 91.00567626953125 * scale, 112.35227966308594 * scale, 93.00567626953125 * scale, 115.35227966308594 * scale);
        ctx.bezierCurveTo(96.00567626953125 * scale, 111.35227966308594 * scale, 99.00567626953125 * scale, 111.35227966308594 * scale, 100.00567626953125 * scale, 110.35227966308594 * scale);
        ctx.bezierCurveTo(98.00567626953125 * scale, 92.35227966308594 * scale, 103.00567626953125 * scale, 86.35227966308594 * scale, 113.00567626953125 * scale, 89.35227966308594 * scale);
        ctx.bezierCurveTo(122.00567626953125 * scale, 92.35227966308594 * scale, 123.00567626953125 * scale, 94.35227966308594 * scale, 126.00567626953125 * scale, 98.35227966308594 * scale);
        ctx.bezierCurveTo(124.00567626953125 * scale, 102.35227966308594 * scale, 123.00567626953125 * scale, 103.35227966308594 * scale, 121.00567626953125 * scale, 104.35227966308594 * scale);
        ctx.bezierCurveTo(124.00567626953125 * scale, 105.35227966308594 * scale, 126.00567626953125 * scale, 107.35227966308594 * scale, 129.00567626953125 * scale, 111.35227966308594 * scale);
        ctx.bezierCurveTo(115.00567626953125 * scale, 122.35227966308594 * scale, 113.00567626953125 * scale, 145.35227966308594 * scale, 100.00567626953125 * scale, 152.35227966308594 * scale);
        ctx.bezierCurveTo(91.00567626953125 * scale, 158.35227966308594 * scale, 83.00567626953125 * scale, 149.35227966308594 * scale, 76.00567626953125 * scale, 138.35227966308594 * scale);
        ctx.bezierCurveTo(67.00567626953125 * scale, 114.35227966308594 * scale, 63.00567626953125 * scale, 113.35227966308594 * scale, 59.00567626953125 * scale, 111.35227966308594 * scale);
        ctx.bezierCurveTo(62.00567626953125 * scale, 107.35227966308594 * scale, 64.00567626953125 * scale, 105.35227966308594 * scale, 66.00567626953125 * scale, 104.35227966308594 * scale);
        ctx.bezierCurveTo(63.00567626953125 * scale, 100.35227966308594 * scale, 62.00567626953125 * scale, 100.35227966308594 * scale, 60.00567626953125 * scale, 99.35227966308594 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(33.00567626953125 * scale, 95.44320678710938 * scale);
        ctx.bezierCurveTo(42.00567626953125 * scale, 87.44320678710938 * scale, 48.00567626953125 * scale, 51.443206787109375 * scale, 74.00567626953125 * scale, 47.443206787109375 * scale);
        ctx.bezierCurveTo(100.00567626953125 * scale, 42.443206787109375 * scale, 118.00567626953125 * scale, 49.443206787109375 * scale, 131.00567626953125 * scale, 55.443206787109375 * scale);
        ctx.bezierCurveTo(140.00567626953125 * scale, 70.44320678710938 * scale, 145.00567626953125 * scale, 87.44320678710938 * scale, 152.00567626953125 * scale, 94.44320678710938 * scale);
        ctx.bezierCurveTo(149.00567626953125 * scale, 99.44320678710938 * scale, 147.00567626953125 * scale, 98.44320678710938 * scale, 141.00567626953125 * scale, 101.44320678710938 * scale);
        ctx.bezierCurveTo(147.00567626953125 * scale, 108.44320678710938 * scale, 147.00567626953125 * scale, 111.44320678710938 * scale, 147.00567626953125 * scale, 112.44320678710938 * scale);
        ctx.bezierCurveTo(143.00567626953125 * scale, 112.44320678710938 * scale, 141.00567626953125 * scale, 112.44320678710938 * scale, 137.00567626953125 * scale, 111.44320678710938 * scale);
        ctx.bezierCurveTo(138.00567626953125 * scale, 117.44320678710938 * scale, 138.00567626953125 * scale, 120.44320678710938 * scale, 138.00567626953125 * scale, 124.44320678710938 * scale);
        ctx.bezierCurveTo(125.00567626953125 * scale, 107.44320678710938 * scale, 121.00567626953125 * scale, 124.44320678710938 * scale, 110.00567626953125 * scale, 141.44320678710938 * scale);
        ctx.bezierCurveTo(102.00567626953125 * scale, 158.44320678710938 * scale, 89.00567626953125 * scale, 158.44320678710938 * scale, 80.00567626953125 * scale, 144.44320678710938 * scale);
        ctx.bezierCurveTo(61.00567626953125 * scale, 111.44320678710938 * scale, 56.00567626953125 * scale, 117.44320678710938 * scale, 48.00567626953125 * scale, 120.44320678710938 * scale);
        ctx.bezierCurveTo(46.00567626953125 * scale, 118.44320678710938 * scale, 47.00567626953125 * scale, 112.44320678710938 * scale, 48.00567626953125 * scale, 107.44320678710938 * scale);
        ctx.bezierCurveTo(43.00567626953125 * scale, 111.44320678710938 * scale, 40.00567626953125 * scale, 111.44320678710938 * scale, 37.00567626953125 * scale, 110.44320678710938 * scale);
        ctx.bezierCurveTo(39.50567626953125 * scale, 104.94320678710938 * scale, 39.50567626953125 * scale, 104.94320678710938 * scale, 42.00567626953125 * scale, 99.44320678710938 * scale);
        ctx.bezierCurveTo(33.00567626953125 * scale, 99.44320678710938 * scale, 33.00567626953125 * scale, 98.44320678710938 * scale, 33.00567626953125 * scale, 96.44320678710938 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[2], 3 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(51.00567626953125 * scale, 72.53409576416016 * scale);
        ctx.bezierCurveTo(48.00567626953125 * scale, 56.534095764160156 * scale, 48.00567626953125 * scale, 49.534095764160156 * scale, 54.00567626953125 * scale, 35.534095764160156 * scale);
        ctx.bezierCurveTo(58.00567626953125 * scale, 26.534095764160156 * scale, 65.00567626953125 * scale, 27.534095764160156 * scale, 73.00567626953125 * scale, 40.534095764160156 * scale);
        ctx.bezierCurveTo(81.00567626953125 * scale, 49.534095764160156 * scale, 82.00567626953125 * scale, 50.534095764160156 * scale, 83.00567626953125 * scale, 51.534095764160156 * scale);
        fill_path(ctx, color[1], color[2], 3 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(105.00567626953125 * scale, 50.53410339355469 * scale);
        ctx.bezierCurveTo(112.00567626953125 * scale, 48.53410339355469 * scale, 125.00567626953125 * scale, 21.534103393554688 * scale, 132.00567626953125 * scale, 33.53410339355469 * scale);
        ctx.bezierCurveTo(138.00567626953125 * scale, 42.53410339355469 * scale, 140.00567626953125 * scale, 64.53410339355469 * scale, 136.00567626953125 * scale, 75.53410339355469 * scale);
        fill_path(ctx, color[1], color[2], 3 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(57.00567626953125 * scale, 68.53410339355469 * scale);
        ctx.bezierCurveTo(63.00567626953125 * scale, 69.53410339355469 * scale, 69.00567626953125 * scale, 66.53410339355469 * scale, 73.00567626953125 * scale, 60.53410339355469 * scale);
        ctx.bezierCurveTo(66.00567626953125 * scale, 47.53410339355469 * scale, 61.00567626953125 * scale, 42.53410339355469 * scale, 58.00567626953125 * scale, 49.53410339355469 * scale);
        ctx.bezierCurveTo(56.00567626953125 * scale, 59.53410339355469 * scale, 56.00567626953125 * scale, 64.53410339355469 * scale, 57.00567626953125 * scale, 67.53410339355469 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(115.00567626953125 * scale, 59.715911865234375 * scale);
        ctx.bezierCurveTo(119.00567626953125 * scale, 48.715911865234375 * scale, 126.00567626953125 * scale, 41.715911865234375 * scale, 129.00567626953125 * scale, 48.715911865234375 * scale);
        ctx.bezierCurveTo(131.00567626953125 * scale, 56.715911865234375 * scale, 133.00567626953125 * scale, 71.71591186523438 * scale, 127.00567626953125 * scale, 68.71591186523438 * scale);
        ctx.bezierCurveTo(120.00567626953125 * scale, 67.71591186523438 * scale, 114.00567626953125 * scale, 59.715911865234375 * scale, 116.00567626953125 * scale, 58.715911865234375 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        circle(ctx, 77 * scale, 107 * scale, 6 * scale);
        fill_path(ctx, color[2]);
        circle(ctx, 110 * scale, 107 * scale, 6 * scale);
        fill_path(ctx, color[2]);
        circle(ctx, 75 * scale, 105 * scale, 3 * scale);
        fill_path(ctx, color[4]);
        circle(ctx, 108 * scale, 105 * scale, 3 * scale);
        fill_path(ctx, color[4]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(88.00567626953125 * scale, 141.4431915283203 * scale);
        ctx.bezierCurveTo(93.00567626953125 * scale, 137.4431915283203 * scale, 96.00567626953125 * scale, 138.4431915283203 * scale, 100.00567626953125 * scale, 141.4431915283203 * scale);
        ctx.bezierCurveTo(103.00567626953125 * scale, 143.4431915283203 * scale, 101.00567626953125 * scale, 149.4431915283203 * scale, 95.00567626953125 * scale, 148.4431915283203 * scale);
        ctx.bezierCurveTo(85.00567626953125 * scale, 148.4431915283203 * scale, 86.00567626953125 * scale, 145.4431915283203 * scale, 88.00567626953125 * scale, 142.4431915283203 * scale);
        ctx.closePath();
        fill_path(ctx, color[1]);
        return can;
    };

    function create_meat(scale, useless, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        var w = scale * 55;
        var h = scale * 55;
        var shadow = scale * 8;
        var width = scale * 4;
        can.width = w;
        can.height = h;
        ctx.translate(-65 * scale, (-55 * scale) + shadow);
        ctx.globalAlpha = 1;
        ctx.beginPath();
        ctx.moveTo(95 * scale, 60 * scale);
        ctx.bezierCurveTo(107 * scale, 62 * scale, 110 * scale, 73 * scale, 107 * scale, 79 * scale);
        ctx.bezierCurveTo(104 * scale, 85 * scale, 85 * scale, 93 * scale, 81 * scale, 88 * scale);
        ctx.bezierCurveTo(74 * scale, 80 * scale, 85 * scale, 60 * scale, 95 * scale, 60 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[1], 3);
        ctx.globalAlpha = 1;
        ctx.beginPath();
        ctx.moveTo(91 * scale, 70 * scale);
        ctx.bezierCurveTo(91 * scale, 75 * scale, 100 * scale, 76 * scale, 100 * scale, 73 * scale);
        ctx.bezierCurveTo(100 * scale, 69 * scale, 89 * scale, 65 * scale, 91 * scale, 70 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[3], 3);
        return can;
    };

    function create_hurt_spider(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 238 * scale;
        can.height = 230 * scale;
        ctx.translate(-93 * scale, -110 * scale);
        circle(ctx, 213.5 * scale, 256.75 * scale, 75 * scale);
        fill_path(ctx, color);
        circle(ctx, 213.5 * scale, 175.75 * scale, 25 * scale);
        fill_path(ctx, color);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(156.5 * scale, 137.75 * scale);
        ctx.bezierCurveTo(170.5 * scale, 173.75 * scale, 195.5 * scale, 177.75 * scale, 209.5 * scale, 177.75 * scale);
        ctx.lineWidth = 17 * scale;
        ctx.strokeStyle = color;
        ctx.stroke();
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(217.5 * scale, 178.75 * scale);
        ctx.bezierCurveTo(251.5 * scale, 177.75 * scale, 263.5 * scale, 153.75 * scale, 270.5 * scale, 140.75 * scale);
        ctx.lineWidth = 17 * scale;
        ctx.strokeStyle = color;
        ctx.stroke();
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(130.5 * scale, 124.75 * scale);
        ctx.bezierCurveTo(153.5 * scale, 185.75 * scale, 198.5 * scale, 185.75 * scale, 213.5 * scale, 185.75 * scale);
        ctx.lineWidth = 17 * scale;
        ctx.strokeStyle = color;
        ctx.stroke();
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(214.5 * scale, 183.75 * scale);
        ctx.bezierCurveTo(265.5 * scale, 192.75 * scale, 293.5 * scale, 141.75 * scale, 297.5 * scale, 124.75 * scale);
        ctx.lineWidth = 17 * scale;
        ctx.strokeStyle = color;
        ctx.stroke();
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(107.5 * scale, 213.75 * scale);
        ctx.bezierCurveTo(151.5 * scale, 190.75 * scale, 198.5 * scale, 184.75 * scale, 210.5 * scale, 184.75 * scale);
        ctx.lineWidth = 17 * scale;
        ctx.strokeStyle = color;
        ctx.stroke();
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(212.5 * scale, 187.75 * scale);
        ctx.bezierCurveTo(258.5 * scale, 182.75 * scale, 286.5 * scale, 194.75 * scale, 314.5 * scale, 206.75 * scale);
        ctx.lineWidth = 17 * scale;
        ctx.strokeStyle = color;
        ctx.stroke();
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(102.5 * scale, 258.75 * scale);
        ctx.bezierCurveTo(142.5 * scale, 200.75 * scale, 193.5 * scale, 194.75 * scale, 211.5 * scale, 185.75 * scale);
        ctx.lineWidth = 17 * scale;
        ctx.strokeStyle = color;
        ctx.stroke();
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(214.5 * scale, 192.75 * scale);
        ctx.bezierCurveTo(276.5 * scale, 194.75 * scale, 306.5 * scale, 233.75 * scale, 316.5 * scale, 246.75 * scale);
        ctx.lineWidth = 17 * scale;
        ctx.strokeStyle = color;
        ctx.stroke();
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(219.5 * scale, 158.75 * scale);
        ctx.bezierCurveTo(226.5 * scale, 159.75 * scale, 227.5 * scale, 147.75 * scale, 219.5 * scale, 145.75 * scale);
        ctx.closePath();
        ctx.lineWidth = 10 * scale;
        ctx.strokeStyle = color;
        ctx.stroke();
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(210.5 * scale, 160.75 * scale);
        ctx.bezierCurveTo(203.5 * scale, 159.75 * scale, 199.5 * scale, 146.75 * scale, 210.5 * scale, 145.75 * scale);
        ctx.closePath();
        ctx.lineWidth = 10 * scale;
        ctx.strokeStyle = color;
        ctx.stroke();
        return can;
    };

    function create_spider(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 238 * scale;
        can.height = 230 * scale;
        ctx.translate(-93 * scale, (-110 * scale) + (5 * scale));
        ctx.globalAlpha = 0.3;
        circle(ctx, 213.5 * scale, 256.75 * scale, 75 * scale);
        fill_path(ctx, color[5]);
        circle(ctx, 213.5 * scale, 175.75 * scale, 25 * scale);
        fill_path(ctx, color[5]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(156.5 * scale, 137.75 * scale);
        ctx.bezierCurveTo(170.5 * scale, 173.75 * scale, 195.5 * scale, 177.75 * scale, 209.5 * scale, 177.75 * scale);
        ctx.lineWidth = 17 * scale;
        ctx.strokeStyle = color[5];
        ctx.stroke();
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(217.5 * scale, 178.75 * scale);
        ctx.bezierCurveTo(251.5 * scale, 177.75 * scale, 263.5 * scale, 153.75 * scale, 270.5 * scale, 140.75 * scale);
        ctx.lineWidth = 17 * scale;
        ctx.strokeStyle = color[5];
        ctx.stroke();
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(130.5 * scale, 124.75 * scale);
        ctx.bezierCurveTo(153.5 * scale, 185.75 * scale, 198.5 * scale, 185.75 * scale, 213.5 * scale, 185.75 * scale);
        ctx.lineWidth = 17 * scale;
        ctx.strokeStyle = color[5];
        ctx.stroke();
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(214.5 * scale, 183.75 * scale);
        ctx.bezierCurveTo(265.5 * scale, 192.75 * scale, 293.5 * scale, 141.75 * scale, 297.5 * scale, 124.75 * scale);
        ctx.lineWidth = 17 * scale;
        ctx.strokeStyle = color[5];
        ctx.stroke();
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(107.5 * scale, 213.75 * scale);
        ctx.bezierCurveTo(151.5 * scale, 190.75 * scale, 198.5 * scale, 184.75 * scale, 210.5 * scale, 184.75 * scale);
        ctx.lineWidth = 17 * scale;
        ctx.strokeStyle = color[5];
        ctx.stroke();
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(212.5 * scale, 187.75 * scale);
        ctx.bezierCurveTo(258.5 * scale, 182.75 * scale, 286.5 * scale, 194.75 * scale, 314.5 * scale, 206.75 * scale);
        ctx.lineWidth = 17 * scale;
        ctx.strokeStyle = color[5];
        ctx.stroke();
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(102.5 * scale, 258.75 * scale);
        ctx.bezierCurveTo(142.5 * scale, 200.75 * scale, 193.5 * scale, 194.75 * scale, 211.5 * scale, 185.75 * scale);
        ctx.lineWidth = 17 * scale;
        ctx.strokeStyle = color[5];
        ctx.stroke();
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(214.5 * scale, 192.75 * scale);
        ctx.bezierCurveTo(276.5 * scale, 194.75 * scale, 306.5 * scale, 233.75 * scale, 316.5 * scale, 246.75 * scale);
        ctx.lineWidth = 17 * scale;
        ctx.strokeStyle = color[5];
        ctx.stroke();
        ctx.translate(0, -5);
        ctx.globalAlpha = 1;
        circle(ctx, 213.5 * scale, 256.75 * scale, 75 * scale);
        fill_path(ctx, color[3]);
        circle(ctx, 213.5 * scale, 175.75 * scale, 25 * scale);
        fill_path(ctx, color[3]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(219.5 * scale, 158.75 * scale);
        ctx.bezierCurveTo(226.5 * scale, 159.75 * scale, 227.5 * scale, 147.75 * scale, 219.5 * scale, 145.75 * scale);
        ctx.closePath();
        ctx.lineWidth = 10 * scale;
        ctx.strokeStyle = color[3];
        ctx.stroke();
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(210.5 * scale, 160.75 * scale);
        ctx.bezierCurveTo(203.5 * scale, 159.75 * scale, 199.5 * scale, 146.75 * scale, 210.5 * scale, 145.75 * scale);
        ctx.closePath();
        ctx.lineWidth = 10 * scale;
        ctx.strokeStyle = color[3];
        ctx.stroke();
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(219.5 * scale, 158.75 * scale);
        ctx.bezierCurveTo(226.5 * scale, 159.75 * scale, 227.5 * scale, 147.75 * scale, 219.5 * scale, 145.75 * scale);
        ctx.closePath();
        ctx.fillStyle = color[0];
        ctx.fill();
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(210.5 * scale, 160.75 * scale);
        ctx.bezierCurveTo(203.5 * scale, 159.75 * scale, 199.5 * scale, 146.75 * scale, 210.5 * scale, 145.75 * scale);
        ctx.closePath();
        ctx.fillStyle = color[0];
        ctx.fill();
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(156.5 * scale, 137.75 * scale);
        ctx.bezierCurveTo(170.5 * scale, 173.75 * scale, 195.5 * scale, 177.75 * scale, 209.5 * scale, 177.75 * scale);
        ctx.lineWidth = 17 * scale;
        ctx.strokeStyle = color[3];
        ctx.stroke();
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(217.5 * scale, 178.75 * scale);
        ctx.bezierCurveTo(251.5 * scale, 177.75 * scale, 263.5 * scale, 153.75 * scale, 270.5 * scale, 140.75 * scale);
        ctx.lineWidth = 17 * scale;
        ctx.strokeStyle = color[3];
        ctx.stroke();
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(130.5 * scale, 124.75 * scale);
        ctx.bezierCurveTo(153.5 * scale, 185.75 * scale, 198.5 * scale, 185.75 * scale, 213.5 * scale, 185.75 * scale);
        ctx.lineWidth = 17 * scale;
        ctx.strokeStyle = color[3];
        ctx.stroke();
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(214.5 * scale, 183.75 * scale);
        ctx.bezierCurveTo(265.5 * scale, 192.75 * scale, 293.5 * scale, 141.75 * scale, 297.5 * scale, 124.75 * scale);
        ctx.lineWidth = 17 * scale;
        ctx.strokeStyle = color[3];
        ctx.stroke();
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(107.5 * scale, 213.75 * scale);
        ctx.bezierCurveTo(151.5 * scale, 190.75 * scale, 198.5 * scale, 184.75 * scale, 210.5 * scale, 184.75 * scale);
        ctx.lineWidth = 17 * scale;
        ctx.strokeStyle = color[3];
        ctx.stroke();
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(212.5 * scale, 187.75 * scale);
        ctx.bezierCurveTo(258.5 * scale, 182.75 * scale, 286.5 * scale, 194.75 * scale, 314.5 * scale, 206.75 * scale);
        ctx.lineWidth = 17 * scale;
        ctx.strokeStyle = color[3];
        ctx.stroke();
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(102.5 * scale, 258.75 * scale);
        ctx.bezierCurveTo(142.5 * scale, 200.75 * scale, 193.5 * scale, 194.75 * scale, 211.5 * scale, 185.75 * scale);
        ctx.lineWidth = 17 * scale;
        ctx.strokeStyle = color[3];
        ctx.stroke();
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(214.5 * scale, 192.75 * scale);
        ctx.bezierCurveTo(276.5 * scale, 194.75 * scale, 306.5 * scale, 233.75 * scale, 316.5 * scale, 246.75 * scale);
        ctx.lineWidth = 17 * scale;
        ctx.strokeStyle = color[3];
        ctx.stroke();
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(156.5 * scale, 137.75 * scale);
        ctx.bezierCurveTo(170.5 * scale, 173.75 * scale, 195.5 * scale, 177.75 * scale, 209.5 * scale, 177.75 * scale);
        ctx.lineWidth = 8 * scale;
        ctx.strokeStyle = color[0];
        ctx.stroke();
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(217.5 * scale, 178.75 * scale);
        ctx.bezierCurveTo(251.5 * scale, 177.75 * scale, 263.5 * scale, 153.75 * scale, 270.5 * scale, 140.75 * scale);
        ctx.lineWidth = 8 * scale;
        ctx.strokeStyle = color[0];
        ctx.stroke();
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(130.5 * scale, 124.75 * scale);
        ctx.bezierCurveTo(153.5 * scale, 185.75 * scale, 198.5 * scale, 185.75 * scale, 213.5 * scale, 185.75 * scale);
        ctx.lineWidth = 8 * scale;
        ctx.strokeStyle = color[0];
        ctx.stroke();
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(214.5 * scale, 183.75 * scale);
        ctx.bezierCurveTo(265.5 * scale, 192.75 * scale, 293.5 * scale, 141.75 * scale, 297.5 * scale, 124.75 * scale);
        ctx.lineWidth = 8 * scale;
        ctx.strokeStyle = color[0];
        ctx.stroke();
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(107.5 * scale, 213.75 * scale);
        ctx.bezierCurveTo(151.5 * scale, 190.75 * scale, 198.5 * scale, 184.75 * scale, 210.5 * scale, 184.75 * scale);
        ctx.lineWidth = 8 * scale;
        ctx.strokeStyle = color[0];
        ctx.stroke();
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(212.5 * scale, 187.75 * scale);
        ctx.bezierCurveTo(258.5 * scale, 182.75 * scale, 286.5 * scale, 194.75 * scale, 314.5 * scale, 206.75 * scale);
        ctx.lineWidth = 8 * scale;
        ctx.strokeStyle = color[0];
        ctx.stroke();
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(102.5 * scale, 258.75 * scale);
        ctx.bezierCurveTo(142.5 * scale, 200.75 * scale, 193.5 * scale, 194.75 * scale, 211.5 * scale, 185.75 * scale);
        ctx.lineWidth = 8 * scale;
        ctx.strokeStyle = color[0];
        ctx.stroke();
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(214.5 * scale, 192.75 * scale);
        ctx.bezierCurveTo(276.5 * scale, 194.75 * scale, 306.5 * scale, 233.75 * scale, 316.5 * scale, 246.75 * scale);
        ctx.lineWidth = 8 * scale;
        ctx.strokeStyle = color[0];
        ctx.stroke();
        circle(ctx, 213.5 * scale, 256.75 * scale, 70 * scale);
        fill_path(ctx, color[0]);
        circle(ctx, 213.5 * scale, 175.75 * scale, 20 * scale);
        fill_path(ctx, color[0]);
        circle(ctx, 222 * scale, 166 * scale, 5 * scale);
        ctx.fillStyle = color[2];
        ctx.fill();
        circle(ctx, 205 * scale, 166 * scale, 5 * scale);
        ctx.fillStyle = color[2];
        ctx.fill();
        circle(ctx, 206.2 * scale, 167 * scale, 2.5 * scale);
        ctx.fillStyle = color[4];
        ctx.fill();
        circle(ctx, 223.2 * scale, 167 * scale, 2.5 * scale);
        ctx.fillStyle = color[4];
        ctx.fill();
        ctx.save();
        ctx.translate(213.5 * scale, 293.75 * scale);
        ctx.rotate(0.76);
        round_rect(ctx, -22 * scale, -21 * scale, 44 * scale, 42 * scale, 6 * scale);
        ctx.restore();
        ctx.fillStyle = color[1];
        ctx.fill();
        ctx.save();
        ctx.translate(212.5 * scale, 258.25 * scale);
        ctx.rotate(0.8);
        round_rect(ctx, -15 * scale, -14.5 * scale, 30 * scale, 29 * scale, 6 * scale);
        ctx.restore();
        ctx.fillStyle = color[1];
        ctx.fill();
        return can;
    };

    function create_web(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 450 * scale;
        can.height = 470 * scale;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(226.5 * scale, 91.546875 * scale);
        ctx.bezierCurveTo(254.5 * scale, 115.546875 * scale, 261.5 * scale, 115.546875 * scale, 294.5 * scale, 109.546875 * scale);
        ctx.bezierCurveTo(299.5 * scale, 141.546875 * scale, 315.5 * scale, 151.546875 * scale, 344.5 * scale, 158.546875 * scale);
        ctx.bezierCurveTo(330.5 * scale, 195.546875 * scale, 341.5 * scale, 207.546875 * scale, 361.5 * scale, 226.546875 * scale);
        ctx.bezierCurveTo(331.5 * scale, 251.546875 * scale, 335.5 * scale, 270.546875 * scale, 342.5 * scale, 295.546875 * scale);
        ctx.bezierCurveTo(300.5 * scale, 296.546875 * scale, 293.5 * scale, 325.546875 * scale, 292.5 * scale, 344.546875 * scale);
        ctx.bezierCurveTo(257.5 * scale, 326.546875 * scale, 242.5 * scale, 338.546875 * scale, 224.5 * scale, 361.546875 * scale);
        ctx.bezierCurveTo(200.5 * scale, 329.546875 * scale, 180.5 * scale, 334.546875 * scale, 155.5 * scale, 341.546875 * scale);
        ctx.bezierCurveTo(146.5 * scale, 307.546875 * scale, 140.5 * scale, 302.546875 * scale, 107.5 * scale, 292.546875 * scale);
        ctx.bezierCurveTo(117.5 * scale, 253.546875 * scale, 109.5 * scale, 244.546875 * scale, 89.5 * scale, 224.546875 * scale);
        ctx.bezierCurveTo(118.5 * scale, 191.546875 * scale, 114.5 * scale, 182.546875 * scale, 108.5 * scale, 156.546875 * scale);
        ctx.bezierCurveTo(143.5 * scale, 149.546875 * scale, 150.5 * scale, 136.546875 * scale, 157.5 * scale, 106.546875 * scale);
        ctx.bezierCurveTo(202.5 * scale, 120.546875 * scale, 211.5 * scale, 103.546875 * scale, 228.5 * scale, 91.546875 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[0], 4);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(224.5 * scale, 129.546875 * scale);
        ctx.bezierCurveTo(247.5 * scale, 147.546875 * scale, 252.5 * scale, 143.546875 * scale, 274.5 * scale, 141.546875 * scale);
        ctx.bezierCurveTo(279.5 * scale, 163.546875 * scale, 289.5 * scale, 168.546875 * scale, 311.5 * scale, 178.546875 * scale);
        ctx.bezierCurveTo(301.5 * scale, 199.546875 * scale, 307.5 * scale, 213.546875 * scale, 323.5 * scale, 226.546875 * scale);
        ctx.bezierCurveTo(303.5 * scale, 240.546875 * scale, 303.5 * scale, 255.546875 * scale, 312.5 * scale, 275.546875 * scale);
        ctx.bezierCurveTo(281.5 * scale, 278.546875 * scale, 276.5 * scale, 291.546875 * scale, 272.5 * scale, 313.546875 * scale);
        ctx.bezierCurveTo(248.5 * scale, 301.546875 * scale, 239.5 * scale, 310.546875 * scale, 224.5 * scale, 324.546875 * scale);
        ctx.bezierCurveTo(211.5 * scale, 304.546875 * scale, 199.5 * scale, 301.546875 * scale, 176.5 * scale, 309.546875 * scale);
        ctx.bezierCurveTo(165.5 * scale, 276.546875 * scale, 159.5 * scale, 275.546875 * scale, 138.5 * scale, 274.546875 * scale);
        ctx.bezierCurveTo(148.5 * scale, 248.546875 * scale, 140.5 * scale, 237.546875 * scale, 125.5 * scale, 225.546875 * scale);
        ctx.bezierCurveTo(145.5 * scale, 205.546875 * scale, 146.5 * scale, 195.546875 * scale, 142.5 * scale, 176.546875 * scale);
        ctx.bezierCurveTo(173.5 * scale, 164.546875 * scale, 173.5 * scale, 155.546875 * scale, 178.5 * scale, 140.546875 * scale);
        ctx.bezierCurveTo(214.5 * scale, 143.546875 * scale, 214.5 * scale, 135.546875 * scale, 226.5 * scale, 129.546875 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[0], 4);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(224.5 * scale, 160.546875 * scale);
        ctx.bezierCurveTo(236.5 * scale, 168.546875 * scale, 239.5 * scale, 168.546875 * scale, 258.5 * scale, 168.546875 * scale);
        ctx.bezierCurveTo(261.5 * scale, 185.546875 * scale, 268.5 * scale, 187.546875 * scale, 282.5 * scale, 192.546875 * scale);
        ctx.bezierCurveTo(277.5 * scale, 208.546875 * scale, 283.5 * scale, 216.546875 * scale, 289.5 * scale, 228.546875 * scale);
        ctx.bezierCurveTo(277.5 * scale, 243.546875 * scale, 280.5 * scale, 253.546875 * scale, 281.5 * scale, 260.546875 * scale);
        ctx.bezierCurveTo(264.5 * scale, 260.546875 * scale, 259.5 * scale, 269.546875 * scale, 256.5 * scale, 283.546875 * scale);
        ctx.bezierCurveTo(244.5 * scale, 276.546875 * scale, 232.5 * scale, 283.546875 * scale, 223.5 * scale, 291.546875 * scale);
        ctx.bezierCurveTo(213.5 * scale, 276.546875 * scale, 205.5 * scale, 278.546875 * scale, 190.5 * scale, 281.546875 * scale);
        ctx.bezierCurveTo(181.5 * scale, 262.546875 * scale, 173.5 * scale, 259.546875 * scale, 165.5 * scale, 258.546875 * scale);
        ctx.bezierCurveTo(169.5 * scale, 239.546875 * scale, 167.5 * scale, 233.546875 * scale, 157.5 * scale, 225.546875 * scale);
        ctx.bezierCurveTo(169.5 * scale, 208.546875 * scale, 170.5 * scale, 203.546875 * scale, 168.5 * scale, 192.546875 * scale);
        ctx.bezierCurveTo(181.5 * scale, 187.546875 * scale, 188.5 * scale, 179.546875 * scale, 192.5 * scale, 168.546875 * scale);
        ctx.bezierCurveTo(216.5 * scale, 170.546875 * scale, 218.5 * scale, 163.546875 * scale, 225.5 * scale, 160.546875 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[0], 4);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(205.5 * scale, 194.546875 * scale);
        ctx.bezierCurveTo(216.5 * scale, 192.546875 * scale, 219.5 * scale, 191.546875 * scale, 225.5 * scale, 185.546875 * scale);
        ctx.bezierCurveTo(232.5 * scale, 193.546875 * scale, 237.5 * scale, 191.546875 * scale, 246.5 * scale, 192.546875 * scale);
        ctx.bezierCurveTo(249.5 * scale, 202.546875 * scale, 253.5 * scale, 205.546875 * scale, 258.5 * scale, 207.546875 * scale);
        ctx.bezierCurveTo(259.5 * scale, 222.546875 * scale, 256.5 * scale, 223.546875 * scale, 265.5 * scale, 226.546875 * scale);
        ctx.bezierCurveTo(256.5 * scale, 231.546875 * scale, 255.5 * scale, 241.546875 * scale, 259.5 * scale, 248.546875 * scale);
        ctx.bezierCurveTo(250.5 * scale, 245.546875 * scale, 245.5 * scale, 252.546875 * scale, 243.5 * scale, 260.546875 * scale);
        ctx.bezierCurveTo(234.5 * scale, 256.546875 * scale, 229.5 * scale, 258.546875 * scale, 223.5 * scale, 265.546875 * scale);
        ctx.bezierCurveTo(218.5 * scale, 255.546875 * scale, 213.5 * scale, 257.546875 * scale, 204.5 * scale, 261.546875 * scale);
        ctx.bezierCurveTo(203.5 * scale, 251.546875 * scale, 198.5 * scale, 248.546875 * scale, 189.5 * scale, 244.546875 * scale);
        ctx.bezierCurveTo(194.5 * scale, 237.546875 * scale, 192.5 * scale, 231.546875 * scale, 184.5 * scale, 225.546875 * scale);
        ctx.bezierCurveTo(191.5 * scale, 211.546875 * scale, 192.5 * scale, 209.546875 * scale, 190.5 * scale, 204.546875 * scale);
        ctx.bezierCurveTo(200.5 * scale, 204.546875 * scale, 204.5 * scale, 198.546875 * scale, 207.5 * scale, 194.546875 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[0], 4);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(149.5 * scale, 93.546875 * scale);
        ctx.bezierCurveTo(287.5 * scale, 332.546875 * scale, 226 * scale, 225.546875 * scale, 302.5 * scale, 357.546875 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[0], 4);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(224.5 * scale, 66.546875 * scale);
        ctx.bezierCurveTo(224.5 * scale, 223.546875 * scale, 224.5 * scale, 223.546875 * scale, 224.5 * scale, 380.546875 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[0], 4);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(302.5 * scale, 88.546875 * scale);
        ctx.bezierCurveTo(222.5 * scale, 227.546875 * scale, 222.5 * scale, 227.546875 * scale, 142.5 * scale, 366.546875 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[0], 4);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(361.5 * scale, 147.546875 * scale);
        ctx.bezierCurveTo(223 * scale, 226.546875 * scale, 223 * scale, 226.546875 * scale, 84.5 * scale, 305.546875 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[0], 4);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(379.5 * scale, 225.546875 * scale);
        ctx.bezierCurveTo(221 * scale, 225.546875 * scale, 221 * scale, 225.546875 * scale, 62.5 * scale, 225.546875 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[0], 4);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(90.5 * scale, 147.546875 * scale);
        ctx.bezierCurveTo(226.5 * scale, 226.546875 * scale, 226.5 * scale, 226.546875 * scale, 362.5 * scale, 305.546875 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[0], 4);
        return can;
    };

    function create_dead_box(scale, color, i) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 400 * scale;
        can.height = 400 * scale;
        ctx.save();
        ctx.translate(202.5 * scale, 147.5 * scale);
        round_rect(ctx, -96.5 * scale, -21.5 * scale, 193 * scale, 193 * scale, 0 * scale);
        ctx.restore();
        fill_path(ctx, color[0], color[1], 12 * scale);
        ctx.save();
        ctx.translate(202.5 * scale, 190.5 * scale);
        round_rect(ctx, 96.5 * scale, -21.5 * scale, -193 * scale, 43 * scale, 0 * scale);
        ctx.restore();
        fill_path(ctx, color[2], color[1], 12 * scale);
        ctx.save();
        ctx.save();
        ctx.translate(202.5 * scale, 233.5 * scale);
        round_rect(ctx, -96.5 * scale, -20.5 * scale, 193 * scale, 41 * scale, 0 * scale);
        ctx.restore();
        fill_path(ctx, color[3], color[1], 12 * scale);
        ctx.save();
        ctx.translate(202.5 * scale, 275 * scale);
        round_rect(ctx, 96.5 * scale, -21 * scale, -193 * scale, 42 * scale, 0 * scale);
        ctx.restore();
        fill_path(ctx, color[0], color[1], 12 * scale);
        ctx.save();
        ctx.translate(201 * scale, 212 * scale);
        ctx.rotate(8.64);
        round_rect(ctx, -116 * scale, -22 * scale, 232 * scale, 44 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[3], color[1], 12 * scale);
        ctx.save();
        ctx.translate(203.5 * scale, 121.5 * scale);
        round_rect(ctx, -115.5 * scale, -20.5 * scale, 231 * scale, 41 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[3], color[1], 12 * scale);
        ctx.save();
        ctx.translate(203.5 * scale, 299 * scale);
        round_rect(ctx, -115.5 * scale, -20 * scale, 231 * scale, 40 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[3], color[1], 12 * scale);
        ctx.save();
        ctx.translate(298.5 * scale, 210 * scale);
        round_rect(ctx, -20.5 * scale, -109 * scale, 41 * scale, 218 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[3], color[1], 12 * scale);
        ctx.save();
        ctx.translate(108.5 * scale, 210 * scale);
        round_rect(ctx, -20.5 * scale, -109 * scale, 41 * scale, 218 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[3], color[1], 12 * scale);
        ctx.save();
        ctx.translate(204 * scale, 121.5 * scale);
        round_rect(ctx, -92 * scale, -9.5 * scale, 184 * scale, 19 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[3], color[3], 10 * scale);
        ctx.save();
        ctx.translate(197 * scale, 299 * scale);
        round_rect(ctx, 85 * scale, -9 * scale, -170 * scale, 18 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[3], color[3], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(94 * scale, 317 * scale);
        ctx.bezierCurveTo(110.5 * scale, 299.5 * scale, 110.5 * scale, 299.5 * scale, 127 * scale, 282 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[1], 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(279 * scale, 142 * scale);
        ctx.bezierCurveTo(296.5 * scale, 125.5 * scale, 296.5 * scale, 125.5 * scale, 314 * scale, 109 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[1], 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(93 * scale, 106 * scale);
        ctx.bezierCurveTo(110.5 * scale, 124 * scale, 110.5 * scale, 124 * scale, 128 * scale, 142 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[1], 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(281 * scale, 282 * scale);
        ctx.bezierCurveTo(296 * scale, 297.5 * scale, 296 * scale, 297.5 * scale, 311 * scale, 313 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[1], 12 * scale);
        if (i == 0) {
            ctx.scale(2, 2);
            ctx.translate(-7 * scale, 55 * scale);
            ctx.rotate(-0.5);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(60 * scale, 47 * scale);
            ctx.bezierCurveTo(81 * scale, 46 * scale, 85 * scale, 47 * scale, 83 * scale, 63 * scale);
            ctx.bezierCurveTo(83 * scale, 72 * scale, 83 * scale, 75 * scale, 72 * scale, 73 * scale);
            ctx.bezierCurveTo(68 * scale, 80 * scale, 69 * scale, 82 * scale, 66 * scale, 73 * scale);
            ctx.bezierCurveTo(62 * scale, 81 * scale, 61 * scale, 82 * scale, 59 * scale, 73 * scale);
            ctx.bezierCurveTo(54 * scale, 81 * scale, 55 * scale, 81 * scale, 52 * scale, 74 * scale);
            ctx.bezierCurveTo(38 * scale, 76 * scale, 41 * scale, 74 * scale, 40 * scale, 66 * scale);
            ctx.bezierCurveTo(38 * scale, 45 * scale, 39 * scale, 49 * scale, 59 * scale, 47 * scale);
            ctx.closePath();
            fill_path(ctx, color[4], color[4], 5 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(68 * scale, 54 * scale);
            ctx.bezierCurveTo(75 * scale, 54 * scale, 77 * scale, 62 * scale, 71 * scale, 64 * scale);
            ctx.bezierCurveTo(62 * scale, 65 * scale, 63 * scale, 54 * scale, 68 * scale, 54 * scale);
            ctx.closePath();
            fill_path(ctx, color[3]);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(50 * scale, 55 * scale);
            ctx.bezierCurveTo(57 * scale, 55 * scale, 58 * scale, 65 * scale, 52 * scale, 65 * scale);
            ctx.bezierCurveTo(44 * scale, 66 * scale, 44 * scale, 54 * scale, 50 * scale, 55 * scale);
            ctx.closePath();
            fill_path(ctx, color[3]);
        } else if (i == 1) {
            ctx.scale(0.6, 0.6);
            ctx.translate(185 * scale, 165 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(108 * scale, 56 * scale);
            ctx.bezierCurveTo(136 * scale, 58 * scale, 203 * scale, 69 * scale, 234 * scale, 75 * scale);
            ctx.bezierCurveTo(246 * scale, 77 * scale, 247 * scale, 78 * scale, 245 * scale, 90 * scale);
            ctx.bezierCurveTo(238 * scale, 143 * scale, 228 * scale, 197 * scale, 214 * scale, 259 * scale);
            ctx.bezierCurveTo(212 * scale, 267 * scale, 209 * scale, 270 * scale, 189 * scale, 268 * scale);
            ctx.bezierCurveTo(142 * scale, 264 * scale, 106 * scale, 260 * scale, 75 * scale, 253 * scale);
            ctx.bezierCurveTo(60 * scale, 250 * scale, 64 * scale, 250 * scale, 66 * scale, 221 * scale);
            ctx.bezierCurveTo(71 * scale, 168 * scale, 87 * scale, 95 * scale, 98 * scale, 67 * scale);
            ctx.bezierCurveTo(101 * scale, 57 * scale, 103 * scale, 56 * scale, 106 * scale, 56 * scale);
            ctx.closePath();
            fill_path(ctx, color[4], color[4], 20 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(112 * scale, 72 * scale);
            ctx.bezierCurveTo(132 * scale, 73 * scale, 227 * scale, 85 * scale, 226 * scale, 91 * scale);
            ctx.bezierCurveTo(231 * scale, 89 * scale, 217 * scale, 196 * scale, 200 * scale, 250 * scale);
            ctx.bezierCurveTo(196 * scale, 254 * scale, 175 * scale, 249 * scale, 166 * scale, 249 * scale);
            ctx.bezierCurveTo(91 * scale, 241 * scale, 82 * scale, 236 * scale, 83 * scale, 232 * scale);
            ctx.bezierCurveTo(90 * scale, 144 * scale, 108 * scale, 71 * scale, 111 * scale, 72 * scale);
            ctx.closePath();
            fill_path(ctx, undefined, color[0], 13 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(132 * scale, 117 * scale);
            ctx.bezierCurveTo(171 * scale, 86 * scale, 191 * scale, 101 * scale, 188 * scale, 134 * scale);
            ctx.bezierCurveTo(185 * scale, 154 * scale, 170 * scale, 158 * scale, 153 * scale, 158 * scale);
            ctx.bezierCurveTo(143 * scale, 172 * scale, 146 * scale, 180 * scale, 147 * scale, 193 * scale);
            fill_path(ctx, undefined, color[0], 20 * scale);
            circle(ctx, 142 * scale, 221 * scale, 16.1245154965971 * scale);
            fill_path(ctx, color[0]);
        }
        return can;
    };

    function create_hurt_dead_box(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 400 * scale;
        can.height = 400 * scale;
        ctx.save();
        ctx.translate(202.5 * scale, 147.5 * scale);
        round_rect(ctx, -96.5 * scale, -21.5 * scale, 193 * scale, 43 * scale, 0 * scale);
        ctx.restore();
        fill_path(ctx, color[0], color[0], 12 * scale);
        ctx.save();
        ctx.translate(202.5 * scale, 190.5 * scale);
        round_rect(ctx, 96.5 * scale, -21.5 * scale, -193 * scale, 43 * scale, 0 * scale);
        ctx.restore();
        fill_path(ctx, color[0], color[0], 12 * scale);
        ctx.save();
        ctx.translate(202.5 * scale, 233.5 * scale);
        round_rect(ctx, -96.5 * scale, -20.5 * scale, 193 * scale, 41 * scale, 0 * scale);
        ctx.restore();
        fill_path(ctx, color[0], color[0], 12 * scale);
        ctx.save();
        ctx.translate(202.5 * scale, 275 * scale);
        round_rect(ctx, 96.5 * scale, -21 * scale, -193 * scale, 42 * scale, 0 * scale);
        ctx.restore();
        fill_path(ctx, color[0], color[0], 12 * scale);
        ctx.save();
        ctx.translate(203.5 * scale, 121.5 * scale);
        round_rect(ctx, -115.5 * scale, -20.5 * scale, 231 * scale, 41 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[0], color[0], 12 * scale);
        ctx.save();
        ctx.translate(203.5 * scale, 299 * scale);
        round_rect(ctx, -115.5 * scale, -20 * scale, 231 * scale, 40 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[0], color[0], 12 * scale);
        ctx.save();
        ctx.translate(298.5 * scale, 210 * scale);
        round_rect(ctx, -20.5 * scale, -109 * scale, 41 * scale, 218 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[0], color[0], 12 * scale);
        ctx.save();
        ctx.translate(108.5 * scale, 210 * scale);
        round_rect(ctx, -20.5 * scale, -109 * scale, 41 * scale, 218 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[0], color[0], 12 * scale);
        return can;
    };

    function create_dead_box_ui(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 650 * scale;
        can.height = 650 * scale;
        ctx.scale(1.9, 1.9);
        ctx.save();
        ctx.translate(202.5 * scale, 147.5 * scale);
        round_rect(ctx, -96.5 * scale, -21.5 * scale, 193 * scale, 193 * scale, 0 * scale);
        ctx.restore();
        fill_path(ctx, color[4], color[1], 12 * scale);
        ctx.save();
        ctx.translate(203.5 * scale, 121.5 * scale);
        round_rect(ctx, -115.5 * scale, -20.5 * scale, 231 * scale, 41 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[3], color[1], 12 * scale);
        ctx.save();
        ctx.translate(203.5 * scale, 299 * scale);
        round_rect(ctx, -115.5 * scale, -20 * scale, 231 * scale, 40 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[3], color[1], 12 * scale);
        ctx.save();
        ctx.translate(298.5 * scale, 210 * scale);
        round_rect(ctx, -20.5 * scale, -109 * scale, 41 * scale, 218 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[3], color[1], 12 * scale);
        ctx.save();
        ctx.translate(108.5 * scale, 210 * scale);
        round_rect(ctx, -20.5 * scale, -109 * scale, 41 * scale, 218 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[3], color[1], 12 * scale);
        ctx.save();
        ctx.translate(204 * scale, 121.5 * scale);
        round_rect(ctx, -92 * scale, -9.5 * scale, 184 * scale, 19 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[3], color[3], 10 * scale);
        ctx.save();
        ctx.translate(197 * scale, 299 * scale);
        round_rect(ctx, 85 * scale, -9 * scale, -170 * scale, 18 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[3], color[3], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(94 * scale, 317 * scale);
        ctx.bezierCurveTo(110.5 * scale, 299.5 * scale, 110.5 * scale, 299.5 * scale, 127 * scale, 282 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[1], 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(279 * scale, 142 * scale);
        ctx.bezierCurveTo(296.5 * scale, 125.5 * scale, 296.5 * scale, 125.5 * scale, 314 * scale, 109 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[1], 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(93 * scale, 106 * scale);
        ctx.bezierCurveTo(110.5 * scale, 124 * scale, 110.5 * scale, 124 * scale, 128 * scale, 142 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[1], 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(281 * scale, 282 * scale);
        ctx.bezierCurveTo(296 * scale, 297.5 * scale, 296 * scale, 297.5 * scale, 311 * scale, 313 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[1], 12 * scale);
        return can;
    };

    function create_SANDWICH(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 400 * scale;
        can.height = 400 * scale;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(101 * scale, 255 * scale);
        ctx.bezierCurveTo(113 * scale, 243 * scale, 179 * scale, 210 * scale, 219 * scale, 196 * scale);
        ctx.bezierCurveTo(252 * scale, 203 * scale, 288 * scale, 215 * scale, 318 * scale, 233 * scale);
        ctx.bezierCurveTo(304 * scale, 254 * scale, 258 * scale, 273 * scale, 215 * scale, 296 * scale);
        ctx.bezierCurveTo(161 * scale, 287 * scale, 119 * scale, 270 * scale, 102 * scale, 257 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[1], 14 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(99 * scale, 258 * scale);
        ctx.bezierCurveTo(99 * scale, 272.5 * scale, 99 * scale, 272.5 * scale, 99 * scale, 287 * scale);
        ctx.bezierCurveTo(166 * scale, 319 * scale, 193 * scale, 320 * scale, 212 * scale, 324 * scale);
        ctx.bezierCurveTo(292 * scale, 286 * scale, 312 * scale, 271 * scale, 319 * scale, 263 * scale);
        ctx.bezierCurveTo(320 * scale, 249 * scale, 320 * scale, 241 * scale, 318 * scale, 234 * scale);
        ctx.bezierCurveTo(300 * scale, 254 * scale, 254 * scale, 277 * scale, 216 * scale, 294 * scale);
        ctx.bezierCurveTo(190 * scale, 296 * scale, 135 * scale, 276 * scale, 102 * scale, 258 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[1], 14 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(212 * scale, 323 * scale);
        ctx.bezierCurveTo(211.5 * scale, 310.5 * scale, 211.5 * scale, 310.5 * scale, 211 * scale, 298 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[1], 14 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(212 * scale, 210 * scale);
        ctx.bezierCurveTo(286 * scale, 210 * scale, 331 * scale, 254 * scale, 212 * scale, 276 * scale);
        ctx.bezierCurveTo(108 * scale, 276 * scale, 112 * scale, 222 * scale, 213 * scale, 208 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 14 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(98 * scale, 200 * scale);
        ctx.bezierCurveTo(126 * scale, 216 * scale, 177 * scale, 232 * scale, 213 * scale, 237 * scale);
        ctx.bezierCurveTo(266 * scale, 218 * scale, 288 * scale, 209 * scale, 318 * scale, 190 * scale);
        ctx.bezierCurveTo(269 * scale, 164 * scale, 239 * scale, 158 * scale, 214 * scale, 153 * scale);
        ctx.bezierCurveTo(148 * scale, 172 * scale, 131 * scale, 182 * scale, 98 * scale, 200 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[1], 14 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(97 * scale, 204 * scale);
        ctx.bezierCurveTo(97 * scale, 215.5 * scale, 97 * scale, 215.5 * scale, 97 * scale, 227 * scale);
        ctx.bezierCurveTo(148 * scale, 250 * scale, 179 * scale, 256 * scale, 212 * scale, 262 * scale);
        ctx.bezierCurveTo(268 * scale, 244 * scale, 281 * scale, 233 * scale, 318 * scale, 214 * scale);
        ctx.bezierCurveTo(318 * scale, 203 * scale, 318 * scale, 203 * scale, 318 * scale, 192 * scale);
        ctx.bezierCurveTo(250 * scale, 225 * scale, 236 * scale, 231 * scale, 214 * scale, 239 * scale);
        ctx.bezierCurveTo(158 * scale, 228 * scale, 126 * scale, 215 * scale, 99 * scale, 201 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[1], 14 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(212 * scale, 260 * scale);
        ctx.bezierCurveTo(212 * scale, 251.5 * scale, 212 * scale, 251.5 * scale, 212 * scale, 243 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[1], 14 * scale);
        circle(ctx, 161 * scale, 201 * scale, 13 * scale);
        fill_path(ctx, color[5]);
        circle(ctx, 216 * scale, 205 * scale, 8.06225774829855 * scale);
        fill_path(ctx, color[5]);
        circle(ctx, 216 * scale, 175 * scale, 6.708203932499369 * scale);
        fill_path(ctx, color[5]);
        circle(ctx, 271 * scale, 191 * scale, 5.0990195135927845 * scale);
        fill_path(ctx, color[5]);
        circle(ctx, 206 * scale, 180 * scale, 11.180339887498949 * scale);
        fill_path(ctx, color[5]);
        return can;
    };

    function create_scales(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 400 * scale;
        can.height = 400 * scale;
        ctx.save();
        ctx.translate(85 * scale, 237 * scale);
        ctx.rotate(1.5707963267948966);
        round_regular_polygon(ctx, 6, 54.585977194239184 * scale, 1 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 12 * scale);
        ctx.save();
        ctx.translate(178 * scale, 238 * scale);
        ctx.rotate(1.5707963267948966);
        round_regular_polygon(ctx, 6, 52.53573932334064 * scale, 1 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 12 * scale);
        ctx.save();
        ctx.translate(270 * scale, 239 * scale);
        ctx.rotate(1.5707963267948966);
        round_regular_polygon(ctx, 6, 53.58058329516393 * scale, 1 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 12 * scale);
        ctx.save();
        ctx.translate(222 * scale, 312 * scale);
        ctx.rotate(1.5707963267948966);
        round_regular_polygon(ctx, 6, 52.53573932334064 * scale, 1 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 12 * scale);
        ctx.save();
        ctx.translate(317 * scale, 159 * scale);
        ctx.rotate(1.5707963267948966);
        round_regular_polygon(ctx, 6, 57.63465889766331 * scale, 1 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 12 * scale);
        ctx.save();
        ctx.translate(223.5 * scale, 139.0625 * scale);
        ctx.rotate(1.5707963267948966);
        round_regular_polygon(ctx, 6, 51.66236541235796 * scale, 1 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 12 * scale);
        ctx.save();
        ctx.translate(132.5 * scale, 137.0625 * scale);
        ctx.rotate(1.5707963267948966);
        round_regular_polygon(ctx, 6, 52.009614495783374 * scale, 1 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 12 * scale);
        ctx.save();
        ctx.translate(178.5 * scale, 58.0625 * scale);
        ctx.rotate(1.5707963267948966);
        round_regular_polygon(ctx, 6, 53.16013544000805 * scale, 1 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 12 * scale);
        ctx.save();
        ctx.translate(177.5 * scale, 216.0625 * scale);
        ctx.rotate(1.5707963267948966);
        round_regular_polygon(ctx, 6, 50 * scale, 1 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 12 * scale);
        ctx.save();
        ctx.translate(84.5 * scale, 215.0625 * scale);
        ctx.rotate(1.5707963267948966);
        round_regular_polygon(ctx, 6, 54 * scale, 1 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 12 * scale);
        ctx.save();
        ctx.translate(319.5 * scale, 138.0625 * scale);
        ctx.rotate(1.5707963267948966);
        round_regular_polygon(ctx, 6, 55.08175741568164 * scale, 1 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 12 * scale);
        ctx.save();
        ctx.translate(269.5 * scale, 216.0625 * scale);
        ctx.rotate(1.5707963267948966);
        round_regular_polygon(ctx, 6, 54.589376255824725 * scale, 1 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 12 * scale);
        ctx.save();
        ctx.translate(221.5 * scale, 293.0625 * scale);
        ctx.rotate(0.5235987755982988);
        round_regular_polygon(ctx, 6, 49.49747468305833 * scale, 1 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(221.5 * scale, 342.0625 * scale);
        ctx.bezierCurveTo(221.5 * scale, 350.5625 * scale, 221.5 * scale, 350.5625 * scale, 221.5 * scale, 359.0625 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[2], 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(84.5 * scale, 270.0625 * scale);
        ctx.bezierCurveTo(84.5 * scale, 277.0625 * scale, 84.5 * scale, 277.0625 * scale, 84.5 * scale, 284.0625 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[2], 12 * scale);
        ctx.save();
        ctx.translate(84.5 * scale, 215.0625 * scale);
        ctx.rotate(0.5235987755982988);
        round_regular_polygon(ctx, 6, 30 * scale, 15 * scale);
        ctx.restore();
        fill_path(ctx, color[3]);
        ctx.save();
        ctx.translate(177.5 * scale, 215.0625 * scale);
        ctx.rotate(0.5235987755982988);
        round_regular_polygon(ctx, 6, 30 * scale, 15 * scale);
        ctx.restore();
        fill_path(ctx, color[3]);
        ctx.save();
        ctx.translate(222.5 * scale, 294.0625 * scale);
        ctx.rotate(0.5235987755982988);
        round_regular_polygon(ctx, 6, 30 * scale, 15 * scale);
        ctx.restore();
        fill_path(ctx, color[3]);
        ctx.save();
        ctx.translate(270.5 * scale, 216.0625 * scale);
        ctx.rotate(0.5235987755982988);
        round_regular_polygon(ctx, 6, 30 * scale, 15 * scale);
        ctx.restore();
        fill_path(ctx, color[3]);
        ctx.save();
        ctx.translate(320.5 * scale, 134.0625 * scale);
        ctx.rotate(0.5235987755982988);
        round_regular_polygon(ctx, 6, 30 * scale, 15 * scale);
        ctx.restore();
        fill_path(ctx, color[3]);
        ctx.save();
        ctx.translate(224.5 * scale, 138.0625 * scale);
        ctx.rotate(0.5235987755982988);
        round_regular_polygon(ctx, 6, 30 * scale, 15 * scale);
        ctx.restore();
        fill_path(ctx, color[3]);
        ctx.save();
        ctx.translate(133.5 * scale, 137.0625 * scale);
        ctx.rotate(0.5235987755982988);
        round_regular_polygon(ctx, 6, 30 * scale, 15 * scale);
        ctx.restore();
        fill_path(ctx, color[3]);
        ctx.save();
        ctx.translate(178.5 * scale, 56.0625 * scale);
        ctx.rotate(0.5235987755982988);
        round_regular_polygon(ctx, 6, 30 * scale, 15 * scale);
        ctx.restore();
        fill_path(ctx, color[3]);
        return can;
    };

    function create_wheat(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 52 * scale;
        can.height = 65 * scale;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(9.833328247070312 * scale, 12.078125 * scale);
        ctx.bezierCurveTo(15.333328247070312 * scale, 28.078125 * scale, 15.333328247070312 * scale, 28.078125 * scale, 20.833328247070312 * scale, 44.078125 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[1], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(7.8333282470703125 * scale, 20.078125 * scale);
        ctx.bezierCurveTo(16.833328247070312 * scale, 32.578125 * scale, 16.833328247070312 * scale, 32.578125 * scale, 25.833328247070312 * scale, 45.078125 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[1], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(23.833328247070312 * scale, 26.078125 * scale);
        ctx.bezierCurveTo(25.833328247070312 * scale, 11.078125 * scale, 16.833328247070312 * scale, 8.078125 * scale, 14.833328247070312 * scale, 7.078125 * scale);
        ctx.bezierCurveTo(11.833328247070312 * scale, 17.078125 * scale, 13.833328247070312 * scale, 22.078125 * scale, 23.833328247070312 * scale, 27.078125 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[1], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(35.83332824707031 * scale, 8.078125 * scale);
        ctx.bezierCurveTo(34.83332824707031 * scale, 27.078125 * scale, 28.833328247070312 * scale, 27.078125 * scale, 23.833328247070312 * scale, 28.078125 * scale);
        ctx.bezierCurveTo(21.833328247070312 * scale, 14.078125 * scale, 26.833328247070312 * scale, 11.078125 * scale, 35.83332824707031 * scale, 8.078125 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[1], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(25.833328247070312 * scale, 39.078125 * scale);
        ctx.bezierCurveTo(20.833328247070312 * scale, 29.078125 * scale, 14.833328247070312 * scale, 27.078125 * scale, 5.8333282470703125 * scale, 29.078125 * scale);
        ctx.bezierCurveTo(9.833328247070312 * scale, 39.078125 * scale, 16.833328247070312 * scale, 42.078125 * scale, 25.833328247070312 * scale, 40.078125 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[1], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(42.83332824707031 * scale, 23.078125 * scale);
        ctx.bezierCurveTo(35.83332824707031 * scale, 35.078125 * scale, 31.833328247070312 * scale, 37.078125 * scale, 25.833328247070312 * scale, 36.078125 * scale);
        ctx.bezierCurveTo(25.833328247070312 * scale, 24.078125 * scale, 33.83332824707031 * scale, 21.078125 * scale, 42.83332824707031 * scale, 23.078125 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[1], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(23.833328247070312 * scale, 24.078125 * scale);
        ctx.bezierCurveTo(20.833328247070312 * scale, 34.078125 * scale, 23.833328247070312 * scale, 40.078125 * scale, 27.833328247070312 * scale, 43.078125 * scale);
        ctx.bezierCurveTo(37.33332824707031 * scale, 28.078125 * scale, 37.33332824707031 * scale, 28.078125 * scale, 46.83332824707031 * scale, 13.078125 * scale);
        fill_path(ctx, undefined, color[1], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(38.83332824707031 * scale, 14.078125 * scale);
        ctx.bezierCurveTo(34.83332824707031 * scale, 24.078125 * scale, 34.83332824707031 * scale, 24.078125 * scale, 30.833328247070312 * scale, 34.078125 * scale);
        fill_path(ctx, undefined, color[1], 2 * scale);
        return can;
    };

    function create_windmill(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 170 * scale;
        can.height = 173 * scale;
        ctx.translate(5 * scale, 5 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.save();
        ctx.translate(86.25 * scale, 84.953125 * scale);
        ctx.rotate(0.32);
        round_regular_polygon(ctx, 7, 42.15447781671598 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(-5 * scale, -5 * scale);
        ctx.save();
        ctx.translate(86.25 * scale, 84.953125 * scale);
        ctx.rotate(0.32);
        round_regular_polygon(ctx, 7, 42.15447781671598 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 4 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(5 * scale, 5 * scale);
        ctx.save();
        ctx.translate(86.25 * scale, 84.953125 * scale);
        ctx.rotate(0.28);
        round_regular_polygon(ctx, 7, 30.463092423455635 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(-5 * scale, -5 * scale);
        ctx.save();
        ctx.translate(86.25 * scale, 84.953125 * scale);
        ctx.rotate(0.28);
        round_regular_polygon(ctx, 7, 30.463092423455635 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[3], color[4], 4 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(5 * scale, 5 * scale);
        circle(ctx, 86.25 * scale, 84.953125 * scale, 18.867962264113206 * scale);
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(-5 * scale, -5 * scale);
        circle(ctx, 86.25 * scale, 84.953125 * scale, 18.867962264113206 * scale);
        fill_path(ctx, color[5], color[6], 4 * scale);
        return can;
    };

    function create_windmill_wing(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 170 * scale;
        can.height = 173 * scale;
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(5 * scale, 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(85.25 * scale, 82.953125 * scale);
        ctx.bezierCurveTo(98.25 * scale, 46.453125 * scale, 98.25 * scale, 46.453125 * scale, 111.25 * scale, 9.953125 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[0], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(111.25 * scale, 8.953125 * scale);
        ctx.bezierCurveTo(117.75 * scale, 12.453125 * scale, 117.75 * scale, 12.453125 * scale, 124.25 * scale, 15.953125 * scale);
        ctx.bezierCurveTo(113.75 * scale, 39.953125 * scale, 113.75 * scale, 39.953125 * scale, 103.25 * scale, 63.953125 * scale);
        ctx.bezierCurveTo(97.75 * scale, 64.953125 * scale, 97.75 * scale, 64.953125 * scale, 92.25 * scale, 65.953125 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(-5 * scale, -5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(111.25 * scale, 8.953125 * scale);
        ctx.bezierCurveTo(117.75 * scale, 12.453125 * scale, 117.75 * scale, 12.453125 * scale, 124.25 * scale, 15.953125 * scale);
        ctx.bezierCurveTo(113.75 * scale, 39.953125 * scale, 113.75 * scale, 39.953125 * scale, 103.25 * scale, 63.953125 * scale);
        ctx.bezierCurveTo(97.75 * scale, 64.953125 * scale, 97.75 * scale, 64.953125 * scale, 92.25 * scale, 65.953125 * scale);
        ctx.closePath();
        fill_path(ctx, color[7]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(85.25 * scale, 82.953125 * scale);
        ctx.bezierCurveTo(98.25 * scale, 46.453125 * scale, 98.25 * scale, 46.453125 * scale, 111.25 * scale, 9.953125 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[6], 4 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(5 * scale, 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(87.25 * scale, 84.953125 * scale);
        ctx.bezierCurveTo(123.75 * scale, 100.453125 * scale, 123.75 * scale, 100.453125 * scale, 160.25 * scale, 115.953125 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[0], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(160.25 * scale, 114.953125 * scale);
        ctx.bezierCurveTo(156.25 * scale, 122.453125 * scale, 156.25 * scale, 122.453125 * scale, 152.25 * scale, 129.953125 * scale);
        ctx.bezierCurveTo(130.25 * scale, 117.953125 * scale, 130.25 * scale, 117.953125 * scale, 108.25 * scale, 105.953125 * scale);
        ctx.bezierCurveTo(107.25 * scale, 98.953125 * scale, 107.25 * scale, 98.953125 * scale, 106.25 * scale, 91.953125 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(-5 * scale, -5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(160.25 * scale, 114.953125 * scale);
        ctx.bezierCurveTo(156.25 * scale, 122.453125 * scale, 156.25 * scale, 122.453125 * scale, 152.25 * scale, 129.953125 * scale);
        ctx.bezierCurveTo(130.25 * scale, 117.953125 * scale, 130.25 * scale, 117.953125 * scale, 108.25 * scale, 105.953125 * scale);
        ctx.bezierCurveTo(107.25 * scale, 98.953125 * scale, 107.25 * scale, 98.953125 * scale, 106.25 * scale, 91.953125 * scale);
        ctx.closePath();
        fill_path(ctx, color[7]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(87.25 * scale, 84.953125 * scale);
        ctx.bezierCurveTo(123.75 * scale, 100.453125 * scale, 123.75 * scale, 100.453125 * scale, 160.25 * scale, 115.953125 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[6], 4 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(5 * scale, 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(83.25 * scale, 83.953125 * scale);
        ctx.bezierCurveTo(47.75 * scale, 68.453125 * scale, 47.75 * scale, 68.453125 * scale, 12.25 * scale, 52.953125 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[0], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(13.25 * scale, 53.953125 * scale);
        ctx.bezierCurveTo(17.25 * scale, 46.953125 * scale, 17.25 * scale, 46.953125 * scale, 21.25 * scale, 39.953125 * scale);
        ctx.bezierCurveTo(42.75 * scale, 52.453125 * scale, 42.75 * scale, 52.453125 * scale, 64.25 * scale, 64.953125 * scale);
        ctx.bezierCurveTo(64.25 * scale, 70.953125 * scale, 64.25 * scale, 70.953125 * scale, 64.25 * scale, 76.953125 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(-5 * scale, -5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(13.25 * scale, 53.953125 * scale);
        ctx.bezierCurveTo(17.25 * scale, 46.953125 * scale, 17.25 * scale, 46.953125 * scale, 21.25 * scale, 39.953125 * scale);
        ctx.bezierCurveTo(42.75 * scale, 52.453125 * scale, 42.75 * scale, 52.453125 * scale, 64.25 * scale, 64.953125 * scale);
        ctx.bezierCurveTo(64.25 * scale, 70.953125 * scale, 64.25 * scale, 70.953125 * scale, 64.25 * scale, 76.953125 * scale);
        ctx.closePath();
        fill_path(ctx, color[7]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(83.25 * scale, 83.953125 * scale);
        ctx.bezierCurveTo(47.75 * scale, 68.453125 * scale, 47.75 * scale, 68.453125 * scale, 12.25 * scale, 52.953125 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[6], 4 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(5 * scale, 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(84.25 * scale, 86.953125 * scale);
        ctx.bezierCurveTo(70.25 * scale, 123.953125 * scale, 70.25 * scale, 123.953125 * scale, 56.25 * scale, 160.953125 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[0], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(56.25 * scale, 159.953125 * scale);
        ctx.bezierCurveTo(49.25 * scale, 155.453125 * scale, 49.25 * scale, 155.453125 * scale, 42.25 * scale, 150.953125 * scale);
        ctx.bezierCurveTo(54.25 * scale, 127.953125 * scale, 54.25 * scale, 127.953125 * scale, 66.25 * scale, 104.953125 * scale);
        ctx.bezierCurveTo(71.25 * scale, 104.953125 * scale, 71.25 * scale, 104.953125 * scale, 76.25 * scale, 104.953125 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(-5 * scale, -5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(56.25 * scale, 159.953125 * scale);
        ctx.bezierCurveTo(49.25 * scale, 155.453125 * scale, 49.25 * scale, 155.453125 * scale, 42.25 * scale, 150.953125 * scale);
        ctx.bezierCurveTo(54.25 * scale, 127.953125 * scale, 54.25 * scale, 127.953125 * scale, 66.25 * scale, 104.953125 * scale);
        ctx.bezierCurveTo(71.25 * scale, 104.953125 * scale, 71.25 * scale, 104.953125 * scale, 76.25 * scale, 104.953125 * scale);
        ctx.closePath();
        fill_path(ctx, color[7]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(84.25 * scale, 86.953125 * scale);
        ctx.bezierCurveTo(70.25 * scale, 123.953125 * scale, 70.25 * scale, 123.953125 * scale, 56.25 * scale, 160.953125 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[6], 4 * scale);
        return can;
    };

    function create_windmill_head(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 170 * scale;
        can.height = 173 * scale;
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(5 * scale, 5 * scale);
        ctx.save();
        ctx.translate(86.25 * scale, 84.953125 * scale);
        round_regular_polygon(ctx, 7, 9.848857801796104 * scale, 5 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(-5 * scale, -5 * scale);
        ctx.save();
        ctx.translate(86.25 * scale, 84.953125 * scale);
        round_regular_polygon(ctx, 7, 9.848857801796104 * scale, 5 * scale);
        ctx.restore();
        fill_path(ctx, color[8], color[9], 4 * scale);
        return can;
    };

    function create_cord(scale, useless, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        var w = scale * 75;
        var h = scale * 55;
        var width = scale * 4;
        can.width = w;
        can.height = h;
        ctx.translate(-30 * scale, -40 * scale);
        ctx.globalAlpha = 1;
        ctx.beginPath();
        ctx.bezierCurveTo(67 * scale, 56 * scale, 72 * scale, 71 * scale, 72 * scale, 71 * scale);
        ctx.bezierCurveTo(72 * scale, 71 * scale, 84 * scale, 70 * scale, 75 * scale, 82 * scale);
        ctx.bezierCurveTo(70 * scale, 88 * scale, 61 * scale, 89 * scale, 58 * scale, 89 * scale);
        ctx.bezierCurveTo(55 * scale, 89 * scale, 40 * scale, 89 * scale, 46 * scale, 77 * scale);
        ctx.bezierCurveTo(46 * scale, 77 * scale, 43 * scale, 63 * scale, 43 * scale, 63 * scale);
        ctx.bezierCurveTo(35 * scale, 61 * scale, 35 * scale, 53 * scale, 42 * scale, 47 * scale);
        ctx.bezierCurveTo(48 * scale, 42 * scale, 62 * scale, 41 * scale, 66 * scale, 43 * scale);
        ctx.bezierCurveTo(70 * scale, 45 * scale, 72 * scale, 48 * scale, 67 * scale, 56 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.bezierCurveTo(68 * scale, 61 * scale, 72 * scale, 76 * scale, 72 * scale, 76 * scale);
        ctx.bezierCurveTo(65 * scale, 85 * scale, 61 * scale, 85 * scale, 49 * scale, 83 * scale);
        ctx.bezierCurveTo(49 * scale, 83 * scale, 44 * scale, 63 * scale, 44 * scale, 63 * scale);
        ctx.bezierCurveTo(54 * scale, 63 * scale, 60 * scale, 63 * scale, 67 * scale, 55 * scale);
        ctx.closePath();
        fill_path(ctx, color[1]);
        ctx.beginPath();
        ctx.moveTo(69 * scale, 65 * scale);
        ctx.bezierCurveTo(70 * scale, 61 * scale, 81 * scale, 66 * scale, 86 * scale, 66 * scale);
        ctx.bezierCurveTo(90 * scale, 66 * scale, 97 * scale, 63 * scale, 97 * scale, 56 * scale);
        ctx.bezierCurveTo(97 * scale, 50 * scale, 93 * scale, 47 * scale, 88 * scale, 44 * scale);
        fill_path(ctx, false, color[1], 2);
        ctx.beginPath();
        ctx.moveTo(50 * scale, 48 * scale);
        ctx.bezierCurveTo(43 * scale, 52 * scale, 50 * scale, 54 * scale, 51 * scale, 54 * scale);
        ctx.bezierCurveTo(54 * scale, 54 * scale, 59 * scale, 52 * scale, 59 * scale, 49 * scale);
        ctx.bezierCurveTo(59 * scale, 48 * scale, 55 * scale, 46 * scale, 50 * scale, 48 * scale);
        fill_path(ctx, color[2]);
        return can;
    };

    function create_bandage(scale, useless, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        var w = scale * 195;
        var h = scale * 190;
        var x = w / 2;
        var y = h / 2;
        can.width = w;
        can.height = h;
        var round = scale * 10;
        var wf = scale * 35;
        var hf = scale * 150;
        var wf2 = wf / 2;
        var hf2 = hf / 2;
        var width = scale * 4;
        ctx.translate(x - (5 * scale), y - (5 * scale));
        ctx.rotate(-Math.PI / 1.25);
        ctx.globalAlpha = 1;
        round_rect(ctx, -wf2, -hf2, wf, hf, round);
        fill_path(ctx, color[0], color[1], width);
        ctx.translate(0, 0);
        ctx.rotate(Math.PI / 3);
        ctx.globalAlpha = 1;
        round_rect(ctx, -wf2, -hf2, wf, hf, round);
        fill_path(ctx, color[0], color[1], width);
        ctx.translate(0, 5);
        round_rect(ctx, -wf2 / 2, -hf2 / 2, wf / 2, hf / 3, round - 2);
        fill_path(ctx, color[1]);
        return can;
    };

    function create_craft_button(scale, funs, subscale, color, alpha) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        var w = scale * 70;
        var h = scale * 70;
        var r = scale * 10;
        var shadow = scale * 5;
        can.width = w;
        can.height = h + shadow;
        for (var i = 0; i < funs.length; i++) {
            var f = funs[i];
            ctx.globalAlpha = f.a;
            var img = f.f(subscale, false, f.c);
            ctx.save();
            ctx.translate((w / 2) + (f.x * scale), (h / 2) + (f.y * scale));
            ctx.rotate(f.r);
            ctx.drawImage(img, -img.width / 2, -img.height / 2);
            ctx.restore();
        }
        var buttons = [];
        for (var i = 0; i < color.length; i++) {
            var tmpcan = document.createElement("canvas");
            var tmpctx = tmpcan.getContext("2d");
            tmpcan.width = w;
            tmpcan.height = h + shadow;
            tmpctx.globalAlpha = alpha / 2;
            if (i == 2)
                round_rect(tmpctx, 0, shadow, w, h, r);
            else
                round_rect(tmpctx, 0, 0, w, h + shadow, r);
            fill_path(tmpctx, "#081a19");
            tmpctx.globalAlpha = alpha;
            if (i == 2)
                round_rect(tmpctx, 0, shadow, w, h, r);
            else
                round_rect(tmpctx, 0, 0, w, h, r);
            fill_path(tmpctx, color[i]);
            tmpctx.globalAlpha = 1;
            if (i == 2)
                tmpctx.drawImage(can, 0, shadow);
            else
                tmpctx.drawImage(can, 0, 0);
            buttons.push(CTI(tmpcan));
        }
        return buttons;
    };

    function create_bread_oven_ui(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 149 * scale;
        can.height = 356 * scale;
        ctx.save();
        ctx.translate(74.5 * scale, 177.5 * scale);
        round_rect(ctx, -57.5 * scale, -161.5 * scale, 100 * scale, 323 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[0], color[1], 4 * scale);
        ctx.save();
        ctx.translate(74.5 * scale, 177.5 * scale);
        round_rect(ctx, -57.5 * scale, 50.5 * scale, 100 * scale, 105 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[6], color[1], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(16 * scale, 125 * scale);
        ctx.bezierCurveTo(74.5 * scale, 125 * scale, 118 * scale, 125 * scale, 118 * scale, 125 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[2], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(16 * scale, 120 * scale);
        ctx.bezierCurveTo(74.5 * scale, 120 * scale, 74.5 * scale, 120 * scale, 118 * scale, 120 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[3], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(16 * scale, 228 * scale);
        ctx.bezierCurveTo(75 * scale, 228.5 * scale, 118 * scale, 228.5 * scale, 118 * scale, 229 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[2], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(16 * scale, 224 * scale);
        ctx.bezierCurveTo(75 * scale, 224 * scale, 118 * scale, 224 * scale, 118 * scale, 224 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[3], 10 * scale);
        ctx.save();
        ctx.translate(72 * scale, 68.5 * scale);
        round_rect(ctx, -41.5 * scale, -36.5 * scale, 73 * scale, 73 * scale, 13 * scale);
        ctx.restore();
        fill_path(ctx, color[4]);
        ctx.save();
        ctx.translate(72 * scale, 175.5 * scale);
        round_rect(ctx, -41.5 * scale, -38.5 * scale, 73 * scale, 73 * scale, 13 * scale);
        ctx.restore();
        fill_path(ctx, color[4]);
        ctx.save();
        ctx.translate(72 * scale, 279.5 * scale);
        round_rect(ctx, -41.5 * scale, -40.5 * scale, 73 * scale, 73 * scale, 13 * scale);
        ctx.restore();
        fill_path(ctx, color[4]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(16 * scale, 338 * scale);
        ctx.bezierCurveTo(75 * scale, 338 * scale, 118 * scale, 338 * scale, 118 * scale, 338 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[2], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(16 * scale, 333 * scale);
        ctx.bezierCurveTo(75 * scale, 333 * scale, 118 * scale, 333 * scale, 118 * scale, 333 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[3], 10 * scale);
        return can;
    };

    function create_big_fire_wood(scale, useless, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        var w = scale * 193;
        var h = scale * 198;
        var x = 140 * scale;
        var y = 90 * scale;
        can.width = w;
        can.height = h;
        var round = scale * 10;
        var wf = scale * 25;
        var hf = scale * 180;
        var wf2 = wf / 2;
        var hf2 = hf / 2;
        var width = scale * 4;
        ctx.translate(-25 * scale, 1 * scale);
        ctx.translate(x, y);
        ctx.rotate(-Math.PI / 5);
        round_rect(ctx, -wf2, -hf2, wf, hf, round);
        fill_path(ctx, color[0], color[1], width);
        ctx.translate(-30 * scale, -25 * scale);
        ctx.rotate(Math.PI / 3);
        round_rect(ctx, -wf2, -hf2, wf, hf, round);
        fill_path(ctx, color[0], color[1], width);
        ctx.translate(35 * scale, 30 * scale);
        ctx.rotate(Math.PI / 3);
        round_rect(ctx, -wf2, -hf2, wf, hf, round);
        fill_path(ctx, color[0], color[1], width);
        return can;
    };

    function create_fire(scale, useless, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        var w = scale * 145;
        var h = scale * 145;
        var x = w / 2;
        var y = h / 2;
        can.width = w;
        can.height = h;
        var r = scale * 70;
        ctx.translate(x, y);
        ctx.globalAlpha = 0.4;
        circle(ctx, 0, 0, r);
        fill_path(ctx, color[0]);
        var r = scale * 50;
        ctx.translate(0, 0);
        ctx.globalAlpha = 0.8;
        circle(ctx, 0, 0, r);
        fill_path(ctx, color[0]);
        var r = scale * 35;
        ctx.translate(0, 0);
        ctx.globalAlpha = 0.8;
        circle(ctx, 0, 0, r);
        fill_path(ctx, color[1]);
        var r = scale * 20;
        ctx.translate(0, 0);
        ctx.globalAlpha = 0.8;
        circle(ctx, 0, 0, r);
        fill_path(ctx, color[2]);
        return can;
    };

    function create_wood_fire(scale, useless, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        var w = scale * 135;
        var h = scale * 190;
        var x = w / 2;
        var y = h / 2;
        can.width = w;
        can.height = h;
        var round = scale * 10;
        var wf = scale * 25;
        var hf = scale * 180;
        var wf2 = wf / 2;
        var hf2 = hf / 2;
        var width = scale * 4;
        ctx.translate(x, y);
        ctx.rotate(-Math.PI / 5);
        ctx.globalAlpha = 1;
        round_rect(ctx, -wf2, -hf2, wf, hf, round);
        fill_path(ctx, color[0], color[1], width);
        ctx.translate(0, 0);
        ctx.rotate(Math.PI / 5);
        ctx.globalAlpha = 1;
        round_rect(ctx, -wf2, -hf2, wf, hf, round);
        fill_path(ctx, color[0], color[1], width);
        return can;
    };

    function create_ground_fire(scale, useless, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        var w = scale * 205;
        var h = scale * 205;
        var x = w / 2;
        var y = h / 2;
        can.width = w;
        can.height = h;
        var r = scale * 100;
        ctx.translate(x, y);
        ctx.globalAlpha = 1;
        circle(ctx, 0, 0, r);
        fill_path(ctx, color[0]);
        return can;
    };

    function create_halo_fire(scale, useless, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        var w = scale * 370;
        var h = scale * 370;
        var x = w / 2;
        var y = h / 2;
        can.width = w;
        can.height = h;
        var r = scale * 180;
        ctx.globalAlpha = 0.2;
        circle(ctx, x, y, r);
        fill_path(ctx, color[0]);
        return can;
    };

    function create_elf_hat(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 155 * scale;
        can.height = 127 * scale;
        ctx.globalAlpha = 0.5;
        ctx.translate(0, 8 * scale);
        ctx.translate(-7 * scale, -20 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(55 * scale, 68 * scale);
        ctx.bezierCurveTo(86 * scale, 64 * scale, 117 * scale, 66 * scale, 134 * scale, 68 * scale);
        ctx.bezierCurveTo(152 * scale, 69 * scale, 165 * scale, 86 * scale, 152 * scale, 104 * scale);
        ctx.bezierCurveTo(146 * scale, 87 * scale, 122 * scale, 89 * scale, 98 * scale, 90 * scale);
        ctx.bezierCurveTo(64 * scale, 89 * scale, 41 * scale, 91 * scale, 36 * scale, 106 * scale);
        ctx.bezierCurveTo(19 * scale, 92 * scale, 31 * scale, 71 * scale, 54 * scale, 69 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(0, -8 * scale);
        ctx.translate(7 * scale, 20 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(24 * scale, 28 * scale);
        ctx.bezierCurveTo(39 * scale, 30 * scale, 37 * scale, 31 * scale, 40 * scale, 32 * scale);
        ctx.bezierCurveTo(22 * scale, 45 * scale, 26 * scale, 58 * scale, 29 * scale, 66 * scale);
        ctx.bezierCurveTo(86.5 * scale, 65 * scale, 86.5 * scale, 65 * scale, 144 * scale, 64 * scale);
        ctx.bezierCurveTo(151 * scale, 42 * scale, 132 * scale, 20 * scale, 120 * scale, 16 * scale);
        ctx.bezierCurveTo(106 * scale, 12 * scale, 89 * scale, 0 * scale, 73 * scale, 3 * scale);
        ctx.bezierCurveTo(51 * scale, 5 * scale, 36 * scale, 20 * scale, 25 * scale, 28 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(30 * scale, 41 * scale);
        ctx.bezierCurveTo(49 * scale, 31 * scale, 53 * scale, 29 * scale, 62 * scale, 27 * scale);
        ctx.bezierCurveTo(59 * scale, 24 * scale, 56 * scale, 25 * scale, 53 * scale, 24 * scale);
        ctx.bezierCurveTo(67 * scale, 15 * scale, 84 * scale, 12 * scale, 120 * scale, 16 * scale);
        ctx.bezierCurveTo(107 * scale, 11 * scale, 96 * scale, 6 * scale, 85 * scale, 2 * scale);
        ctx.bezierCurveTo(59 * scale, 3 * scale, 54 * scale, 7 * scale, 40 * scale, 17 * scale);
        ctx.bezierCurveTo(32.5 * scale, 22.5 * scale, 32.5 * scale, 22.5 * scale, 25 * scale, 28 * scale);
        ctx.bezierCurveTo(32 * scale, 30 * scale, 32 * scale, 30 * scale, 39 * scale, 32 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(24 * scale, 28 * scale);
        ctx.bezierCurveTo(39 * scale, 30 * scale, 37 * scale, 31 * scale, 40 * scale, 32 * scale);
        ctx.bezierCurveTo(22 * scale, 45 * scale, 26 * scale, 58 * scale, 29 * scale, 66 * scale);
        ctx.bezierCurveTo(86.5 * scale, 65 * scale, 86.5 * scale, 65 * scale, 144 * scale, 64 * scale);
        ctx.bezierCurveTo(151 * scale, 42 * scale, 132 * scale, 20 * scale, 120 * scale, 16 * scale);
        ctx.bezierCurveTo(106 * scale, 12 * scale, 89 * scale, 0 * scale, 73 * scale, 3 * scale);
        ctx.bezierCurveTo(51 * scale, 5 * scale, 36 * scale, 20 * scale, 25 * scale, 28 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[2], 4 * scale);
        circle(ctx, 18 * scale, 38 * scale, 14.866068747318506 * scale);
        fill_path(ctx, color[4], color[5], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(39 * scale, 30 * scale);
        ctx.bezierCurveTo(27 * scale, 38 * scale, 25 * scale, 50 * scale, 26 * scale, 60 * scale);
        ctx.bezierCurveTo(36.5 * scale, 58.5 * scale, 36.5 * scale, 58.5 * scale, 47 * scale, 57 * scale);
        fill_path(ctx, color[1], color[2], 4 * scale);
        ctx.translate(-7 * scale, -20 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(27 * scale, 74 * scale);
        ctx.bezierCurveTo(38 * scale, 77.5 * scale, 38 * scale, 77.5 * scale, 49 * scale, 81 * scale);
        ctx.bezierCurveTo(54.5 * scale, 75.5 * scale, 54.5 * scale, 75.5 * scale, 60 * scale, 70 * scale);
        ctx.bezierCurveTo(64 * scale, 72 * scale, 64 * scale, 72 * scale, 68 * scale, 74 * scale);
        ctx.bezierCurveTo(80.5 * scale, 67.5 * scale, 80.5 * scale, 67.5 * scale, 93 * scale, 61 * scale);
        ctx.bezierCurveTo(104.5 * scale, 68 * scale, 104.5 * scale, 68 * scale, 116 * scale, 75 * scale);
        ctx.bezierCurveTo(120.5 * scale, 72.5 * scale, 120.5 * scale, 72.5 * scale, 125 * scale, 70 * scale);
        ctx.bezierCurveTo(129 * scale, 75 * scale, 129 * scale, 75 * scale, 133 * scale, 80 * scale);
        ctx.bezierCurveTo(145.5 * scale, 76.5 * scale, 145.5 * scale, 76.5 * scale, 158 * scale, 73 * scale);
        ctx.bezierCurveTo(158 * scale, 87 * scale, 158 * scale, 93 * scale, 155 * scale, 95 * scale);
        ctx.bezierCurveTo(152.5 * scale, 96 * scale, 152.5 * scale, 96 * scale, 150 * scale, 97 * scale);
        ctx.bezierCurveTo(121 * scale, 85 * scale, 108 * scale, 86 * scale, 93 * scale, 85 * scale);
        ctx.bezierCurveTo(64 * scale, 85 * scale, 52 * scale, 95 * scale, 38 * scale, 99 * scale);
        ctx.bezierCurveTo(36 * scale, 98.5 * scale, 36 * scale, 98.5 * scale, 34 * scale, 98 * scale);
        ctx.bezierCurveTo(25 * scale, 98 * scale, 27 * scale, 91 * scale, 27 * scale, 76 * scale);
        ctx.closePath();
        fill_path(ctx, color[6], color[7], 6 * scale);
        return can;
    };

    function create_christmas_hat(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 155 * scale;
        can.height = 127 * scale;
        ctx.globalAlpha = 0.5;
        ctx.translate(0, 8 * scale);
        ctx.translate(-7 * scale, -20 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(55 * scale, 68 * scale);
        ctx.bezierCurveTo(86 * scale, 64 * scale, 117 * scale, 66 * scale, 134 * scale, 68 * scale);
        ctx.bezierCurveTo(152 * scale, 69 * scale, 165 * scale, 86 * scale, 152 * scale, 104 * scale);
        ctx.bezierCurveTo(146 * scale, 87 * scale, 122 * scale, 89 * scale, 98 * scale, 90 * scale);
        ctx.bezierCurveTo(64 * scale, 89 * scale, 41 * scale, 91 * scale, 36 * scale, 106 * scale);
        ctx.bezierCurveTo(19 * scale, 92 * scale, 31 * scale, 71 * scale, 54 * scale, 69 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(0, -8 * scale);
        ctx.translate(7 * scale, 20 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(24 * scale, 28 * scale);
        ctx.bezierCurveTo(39 * scale, 30 * scale, 37 * scale, 31 * scale, 40 * scale, 32 * scale);
        ctx.bezierCurveTo(22 * scale, 45 * scale, 26 * scale, 58 * scale, 29 * scale, 66 * scale);
        ctx.bezierCurveTo(86.5 * scale, 65 * scale, 86.5 * scale, 65 * scale, 144 * scale, 64 * scale);
        ctx.bezierCurveTo(151 * scale, 42 * scale, 132 * scale, 20 * scale, 120 * scale, 16 * scale);
        ctx.bezierCurveTo(106 * scale, 12 * scale, 89 * scale, 0 * scale, 73 * scale, 3 * scale);
        ctx.bezierCurveTo(51 * scale, 5 * scale, 36 * scale, 20 * scale, 25 * scale, 28 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(30 * scale, 41 * scale);
        ctx.bezierCurveTo(49 * scale, 31 * scale, 53 * scale, 29 * scale, 62 * scale, 27 * scale);
        ctx.bezierCurveTo(59 * scale, 24 * scale, 56 * scale, 25 * scale, 53 * scale, 24 * scale);
        ctx.bezierCurveTo(67 * scale, 15 * scale, 84 * scale, 12 * scale, 120 * scale, 16 * scale);
        ctx.bezierCurveTo(107 * scale, 11 * scale, 96 * scale, 6 * scale, 85 * scale, 2 * scale);
        ctx.bezierCurveTo(59 * scale, 3 * scale, 54 * scale, 7 * scale, 40 * scale, 17 * scale);
        ctx.bezierCurveTo(32.5 * scale, 22.5 * scale, 32.5 * scale, 22.5 * scale, 25 * scale, 28 * scale);
        ctx.bezierCurveTo(32 * scale, 30 * scale, 32 * scale, 30 * scale, 39 * scale, 32 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(24 * scale, 28 * scale);
        ctx.bezierCurveTo(39 * scale, 30 * scale, 37 * scale, 31 * scale, 40 * scale, 32 * scale);
        ctx.bezierCurveTo(22 * scale, 45 * scale, 26 * scale, 58 * scale, 29 * scale, 66 * scale);
        ctx.bezierCurveTo(86.5 * scale, 65 * scale, 86.5 * scale, 65 * scale, 144 * scale, 64 * scale);
        ctx.bezierCurveTo(151 * scale, 42 * scale, 132 * scale, 20 * scale, 120 * scale, 16 * scale);
        ctx.bezierCurveTo(106 * scale, 12 * scale, 89 * scale, 0 * scale, 73 * scale, 3 * scale);
        ctx.bezierCurveTo(51 * scale, 5 * scale, 36 * scale, 20 * scale, 25 * scale, 28 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[2], 4 * scale);
        circle(ctx, 18 * scale, 38 * scale, 14.866068747318506 * scale);
        fill_path(ctx, color[4], color[5], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(39 * scale, 30 * scale);
        ctx.bezierCurveTo(27 * scale, 38 * scale, 25 * scale, 50 * scale, 26 * scale, 60 * scale);
        ctx.bezierCurveTo(36.5 * scale, 58.5 * scale, 36.5 * scale, 58.5 * scale, 47 * scale, 57 * scale);
        fill_path(ctx, color[1], color[2], 4 * scale);
        ctx.translate(-7 * scale, -20 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(55 * scale, 68 * scale);
        ctx.bezierCurveTo(86 * scale, 64 * scale, 117 * scale, 66 * scale, 134 * scale, 68 * scale);
        ctx.bezierCurveTo(152 * scale, 69 * scale, 165 * scale, 86 * scale, 152 * scale, 104 * scale);
        ctx.bezierCurveTo(146 * scale, 87 * scale, 122 * scale, 89 * scale, 98 * scale, 90 * scale);
        ctx.bezierCurveTo(64 * scale, 89 * scale, 41 * scale, 91 * scale, 36 * scale, 106 * scale);
        ctx.bezierCurveTo(19 * scale, 92 * scale, 31 * scale, 71 * scale, 54 * scale, 69 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 4 * scale);
        return can;
    };

    function create_zombie_hand(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        var w = scale * 220;
        var h = scale * 220;
        var r = scale * 32;
        var width = scale * 4;
        can.width = w;
        can.height = h;
        ctx.translate(w / 2, (h / 2) + (10 * scale));
        ctx.globalAlpha = 0.5;
        circle(ctx, 0, 0, r);
        fill_path(ctx, color[0], color[0]);
        ctx.translate(0, -8 * scale);
        ctx.globalAlpha = 1;
        circle(ctx, 0, 0, r);
        fill_path(ctx, color[1], color[2], width);
        return can;
    };

    function create_hand(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        var w = scale * 40;
        var h = scale * 40;
        var r = scale * 16;
        var width = scale * 4;
        can.width = w;
        can.height = h;
        ctx.translate(w / 2, h / 2);
        ctx.globalAlpha = 1;
        circle(ctx, 0, 0, r);
        fill_path(ctx, color[0], color[1], width);
        return can;
    };

    function create_hand_shadow(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        var w = scale * 220;
        var h = scale * 220;
        var r = scale * 16;
        can.width = w;
        can.height = h;
        ctx.translate(w / 2, h / 2);
        ctx.globalAlpha = 0.5;
        circle(ctx, 0, 0, r);
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        return can;
    };

    function create_apricot_tree(scale, color, rotate, i) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        var w = scale * 210;
        var h = scale * 205;
        var w2 = w / 2;
        var h2 = h / 2;
        var round = scale * 30;
        var shadow = scale * 20;
        var wt = scale * 200;
        var ht = scale * 180;
        var r = scale * 80;
        var wt2 = wt / 2;
        var ht2 = ht / 2;
        var width = 4;
        can.width = w;
        can.height = h;
        can.width = 419 * scale;
        can.height = 412 * scale;
        if (i == 1) {
            ctx.save();
            ctx.translate(10 * scale, 0 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(117.99996948242188 * scale, 216.40621948242188 * scale);
            ctx.bezierCurveTo(86.99996948242188 * scale, 221.40621948242188 * scale, 74.99996948242188 * scale, 217.40621948242188 * scale, 60.999969482421875 * scale, 205.40621948242188 * scale);
            fill_path(ctx, undefined, color[4], 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(114.99996948242188 * scale, 227.40621948242188 * scale);
            ctx.bezierCurveTo(90.99996948242188 * scale, 233.40621948242188 * scale, 66.99996948242188 * scale, 228.40621948242188 * scale, 43.999969482421875 * scale, 225.40621948242188 * scale);
            fill_path(ctx, undefined, color[4], 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(110.99996948242188 * scale, 236.40621948242188 * scale);
            ctx.bezierCurveTo(94.99996948242188 * scale, 244.40621948242188 * scale, 79.99996948242188 * scale, 249.40621948242188 * scale, 60.999969482421875 * scale, 249.40621948242188 * scale);
            fill_path(ctx, undefined, color[4], 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(111.99996948242188 * scale, 206.29513549804688 * scale);
            ctx.bezierCurveTo(91.99996948242188 * scale, 206.29513549804688 * scale, 87.99996948242188 * scale, 201.29513549804688 * scale, 79.99996948242188 * scale, 192.29513549804688 * scale);
            fill_path(ctx, undefined, color[4], 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(109.99996948242188 * scale, 249.18402099609375 * scale);
            ctx.bezierCurveTo(97.99996948242188 * scale, 263.18402099609375 * scale, 85.99996948242188 * scale, 271.18402099609375 * scale, 65.99996948242188 * scale, 277.18402099609375 * scale);
            fill_path(ctx, undefined, color[4], 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(105.99996948242188 * scale, 192.18402099609375 * scale);
            ctx.bezierCurveTo(99.49996948242188 * scale, 197.68402099609375 * scale, 99.49996948242188 * scale, 197.68402099609375 * scale, 92.99996948242188 * scale, 203.18402099609375 * scale);
            ctx.bezierCurveTo(95.99996948242188 * scale, 213.18402099609375 * scale, 95.99996948242188 * scale, 215.18402099609375 * scale, 89.99996948242188 * scale, 219.18402099609375 * scale);
            ctx.bezierCurveTo(91.99996948242188 * scale, 223.18402099609375 * scale, 91.99996948242188 * scale, 226.18402099609375 * scale, 87.99996948242188 * scale, 230.18402099609375 * scale);
            ctx.bezierCurveTo(89.99996948242188 * scale, 234.18402099609375 * scale, 91.99996948242188 * scale, 237.18402099609375 * scale, 90.99996948242188 * scale, 244.18402099609375 * scale);
            ctx.bezierCurveTo(96.99996948242188 * scale, 252.18402099609375 * scale, 96.99996948242188 * scale, 256.18402099609375 * scale, 95.99996948242188 * scale, 262.18402099609375 * scale);
            ctx.bezierCurveTo(106.49996948242188 * scale, 264.18402099609375 * scale, 106.49996948242188 * scale, 264.18402099609375 * scale, 116.99996948242188 * scale, 266.18402099609375 * scale);
            fill_path(ctx, undefined, color[4], 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(104.99996948242188 * scale, 183.29513549804688 * scale);
            ctx.bezierCurveTo(99.99996948242188 * scale, 193.29513549804688 * scale, 93.99996948242188 * scale, 195.29513549804688 * scale, 89.99996948242188 * scale, 201.29513549804688 * scale);
            ctx.bezierCurveTo(86.99996948242188 * scale, 212.29513549804688 * scale, 85.99996948242188 * scale, 214.29513549804688 * scale, 81.99996948242188 * scale, 215.29513549804688 * scale);
            ctx.bezierCurveTo(83.99996948242188 * scale, 223.29513549804688 * scale, 83.99996948242188 * scale, 227.29513549804688 * scale, 79.99996948242188 * scale, 230.29513549804688 * scale);
            ctx.bezierCurveTo(83.99996948242188 * scale, 235.29513549804688 * scale, 84.99996948242188 * scale, 240.29513549804688 * scale, 79.99996948242188 * scale, 246.29513549804688 * scale);
            ctx.bezierCurveTo(86.99996948242188 * scale, 251.29513549804688 * scale, 91.99996948242188 * scale, 256.2951354980469 * scale, 89.99996948242188 * scale, 266.2951354980469 * scale);
            ctx.bezierCurveTo(102.99996948242188 * scale, 269.2951354980469 * scale, 102.99996948242188 * scale, 269.2951354980469 * scale, 115.99996948242188 * scale, 272.2951354980469 * scale);
            fill_path(ctx, undefined, color[4], 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(107.99996948242188 * scale, 177.85067749023438 * scale);
            ctx.bezierCurveTo(95.99996948242188 * scale, 187.35067749023438 * scale, 95.99996948242188 * scale, 187.35067749023438 * scale, 83.99996948242188 * scale, 196.85067749023438 * scale);
            ctx.bezierCurveTo(82.99996948242188 * scale, 203.85067749023438 * scale, 80.99996948242188 * scale, 209.85067749023438 * scale, 72.99996948242188 * scale, 210.85067749023438 * scale);
            ctx.bezierCurveTo(73.99996948242188 * scale, 220.85067749023438 * scale, 73.99996948242188 * scale, 221.85067749023438 * scale, 66.99996948242188 * scale, 227.85067749023438 * scale);
            ctx.bezierCurveTo(71.99996948242188 * scale, 235.85067749023438 * scale, 73.99996948242188 * scale, 239.85067749023438 * scale, 71.99996948242188 * scale, 247.85067749023438 * scale);
            ctx.bezierCurveTo(80.99996948242188 * scale, 257.8506774902344 * scale, 81.99996948242188 * scale, 263.8506774902344 * scale, 77.99996948242188 * scale, 271.8506774902344 * scale);
            ctx.bezierCurveTo(95.49996948242188 * scale, 272.8506774902344 * scale, 95.49996948242188 * scale, 272.8506774902344 * scale, 112.99996948242188 * scale, 273.8506774902344 * scale);
            fill_path(ctx, undefined, color[4], 3 * scale);
            ctx.restore();
        } else if (i == 2) {
            ctx.save();
            ctx.translate(130 * scale, 35 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(170.99996948242188 * scale, 133.85067749023438 * scale);
            ctx.bezierCurveTo(195.99996948242188 * scale, 129.85067749023438 * scale, 196.99996948242188 * scale, 111.85067749023438 * scale, 200.99996948242188 * scale, 88.85067749023438 * scale);
            fill_path(ctx, undefined, color[4], 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(169.99996948242188 * scale, 143.85067749023438 * scale);
            ctx.bezierCurveTo(189.99996948242188 * scale, 145.85067749023438 * scale, 207.99996948242188 * scale, 126.85067749023438 * scale, 222.99996948242188 * scale, 100.85067749023438 * scale);
            fill_path(ctx, undefined, color[4], 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(170.99996948242188 * scale, 157.85067749023438 * scale);
            ctx.bezierCurveTo(193.99996948242188 * scale, 160.85067749023438 * scale, 210.99996948242188 * scale, 151.85067749023438 * scale, 232.99996948242188 * scale, 139.85067749023438 * scale);
            fill_path(ctx, undefined, color[4], 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(169.99996948242188 * scale, 168.85067749023438 * scale);
            ctx.bezierCurveTo(192.99996948242188 * scale, 175.85067749023438 * scale, 203.99996948242188 * scale, 177.85067749023438 * scale, 245.99996948242188 * scale, 168.85067749023438 * scale);
            fill_path(ctx, undefined, color[4], 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(167.99996948242188 * scale, 168.85067749023438 * scale);
            ctx.bezierCurveTo(183.99996948242188 * scale, 189.85067749023438 * scale, 191.99996948242188 * scale, 193.85067749023438 * scale, 220.99996948242188 * scale, 196.85067749023438 * scale);
            fill_path(ctx, undefined, color[4], 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(176.99996948242188 * scale, 117.85067749023438 * scale);
            ctx.bezierCurveTo(181.99996948242188 * scale, 120.85067749023438 * scale, 181.99996948242188 * scale, 120.85067749023438 * scale, 186.99996948242188 * scale, 123.85067749023438 * scale);
            ctx.bezierCurveTo(183.99996948242188 * scale, 137.85067749023438 * scale, 185.99996948242188 * scale, 136.85067749023438 * scale, 190.99996948242188 * scale, 136.85067749023438 * scale);
            ctx.bezierCurveTo(186.99996948242188 * scale, 147.85067749023438 * scale, 189.99996948242188 * scale, 152.85067749023438 * scale, 193.99996948242188 * scale, 155.85067749023438 * scale);
            ctx.bezierCurveTo(187.99996948242188 * scale, 165.85067749023438 * scale, 190.99996948242188 * scale, 169.85067749023438 * scale, 190.99996948242188 * scale, 172.85067749023438 * scale);
            ctx.bezierCurveTo(186.99996948242188 * scale, 183.85067749023438 * scale, 186.99996948242188 * scale, 185.85067749023438 * scale, 189.99996948242188 * scale, 188.85067749023438 * scale);
            ctx.bezierCurveTo(182.49996948242188 * scale, 195.35067749023438 * scale, 182.49996948242188 * scale, 195.35067749023438 * scale, 174.99996948242188 * scale, 201.85067749023438 * scale);
            fill_path(ctx, undefined, color[4], 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(176.99996948242188 * scale, 112.18402099609375 * scale);
            ctx.bezierCurveTo(183.99996948242188 * scale, 119.18402099609375 * scale, 186.99996948242188 * scale, 117.18402099609375 * scale, 192.99996948242188 * scale, 116.18402099609375 * scale);
            ctx.bezierCurveTo(191.99996948242188 * scale, 126.18402099609375 * scale, 193.99996948242188 * scale, 130.18402099609375 * scale, 199.99996948242188 * scale, 130.18402099609375 * scale);
            ctx.bezierCurveTo(194.99996948242188 * scale, 145.18402099609375 * scale, 197.99996948242188 * scale, 147.18402099609375 * scale, 201.99996948242188 * scale, 153.18402099609375 * scale);
            ctx.bezierCurveTo(196.99996948242188 * scale, 164.18402099609375 * scale, 197.99996948242188 * scale, 169.18402099609375 * scale, 201.99996948242188 * scale, 174.18402099609375 * scale);
            ctx.bezierCurveTo(194.99996948242188 * scale, 184.18402099609375 * scale, 196.99996948242188 * scale, 187.18402099609375 * scale, 200.99996948242188 * scale, 193.18402099609375 * scale);
            ctx.bezierCurveTo(185.99996948242188 * scale, 195.18402099609375 * scale, 181.99996948242188 * scale, 201.18402099609375 * scale, 174.99996948242188 * scale, 210.18402099609375 * scale);
            fill_path(ctx, undefined, color[4], 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(176.99996948242188 * scale, 101.29513549804688 * scale);
            ctx.bezierCurveTo(181.99996948242188 * scale, 108.29513549804688 * scale, 189.99996948242188 * scale, 110.29513549804688 * scale, 195.99996948242188 * scale, 107.29513549804688 * scale);
            ctx.bezierCurveTo(197.99996948242188 * scale, 121.29513549804688 * scale, 200.99996948242188 * scale, 122.29513549804688 * scale, 206.99996948242188 * scale, 122.29513549804688 * scale);
            ctx.bezierCurveTo(201.99996948242188 * scale, 138.29513549804688 * scale, 204.99996948242188 * scale, 142.29513549804688 * scale, 211.99996948242188 * scale, 148.29513549804688 * scale);
            ctx.bezierCurveTo(201.99996948242188 * scale, 156.29513549804688 * scale, 205.99996948242188 * scale, 167.29513549804688 * scale, 213.99996948242188 * scale, 173.29513549804688 * scale);
            ctx.bezierCurveTo(204.99996948242188 * scale, 181.29513549804688 * scale, 204.99996948242188 * scale, 187.29513549804688 * scale, 205.99996948242188 * scale, 193.29513549804688 * scale);
            ctx.bezierCurveTo(190.99996948242188 * scale, 198.29513549804688 * scale, 181.99996948242188 * scale, 205.29513549804688 * scale, 174.99996948242188 * scale, 214.29513549804688 * scale);
            fill_path(ctx, undefined, color[4], 3 * scale);
            ctx.restore();
        }
        ctx.translate(can.width / 2, can.height / 2);
        if (!i) {
            ctx.globalAlpha = 0.5;
            round_rect(ctx, -wt2, -ht2, wt, ht + shadow, round);
            fill_path(ctx, color[0]);
            if (rotate)
                ctx.rotate(Math.PI);

            ctx.globalAlpha = 1;
            round_rect(ctx, -wt2, -ht2, wt, ht, round);
            fill_path(ctx, color[1], color[2], width);
            ctx.globalAlpha = 1;
            round_rect(ctx, -wt2 + (35 * scale), -ht2 + (20 * scale), wt - (50 * scale), ht - (50 * scale), round - (10 * scale));
            fill_path(ctx, color[3]);
        }
        if (i == 3) {
            ctx.translate(-can.width / 2, -can.height / 2);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(121 * scale, 190 * scale);
            ctx.bezierCurveTo(129 * scale, 186 * scale, 137 * scale, 183 * scale, 135 * scale, 163 * scale);
            ctx.bezierCurveTo(131 * scale, 135 * scale, 153 * scale, 127 * scale, 177 * scale, 124 * scale);
            ctx.bezierCurveTo(198 * scale, 120 * scale, 208 * scale, 122 * scale, 226 * scale, 128 * scale);
            ctx.bezierCurveTo(261 * scale, 112 * scale, 271 * scale, 126 * scale, 287 * scale, 147 * scale);
            ctx.bezierCurveTo(310 * scale, 163 * scale, 304 * scale, 183 * scale, 283 * scale, 196 * scale);
            ctx.bezierCurveTo(296 * scale, 249 * scale, 278 * scale, 262 * scale, 253 * scale, 263 * scale);
            ctx.bezierCurveTo(210 * scale, 264 * scale, 188 * scale, 252 * scale, 177 * scale, 234 * scale);
            ctx.bezierCurveTo(133 * scale, 242 * scale, 123 * scale, 241 * scale, 115 * scale, 225 * scale);
            ctx.bezierCurveTo(109 * scale, 206 * scale, 115 * scale, 193 * scale, 121 * scale, 190 * scale);
            ctx.closePath();
            fill_path(ctx, color[4]);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(219 * scale, 144 * scale);
            ctx.bezierCurveTo(251 * scale, 121 * scale, 277 * scale, 136 * scale, 276 * scale, 159 * scale);
            ctx.bezierCurveTo(276 * scale, 176 * scale, 273 * scale, 191 * scale, 242 * scale, 193 * scale);
            ctx.bezierCurveTo(226 * scale, 228 * scale, 155 * scale, 219 * scale, 150 * scale, 183 * scale);
            ctx.bezierCurveTo(142 * scale, 144 * scale, 174 * scale, 127 * scale, 219 * scale, 144 * scale);
            ctx.closePath();
            fill_path(ctx, color[5]);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(123 * scale, 214 * scale);
            ctx.bezierCurveTo(119 * scale, 198 * scale, 129 * scale, 189 * scale, 146 * scale, 194 * scale);
            ctx.bezierCurveTo(158 * scale, 201 * scale, 165 * scale, 218 * scale, 147 * scale, 226 * scale);
            ctx.bezierCurveTo(135 * scale, 230 * scale, 125 * scale, 222 * scale, 123 * scale, 214 * scale);
            ctx.closePath();
            fill_path(ctx, color[5]);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(257 * scale, 199 * scale);
            ctx.bezierCurveTo(264 * scale, 199 * scale, 275 * scale, 213 * scale, 261 * scale, 220 * scale);
            ctx.bezierCurveTo(246 * scale, 225 * scale, 235 * scale, 200 * scale, 257 * scale, 199 * scale);
            ctx.closePath();
            fill_path(ctx, color[5]);
            ctx.translate(-5 * scale, 55 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(186 * scale, 123 * scale);
            ctx.bezierCurveTo(198 * scale, 115 * scale, 219 * scale, 110 * scale, 219 * scale, 123 * scale);
            ctx.bezierCurveTo(216 * scale, 135 * scale, 171 * scale, 143 * scale, 186 * scale, 123 * scale);
            ctx.closePath();
            fill_path(ctx, color[5]);
            ctx.translate(5 * scale, -55 * scale);
            ctx.translate(-5 * scale, 15 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(171 * scale, 241 * scale);
            ctx.bezierCurveTo(189 * scale, 234 * scale, 200 * scale, 248 * scale, 189 * scale, 254 * scale);
            ctx.bezierCurveTo(179 * scale, 260 * scale, 158 * scale, 246 * scale, 171 * scale, 241 * scale);
            ctx.closePath();
            fill_path(ctx, color[5]);
        } else if (i == 4) {
            ctx.translate(-can.width / 2, -can.height / 2);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(30 * scale, 167 * scale);
            ctx.bezierCurveTo(47 * scale, 144 * scale, 64 * scale, 140 * scale, 80 * scale, 147 * scale);
            ctx.bezierCurveTo(95 * scale, 154 * scale, 95 * scale, 159 * scale, 100 * scale, 179 * scale);
            ctx.bezierCurveTo(105 * scale, 202 * scale, 95 * scale, 218 * scale, 69 * scale, 218 * scale);
            ctx.bezierCurveTo(48 * scale, 236 * scale, 26 * scale, 223 * scale, 28 * scale, 213 * scale);
            ctx.bezierCurveTo(28 * scale, 205 * scale, 29 * scale, 199 * scale, 32 * scale, 195 * scale);
            ctx.bezierCurveTo(21 * scale, 183 * scale, 27 * scale, 173 * scale, 30 * scale, 167 * scale);
            ctx.closePath();
            fill_path(ctx, color[4]);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(26 * scale, 145 * scale);
            ctx.bezierCurveTo(32 * scale, 138 * scale, 37 * scale, 137 * scale, 40 * scale, 139 * scale);
            ctx.bezierCurveTo(43 * scale, 140 * scale, 41 * scale, 150 * scale, 31 * scale, 159 * scale);
            ctx.bezierCurveTo(23 * scale, 166 * scale, 17 * scale, 158 * scale, 26 * scale, 145 * scale);
            ctx.closePath();
            fill_path(ctx, color[4]);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(13 * scale, 193 * scale);
            ctx.bezierCurveTo(21 * scale, 187 * scale, 30 * scale, 190 * scale, 20 * scale, 202 * scale);
            ctx.bezierCurveTo(13 * scale, 208 * scale, 7 * scale, 202 * scale, 13 * scale, 193 * scale);
            ctx.closePath();
            fill_path(ctx, color[4]);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(121 * scale, 190 * scale);
            ctx.bezierCurveTo(129 * scale, 186 * scale, 137 * scale, 183 * scale, 135 * scale, 163 * scale);
            ctx.bezierCurveTo(131 * scale, 135 * scale, 153 * scale, 127 * scale, 177 * scale, 124 * scale);
            ctx.bezierCurveTo(198 * scale, 120 * scale, 208 * scale, 122 * scale, 226 * scale, 128 * scale);
            ctx.bezierCurveTo(261 * scale, 112 * scale, 271 * scale, 126 * scale, 287 * scale, 147 * scale);
            ctx.bezierCurveTo(310 * scale, 163 * scale, 304 * scale, 183 * scale, 283 * scale, 196 * scale);
            ctx.bezierCurveTo(296 * scale, 249 * scale, 278 * scale, 262 * scale, 253 * scale, 263 * scale);
            ctx.bezierCurveTo(210 * scale, 264 * scale, 188 * scale, 252 * scale, 177 * scale, 234 * scale);
            ctx.bezierCurveTo(133 * scale, 242 * scale, 123 * scale, 241 * scale, 115 * scale, 225 * scale);
            ctx.bezierCurveTo(109 * scale, 206 * scale, 115 * scale, 193 * scale, 121 * scale, 190 * scale);
            ctx.closePath();
            fill_path(ctx, color[4]);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(335 * scale, 196 * scale);
            ctx.bezierCurveTo(312 * scale, 208 * scale, 300 * scale, 185 * scale, 309 * scale, 167 * scale);
            ctx.bezierCurveTo(314 * scale, 141 * scale, 339 * scale, 127 * scale, 359 * scale, 144 * scale);
            ctx.bezierCurveTo(363 * scale, 148 * scale, 364 * scale, 150 * scale, 364 * scale, 150 * scale);
            ctx.bezierCurveTo(392 * scale, 143 * scale, 396 * scale, 183 * scale, 378 * scale, 204 * scale);
            ctx.bezierCurveTo(367 * scale, 215 * scale, 339 * scale, 208 * scale, 335 * scale, 196 * scale);
            ctx.closePath();
            fill_path(ctx, color[4]);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(349 * scale, 212 * scale);
            ctx.bezierCurveTo(339 * scale, 216 * scale, 334 * scale, 208 * scale, 341 * scale, 203 * scale);
            ctx.bezierCurveTo(353 * scale, 198 * scale, 361 * scale, 205 * scale, 349 * scale, 212 * scale);
            ctx.closePath();
            fill_path(ctx, color[4]);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(46 * scale, 165 * scale);
            ctx.bezierCurveTo(55 * scale, 148 * scale, 85 * scale, 157 * scale, 83 * scale, 175 * scale);
            ctx.bezierCurveTo(99 * scale, 185 * scale, 89 * scale, 212 * scale, 66 * scale, 204 * scale);
            ctx.bezierCurveTo(55 * scale, 212 * scale, 43 * scale, 212 * scale, 41 * scale, 202 * scale);
            ctx.bezierCurveTo(39 * scale, 194 * scale, 42 * scale, 187 * scale, 49 * scale, 185 * scale);
            ctx.bezierCurveTo(44 * scale, 175 * scale, 45 * scale, 172 * scale, 46 * scale, 165 * scale);
            ctx.closePath();
            fill_path(ctx, color[4]);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(219 * scale, 144 * scale);
            ctx.bezierCurveTo(251 * scale, 121 * scale, 277 * scale, 136 * scale, 276 * scale, 159 * scale);
            ctx.bezierCurveTo(276 * scale, 176 * scale, 273 * scale, 191 * scale, 242 * scale, 193 * scale);
            ctx.bezierCurveTo(226 * scale, 228 * scale, 155 * scale, 219 * scale, 150 * scale, 183 * scale);
            ctx.bezierCurveTo(142 * scale, 144 * scale, 174 * scale, 127 * scale, 219 * scale, 144 * scale);
            ctx.closePath();
            fill_path(ctx, color[5]);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(123 * scale, 214 * scale);
            ctx.bezierCurveTo(119 * scale, 198 * scale, 129 * scale, 189 * scale, 146 * scale, 194 * scale);
            ctx.bezierCurveTo(158 * scale, 201 * scale, 165 * scale, 218 * scale, 147 * scale, 226 * scale);
            ctx.bezierCurveTo(135 * scale, 230 * scale, 125 * scale, 222 * scale, 123 * scale, 214 * scale);
            ctx.closePath();
            fill_path(ctx, color[5]);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(257 * scale, 199 * scale);
            ctx.bezierCurveTo(264 * scale, 199 * scale, 275 * scale, 213 * scale, 261 * scale, 220 * scale);
            ctx.bezierCurveTo(246 * scale, 225 * scale, 235 * scale, 200 * scale, 257 * scale, 199 * scale);
            ctx.closePath();
            fill_path(ctx, color[5]);
            ctx.translate(-5 * scale, 55 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(186 * scale, 123 * scale);
            ctx.bezierCurveTo(198 * scale, 115 * scale, 219 * scale, 110 * scale, 219 * scale, 123 * scale);
            ctx.bezierCurveTo(216 * scale, 135 * scale, 171 * scale, 143 * scale, 186 * scale, 123 * scale);
            ctx.closePath();
            fill_path(ctx, color[5]);
            ctx.translate(5 * scale, -55 * scale);
            ctx.translate(-5 * scale, 15 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(171 * scale, 241 * scale);
            ctx.bezierCurveTo(189 * scale, 234 * scale, 200 * scale, 248 * scale, 189 * scale, 254 * scale);
            ctx.bezierCurveTo(179 * scale, 260 * scale, 158 * scale, 246 * scale, 171 * scale, 241 * scale);
            ctx.closePath();
            fill_path(ctx, color[5]);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(367 * scale, 164 * scale);
            ctx.bezierCurveTo(380 * scale, 160 * scale, 391 * scale, 185 * scale, 371 * scale, 189 * scale);
            ctx.bezierCurveTo(362 * scale, 192 * scale, 354 * scale, 191 * scale, 350 * scale, 185 * scale);
            ctx.bezierCurveTo(326 * scale, 205 * scale, 314 * scale, 182 * scale, 316 * scale, 171 * scale);
            ctx.bezierCurveTo(317 * scale, 150 * scale, 332 * scale, 143 * scale, 347 * scale, 147 * scale);
            ctx.bezierCurveTo(361 * scale, 151 * scale, 366 * scale, 158 * scale, 367 * scale, 164 * scale);
            ctx.closePath();
            fill_path(ctx, color[4]);
        }
        return can;
    };

    function create_music_button(scale, color, i, on) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 121 * scale;
        can.height = 130 * scale;
        ctx.translate(0, 20 * scale);
        if (i == 1) {
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(6 * scale, 23 * scale);
            ctx.bezierCurveTo(6 * scale, 46 * scale, 6 * scale, 46 * scale, 6 * scale, 69 * scale);
            ctx.bezierCurveTo(21 * scale, 69 * scale, 21 * scale, 69 * scale, 36 * scale, 69 * scale);
            ctx.bezierCurveTo(45.5 * scale, 78.5 * scale, 45.5 * scale, 78.5 * scale, 55 * scale, 88 * scale);
            ctx.bezierCurveTo(55.5 * scale, 45.5 * scale, 55.5 * scale, 45.5 * scale, 56 * scale, 3 * scale);
            ctx.bezierCurveTo(47 * scale, 14 * scale, 47 * scale, 14 * scale, 38 * scale, 25 * scale);
            ctx.bezierCurveTo(23 * scale, 25 * scale, 23 * scale, 25 * scale, 6 * scale, 23 * scale);
            ctx.closePath();
            fill_path(ctx, undefined, color[3], 13 * scale);
        }
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(6 * scale, 23 * scale);
        ctx.bezierCurveTo(6 * scale, 46 * scale, 6 * scale, 46 * scale, 6 * scale, 69 * scale);
        ctx.bezierCurveTo(21 * scale, 69 * scale, 21 * scale, 69 * scale, 36 * scale, 69 * scale);
        ctx.bezierCurveTo(45.5 * scale, 78.5 * scale, 45.5 * scale, 78.5 * scale, 55 * scale, 88 * scale);
        ctx.bezierCurveTo(55.5 * scale, 45.5 * scale, 55.5 * scale, 45.5 * scale, 56 * scale, 3 * scale);
        ctx.bezierCurveTo(47 * scale, 14 * scale, 47 * scale, 14 * scale, 38 * scale, 25 * scale);
        ctx.bezierCurveTo(23 * scale, 25 * scale, 23 * scale, 25 * scale, 6 * scale, 23 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 4 * scale);
        if (on == 1) {
            ctx.translate(0, 5 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(67 * scale, 30 * scale);
            ctx.bezierCurveTo(73 * scale, 47 * scale, 69 * scale, 45 * scale, 67 * scale, 58 * scale);
            fill_path(ctx, undefined, color[0], 10 * scale);
            ctx.translate(3, 0 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(70 * scale, 17 * scale);
            ctx.bezierCurveTo(83 * scale, 45 * scale, 76 * scale, 55 * scale, 70 * scale, 69 * scale);
            fill_path(ctx, undefined, color[0], 10 * scale);
            ctx.translate(3, 0 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(76 * scale, 8 * scale);
            ctx.bezierCurveTo(88 * scale, 31 * scale, 89 * scale, 55 * scale, 76 * scale, 79 * scale);
            fill_path(ctx, undefined, color[0], 10 * scale);
            if (i == 1) {
                ctx.translate(-6 * scale, -5 * scale);
                ctx.beginPath();
                ctx.lineCap = "round";
                ctx.lineJoin = "round";
                ctx.moveTo(67 * scale, 30 * scale);
                ctx.bezierCurveTo(73 * scale, 47 * scale, 69 * scale, 45 * scale, 67 * scale, 58 * scale);
                fill_path(ctx, undefined, color[3], 18 * scale);
                ctx.translate(3, 0 * scale);
                ctx.beginPath();
                ctx.lineCap = "round";
                ctx.lineJoin = "round";
                ctx.moveTo(70 * scale, 17 * scale);
                ctx.bezierCurveTo(83 * scale, 45 * scale, 76 * scale, 55 * scale, 70 * scale, 69 * scale);
                fill_path(ctx, undefined, color[3], 18 * scale);
                ctx.translate(3, 0 * scale);
                ctx.beginPath();
                ctx.lineCap = "round";
                ctx.lineJoin = "round";
                ctx.moveTo(76 * scale, 8 * scale);
                ctx.bezierCurveTo(88 * scale, 31 * scale, 89 * scale, 55 * scale, 76 * scale, 79 * scale);
                fill_path(ctx, undefined, color[3], 18 * scale);
                ctx.translate(-6, 0 * scale);
            } else {
                ctx.translate(-6 * scale, -5 * scale);
            }
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(67 * scale, 30 * scale);
            ctx.bezierCurveTo(73 * scale, 47 * scale, 69 * scale, 45 * scale, 67 * scale, 58 * scale);
            fill_path(ctx, undefined, color[2], 10 * scale);
            ctx.translate(3, 0 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(70 * scale, 17 * scale);
            ctx.bezierCurveTo(83 * scale, 45 * scale, 76 * scale, 55 * scale, 70 * scale, 69 * scale);
            fill_path(ctx, undefined, color[2], 10 * scale);
            ctx.translate(3, 0 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(76 * scale, 8 * scale);
            ctx.bezierCurveTo(88 * scale, 31 * scale, 89 * scale, 55 * scale, 76 * scale, 79 * scale);
            fill_path(ctx, undefined, color[2], 10 * scale);
        } else {
            if (i == 1) {
                ctx.beginPath();
                ctx.lineCap = "round";
                ctx.lineJoin = "round";
                ctx.moveTo(108 * scale, 27 * scale);
                ctx.bezierCurveTo(94 * scale, 45.5 * scale, 94 * scale, 45.5 * scale, 80 * scale, 64 * scale);
                ctx.closePath();
                fill_path(ctx, undefined, color[3], 18 * scale);
                ctx.beginPath();
                ctx.lineCap = "round";
                ctx.lineJoin = "round";
                ctx.moveTo(79 * scale, 30 * scale);
                ctx.bezierCurveTo(93 * scale, 47 * scale, 93 * scale, 47 * scale, 107 * scale, 64 * scale);
                ctx.closePath();
                fill_path(ctx, undefined, color[3], 18 * scale);
            } else {
                ctx.translate(0, -5 * scale);
                ctx.beginPath();
                ctx.lineCap = "round";
                ctx.lineJoin = "round";
                ctx.moveTo(108 * scale, 27 * scale);
                ctx.bezierCurveTo(94 * scale, 45.5 * scale, 94 * scale, 45.5 * scale, 80 * scale, 64 * scale);
                ctx.closePath();
                fill_path(ctx, undefined, color[0], 7 * scale);
                ctx.beginPath();
                ctx.lineCap = "round";
                ctx.lineJoin = "round";
                ctx.moveTo(79 * scale, 30 * scale);
                ctx.bezierCurveTo(93 * scale, 47 * scale, 93 * scale, 47 * scale, 107 * scale, 64 * scale);
                ctx.closePath();
                fill_path(ctx, undefined, color[0], 7 * scale);
                ctx.translate(0, 5 * scale);
            }
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(108 * scale, 27 * scale);
            ctx.bezierCurveTo(94 * scale, 45.5 * scale, 94 * scale, 45.5 * scale, 80 * scale, 64 * scale);
            ctx.closePath();
            fill_path(ctx, undefined, color[2], 7 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(79 * scale, 30 * scale);
            ctx.bezierCurveTo(93 * scale, 47 * scale, 93 * scale, 47 * scale, 107 * scale, 64 * scale);
            ctx.closePath();
            fill_path(ctx, undefined, color[2], 7 * scale);
        }
        return can;
    };

    function create_tree_snow(scale, color, rotate) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        ctx.rotate(Math.PI / 2);
    };

    function create_tree_branch(scale, color, rotate) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        var w = scale * 450;
        var h = scale * 145;
        var w2 = w / 2;
        var h2 = h / 2;
        var round = scale * 10;
        var shadow = scale * 20;
        var wt = scale * 300;
        var ht = scale * 30;
        var r = scale * 80;
        var wt2 = wt / 2;
        var ht2 = ht / 2;
        var width = 4;
        if (rotate) {
            var w = scale * 145;
            var h = scale * 450;
            can.width = w;
            can.height = h;
            ctx.rotate(Math.PI / 2);
            ctx.save();
            ctx.globalAlpha = 0.5;
            round_rect(ctx, 100 * scale, -110 * scale, wt, ht, round);
            fill_path(ctx, color[0]);
            ctx.translate(178 * scale, -98 * scale);
            round_rect(ctx, -wt2, -ht2 - (6 * scale), 100 * scale, 100 * scale, round);
            fill_path(ctx, color[0]);
            ctx.translate(-50 * scale, 5 * scale);
            round_rect(ctx, 220 * scale, -15 * scale, 90 * scale, 90 * scale, round);
            fill_path(ctx, color[0]);
            ctx.restore();
            ctx.save();
            ctx.globalAlpha = 1;
            ctx.translate(250 * scale, -63 * scale);
            round_rect(ctx, -wt2 - (20 * scale), -ht2, wt, ht, round);
            fill_path(ctx, color[1], color[2], width);
            ctx.translate(-70 * scale, -40 * scale);
            round_rect(ctx, -wt2 - (20 * scale), -ht2, 100 * scale, 100 * scale, round);
            fill_path(ctx, color[3], color[4], width);
            ctx.translate(-70 * scale, 15 * scale);
            round_rect(ctx, 220 * scale, -22 * scale, 90 * scale, 90 * scale, round);
            fill_path(ctx, color[3], color[4], width);
            round_rect(ctx, 230 * scale, -12 * scale, 55 * scale, 55 * scale, round);
            fill_path(ctx, color[5]);
            ctx.translate(-70 * scale, 0);
            round_rect(ctx, -15 * scale, -2 * scale, 60 * scale, 60 * scale, round);
            fill_path(ctx, color[5]);
            ctx.restore();
        } else {
            can.width = w;
            can.height = h;
            ctx.save();
            ctx.globalAlpha = 0.5;
            ctx.translate(w2, h2 + (10 * scale));
            round_rect(ctx, -wt2, -ht2, wt, ht, round);
            fill_path(ctx, color[0]);
            ctx.translate(-65 * scale, -25 * scale);
            round_rect(ctx, -wt2, -ht2 - (6 * scale), 100 * scale, 100 * scale, 15 * scale);
            fill_path(ctx, color[0]);
            ctx.translate(-35 * scale, -5 * scale);
            round_rect(ctx, 220 * scale, -15 * scale, 90 * scale, 90 * scale, 15 * scale);
            fill_path(ctx, color[0]);
            ctx.restore();
            ctx.save();
            ctx.globalAlpha = 1;
            ctx.translate(240 * scale, 70 * scale);
            round_rect(ctx, -wt2, -ht2, wt, ht, round);
            fill_path(ctx, color[1], color[2], width);
            ctx.translate(-60 * scale, -40 * scale);
            round_rect(ctx, -wt2 - (20 * scale), -ht2, 100 * scale, 100 * scale, 15 * scale);
            fill_path(ctx, color[3], color[4], width);
            ctx.translate(-55 * scale, 10 * scale);
            round_rect(ctx, 220 * scale, -22 * scale, 90 * scale, 90 * scale, 15 * scale);
            fill_path(ctx, color[3], color[4], width);
            round_rect(ctx, 240 * scale, -12 * scale, 55 * scale, 55 * scale, 12 * scale);
            fill_path(ctx, color[5]);
            ctx.translate(45 * scale, 0 * scale);
            round_rect(ctx, -145 * scale, -2 * scale, 60 * scale, 60 * scale, 12 * scale);
            fill_path(ctx, color[5]);
            ctx.restore();
        }
        return can;
    };

    function create_apricot_forest(branch, tree) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        var w = Math.max(tree.width, branch.width);
        var h = Math.max(tree.height, branch.height);
        can.width = w;
        can.height = h;
        ctx.drawImage(branch, (w - branch.width) / 2, (h - branch.height) / 2);
        ctx.drawImage(tree, (w - tree.width) / 2, (h - tree.height) / 2);
        return can;
    };

    function create_pickaxe(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        var w = scale * 105;
        var h = scale * 125;
        var width = scale * 4;
        var w2 = w / 2;
        var h2 = h / 2;
        var round = scale * 10;
        var shadow = scale * 5;
        var wa = scale * 10;
        var ha = scale * 110;
        var wa2 = wa / 2;
        var ha2 = ha / 2;
        can.width = w;
        can.height = h;
        ctx.save();
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate((w / 2) + (8 * scale), (h / 2) + shadow);
        round_rect(ctx, -wa2, -ha2, wa, ha, round);
        if (draw_shadow) {
            fill_path(ctx, color[0]);
        } else {
            fill_path(ctx, color[1]);
        };
        ctx.translate((-130 * scale) + shadow, (-128 * scale) + shadow);
        ctx.beginPath();
        ctx.bezierCurveTo(159 * scale, 93 * scale, 156 * scale, 99 * scale, 154 * scale, 102 * scale);
        ctx.bezierCurveTo(128 * scale, 92 * scale, 90 * scale, 93 * scale, 72 * scale, 96 * scale);
        ctx.bezierCurveTo(68 * scale, 84 * scale, 143 * scale, 73 * scale, 162 * scale, 86 * scale);
        ctx.closePath();
        fill_path(ctx, color[2]);
        ctx.restore();
        ctx.translate((w / 2) + 8, h / 2);
        ctx.globalAlpha = 1;
        round_rect(ctx, -wa2, -ha2, wa, ha, round);
        fill_path(ctx, color[3], color[4], width);
        ctx.translate(-130 * scale, -125 * scale);
        ctx.beginPath();
        ctx.bezierCurveTo(159 * scale, 93 * scale, 156 * scale, 99 * scale, 154 * scale, 102 * scale);
        ctx.bezierCurveTo(128 * scale, 92 * scale, 90 * scale, 93 * scale, 72 * scale, 96 * scale);
        ctx.bezierCurveTo(68 * scale, 84 * scale, 143 * scale, 73 * scale, 162 * scale, 86 * scale);
        ctx.closePath();
        fill_path(ctx, color[5], color[6], width);
        return can;
    };

    function create_sword_wood(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 170 * scale;
        can.height = 469 * scale;
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(20 * scale, 20 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(88 * scale, 30 * scale);
        ctx.bezierCurveTo(96 * scale, 49.5 * scale, 96 * scale, 49.5 * scale, 104 * scale, 69 * scale);
        ctx.bezierCurveTo(105.5 * scale, 41.5 * scale, 105.5 * scale, 41.5 * scale, 107 * scale, 14 * scale);
        ctx.bezierCurveTo(114 * scale, 9.5 * scale, 114 * scale, 9.5 * scale, 121 * scale, 5 * scale);
        ctx.bezierCurveTo(135.5 * scale, 27.5 * scale, 135.5 * scale, 27.5 * scale, 150 * scale, 50 * scale);
        ctx.bezierCurveTo(110.5 * scale, 286 * scale, 110.5 * scale, 286 * scale, 103 * scale, 331 * scale);
        ctx.bezierCurveTo(69.5 * scale, 325 * scale, 69.5 * scale, 325 * scale, 36 * scale, 319 * scale);
        ctx.bezierCurveTo(56.5 * scale, 180 * scale, 56.5 * scale, 180 * scale, 77 * scale, 41 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(118 * scale, 31 * scale);
        ctx.bezierCurveTo(125 * scale, 43 * scale, 125 * scale, 43 * scale, 132 * scale, 55 * scale);
        ctx.bezierCurveTo(109.5 * scale, 185.5 * scale, 109.5 * scale, 185.5 * scale, 87 * scale, 316 * scale);
        ctx.bezierCurveTo(72 * scale, 313.5 * scale, 72 * scale, 313.5 * scale, 57 * scale, 311 * scale);
        ctx.bezierCurveTo(76.5 * scale, 181 * scale, 76.5 * scale, 181 * scale, 96 * scale, 51 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(56 * scale, 328 * scale);
        ctx.bezierCurveTo(47 * scale, 385.5 * scale, 47 * scale, 385.5 * scale, 38 * scale, 443 * scale);
        ctx.bezierCurveTo(52 * scale, 446 * scale, 52 * scale, 446 * scale, 66 * scale, 449 * scale);
        ctx.bezierCurveTo(76.5 * scale, 388.5 * scale, 76.5 * scale, 388.5 * scale, 87 * scale, 328 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(74 * scale, 302 * scale);
        ctx.bezierCurveTo(104 * scale, 316.5 * scale, 104 * scale, 316.5 * scale, 134 * scale, 331 * scale);
        ctx.bezierCurveTo(133 * scale, 341 * scale, 133 * scale, 341 * scale, 132 * scale, 351 * scale);
        ctx.bezierCurveTo(69.5 * scale, 342 * scale, 69.5 * scale, 342 * scale, 7 * scale, 333 * scale);
        ctx.bezierCurveTo(8 * scale, 323 * scale, 8 * scale, 323 * scale, 9 * scale, 313 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.save();
        ctx.translate(51.5 * scale, 440.5 * scale);
        ctx.rotate(0.2);
        round_rect(ctx, -20.5 * scale, -18.5 * scale, 41 * scale, 37 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(73 * scale, 316 * scale);
        ctx.bezierCurveTo(90 * scale, 324.5 * scale, 90 * scale, 324.5 * scale, 107 * scale, 333 * scale);
        ctx.bezierCurveTo(70 * scale, 327.5 * scale, 70 * scale, 327.5 * scale, 33 * scale, 322 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(-20 * scale, -20 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(88 * scale, 30 * scale);
        ctx.bezierCurveTo(96 * scale, 49.5 * scale, 96 * scale, 49.5 * scale, 104 * scale, 69 * scale);
        ctx.bezierCurveTo(105.5 * scale, 41.5 * scale, 105.5 * scale, 41.5 * scale, 107 * scale, 14 * scale);
        ctx.bezierCurveTo(114 * scale, 9.5 * scale, 114 * scale, 9.5 * scale, 121 * scale, 5 * scale);
        ctx.bezierCurveTo(135.5 * scale, 27.5 * scale, 135.5 * scale, 27.5 * scale, 150 * scale, 50 * scale);
        ctx.bezierCurveTo(110.5 * scale, 286 * scale, 110.5 * scale, 286 * scale, 103 * scale, 331 * scale);
        ctx.bezierCurveTo(69.5 * scale, 325 * scale, 69.5 * scale, 325 * scale, 36 * scale, 319 * scale);
        ctx.bezierCurveTo(56.5 * scale, 180 * scale, 56.5 * scale, 180 * scale, 77 * scale, 41 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 7 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(118 * scale, 31 * scale);
        ctx.bezierCurveTo(125 * scale, 43 * scale, 125 * scale, 43 * scale, 132 * scale, 55 * scale);
        ctx.bezierCurveTo(109.5 * scale, 185.5 * scale, 109.5 * scale, 185.5 * scale, 87 * scale, 316 * scale);
        ctx.bezierCurveTo(72 * scale, 313.5 * scale, 72 * scale, 313.5 * scale, 57 * scale, 311 * scale);
        ctx.bezierCurveTo(76.5 * scale, 181 * scale, 76.5 * scale, 181 * scale, 96 * scale, 51 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(88 * scale, 30 * scale);
        ctx.bezierCurveTo(96 * scale, 49.5 * scale, 96 * scale, 49.5 * scale, 104 * scale, 69 * scale);
        ctx.bezierCurveTo(105.5 * scale, 41.5 * scale, 105.5 * scale, 41.5 * scale, 107 * scale, 14 * scale);
        ctx.bezierCurveTo(114 * scale, 9.5 * scale, 114 * scale, 9.5 * scale, 121 * scale, 5 * scale);
        ctx.bezierCurveTo(135.5 * scale, 27.5 * scale, 135.5 * scale, 27.5 * scale, 150 * scale, 50 * scale);
        ctx.bezierCurveTo(110.5 * scale, 286 * scale, 110.5 * scale, 286 * scale, 103 * scale, 331 * scale);
        ctx.bezierCurveTo(69.5 * scale, 325 * scale, 69.5 * scale, 325 * scale, 36 * scale, 319 * scale);
        ctx.bezierCurveTo(56.5 * scale, 180 * scale, 56.5 * scale, 180 * scale, 77 * scale, 41 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[2], 7 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(56 * scale, 328 * scale);
        ctx.bezierCurveTo(47 * scale, 385.5 * scale, 47 * scale, 385.5 * scale, 38 * scale, 443 * scale);
        ctx.bezierCurveTo(52 * scale, 446 * scale, 52 * scale, 446 * scale, 66 * scale, 449 * scale);
        ctx.bezierCurveTo(76.5 * scale, 388.5 * scale, 76.5 * scale, 388.5 * scale, 87 * scale, 328 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 7 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(74 * scale, 302 * scale);
        ctx.bezierCurveTo(104 * scale, 316.5 * scale, 104 * scale, 316.5 * scale, 134 * scale, 331 * scale);
        ctx.bezierCurveTo(133 * scale, 341 * scale, 133 * scale, 341 * scale, 132 * scale, 351 * scale);
        ctx.bezierCurveTo(69.5 * scale, 342 * scale, 69.5 * scale, 342 * scale, 7 * scale, 333 * scale);
        ctx.bezierCurveTo(8 * scale, 323 * scale, 8 * scale, 323 * scale, 9 * scale, 313 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 7 * scale);
        ctx.save();
        ctx.translate(51.5 * scale, 440.5 * scale);
        ctx.rotate(0.2);
        round_rect(ctx, -20.5 * scale, -18.5 * scale, 41 * scale, 37 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[4], color[5], 7 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(73 * scale, 316 * scale);
        ctx.bezierCurveTo(90 * scale, 324.5 * scale, 90 * scale, 324.5 * scale, 107 * scale, 333 * scale);
        ctx.bezierCurveTo(70 * scale, 327.5 * scale, 70 * scale, 327.5 * scale, 33 * scale, 322 * scale);
        ctx.closePath();
        fill_path(ctx, color[6]);
        return can;
    };

    function create_pirate_sword(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 424 * scale;
        can.height = 788 * scale;
        ctx.translate(25 * scale, 25 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.save();
        ctx.translate(193.5 * scale, 602.5 * scale);
        ctx.rotate(-0.12);
        round_rect(ctx, -26.5 * scale, -97.5 * scale, 53 * scale, 195 * scale, 25 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(137 * scale, 519 * scale);
        ctx.bezierCurveTo(182 * scale, 513 * scale, 182 * scale, 513 * scale, 227 * scale, 507 * scale);
        ctx.bezierCurveTo(214 * scale, 417 * scale, 189 * scale, 304 * scale, 221 * scale, 180 * scale);
        ctx.bezierCurveTo(191 * scale, 126 * scale, 192 * scale, 105 * scale, 198 * scale, 64 * scale);
        ctx.bezierCurveTo(123 * scale, 102 * scale, 99 * scale, 285 * scale, 137 * scale, 517 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(175 * scale, 119 * scale);
        ctx.bezierCurveTo(176 * scale, 142 * scale, 184 * scale, 165 * scale, 197 * scale, 183 * scale);
        ctx.bezierCurveTo(167 * scale, 325 * scale, 191 * scale, 405 * scale, 202 * scale, 502 * scale);
        ctx.bezierCurveTo(180 * scale, 503 * scale, 180 * scale, 503 * scale, 158 * scale, 504 * scale);
        ctx.bezierCurveTo(135 * scale, 396 * scale, 134 * scale, 185 * scale, 175 * scale, 119 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(110 * scale, 518 * scale);
        ctx.bezierCurveTo(111.5 * scale, 533 * scale, 111.5 * scale, 533 * scale, 113 * scale, 548 * scale);
        ctx.bezierCurveTo(162.5 * scale, 544 * scale, 162.5 * scale, 544 * scale, 212 * scale, 540 * scale);
        ctx.bezierCurveTo(312 * scale, 535 * scale, 281 * scale, 665 * scale, 225 * scale, 665 * scale);
        ctx.bezierCurveTo(227 * scale, 686.5 * scale, 227 * scale, 686.5 * scale, 229 * scale, 708 * scale);
        ctx.bezierCurveTo(343 * scale, 684 * scale, 354 * scale, 496 * scale, 222 * scale, 498 * scale);
        ctx.bezierCurveTo(165.5 * scale, 503 * scale, 165.5 * scale, 503 * scale, 109 * scale, 508 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        circle(ctx, 204 * scale, 693 * scale, 36.013886210738214 * scale);
        fill_path(ctx, color[0]);
        circle(ctx, 105 * scale, 518 * scale, 30 * scale);
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(171 * scale, 535 * scale);
        ctx.bezierCurveTo(139.5 * scale, 537.5 * scale, 139.5 * scale, 537.5 * scale, 108 * scale, 540 * scale);
        ctx.bezierCurveTo(110 * scale, 527.5 * scale, 110 * scale, 527.5 * scale, 112 * scale, 515 * scale);
        ctx.bezierCurveTo(148 * scale, 513 * scale, 148 * scale, 513 * scale, 184 * scale, 511 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(244 * scale, 669 * scale);
        ctx.bezierCurveTo(248.5 * scale, 680 * scale, 248.5 * scale, 680 * scale, 253 * scale, 691 * scale);
        ctx.bezierCurveTo(239.5 * scale, 697 * scale, 239.5 * scale, 697 * scale, 226 * scale, 703 * scale);
        ctx.bezierCurveTo(223 * scale, 691.5 * scale, 223 * scale, 691.5 * scale, 220 * scale, 680 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.translate(-25 * scale, -25 * scale);
        ctx.globalAlpha = 1;
        ctx.save();
        ctx.translate(193.5 * scale, 602.5 * scale);
        ctx.rotate(-0.12);
        round_rect(ctx, -26.5 * scale, -97.5 * scale, 53 * scale, 195 * scale, 25 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 16 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(137 * scale, 519 * scale);
        ctx.bezierCurveTo(182 * scale, 513 * scale, 182 * scale, 513 * scale, 227 * scale, 507 * scale);
        ctx.bezierCurveTo(214 * scale, 417 * scale, 189 * scale, 304 * scale, 221 * scale, 180 * scale);
        ctx.bezierCurveTo(191 * scale, 126 * scale, 192 * scale, 105 * scale, 198 * scale, 64 * scale);
        ctx.bezierCurveTo(123 * scale, 102 * scale, 99 * scale, 285 * scale, 137 * scale, 517 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 16 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(175 * scale, 119 * scale);
        ctx.bezierCurveTo(176 * scale, 142 * scale, 184 * scale, 165 * scale, 197 * scale, 183 * scale);
        ctx.bezierCurveTo(167 * scale, 325 * scale, 191 * scale, 405 * scale, 202 * scale, 502 * scale);
        ctx.bezierCurveTo(180 * scale, 503 * scale, 180 * scale, 503 * scale, 158 * scale, 504 * scale);
        ctx.bezierCurveTo(135 * scale, 396 * scale, 134 * scale, 185 * scale, 175 * scale, 119 * scale);
        ctx.closePath();
        fill_path(ctx, color[5]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(110 * scale, 518 * scale);
        ctx.bezierCurveTo(111.5 * scale, 533 * scale, 111.5 * scale, 533 * scale, 113 * scale, 548 * scale);
        ctx.bezierCurveTo(162.5 * scale, 544 * scale, 162.5 * scale, 544 * scale, 212 * scale, 540 * scale);
        ctx.bezierCurveTo(312 * scale, 535 * scale, 281 * scale, 665 * scale, 225 * scale, 665 * scale);
        ctx.bezierCurveTo(227 * scale, 686.5 * scale, 227 * scale, 686.5 * scale, 229 * scale, 708 * scale);
        ctx.bezierCurveTo(343 * scale, 684 * scale, 354 * scale, 496 * scale, 222 * scale, 498 * scale);
        ctx.bezierCurveTo(165.5 * scale, 503 * scale, 165.5 * scale, 503 * scale, 109 * scale, 508 * scale);
        ctx.closePath();
        fill_path(ctx, color[6], color[4], 16 * scale);
        circle(ctx, 204 * scale, 693 * scale, 36.013886210738214 * scale);
        fill_path(ctx, color[6], color[4], 16 * scale);
        circle(ctx, 105 * scale, 518 * scale, 30 * scale);
        fill_path(ctx, color[6], color[4], 16 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(171 * scale, 535 * scale);
        ctx.bezierCurveTo(139.5 * scale, 537.5 * scale, 139.5 * scale, 537.5 * scale, 108 * scale, 540 * scale);
        ctx.bezierCurveTo(110 * scale, 527.5 * scale, 110 * scale, 527.5 * scale, 112 * scale, 515 * scale);
        ctx.bezierCurveTo(148 * scale, 513 * scale, 148 * scale, 513 * scale, 184 * scale, 511 * scale);
        ctx.closePath();
        fill_path(ctx, color[6]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(244 * scale, 669 * scale);
        ctx.bezierCurveTo(248.5 * scale, 680 * scale, 248.5 * scale, 680 * scale, 253 * scale, 691 * scale);
        ctx.bezierCurveTo(239.5 * scale, 697 * scale, 239.5 * scale, 697 * scale, 226 * scale, 703 * scale);
        ctx.bezierCurveTo(223 * scale, 691.5 * scale, 223 * scale, 691.5 * scale, 220 * scale, 680 * scale);
        ctx.closePath();
        fill_path(ctx, color[6]);
        circle(ctx, 204 * scale, 693 * scale, 17.029386365926403 * scale);
        fill_path(ctx, color[7]);
        circle(ctx, 106 * scale, 518 * scale, 12 * scale);
        fill_path(ctx, color[7]);
        return can;
    };

    function create_sword(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 100 * scale;
        can.height = 250 * scale;
        ctx.translate(-135 * scale, -75 * scale);
        ctx.globalAlpha = draw_shadow ? 0.8 : 1;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(178.5 * scale, 238.03125 * scale);
        ctx.bezierCurveTo(177 * scale, 175.03125 * scale, 177 * scale, 175.03125 * scale, 175.5 * scale, 112.03125 * scale);
        ctx.bezierCurveTo(184.5 * scale, 100.53125 * scale, 184.5 * scale, 100.53125 * scale, 193.5 * scale, 89.03125 * scale);
        ctx.bezierCurveTo(202 * scale, 100.03125 * scale, 202 * scale, 100.03125 * scale, 210.5 * scale, 111.03125 * scale);
        ctx.bezierCurveTo(209.5 * scale, 174.03125 * scale, 209.5 * scale, 174.03125 * scale, 208.5 * scale, 237.03125 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(155.5 * scale, 239.03125 * scale);
        ctx.bezierCurveTo(194 * scale, 238.53125 * scale, 194 * scale, 238.53125 * scale, 232.5 * scale, 238.03125 * scale);
        ctx.bezierCurveTo(232.5 * scale, 243.03125 * scale, 232.5 * scale, 243.03125 * scale, 232.5 * scale, 248.03125 * scale);
        ctx.bezierCurveTo(194 * scale, 248.53125 * scale, 194 * scale, 248.53125 * scale, 155.5 * scale, 249.03125 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        circle(ctx, 160.5 * scale, 243.03125 * scale, 7 * scale);
        fill_path(ctx, color[0]);
        circle(ctx, 227.5 * scale, 242.03125 * scale, 7 * scale);
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(185.5 * scale, 253.03125 * scale);
        ctx.bezierCurveTo(193.5 * scale, 253.03125 * scale, 193.5 * scale, 253.03125 * scale, 201.5 * scale, 253.03125 * scale);
        ctx.bezierCurveTo(201.5 * scale, 276.03125 * scale, 201.5 * scale, 276.03125 * scale, 201.5 * scale, 299.03125 * scale);
        ctx.bezierCurveTo(194.5 * scale, 299.03125 * scale, 194.5 * scale, 299.03125 * scale, 187.5 * scale, 299.03125 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 5 * scale);
        circle(ctx, 194 * scale, 298 * scale, 9 * scale);
        fill_path(ctx, color[0], color[0], 5 * scale);
        ctx.globalAlpha = 1;
        ctx.translate(-10 * scale, 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(178.5 * scale, 238.03125 * scale);
        ctx.bezierCurveTo(177 * scale, 175.03125 * scale, 177 * scale, 175.03125 * scale, 175.5 * scale, 112.03125 * scale);
        ctx.bezierCurveTo(184.5 * scale, 100.53125 * scale, 184.5 * scale, 100.53125 * scale, 193.5 * scale, 89.03125 * scale);
        ctx.bezierCurveTo(202 * scale, 100.03125 * scale, 202 * scale, 100.03125 * scale, 210.5 * scale, 111.03125 * scale);
        ctx.bezierCurveTo(209.5 * scale, 174.03125 * scale, 209.5 * scale, 174.03125 * scale, 208.5 * scale, 237.03125 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(155.5 * scale, 239.03125 * scale);
        ctx.bezierCurveTo(194 * scale, 238.53125 * scale, 194 * scale, 238.53125 * scale, 232.5 * scale, 238.03125 * scale);
        ctx.bezierCurveTo(232.5 * scale, 243.03125 * scale, 232.5 * scale, 243.03125 * scale, 232.5 * scale, 248.03125 * scale);
        ctx.bezierCurveTo(194 * scale, 248.53125 * scale, 194 * scale, 248.53125 * scale, 155.5 * scale, 249.03125 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 5 * scale);
        circle(ctx, 160.5 * scale, 243.03125 * scale, 7 * scale);
        fill_path(ctx, color[1], color[2], 5 * scale);
        circle(ctx, 227.5 * scale, 242.03125 * scale, 7 * scale);
        fill_path(ctx, color[1], color[2], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(185.5 * scale, 253.03125 * scale);
        ctx.bezierCurveTo(193.5 * scale, 253.03125 * scale, 193.5 * scale, 253.03125 * scale, 201.5 * scale, 253.03125 * scale);
        ctx.bezierCurveTo(201.5 * scale, 276.03125 * scale, 201.5 * scale, 276.03125 * scale, 201.5 * scale, 299.03125 * scale);
        ctx.bezierCurveTo(194.5 * scale, 299.03125 * scale, 194.5 * scale, 299.03125 * scale, 187.5 * scale, 299.03125 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 7 * scale);
        circle(ctx, 194 * scale, 298 * scale, 9 * scale);
        fill_path(ctx, color[1], color[2], 7 * scale);
        return can;
    };

    function create_stonesword(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 290 * scale;
        can.height = 525 * scale;
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(20 * scale, 20 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(111 * scale, 351 * scale);
        ctx.bezierCurveTo(129 * scale, 218 * scale, 129 * scale, 218 * scale, 147 * scale, 85 * scale);
        ctx.bezierCurveTo(167 * scale, 65.5 * scale, 167 * scale, 65.5 * scale, 187 * scale, 46 * scale);
        ctx.bezierCurveTo(201.5 * scale, 70.5 * scale, 201.5 * scale, 70.5 * scale, 216 * scale, 95 * scale);
        ctx.bezierCurveTo(194.5 * scale, 227.5 * scale, 194.5 * scale, 227.5 * scale, 173 * scale, 360 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.save();
        ctx.translate(131 * scale, 425.5 * scale);
        ctx.rotate(0.16);
        round_rect(ctx, -14 * scale, -56.5 * scale, 28 * scale, 113 * scale, 8 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        circle(ctx, 122 * scale, 480 * scale, 18.439088914585774 * scale);
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(79 * scale, 371 * scale);
        ctx.bezierCurveTo(131 * scale, 373 * scale, 145 * scale, 378 * scale, 197 * scale, 388 * scale);
        ctx.bezierCurveTo(205 * scale, 382.5 * scale, 205 * scale, 382.5 * scale, 213 * scale, 377 * scale);
        ctx.bezierCurveTo(167 * scale, 352 * scale, 117 * scale, 345 * scale, 69 * scale, 355 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(-20 * scale, -20 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(111 * scale, 351 * scale);
        ctx.bezierCurveTo(129 * scale, 218 * scale, 129 * scale, 218 * scale, 147 * scale, 85 * scale);
        ctx.bezierCurveTo(167 * scale, 65.5 * scale, 167 * scale, 65.5 * scale, 187 * scale, 46 * scale);
        ctx.bezierCurveTo(201.5 * scale, 70.5 * scale, 201.5 * scale, 70.5 * scale, 216 * scale, 95 * scale);
        ctx.bezierCurveTo(194.5 * scale, 227.5 * scale, 194.5 * scale, 227.5 * scale, 173 * scale, 360 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 12.5 * scale);
        ctx.save();
        ctx.translate(131 * scale, 425.5 * scale);
        ctx.rotate(0.16);
        round_rect(ctx, -14 * scale, -56.5 * scale, 28 * scale, 113 * scale, 8 * scale);
        ctx.restore();
        fill_path(ctx, color[4], color[5], 12.5 * scale);
        circle(ctx, 122 * scale, 480 * scale, 18.439088914585774 * scale);
        fill_path(ctx, color[4], color[5], 12.5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(79 * scale, 371 * scale);
        ctx.bezierCurveTo(131 * scale, 373 * scale, 145 * scale, 378 * scale, 197 * scale, 388 * scale);
        ctx.bezierCurveTo(205 * scale, 382.5 * scale, 205 * scale, 382.5 * scale, 213 * scale, 377 * scale);
        ctx.bezierCurveTo(167 * scale, 352 * scale, 117 * scale, 345 * scale, 69 * scale, 355 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 12.5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(128 * scale, 345 * scale);
        ctx.bezierCurveTo(142 * scale, 345 * scale, 147 * scale, 346 * scale, 158 * scale, 349 * scale);
        ctx.bezierCurveTo(177.5 * scale, 224.5 * scale, 177.5 * scale, 224.5 * scale, 197 * scale, 100 * scale);
        ctx.bezierCurveTo(190.5 * scale, 84.5 * scale, 190.5 * scale, 84.5 * scale, 184 * scale, 69 * scale);
        ctx.bezierCurveTo(173.5 * scale, 82 * scale, 173.5 * scale, 82 * scale, 163 * scale, 95 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        return can;
    };

    function create_crab(scale, useless, color, i) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 283 * scale;
        can.height = 224 * scale;
        ctx.translate(0, 15 * scale);
        ctx.globalAlpha = 0.5;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(93 * scale, 55 * scale);
        ctx.bezierCurveTo(127 * scale, 27 * scale, 195 * scale, 42 * scale, 213 * scale, 78 * scale);
        ctx.bezierCurveTo(254 * scale, 134 * scale, 226 * scale, 198 * scale, 153 * scale, 197 * scale);
        ctx.bezierCurveTo(59 * scale, 204 * scale, 56 * scale, 158 * scale, 51 * scale, 115 * scale);
        ctx.bezierCurveTo(50 * scale, 93 * scale, 81 * scale, 62 * scale, 90 * scale, 57 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(100 * scale, 33 * scale);
        ctx.bezierCurveTo(85 * scale, 62 * scale, 102 * scale, 66 * scale, 110 * scale, 83 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(181 * scale, 32 * scale);
        ctx.bezierCurveTo(196 * scale, 62 * scale, 181 * scale, 68 * scale, 178 * scale, 69 * scale);
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(225 * scale, 52 * scale);
        ctx.bezierCurveTo(228 * scale, 78 * scale, 207 * scale, 77 * scale, 192 * scale, 88 * scale);
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(34 * scale, 134 * scale);
        ctx.bezierCurveTo(46 * scale, 111 * scale, 57 * scale, 111 * scale, 79 * scale, 109 * scale);
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(249 * scale, 135 * scale);
        ctx.bezierCurveTo(233 * scale, 107 * scale, 212 * scale, 112 * scale, 202 * scale, 115 * scale);
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(56 * scale, 50 * scale);
        ctx.bezierCurveTo(56 * scale, 82 * scale, 73 * scale, 82 * scale, 93 * scale, 89 * scale);
        fill_path(ctx, color[0]);
        ctx.translate(0, -15 * scale);
        ctx.globalAlpha = 1;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(100 * scale, 33 * scale);
        ctx.bezierCurveTo(85 * scale, 62 * scale, 102 * scale, 66 * scale, 110 * scale, 83 * scale);
        fill_path(ctx, undefined, color[2], 40 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(181 * scale, 32 * scale);
        ctx.bezierCurveTo(196 * scale, 62 * scale, 181 * scale, 68 * scale, 178 * scale, 69 * scale);
        fill_path(ctx, undefined, color[2], 40 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(225 * scale, 52 * scale);
        ctx.bezierCurveTo(228 * scale, 78 * scale, 207 * scale, 77 * scale, 192 * scale, 88 * scale);
        fill_path(ctx, undefined, color[2], 40 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(34 * scale, 134 * scale);
        ctx.bezierCurveTo(46 * scale, 111 * scale, 57 * scale, 111 * scale, 79 * scale, 109 * scale);
        fill_path(ctx, undefined, color[2], 40 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(249 * scale, 135 * scale);
        ctx.bezierCurveTo(233 * scale, 107 * scale, 212 * scale, 112 * scale, 202 * scale, 115 * scale);
        fill_path(ctx, undefined, color[2], 40 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(56 * scale, 50 * scale);
        ctx.bezierCurveTo(56 * scale, 82 * scale, 73 * scale, 82 * scale, 93 * scale, 89 * scale);
        fill_path(ctx, undefined, color[2], 40 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(93 * scale, 55 * scale);
        ctx.bezierCurveTo(127 * scale, 27 * scale, 195 * scale, 42 * scale, 213 * scale, 78 * scale);
        ctx.bezierCurveTo(254 * scale, 134 * scale, 226 * scale, 198 * scale, 153 * scale, 197 * scale);
        ctx.bezierCurveTo(59 * scale, 204 * scale, 56 * scale, 158 * scale, 51 * scale, 115 * scale);
        ctx.bezierCurveTo(50 * scale, 93 * scale, 81 * scale, 62 * scale, 90 * scale, 57 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(100 * scale, 33 * scale);
        ctx.bezierCurveTo(85 * scale, 62 * scale, 102 * scale, 66 * scale, 110 * scale, 83 * scale);
        fill_path(ctx, undefined, color[1], 20 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(181 * scale, 32 * scale);
        ctx.bezierCurveTo(196 * scale, 62 * scale, 181 * scale, 68 * scale, 178 * scale, 69 * scale);
        fill_path(ctx, undefined, color[1], 20 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(225 * scale, 52 * scale);
        ctx.bezierCurveTo(228 * scale, 78 * scale, 207 * scale, 77 * scale, 192 * scale, 88 * scale);
        fill_path(ctx, undefined, color[1], 20 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(34 * scale, 134 * scale);
        ctx.bezierCurveTo(46 * scale, 111 * scale, 57 * scale, 111 * scale, 79 * scale, 109 * scale);
        fill_path(ctx, undefined, color[1], 20 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(249 * scale, 135 * scale);
        ctx.bezierCurveTo(233 * scale, 107 * scale, 212 * scale, 112 * scale, 202 * scale, 115 * scale);
        fill_path(ctx, undefined, color[1], 20 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(56 * scale, 50 * scale);
        ctx.bezierCurveTo(56 * scale, 82 * scale, 73 * scale, 82 * scale, 93 * scale, 89 * scale);
        fill_path(ctx, undefined, color[1], 20 * scale);
        circle(ctx, 101 * scale, 155 * scale, 20.591260281974 * scale);
        fill_path(ctx, color[3]);
        circle(ctx, 180 * scale, 155 * scale, 20.591260281974 * scale);
        fill_path(ctx, color[3]);
        circle(ctx, 95 * scale, 148 * scale, 7.211102550927978 * scale);
        fill_path(ctx, color[4]);
        circle(ctx, 173 * scale, 148 * scale, 7.211102550927978 * scale);
        fill_path(ctx, color[4]);
        if (i === 1) {
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(191 * scale, 107 * scale);
            ctx.bezierCurveTo(180 * scale, 104 * scale, 175 * scale, 101 * scale, 180 * scale, 95 * scale);
            ctx.bezierCurveTo(180 * scale, 95 * scale, 181 * scale, 99 * scale, 188 * scale, 103 * scale);
            ctx.bezierCurveTo(191 * scale, 101 * scale, 191 * scale, 95 * scale, 190 * scale, 91 * scale);
            ctx.bezierCurveTo(190 * scale, 91 * scale, 196 * scale, 89 * scale, 195 * scale, 99 * scale);
            ctx.closePath();
            fill_path(ctx, color[2]);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(206 * scale, 98 * scale);
            ctx.bezierCurveTo(203 * scale, 95 * scale, 200 * scale, 93 * scale, 198 * scale, 101 * scale);
            ctx.bezierCurveTo(194 * scale, 109 * scale, 193 * scale, 109 * scale, 196 * scale, 110 * scale);
            ctx.bezierCurveTo(206 * scale, 115 * scale, 209 * scale, 114 * scale, 211 * scale, 111 * scale);
            ctx.bezierCurveTo(211 * scale, 106 * scale, 208 * scale, 108 * scale, 203 * scale, 108 * scale);
            ctx.bezierCurveTo(193 * scale, 107 * scale, 204 * scale, 101 * scale, 206 * scale, 99 * scale);
            ctx.closePath();
            fill_path(ctx, color[2]);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(172 * scale, 111 * scale);
            ctx.bezierCurveTo(172 * scale, 106 * scale, 174 * scale, 105 * scale, 185 * scale, 109 * scale);
            ctx.bezierCurveTo(190 * scale, 109 * scale, 189 * scale, 114 * scale, 185 * scale, 120 * scale);
            ctx.bezierCurveTo(181 * scale, 125 * scale, 180 * scale, 126 * scale, 176 * scale, 122 * scale);
            ctx.bezierCurveTo(182 * scale, 119 * scale, 187 * scale, 110 * scale, 182 * scale, 112 * scale);
            ctx.closePath();
            fill_path(ctx, color[2]);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(202 * scale, 125 * scale);
            ctx.bezierCurveTo(197 * scale, 117 * scale, 193 * scale, 116 * scale, 193 * scale, 120 * scale);
            ctx.bezierCurveTo(192.5 * scale, 124.5 * scale, 192.5 * scale, 124.5 * scale, 192 * scale, 129 * scale);
            ctx.bezierCurveTo(188 * scale, 129 * scale, 187 * scale, 124 * scale, 189 * scale, 120 * scale);
            ctx.bezierCurveTo(191 * scale, 110 * scale, 192 * scale, 110 * scale, 200 * scale, 116 * scale);
            ctx.bezierCurveTo(208 * scale, 120 * scale, 207 * scale, 123 * scale, 202 * scale, 125 * scale);
            ctx.closePath();
            fill_path(ctx, color[2]);
        }
        return can;
    };

    function create_hurt_crab(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 283 * scale;
        can.height = 224 * scale;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(100 * scale, 33 * scale);
        ctx.bezierCurveTo(85 * scale, 62 * scale, 102 * scale, 66 * scale, 110 * scale, 83 * scale);
        fill_path(ctx, undefined, color[0], 40 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(181 * scale, 32 * scale);
        ctx.bezierCurveTo(196 * scale, 62 * scale, 181 * scale, 68 * scale, 178 * scale, 69 * scale);
        fill_path(ctx, undefined, color[0], 40 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(225 * scale, 52 * scale);
        ctx.bezierCurveTo(228 * scale, 78 * scale, 207 * scale, 77 * scale, 192 * scale, 88 * scale);
        fill_path(ctx, undefined, color[0], 40 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(34 * scale, 134 * scale);
        ctx.bezierCurveTo(46 * scale, 111 * scale, 57 * scale, 111 * scale, 79 * scale, 109 * scale);
        fill_path(ctx, undefined, color[0], 40 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(249 * scale, 135 * scale);
        ctx.bezierCurveTo(233 * scale, 107 * scale, 212 * scale, 112 * scale, 202 * scale, 115 * scale);
        fill_path(ctx, undefined, color[0], 40 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(56 * scale, 50 * scale);
        ctx.bezierCurveTo(56 * scale, 82 * scale, 73 * scale, 82 * scale, 93 * scale, 89 * scale);
        fill_path(ctx, undefined, color[0], 40 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(93 * scale, 55 * scale);
        ctx.bezierCurveTo(124 * scale, 29 * scale, 179 * scale, 44 * scale, 188 * scale, 52 * scale);
        ctx.bezierCurveTo(207 * scale, 64 * scale, 226 * scale, 94 * scale, 231 * scale, 118 * scale);
        ctx.bezierCurveTo(236 * scale, 145 * scale, 222 * scale, 184 * scale, 193 * scale, 192 * scale);
        ctx.bezierCurveTo(147 * scale, 201 * scale, 116 * scale, 200 * scale, 93 * scale, 193 * scale);
        ctx.bezierCurveTo(61 * scale, 180 * scale, 48 * scale, 147 * scale, 50 * scale, 123 * scale);
        ctx.bezierCurveTo(50 * scale, 93 * scale, 76 * scale, 66 * scale, 92 * scale, 56 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        return can;
    };

    function create_crab_claw_left(scale, useless, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 131 * scale;
        can.height = 121 * scale;
        ctx.translate(0, 20 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(110 * scale, 59 * scale);
        ctx.bezierCurveTo(93 * scale, 61.5 * scale, 93 * scale, 61.5 * scale, 76 * scale, 64 * scale);
        ctx.bezierCurveTo(84.5 * scale, 78.5 * scale, 84.5 * scale, 78.5 * scale, 93 * scale, 93 * scale);
        ctx.bezierCurveTo(70 * scale, 111 * scale, 43 * scale, 103 * scale, 30 * scale, 82 * scale);
        ctx.bezierCurveTo(17 * scale, 61 * scale, 25 * scale, 30 * scale, 51 * scale, 21 * scale);
        ctx.bezierCurveTo(66 * scale, 15 * scale, 83 * scale, 18 * scale, 96 * scale, 29 * scale);
        ctx.bezierCurveTo(104 * scale, 35 * scale, 109 * scale, 47 * scale, 110 * scale, 58 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(0, -20 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(110 * scale, 59 * scale);
        ctx.bezierCurveTo(93 * scale, 61.5 * scale, 93 * scale, 61.5 * scale, 76 * scale, 64 * scale);
        ctx.bezierCurveTo(84.5 * scale, 78.5 * scale, 84.5 * scale, 78.5 * scale, 93 * scale, 93 * scale);
        ctx.bezierCurveTo(70 * scale, 111 * scale, 43 * scale, 103 * scale, 30 * scale, 82 * scale);
        ctx.bezierCurveTo(17 * scale, 61 * scale, 25 * scale, 30 * scale, 51 * scale, 21 * scale);
        ctx.bezierCurveTo(66 * scale, 15 * scale, 83 * scale, 18 * scale, 96 * scale, 29 * scale);
        ctx.bezierCurveTo(104 * scale, 35 * scale, 109 * scale, 47 * scale, 110 * scale, 58 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 10 * scale);
        return can;
    };

    function create_crab_claw_right(scale, useless, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 104 * scale;
        can.height = 112 * scale;
        ctx.translate(0, 15 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(16 * scale, 44 * scale);
        ctx.bezierCurveTo(30.5 * scale, 48 * scale, 30.5 * scale, 48 * scale, 45 * scale, 52 * scale);
        ctx.bezierCurveTo(36.5 * scale, 63 * scale, 36.5 * scale, 63 * scale, 28 * scale, 74 * scale);
        ctx.bezierCurveTo(32 * scale, 86 * scale, 61 * scale, 92 * scale, 78 * scale, 76 * scale);
        ctx.bezierCurveTo(93 * scale, 62 * scale, 92 * scale, 40 * scale, 80 * scale, 26 * scale);
        ctx.bezierCurveTo(65 * scale, 11 * scale, 42 * scale, 16 * scale, 34 * scale, 21 * scale);
        ctx.bezierCurveTo(22 * scale, 27 * scale, 16 * scale, 39 * scale, 16 * scale, 44 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(0, -15 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(16 * scale, 44 * scale);
        ctx.bezierCurveTo(30.5 * scale, 48 * scale, 30.5 * scale, 48 * scale, 45 * scale, 52 * scale);
        ctx.bezierCurveTo(36.5 * scale, 63 * scale, 36.5 * scale, 63 * scale, 28 * scale, 74 * scale);
        ctx.bezierCurveTo(32 * scale, 86 * scale, 61 * scale, 92 * scale, 78 * scale, 76 * scale);
        ctx.bezierCurveTo(93 * scale, 62 * scale, 92 * scale, 40 * scale, 80 * scale, 26 * scale);
        ctx.bezierCurveTo(65 * scale, 11 * scale, 42 * scale, 16 * scale, 34 * scale, 21 * scale);
        ctx.bezierCurveTo(22 * scale, 27 * scale, 16 * scale, 39 * scale, 16 * scale, 44 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 8 * scale);
        return can;
    };

    function create_crab_stick(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 321 * scale;
        can.height = 284 * scale;
        ctx.translate(100 * scale, 30 * scale);
        ctx.translate(5 * scale, 10 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(58 * scale, 33 * scale);
        ctx.bezierCurveTo(81 * scale, 22 * scale, 93 * scale, 26 * scale, 123 * scale, 47 * scale);
        ctx.bezierCurveTo(160 * scale, 73 * scale, 169 * scale, 80 * scale, 191 * scale, 99 * scale);
        ctx.bezierCurveTo(202 * scale, 107 * scale, 211 * scale, 118 * scale, 195 * scale, 151 * scale);
        ctx.bezierCurveTo(181 * scale, 183 * scale, 157 * scale, 192 * scale, 129 * scale, 174 * scale);
        ctx.bezierCurveTo(78 * scale, 140 * scale, 68 * scale, 129 * scale, 37 * scale, 94 * scale);
        ctx.bezierCurveTo(15 * scale, 68 * scale, 25 * scale, 52 * scale, 56 * scale, 34 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(-5 * scale, -10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(58 * scale, 33 * scale);
        ctx.bezierCurveTo(81 * scale, 22 * scale, 93 * scale, 26 * scale, 123 * scale, 47 * scale);
        ctx.bezierCurveTo(160 * scale, 73 * scale, 169 * scale, 80 * scale, 191 * scale, 99 * scale);
        ctx.bezierCurveTo(202 * scale, 107 * scale, 211 * scale, 118 * scale, 195 * scale, 151 * scale);
        ctx.bezierCurveTo(181 * scale, 183 * scale, 157 * scale, 192 * scale, 129 * scale, 174 * scale);
        ctx.bezierCurveTo(78 * scale, 140 * scale, 68 * scale, 129 * scale, 37 * scale, 94 * scale);
        ctx.bezierCurveTo(15 * scale, 68 * scale, 25 * scale, 52 * scale, 56 * scale, 34 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(167 * scale, 120 * scale);
        ctx.bezierCurveTo(196 * scale, 106 * scale, 207 * scale, 111 * scale, 199 * scale, 135 * scale);
        ctx.bezierCurveTo(185 * scale, 172 * scale, 166 * scale, 187 * scale, 145 * scale, 179 * scale);
        ctx.bezierCurveTo(118 * scale, 166 * scale, 127 * scale, 139 * scale, 166 * scale, 121 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(25 * scale, 64 * scale);
        ctx.bezierCurveTo(59 * scale, 96 * scale, 97 * scale, 128 * scale, 129 * scale, 151 * scale);
        ctx.bezierCurveTo(126 * scale, 163 * scale, 134 * scale, 174 * scale, 142 * scale, 180 * scale);
        ctx.bezierCurveTo(114 * scale, 170 * scale, 68 * scale, 134 * scale, 31 * scale, 85 * scale);
        ctx.bezierCurveTo(24 * scale, 71 * scale, 24 * scale, 70 * scale, 25 * scale, 65 * scale);
        ctx.closePath();
        fill_path(ctx, color[2]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(161 * scale, 141 * scale);
        ctx.bezierCurveTo(181 * scale, 131 * scale, 186 * scale, 135 * scale, 173 * scale, 152 * scale);
        ctx.bezierCurveTo(163 * scale, 163 * scale, 155 * scale, 161 * scale, 151 * scale, 150 * scale);
        ctx.bezierCurveTo(147 * scale, 140 * scale, 155 * scale, 131 * scale, 175 * scale, 125 * scale);
        ctx.bezierCurveTo(190 * scale, 120 * scale, 196 * scale, 121 * scale, 189 * scale, 143 * scale);
        ctx.bezierCurveTo(182 * scale, 167 * scale, 169 * scale, 174 * scale, 157 * scale, 174 * scale);
        ctx.bezierCurveTo(138 * scale, 172 * scale, 139 * scale, 162 * scale, 140 * scale, 156 * scale);
        fill_path(ctx, undefined, color[4], 4 * scale);
        ctx.translate(-100 * scale, -30 * scale);
        ctx.translate(10 * scale, 70 * scale);
        ctx.translate(5 * scale, 10 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(58 * scale, 33 * scale);
        ctx.bezierCurveTo(81 * scale, 22 * scale, 93 * scale, 26 * scale, 123 * scale, 47 * scale);
        ctx.bezierCurveTo(160 * scale, 73 * scale, 169 * scale, 80 * scale, 191 * scale, 99 * scale);
        ctx.bezierCurveTo(202 * scale, 107 * scale, 211 * scale, 118 * scale, 195 * scale, 151 * scale);
        ctx.bezierCurveTo(181 * scale, 183 * scale, 157 * scale, 192 * scale, 129 * scale, 174 * scale);
        ctx.bezierCurveTo(78 * scale, 140 * scale, 68 * scale, 129 * scale, 37 * scale, 94 * scale);
        ctx.bezierCurveTo(15 * scale, 68 * scale, 25 * scale, 52 * scale, 56 * scale, 34 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(-5 * scale, -10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(58 * scale, 33 * scale);
        ctx.bezierCurveTo(81 * scale, 22 * scale, 93 * scale, 26 * scale, 123 * scale, 47 * scale);
        ctx.bezierCurveTo(160 * scale, 73 * scale, 169 * scale, 80 * scale, 191 * scale, 99 * scale);
        ctx.bezierCurveTo(202 * scale, 107 * scale, 211 * scale, 118 * scale, 195 * scale, 151 * scale);
        ctx.bezierCurveTo(181 * scale, 183 * scale, 157 * scale, 192 * scale, 129 * scale, 174 * scale);
        ctx.bezierCurveTo(78 * scale, 140 * scale, 68 * scale, 129 * scale, 37 * scale, 94 * scale);
        ctx.bezierCurveTo(15 * scale, 68 * scale, 25 * scale, 52 * scale, 56 * scale, 34 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(167 * scale, 120 * scale);
        ctx.bezierCurveTo(196 * scale, 106 * scale, 207 * scale, 111 * scale, 199 * scale, 135 * scale);
        ctx.bezierCurveTo(185 * scale, 172 * scale, 166 * scale, 187 * scale, 145 * scale, 179 * scale);
        ctx.bezierCurveTo(118 * scale, 166 * scale, 127 * scale, 139 * scale, 166 * scale, 121 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(25 * scale, 64 * scale);
        ctx.bezierCurveTo(59 * scale, 96 * scale, 97 * scale, 128 * scale, 129 * scale, 151 * scale);
        ctx.bezierCurveTo(126 * scale, 163 * scale, 134 * scale, 174 * scale, 142 * scale, 180 * scale);
        ctx.bezierCurveTo(114 * scale, 170 * scale, 68 * scale, 134 * scale, 31 * scale, 85 * scale);
        ctx.bezierCurveTo(24 * scale, 71 * scale, 24 * scale, 70 * scale, 25 * scale, 65 * scale);
        ctx.closePath();
        fill_path(ctx, color[2]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(161 * scale, 141 * scale);
        ctx.bezierCurveTo(181 * scale, 131 * scale, 186 * scale, 135 * scale, 173 * scale, 152 * scale);
        ctx.bezierCurveTo(163 * scale, 163 * scale, 155 * scale, 161 * scale, 151 * scale, 150 * scale);
        ctx.bezierCurveTo(147 * scale, 140 * scale, 155 * scale, 131 * scale, 175 * scale, 125 * scale);
        ctx.bezierCurveTo(190 * scale, 120 * scale, 196 * scale, 121 * scale, 189 * scale, 143 * scale);
        ctx.bezierCurveTo(182 * scale, 167 * scale, 169 * scale, 174 * scale, 157 * scale, 174 * scale);
        ctx.bezierCurveTo(138 * scale, 172 * scale, 139 * scale, 162 * scale, 140 * scale, 156 * scale);
        fill_path(ctx, undefined, color[4], 4 * scale);
        ctx.translate(20 * scale, -80 * scale);
        ctx.translate(5 * scale, 10 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(58 * scale, 33 * scale);
        ctx.bezierCurveTo(81 * scale, 22 * scale, 93 * scale, 26 * scale, 123 * scale, 47 * scale);
        ctx.bezierCurveTo(160 * scale, 73 * scale, 169 * scale, 80 * scale, 191 * scale, 99 * scale);
        ctx.bezierCurveTo(202 * scale, 107 * scale, 211 * scale, 118 * scale, 195 * scale, 151 * scale);
        ctx.bezierCurveTo(181 * scale, 183 * scale, 157 * scale, 192 * scale, 129 * scale, 174 * scale);
        ctx.bezierCurveTo(78 * scale, 140 * scale, 68 * scale, 129 * scale, 37 * scale, 94 * scale);
        ctx.bezierCurveTo(15 * scale, 68 * scale, 25 * scale, 52 * scale, 56 * scale, 34 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(-5 * scale, -10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(58 * scale, 33 * scale);
        ctx.bezierCurveTo(81 * scale, 22 * scale, 93 * scale, 26 * scale, 123 * scale, 47 * scale);
        ctx.bezierCurveTo(160 * scale, 73 * scale, 169 * scale, 80 * scale, 191 * scale, 99 * scale);
        ctx.bezierCurveTo(202 * scale, 107 * scale, 211 * scale, 118 * scale, 195 * scale, 151 * scale);
        ctx.bezierCurveTo(181 * scale, 183 * scale, 157 * scale, 192 * scale, 129 * scale, 174 * scale);
        ctx.bezierCurveTo(78 * scale, 140 * scale, 68 * scale, 129 * scale, 37 * scale, 94 * scale);
        ctx.bezierCurveTo(15 * scale, 68 * scale, 25 * scale, 52 * scale, 56 * scale, 34 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(167 * scale, 120 * scale);
        ctx.bezierCurveTo(196 * scale, 106 * scale, 207 * scale, 111 * scale, 199 * scale, 135 * scale);
        ctx.bezierCurveTo(185 * scale, 172 * scale, 166 * scale, 187 * scale, 145 * scale, 179 * scale);
        ctx.bezierCurveTo(118 * scale, 166 * scale, 127 * scale, 139 * scale, 166 * scale, 121 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(25 * scale, 64 * scale);
        ctx.bezierCurveTo(59 * scale, 96 * scale, 97 * scale, 128 * scale, 129 * scale, 151 * scale);
        ctx.bezierCurveTo(126 * scale, 163 * scale, 134 * scale, 174 * scale, 142 * scale, 180 * scale);
        ctx.bezierCurveTo(114 * scale, 170 * scale, 68 * scale, 134 * scale, 31 * scale, 85 * scale);
        ctx.bezierCurveTo(24 * scale, 71 * scale, 24 * scale, 70 * scale, 25 * scale, 65 * scale);
        ctx.closePath();
        fill_path(ctx, color[2]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(161 * scale, 141 * scale);
        ctx.bezierCurveTo(181 * scale, 131 * scale, 186 * scale, 135 * scale, 173 * scale, 152 * scale);
        ctx.bezierCurveTo(163 * scale, 163 * scale, 155 * scale, 161 * scale, 151 * scale, 150 * scale);
        ctx.bezierCurveTo(147 * scale, 140 * scale, 155 * scale, 131 * scale, 175 * scale, 125 * scale);
        ctx.bezierCurveTo(190 * scale, 120 * scale, 196 * scale, 121 * scale, 189 * scale, 143 * scale);
        ctx.bezierCurveTo(182 * scale, 167 * scale, 169 * scale, 174 * scale, 157 * scale, 174 * scale);
        ctx.bezierCurveTo(138 * scale, 172 * scale, 139 * scale, 162 * scale, 140 * scale, 156 * scale);
        fill_path(ctx, undefined, color[4], 4 * scale);
        return can;
    };

    function create_goldsword(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 290 * scale;
        can.height = 525 * scale;
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(20 * scale, 20 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(111 * scale, 351 * scale);
        ctx.bezierCurveTo(128.5 * scale, 218.5 * scale, 128.5 * scale, 218.5 * scale, 146 * scale, 86 * scale);
        ctx.bezierCurveTo(166.5 * scale, 66.5 * scale, 166.5 * scale, 66.5 * scale, 187 * scale, 47 * scale);
        ctx.bezierCurveTo(201 * scale, 71.5 * scale, 201 * scale, 71.5 * scale, 215 * scale, 96 * scale);
        ctx.bezierCurveTo(193 * scale, 228.5 * scale, 193 * scale, 228.5 * scale, 171 * scale, 361 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.save();
        ctx.translate(129.5 * scale, 424 * scale);
        ctx.rotate(0.16);
        round_rect(ctx, -15.5 * scale, -63 * scale, 31 * scale, 126 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        circle(ctx, 121 * scale, 480 * scale, 20.396078054371138 * scale);
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(90 * scale, 311 * scale);
        ctx.bezierCurveTo(95 * scale, 324 * scale, 95 * scale, 324 * scale, 100 * scale, 337 * scale);
        ctx.bezierCurveTo(141.5 * scale, 345.5 * scale, 141.5 * scale, 345.5 * scale, 183 * scale, 354 * scale);
        ctx.bezierCurveTo(193.5 * scale, 342.5 * scale, 193.5 * scale, 342.5 * scale, 204 * scale, 331 * scale);
        ctx.bezierCurveTo(202 * scale, 354 * scale, 202 * scale, 354 * scale, 200 * scale, 377 * scale);
        ctx.bezierCurveTo(147 * scale, 388 * scale, 106 * scale, 371 * scale, 79 * scale, 356 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(-20 * scale, -20 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(111 * scale, 351 * scale);
        ctx.bezierCurveTo(128.5 * scale, 218.5 * scale, 128.5 * scale, 218.5 * scale, 146 * scale, 86 * scale);
        ctx.bezierCurveTo(166.5 * scale, 66.5 * scale, 166.5 * scale, 66.5 * scale, 187 * scale, 47 * scale);
        ctx.bezierCurveTo(201 * scale, 71.5 * scale, 201 * scale, 71.5 * scale, 215 * scale, 96 * scale);
        ctx.bezierCurveTo(193 * scale, 228.5 * scale, 193 * scale, 228.5 * scale, 171 * scale, 361 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 12.5 * scale);
        ctx.save();
        ctx.translate(129.5 * scale, 424 * scale);
        ctx.rotate(0.16);
        round_rect(ctx, -15.5 * scale, -63 * scale, 31 * scale, 126 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[4], color[5], 12.5 * scale);
        circle(ctx, 121 * scale, 480 * scale, 20.396078054371138 * scale);
        fill_path(ctx, color[4], color[5], 12.5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(90 * scale, 311 * scale);
        ctx.bezierCurveTo(95 * scale, 324 * scale, 95 * scale, 324 * scale, 100 * scale, 337 * scale);
        ctx.bezierCurveTo(141.5 * scale, 345.5 * scale, 141.5 * scale, 345.5 * scale, 183 * scale, 354 * scale);
        ctx.bezierCurveTo(193.5 * scale, 342.5 * scale, 193.5 * scale, 342.5 * scale, 204 * scale, 331 * scale);
        ctx.bezierCurveTo(202 * scale, 354 * scale, 202 * scale, 354 * scale, 200 * scale, 377 * scale);
        ctx.bezierCurveTo(147 * scale, 388 * scale, 106 * scale, 371 * scale, 79 * scale, 356 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 12.5 * scale);
        return can;
    };

    function create_diamondsword(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 290 * scale;
        can.height = 525 * scale;
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(20 * scale, 20 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(112 * scale, 356 * scale);
        ctx.bezierCurveTo(124 * scale, 220.5 * scale, 124 * scale, 220.5 * scale, 136 * scale, 85 * scale);
        ctx.bezierCurveTo(162.5 * scale, 65.5 * scale, 162.5 * scale, 65.5 * scale, 189 * scale, 46 * scale);
        ctx.bezierCurveTo(208.5 * scale, 72.5 * scale, 208.5 * scale, 72.5 * scale, 228 * scale, 99 * scale);
        ctx.bezierCurveTo(200 * scale, 232 * scale, 200 * scale, 232 * scale, 172 * scale, 365 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.save();
        ctx.translate(131 * scale, 423 * scale);
        ctx.rotate(0.16);
        round_rect(ctx, -14 * scale, -53 * scale, 28 * scale, 106 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.save();
        ctx.translate(122 * scale, 480 * scale);
        ctx.rotate(1.72);
        round_regular_polygon(ctx, 4, 26.476404589747453 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(210 * scale, 387 * scale);
        ctx.bezierCurveTo(138 * scale, 376 * scale, 138 * scale, 376 * scale, 66 * scale, 365 * scale);
        ctx.bezierCurveTo(76 * scale, 355 * scale, 76 * scale, 355 * scale, 86 * scale, 345 * scale);
        ctx.bezierCurveTo(99 * scale, 346.5 * scale, 99 * scale, 346.5 * scale, 112 * scale, 348 * scale);
        ctx.bezierCurveTo(128.5 * scale, 344 * scale, 128.5 * scale, 344 * scale, 145 * scale, 340 * scale);
        ctx.bezierCurveTo(158 * scale, 348 * scale, 158 * scale, 348 * scale, 171 * scale, 356 * scale);
        ctx.bezierCurveTo(184 * scale, 358 * scale, 184 * scale, 358 * scale, 197 * scale, 360 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(129 * scale, 338 * scale);
        ctx.bezierCurveTo(137 * scale, 336 * scale, 137 * scale, 336 * scale, 145 * scale, 334 * scale);
        ctx.bezierCurveTo(152.5 * scale, 338 * scale, 152.5 * scale, 338 * scale, 160 * scale, 342 * scale);
        ctx.bezierCurveTo(184 * scale, 224 * scale, 184 * scale, 224 * scale, 208 * scale, 106 * scale);
        ctx.bezierCurveTo(197 * scale, 88 * scale, 187 * scale, 70 * scale, 186 * scale, 70 * scale);
        ctx.bezierCurveTo(169.5 * scale, 83 * scale, 169.5 * scale, 83 * scale, 153 * scale, 96 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(-20 * scale, -20 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(112 * scale, 356 * scale);
        ctx.bezierCurveTo(124 * scale, 220.5 * scale, 124 * scale, 220.5 * scale, 136 * scale, 85 * scale);
        ctx.bezierCurveTo(162.5 * scale, 65.5 * scale, 162.5 * scale, 65.5 * scale, 189 * scale, 46 * scale);
        ctx.bezierCurveTo(208.5 * scale, 72.5 * scale, 208.5 * scale, 72.5 * scale, 228 * scale, 99 * scale);
        ctx.bezierCurveTo(200 * scale, 232 * scale, 200 * scale, 232 * scale, 172 * scale, 365 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 12.5 * scale);
        ctx.save();
        ctx.translate(131 * scale, 423 * scale);
        ctx.rotate(0.16);
        round_rect(ctx, -14 * scale, -53 * scale, 28 * scale, 106 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[4], color[5], 12.5 * scale);
        ctx.save();
        ctx.translate(122 * scale, 480 * scale);
        ctx.rotate(1.72);
        round_regular_polygon(ctx, 4, 26.476404589747453 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 12.5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(210 * scale, 387 * scale);
        ctx.bezierCurveTo(138 * scale, 376 * scale, 138 * scale, 376 * scale, 66 * scale, 365 * scale);
        ctx.bezierCurveTo(76 * scale, 355 * scale, 76 * scale, 355 * scale, 86 * scale, 345 * scale);
        ctx.bezierCurveTo(99 * scale, 346.5 * scale, 99 * scale, 346.5 * scale, 112 * scale, 348 * scale);
        ctx.bezierCurveTo(128.5 * scale, 344 * scale, 128.5 * scale, 344 * scale, 145 * scale, 340 * scale);
        ctx.bezierCurveTo(158 * scale, 348 * scale, 158 * scale, 348 * scale, 171 * scale, 356 * scale);
        ctx.bezierCurveTo(184 * scale, 358 * scale, 184 * scale, 358 * scale, 197 * scale, 360 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 12.5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(129 * scale, 338 * scale);
        ctx.bezierCurveTo(137 * scale, 336 * scale, 137 * scale, 336 * scale, 145 * scale, 334 * scale);
        ctx.bezierCurveTo(152.5 * scale, 338 * scale, 152.5 * scale, 338 * scale, 160 * scale, 342 * scale);
        ctx.bezierCurveTo(184 * scale, 224 * scale, 184 * scale, 224 * scale, 208 * scale, 106 * scale);
        ctx.bezierCurveTo(197 * scale, 88 * scale, 187 * scale, 70 * scale, 186 * scale, 70 * scale);
        ctx.bezierCurveTo(169.5 * scale, 83 * scale, 169.5 * scale, 83 * scale, 153 * scale, 96 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        return can;
    };

    function create_amesword(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 290 * scale;
        can.height = 525 * scale;
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(20 * scale, 20 * scale);
        ctx.translate(-20 * scale, -20 * scale);
        ctx.save();
        ctx.translate(132 * scale, 423 * scale);
        ctx.rotate(0.16);
        round_rect(ctx, -14 * scale, -61 * scale, 28 * scale, 122 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(100 * scale, 344 * scale);
        ctx.bezierCurveTo(123 * scale, 214 * scale, 123 * scale, 214 * scale, 146 * scale, 84 * scale);
        ctx.bezierCurveTo(166.5 * scale, 65 * scale, 166.5 * scale, 65 * scale, 187 * scale, 46 * scale);
        ctx.bezierCurveTo(201 * scale, 71 * scale, 201 * scale, 71 * scale, 215 * scale, 96 * scale);
        ctx.bezierCurveTo(199.5 * scale, 226.5 * scale, 199.5 * scale, 226.5 * scale, 184 * scale, 357 * scale);
        ctx.bezierCurveTo(162.5 * scale, 362.5 * scale, 162.5 * scale, 362.5 * scale, 141 * scale, 368 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(75 * scale, 328 * scale);
        ctx.bezierCurveTo(88 * scale, 336.5 * scale, 88 * scale, 336.5 * scale, 101 * scale, 345 * scale);
        ctx.bezierCurveTo(123.5 * scale, 337.5 * scale, 123.5 * scale, 337.5 * scale, 146 * scale, 330 * scale);
        ctx.bezierCurveTo(165 * scale, 343.5 * scale, 165 * scale, 343.5 * scale, 184 * scale, 357 * scale);
        ctx.bezierCurveTo(198.5 * scale, 353 * scale, 198.5 * scale, 353 * scale, 213 * scale, 349 * scale);
        ctx.bezierCurveTo(200.5 * scale, 364.5 * scale, 200.5 * scale, 364.5 * scale, 188 * scale, 380 * scale);
        ctx.bezierCurveTo(163 * scale, 380.5 * scale, 163 * scale, 380.5 * scale, 138 * scale, 381 * scale);
        ctx.bezierCurveTo(112 * scale, 373.5 * scale, 112 * scale, 373.5 * scale, 86 * scale, 366 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(121 * scale, 332 * scale);
        ctx.bezierCurveTo(133.5 * scale, 327.5 * scale, 133.5 * scale, 327.5 * scale, 146 * scale, 323 * scale);
        ctx.bezierCurveTo(157 * scale, 330.5 * scale, 157 * scale, 330.5 * scale, 168 * scale, 338 * scale);
        ctx.bezierCurveTo(182.5 * scale, 219.5 * scale, 182.5 * scale, 219.5 * scale, 197 * scale, 101 * scale);
        ctx.bezierCurveTo(190 * scale, 84.5 * scale, 190 * scale, 84.5 * scale, 183 * scale, 68 * scale);
        ctx.bezierCurveTo(172.5 * scale, 81 * scale, 172.5 * scale, 81 * scale, 162 * scale, 94 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(105 * scale, 463 * scale);
        ctx.bezierCurveTo(124.5 * scale, 466 * scale, 124.5 * scale, 466 * scale, 144 * scale, 469 * scale);
        ctx.bezierCurveTo(145.5 * scale, 478.5 * scale, 145.5 * scale, 478.5 * scale, 147 * scale, 488 * scale);
        ctx.bezierCurveTo(133.5 * scale, 495.5 * scale, 133.5 * scale, 495.5 * scale, 120 * scale, 503 * scale);
        ctx.bezierCurveTo(108.5 * scale, 492 * scale, 108.5 * scale, 492 * scale, 97 * scale, 481 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(-20 * scale, -20 * scale);
        ctx.save();
        ctx.translate(132 * scale, 423 * scale);
        ctx.rotate(0.16);
        round_rect(ctx, -14 * scale, -61 * scale, 28 * scale, 122 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[4], color[5], 12.5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(100 * scale, 344 * scale);
        ctx.bezierCurveTo(123 * scale, 214 * scale, 123 * scale, 214 * scale, 146 * scale, 84 * scale);
        ctx.bezierCurveTo(166.5 * scale, 65 * scale, 166.5 * scale, 65 * scale, 187 * scale, 46 * scale);
        ctx.bezierCurveTo(201 * scale, 71 * scale, 201 * scale, 71 * scale, 215 * scale, 96 * scale);
        ctx.bezierCurveTo(199.5 * scale, 226.5 * scale, 199.5 * scale, 226.5 * scale, 184 * scale, 357 * scale);
        ctx.bezierCurveTo(162.5 * scale, 362.5 * scale, 162.5 * scale, 362.5 * scale, 141 * scale, 368 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 12.5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(75 * scale, 328 * scale);
        ctx.bezierCurveTo(88 * scale, 336.5 * scale, 88 * scale, 336.5 * scale, 101 * scale, 345 * scale);
        ctx.bezierCurveTo(123.5 * scale, 337.5 * scale, 123.5 * scale, 337.5 * scale, 146 * scale, 330 * scale);
        ctx.bezierCurveTo(165 * scale, 343.5 * scale, 165 * scale, 343.5 * scale, 184 * scale, 357 * scale);
        ctx.bezierCurveTo(198.5 * scale, 353 * scale, 198.5 * scale, 353 * scale, 213 * scale, 349 * scale);
        ctx.bezierCurveTo(200.5 * scale, 364.5 * scale, 200.5 * scale, 364.5 * scale, 188 * scale, 380 * scale);
        ctx.bezierCurveTo(163 * scale, 380.5 * scale, 163 * scale, 380.5 * scale, 138 * scale, 381 * scale);
        ctx.bezierCurveTo(112 * scale, 373.5 * scale, 112 * scale, 373.5 * scale, 86 * scale, 366 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 12.5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(121 * scale, 332 * scale);
        ctx.bezierCurveTo(133.5 * scale, 327.5 * scale, 133.5 * scale, 327.5 * scale, 146 * scale, 323 * scale);
        ctx.bezierCurveTo(157 * scale, 330.5 * scale, 157 * scale, 330.5 * scale, 168 * scale, 338 * scale);
        ctx.bezierCurveTo(182.5 * scale, 219.5 * scale, 182.5 * scale, 219.5 * scale, 197 * scale, 101 * scale);
        ctx.bezierCurveTo(190 * scale, 84.5 * scale, 190 * scale, 84.5 * scale, 183 * scale, 68 * scale);
        ctx.bezierCurveTo(172.5 * scale, 81 * scale, 172.5 * scale, 81 * scale, 162 * scale, 94 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(105 * scale, 463 * scale);
        ctx.bezierCurveTo(124.5 * scale, 466 * scale, 124.5 * scale, 466 * scale, 144 * scale, 469 * scale);
        ctx.bezierCurveTo(145.5 * scale, 478.5 * scale, 145.5 * scale, 478.5 * scale, 147 * scale, 488 * scale);
        ctx.bezierCurveTo(133.5 * scale, 495.5 * scale, 133.5 * scale, 495.5 * scale, 120 * scale, 503 * scale);
        ctx.bezierCurveTo(108.5 * scale, 492 * scale, 108.5 * scale, 492 * scale, 97 * scale, 481 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 12.5 * scale);
        ctx.globalAlpha = 1;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(143 * scale, 346 * scale);
        ctx.bezierCurveTo(125 * scale, 352 * scale, 125 * scale, 352 * scale, 107 * scale, 358 * scale);
        ctx.bezierCurveTo(124 * scale, 363 * scale, 140 * scale, 368 * scale, 141 * scale, 368 * scale);
        ctx.bezierCurveTo(156.5 * scale, 367 * scale, 156.5 * scale, 367 * scale, 172 * scale, 366 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        return can;
    };

    function create_sugar_can(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 154 * scale;
        can.height = 261 * scale;
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(0, 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(125 * scale, 69 * scale);
        ctx.bezierCurveTo(123.5 * scale, 141.5 * scale, 123.5 * scale, 141.5 * scale, 122 * scale, 214 * scale);
        ctx.bezierCurveTo(123 * scale, 228 * scale, 119 * scale, 239 * scale, 102 * scale, 239 * scale);
        ctx.bezierCurveTo(90 * scale, 238 * scale, 86 * scale, 225 * scale, 89 * scale, 197 * scale);
        ctx.bezierCurveTo(92 * scale, 159 * scale, 92 * scale, 141 * scale, 94 * scale, 84 * scale);
        ctx.bezierCurveTo(94 * scale, 58 * scale, 87 * scale, 50 * scale, 73 * scale, 52 * scale);
        ctx.bezierCurveTo(53 * scale, 54 * scale, 54 * scale, 92 * scale, 34 * scale, 87 * scale);
        ctx.bezierCurveTo(13 * scale, 85 * scale, 22 * scale, 58 * scale, 34 * scale, 40 * scale);
        ctx.bezierCurveTo(44 * scale, 24 * scale, 68 * scale, 17 * scale, 86 * scale, 21 * scale);
        ctx.bezierCurveTo(111 * scale, 23 * scale, 123 * scale, 39 * scale, 125 * scale, 67 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(0, -10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(125 * scale, 69 * scale);
        ctx.bezierCurveTo(123.5 * scale, 141.5 * scale, 123.5 * scale, 141.5 * scale, 122 * scale, 214 * scale);
        ctx.bezierCurveTo(123 * scale, 228 * scale, 119 * scale, 239 * scale, 102 * scale, 239 * scale);
        ctx.bezierCurveTo(90 * scale, 238 * scale, 86 * scale, 225 * scale, 89 * scale, 197 * scale);
        ctx.bezierCurveTo(92 * scale, 159 * scale, 92 * scale, 141 * scale, 94 * scale, 84 * scale);
        ctx.bezierCurveTo(94 * scale, 58 * scale, 87 * scale, 50 * scale, 73 * scale, 52 * scale);
        ctx.bezierCurveTo(53 * scale, 54 * scale, 54 * scale, 92 * scale, 34 * scale, 87 * scale);
        ctx.bezierCurveTo(13 * scale, 85 * scale, 22 * scale, 58 * scale, 34 * scale, 40 * scale);
        ctx.bezierCurveTo(44 * scale, 24 * scale, 68 * scale, 17 * scale, 86 * scale, 21 * scale);
        ctx.bezierCurveTo(111 * scale, 23 * scale, 123 * scale, 39 * scale, 125 * scale, 67 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(31 * scale, 43 * scale);
        ctx.bezierCurveTo(31 * scale, 61 * scale, 43 * scale, 70 * scale, 51 * scale, 75 * scale);
        ctx.bezierCurveTo(48 * scale, 84 * scale, 41 * scale, 89 * scale, 33 * scale, 86 * scale);
        ctx.bezierCurveTo(23 * scale, 88 * scale, 20 * scale, 76 * scale, 23 * scale, 62 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(45 * scale, 29 * scale);
        ctx.bezierCurveTo(49 * scale, 45 * scale, 61 * scale, 54 * scale, 64 * scale, 55 * scale);
        ctx.bezierCurveTo(67.5 * scale, 53 * scale, 67.5 * scale, 53 * scale, 71 * scale, 51 * scale);
        ctx.bezierCurveTo(80 * scale, 44 * scale, 83 * scale, 33 * scale, 82 * scale, 20 * scale);
        ctx.bezierCurveTo(59 * scale, 17 * scale, 51 * scale, 23 * scale, 45 * scale, 30 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(86 * scale, 56 * scale);
        ctx.bezierCurveTo(90 * scale, 33 * scale, 103 * scale, 25 * scale, 105 * scale, 27 * scale);
        ctx.bezierCurveTo(116 * scale, 31 * scale, 121 * scale, 45 * scale, 122 * scale, 50 * scale);
        ctx.bezierCurveTo(112 * scale, 62 * scale, 103 * scale, 63 * scale, 91 * scale, 62 * scale);
        ctx.bezierCurveTo(89 * scale, 59.5 * scale, 89 * scale, 59.5 * scale, 87 * scale, 57 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(93 * scale, 81 * scale);
        ctx.bezierCurveTo(109 * scale, 82 * scale, 123 * scale, 70 * scale, 124 * scale, 63 * scale);
        ctx.bezierCurveTo(124 * scale, 75.5 * scale, 124 * scale, 75.5 * scale, 124 * scale, 88 * scale);
        ctx.bezierCurveTo(119 * scale, 99 * scale, 103 * scale, 103 * scale, 94 * scale, 103 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(93 * scale, 124 * scale);
        ctx.bezierCurveTo(108 * scale, 125 * scale, 122 * scale, 113 * scale, 124 * scale, 106 * scale);
        ctx.bezierCurveTo(124 * scale, 119 * scale, 124 * scale, 129 * scale, 124 * scale, 132 * scale);
        ctx.bezierCurveTo(110 * scale, 147 * scale, 94 * scale, 148 * scale, 90 * scale, 147 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(90 * scale, 170 * scale);
        ctx.bezierCurveTo(104 * scale, 166 * scale, 122 * scale, 158 * scale, 122 * scale, 151 * scale);
        ctx.bezierCurveTo(122 * scale, 162.5 * scale, 122 * scale, 162.5 * scale, 122 * scale, 174 * scale);
        ctx.bezierCurveTo(111 * scale, 191 * scale, 97 * scale, 191 * scale, 89 * scale, 191 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(88 * scale, 208 * scale);
        ctx.bezierCurveTo(100 * scale, 209 * scale, 115 * scale, 205 * scale, 122 * scale, 193 * scale);
        ctx.bezierCurveTo(122 * scale, 205.5 * scale, 122 * scale, 205.5 * scale, 122 * scale, 218 * scale);
        ctx.bezierCurveTo(115 * scale, 229 * scale, 103 * scale, 235 * scale, 90 * scale, 228 * scale);
        ctx.bezierCurveTo(88 * scale, 224 * scale, 88 * scale, 217 * scale, 88 * scale, 211 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        ctx.globalAlpha = 0.4;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(22 * scale, 81 * scale);
        ctx.bezierCurveTo(32 * scale, 84 * scale, 41 * scale, 81 * scale, 45 * scale, 68 * scale);
        ctx.bezierCurveTo(50 * scale, 50 * scale, 62 * scale, 40 * scale, 79 * scale, 43 * scale);
        ctx.bezierCurveTo(95 * scale, 45 * scale, 102 * scale, 58 * scale, 101 * scale, 81 * scale);
        ctx.bezierCurveTo(99.5 * scale, 120.5 * scale, 99.5 * scale, 120.5 * scale, 98 * scale, 160 * scale);
        ctx.bezierCurveTo(96.5 * scale, 191.5 * scale, 96.5 * scale, 191.5 * scale, 95 * scale, 223 * scale);
        ctx.bezierCurveTo(93 * scale, 232 * scale, 101 * scale, 235 * scale, 108 * scale, 238 * scale);
        ctx.bezierCurveTo(100 * scale, 240 * scale, 90 * scale, 233 * scale, 90 * scale, 224 * scale);
        ctx.bezierCurveTo(92 * scale, 157 * scale, 92 * scale, 157 * scale, 94 * scale, 90 * scale);
        ctx.bezierCurveTo(94 * scale, 56 * scale, 89 * scale, 53 * scale, 77 * scale, 51 * scale);
        ctx.bezierCurveTo(58 * scale, 50 * scale, 54 * scale, 59 * scale, 49 * scale, 75 * scale);
        ctx.bezierCurveTo(44 * scale, 91 * scale, 28 * scale, 90 * scale, 23 * scale, 81 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(82 * scale, 123 * scale);
        ctx.bezierCurveTo(88 * scale, 130 * scale, 88 * scale, 127 * scale, 94 * scale, 128 * scale);
        ctx.bezierCurveTo(91 * scale, 136 * scale, 94 * scale, 137 * scale, 99 * scale, 142 * scale);
        ctx.bezierCurveTo(97 * scale, 149 * scale, 99 * scale, 152 * scale, 105 * scale, 155 * scale);
        ctx.bezierCurveTo(107 * scale, 159 * scale, 113 * scale, 159 * scale, 120 * scale, 158 * scale);
        ctx.bezierCurveTo(121 * scale, 160 * scale, 125 * scale, 163 * scale, 132 * scale, 163 * scale);
        ctx.bezierCurveTo(133 * scale, 166 * scale, 136 * scale, 169 * scale, 138 * scale, 170 * scale);
        ctx.bezierCurveTo(133 * scale, 171 * scale, 132 * scale, 172 * scale, 129 * scale, 174 * scale);
        ctx.bezierCurveTo(122 * scale, 170 * scale, 120 * scale, 170 * scale, 116 * scale, 174 * scale);
        ctx.bezierCurveTo(108 * scale, 170.5 * scale, 108 * scale, 170.5 * scale, 100 * scale, 167 * scale);
        ctx.bezierCurveTo(95 * scale, 172 * scale, 94 * scale, 179 * scale, 95 * scale, 184 * scale);
        ctx.bezierCurveTo(87 * scale, 185 * scale, 87 * scale, 189 * scale, 88 * scale, 194 * scale);
        ctx.bezierCurveTo(82 * scale, 194 * scale, 81 * scale, 195 * scale, 79 * scale, 197 * scale);
        ctx.bezierCurveTo(78 * scale, 192 * scale, 78 * scale, 191 * scale, 77 * scale, 189 * scale);
        ctx.bezierCurveTo(81 * scale, 185 * scale, 82 * scale, 183 * scale, 80 * scale, 176 * scale);
        ctx.bezierCurveTo(89 * scale, 170 * scale, 92 * scale, 168 * scale, 95 * scale, 163 * scale);
        ctx.bezierCurveTo(91 * scale, 151 * scale, 88 * scale, 151 * scale, 82 * scale, 147 * scale);
        ctx.bezierCurveTo(85 * scale, 142 * scale, 85 * scale, 137 * scale, 81 * scale, 133 * scale);
        ctx.bezierCurveTo(84 * scale, 127 * scale, 84 * scale, 125 * scale, 82 * scale, 124 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 4 * scale);
        circle(ctx, 107 * scale, 152 * scale, 9 * scale);
        fill_path(ctx, color[6]);
        circle(ctx, 105 * scale, 173 * scale, 9 * scale);
        fill_path(ctx, color[6]);
        circle(ctx, 87 * scale, 161 * scale, 9 * scale);
        fill_path(ctx, color[6]);
        circle(ctx, 106 * scale, 147 * scale, 4 * scale);
        fill_path(ctx, color[7]);
        circle(ctx, 104 * scale, 167 * scale, 4 * scale);
        fill_path(ctx, color[7]);
        circle(ctx, 86 * scale, 154 * scale, 4 * scale);
        fill_path(ctx, color[7]);
        return can;
    };

    function create_cookie(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 350 * scale;
        can.height = 140 * scale;
        ctx.translate(-50 * scale, -150 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(184.5 * scale, 222.0625 * scale);
        ctx.bezierCurveTo(185.5 * scale, 184.0625 * scale, 302.5 * scale, 171.0625 * scale, 313.5 * scale, 222.0625 * scale);
        ctx.bezierCurveTo(330.5 * scale, 263.0625 * scale, 181.5 * scale, 274.0625 * scale, 184.5 * scale, 223.0625 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[1], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(131.5 * scale, 241.0625 * scale);
        ctx.bezierCurveTo(144.5 * scale, 278.0625 * scale, 270.5 * scale, 209.0625 * scale, 228.5 * scale, 174.0625 * scale);
        ctx.bezierCurveTo(196.5 * scale, 147.0625 * scale, 117.5 * scale, 196.0625 * scale, 131.5 * scale, 240.0625 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[1], 8 * scale);
        circle(ctx, 270.5 * scale, 225.0625 * scale, 15.811388300841896 * scale);
        fill_path(ctx, color[2]);
        circle(ctx, 243.5 * scale, 225.0625 * scale, 6.082762530298219 * scale);
        fill_path(ctx, color[2]);
        circle(ctx, 255.5 * scale, 210.0625 * scale, 10.816653826391969 * scale);
        fill_path(ctx, color[2]);
        circle(ctx, 167.5 * scale, 215.0625 * scale, 15.297058540778355 * scale);
        fill_path(ctx, color[2]);
        circle(ctx, 176.5 * scale, 204.0625 * scale, 7.280109889280518 * scale);
        fill_path(ctx, color[2]);
        circle(ctx, 206.5 * scale, 189.0625 * scale, 7.280109889280518 * scale);
        fill_path(ctx, color[2]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(151.5 * scale, 212.0625 * scale);
        ctx.bezierCurveTo(161.5 * scale, 204.0625 * scale, 173.5 * scale, 214.0625 * scale, 158.5 * scale, 221.0625 * scale);
        ctx.bezierCurveTo(145.5 * scale, 228.0625 * scale, 144.5 * scale, 216.0625 * scale, 151.5 * scale, 212.0625 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(194.5 * scale, 209.0625 * scale);
        ctx.bezierCurveTo(205.5 * scale, 202.0625 * scale, 215.5 * scale, 207.0625 * scale, 199.5 * scale, 217.0625 * scale);
        ctx.bezierCurveTo(187.5 * scale, 224.0625 * scale, 182.5 * scale, 217.0625 * scale, 194.5 * scale, 209.0625 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(188.5 * scale, 183.0625 * scale);
        ctx.bezierCurveTo(201.5 * scale, 176.0625 * scale, 213.5 * scale, 187.0625 * scale, 193.5 * scale, 193.0625 * scale);
        ctx.bezierCurveTo(185.5 * scale, 194.0625 * scale, 175.5 * scale, 189.0625 * scale, 188.5 * scale, 183.0625 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(261.5 * scale, 202.0625 * scale);
        ctx.bezierCurveTo(274.5 * scale, 201.0625 * scale, 282.5 * scale, 214.0625 * scale, 261.5 * scale, 215.0625 * scale);
        ctx.bezierCurveTo(246.5 * scale, 214.0625 * scale, 248.5 * scale, 203.0625 * scale, 261.5 * scale, 202.0625 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(240.5 * scale, 231.0625 * scale);
        ctx.bezierCurveTo(255.5 * scale, 231.0625 * scale, 254.5 * scale, 243.0625 * scale, 240.5 * scale, 242.0625 * scale);
        ctx.bezierCurveTo(225.5 * scale, 239.0625 * scale, 225.5 * scale, 232.0625 * scale, 240.5 * scale, 231.0625 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 4 * scale);
        return can;
    };

    function create_candy(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 217 * scale;
        can.height = 215 * scale;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(79 * scale, 113 * scale);
        ctx.bezierCurveTo(135 * scale, 98 * scale, 136 * scale, 96 * scale, 142 * scale, 97 * scale);
        ctx.bezierCurveTo(167 * scale, 106 * scale, 167 * scale, 106 * scale, 171 * scale, 109 * scale);
        ctx.bezierCurveTo(173 * scale, 120 * scale, 173 * scale, 134 * scale, 169 * scale, 141 * scale);
        ctx.bezierCurveTo(140 * scale, 149.5 * scale, 140 * scale, 149.5 * scale, 111 * scale, 158 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(154 * scale, 103 * scale);
        ctx.bezierCurveTo(167 * scale, 91 * scale, 175 * scale, 87 * scale, 176 * scale, 94 * scale);
        ctx.bezierCurveTo(175 * scale, 102 * scale, 176 * scale, 102 * scale, 186 * scale, 103 * scale);
        ctx.bezierCurveTo(191 * scale, 104 * scale, 192 * scale, 105 * scale, 185 * scale, 116 * scale);
        ctx.bezierCurveTo(183 * scale, 120 * scale, 191 * scale, 124 * scale, 189 * scale, 129 * scale);
        ctx.bezierCurveTo(185 * scale, 139 * scale, 178 * scale, 134 * scale, 166 * scale, 131 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(60 * scale, 46 * scale);
        ctx.bezierCurveTo(60 * scale, 34 * scale, 60 * scale, 29 * scale, 56 * scale, 19 * scale);
        ctx.bezierCurveTo(52 * scale, 12 * scale, 52 * scale, 16 * scale, 49 * scale, 24 * scale);
        ctx.bezierCurveTo(48 * scale, 27 * scale, 46 * scale, 28 * scale, 39 * scale, 27 * scale);
        ctx.bezierCurveTo(33 * scale, 26 * scale, 34 * scale, 31 * scale, 35 * scale, 37 * scale);
        ctx.bezierCurveTo(36 * scale, 41 * scale, 27 * scale, 46 * scale, 29 * scale, 52 * scale);
        ctx.bezierCurveTo(36 * scale, 55 * scale, 35 * scale, 56 * scale, 31 * scale, 59 * scale);
        ctx.bezierCurveTo(27 * scale, 65 * scale, 32 * scale, 64 * scale, 35 * scale, 62 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(46 * scale, 50 * scale);
        ctx.bezierCurveTo(51 * scale, 35 * scale, 70 * scale, 32 * scale, 78 * scale, 29 * scale);
        ctx.bezierCurveTo(84 * scale, 27 * scale, 113 * scale, 36 * scale, 127 * scale, 41 * scale);
        ctx.bezierCurveTo(140 * scale, 47 * scale, 147 * scale, 69 * scale, 137 * scale, 73 * scale);
        ctx.bezierCurveTo(124 * scale, 92 * scale, 117 * scale, 92 * scale, 109 * scale, 94 * scale);
        ctx.bezierCurveTo(101 * scale, 96 * scale, 89 * scale, 92 * scale, 65 * scale, 83 * scale);
        ctx.bezierCurveTo(54 * scale, 80 * scale, 46 * scale, 58 * scale, 46 * scale, 51 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(51 * scale, 40 * scale);
        ctx.bezierCurveTo(49 * scale, 34 * scale, 49 * scale, 34 * scale, 47 * scale, 28 * scale);
        ctx.bezierCurveTo(38 * scale, 28 * scale, 34 * scale, 27 * scale, 37 * scale, 37 * scale);
        ctx.bezierCurveTo(43 * scale, 40.5 * scale, 43 * scale, 40.5 * scale, 49 * scale, 44 * scale);
        ctx.closePath();
        fill_path(ctx, color[7]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(29 * scale, 48 * scale);
        ctx.bezierCurveTo(38 * scale, 49 * scale, 38 * scale, 49 * scale, 47 * scale, 50 * scale);
        ctx.bezierCurveTo(46.5 * scale, 51.5 * scale, 46.5 * scale, 51.5 * scale, 46 * scale, 53 * scale);
        ctx.bezierCurveTo(40 * scale, 53.5 * scale, 40 * scale, 53.5 * scale, 34 * scale, 54 * scale);
        ctx.bezierCurveTo(29 * scale, 51 * scale, 32 * scale, 51.5 * scale, 30 * scale, 49 * scale);
        ctx.closePath();
        fill_path(ctx, color[7]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(89 * scale, 61 * scale);
        ctx.bezierCurveTo(101 * scale, 70 * scale, 109 * scale, 90 * scale, 102 * scale, 90 * scale);
        ctx.bezierCurveTo(97 * scale, 91 * scale, 87 * scale, 91 * scale, 60 * scale, 80 * scale);
        ctx.bezierCurveTo(48 * scale, 65 * scale, 46 * scale, 56 * scale, 48 * scale, 53 * scale);
        ctx.bezierCurveTo(50 * scale, 52 * scale, 66 * scale, 56 * scale, 89 * scale, 61 * scale);
        ctx.closePath();
        fill_path(ctx, color[7]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(99 * scale, 59 * scale);
        ctx.bezierCurveTo(115 * scale, 45 * scale, 125 * scale, 42 * scale, 129 * scale, 47 * scale);
        ctx.bezierCurveTo(138 * scale, 56 * scale, 140 * scale, 63 * scale, 138 * scale, 67 * scale);
        ctx.bezierCurveTo(131 * scale, 80 * scale, 122 * scale, 87 * scale, 114 * scale, 90 * scale);
        ctx.bezierCurveTo(105 * scale, 80 * scale, 95 * scale, 62 * scale, 98 * scale, 61 * scale);
        ctx.closePath();
        fill_path(ctx, color[7]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(118 * scale, 62 * scale);
        ctx.bezierCurveTo(139 * scale, 45 * scale, 153 * scale, 40 * scale, 150 * scale, 48 * scale);
        ctx.bezierCurveTo(145 * scale, 57 * scale, 157 * scale, 63 * scale, 157 * scale, 70 * scale);
        ctx.bezierCurveTo(157 * scale, 74 * scale, 142 * scale, 77 * scale, 142 * scale, 85 * scale);
        ctx.bezierCurveTo(143 * scale, 91 * scale, 141 * scale, 92 * scale, 135 * scale, 90 * scale);
        ctx.bezierCurveTo(132 * scale, 90 * scale, 132 * scale, 96 * scale, 124 * scale, 99 * scale);
        ctx.bezierCurveTo(118 * scale, 93 * scale, 116 * scale, 77 * scale, 116 * scale, 64 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(90 * scale, 130 * scale);
        ctx.bezierCurveTo(157 * scale, 115 * scale, 165 * scale, 111 * scale, 167 * scale, 115 * scale);
        ctx.bezierCurveTo(170 * scale, 117 * scale, 171 * scale, 135 * scale, 167 * scale, 141 * scale);
        ctx.bezierCurveTo(135.5 * scale, 149.5 * scale, 135.5 * scale, 149.5 * scale, 104 * scale, 158 * scale);
        ctx.closePath();
        fill_path(ctx, color[8]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(53 * scale, 119 * scale);
        ctx.bezierCurveTo(46 * scale, 120 * scale, 40 * scale, 118 * scale, 34 * scale, 116 * scale);
        ctx.bezierCurveTo(28 * scale, 111 * scale, 41 * scale, 112 * scale, 39 * scale, 108 * scale);
        ctx.bezierCurveTo(36 * scale, 100 * scale, 49 * scale, 102 * scale, 53 * scale, 95 * scale);
        ctx.bezierCurveTo(57 * scale, 84 * scale, 58 * scale, 85 * scale, 63 * scale, 93 * scale);
        ctx.bezierCurveTo(68 * scale, 96 * scale, 72 * scale, 94 * scale, 80 * scale, 88 * scale);
        ctx.bezierCurveTo(80 * scale, 96 * scale, 78 * scale, 107 * scale, 66 * scale, 115 * scale);
        ctx.closePath();
        fill_path(ctx, color[9], color[10], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(118 * scale, 64 * scale);
        ctx.bezierCurveTo(133.5 * scale, 57 * scale, 133.5 * scale, 57 * scale, 149 * scale, 50 * scale);
        ctx.bezierCurveTo(145 * scale, 54 * scale, 154 * scale, 65 * scale, 157 * scale, 68 * scale);
        ctx.bezierCurveTo(138.5 * scale, 66.5 * scale, 138.5 * scale, 66.5 * scale, 120 * scale, 65 * scale);
        ctx.closePath();
        fill_path(ctx, color[8]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(118 * scale, 65 * scale);
        ctx.bezierCurveTo(129 * scale, 77 * scale, 129 * scale, 77 * scale, 140 * scale, 89 * scale);
        ctx.bezierCurveTo(131 * scale, 89 * scale, 130 * scale, 92 * scale, 128 * scale, 96 * scale);
        ctx.bezierCurveTo(123.5 * scale, 82 * scale, 123.5 * scale, 82 * scale, 119 * scale, 68 * scale);
        ctx.closePath();
        fill_path(ctx, color[8]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(51 * scale, 112 * scale);
        ctx.bezierCurveTo(63 * scale, 108 * scale, 78 * scale, 111 * scale, 88 * scale, 112 * scale);
        ctx.bezierCurveTo(98 * scale, 122 * scale, 117 * scale, 136 * scale, 125 * scale, 157 * scale);
        ctx.bezierCurveTo(123 * scale, 180 * scale, 123 * scale, 185 * scale, 118 * scale, 186 * scale);
        ctx.bezierCurveTo(101 * scale, 190 * scale, 89 * scale, 191 * scale, 79 * scale, 187 * scale);
        ctx.bezierCurveTo(53 * scale, 165 * scale, 50 * scale, 153 * scale, 47 * scale, 144 * scale);
        ctx.bezierCurveTo(46 * scale, 128 * scale, 46 * scale, 124 * scale, 50 * scale, 112 * scale);
        ctx.closePath();
        fill_path(ctx, color[9], color[10], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(50 * scale, 114 * scale);
        ctx.bezierCurveTo(81 * scale, 149 * scale, 80 * scale, 147 * scale, 80 * scale, 149 * scale);
        ctx.bezierCurveTo(82 * scale, 155 * scale, 80 * scale, 182 * scale, 74 * scale, 182 * scale);
        ctx.bezierCurveTo(60 * scale, 172 * scale, 52 * scale, 157 * scale, 47 * scale, 144 * scale);
        ctx.closePath();
        fill_path(ctx, color[11], color[11], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(85 * scale, 152 * scale);
        ctx.bezierCurveTo(99 * scale, 150 * scale, 109 * scale, 152 * scale, 119 * scale, 156 * scale);
        ctx.bezierCurveTo(122 * scale, 163 * scale, 122 * scale, 174 * scale, 117 * scale, 182 * scale);
        ctx.closePath();
        ctx.bezierCurveTo(93 * scale, 188 * scale, 82 * scale, 187 * scale, 83 * scale, 179 * scale);
        fill_path(ctx, color[11], color[11], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(104 * scale, 166 * scale);
        ctx.bezierCurveTo(133 * scale, 165 * scale, 142 * scale, 168 * scale, 137 * scale, 173 * scale);
        ctx.bezierCurveTo(127 * scale, 177 * scale, 137 * scale, 195 * scale, 126 * scale, 196 * scale);
        ctx.bezierCurveTo(112 * scale, 195 * scale, 112 * scale, 194 * scale, 109 * scale, 199 * scale);
        ctx.bezierCurveTo(105 * scale, 205 * scale, 102 * scale, 195 * scale, 96 * scale, 197 * scale);
        ctx.bezierCurveTo(84 * scale, 201 * scale, 88 * scale, 198 * scale, 90 * scale, 187 * scale);
        ctx.bezierCurveTo(96 * scale, 171 * scale, 97 * scale, 170 * scale, 103 * scale, 167 * scale);
        ctx.closePath();
        fill_path(ctx, color[9], color[10], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(105 * scale, 168 * scale);
        ctx.bezierCurveTo(118 * scale, 172.5 * scale, 118 * scale, 172.5 * scale, 131 * scale, 177 * scale);
        ctx.bezierCurveTo(133 * scale, 190 * scale, 132 * scale, 199 * scale, 116 * scale, 194 * scale);
        ctx.bezierCurveTo(110 * scale, 182 * scale, 110 * scale, 182 * scale, 104 * scale, 170 * scale);
        ctx.closePath();
        fill_path(ctx, color[10]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(102 * scale, 169 * scale);
        ctx.bezierCurveTo(100.5 * scale, 182 * scale, 100.5 * scale, 182 * scale, 99 * scale, 195 * scale);
        ctx.bezierCurveTo(93.5 * scale, 196.5 * scale, 93.5 * scale, 196.5 * scale, 88 * scale, 198 * scale);
        ctx.bezierCurveTo(94 * scale, 176 * scale, 96 * scale, 174 * scale, 101 * scale, 168 * scale);
        ctx.closePath();
        fill_path(ctx, color[9], color[9], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(64 * scale, 107 * scale);
        ctx.bezierCurveTo(64 * scale, 101 * scale, 64 * scale, 101 * scale, 64 * scale, 95 * scale);
        ctx.bezierCurveTo(57 * scale, 86 * scale, 57 * scale, 84 * scale, 53 * scale, 97 * scale);
        ctx.bezierCurveTo(55 * scale, 103.5 * scale, 55 * scale, 103.5 * scale, 57 * scale, 110 * scale);
        ctx.closePath();
        fill_path(ctx, color[11], color[11], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(40 * scale, 108 * scale);
        ctx.bezierCurveTo(46.5 * scale, 111 * scale, 46.5 * scale, 111 * scale, 53 * scale, 114 * scale);
        ctx.bezierCurveTo(50.5 * scale, 117 * scale, 50.5 * scale, 117 * scale, 48 * scale, 120 * scale);
        ctx.bezierCurveTo(40.5 * scale, 117.5 * scale, 40.5 * scale, 117.5 * scale, 33 * scale, 115 * scale);
        ctx.bezierCurveTo(36 * scale, 112 * scale, 36 * scale, 112 * scale, 39 * scale, 109 * scale);
        ctx.closePath();
        fill_path(ctx, color[11], color[11], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(189 * scale, 106 * scale);
        ctx.bezierCurveTo(178.5 * scale, 110.5 * scale, 178.5 * scale, 110.5 * scale, 168 * scale, 115 * scale);
        ctx.bezierCurveTo(168.5 * scale, 119 * scale, 168.5 * scale, 119 * scale, 169 * scale, 123 * scale);
        ctx.bezierCurveTo(179 * scale, 124.5 * scale, 179 * scale, 124.5 * scale, 189 * scale, 126 * scale);
        ctx.bezierCurveTo(182 * scale, 118 * scale, 183 * scale, 115 * scale, 188 * scale, 106 * scale);
        ctx.closePath();
        fill_path(ctx, color[8]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(69 * scale, 178 * scale);
        ctx.bezierCurveTo(69 * scale, 141 * scale, 70 * scale, 136 * scale, 77 * scale, 137 * scale);
        ctx.bezierCurveTo(88 * scale, 133 * scale, 101 * scale, 134 * scale, 108 * scale, 137 * scale);
        fill_path(ctx, undefined, color[3], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(55 * scale, 161 * scale);
        ctx.bezierCurveTo(54 * scale, 124 * scale, 55 * scale, 119 * scale, 62 * scale, 119 * scale);
        ctx.bezierCurveTo(74 * scale, 117 * scale, 85 * scale, 117 * scale, 93 * scale, 119 * scale);
        fill_path(ctx, undefined, color[3], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(91 * scale, 29 * scale);
        ctx.bezierCurveTo(74 * scale, 33 * scale, 62 * scale, 46 * scale, 57 * scale, 54 * scale);
        ctx.bezierCurveTo(57 * scale, 63 * scale, 68 * scale, 76 * scale, 77 * scale, 87 * scale);
        fill_path(ctx, undefined, color[6], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(107 * scale, 33 * scale);
        ctx.bezierCurveTo(82 * scale, 51 * scale, 80 * scale, 52 * scale, 79 * scale, 59 * scale);
        ctx.bezierCurveTo(78 * scale, 65 * scale, 93 * scale, 86 * scale, 101 * scale, 93 * scale);
        fill_path(ctx, undefined, color[6], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(130 * scale, 98 * scale);
        ctx.bezierCurveTo(126.5 * scale, 103 * scale, 126.5 * scale, 103 * scale, 123 * scale, 108 * scale);
        ctx.bezierCurveTo(133.5 * scale, 107 * scale, 133.5 * scale, 107 * scale, 144 * scale, 106 * scale);
        ctx.bezierCurveTo(138.5 * scale, 110 * scale, 138.5 * scale, 110 * scale, 133 * scale, 114 * scale);
        ctx.bezierCurveTo(142 * scale, 114 * scale, 142 * scale, 114 * scale, 151 * scale, 114 * scale);
        ctx.bezierCurveTo(146.5 * scale, 119.5 * scale, 146.5 * scale, 119.5 * scale, 142 * scale, 125 * scale);
        ctx.bezierCurveTo(146.5 * scale, 127 * scale, 146.5 * scale, 127 * scale, 151 * scale, 129 * scale);
        ctx.bezierCurveTo(147.5 * scale, 132 * scale, 147.5 * scale, 132 * scale, 144 * scale, 135 * scale);
        ctx.bezierCurveTo(148 * scale, 137 * scale, 148 * scale, 137 * scale, 152 * scale, 139 * scale);
        ctx.bezierCurveTo(149 * scale, 142.5 * scale, 149 * scale, 142.5 * scale, 146 * scale, 146 * scale);
        fill_path(ctx, undefined, color[3], 4 * scale);
        return can;
    };

    function create_ferrero_rocher(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 118 * scale;
        can.height = 114 * scale;
        ctx.translate(0, 10 * scale);
        circle(ctx, 42 * scale, 43 * scale, 24.758836806279895 * scale);
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(65 * scale, 90 * scale);
        ctx.bezierCurveTo(72 * scale, 91 * scale, 75 * scale, 92 * scale, 71 * scale, 96 * scale);
        ctx.bezierCurveTo(65 * scale, 98 * scale, 65 * scale, 94 * scale, 65 * scale, 91 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(87 * scale, 45 * scale);
        ctx.bezierCurveTo(108 * scale, 59 * scale, 100 * scale, 86 * scale, 85 * scale, 91 * scale);
        ctx.bezierCurveTo(80 * scale, 96 * scale, 68 * scale, 95 * scale, 58 * scale, 87 * scale);
        ctx.bezierCurveTo(53 * scale, 80 * scale, 61 * scale, 64 * scale, 66 * scale, 58 * scale);
        ctx.bezierCurveTo(73 * scale, 48 * scale, 78 * scale, 44 * scale, 87 * scale, 45 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.translate(0, -10 * scale);
        circle(ctx, 42 * scale, 43 * scale, 24.758836806279895 * scale);
        fill_path(ctx, color[1], color[2], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(65 * scale, 90 * scale);
        ctx.bezierCurveTo(72 * scale, 91 * scale, 75 * scale, 92 * scale, 71 * scale, 96 * scale);
        ctx.bezierCurveTo(65 * scale, 98 * scale, 65 * scale, 94 * scale, 65 * scale, 91 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(87 * scale, 45 * scale);
        ctx.bezierCurveTo(108 * scale, 59 * scale, 100 * scale, 86 * scale, 85 * scale, 91 * scale);
        ctx.bezierCurveTo(80 * scale, 96 * scale, 68 * scale, 95 * scale, 58 * scale, 87 * scale);
        ctx.bezierCurveTo(53 * scale, 80 * scale, 61 * scale, 64 * scale, 66 * scale, 58 * scale);
        ctx.bezierCurveTo(73 * scale, 48 * scale, 78 * scale, 44 * scale, 87 * scale, 45 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(52 * scale, 16 * scale);
        ctx.bezierCurveTo(55 * scale, 19 * scale, 54 * scale, 20 * scale, 55 * scale, 22 * scale);
        ctx.bezierCurveTo(52 * scale, 24.5 * scale, 52 * scale, 24.5 * scale, 49 * scale, 27 * scale);
        ctx.bezierCurveTo(45 * scale, 25 * scale, 45 * scale, 25 * scale, 41 * scale, 23 * scale);
        ctx.bezierCurveTo(45 * scale, 19 * scale, 48 * scale, 16 * scale, 52 * scale, 16 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(62 * scale, 30 * scale);
        ctx.bezierCurveTo(66 * scale, 29 * scale, 64 * scale, 30 * scale, 66 * scale, 30 * scale);
        ctx.bezierCurveTo(67 * scale, 31 * scale, 67 * scale, 31 * scale, 68 * scale, 32 * scale);
        ctx.bezierCurveTo(66.5 * scale, 33.5 * scale, 66.5 * scale, 33.5 * scale, 65 * scale, 35 * scale);
        ctx.bezierCurveTo(63.5 * scale, 32.5 * scale, 63.5 * scale, 32.5 * scale, 62 * scale, 30 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(29 * scale, 21 * scale);
        ctx.bezierCurveTo(31 * scale, 22 * scale, 31 * scale, 26 * scale, 29 * scale, 29 * scale);
        ctx.bezierCurveTo(26 * scale, 28.5 * scale, 26 * scale, 28.5 * scale, 23 * scale, 28 * scale);
        ctx.bezierCurveTo(23 * scale, 26.5 * scale, 23 * scale, 26.5 * scale, 23 * scale, 25 * scale);
        ctx.bezierCurveTo(25 * scale, 23 * scale, 25 * scale, 23 * scale, 27 * scale, 21 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(18 * scale, 36 * scale);
        ctx.bezierCurveTo(23 * scale, 36 * scale, 24 * scale, 42 * scale, 19 * scale, 46 * scale);
        ctx.bezierCurveTo(12 * scale, 39 * scale, 15 * scale, 38 * scale, 18 * scale, 37 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(30 * scale, 34 * scale);
        ctx.bezierCurveTo(35 * scale, 36 * scale, 36 * scale, 39 * scale, 32 * scale, 45 * scale);
        ctx.bezierCurveTo(25 * scale, 46 * scale, 25 * scale, 44 * scale, 30 * scale, 34 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(59 * scale, 35 * scale);
        ctx.bezierCurveTo(58 * scale, 27 * scale, 57 * scale, 27 * scale, 52 * scale, 31 * scale);
        ctx.bezierCurveTo(50 * scale, 36 * scale, 53 * scale, 38 * scale, 58 * scale, 36 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(63 * scale, 46 * scale);
        ctx.bezierCurveTo(64.5 * scale, 46.5 * scale, 64.5 * scale, 46.5 * scale, 66 * scale, 47 * scale);
        ctx.bezierCurveTo(70 * scale, 50 * scale, 70 * scale, 53 * scale, 61 * scale, 55 * scale);
        ctx.bezierCurveTo(62 * scale, 50.5 * scale, 62 * scale, 50.5 * scale, 63 * scale, 46 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(41 * scale, 42 * scale);
        ctx.bezierCurveTo(47 * scale, 41 * scale, 53 * scale, 47 * scale, 46 * scale, 51 * scale);
        ctx.bezierCurveTo(38 * scale, 49 * scale, 39 * scale, 46 * scale, 41 * scale, 43 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(44 * scale, 57 * scale);
        ctx.bezierCurveTo(54 * scale, 57 * scale, 54 * scale, 58 * scale, 55 * scale, 61 * scale);
        ctx.bezierCurveTo(54 * scale, 63 * scale, 52 * scale, 64 * scale, 48 * scale, 65 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(20 * scale, 52 * scale);
        ctx.bezierCurveTo(25 * scale, 51 * scale, 27 * scale, 50 * scale, 28 * scale, 54 * scale);
        ctx.bezierCurveTo(27 * scale, 58 * scale, 24 * scale, 58 * scale, 22 * scale, 58 * scale);
        ctx.bezierCurveTo(21 * scale, 55.5 * scale, 21 * scale, 55.5 * scale, 20 * scale, 53 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(30 * scale, 61 * scale);
        ctx.bezierCurveTo(37 * scale, 61 * scale, 39 * scale, 63 * scale, 39 * scale, 68 * scale);
        ctx.bezierCurveTo(36 * scale, 68.5 * scale, 36 * scale, 68.5 * scale, 33 * scale, 69 * scale);
        ctx.bezierCurveTo(30.5 * scale, 67.5 * scale, 30.5 * scale, 67.5 * scale, 28 * scale, 66 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(88 * scale, 45 * scale);
        ctx.bezierCurveTo(90 * scale, 46.5 * scale, 90 * scale, 46.5 * scale, 92 * scale, 48 * scale);
        ctx.bezierCurveTo(92 * scale, 50 * scale, 92 * scale, 50 * scale, 92 * scale, 52 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(96 * scale, 53 * scale);
        ctx.bezierCurveTo(97.5 * scale, 55 * scale, 97.5 * scale, 55 * scale, 99 * scale, 57 * scale);
        ctx.bezierCurveTo(97.5 * scale, 59.5 * scale, 97.5 * scale, 59.5 * scale, 96 * scale, 62 * scale);
        ctx.bezierCurveTo(93.5 * scale, 60.5 * scale, 93.5 * scale, 60.5 * scale, 91 * scale, 59 * scale);
        ctx.bezierCurveTo(91.5 * scale, 57 * scale, 91.5 * scale, 57 * scale, 92 * scale, 55 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(92 * scale, 71 * scale);
        ctx.bezierCurveTo(94.5 * scale, 70.5 * scale, 94.5 * scale, 70.5 * scale, 97 * scale, 70 * scale);
        ctx.bezierCurveTo(98.5 * scale, 72.5 * scale, 98.5 * scale, 72.5 * scale, 100 * scale, 75 * scale);
        ctx.bezierCurveTo(97 * scale, 76.5 * scale, 97 * scale, 76.5 * scale, 94 * scale, 78 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(95 * scale, 82 * scale);
        ctx.bezierCurveTo(96 * scale, 83 * scale, 96 * scale, 83 * scale, 97 * scale, 84 * scale);
        ctx.bezierCurveTo(97 * scale, 85.5 * scale, 97 * scale, 85.5 * scale, 97 * scale, 87 * scale);
        ctx.bezierCurveTo(93.5 * scale, 87.5 * scale, 93.5 * scale, 87.5 * scale, 90 * scale, 88 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(86 * scale, 72 * scale);
        ctx.bezierCurveTo(89 * scale, 76 * scale, 88 * scale, 81 * scale, 85 * scale, 82 * scale);
        ctx.bezierCurveTo(80 * scale, 80 * scale, 82 * scale, 78 * scale, 85 * scale, 72 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(80 * scale, 86 * scale);
        ctx.bezierCurveTo(84 * scale, 88 * scale, 86 * scale, 88 * scale, 85 * scale, 93 * scale);
        ctx.bezierCurveTo(80 * scale, 96 * scale, 79 * scale, 96 * scale, 76 * scale, 91 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(84 * scale, 46 * scale);
        ctx.bezierCurveTo(93 * scale, 51 * scale, 91 * scale, 62 * scale, 80 * scale, 78 * scale);
        ctx.bezierCurveTo(74 * scale, 86 * scale, 66 * scale, 90 * scale, 60 * scale, 86 * scale);
        ctx.bezierCurveTo(55 * scale, 79 * scale, 57 * scale, 73 * scale, 67 * scale, 57 * scale);
        ctx.bezierCurveTo(71 * scale, 51 * scale, 79 * scale, 44 * scale, 84 * scale, 46 * scale);
        ctx.closePath();
        fill_path(ctx, color[5], color[6], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(76 * scale, 60 * scale);
        ctx.bezierCurveTo(80 * scale, 66 * scale, 75 * scale, 74 * scale, 68 * scale, 74 * scale);
        ctx.bezierCurveTo(60 * scale, 64 * scale, 68 * scale, 59 * scale, 76 * scale, 59 * scale);
        ctx.closePath();
        fill_path(ctx, color[7], color[8], 5 * scale);
        return can;
    };

    function create_seed(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        var w = scale * 70;
        var h = scale * 90;
        var width = scale * 4;
        var shadow = scale * 5;
        var w2 = w / 2;
        var h2 = h / 2;
        var round = scale * 10;
        var wr = scale * 100;
        var hr = scale * 100;
        var wr2 = wr / 2;
        var hr2 = hr / 2;
        can.width = w;
        can.height = h;
        ctx.save();
        ctx.translate(-80 * scale, (-70 * scale) + shadow);
        ctx.globalAlpha = 0.5;
        ctx.beginPath();
        ctx.bezierCurveTo(130 * scale, 79 * scale, 132 * scale, 86 * scale, 130 * scale, 93 * scale);
        ctx.bezierCurveTo(128 * scale, 100 * scale, 121 * scale, 107 * scale, 120 * scale, 107 * scale);
        ctx.bezierCurveTo(120 * scale, 107 * scale, 115 * scale, 98 * scale, 115 * scale, 92 * scale);
        ctx.bezierCurveTo(115 * scale, 86 * scale, 119 * scale, 76 * scale, 127 * scale, 73 * scale);
        ctx.closePath();
        fill_path(ctx, "#0d1b1c");
        ctx.restore();
        ctx.save();
        ctx.translate(-80 * scale, (-70 * scale) + shadow);
        ctx.globalAlpha = 0.5;
        ctx.beginPath();
        ctx.bezierCurveTo(112 * scale, 109 * scale, 111 * scale, 100 * scale, 106 * scale, 93 * scale);
        ctx.bezierCurveTo(104 * scale, 90 * scale, 91 * scale, 87 * scale, 91 * scale, 87 * scale);
        ctx.bezierCurveTo(91 * scale, 88 * scale, 91 * scale, 96 * scale, 94 * scale, 102 * scale);
        ctx.bezierCurveTo(97 * scale, 108 * scale, 106 * scale, 112 * scale, 113 * scale, 112 * scale);
        ctx.closePath();
        fill_path(ctx, "#0d1b1c");
        ctx.restore();
        ctx.save();
        ctx.translate(-80 * scale, (-70 * scale) + shadow);
        ctx.globalAlpha = 0.5;
        ctx.beginPath();
        ctx.bezierCurveTo(108 * scale, 120 * scale, 100 * scale, 119 * scale, 91 * scale, 127 * scale);
        ctx.bezierCurveTo(83 * scale, 134 * scale, 82 * scale, 146 * scale, 83 * scale, 146 * scale);
        ctx.bezierCurveTo(84 * scale, 146 * scale, 98 * scale, 142 * scale, 103 * scale, 138 * scale);
        ctx.bezierCurveTo(107 * scale, 135 * scale, 110 * scale, 130 * scale, 112 * scale, 121 * scale);
        ctx.closePath();
        fill_path(ctx, "#0d1b1c");
        ctx.restore();
        ctx.save();
        ctx.translate(3 * scale, (-93 * scale) + shadow);
        ctx.rotate(Math.PI / 5);
        ctx.globalAlpha = 0.5;
        ctx.beginPath();
        ctx.bezierCurveTo(130 * scale, 79 * scale, 132 * scale, 86 * scale, 130 * scale, 93 * scale);
        ctx.bezierCurveTo(128 * scale, 100 * scale, 121 * scale, 107 * scale, 120 * scale, 107 * scale);
        ctx.bezierCurveTo(120 * scale, 107 * scale, 115 * scale, 98 * scale, 115 * scale, 92 * scale);
        ctx.bezierCurveTo(115 * scale, 86 * scale, 119 * scale, 76 * scale, 127 * scale, 73 * scale);
        ctx.closePath();
        fill_path(ctx, "#0d1b1c");
        ctx.restore();
        ctx.save();
        ctx.translate(-80 * scale, -70 * scale);
        ctx.globalAlpha = 1;
        ctx.beginPath();
        ctx.bezierCurveTo(130 * scale, 79 * scale, 132 * scale, 86 * scale, 130 * scale, 93 * scale);
        ctx.bezierCurveTo(128 * scale, 100 * scale, 121 * scale, 107 * scale, 120 * scale, 107 * scale);
        ctx.bezierCurveTo(120 * scale, 107 * scale, 115 * scale, 98 * scale, 115 * scale, 92 * scale);
        ctx.bezierCurveTo(115 * scale, 86 * scale, 119 * scale, 76 * scale, 127 * scale, 73 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[1], width);
        ctx.restore();
        ctx.save();
        ctx.translate(-80 * scale, -70 * scale);
        ctx.globalAlpha = 1;
        ctx.beginPath();
        ctx.bezierCurveTo(112 * scale, 109 * scale, 111 * scale, 100 * scale, 106 * scale, 93 * scale);
        ctx.bezierCurveTo(104 * scale, 90 * scale, 91 * scale, 87 * scale, 91 * scale, 87 * scale);
        ctx.bezierCurveTo(91 * scale, 88 * scale, 91 * scale, 96 * scale, 94 * scale, 102 * scale);
        ctx.bezierCurveTo(97 * scale, 108 * scale, 106 * scale, 112 * scale, 113 * scale, 112 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[1], width);
        ctx.restore();
        ctx.save();
        ctx.translate(-80 * scale, -70 * scale);
        ctx.globalAlpha = 1;
        ctx.beginPath();
        ctx.bezierCurveTo(108 * scale, 120 * scale, 100 * scale, 119 * scale, 91 * scale, 127 * scale);
        ctx.bezierCurveTo(83 * scale, 134 * scale, 82 * scale, 146 * scale, 83 * scale, 146 * scale);
        ctx.bezierCurveTo(84 * scale, 146 * scale, 98 * scale, 142 * scale, 103 * scale, 138 * scale);
        ctx.bezierCurveTo(107 * scale, 135 * scale, 110 * scale, 130 * scale, 112 * scale, 121 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[1], width);
        ctx.restore();
        ctx.save();
        ctx.translate(3 * scale, -93 * scale);
        ctx.rotate(Math.PI / 5);
        ctx.globalAlpha = 1;
        ctx.beginPath();
        ctx.bezierCurveTo(130 * scale, 79 * scale, 132 * scale, 86 * scale, 130 * scale, 93 * scale);
        ctx.bezierCurveTo(128 * scale, 100 * scale, 121 * scale, 107 * scale, 120 * scale, 107 * scale);
        ctx.bezierCurveTo(120 * scale, 107 * scale, 115 * scale, 98 * scale, 115 * scale, 92 * scale);
        ctx.bezierCurveTo(115 * scale, 86 * scale, 119 * scale, 76 * scale, 127 * scale, 73 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[1], width);
        ctx.restore();
        return can;
    };

    function create_info_box(inv) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        var text = LANG[inv];
        ctx.font = "20px Baloo Paaji";
        var max_size = 0;
        if (text.length >= 1)
            max_size = Math.max(0, ctx.measureText(text[0]).width);

        ctx.font = "17px Baloo Paaji";
        if (text.length >= 2)
            max_size = Math.max(max_size, ctx.measureText(text[1]).width);

        ctx.font = "14px Baloo Paaji";
        for (i = 2; i < text.length; i++)
            max_size = Math.max(max_size, ctx.measureText(text[i]).width);
        var width = max_size + 35;
        var text_height = 26;
        var height = 0;
        if (text.length === 1)
            height = 55;
        else if (text.length === 2)
            height = 85;
        else
            height = ((text.length - 2) * text_height) + 85;
        can.width = width;
        can.height = height;
        round_rect(ctx, 0, 0, width, height, 10);
        ctx.fillStyle = "#000000";
        ctx.globalAlpha = 0.5;
        ctx.fill();
        if (text.length >= 1) {
            ctx.textBaseline = "middle", ctx.font = "20px Baloo Paaji";
            ctx.globalAlpha = 1;
            ctx.fillStyle = "#e2c340";
            ctx.fillText(text[0], 15, 28);
        }
        if (text.length >= 2) {
            ctx.font = "17px Baloo Paaji";
            ctx.fillStyle = "#ffffff";
            ctx.fillText(text[1], 15, 55);
            height = 55;
        }
        if (text.length >= 3) {
            ctx.font = "14px Baloo Paaji";
            ctx.globalAlpha = 0.7;
            for (i = 2; i < text.length; i++) {
                ctx.fillText(text[i], 15, height + 28);
                height += text_height;
            }
        }
        return can;
    };

    function create_welcome_text(text) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        ctx.lineJoin = "round";
        while (text.indexOf("\\n") !== -1)
            text = text.replace("\\n", '\x0a');
        text = text.split('\x0a');
        color = [];
        var h = 14;
        var height = (text.length * (h + 4)) + 10;
        var width = 0;
        ctx.font = h + "px Baloo Paaji";
        for (var i = 0; i < text.length; i++) {
            if (text[i].charAt(0) === "#") {
                color[i] = text[i].substring(0, 7);
                text[i] = text[i].substring(8);
            } else
                color[i] = "#FFFFFF";
            width = Math.max(ctx.measureText(text[i]).width + 16, width);
        }
        can.height = height;
        can.width = width;
        for (var i = 0; i < text.length; i++) {
            var img = create_text(1, text[i], h, color[i], null, null, null, null, null, "#000", 6);
            ctx.drawImage(img, 8, (i * (h + 4)) + 5);
        }
        return can;
    };

    function create_text(scale, text, h, color, shadow, dist, rounded, radius, max, stroke, line) {
        if (line === undefined)
            line = 0;

        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        dist = !dist ? 0 : (dist * scale);
        var height = Math.floor(scale * h);
        ctx.font = height + "px Baloo Paaji";
        ctx.lineJoin = "round";
        radius = radius * scale;
        var gap = rounded ? (radius * 2) : 0;
        if (max)
            var width = Math.min((ctx.measureText(text).width + (2 * scale)) + gap, max);
        else
            var width = ((ctx.measureText(text).width + (2 * scale)) + gap) + ((line * scale) * 2);
        var height = (((height + dist) + line) * scale) + gap;
        can.width = width;
        can.height = height;
        if (rounded) {
            ctx.fillStyle = rounded;
            round_rect(ctx, 0, 0, width, height, radius * 2);
            ctx.fill();
            ctx.translate(radius, radius);
        }
        ctx.textBaseline = "middle", ctx.font = h + "px Baloo Paaji";
        ctx.lineJoin = "round";
        if (shadow) {
            ctx.beginPath();
            ctx.fillStyle = shadow;
            ctx.fillText(text, 0, ((height / 2) + dist) - (gap / 2), width);
        }
        ctx.beginPath();
        if (stroke) {
            ctx.strokeStyle = stroke;
            ctx.lineWidth = line;
            ctx.strokeText(text, line, (height - gap) / 2, width);
        }
        ctx.fillStyle = color;
        ctx.fillText(text, line, (height - gap) / 2, width);
        return can;
    };

    function create_stone(scale, useless, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        var w = scale * 220;
        var h = scale * 230;
        var r = scale * 100;
        var round = r / 4;
        var shadow = scale * 20;
        can.width = w;
        can.height = h;
        ctx.translate(w / 2, (h / 2) + shadow);
        ctx.globalAlpha = 0.5;
        round_regular_polygon(ctx, 7, r, round);
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(0, -shadow);
        round_regular_polygon(ctx, 7, r, round);
        fill_path(ctx, color[1]);
        round_regular_polygon(ctx, 6, r * 0.65, round * 0.65);
        fill_path(ctx, color[2]);
        return can;
    };

    function create_cave_stone(scale, draw_shadow, color, i) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        var w = scale * 220;
        var h = scale * 220;
        var r = scale * 100;
        var round = r / 4;
        var shadow = scale * 20;
        can.width = w;
        can.height = h;
        ctx.translate(w / 2, h / 2);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        if (!draw_shadow)
            ctx.translate(0 * scale, -8 * scale);

        round_regular_polygon(ctx, 7, r, round);
        if (draw_shadow) {
            fill_path(ctx, color[0]);
        } else {
            fill_path(ctx, color[1]);
        }
        ctx.globalAlpha = 1;
        if (i == 0) {
            round_regular_polygon(ctx, 6, r * 0.65, round * 0.65);
            fill_path(ctx, color[2]);
        } else if (i == 1) {
            ctx.translate(20 * scale, 20 * scale);
            round_regular_polygon(ctx, 6, r * 0.45, round * 0.4);
            fill_path(ctx, color[2]);
        }
        return can;
    };

    function create_gold(scale, useless, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        var w = scale * 120;
        var h = scale * 150;
        var r = scale * 60;
        var round = r / 4;
        var shadow = scale * 15;
        can.width = w;
        can.height = h;
        ctx.save();
        ctx.translate((w / 2) + (0 * scale), ((h / 2) + (0 * scale)) + shadow);
        ctx.rotate(Math.PI / 3);
        ctx.globalAlpha = 0.5;
        round_regular_polygon(ctx, 8, r, round);
        fill_path(ctx, color[0]);
        ctx.restore();
        ctx.save();
        ctx.translate((w / 2) - (11 * scale), (h / 2) + (12 * scale));
        ctx.globalAlpha = 1;
        ctx.rotate(Math.PI / 3);
        ctx.translate(0, -shadow);
        round_regular_polygon(ctx, 8, r, round);
        fill_path(ctx, color[1]);
        ctx.restore();
        ctx.save();
        ctx.translate((w / 2) - (9 * scale), (h / 2) - (12 * scale));
        ctx.rotate(Math.PI / 2.8);
        round_regular_polygon(ctx, 5, r * 0.5, round * 0.4);
        fill_path(ctx, color[2]);
        ctx.restore();
        ctx.save();
        ctx.translate((w / 2) + (19 * scale), (h / 2) + (5 * scale));
        ctx.rotate(Math.PI / 1);
        round_regular_polygon(ctx, 5, r * 0.5, round * 0.4);
        fill_path(ctx, color[2]);
        ctx.restore();
        ctx.save();
        ctx.translate((w / 2) - (8 * scale), (h / 2) + (20 * scale));
        ctx.rotate(Math.PI / 2.25);
        round_regular_polygon(ctx, 5, r * 0.5, round * 0.4);
        fill_path(ctx, color[2]);
        ctx.restore();
        return can;
    };

    function create_diamond(scale, useless, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        var w = scale * 180;
        var h = scale * 210;
        var r = scale * 60;
        var round = r / 4;
        var shadow = scale * 20;
        can.width = w;
        can.height = h;
        ctx.save();
        ctx.translate((w / 2) - (0 * scale), ((h / 2) - (35 * scale)) + shadow);
        ctx.rotate(Math.PI / -1.8);
        ctx.globalAlpha = 0.5;
        ctx.translate(0 * scale, -20 * scale);
        round_regular_polygon(ctx, 5, r, round);
        fill_path(ctx, color[0]);
        ctx.restore();
        ctx.save();
        ctx.translate((w / 2) + (10 * scale), ((h / 2) + (15 * scale)) + shadow);
        ctx.rotate(Math.PI / 2);
        ctx.globalAlpha = 0.5;
        ctx.translate(0 * scale, -20 * scale);
        round_regular_polygon(ctx, 5, r, round);
        fill_path(ctx, color[0]);
        ctx.restore();
        ctx.save();
        ctx.translate((w / 2) - (50 * scale), ((h / 2) + (40 * scale)) + shadow);
        ctx.rotate(Math.PI / 3);
        ctx.globalAlpha = 0.5;
        ctx.translate(0, -20 * scale);
        round_regular_polygon(ctx, 5, r, round);
        fill_path(ctx, color[0]);
        ctx.restore();
        ctx.save();
        ctx.translate((w / 2) - (0 * scale), (h / 2) - (35 * scale));
        ctx.rotate(Math.PI / -1.8);
        ctx.globalAlpha = 1;
        ctx.translate(0 * scale, -20 * scale);
        round_regular_polygon(ctx, 5, r, round);
        fill_path(ctx, color[1]);
        ctx.restore();
        ctx.save();
        ctx.translate((w / 2) + (10 * scale), (h / 2) + (15 * scale));
        ctx.rotate(Math.PI / 2);
        ctx.globalAlpha = 1;
        ctx.translate(0, -20 * scale);
        round_regular_polygon(ctx, 5, r, round);
        fill_path(ctx, color[1]);
        ctx.restore();
        ctx.save();
        ctx.translate((w / 2) - (50 * scale), (h / 2) + (40 * scale));
        ctx.rotate(Math.PI / 3);
        ctx.globalAlpha = 1;
        ctx.translate(0, -20 * scale);
        round_regular_polygon(ctx, 5, r, round);
        fill_path(ctx, color[1]);
        ctx.restore();
        var r = scale * 30;
        var round = r / 4;
        ctx.save();
        ctx.translate((w / 2) + (5 * scale), (h / 2) - (20 * scale));
        ctx.rotate(Math.PI / -1.8);
        ctx.globalAlpha = 1;
        ctx.translate(0, -20 * scale);
        round_regular_polygon(ctx, 5, r, round);
        fill_path(ctx, color[2]);
        ctx.restore();
        ctx.save();
        ctx.translate((w / 2) + (0 * scale), (h / 2) + (10 * scale));
        ctx.rotate(Math.PI / 2);
        ctx.globalAlpha = 1;
        ctx.translate(0, -20 * scale);
        round_regular_polygon(ctx, 5, r, round);
        fill_path(ctx, color[2]);
        ctx.restore();
        ctx.save();
        ctx.translate((w / 2) - (45 * scale), (h / 2) + (35 * scale));
        ctx.rotate(Math.PI / 3);
        ctx.globalAlpha = 1;
        ctx.translate(0, -20 * scale);
        round_regular_polygon(ctx, 5, r, round);
        fill_path(ctx, color[2]);
        ctx.restore();
        circle(ctx, (w / 2) - (7 * scale), (h / 2) + (7 * scale), 5);
        fill_path(ctx, color[2]);
        return can;
    };

    function create_plant(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        var w = scale * 140;
        var h = scale * 150;
        var shadow = scale * 10;
        var width = scale * 4;
        can.width = w;
        can.height = h;
        ctx.translate(-50 * scale, (-38 * scale) + shadow);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.beginPath();
        ctx.bezierCurveTo(160 * scale, 65 * scale, 160 * scale, 85 * scale, 152 * scale, 95 * scale);
        ctx.bezierCurveTo(152 * scale, 95 * scale, 173 * scale, 94 * scale, 187 * scale, 102 * scale);
        ctx.bezierCurveTo(187 * scale, 102 * scale, 180 * scale, 120 * scale, 155 * scale, 126 * scale);
        ctx.bezierCurveTo(154 * scale, 126 * scale, 166 * scale, 138 * scale, 169 * scale, 148 * scale);
        ctx.bezierCurveTo(169 * scale, 148 * scale, 148 * scale, 152 * scale, 133 * scale, 140 * scale);
        ctx.bezierCurveTo(133 * scale, 140 * scale, 134 * scale, 160 * scale, 122 * scale, 175 * scale);
        ctx.bezierCurveTo(122 * scale, 175 * scale, 107 * scale, 162 * scale, 107 * scale, 144 * scale);
        ctx.bezierCurveTo(107 * scale, 144 * scale, 98 * scale, 164 * scale, 73 * scale, 167 * scale);
        ctx.bezierCurveTo(73 * scale, 167 * scale, 72 * scale, 134 * scale, 90 * scale, 127 * scale);
        ctx.bezierCurveTo(90 * scale, 127 * scale, 70 * scale, 134 * scale, 55 * scale, 123 * scale);
        ctx.bezierCurveTo(55 * scale, 123 * scale, 58 * scale, 115 * scale, 75 * scale, 104 * scale);
        ctx.bezierCurveTo(75 * scale, 104 * scale, 66 * scale, 96 * scale, 61 * scale, 77 * scale);
        ctx.bezierCurveTo(61 * scale, 77 * scale, 83 * scale, 74 * scale, 102 * scale, 89 * scale);
        ctx.bezierCurveTo(102 * scale, 89 * scale, 92 * scale, 66 * scale, 110 * scale, 41 * scale);
        ctx.bezierCurveTo(111 * scale, 40 * scale, 130 * scale, 54 * scale, 130 * scale, 82 * scale);
        ctx.bezierCurveTo(130 * scale, 82 * scale, 143 * scale, 67 * scale, 159 * scale, 65 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.translate(0, 0 - shadow);
        ctx.globalAlpha = 1;
        ctx.beginPath();
        ctx.bezierCurveTo(160 * scale, 65 * scale, 160 * scale, 85 * scale, 152 * scale, 95 * scale);
        ctx.bezierCurveTo(152 * scale, 95 * scale, 173 * scale, 94 * scale, 187 * scale, 102 * scale);
        ctx.bezierCurveTo(187 * scale, 102 * scale, 180 * scale, 120 * scale, 155 * scale, 126 * scale);
        ctx.bezierCurveTo(154 * scale, 126 * scale, 166 * scale, 138 * scale, 169 * scale, 148 * scale);
        ctx.bezierCurveTo(169 * scale, 148 * scale, 148 * scale, 152 * scale, 133 * scale, 140 * scale);
        ctx.bezierCurveTo(133 * scale, 140 * scale, 134 * scale, 160 * scale, 122 * scale, 175 * scale);
        ctx.bezierCurveTo(122 * scale, 175 * scale, 107 * scale, 162 * scale, 107 * scale, 144 * scale);
        ctx.bezierCurveTo(107 * scale, 144 * scale, 98 * scale, 164 * scale, 73 * scale, 167 * scale);
        ctx.bezierCurveTo(73 * scale, 167 * scale, 72 * scale, 134 * scale, 90 * scale, 127 * scale);
        ctx.bezierCurveTo(90 * scale, 127 * scale, 70 * scale, 134 * scale, 55 * scale, 123 * scale);
        ctx.bezierCurveTo(55 * scale, 123 * scale, 58 * scale, 115 * scale, 75 * scale, 104 * scale);
        ctx.bezierCurveTo(75 * scale, 104 * scale, 66 * scale, 96 * scale, 61 * scale, 77 * scale);
        ctx.bezierCurveTo(61 * scale, 77 * scale, 83 * scale, 74 * scale, 102 * scale, 89 * scale);
        ctx.bezierCurveTo(102 * scale, 89 * scale, 92 * scale, 66 * scale, 110 * scale, 41 * scale);
        ctx.bezierCurveTo(111 * scale, 40 * scale, 130 * scale, 54 * scale, 130 * scale, 82 * scale);
        ctx.bezierCurveTo(130 * scale, 82 * scale, 143 * scale, 67 * scale, 159 * scale, 65 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], width);
        return can;
    };

    function create_fruit(scale, useless, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        var w = scale * 18;
        var h = scale * 18;
        can.width = w;
        can.height = h;
        var x = scale * 9;
        var y = scale * 9;
        var r = scale * 8;
        ctx.save();
        ctx.translate(x, y);
        ctx.globalAlpha = 1;
        circle(ctx, 0, 0, r);
        fill_path(ctx, color[0]);
        var r = 3 * scale;
        var x = 0;
        var y = -3 * scale;
        ctx.translate(x, y);
        ctx.globalAlpha = 1;
        circle(ctx, 0, 0, r);
        fill_path(ctx, color[1]);
        ctx.restore();
        return can;
    };

    function create_leaf(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 80 * scale;
        can.height = 100 * scale;
        ctx.scale(0.5, 0.5);
        ctx.translate(10, 15);
        ctx.globalAlpha = 0.5;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(47 * scale, 5 * scale);
        ctx.bezierCurveTo(19 * scale, 30 * scale, 12 * scale, 42 * scale, 10 * scale, 55 * scale);
        ctx.bezierCurveTo(11 * scale, 75 * scale, 27 * scale, 76 * scale, 36 * scale, 72 * scale);
        ctx.bezierCurveTo(52 * scale, 60 * scale, 53 * scale, 46 * scale, 54 * scale, 31 * scale);
        ctx.bezierCurveTo(53 * scale, 14 * scale, 50 * scale, 9 * scale, 48 * scale, 6 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(17 * scale, 70 * scale);
        ctx.bezierCurveTo(18 * scale, 77 * scale, 10 * scale, 83 * scale, 4 * scale, 87 * scale);
        fill_path(ctx, undefined, color[0], scale * 10);
        ctx.translate(0, -10);
        ctx.globalAlpha = 1;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(47 * scale, 5 * scale);
        ctx.bezierCurveTo(19 * scale, 30 * scale, 12 * scale, 42 * scale, 10 * scale, 55 * scale);
        ctx.bezierCurveTo(11 * scale, 75 * scale, 27 * scale, 76 * scale, 36 * scale, 72 * scale);
        ctx.bezierCurveTo(52 * scale, 60 * scale, 53 * scale, 46 * scale, 54 * scale, 31 * scale);
        ctx.bezierCurveTo(53 * scale, 14 * scale, 50 * scale, 9 * scale, 48 * scale, 6 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(17 * scale, 70 * scale);
        ctx.bezierCurveTo(18 * scale, 77 * scale, 10 * scale, 83 * scale, 4 * scale, 87 * scale);
        fill_path(ctx, undefined, color[2], 8 * scale);
        ctx.globalAlpha = 0.5;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(17 * scale, 70 * scale);
        ctx.bezierCurveTo(33 * scale, 52 * scale, 39 * scale, 33 * scale, 48 * scale, 7 * scale);
        fill_path(ctx, undefined, color[2], 8 * scale);
        return can;
    };

    function create_leaf(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 234 * scale;
        can.height = 183 * scale;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(76 * scale, 25 * scale);
        ctx.bezierCurveTo(150 * scale, 3 * scale, 181 * scale, 22 * scale, 203 * scale, 41 * scale);
        ctx.bezierCurveTo(225 * scale, 63 * scale, 225 * scale, 105 * scale, 198 * scale, 133 * scale);
        ctx.bezierCurveTo(179 * scale, 157 * scale, 134 * scale, 178 * scale, 81 * scale, 164 * scale);
        ctx.bezierCurveTo(19 * scale, 148 * scale, 6 * scale, 95 * scale, 21 * scale, 66 * scale);
        ctx.bezierCurveTo(34 * scale, 39 * scale, 52 * scale, 33 * scale, 75 * scale, 25 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 4 * scale);
        return can;
    };

    function create_herb(scale, useless, color, i, a) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        if (i == 0) {
            var w = scale * 270;
            var h = scale * 250;
            can.width = w;
            can.height = h;
            ctx.beginPath();
            ctx.moveTo(140 * scale, 3 * scale);
            ctx.translate(-25 * scale, -20 * scale);
            ctx.bezierCurveTo(218 * scale, 31 * scale, 251 * scale, 61 * scale, 265 * scale, 85 * scale);
            ctx.bezierCurveTo(278 * scale, 108 * scale, 295 * scale, 160 * scale, 285 * scale, 195 * scale);
            ctx.bezierCurveTo(271 * scale, 242 * scale, 213 * scale, 268 * scale, 188 * scale, 266 * scale);
            ctx.bezierCurveTo(139 * scale, 262 * scale, 70 * scale, 244 * scale, 47 * scale, 204 * scale);
            ctx.bezierCurveTo(20 * scale, 158 * scale, 35 * scale, 78 * scale, 59 * scale, 56 * scale);
            ctx.bezierCurveTo(90 * scale, 28 * scale, 124 * scale, 23 * scale, 140 * scale, 23 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
        } else if (i == 1) {
            var w = scale * 430;
            var h = scale * 350;
            can.width = w;
            can.height = h;
            ctx.beginPath();
            ctx.moveTo(180 * scale, 5 * scale);
            ctx.translate(-30 * scale, -60 * scale);
            ctx.bezierCurveTo(283 * scale, 60 * scale, 265 * scale, 163 * scale, 335 * scale, 206 * scale);
            ctx.bezierCurveTo(376 * scale, 231 * scale, 492 * scale, 299 * scale, 434 * scale, 357 * scale);
            ctx.bezierCurveTo(371 * scale, 421 * scale, 289 * scale, 394 * scale, 255 * scale, 386 * scale);
            ctx.bezierCurveTo(218 * scale, 377 * scale, 91 * scale, 359 * scale, 50 * scale, 272 * scale);
            ctx.bezierCurveTo(12 * scale, 192 * scale, 107 * scale, 75 * scale, 178 * scale, 69 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
        } else if (i == 2) {
            var w = scale * 400;
            var h = scale * 300;
            can.width = w;
            can.height = h;
            ctx.beginPath();
            ctx.moveTo(80 * scale, 52 * scale);
            ctx.translate(-40 * scale, -30 * scale);
            ctx.bezierCurveTo(124 * scale, 77 * scale, 241 * scale, 22 * scale, 311 * scale, 65 * scale);
            ctx.bezierCurveTo(352 * scale, 90 * scale, 404 * scale, 176 * scale, 346 * scale, 234 * scale);
            ctx.bezierCurveTo(283 * scale, 298 * scale, 179 * scale, 299 * scale, 145 * scale, 291 * scale);
            ctx.bezierCurveTo(108 * scale, 282 * scale, 100 * scale, 239 * scale, 63 * scale, 205 * scale);
            ctx.bezierCurveTo(37 * scale, 181 * scale, 45 * scale, 131 * scale, 80 * scale, 107 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
        }
        return can;
    };

    function create_flake(scale, r, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        var w = (scale * r) * 2;
        var h = (scale * r) * 2;
        var x = w / 2;
        var y = h / 2;
        can.width = w;
        can.height = h;
        ctx.translate(x, y);
        circle(ctx, 0, 0, r * scale, 0);
        fill_path(ctx, color);
        return can;
    };

    function create_divingmask(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 373 * scale;
        can.height = 314 * scale;
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(5 * scale, 5 * scale);
        ctx.save();
        ctx.translate(184.048583984375 * scale, 69.1805419921875 * scale);
        round_rect(ctx, -40 * scale, -28.5 * scale, 80 * scale, 57 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(185.048583984375 * scale, 61.6805419921875 * scale);
        ctx.bezierCurveTo(145.048583984375 * scale, 59.6805419921875 * scale, 138.048583984375 * scale, 41.6805419921875 * scale, 148.048583984375 * scale, 33.6805419921875 * scale);
        ctx.bezierCurveTo(169.048583984375 * scale, 17.6805419921875 * scale, 194.048583984375 * scale, 20.6805419921875 * scale, 210.048583984375 * scale, 27.6805419921875 * scale);
        ctx.bezierCurveTo(234.048583984375 * scale, 40.6805419921875 * scale, 225.048583984375 * scale, 57.6805419921875 * scale, 186.048583984375 * scale, 61.6805419921875 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(224.048583984375 * scale, 56.6805419921875 * scale);
        ctx.bezierCurveTo(326.048583984375 * scale, 69.6805419921875 * scale, 363.048583984375 * scale, 148.6805419921875 * scale, 349.048583984375 * scale, 206.6805419921875 * scale);
        ctx.bezierCurveTo(329.048583984375 * scale, 278.6805419921875 * scale, 252.048583984375 * scale, 283.6805419921875 * scale, 206.048583984375 * scale, 275.6805419921875 * scale);
        ctx.bezierCurveTo(206.548583984375 * scale, 266.6805419921875 * scale, 206.548583984375 * scale, 266.6805419921875 * scale, 207.048583984375 * scale, 257.6805419921875 * scale);
        ctx.bezierCurveTo(276.048583984375 * scale, 268.6805419921875 * scale, 308.048583984375 * scale, 239.6805419921875 * scale, 323.048583984375 * scale, 208.6805419921875 * scale);
        ctx.bezierCurveTo(352.048583984375 * scale, 145.6805419921875 * scale, 292.048583984375 * scale, 86.6805419921875 * scale, 223.048583984375 * scale, 74.6805419921875 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 6 * scale);
        ctx.save();
        ctx.translate(183.548583984375 * scale, 119.6805419921875 * scale);
        round_rect(ctx, -121.5 * scale, -45 * scale, 243 * scale, 90 * scale, 40 * scale);
        ctx.restore();
        fill_path(ctx, color[0], color[0], 6 * scale);
        ctx.save();
        ctx.translate(183.048583984375 * scale, 155.6805419921875 * scale);
        round_rect(ctx, -121 * scale, -52 * scale, 242 * scale, 104 * scale, 40 * scale);
        ctx.restore();
        fill_path(ctx, color[0], color[0], 6 * scale);
        ctx.save();
        ctx.translate(183.048583984375 * scale, 205.1805419921875 * scale);
        round_rect(ctx, -121 * scale, -50.5 * scale, 242 * scale, 101 * scale, 40 * scale);
        ctx.restore();
        fill_path(ctx, color[0], color[0], 6 * scale);
        ctx.save();
        ctx.translate(185.048583984375 * scale, 204.1805419921875 * scale);
        round_rect(ctx, -100 * scale, -34.5 * scale, 200 * scale, 69 * scale, 40 * scale);
        ctx.restore();
        fill_path(ctx, color[0], color[0], 6 * scale);
        circle(ctx, 185.048583984375 * scale, 257.6805419921875 * scale, 27.018512172212592 * scale);
        fill_path(ctx, color[0], color[0], 6 * scale);
        ctx.globalAlpha = 1;
        ctx.translate(-5 * scale, -5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(224.048583984375 * scale, 56.6805419921875 * scale);
        ctx.bezierCurveTo(326.048583984375 * scale, 69.6805419921875 * scale, 363.048583984375 * scale, 148.6805419921875 * scale, 349.048583984375 * scale, 206.6805419921875 * scale);
        ctx.bezierCurveTo(329.048583984375 * scale, 278.6805419921875 * scale, 252.048583984375 * scale, 283.6805419921875 * scale, 206.048583984375 * scale, 275.6805419921875 * scale);
        ctx.bezierCurveTo(206.548583984375 * scale, 266.6805419921875 * scale, 206.548583984375 * scale, 266.6805419921875 * scale, 207.048583984375 * scale, 257.6805419921875 * scale);
        ctx.bezierCurveTo(276.048583984375 * scale, 268.6805419921875 * scale, 308.048583984375 * scale, 239.6805419921875 * scale, 323.048583984375 * scale, 208.6805419921875 * scale);
        ctx.bezierCurveTo(352.048583984375 * scale, 145.6805419921875 * scale, 292.048583984375 * scale, 86.6805419921875 * scale, 223.048583984375 * scale, 74.6805419921875 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 6 * scale);
        ctx.save();
        ctx.translate(184.048583984375 * scale, 69.1805419921875 * scale);
        round_rect(ctx, -40 * scale, -28.5 * scale, 80 * scale, 57 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(185.048583984375 * scale, 61.6805419921875 * scale);
        ctx.bezierCurveTo(145.048583984375 * scale, 59.6805419921875 * scale, 138.048583984375 * scale, 41.6805419921875 * scale, 148.048583984375 * scale, 33.6805419921875 * scale);
        ctx.bezierCurveTo(169.048583984375 * scale, 17.6805419921875 * scale, 194.048583984375 * scale, 20.6805419921875 * scale, 210.048583984375 * scale, 27.6805419921875 * scale);
        ctx.bezierCurveTo(234.048583984375 * scale, 40.6805419921875 * scale, 225.048583984375 * scale, 57.6805419921875 * scale, 186.048583984375 * scale, 61.6805419921875 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 6 * scale);
        ctx.save();
        ctx.translate(183.548583984375 * scale, 119.6805419921875 * scale);
        round_rect(ctx, -121.5 * scale, -45 * scale, 243 * scale, 90 * scale, 40 * scale);
        ctx.restore();
        fill_path(ctx, color[5], color[4], 6 * scale);
        ctx.save();
        ctx.translate(183.048583984375 * scale, 155.6805419921875 * scale);
        round_rect(ctx, -121 * scale, -52 * scale, 242 * scale, 104 * scale, 40 * scale);
        ctx.restore();
        fill_path(ctx, color[3], color[4], 6 * scale);
        ctx.save();
        ctx.translate(183.048583984375 * scale, 205.1805419921875 * scale);
        round_rect(ctx, -121 * scale, -50.5 * scale, 242 * scale, 101 * scale, 40 * scale);
        ctx.restore();
        fill_path(ctx, color[6], color[4], 6 * scale);
        ctx.globalCompositeOperation = "destination-out";
        ctx.save();
        ctx.translate(185.048583984375 * scale, 204.1805419921875 * scale);
        round_rect(ctx, -100 * scale, -34.5 * scale, 200 * scale, 69 * scale, 40 * scale);
        ctx.restore();
        fill_path(ctx, color[7], color[8], 6 * scale);
        ctx.globalCompositeOperation = "source-over";
        ctx.globalAlpha = 0.5;
        ctx.save();
        ctx.translate(185.048583984375 * scale, 204.1805419921875 * scale);
        round_rect(ctx, -100 * scale, -34.5 * scale, 200 * scale, 69 * scale, 40 * scale);
        ctx.restore();
        fill_path(ctx, color[7], color[8], 6 * scale);
        ctx.globalAlpha = 1;
        ctx.save();
        circle(ctx, 185.048583984375 * scale, 257.6805419921875 * scale, 27.018512172212592 * scale);
        fill_path(ctx, color[3], color[4], 6 * scale);
        ctx.restore();
        return can;
    };

    function create_superdivingsuit(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 220 * scale;
        can.height = 180 * scale;
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(-90 * scale, -150 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(104 * scale, 237.8000030517578 * scale);
        ctx.bezierCurveTo(110 * scale, 237.8000030517578 * scale, 110 * scale, 237.8000030517578 * scale, 116 * scale, 237.8000030517578 * scale);
        ctx.bezierCurveTo(116 * scale, 241.8000030517578 * scale, 116 * scale, 241.8000030517578 * scale, 116 * scale, 245.8000030517578 * scale);
        ctx.bezierCurveTo(115 * scale, 245.3000030517578 * scale, 115 * scale, 245.3000030517578 * scale, 114 * scale, 244.8000030517578 * scale);
        ctx.bezierCurveTo(109.5 * scale, 244.8000030517578 * scale, 109.5 * scale, 244.8000030517578 * scale, 105 * scale, 244.8000030517578 * scale);
        ctx.closePath();
        fill_path(ctx, color[5], color[5], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(115 * scale, 211.20000457763672 * scale);
        ctx.bezierCurveTo(106 * scale, 216.20000457763672 * scale, 101 * scale, 234.20000457763672 * scale, 102 * scale, 241.20000457763672 * scale);
        ctx.bezierCurveTo(102 * scale, 260.2000045776367 * scale, 115 * scale, 269.2000045776367 * scale, 115 * scale, 269.2000045776367 * scale);
        ctx.bezierCurveTo(116 * scale, 265.2000045776367 * scale, 115.5 * scale, 265.2000045776367 * scale, 116 * scale, 261.2000045776367 * scale);
        ctx.bezierCurveTo(112 * scale, 264 * scale, 108 * scale, 254 * scale, 106 * scale, 242 * scale);
        ctx.bezierCurveTo(105 * scale, 232 * scale, 110 * scale, 222 * scale, 115 * scale, 218 * scale);
        ctx.bezierCurveTo(116 * scale, 216.75 * scale, 115.5 * scale, 217.375 * scale, 116 * scale, 216.75 * scale);
        ctx.closePath();
        fill_path(ctx, color[5], color[5], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(120 * scale, 207 * scale);
        ctx.bezierCurveTo(115 * scale, 206 * scale, 114 * scale, 209 * scale, 114 * scale, 211 * scale);
        ctx.bezierCurveTo(114 * scale, 268 * scale, 114 * scale, 241 * scale, 114 * scale, 271 * scale);
        ctx.bezierCurveTo(115 * scale, 276 * scale, 118 * scale, 276 * scale, 120 * scale, 276 * scale);
        ctx.bezierCurveTo(122 * scale, 273 * scale, 120.5 * scale, 274.5 * scale, 121 * scale, 273 * scale);
        ctx.bezierCurveTo(121 * scale, 241 * scale, 121 * scale, 241 * scale, 121 * scale, 209 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[4], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(284 * scale, 238 * scale);
        ctx.bezierCurveTo(289.5 * scale, 238 * scale, 289.5 * scale, 238 * scale, 295 * scale, 238 * scale);
        ctx.bezierCurveTo(295 * scale, 241.5 * scale, 295 * scale, 241.5 * scale, 295 * scale, 245 * scale);
        ctx.bezierCurveTo(289.5 * scale, 245 * scale, 289.5 * scale, 245 * scale, 284 * scale, 245 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[4], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(283 * scale, 211 * scale);
        ctx.bezierCurveTo(293 * scale, 216 * scale, 297 * scale, 231 * scale, 297 * scale, 241 * scale);
        ctx.bezierCurveTo(298 * scale, 254 * scale, 290 * scale, 265 * scale, 284 * scale, 269 * scale);
        ctx.bezierCurveTo(283 * scale, 266 * scale, 283.5 * scale, 266 * scale, 283 * scale, 263 * scale);
        ctx.bezierCurveTo(290 * scale, 260 * scale, 292 * scale, 251 * scale, 293 * scale, 242 * scale);
        ctx.bezierCurveTo(292 * scale, 223 * scale, 289 * scale, 224 * scale, 284 * scale, 218 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[4], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(280 * scale, 206 * scale);
        ctx.bezierCurveTo(284 * scale, 206 * scale, 285 * scale, 208 * scale, 285 * scale, 211 * scale);
        ctx.bezierCurveTo(285 * scale, 241.5 * scale, 285 * scale, 241.5 * scale, 285 * scale, 272 * scale);
        ctx.bezierCurveTo(284 * scale, 275 * scale, 284 * scale, 275 * scale, 280 * scale, 275 * scale);
        ctx.bezierCurveTo(279 * scale, 273.5 * scale, 279 * scale, 273.5 * scale, 278 * scale, 272 * scale);
        ctx.bezierCurveTo(278 * scale, 240.5 * scale, 278 * scale, 240.5 * scale, 278 * scale, 209 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[4], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(138 * scale, 298.40000915527344 * scale);
        ctx.bezierCurveTo(141 * scale, 311.40000915527344 * scale, 151 * scale, 314.40000915527344 * scale, 162 * scale, 316.40000915527344 * scale);
        ctx.bezierCurveTo(224 * scale, 316.40000915527344 * scale, 200 * scale, 315.90000915527344 * scale, 238 * scale, 315.40000915527344 * scale);
        ctx.bezierCurveTo(254 * scale, 316.40000915527344 * scale, 261 * scale, 306.40000915527344 * scale, 264 * scale, 298.40000915527344 * scale);
        ctx.bezierCurveTo(255 * scale, 304.40000915527344 * scale, 250 * scale, 306.40000915527344 * scale, 244 * scale, 306.40000915527344 * scale);
        ctx.bezierCurveTo(201 * scale, 306.90000915527344 * scale, 201 * scale, 306.90000915527344 * scale, 158 * scale, 307.40000915527344 * scale);
        ctx.bezierCurveTo(150 * scale, 306.40000915527344 * scale, 148 * scale, 306.40000915527344 * scale, 139 * scale, 300.40000915527344 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[4], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(161 * scale, 177.5999984741211 * scale);
        ctx.bezierCurveTo(130 * scale, 175.5999984741211 * scale, 123 * scale, 190.5999984741211 * scale, 122 * scale, 205.5999984741211 * scale);
        ctx.bezierCurveTo(121 * scale, 277.5999984741211 * scale, 122 * scale, 242.5999984741211 * scale, 122 * scale, 279.5999984741211 * scale);
        ctx.bezierCurveTo(128 * scale, 297.5999984741211 * scale, 137 * scale, 299.5999984741211 * scale, 143 * scale, 300.5999984741211 * scale);
        ctx.bezierCurveTo(163 * scale, 301.0999984741211 * scale, 163 * scale, 301.0999984741211 * scale, 183 * scale, 301.5999984741211 * scale);
        ctx.bezierCurveTo(150 * scale, 300.5999984741211 * scale, 135 * scale, 290.5999984741211 * scale, 134 * scale, 267.5999984741211 * scale);
        ctx.bezierCurveTo(133 * scale, 245.5999984741211 * scale, 146 * scale, 235.5999984741211 * scale, 164 * scale, 235.5999984741211 * scale);
        ctx.bezierCurveTo(206 * scale, 236.0999984741211 * scale, 206 * scale, 236.0999984741211 * scale, 248 * scale, 236.5999984741211 * scale);
        ctx.bezierCurveTo(266 * scale, 243.5999984741211 * scale, 268 * scale, 259.5999984741211 * scale, 267 * scale, 266.5999984741211 * scale);
        ctx.bezierCurveTo(266 * scale, 288.5999984741211 * scale, 251 * scale, 294.5999984741211 * scale, 244 * scale, 297.5999984741211 * scale);
        ctx.bezierCurveTo(228.5 * scale, 299.5999984741211 * scale, 228.5 * scale, 299.5999984741211 * scale, 213 * scale, 301.5999984741211 * scale);
        ctx.bezierCurveTo(236 * scale, 301.0999984741211 * scale, 236 * scale, 301.0999984741211 * scale, 259 * scale, 300.5999984741211 * scale);
        ctx.bezierCurveTo(272 * scale, 295.5999984741211 * scale, 277 * scale, 288.5999984741211 * scale, 278 * scale, 271.5999984741211 * scale);
        ctx.bezierCurveTo(277.5 * scale, 236.5999984741211 * scale, 277.5 * scale, 236.5999984741211 * scale, 277 * scale, 201.5999984741211 * scale);
        ctx.bezierCurveTo(276 * scale, 186.5999984741211 * scale, 265 * scale, 178.5999984741211 * scale, 254 * scale, 177.5999984741211 * scale);
        ctx.bezierCurveTo(247.5 * scale, 177.5999984741211 * scale, 247.5 * scale, 177.5999984741211 * scale, 241 * scale, 177.5999984741211 * scale);
        ctx.bezierCurveTo(255 * scale, 202.5999984741211 * scale, 214 * scale, 217.5999984741211 * scale, 201 * scale, 215.5999984741211 * scale);
        ctx.bezierCurveTo(170 * scale, 215.5999984741211 * scale, 152 * scale, 197.5999984741211 * scale, 161 * scale, 178.5999984741211 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[4], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(162 * scale, 175.5999984741211 * scale);
        ctx.bezierCurveTo(153 * scale, 176.0999984741211 * scale, 153 * scale, 176.0999984741211 * scale, 144 * scale, 176.5999984741211 * scale);
        ctx.bezierCurveTo(125 * scale, 178.5999984741211 * scale, 121 * scale, 196.5999984741211 * scale, 121 * scale, 207.5999984741211 * scale);
        ctx.bezierCurveTo(121 * scale, 243.20000076293945 * scale, 121 * scale, 243.20000076293945 * scale, 121 * scale, 278.8000030517578 * scale);
        ctx.bezierCurveTo(126 * scale, 298.8000030517578 * scale, 137 * scale, 300.8000030517578 * scale, 146 * scale, 302.8000030517578 * scale);
        ctx.bezierCurveTo(200.5 * scale, 302.8000030517578 * scale, 200.5 * scale, 302.8000030517578 * scale, 255 * scale, 302.8000030517578 * scale);
        ctx.bezierCurveTo(271 * scale, 301.8000030517578 * scale, 279 * scale, 288.8000030517578 * scale, 279 * scale, 273.8000030517578 * scale);
        ctx.bezierCurveTo(279 * scale, 236.8000030517578 * scale, 279 * scale, 236.8000030517578 * scale, 279 * scale, 199.8000030517578 * scale);
        ctx.bezierCurveTo(274 * scale, 178.8000030517578 * scale, 263 * scale, 177.8000030517578 * scale, 255 * scale, 175.8000030517578 * scale);
        ctx.bezierCurveTo(248 * scale, 175.8000030517578 * scale, 248 * scale, 175.8000030517578 * scale, 241 * scale, 175.8000030517578 * scale);
        ctx.bezierCurveTo(240 * scale, 175.8000030517578 * scale, 240 * scale, 175.8000030517578 * scale, 239 * scale, 175.8000030517578 * scale);
        ctx.bezierCurveTo(254 * scale, 200.8000030517578 * scale, 222 * scale, 211.8000030517578 * scale, 202 * scale, 212.8000030517578 * scale);
        ctx.bezierCurveTo(168 * scale, 213.8000030517578 * scale, 151 * scale, 190.8000030517578 * scale, 163 * scale, 176.8000030517578 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[4], 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(198 * scale, 161.4000015258789 * scale);
        ctx.bezierCurveTo(198 * scale, 186.9000015258789 * scale, 198 * scale, 186.9000015258789 * scale, 198 * scale, 212.4000015258789 * scale);
        ctx.bezierCurveTo(201 * scale, 212.4000015258789 * scale, 201 * scale, 212.4000015258789 * scale, 204 * scale, 212.4000015258789 * scale);
        ctx.bezierCurveTo(204 * scale, 186.9000015258789 * scale, 204 * scale, 186.9000015258789 * scale, 204 * scale, 161.4000015258789 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[4], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(161 * scale, 194 * scale);
        ctx.bezierCurveTo(188 * scale, 169 * scale, 231 * scale, 179 * scale, 241 * scale, 194 * scale);
        ctx.bezierCurveTo(239.5 * scale, 196 * scale, 239.5 * scale, 196 * scale, 238 * scale, 198 * scale);
        ctx.bezierCurveTo(221 * scale, 179 * scale, 182 * scale, 182 * scale, 165 * scale, 198 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[4], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(157 * scale, 188.80000019073486 * scale);
        ctx.bezierCurveTo(162 * scale, 150.80000019073486 * scale, 241 * scale, 150.80000019073486 * scale, 245 * scale, 188.80000019073486 * scale);
        ctx.bezierCurveTo(242 * scale, 224.80000019073486 * scale, 162 * scale, 228.80000019073486 * scale, 157 * scale, 188.80000019073486 * scale);
        ctx.bezierCurveTo(159 * scale, 188.80000019073486 * scale, 159 * scale, 188.80000019073486 * scale, 161 * scale, 188.80000019073486 * scale);
        ctx.bezierCurveTo(168 * scale, 216.80000019073486 * scale, 231 * scale, 218.80000019073486 * scale, 241 * scale, 188.80000019073486 * scale);
        ctx.bezierCurveTo(236 * scale, 156.80000019073486 * scale, 169 * scale, 152.80000019073486 * scale, 161 * scale, 188.80000019073486 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[4], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(156 * scale, 188 * scale);
        ctx.bezierCurveTo(160 * scale, 164 * scale, 183 * scale, 159 * scale, 201 * scale, 158 * scale);
        ctx.bezierCurveTo(232 * scale, 159 * scale, 244 * scale, 174 * scale, 246 * scale, 188 * scale);
        ctx.bezierCurveTo(245 * scale, 212 * scale, 213 * scale, 219 * scale, 201 * scale, 218 * scale);
        ctx.bezierCurveTo(181 * scale, 221 * scale, 158 * scale, 207 * scale, 156 * scale, 190 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[4], 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(162 * scale, 189 * scale);
        ctx.bezierCurveTo(166 * scale, 170 * scale, 185 * scale, 165 * scale, 201 * scale, 164 * scale);
        ctx.bezierCurveTo(227 * scale, 165 * scale, 240 * scale, 178 * scale, 239 * scale, 188 * scale);
        ctx.bezierCurveTo(239 * scale, 204 * scale, 210 * scale, 210 * scale, 201 * scale, 210 * scale);
        ctx.bezierCurveTo(182 * scale, 211 * scale, 166 * scale, 200 * scale, 162 * scale, 190 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[4], 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(131 * scale, 262 * scale);
        ctx.bezierCurveTo(136 * scale, 241 * scale, 144 * scale, 236 * scale, 158 * scale, 233 * scale);
        ctx.bezierCurveTo(200.5 * scale, 233 * scale, 229 * scale, 232 * scale, 243 * scale, 233 * scale);
        ctx.bezierCurveTo(259 * scale, 235 * scale, 267 * scale, 248 * scale, 269 * scale, 260 * scale);
        ctx.bezierCurveTo(269 * scale, 266.5 * scale, 269 * scale, 266.5 * scale, 269 * scale, 273 * scale);
        ctx.bezierCurveTo(265 * scale, 290 * scale, 251 * scale, 297 * scale, 242 * scale, 298 * scale);
        ctx.bezierCurveTo(202 * scale, 298 * scale, 202 * scale, 298 * scale, 162 * scale, 298 * scale);
        ctx.bezierCurveTo(148 * scale, 298 * scale, 136 * scale, 289 * scale, 132 * scale, 273 * scale);
        ctx.bezierCurveTo(131.5 * scale, 268 * scale, 131.5 * scale, 268 * scale, 131 * scale, 263 * scale);
        ctx.bezierCurveTo(135 * scale, 263 * scale, 135 * scale, 263 * scale, 139 * scale, 263 * scale);
        ctx.bezierCurveTo(139 * scale, 281 * scale, 151 * scale, 287 * scale, 160 * scale, 290 * scale);
        ctx.bezierCurveTo(200.5 * scale, 290 * scale, 200.5 * scale, 290 * scale, 241 * scale, 290 * scale);
        ctx.bezierCurveTo(252 * scale, 290 * scale, 257 * scale, 281 * scale, 262 * scale, 271 * scale);
        ctx.bezierCurveTo(261.5 * scale, 267 * scale, 261.5 * scale, 267 * scale, 261 * scale, 263 * scale);
        ctx.bezierCurveTo(260 * scale, 249 * scale, 251 * scale, 242 * scale, 241 * scale, 241 * scale);
        ctx.bezierCurveTo(240.5 * scale, 240.5 * scale, 240.5 * scale, 240.5 * scale, 240 * scale, 240 * scale);
        ctx.bezierCurveTo(200 * scale, 240 * scale, 200 * scale, 240 * scale, 160 * scale, 240 * scale);
        ctx.bezierCurveTo(145 * scale, 244 * scale, 142 * scale, 250 * scale, 139 * scale, 264 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[4], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(130 * scale, 264 * scale);
        ctx.bezierCurveTo(132 * scale, 244 * scale, 144 * scale, 235 * scale, 157 * scale, 232 * scale);
        ctx.bezierCurveTo(245 * scale, 232 * scale, 201 * scale, 232 * scale, 245 * scale, 232 * scale);
        ctx.bezierCurveTo(264 * scale, 235 * scale, 269 * scale, 251 * scale, 270 * scale, 264 * scale);
        ctx.bezierCurveTo(272 * scale, 291 * scale, 248 * scale, 299 * scale, 242 * scale, 299 * scale);
        ctx.bezierCurveTo(200 * scale, 299 * scale, 200 * scale, 299 * scale, 158 * scale, 299 * scale);
        ctx.bezierCurveTo(139 * scale, 298 * scale, 130 * scale, 276 * scale, 130 * scale, 265 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[4], 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(140 * scale, 265.33333587646484 * scale);
        ctx.bezierCurveTo(141 * scale, 250.33333587646484 * scale, 148 * scale, 244.33333587646484 * scale, 160 * scale, 241.33333587646484 * scale);
        ctx.bezierCurveTo(200 * scale, 241.33333587646484 * scale, 200 * scale, 241.33333587646484 * scale, 240 * scale, 241.33333587646484 * scale);
        ctx.bezierCurveTo(256 * scale, 243.33333587646484 * scale, 260 * scale, 255.33333587646484 * scale, 260 * scale, 265.33333587646484 * scale);
        ctx.bezierCurveTo(261 * scale, 281.33333587646484 * scale, 247 * scale, 289.33333587646484 * scale, 240 * scale, 289.33333587646484 * scale);
        ctx.bezierCurveTo(161 * scale, 289.33333587646484 * scale, 200.5 * scale, 289.33333587646484 * scale, 161 * scale, 289.33333587646484 * scale);
        ctx.bezierCurveTo(149 * scale, 288.33333587646484 * scale, 142 * scale, 278.33333587646484 * scale, 140 * scale, 266.33333587646484 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[4], 6 * scale);
        ctx.globalAlpha = 0.5;
        ctx.scale(1, 1);
        ctx.translate(105 * scale, 155 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(59.27557373046875 * scale, 20.406280517578125 * scale);
        ctx.bezierCurveTo(74.27557373046875 * scale, 5.406280517578125 * scale, 90.27557373046875 * scale, 6.406280517578125 * scale, 99.27557373046875 * scale, 5.406280517578125 * scale);
        ctx.bezierCurveTo(120.27557373046875 * scale, 5.406280517578125 * scale, 126.27557373046875 * scale, 10.406280517578125 * scale, 136.27557373046875 * scale, 20.406280517578125 * scale);
        ctx.bezierCurveTo(157.77557373046875 * scale, 37.906280517578125 * scale, 157.77557373046875 * scale, 37.906280517578125 * scale, 179.27557373046875 * scale, 55.406280517578125 * scale);
        ctx.bezierCurveTo(190.27557373046875 * scale, 63.406280517578125 * scale, 192.27557373046875 * scale, 77.40628051757812 * scale, 189.27557373046875 * scale, 91.40628051757812 * scale);
        ctx.bezierCurveTo(183.27557373046875 * scale, 108.40628051757812 * scale, 176.27557373046875 * scale, 110.40628051757812 * scale, 169.27557373046875 * scale, 118.40628051757812 * scale);
        ctx.bezierCurveTo(152.27557373046875 * scale, 133.40628051757812 * scale, 152.27557373046875 * scale, 133.40628051757812 * scale, 135.27557373046875 * scale, 148.40628051757812 * scale);
        ctx.bezierCurveTo(87.27557373046875 * scale, 143.40628051757812 * scale, 87.27557373046875 * scale, 143.40628051757812 * scale, 39.27557373046875 * scale, 138.40628051757812 * scale);
        ctx.bezierCurveTo(26.77557373046875 * scale, 123.40628051757812 * scale, 26.77557373046875 * scale, 123.40628051757812 * scale, 14.27557373046875 * scale, 108.40628051757812 * scale);
        ctx.bezierCurveTo(2.27557373046875 * scale, 95.40628051757812 * scale, 2.27557373046875 * scale, 92.40628051757812 * scale, 3.27557373046875 * scale, 83.40628051757812 * scale);
        ctx.bezierCurveTo(4.27557373046875 * scale, 63.406280517578125 * scale, 12.27557373046875 * scale, 60.406280517578125 * scale, 24.27557373046875 * scale, 40.406280517578125 * scale);
        ctx.closePath();
        fill_path(ctx, color[5], color[5], 4 * scale);
        ctx.globalAlpha = 1;
        ctx.translate(-110 * scale, -155 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(104 * scale, 237.8000030517578 * scale);
        ctx.bezierCurveTo(110 * scale, 237.8000030517578 * scale, 110 * scale, 237.8000030517578 * scale, 116 * scale, 237.8000030517578 * scale);
        ctx.bezierCurveTo(116 * scale, 241.8000030517578 * scale, 116 * scale, 241.8000030517578 * scale, 116 * scale, 245.8000030517578 * scale);
        ctx.bezierCurveTo(115 * scale, 245.3000030517578 * scale, 115 * scale, 245.3000030517578 * scale, 114 * scale, 244.8000030517578 * scale);
        ctx.bezierCurveTo(109.5 * scale, 244.8000030517578 * scale, 109.5 * scale, 244.8000030517578 * scale, 105 * scale, 244.8000030517578 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[1], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(115 * scale, 211.20000457763672 * scale);
        ctx.bezierCurveTo(106 * scale, 216.20000457763672 * scale, 101 * scale, 234.20000457763672 * scale, 102 * scale, 241.20000457763672 * scale);
        ctx.bezierCurveTo(102 * scale, 260.2000045776367 * scale, 115 * scale, 269.2000045776367 * scale, 115 * scale, 269.2000045776367 * scale);
        ctx.bezierCurveTo(116 * scale, 265.2000045776367 * scale, 115.5 * scale, 265.2000045776367 * scale, 116 * scale, 261.2000045776367 * scale);
        ctx.bezierCurveTo(112 * scale, 264 * scale, 108 * scale, 254 * scale, 106 * scale, 242 * scale);
        ctx.bezierCurveTo(105 * scale, 232 * scale, 110 * scale, 222 * scale, 115 * scale, 218 * scale);
        ctx.bezierCurveTo(116 * scale, 216.75 * scale, 115.5 * scale, 217.375 * scale, 116 * scale, 216.75 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[1], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(120 * scale, 207 * scale);
        ctx.bezierCurveTo(115 * scale, 206 * scale, 114 * scale, 209 * scale, 114 * scale, 211 * scale);
        ctx.bezierCurveTo(114 * scale, 268 * scale, 114 * scale, 241 * scale, 114 * scale, 271 * scale);
        ctx.bezierCurveTo(115 * scale, 276 * scale, 118 * scale, 276 * scale, 120 * scale, 276 * scale);
        ctx.bezierCurveTo(122 * scale, 273 * scale, 120.5 * scale, 274.5 * scale, 121 * scale, 273 * scale);
        ctx.bezierCurveTo(121 * scale, 241 * scale, 121 * scale, 241 * scale, 121 * scale, 209 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[1], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(284 * scale, 238 * scale);
        ctx.bezierCurveTo(289.5 * scale, 238 * scale, 289.5 * scale, 238 * scale, 295 * scale, 238 * scale);
        ctx.bezierCurveTo(295 * scale, 241.5 * scale, 295 * scale, 241.5 * scale, 295 * scale, 245 * scale);
        ctx.bezierCurveTo(289.5 * scale, 245 * scale, 289.5 * scale, 245 * scale, 284 * scale, 245 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[1], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(283 * scale, 211 * scale);
        ctx.bezierCurveTo(293 * scale, 216 * scale, 297 * scale, 231 * scale, 297 * scale, 241 * scale);
        ctx.bezierCurveTo(298 * scale, 254 * scale, 290 * scale, 265 * scale, 284 * scale, 269 * scale);
        ctx.bezierCurveTo(283 * scale, 266 * scale, 283.5 * scale, 266 * scale, 283 * scale, 263 * scale);
        ctx.bezierCurveTo(290 * scale, 260 * scale, 292 * scale, 251 * scale, 293 * scale, 242 * scale);
        ctx.bezierCurveTo(292 * scale, 223 * scale, 289 * scale, 224 * scale, 284 * scale, 218 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[1], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(280 * scale, 206 * scale);
        ctx.bezierCurveTo(284 * scale, 206 * scale, 285 * scale, 208 * scale, 285 * scale, 211 * scale);
        ctx.bezierCurveTo(285 * scale, 241.5 * scale, 285 * scale, 241.5 * scale, 285 * scale, 272 * scale);
        ctx.bezierCurveTo(284 * scale, 275 * scale, 284 * scale, 275 * scale, 280 * scale, 275 * scale);
        ctx.bezierCurveTo(279 * scale, 273.5 * scale, 279 * scale, 273.5 * scale, 278 * scale, 272 * scale);
        ctx.bezierCurveTo(278 * scale, 240.5 * scale, 278 * scale, 240.5 * scale, 278 * scale, 209 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[1], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(138 * scale, 298.40000915527344 * scale);
        ctx.bezierCurveTo(141 * scale, 311.40000915527344 * scale, 151 * scale, 314.40000915527344 * scale, 162 * scale, 316.40000915527344 * scale);
        ctx.bezierCurveTo(224 * scale, 316.40000915527344 * scale, 200 * scale, 315.90000915527344 * scale, 238 * scale, 315.40000915527344 * scale);
        ctx.bezierCurveTo(254 * scale, 316.40000915527344 * scale, 261 * scale, 306.40000915527344 * scale, 264 * scale, 298.40000915527344 * scale);
        ctx.bezierCurveTo(255 * scale, 304.40000915527344 * scale, 250 * scale, 306.40000915527344 * scale, 244 * scale, 306.40000915527344 * scale);
        ctx.bezierCurveTo(201 * scale, 306.90000915527344 * scale, 201 * scale, 306.90000915527344 * scale, 158 * scale, 307.40000915527344 * scale);
        ctx.bezierCurveTo(150 * scale, 306.40000915527344 * scale, 148 * scale, 306.40000915527344 * scale, 139 * scale, 300.40000915527344 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[1], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(161 * scale, 177.5999984741211 * scale);
        ctx.bezierCurveTo(130 * scale, 175.5999984741211 * scale, 123 * scale, 190.5999984741211 * scale, 122 * scale, 205.5999984741211 * scale);
        ctx.bezierCurveTo(121 * scale, 277.5999984741211 * scale, 122 * scale, 242.5999984741211 * scale, 122 * scale, 279.5999984741211 * scale);
        ctx.bezierCurveTo(128 * scale, 297.5999984741211 * scale, 137 * scale, 299.5999984741211 * scale, 143 * scale, 300.5999984741211 * scale);
        ctx.bezierCurveTo(163 * scale, 301.0999984741211 * scale, 163 * scale, 301.0999984741211 * scale, 183 * scale, 301.5999984741211 * scale);
        ctx.bezierCurveTo(150 * scale, 300.5999984741211 * scale, 135 * scale, 290.5999984741211 * scale, 134 * scale, 267.5999984741211 * scale);
        ctx.bezierCurveTo(133 * scale, 245.5999984741211 * scale, 146 * scale, 235.5999984741211 * scale, 164 * scale, 235.5999984741211 * scale);
        ctx.bezierCurveTo(206 * scale, 236.0999984741211 * scale, 206 * scale, 236.0999984741211 * scale, 248 * scale, 236.5999984741211 * scale);
        ctx.bezierCurveTo(266 * scale, 243.5999984741211 * scale, 268 * scale, 259.5999984741211 * scale, 267 * scale, 266.5999984741211 * scale);
        ctx.bezierCurveTo(266 * scale, 288.5999984741211 * scale, 251 * scale, 294.5999984741211 * scale, 244 * scale, 297.5999984741211 * scale);
        ctx.bezierCurveTo(228.5 * scale, 299.5999984741211 * scale, 228.5 * scale, 299.5999984741211 * scale, 213 * scale, 301.5999984741211 * scale);
        ctx.bezierCurveTo(236 * scale, 301.0999984741211 * scale, 236 * scale, 301.0999984741211 * scale, 259 * scale, 300.5999984741211 * scale);
        ctx.bezierCurveTo(272 * scale, 295.5999984741211 * scale, 277 * scale, 288.5999984741211 * scale, 278 * scale, 271.5999984741211 * scale);
        ctx.bezierCurveTo(277.5 * scale, 236.5999984741211 * scale, 277.5 * scale, 236.5999984741211 * scale, 277 * scale, 201.5999984741211 * scale);
        ctx.bezierCurveTo(276 * scale, 186.5999984741211 * scale, 265 * scale, 178.5999984741211 * scale, 254 * scale, 177.5999984741211 * scale);
        ctx.bezierCurveTo(247.5 * scale, 177.5999984741211 * scale, 247.5 * scale, 177.5999984741211 * scale, 241 * scale, 177.5999984741211 * scale);
        ctx.bezierCurveTo(255 * scale, 202.5999984741211 * scale, 214 * scale, 217.5999984741211 * scale, 201 * scale, 215.5999984741211 * scale);
        ctx.bezierCurveTo(170 * scale, 215.5999984741211 * scale, 152 * scale, 197.5999984741211 * scale, 161 * scale, 178.5999984741211 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(162 * scale, 175.5999984741211 * scale);
        ctx.bezierCurveTo(153 * scale, 176.0999984741211 * scale, 153 * scale, 176.0999984741211 * scale, 144 * scale, 176.5999984741211 * scale);
        ctx.bezierCurveTo(125 * scale, 178.5999984741211 * scale, 121 * scale, 196.5999984741211 * scale, 121 * scale, 207.5999984741211 * scale);
        ctx.bezierCurveTo(121 * scale, 243.20000076293945 * scale, 121 * scale, 243.20000076293945 * scale, 121 * scale, 278.8000030517578 * scale);
        ctx.bezierCurveTo(126 * scale, 298.8000030517578 * scale, 137 * scale, 300.8000030517578 * scale, 146 * scale, 302.8000030517578 * scale);
        ctx.bezierCurveTo(200.5 * scale, 302.8000030517578 * scale, 200.5 * scale, 302.8000030517578 * scale, 255 * scale, 302.8000030517578 * scale);
        ctx.bezierCurveTo(271 * scale, 301.8000030517578 * scale, 279 * scale, 288.8000030517578 * scale, 279 * scale, 273.8000030517578 * scale);
        ctx.bezierCurveTo(279 * scale, 236.8000030517578 * scale, 279 * scale, 236.8000030517578 * scale, 279 * scale, 199.8000030517578 * scale);
        ctx.bezierCurveTo(274 * scale, 178.8000030517578 * scale, 263 * scale, 177.8000030517578 * scale, 255 * scale, 175.8000030517578 * scale);
        ctx.bezierCurveTo(248 * scale, 175.8000030517578 * scale, 248 * scale, 175.8000030517578 * scale, 241 * scale, 175.8000030517578 * scale);
        ctx.bezierCurveTo(240 * scale, 175.8000030517578 * scale, 240 * scale, 175.8000030517578 * scale, 239 * scale, 175.8000030517578 * scale);
        ctx.bezierCurveTo(254 * scale, 200.8000030517578 * scale, 222 * scale, 211.8000030517578 * scale, 202 * scale, 212.8000030517578 * scale);
        ctx.bezierCurveTo(168 * scale, 213.8000030517578 * scale, 151 * scale, 190.8000030517578 * scale, 163 * scale, 176.8000030517578 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[3], 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(198 * scale, 161.4000015258789 * scale);
        ctx.bezierCurveTo(198 * scale, 186.9000015258789 * scale, 198 * scale, 186.9000015258789 * scale, 198 * scale, 212.4000015258789 * scale);
        ctx.bezierCurveTo(201 * scale, 212.4000015258789 * scale, 201 * scale, 212.4000015258789 * scale, 204 * scale, 212.4000015258789 * scale);
        ctx.bezierCurveTo(204 * scale, 186.9000015258789 * scale, 204 * scale, 186.9000015258789 * scale, 204 * scale, 161.4000015258789 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[1], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(161 * scale, 194 * scale);
        ctx.bezierCurveTo(188 * scale, 169 * scale, 231 * scale, 179 * scale, 241 * scale, 194 * scale);
        ctx.bezierCurveTo(239.5 * scale, 196 * scale, 239.5 * scale, 196 * scale, 238 * scale, 198 * scale);
        ctx.bezierCurveTo(221 * scale, 179 * scale, 182 * scale, 182 * scale, 165 * scale, 198 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[1], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(157 * scale, 188.80000019073486 * scale);
        ctx.bezierCurveTo(162 * scale, 150.80000019073486 * scale, 241 * scale, 150.80000019073486 * scale, 245 * scale, 188.80000019073486 * scale);
        ctx.bezierCurveTo(242 * scale, 224.80000019073486 * scale, 162 * scale, 228.80000019073486 * scale, 157 * scale, 188.80000019073486 * scale);
        ctx.bezierCurveTo(159 * scale, 188.80000019073486 * scale, 159 * scale, 188.80000019073486 * scale, 161 * scale, 188.80000019073486 * scale);
        ctx.bezierCurveTo(168 * scale, 216.80000019073486 * scale, 231 * scale, 218.80000019073486 * scale, 241 * scale, 188.80000019073486 * scale);
        ctx.bezierCurveTo(236 * scale, 156.80000019073486 * scale, 169 * scale, 152.80000019073486 * scale, 161 * scale, 188.80000019073486 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[1], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(156 * scale, 188 * scale);
        ctx.bezierCurveTo(160 * scale, 164 * scale, 183 * scale, 159 * scale, 201 * scale, 158 * scale);
        ctx.bezierCurveTo(232 * scale, 159 * scale, 244 * scale, 174 * scale, 246 * scale, 188 * scale);
        ctx.bezierCurveTo(245 * scale, 212 * scale, 213 * scale, 219 * scale, 201 * scale, 218 * scale);
        ctx.bezierCurveTo(181 * scale, 221 * scale, 158 * scale, 207 * scale, 156 * scale, 190 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[1], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(162 * scale, 189 * scale);
        ctx.bezierCurveTo(166 * scale, 170 * scale, 185 * scale, 165 * scale, 201 * scale, 164 * scale);
        ctx.bezierCurveTo(227 * scale, 165 * scale, 240 * scale, 178 * scale, 239 * scale, 188 * scale);
        ctx.bezierCurveTo(239 * scale, 204 * scale, 210 * scale, 210 * scale, 201 * scale, 210 * scale);
        ctx.bezierCurveTo(182 * scale, 211 * scale, 166 * scale, 200 * scale, 162 * scale, 190 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[1], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(131 * scale, 262 * scale);
        ctx.bezierCurveTo(136 * scale, 241 * scale, 144 * scale, 236 * scale, 158 * scale, 233 * scale);
        ctx.bezierCurveTo(200.5 * scale, 233 * scale, 229 * scale, 232 * scale, 243 * scale, 233 * scale);
        ctx.bezierCurveTo(259 * scale, 235 * scale, 267 * scale, 248 * scale, 269 * scale, 260 * scale);
        ctx.bezierCurveTo(269 * scale, 266.5 * scale, 269 * scale, 266.5 * scale, 269 * scale, 273 * scale);
        ctx.bezierCurveTo(265 * scale, 290 * scale, 251 * scale, 297 * scale, 242 * scale, 298 * scale);
        ctx.bezierCurveTo(202 * scale, 298 * scale, 202 * scale, 298 * scale, 162 * scale, 298 * scale);
        ctx.bezierCurveTo(148 * scale, 298 * scale, 136 * scale, 289 * scale, 132 * scale, 273 * scale);
        ctx.bezierCurveTo(131.5 * scale, 268 * scale, 131.5 * scale, 268 * scale, 131 * scale, 263 * scale);
        ctx.bezierCurveTo(135 * scale, 263 * scale, 135 * scale, 263 * scale, 139 * scale, 263 * scale);
        ctx.bezierCurveTo(139 * scale, 281 * scale, 151 * scale, 287 * scale, 160 * scale, 290 * scale);
        ctx.bezierCurveTo(200.5 * scale, 290 * scale, 200.5 * scale, 290 * scale, 241 * scale, 290 * scale);
        ctx.bezierCurveTo(252 * scale, 290 * scale, 257 * scale, 281 * scale, 262 * scale, 271 * scale);
        ctx.bezierCurveTo(261.5 * scale, 267 * scale, 261.5 * scale, 267 * scale, 261 * scale, 263 * scale);
        ctx.bezierCurveTo(260 * scale, 249 * scale, 251 * scale, 242 * scale, 241 * scale, 241 * scale);
        ctx.bezierCurveTo(240.5 * scale, 240.5 * scale, 240.5 * scale, 240.5 * scale, 240 * scale, 240 * scale);
        ctx.bezierCurveTo(200 * scale, 240 * scale, 200 * scale, 240 * scale, 160 * scale, 240 * scale);
        ctx.bezierCurveTo(145 * scale, 244 * scale, 142 * scale, 250 * scale, 139 * scale, 264 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(130 * scale, 264 * scale);
        ctx.bezierCurveTo(132 * scale, 244 * scale, 144 * scale, 235 * scale, 157 * scale, 232 * scale);
        ctx.bezierCurveTo(245 * scale, 232 * scale, 201 * scale, 232 * scale, 245 * scale, 232 * scale);
        ctx.bezierCurveTo(264 * scale, 235 * scale, 269 * scale, 251 * scale, 270 * scale, 264 * scale);
        ctx.bezierCurveTo(272 * scale, 291 * scale, 248 * scale, 299 * scale, 242 * scale, 299 * scale);
        ctx.bezierCurveTo(200 * scale, 299 * scale, 200 * scale, 299 * scale, 158 * scale, 299 * scale);
        ctx.bezierCurveTo(139 * scale, 298 * scale, 130 * scale, 276 * scale, 130 * scale, 265 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[1], 2 * scale);
        return can;
    };

    function create_windmill_chest(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 243 * scale;
        can.height = 172 * scale;
        circle(ctx, 119.5 * scale, 140.125 * scale, 19 * scale);
        fill_path(ctx, undefined, color[1], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(36.5 * scale, 20.125 * scale);
        ctx.bezierCurveTo(119.5 * scale, 20.625 * scale, 119.5 * scale, 20.625 * scale, 202.5 * scale, 21.125 * scale);
        ctx.bezierCurveTo(214.5 * scale, 22.125 * scale, 216.5 * scale, 26.125 * scale, 217.5 * scale, 35.125 * scale);
        ctx.bezierCurveTo(221 * scale, 76.125 * scale, 221 * scale, 76.125 * scale, 224.5 * scale, 117.125 * scale);
        ctx.bezierCurveTo(225.5 * scale, 127.125 * scale, 221.5 * scale, 131.125 * scale, 210.5 * scale, 132.125 * scale);
        ctx.bezierCurveTo(117.5 * scale, 132.125 * scale, 117.5 * scale, 132.125 * scale, 24.5 * scale, 132.125 * scale);
        ctx.bezierCurveTo(14.5 * scale, 131.125 * scale, 13.5 * scale, 126.125 * scale, 16.5 * scale, 111.125 * scale);
        ctx.bezierCurveTo(19.5 * scale, 73.125 * scale, 19.5 * scale, 73.125 * scale, 22.5 * scale, 35.125 * scale);
        ctx.bezierCurveTo(23.5 * scale, 23.125 * scale, 29.5 * scale, 21.125 * scale, 36.5 * scale, 20.125 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[1], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(15.5 * scale, 138.625 * scale);
        ctx.bezierCurveTo(120 * scale, 138.625 * scale, 120 * scale, 138.625 * scale, 224.5 * scale, 138.625 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[2], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(13.5 * scale, 131.625 * scale);
        ctx.bezierCurveTo(119.5 * scale, 131.625 * scale, 119.5 * scale, 131.625 * scale, 225.5 * scale, 131.625 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[3], 10 * scale);
        circle(ctx, 119.5 * scale, 140.125 * scale, 14.866068747318506 * scale);
        fill_path(ctx, color[4], color[5], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(106.5 * scale, 146.625 * scale);
        ctx.bezierCurveTo(116.5 * scale, 137.625 * scale, 118.5 * scale, 136.625 * scale, 123.5 * scale, 138.625 * scale);
        ctx.bezierCurveTo(131.5 * scale, 145.625 * scale, 133.5 * scale, 148.625 * scale, 127.5 * scale, 152.625 * scale);
        ctx.bezierCurveTo(115.5 * scale, 158.625 * scale, 111.5 * scale, 153.625 * scale, 106.5 * scale, 147.625 * scale);
        ctx.closePath();
        fill_path(ctx, color[6], color[7], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(105.5 * scale, 146.625 * scale);
        ctx.bezierCurveTo(116.5 * scale, 159.625 * scale, 124.5 * scale, 156.625 * scale, 132.5 * scale, 146.625 * scale);
        fill_path(ctx, undefined, color[8], 5 * scale);
        ctx.save();
        ctx.translate(75.5 * scale, 80.125 * scale);
        round_rect(ctx, -39 * scale, -40 * scale, 78 * scale, 78 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[9]);
        ctx.save();
        ctx.translate(167 * scale, 80.125 * scale);
        round_rect(ctx, -38.5 * scale, -39 * scale, 78 * scale, 78 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[9]);
        return can;
    };

    function create_cake(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 400 * scale;
        can.height = 400 * scale;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(96.5 * scale, 277.34375 * scale);
        ctx.bezierCurveTo(197.5 * scale, 259.84375 * scale, 197.5 * scale, 259.84375 * scale, 298.5 * scale, 242.34375 * scale);
        ctx.bezierCurveTo(311.5 * scale, 231.34375 * scale, 307.5 * scale, 168.34375 * scale, 298.5 * scale, 150.34375 * scale);
        ctx.bezierCurveTo(198 * scale, 170.34375 * scale, 198 * scale, 170.34375 * scale, 97.5 * scale, 190.34375 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(98.5 * scale, 214.34375 * scale);
        ctx.bezierCurveTo(199 * scale, 196.34375 * scale, 199 * scale, 196.34375 * scale, 299.5 * scale, 178.34375 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[2], 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(98.5 * scale, 247.34375 * scale);
        ctx.bezierCurveTo(201.5 * scale, 229.34375 * scale, 201.5 * scale, 229.34375 * scale, 304.5 * scale, 211.34375 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[2], 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(97.5 * scale, 189.34375 * scale);
        ctx.bezierCurveTo(97 * scale, 199.84375 * scale, 97 * scale, 199.84375 * scale, 96.5 * scale, 210.34375 * scale);
        ctx.bezierCurveTo(110.5 * scale, 204.34375 * scale, 110.5 * scale, 204.34375 * scale, 124.5 * scale, 198.34375 * scale);
        ctx.bezierCurveTo(137.5 * scale, 203.84375 * scale, 137.5 * scale, 203.84375 * scale, 150.5 * scale, 209.34375 * scale);
        ctx.bezierCurveTo(172 * scale, 197.84375 * scale, 172 * scale, 197.84375 * scale, 193.5 * scale, 186.34375 * scale);
        ctx.bezierCurveTo(211.5 * scale, 189.84375 * scale, 211.5 * scale, 189.84375 * scale, 229.5 * scale, 193.34375 * scale);
        ctx.bezierCurveTo(240.5 * scale, 193.34375 * scale, 240.5 * scale, 193.34375 * scale, 251.5 * scale, 193.34375 * scale);
        ctx.bezierCurveTo(261 * scale, 182.84375 * scale, 261 * scale, 182.84375 * scale, 270.5 * scale, 172.34375 * scale);
        ctx.bezierCurveTo(287.5 * scale, 169.34375 * scale, 287.5 * scale, 169.34375 * scale, 304.5 * scale, 166.34375 * scale);
        ctx.bezierCurveTo(304.5 * scale, 156.34375 * scale, 300.5 * scale, 145.34375 * scale, 298.5 * scale, 147.34375 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(300.5 * scale, 147.34375 * scale);
        ctx.bezierCurveTo(293.5 * scale, 121.34375 * scale, 278.5 * scale, 106.34375 * scale, 256.5 * scale, 101.34375 * scale);
        ctx.bezierCurveTo(176.5 * scale, 145.34375 * scale, 176.5 * scale, 145.34375 * scale, 96.5 * scale, 189.34375 * scale);
        ctx.closePath();
        fill_path(ctx, color[5], color[6], 12 * scale);
        circle(ctx, 252.5 * scale, 129.34375 * scale, 18.027756377319946 * scale);
        fill_path(ctx, color[7]);
        circle(ctx, 248.5 * scale, 121.34375 * scale, 8.246211251235321 * scale);
        fill_path(ctx, color[8]);
        return can;
    };

    function create_fishfood(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 400 * scale;
        can.height = 400 * scale;
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(10 * scale, 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(100.5 * scale, 126.34375 * scale);
        ctx.bezierCurveTo(151.5 * scale, 104.34375 * scale, 279.5 * scale, 188.34375 * scale, 297.5 * scale, 292.34375 * scale);
        ctx.bezierCurveTo(222.5 * scale, 307.34375 * scale, 106.5 * scale, 196.34375 * scale, 100.5 * scale, 127.34375 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(106.5 * scale, 131.34375 * scale);
        ctx.bezierCurveTo(140.5 * scale, 142.34375 * scale, 225.5 * scale, 184.34375 * scale, 290.5 * scale, 287.34375 * scale);
        ctx.bezierCurveTo(270.5 * scale, 188.34375 * scale, 152.5 * scale, 118.34375 * scale, 107.5 * scale, 131.34375 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(157.5 * scale, 137.34375 * scale);
        ctx.bezierCurveTo(161.5 * scale, 138.34375 * scale, 164.5 * scale, 140.34375 * scale, 168.5 * scale, 142.34375 * scale);
        ctx.bezierCurveTo(165.5 * scale, 156.34375 * scale, 141.5 * scale, 176.34375 * scale, 126.5 * scale, 179.34375 * scale);
        ctx.bezierCurveTo(123.5 * scale, 173.34375 * scale, 120.5 * scale, 169.34375 * scale, 120.5 * scale, 169.34375 * scale);
        ctx.bezierCurveTo(141.5 * scale, 161.34375 * scale, 156.5 * scale, 145.34375 * scale, 155.5 * scale, 136.34375 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(196.5 * scale, 151.34375 * scale);
        ctx.bezierCurveTo(211.5 * scale, 158.34375 * scale, 224.5 * scale, 171.34375 * scale, 229.5 * scale, 176.34375 * scale);
        ctx.bezierCurveTo(246.5 * scale, 163.34375 * scale, 259.5 * scale, 166.34375 * scale, 272.5 * scale, 168.34375 * scale);
        ctx.bezierCurveTo(254.5 * scale, 146.34375 * scale, 214.5 * scale, 145.34375 * scale, 198.5 * scale, 151.34375 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(154.5 * scale, 222.34375 * scale);
        ctx.bezierCurveTo(164.5 * scale, 234.34375 * scale, 173.5 * scale, 242.34375 * scale, 178.5 * scale, 245.34375 * scale);
        ctx.bezierCurveTo(174.5 * scale, 265.34375 * scale, 180.5 * scale, 274.34375 * scale, 186.5 * scale, 283.34375 * scale);
        ctx.bezierCurveTo(165.5 * scale, 277.34375 * scale, 151.5 * scale, 245.34375 * scale, 155.5 * scale, 224.34375 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(279.5 * scale, 294.34375 * scale);
        ctx.bezierCurveTo(286.5 * scale, 285.84375 * scale, 286.5 * scale, 285.84375 * scale, 293.5 * scale, 277.34375 * scale);
        ctx.bezierCurveTo(315.5 * scale, 280.34375 * scale, 315.5 * scale, 280.34375 * scale, 337.5 * scale, 283.34375 * scale);
        ctx.bezierCurveTo(340.5 * scale, 311.34375 * scale, 317.5 * scale, 326.34375 * scale, 307.5 * scale, 331.34375 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 12 * scale);
        ctx.globalAlpha = 1;
        ctx.translate(-10 * scale, -5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(100.5 * scale, 126.34375 * scale);
        ctx.bezierCurveTo(151.5 * scale, 104.34375 * scale, 279.5 * scale, 188.34375 * scale, 297.5 * scale, 292.34375 * scale);
        ctx.bezierCurveTo(222.5 * scale, 307.34375 * scale, 106.5 * scale, 196.34375 * scale, 100.5 * scale, 127.34375 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(106.5 * scale, 131.34375 * scale);
        ctx.bezierCurveTo(140.5 * scale, 142.34375 * scale, 225.5 * scale, 184.34375 * scale, 290.5 * scale, 287.34375 * scale);
        ctx.bezierCurveTo(270.5 * scale, 188.34375 * scale, 152.5 * scale, 118.34375 * scale, 107.5 * scale, 131.34375 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(157.5 * scale, 137.34375 * scale);
        ctx.bezierCurveTo(161.5 * scale, 138.34375 * scale, 164.5 * scale, 140.34375 * scale, 168.5 * scale, 142.34375 * scale);
        ctx.bezierCurveTo(165.5 * scale, 156.34375 * scale, 141.5 * scale, 176.34375 * scale, 126.5 * scale, 179.34375 * scale);
        ctx.bezierCurveTo(123.5 * scale, 173.34375 * scale, 120.5 * scale, 169.34375 * scale, 120.5 * scale, 169.34375 * scale);
        ctx.bezierCurveTo(141.5 * scale, 161.34375 * scale, 156.5 * scale, 145.34375 * scale, 155.5 * scale, 136.34375 * scale);
        ctx.closePath();
        fill_path(ctx, color[4]);
        circle(ctx, 125.5 * scale, 140.34375 * scale, 11.180339887498949 * scale);
        fill_path(ctx, color[5]);
        circle(ctx, 122.5 * scale, 135.34375 * scale, 5.0990195135927845 * scale);
        fill_path(ctx, color[6]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(196.5 * scale, 151.34375 * scale);
        ctx.bezierCurveTo(211.5 * scale, 158.34375 * scale, 224.5 * scale, 171.34375 * scale, 229.5 * scale, 176.34375 * scale);
        ctx.bezierCurveTo(246.5 * scale, 163.34375 * scale, 259.5 * scale, 166.34375 * scale, 272.5 * scale, 168.34375 * scale);
        ctx.bezierCurveTo(254.5 * scale, 146.34375 * scale, 214.5 * scale, 145.34375 * scale, 198.5 * scale, 151.34375 * scale);
        ctx.closePath();
        fill_path(ctx, color[7], color[8], 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(154.5 * scale, 222.34375 * scale);
        ctx.bezierCurveTo(164.5 * scale, 234.34375 * scale, 173.5 * scale, 242.34375 * scale, 178.5 * scale, 245.34375 * scale);
        ctx.bezierCurveTo(174.5 * scale, 265.34375 * scale, 180.5 * scale, 274.34375 * scale, 186.5 * scale, 283.34375 * scale);
        ctx.bezierCurveTo(165.5 * scale, 277.34375 * scale, 151.5 * scale, 245.34375 * scale, 155.5 * scale, 224.34375 * scale);
        ctx.closePath();
        fill_path(ctx, color[7], color[8], 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(279.5 * scale, 294.34375 * scale);
        ctx.bezierCurveTo(286.5 * scale, 285.84375 * scale, 286.5 * scale, 285.84375 * scale, 293.5 * scale, 277.34375 * scale);
        ctx.bezierCurveTo(315.5 * scale, 280.34375 * scale, 315.5 * scale, 280.34375 * scale, 337.5 * scale, 283.34375 * scale);
        ctx.bezierCurveTo(340.5 * scale, 311.34375 * scale, 317.5 * scale, 326.34375 * scale, 307.5 * scale, 331.34375 * scale);
        ctx.closePath();
        fill_path(ctx, color[7], color[8], 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(296.5 * scale, 287.34375 * scale);
        ctx.bezierCurveTo(311.5 * scale, 291.34375 * scale, 311.5 * scale, 291.34375 * scale, 326.5 * scale, 295.34375 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[9], 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(294.5 * scale, 289.34375 * scale);
        ctx.bezierCurveTo(308.5 * scale, 297.34375 * scale, 308.5 * scale, 297.34375 * scale, 322.5 * scale, 305.34375 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[9], 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(294.5 * scale, 291.34375 * scale);
        ctx.bezierCurveTo(304 * scale, 303.34375 * scale, 304 * scale, 303.34375 * scale, 313.5 * scale, 315.34375 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[9], 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(226.5 * scale, 161.34375 * scale);
        ctx.bezierCurveTo(230.5 * scale, 160.34375 * scale, 236.5 * scale, 158.34375 * scale, 238.5 * scale, 161.34375 * scale);
        ctx.bezierCurveTo(238.5 * scale, 157.34375 * scale, 228.5 * scale, 159.34375 * scale, 227.5 * scale, 161.34375 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[9], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(167.5 * scale, 248.34375 * scale);
        ctx.bezierCurveTo(165.5 * scale, 251.34375 * scale, 168.5 * scale, 256.34375 * scale, 168.5 * scale, 253.34375 * scale);
        ctx.bezierCurveTo(166.5 * scale, 252.34375 * scale, 168.5 * scale, 246.34375 * scale, 166.5 * scale, 247.34375 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[9], 3 * scale);
        return can;
    };

    function create_fishfood_cooked(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 309 * scale;
        can.height = 287 * scale;
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(10 * scale, 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(34.5 * scale, 38.53125 * scale);
        ctx.bezierCurveTo(91.5 * scale, 30.53125 * scale, 138.5 * scale, 68.53125 * scale, 169.5 * scale, 93.53125 * scale);
        ctx.bezierCurveTo(208.5 * scale, 128.53125 * scale, 226.5 * scale, 157.53125 * scale, 233.5 * scale, 209.53125 * scale);
        ctx.bezierCurveTo(195.5 * scale, 218.53125 * scale, 138.5 * scale, 191.53125 * scale, 105.5 * scale, 157.53125 * scale);
        ctx.bezierCurveTo(54.5 * scale, 112.53125 * scale, 41.5 * scale, 80.53125 * scale, 33.5 * scale, 38.53125 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(143.5 * scale, 74.53125 * scale);
        ctx.bezierCurveTo(164.5 * scale, 73.53125 * scale, 159 * scale, 74.53125 * scale, 174.5 * scale, 74.53125 * scale);
        ctx.bezierCurveTo(186 * scale, 86.53125 * scale, 186 * scale, 86.53125 * scale, 197.5 * scale, 98.53125 * scale);
        ctx.bezierCurveTo(186 * scale, 97.03125 * scale, 186 * scale, 97.03125 * scale, 174.5 * scale, 95.53125 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(87.5 * scale, 142.53125 * scale);
        ctx.bezierCurveTo(92 * scale, 160.03125 * scale, 92 * scale, 160.03125 * scale, 96.5 * scale, 177.53125 * scale);
        ctx.bezierCurveTo(108 * scale, 181.53125 * scale, 108 * scale, 181.53125 * scale, 119.5 * scale, 185.53125 * scale);
        ctx.bezierCurveTo(116.5 * scale, 175.53125 * scale, 116.5 * scale, 175.53125 * scale, 113.5 * scale, 165.53125 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(236.5 * scale, 189.53125 * scale);
        ctx.bezierCurveTo(274.5 * scale, 197.53125 * scale, 255.5 * scale, 194.03125 * scale, 274.5 * scale, 198.53125 * scale);
        ctx.bezierCurveTo(272.5 * scale, 236.53125 * scale, 261.5 * scale, 237.53125 * scale, 242.5 * scale, 248.53125 * scale);
        ctx.bezierCurveTo(230.5 * scale, 231.03125 * scale, 230.5 * scale, 231.03125 * scale, 218.5 * scale, 213.53125 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 10 * scale);
        ctx.globalAlpha = 1;
        ctx.translate(-10 * scale, -5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(34.5 * scale, 38.53125 * scale);
        ctx.bezierCurveTo(91.5 * scale, 30.53125 * scale, 138.5 * scale, 68.53125 * scale, 169.5 * scale, 93.53125 * scale);
        ctx.bezierCurveTo(208.5 * scale, 128.53125 * scale, 226.5 * scale, 157.53125 * scale, 233.5 * scale, 209.53125 * scale);
        ctx.bezierCurveTo(195.5 * scale, 218.53125 * scale, 138.5 * scale, 191.53125 * scale, 105.5 * scale, 157.53125 * scale);
        ctx.bezierCurveTo(54.5 * scale, 112.53125 * scale, 41.5 * scale, 80.53125 * scale, 33.5 * scale, 38.53125 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(143.5 * scale, 74.53125 * scale);
        ctx.bezierCurveTo(164.5 * scale, 73.53125 * scale, 159 * scale, 74.53125 * scale, 174.5 * scale, 74.53125 * scale);
        ctx.bezierCurveTo(186 * scale, 86.53125 * scale, 186 * scale, 86.53125 * scale, 197.5 * scale, 98.53125 * scale);
        ctx.bezierCurveTo(186 * scale, 97.03125 * scale, 186 * scale, 97.03125 * scale, 174.5 * scale, 95.53125 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(87.5 * scale, 142.53125 * scale);
        ctx.bezierCurveTo(92 * scale, 160.03125 * scale, 92 * scale, 160.03125 * scale, 96.5 * scale, 177.53125 * scale);
        ctx.bezierCurveTo(108 * scale, 181.53125 * scale, 108 * scale, 181.53125 * scale, 119.5 * scale, 185.53125 * scale);
        ctx.bezierCurveTo(116.5 * scale, 175.53125 * scale, 116.5 * scale, 175.53125 * scale, 113.5 * scale, 165.53125 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(236.5 * scale, 189.53125 * scale);
        ctx.bezierCurveTo(274.5 * scale, 197.53125 * scale, 255.5 * scale, 194.03125 * scale, 274.5 * scale, 198.53125 * scale);
        ctx.bezierCurveTo(272.5 * scale, 236.53125 * scale, 261.5 * scale, 237.53125 * scale, 242.5 * scale, 248.53125 * scale);
        ctx.bezierCurveTo(230.5 * scale, 231.03125 * scale, 230.5 * scale, 231.03125 * scale, 218.5 * scale, 213.53125 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(109.5 * scale, 51.53125 * scale);
        ctx.bezierCurveTo(107.5 * scale, 92.53125 * scale, 91.5 * scale, 95.53125 * scale, 59.5 * scale, 101.53125 * scale);
        fill_path(ctx, color[1], color[2], 7 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(72.5 * scale, 51.53125 * scale);
        ctx.bezierCurveTo(71 * scale, 64.53125 * scale, 69.5 * scale, 76.53125 * scale, 69.5 * scale, 77.53125 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 7 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(84.5 * scale, 63.53125 * scale);
        ctx.bezierCurveTo(70.5 * scale, 65.03125 * scale, 70.5 * scale, 65.03125 * scale, 56.5 * scale, 66.53125 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 7 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(125.5 * scale, 84.53125 * scale);
        ctx.bezierCurveTo(125.5 * scale, 110.03125 * scale, 125.5 * scale, 110.03125 * scale, 125.5 * scale, 135.53125 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 7 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(149.5 * scale, 108.53125 * scale);
        ctx.bezierCurveTo(150 * scale, 137.03125 * scale, 150 * scale, 137.03125 * scale, 150.5 * scale, 165.53125 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 7 * scale);
        return can;
    };

    function create_wall(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        var w = scale * 130;
        var h = scale * 142;
        var x = w / 2;
        var y = h / 2;
        can.width = w;
        can.height = h;
        ctx.translate(x, y + (7 * scale));
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        circle(ctx, 0, 0, 60 * scale);
        fill_path(ctx, color[0]);
        ctx.translate(0, -7 * scale);
        ctx.globalAlpha = 1;
        circle(ctx, 0, 0, 60 * scale, 0);
        fill_path(ctx, color[1], color[2], 4 * scale);
        circle(ctx, 0, 0, 40 * scale);
        fill_path(ctx, color[3]);
        circle(ctx, 0, 0, 25 * scale);
        fill_path(ctx, color[4], color[5], 8 * scale);
        return can;
    };

    function create_delay_wall(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        var w = scale * 130;
        var h = scale * 142;
        var x = w / 2;
        var y = h / 2;
        can.width = w;
        can.height = h;
        circle(ctx, x, y, 40 * scale, 0);
        fill_path(ctx, undefined, color[0], 7 * scale);
        circle(ctx, x, y, 30 * scale, 0);
        fill_path(ctx, undefined, color[0], 7 * scale);
        circle(ctx, x, y, 20 * scale, 0);
        fill_path(ctx, color[0]);
        return can;
    };

    function create_wall_diamond(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 130 * scale;
        can.height = 142 * scale;
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.save();
        ctx.translate(65 * scale, 80 * scale);
        ctx.rotate(0.2);
        round_regular_polygon(ctx, 9, 60 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.save();
        ctx.translate(65 * scale, 71 * scale);
        ctx.rotate(0.2);
        round_regular_polygon(ctx, 9, 60 * scale, 10 * scale);
        fill_path(ctx, color[1], color[2], 4);
        ctx.rotate(-0.32);
        round_regular_polygon(ctx, 9, 38 * scale, 10 * scale);
        fill_path(ctx, color[3], color[4], 4);
        ctx.rotate(0.68);
        round_regular_polygon(ctx, 9, 20 * scale, 8 * scale);
        fill_path(ctx, color[5], color[6], 6);
        ctx.restore();
        return can;
    };

    function create_palm(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 372 * scale;
        can.height = 375 * scale;
        ctx.globalAlpha = 0.5;
        ctx.translate(15 * scale, 15 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(313.0000305175781 * scale, 76.58523559570312 * scale);
        ctx.bezierCurveTo(308.0000305175781 * scale, 130.58523559570312 * scale, 279.0000305175781 * scale, 158.58523559570312 * scale, 254.00003051757812 * scale, 175.58523559570312 * scale);
        ctx.bezierCurveTo(287.0000305175781 * scale, 182.58523559570312 * scale, 274.0000305175781 * scale, 181.08523559570312 * scale, 294.0000305175781 * scale, 186.58523559570312 * scale);
        ctx.bezierCurveTo(293.5000305175781 * scale, 196.08523559570312 * scale, 293.5000305175781 * scale, 196.08523559570312 * scale, 293.0000305175781 * scale, 205.58523559570312 * scale);
        ctx.bezierCurveTo(304.0000305175781 * scale, 201.08523559570312 * scale, 304.0000305175781 * scale, 201.08523559570312 * scale, 315.0000305175781 * scale, 196.58523559570312 * scale);
        ctx.bezierCurveTo(350.0000305175781 * scale, 219.58523559570312 * scale, 343.0000305175781 * scale, 221.58523559570312 * scale, 351.0000305175781 * scale, 230.58523559570312 * scale);
        ctx.bezierCurveTo(296.0000305175781 * scale, 260.5852355957031 * scale, 264.0000305175781 * scale, 256.5852355957031 * scale, 220.00003051757812 * scale, 236.58523559570312 * scale);
        ctx.bezierCurveTo(233.00003051757812 * scale, 266.5852355957031 * scale, 232.00003051757812 * scale, 279.5852355957031 * scale, 231.00003051757812 * scale, 295.5852355957031 * scale);
        ctx.bezierCurveTo(222.00003051757812 * scale, 297.5852355957031 * scale, 222.00003051757812 * scale, 297.5852355957031 * scale, 213.00003051757812 * scale, 299.5852355957031 * scale);
        ctx.bezierCurveTo(219.50003051757812 * scale, 308.0852355957031 * scale, 219.50003051757812 * scale, 308.0852355957031 * scale, 226.00003051757812 * scale, 316.5852355957031 * scale);
        ctx.bezierCurveTo(223.00003051757812 * scale, 344.5852355957031 * scale, 216.00003051757812 * scale, 350.5852355957031 * scale, 209.00003051757812 * scale, 363.5852355957031 * scale);
        ctx.bezierCurveTo(154.00003051757812 * scale, 318.5852355957031 * scale, 156.00003051757812 * scale, 268.5852355957031 * scale, 160.00003051757812 * scale, 238.58523559570312 * scale);
        ctx.bezierCurveTo(135.00003051757812 * scale, 268.5852355957031 * scale, 125.00003051757812 * scale, 267.5852355957031 * scale, 112.00003051757812 * scale, 272.5852355957031 * scale);
        ctx.bezierCurveTo(104.50003051757812 * scale, 266.5852355957031 * scale, 104.50003051757812 * scale, 266.5852355957031 * scale, 97.00003051757812 * scale, 260.5852355957031 * scale);
        ctx.bezierCurveTo(93.00003051757812 * scale, 271.0852355957031 * scale, 93.00003051757812 * scale, 271.0852355957031 * scale, 89.00003051757812 * scale, 281.5852355957031 * scale);
        ctx.bezierCurveTo(66.00003051757812 * scale, 288.5852355957031 * scale, 59.000030517578125 * scale, 288.5852355957031 * scale, 39.000030517578125 * scale, 285.5852355957031 * scale);
        ctx.bezierCurveTo(56.000030517578125 * scale, 216.58523559570312 * scale, 91.00003051757812 * scale, 204.58523559570312 * scale, 129.00003051757812 * scale, 189.58523559570312 * scale);
        ctx.bezierCurveTo(90.00003051757812 * scale, 176.58523559570312 * scale, 89.00003051757812 * scale, 173.58523559570312 * scale, 79.00003051757812 * scale, 166.58523559570312 * scale);
        ctx.bezierCurveTo(82.00003051757812 * scale, 155.08523559570312 * scale, 82.00003051757812 * scale, 155.08523559570312 * scale, 85.00003051757812 * scale, 143.58523559570312 * scale);
        ctx.bezierCurveTo(75.50003051757812 * scale, 147.58523559570312 * scale, 75.50003051757812 * scale, 147.58523559570312 * scale, 66.00003051757812 * scale, 151.58523559570312 * scale);
        ctx.bezierCurveTo(44.000030517578125 * scale, 133.58523559570312 * scale, 41.000030517578125 * scale, 124.58523559570312 * scale, 34.000030517578125 * scale, 102.58523559570312 * scale);
        ctx.bezierCurveTo(100.00003051757812 * scale, 81.58523559570312 * scale, 134.00003051757812 * scale, 118.58523559570312 * scale, 150.00003051757812 * scale, 128.58523559570312 * scale);
        ctx.bezierCurveTo(144.00003051757812 * scale, 102.58523559570312 * scale, 147.00003051757812 * scale, 90.58523559570312 * scale, 150.00003051757812 * scale, 80.58523559570312 * scale);
        ctx.bezierCurveTo(159.50003051757812 * scale, 79.08523559570312 * scale, 159.50003051757812 * scale, 79.08523559570312 * scale, 169.00003051757812 * scale, 77.58523559570312 * scale);
        ctx.bezierCurveTo(163.00003051757812 * scale, 72.58523559570312 * scale, 163.00003051757812 * scale, 72.58523559570312 * scale, 157.00003051757812 * scale, 67.58523559570312 * scale);
        ctx.bezierCurveTo(162.00003051757812 * scale, 42.585235595703125 * scale, 169.00003051757812 * scale, 29.585235595703125 * scale, 182.00003051757812 * scale, 14.585235595703125 * scale);
        ctx.bezierCurveTo(219.00003051757812 * scale, 48.585235595703125 * scale, 222.00003051757812 * scale, 92.58523559570312 * scale, 218.00003051757812 * scale, 112.58523559570312 * scale);
        ctx.bezierCurveTo(239.00003051757812 * scale, 95.58523559570312 * scale, 242.00003051757812 * scale, 97.58523559570312 * scale, 249.00003051757812 * scale, 94.58523559570312 * scale);
        ctx.bezierCurveTo(255.00003051757812 * scale, 103.08523559570312 * scale, 255.00003051757812 * scale, 103.08523559570312 * scale, 261.0000305175781 * scale, 111.58523559570312 * scale);
        ctx.bezierCurveTo(261.5000305175781 * scale, 99.58523559570312 * scale, 261.5000305175781 * scale, 99.58523559570312 * scale, 262.0000305175781 * scale, 87.58523559570312 * scale);
        ctx.bezierCurveTo(282.0000305175781 * scale, 77.58523559570312 * scale, 301.0000305175781 * scale, 74.58523559570312 * scale, 314.0000305175781 * scale, 76.58523559570312 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(-15 * scale, -15 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(313.0000305175781 * scale, 76.58523559570312 * scale);
        ctx.bezierCurveTo(308.0000305175781 * scale, 130.58523559570312 * scale, 279.0000305175781 * scale, 158.58523559570312 * scale, 254.00003051757812 * scale, 175.58523559570312 * scale);
        ctx.bezierCurveTo(287.0000305175781 * scale, 182.58523559570312 * scale, 274.0000305175781 * scale, 181.08523559570312 * scale, 294.0000305175781 * scale, 186.58523559570312 * scale);
        ctx.bezierCurveTo(293.5000305175781 * scale, 196.08523559570312 * scale, 293.5000305175781 * scale, 196.08523559570312 * scale, 293.0000305175781 * scale, 205.58523559570312 * scale);
        ctx.bezierCurveTo(304.0000305175781 * scale, 201.08523559570312 * scale, 304.0000305175781 * scale, 201.08523559570312 * scale, 315.0000305175781 * scale, 196.58523559570312 * scale);
        ctx.bezierCurveTo(350.0000305175781 * scale, 219.58523559570312 * scale, 343.0000305175781 * scale, 221.58523559570312 * scale, 351.0000305175781 * scale, 230.58523559570312 * scale);
        ctx.bezierCurveTo(296.0000305175781 * scale, 260.5852355957031 * scale, 264.0000305175781 * scale, 256.5852355957031 * scale, 220.00003051757812 * scale, 236.58523559570312 * scale);
        ctx.bezierCurveTo(233.00003051757812 * scale, 266.5852355957031 * scale, 232.00003051757812 * scale, 279.5852355957031 * scale, 231.00003051757812 * scale, 295.5852355957031 * scale);
        ctx.bezierCurveTo(222.00003051757812 * scale, 297.5852355957031 * scale, 222.00003051757812 * scale, 297.5852355957031 * scale, 213.00003051757812 * scale, 299.5852355957031 * scale);
        ctx.bezierCurveTo(219.50003051757812 * scale, 308.0852355957031 * scale, 219.50003051757812 * scale, 308.0852355957031 * scale, 226.00003051757812 * scale, 316.5852355957031 * scale);
        ctx.bezierCurveTo(223.00003051757812 * scale, 344.5852355957031 * scale, 216.00003051757812 * scale, 350.5852355957031 * scale, 209.00003051757812 * scale, 363.5852355957031 * scale);
        ctx.bezierCurveTo(154.00003051757812 * scale, 318.5852355957031 * scale, 156.00003051757812 * scale, 268.5852355957031 * scale, 160.00003051757812 * scale, 238.58523559570312 * scale);
        ctx.bezierCurveTo(135.00003051757812 * scale, 268.5852355957031 * scale, 125.00003051757812 * scale, 267.5852355957031 * scale, 112.00003051757812 * scale, 272.5852355957031 * scale);
        ctx.bezierCurveTo(104.50003051757812 * scale, 266.5852355957031 * scale, 104.50003051757812 * scale, 266.5852355957031 * scale, 97.00003051757812 * scale, 260.5852355957031 * scale);
        ctx.bezierCurveTo(93.00003051757812 * scale, 271.0852355957031 * scale, 93.00003051757812 * scale, 271.0852355957031 * scale, 89.00003051757812 * scale, 281.5852355957031 * scale);
        ctx.bezierCurveTo(66.00003051757812 * scale, 288.5852355957031 * scale, 59.000030517578125 * scale, 288.5852355957031 * scale, 39.000030517578125 * scale, 285.5852355957031 * scale);
        ctx.bezierCurveTo(56.000030517578125 * scale, 216.58523559570312 * scale, 91.00003051757812 * scale, 204.58523559570312 * scale, 129.00003051757812 * scale, 189.58523559570312 * scale);
        ctx.bezierCurveTo(90.00003051757812 * scale, 176.58523559570312 * scale, 89.00003051757812 * scale, 173.58523559570312 * scale, 79.00003051757812 * scale, 166.58523559570312 * scale);
        ctx.bezierCurveTo(82.00003051757812 * scale, 155.08523559570312 * scale, 82.00003051757812 * scale, 155.08523559570312 * scale, 85.00003051757812 * scale, 143.58523559570312 * scale);
        ctx.bezierCurveTo(75.50003051757812 * scale, 147.58523559570312 * scale, 75.50003051757812 * scale, 147.58523559570312 * scale, 66.00003051757812 * scale, 151.58523559570312 * scale);
        ctx.bezierCurveTo(44.000030517578125 * scale, 133.58523559570312 * scale, 41.000030517578125 * scale, 124.58523559570312 * scale, 34.000030517578125 * scale, 102.58523559570312 * scale);
        ctx.bezierCurveTo(100.00003051757812 * scale, 81.58523559570312 * scale, 134.00003051757812 * scale, 118.58523559570312 * scale, 150.00003051757812 * scale, 128.58523559570312 * scale);
        ctx.bezierCurveTo(144.00003051757812 * scale, 102.58523559570312 * scale, 147.00003051757812 * scale, 90.58523559570312 * scale, 150.00003051757812 * scale, 80.58523559570312 * scale);
        ctx.bezierCurveTo(159.50003051757812 * scale, 79.08523559570312 * scale, 159.50003051757812 * scale, 79.08523559570312 * scale, 169.00003051757812 * scale, 77.58523559570312 * scale);
        ctx.bezierCurveTo(163.00003051757812 * scale, 72.58523559570312 * scale, 163.00003051757812 * scale, 72.58523559570312 * scale, 157.00003051757812 * scale, 67.58523559570312 * scale);
        ctx.bezierCurveTo(162.00003051757812 * scale, 42.585235595703125 * scale, 169.00003051757812 * scale, 29.585235595703125 * scale, 182.00003051757812 * scale, 14.585235595703125 * scale);
        ctx.bezierCurveTo(219.00003051757812 * scale, 48.585235595703125 * scale, 222.00003051757812 * scale, 92.58523559570312 * scale, 218.00003051757812 * scale, 112.58523559570312 * scale);
        ctx.bezierCurveTo(239.00003051757812 * scale, 95.58523559570312 * scale, 242.00003051757812 * scale, 97.58523559570312 * scale, 249.00003051757812 * scale, 94.58523559570312 * scale);
        ctx.bezierCurveTo(255.00003051757812 * scale, 103.08523559570312 * scale, 255.00003051757812 * scale, 103.08523559570312 * scale, 261.0000305175781 * scale, 111.58523559570312 * scale);
        ctx.bezierCurveTo(261.5000305175781 * scale, 99.58523559570312 * scale, 261.5000305175781 * scale, 99.58523559570312 * scale, 262.0000305175781 * scale, 87.58523559570312 * scale);
        ctx.bezierCurveTo(282.0000305175781 * scale, 77.58523559570312 * scale, 301.0000305175781 * scale, 74.58523559570312 * scale, 314.0000305175781 * scale, 76.58523559570312 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(186.00003051757812 * scale, 192.94886779785156 * scale);
        ctx.bezierCurveTo(185.00003051757812 * scale, 66.94886779785156 * scale, 184.50003051757812 * scale, 104.94886779785156 * scale, 183.00003051757812 * scale, 16.948867797851562 * scale);
        ctx.bezierCurveTo(216.00003051757812 * scale, 47.94886779785156 * scale, 219.00003051757812 * scale, 80.94886779785156 * scale, 218.00003051757812 * scale, 113.94886779785156 * scale);
        ctx.bezierCurveTo(209.00003051757812 * scale, 165.94886779785156 * scale, 200.00003051757812 * scale, 176.94886779785156 * scale, 189.00003051757812 * scale, 192.94886779785156 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[3], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(190.00003051757812 * scale, 191.94886779785156 * scale);
        ctx.bezierCurveTo(207.00003051757812 * scale, 348.94886779785156 * scale, 205.00003051757812 * scale, 323.94886779785156 * scale, 209.00003051757812 * scale, 358.94886779785156 * scale);
        ctx.bezierCurveTo(171.00003051757812 * scale, 334.94886779785156 * scale, 167.00003051757812 * scale, 302.94886779785156 * scale, 161.00003051757812 * scale, 268.94886779785156 * scale);
        ctx.bezierCurveTo(160.00003051757812 * scale, 218.94886779785156 * scale, 181.00003051757812 * scale, 191.94886779785156 * scale, 189.00003051757812 * scale, 186.94886779785156 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[3], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(194.00003051757812 * scale, 195.94886779785156 * scale);
        ctx.bezierCurveTo(116.00003051757812 * scale, 150.94886779785156 * scale, 116.00003051757812 * scale, 150.94886779785156 * scale, 38.000030517578125 * scale, 105.94886779785156 * scale);
        ctx.bezierCurveTo(67.00003051757812 * scale, 90.94886779785156 * scale, 96.00003051757812 * scale, 99.94886779785156 * scale, 123.00003051757812 * scale, 111.94886779785156 * scale);
        ctx.bezierCurveTo(183.00003051757812 * scale, 152.94886779785156 * scale, 179.00003051757812 * scale, 180.94886779785156 * scale, 193.00003051757812 * scale, 194.94886779785156 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[3], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(189.00003051757812 * scale, 190.94886779785156 * scale);
        ctx.bezierCurveTo(250.00003051757812 * scale, 133.94886779785156 * scale, 311.0000305175781 * scale, 78.94886779785156 * scale, 311.0000305175781 * scale, 76.94886779785156 * scale);
        ctx.bezierCurveTo(306.0000305175781 * scale, 127.94886779785156 * scale, 283.0000305175781 * scale, 148.94886779785156 * scale, 261.0000305175781 * scale, 166.94886779785156 * scale);
        ctx.bezierCurveTo(220.00003051757812 * scale, 197.94886779785156 * scale, 191.00003051757812 * scale, 194.94886779785156 * scale, 189.00003051757812 * scale, 195.94886779785156 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[3], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(189.00003051757812 * scale, 194.94886779785156 * scale);
        ctx.bezierCurveTo(268.5000305175781 * scale, 211.94886779785156 * scale, 268.5000305175781 * scale, 211.94886779785156 * scale, 348.0000305175781 * scale, 228.94886779785156 * scale);
        ctx.bezierCurveTo(316.0000305175781 * scale, 247.94886779785156 * scale, 298.0000305175781 * scale, 256.94886779785156 * scale, 250.00003051757812 * scale, 246.94886779785156 * scale);
        ctx.bezierCurveTo(197.00003051757812 * scale, 229.94886779785156 * scale, 189.00003051757812 * scale, 202.94886779785156 * scale, 188.00003051757812 * scale, 199.94886779785156 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[3], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(192.00003051757812 * scale, 191.94886779785156 * scale);
        ctx.bezierCurveTo(116.50003051757812 * scale, 238.44886779785156 * scale, 116.50003051757812 * scale, 238.44886779785156 * scale, 41.000030517578125 * scale, 284.94886779785156 * scale);
        ctx.bezierCurveTo(49.000030517578125 * scale, 252.94886779785156 * scale, 56.000030517578125 * scale, 242.94886779785156 * scale, 80.00003051757812 * scale, 215.94886779785156 * scale);
        ctx.bezierCurveTo(125.00003051757812 * scale, 181.94886779785156 * scale, 174.00003051757812 * scale, 183.94886779785156 * scale, 192.00003051757812 * scale, 191.94886779785156 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[3], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(313.0000305175781 * scale, 76.58523559570312 * scale);
        ctx.bezierCurveTo(308.0000305175781 * scale, 130.58523559570312 * scale, 279.0000305175781 * scale, 158.58523559570312 * scale, 254.00003051757812 * scale, 175.58523559570312 * scale);
        ctx.bezierCurveTo(287.0000305175781 * scale, 182.58523559570312 * scale, 274.0000305175781 * scale, 181.08523559570312 * scale, 294.0000305175781 * scale, 186.58523559570312 * scale);
        ctx.bezierCurveTo(293.5000305175781 * scale, 196.08523559570312 * scale, 293.5000305175781 * scale, 196.08523559570312 * scale, 293.0000305175781 * scale, 205.58523559570312 * scale);
        ctx.bezierCurveTo(304.0000305175781 * scale, 201.08523559570312 * scale, 304.0000305175781 * scale, 201.08523559570312 * scale, 315.0000305175781 * scale, 196.58523559570312 * scale);
        ctx.bezierCurveTo(350.0000305175781 * scale, 219.58523559570312 * scale, 343.0000305175781 * scale, 221.58523559570312 * scale, 351.0000305175781 * scale, 230.58523559570312 * scale);
        ctx.bezierCurveTo(296.0000305175781 * scale, 260.5852355957031 * scale, 264.0000305175781 * scale, 256.5852355957031 * scale, 220.00003051757812 * scale, 236.58523559570312 * scale);
        ctx.bezierCurveTo(233.00003051757812 * scale, 266.5852355957031 * scale, 232.00003051757812 * scale, 279.5852355957031 * scale, 231.00003051757812 * scale, 295.5852355957031 * scale);
        ctx.bezierCurveTo(222.00003051757812 * scale, 297.5852355957031 * scale, 222.00003051757812 * scale, 297.5852355957031 * scale, 213.00003051757812 * scale, 299.5852355957031 * scale);
        ctx.bezierCurveTo(219.50003051757812 * scale, 308.0852355957031 * scale, 219.50003051757812 * scale, 308.0852355957031 * scale, 226.00003051757812 * scale, 316.5852355957031 * scale);
        ctx.bezierCurveTo(223.00003051757812 * scale, 344.5852355957031 * scale, 216.00003051757812 * scale, 350.5852355957031 * scale, 209.00003051757812 * scale, 363.5852355957031 * scale);
        ctx.bezierCurveTo(154.00003051757812 * scale, 318.5852355957031 * scale, 156.00003051757812 * scale, 268.5852355957031 * scale, 160.00003051757812 * scale, 238.58523559570312 * scale);
        ctx.bezierCurveTo(135.00003051757812 * scale, 268.5852355957031 * scale, 125.00003051757812 * scale, 267.5852355957031 * scale, 112.00003051757812 * scale, 272.5852355957031 * scale);
        ctx.bezierCurveTo(104.50003051757812 * scale, 266.5852355957031 * scale, 104.50003051757812 * scale, 266.5852355957031 * scale, 97.00003051757812 * scale, 260.5852355957031 * scale);
        ctx.bezierCurveTo(93.00003051757812 * scale, 271.0852355957031 * scale, 93.00003051757812 * scale, 271.0852355957031 * scale, 89.00003051757812 * scale, 281.5852355957031 * scale);
        ctx.bezierCurveTo(66.00003051757812 * scale, 288.5852355957031 * scale, 59.000030517578125 * scale, 288.5852355957031 * scale, 39.000030517578125 * scale, 285.5852355957031 * scale);
        ctx.bezierCurveTo(56.000030517578125 * scale, 216.58523559570312 * scale, 91.00003051757812 * scale, 204.58523559570312 * scale, 129.00003051757812 * scale, 189.58523559570312 * scale);
        ctx.bezierCurveTo(90.00003051757812 * scale, 176.58523559570312 * scale, 89.00003051757812 * scale, 173.58523559570312 * scale, 79.00003051757812 * scale, 166.58523559570312 * scale);
        ctx.bezierCurveTo(82.00003051757812 * scale, 155.08523559570312 * scale, 82.00003051757812 * scale, 155.08523559570312 * scale, 85.00003051757812 * scale, 143.58523559570312 * scale);
        ctx.bezierCurveTo(75.50003051757812 * scale, 147.58523559570312 * scale, 75.50003051757812 * scale, 147.58523559570312 * scale, 66.00003051757812 * scale, 151.58523559570312 * scale);
        ctx.bezierCurveTo(44.000030517578125 * scale, 133.58523559570312 * scale, 41.000030517578125 * scale, 124.58523559570312 * scale, 34.000030517578125 * scale, 102.58523559570312 * scale);
        ctx.bezierCurveTo(100.00003051757812 * scale, 81.58523559570312 * scale, 134.00003051757812 * scale, 118.58523559570312 * scale, 150.00003051757812 * scale, 128.58523559570312 * scale);
        ctx.bezierCurveTo(144.00003051757812 * scale, 102.58523559570312 * scale, 147.00003051757812 * scale, 90.58523559570312 * scale, 150.00003051757812 * scale, 80.58523559570312 * scale);
        ctx.bezierCurveTo(159.50003051757812 * scale, 79.08523559570312 * scale, 159.50003051757812 * scale, 79.08523559570312 * scale, 169.00003051757812 * scale, 77.58523559570312 * scale);
        ctx.bezierCurveTo(163.00003051757812 * scale, 72.58523559570312 * scale, 163.00003051757812 * scale, 72.58523559570312 * scale, 157.00003051757812 * scale, 67.58523559570312 * scale);
        ctx.bezierCurveTo(162.00003051757812 * scale, 42.585235595703125 * scale, 169.00003051757812 * scale, 29.585235595703125 * scale, 182.00003051757812 * scale, 14.585235595703125 * scale);
        ctx.bezierCurveTo(219.00003051757812 * scale, 48.585235595703125 * scale, 222.00003051757812 * scale, 92.58523559570312 * scale, 218.00003051757812 * scale, 112.58523559570312 * scale);
        ctx.bezierCurveTo(239.00003051757812 * scale, 95.58523559570312 * scale, 242.00003051757812 * scale, 97.58523559570312 * scale, 249.00003051757812 * scale, 94.58523559570312 * scale);
        ctx.bezierCurveTo(255.00003051757812 * scale, 103.08523559570312 * scale, 255.00003051757812 * scale, 103.08523559570312 * scale, 261.0000305175781 * scale, 111.58523559570312 * scale);
        ctx.bezierCurveTo(261.5000305175781 * scale, 99.58523559570312 * scale, 261.5000305175781 * scale, 99.58523559570312 * scale, 262.0000305175781 * scale, 87.58523559570312 * scale);
        ctx.bezierCurveTo(282.0000305175781 * scale, 77.58523559570312 * scale, 301.0000305175781 * scale, 74.58523559570312 * scale, 314.0000305175781 * scale, 76.58523559570312 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[2], 4 * scale);
        return can;
    };

    function create_special_fur(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 248 * scale;
        can.height = 128 * scale;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(137 * scale, 7 * scale);
        ctx.bezierCurveTo(169 * scale, 14 * scale, 212 * scale, 9 * scale, 241 * scale, 5 * scale);
        ctx.bezierCurveTo(211 * scale, 63 * scale, 158 * scale, 92 * scale, 103 * scale, 109 * scale);
        ctx.bezierCurveTo(73 * scale, 126 * scale, 54 * scale, 124 * scale, 6 * scale, 99 * scale);
        ctx.bezierCurveTo(82 * scale, 63 * scale, 113 * scale, 35 * scale, 137 * scale, 8 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[1], 14 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(73 * scale, 124 * scale);
        ctx.bezierCurveTo(111 * scale, 126 * scale, 162 * scale, 97 * scale, 203 * scale, 61 * scale);
        ctx.bezierCurveTo(156 * scale, 98 * scale, 131 * scale, 106 * scale, 105 * scale, 109 * scale);
        ctx.bezierCurveTo(99 * scale, 121 * scale, 87 * scale, 124 * scale, 72 * scale, 124 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[3], 1 * scale);
        return can;
    };

    function create_wall_stone(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 130 * scale;
        can.height = 148 * scale;
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.save();
        ctx.translate(65 * scale, 85 * scale);
        ctx.rotate(1.4);
        round_regular_polygon(ctx, 7, 60 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.save();
        ctx.translate(65 * scale, 74 * scale);
        ctx.rotate(1.4);
        round_regular_polygon(ctx, 7, 60 * scale, 10 * scale);
        fill_path(ctx, color[1], color[2], 4);
        ctx.rotate(0.64);
        round_regular_polygon(ctx, 7, 40 * scale, 10 * scale);
        fill_path(ctx, color[3], color[4], 4);
        ctx.rotate(0.12);
        round_regular_polygon(ctx, 7, 23 * scale, 5 * scale);
        ctx.restore();
        fill_path(ctx, color[5]);
        return can;
    };

    function create_wall_gold(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = scale * 125;
        can.height = scale * 139;
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.save();
        ctx.translate(63 * scale, 79 * scale);
        ctx.rotate(1);
        round_regular_polygon(ctx, 8, 60 * scale, 10 * scale);
        fill_path(ctx, color[0]);
        ctx.restore();
        ctx.globalAlpha = 1;
        ctx.save();
        ctx.translate(63 * scale, 69 * scale);
        ctx.rotate(1);
        round_regular_polygon(ctx, 8, 60 * scale, 10 * scale);
        fill_path(ctx, color[1], color[2], 4);
        ctx.rotate(0.56);
        round_regular_polygon(ctx, 8, 40 * scale, 10 * scale);
        fill_path(ctx, color[3], color[4], 4);
        ctx.rotate(0.28);
        round_regular_polygon(ctx, 8, 28 * scale, 8 * scale);
        fill_path(ctx, color[5]);
        ctx.restore();
        return can;
    };

    function create_door_wood(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 90 * scale;
        can.height = 101 * scale;
        ctx.translate(0 * scale, 5 * scale);
        if (i === 0) {
            ctx.globalAlpha = draw_shadow ? 0.5 : 1;
            circle(ctx, 44 * scale, 55 * scale, 41 * scale);
            fill_path(ctx, color[0]);
        }
        ctx.globalAlpha = 1;
        circle(ctx, 44 * scale, 45 * scale, 41 * scale);
        fill_path(ctx, color[1], color[2], 4 * scale);
        circle(ctx, 44 * scale, 45 * scale, 31 * scale);
        fill_path(ctx, color[3]);
        ctx.save();
        ctx.translate(45 * scale, 45 * scale);
        round_rect(ctx, -9 * scale, -25.5 * scale, 18 * scale, 51 * scale, 30 * scale);
        ctx.restore();
        fill_path(ctx, color[4], color[4], 2 * scale);
        ctx.save();
        ctx.translate(45 * scale, 45 * scale);
        round_rect(ctx, -26 * scale, -9 * scale, 52 * scale, 18 * scale, 30 * scale);
        ctx.restore();
        fill_path(ctx, color[4], color[4], 2 * scale);
        circle(ctx, 45 * scale, 29 * scale, 7 * scale);
        fill_path(ctx, color[5]);
        circle(ctx, 45 * scale, 61 * scale, 7 * scale);
        fill_path(ctx, color[5]);
        circle(ctx, 28 * scale, 45 * scale, 7 * scale);
        fill_path(ctx, color[5]);
        circle(ctx, 62 * scale, 45 * scale, 7 * scale);
        fill_path(ctx, color[5]);
        return can;
    };

    function create_door_stone(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 90 * scale;
        can.height = 98 * scale;
        ctx.translate(0, 4 * scale);
        if (i === 0) {
            ctx.globalAlpha = draw_shadow ? 0.5 : 1;
            ctx.save();
            ctx.translate(44 * scale, 50 * scale);
            ctx.rotate(1.4);
            round_regular_polygon(ctx, 7, 41 * scale, 10 * scale);
            ctx.restore();
            fill_path(ctx, color[0]);
        }
        ctx.globalAlpha = 1;
        ctx.save();
        ctx.translate(44 * scale, 44 * scale);
        ctx.rotate(1.4);
        round_regular_polygon(ctx, 7, 41 * scale, 10 * scale);
        fill_path(ctx, color[1], color[2], 4 * scale);
        round_regular_polygon(ctx, 7, 35 * scale, 10 * scale);
        fill_path(ctx, color[3], color[4], 4 * scale);
        round_regular_polygon(ctx, 7, 23 * scale, 5 * scale);
        ctx.restore();
        fill_path(ctx, color[5]);
        ctx.save();
        ctx.translate(45 * scale, 45 * scale);
        ctx.rotate(0);
        round_rect(ctx, -9 * scale, -25.5 * scale, 18 * scale, 51 * scale, 30 * scale);
        ctx.restore();
        fill_path(ctx, color[4], color[4], 2 * scale);
        ctx.save();
        ctx.translate(45 * scale, 45 * scale);
        ctx.rotate(0);
        round_rect(ctx, -26 * scale, -9 * scale, 52 * scale, 18 * scale, 30 * scale);
        ctx.restore();
        fill_path(ctx, color[4], color[4], 2 * scale);
        circle(ctx, 45 * scale, 29 * scale, 7 * scale);
        fill_path(ctx, color[5]);
        circle(ctx, 45 * scale, 61 * scale, 7 * scale);
        fill_path(ctx, color[5]);
        circle(ctx, 28 * scale, 45 * scale, 7 * scale);
        fill_path(ctx, color[5]);
        circle(ctx, 62 * scale, 45 * scale, 7 * scale);
        fill_path(ctx, color[5]);
        return can;
    };

    function create_door_gold(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 90 * scale;
        can.height = 98 * scale;
        ctx.translate(0, 4 * scale);
        if (i === 0) {
            ctx.globalAlpha = draw_shadow ? 0.5 : 1;
            ctx.save();
            ctx.translate(44 * scale, 50 * scale);
            ctx.rotate(1);
            round_regular_polygon(ctx, 8, 41 * scale, 10 * scale);
            fill_path(ctx, color[0]);
            ctx.restore();
        }
        ctx.globalAlpha = 1;
        ctx.save();
        ctx.translate(44 * scale, 44 * scale);
        ctx.rotate(1);
        round_regular_polygon(ctx, 8, 41 * scale, 10 * scale);
        fill_path(ctx, color[1], color[2], 4 * scale);
        ctx.rotate(0.56);
        round_regular_polygon(ctx, 8, 33 * scale, 10 * scale);
        fill_path(ctx, color[3], color[4], 4 * scale);
        ctx.rotate(0.28);
        round_regular_polygon(ctx, 8, 24 * scale, 8 * scale);
        fill_path(ctx, color[5]);
        ctx.restore();
        ctx.save();
        ctx.translate(45 * scale, 45 * scale);
        ctx.rotate(0);
        round_rect(ctx, -9 * scale, -25.5 * scale, 18 * scale, 51 * scale, 30 * scale);
        ctx.restore();
        fill_path(ctx, color[4], color[4], 2 * scale);
        ctx.save();
        ctx.translate(45 * scale, 45 * scale);
        ctx.rotate(0);
        round_rect(ctx, -26 * scale, -9 * scale, 52 * scale, 18 * scale, 30 * scale);
        ctx.restore();
        fill_path(ctx, color[4], color[4], 2 * scale);
        circle(ctx, 45 * scale, 29 * scale, 7 * scale);
        fill_path(ctx, color[5]);
        circle(ctx, 45 * scale, 61 * scale, 7 * scale);
        fill_path(ctx, color[5]);
        circle(ctx, 28 * scale, 45 * scale, 7 * scale);
        fill_path(ctx, color[5]);
        circle(ctx, 62 * scale, 45 * scale, 7 * scale);
        fill_path(ctx, color[5]);
        return can;
    };

    function create_furnace_on(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 300 * scale;
        can.height = 300 * scale;
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.save();
        ctx.translate(150 * scale, 160 * scale);
        ctx.rotate(6.28);
        round_regular_polygon(ctx, 6, 146 * scale, 30 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.save();
        ctx.translate(150 * scale, 150 * scale);
        ctx.rotate(6.28);
        round_regular_polygon(ctx, 6, 146 * scale, 30 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 8 * scale);
        ctx.save();
        ctx.translate(150 * scale, 150 * scale);
        ctx.rotate(0);
        round_regular_polygon(ctx, 6, 105 * scale, 30 * scale);
        ctx.restore();
        fill_path(ctx, color[3], color[3], 8 * scale);
        ctx.save();
        ctx.translate(150 * scale, 150 * scale);
        ctx.rotate(0);
        round_regular_polygon(ctx, 6, 66 * scale, 30 * scale);
        ctx.restore();
        fill_path(ctx, color[4], color[2], 8 * scale);
        ctx.save();
        ctx.translate(150 * scale, 150 * scale);
        ctx.rotate(0);
        round_regular_polygon(ctx, 6, 31 * scale, 30 * scale);
        ctx.restore();
        fill_path(ctx, color[5], color[6], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(150 * scale, 207 * scale);
        ctx.bezierCurveTo(150 * scale, 151 * scale, 150 * scale, 101 * scale, 150 * scale, 94 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[2], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(118 * scale, 100 * scale);
        ctx.bezierCurveTo(118 * scale, 205 * scale, 118 * scale, 207 * scale, 118 * scale, 200 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[2], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(183 * scale, 100 * scale);
        ctx.bezierCurveTo(183 * scale, 203 * scale, 183 * scale, 203 * scale, 183 * scale, 200 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[2], 8 * scale);
        return can;
    };

    function create_furnace_off(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 300 * scale;
        can.height = 300 * scale;
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.save();
        ctx.translate(150 * scale, 160 * scale);
        ctx.rotate(6.28);
        round_regular_polygon(ctx, 6, 146 * scale, 30 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.save();
        ctx.translate(150 * scale, 150 * scale);
        ctx.rotate(6.28);
        round_regular_polygon(ctx, 6, 146 * scale, 30 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 8 * scale);
        ctx.save();
        ctx.translate(150 * scale, 150 * scale);
        ctx.rotate(0);
        round_regular_polygon(ctx, 6, 105 * scale, 30 * scale);
        ctx.restore();
        fill_path(ctx, color[3], color[3], 8 * scale);
        ctx.save();
        ctx.translate(150 * scale, 150 * scale);
        ctx.rotate(0);
        round_regular_polygon(ctx, 6, 66 * scale, 30 * scale);
        ctx.restore();
        fill_path(ctx, color[4], color[2], 8 * scale);
        ctx.save();
        ctx.translate(131 * scale, 116 * scale);
        round_regular_polygon(ctx, 7, 17 * scale, 8 * scale);
        ctx.restore();
        fill_path(ctx, color[6]);
        ctx.save();
        ctx.translate(163 * scale, 168 * scale);
        round_regular_polygon(ctx, 7, 25 * scale, 8 * scale);
        ctx.restore();
        fill_path(ctx, color[6]);
        ctx.save();
        ctx.translate(117 * scale, 151 * scale);
        round_regular_polygon(ctx, 7, 11 * scale, 8 * scale);
        ctx.restore();
        fill_path(ctx, color[6]);
        ctx.save();
        ctx.translate(167 * scale, 122 * scale);
        round_regular_polygon(ctx, 7, 12 * scale, 8 * scale);
        ctx.restore();
        fill_path(ctx, color[6]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(150 * scale, 207 * scale);
        ctx.bezierCurveTo(150 * scale, 151 * scale, 150 * scale, 101 * scale, 150 * scale, 94 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[2], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(118 * scale, 100 * scale);
        ctx.bezierCurveTo(118 * scale, 205 * scale, 118 * scale, 207 * scale, 118 * scale, 200 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[2], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(183 * scale, 100 * scale);
        ctx.bezierCurveTo(183 * scale, 203 * scale, 183 * scale, 203 * scale, 183 * scale, 200 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[2], 8 * scale);
        return can;
    };

    function create_furnace_slot(scale, useless, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 118 * scale;
        can.height = 129 * scale;
        ctx.save();
        ctx.translate(90 * scale, 90 * scale);
        round_rect(ctx, -86.5 * scale, -86 * scale, 110 * scale, 110 * scale, 15 * scale);
        ctx.restore();
        fill_path(ctx, color[0], color[1], 4);
        return can;
    };

    function create_door_diamond(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 90 * scale;
        can.height = 98 * scale;
        ctx.translate(0, 4 * scale);
        if (i === 0) {
            ctx.globalAlpha = draw_shadow ? 0.5 : 1;
            ctx.save();
            ctx.translate(44 * scale, 50 * scale);
            ctx.rotate(0.2);
            round_regular_polygon(ctx, 9, 41 * scale, 10 * scale);
            ctx.restore();
            fill_path(ctx, color[0]);
        }
        ctx.globalAlpha = 1;
        ctx.save();
        ctx.translate(44 * scale, 44 * scale);
        ctx.rotate(0.2);
        round_regular_polygon(ctx, 9, 41 * scale, 10 * scale);
        fill_path(ctx, color[1], color[2], 4 * scale);
        ctx.rotate(-0.32);
        round_regular_polygon(ctx, 9, 32 * scale, 10 * scale);
        fill_path(ctx, color[3], color[4], 4 * scale);
        ctx.rotate(0.68);
        round_regular_polygon(ctx, 9, 23 * scale, 8 * scale);
        fill_path(ctx, color[5], color[6], 6 * scale);
        ctx.restore();
        ctx.save();
        ctx.translate(45 * scale, 45 * scale);
        ctx.rotate(0);
        round_rect(ctx, -9 * scale, -25.5 * scale, 18 * scale, 51 * scale, 30 * scale);
        ctx.restore();
        fill_path(ctx, color[4], color[4], 2 * scale);
        ctx.save();
        ctx.translate(45 * scale, 45 * scale);
        ctx.rotate(0);
        round_rect(ctx, -26 * scale, -9 * scale, 52 * scale, 18 * scale, 30 * scale);
        ctx.restore();
        fill_path(ctx, color[4], color[4], 2 * scale);
        circle(ctx, 45 * scale, 29 * scale, 7 * scale);
        fill_path(ctx, color[5]);
        circle(ctx, 45 * scale, 61 * scale, 7 * scale);
        fill_path(ctx, color[5]);
        circle(ctx, 28 * scale, 45 * scale, 7 * scale);
        fill_path(ctx, color[5]);
        circle(ctx, 62 * scale, 45 * scale, 7 * scale);
        fill_path(ctx, color[5]);
        return can;
    };

    function create_coat(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 135 * scale;
        can.height = 120 * scale;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(3.5 * scale, 55.25 * scale);
        ctx.bezierCurveTo(3.5 * scale, 114.25 * scale, 2.5 * scale, 109.25 * scale, 3.5 * scale, 112.25 * scale);
        ctx.bezierCurveTo(5.5 * scale, 119.25 * scale, 8.5 * scale, 119.25 * scale, 11.5 * scale, 119.25 * scale);
        ctx.bezierCurveTo(15.5 * scale, 114.25 * scale, 13.5 * scale, 95.25 * scale, 14.5 * scale, 82.25 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[1], 7 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(6.5 * scale, 43.25 * scale);
        ctx.bezierCurveTo(3.5 * scale, 27.25 * scale, 7.5 * scale, 20.25 * scale, 25.5 * scale, 11.25 * scale);
        ctx.bezierCurveTo(45.5 * scale, -0.75 * scale, 73.5 * scale, 1.25 * scale, 107.5 * scale, 10.25 * scale);
        ctx.bezierCurveTo(131.5 * scale, 21.25 * scale, 125.5 * scale, 34.25 * scale, 125.5 * scale, 36.25 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[1], 7 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(120.5 * scale, 62.25 * scale);
        ctx.bezierCurveTo(121.5 * scale, 95.25 * scale, 120.5 * scale, 80.25 * scale, 120.5 * scale, 100.25 * scale);
        ctx.bezierCurveTo(118.5 * scale, 119.25 * scale, 123.5 * scale, 118.25 * scale, 129.5 * scale, 113.25 * scale);
        ctx.bezierCurveTo(133.5 * scale, 107.25 * scale, 130.5 * scale, 97.25 * scale, 130.5 * scale, 87.25 * scale);
        ctx.bezierCurveTo(129.5 * scale, 56.25 * scale, 130 * scale, 70.75 * scale, 129.5 * scale, 54.25 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[1], 7 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(17.5 * scale, 27 * scale);
        ctx.bezierCurveTo(48.5 * scale, 5 * scale, 93.5 * scale, 14 * scale, 118.5 * scale, 26 * scale);
        ctx.bezierCurveTo(132.5 * scale, 35 * scale, 133.5 * scale, 52 * scale, 132.5 * scale, 68 * scale);
        ctx.bezierCurveTo(125.5 * scale, 87 * scale, 116.5 * scale, 84 * scale, 96.5 * scale, 75 * scale);
        ctx.bezierCurveTo(60.5 * scale, 66 * scale, 52.5 * scale, 74 * scale, 37.5 * scale, 78 * scale);
        ctx.bezierCurveTo(2.5 * scale, 86 * scale, 3.5 * scale, 78 * scale, 1.5 * scale, 61 * scale);
        ctx.bezierCurveTo(1.5 * scale, 37 * scale, 9.5 * scale, 32 * scale, 15.5 * scale, 28 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[3], 7 * scale);
        return can;
    };

    function create_crab_crown(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 501 * scale;
        can.height = 309 * scale;
        ctx.translate(0, 6 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(126 * scale, 184 * scale);
        ctx.bezierCurveTo(169 * scale, 196 * scale, 194 * scale, 198 * scale, 227 * scale, 198 * scale);
        ctx.bezierCurveTo(235 * scale, 222 * scale, 236 * scale, 223 * scale, 241 * scale, 226 * scale);
        ctx.bezierCurveTo(245 * scale, 228 * scale, 257 * scale, 228 * scale, 263 * scale, 226 * scale);
        ctx.bezierCurveTo(267 * scale, 225 * scale, 270 * scale, 211 * scale, 275 * scale, 198 * scale);
        ctx.bezierCurveTo(332 * scale, 194 * scale, 347 * scale, 192 * scale, 372 * scale, 188 * scale);
        ctx.bezierCurveTo(366 * scale, 174.5 * scale, 366 * scale, 174.5 * scale, 360 * scale, 161 * scale);
        ctx.bezierCurveTo(253.5 * scale, 162 * scale, 253.5 * scale, 162 * scale, 147 * scale, 163 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(0, -6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(100 * scale, 116 * scale);
        ctx.bezierCurveTo(90 * scale, 101 * scale, 96 * scale, 89 * scale, 106 * scale, 83 * scale);
        ctx.bezierCurveTo(86 * scale, 79 * scale, 86 * scale, 52 * scale, 93 * scale, 38 * scale);
        ctx.bezierCurveTo(99 * scale, 51 * scale, 107 * scale, 57 * scale, 122 * scale, 63 * scale);
        ctx.bezierCurveTo(130 * scale, 53 * scale, 141 * scale, 46 * scale, 161 * scale, 46 * scale);
        ctx.bezierCurveTo(157 * scale, 31 * scale, 158 * scale, 20 * scale, 169 * scale, 6 * scale);
        ctx.bezierCurveTo(171 * scale, 24 * scale, 186 * scale, 33 * scale, 198 * scale, 45 * scale);
        ctx.bezierCurveTo(252 * scale, 45 * scale, 252 * scale, 45 * scale, 306 * scale, 45 * scale);
        ctx.bezierCurveTo(323 * scale, 33 * scale, 332 * scale, 21 * scale, 335 * scale, 7 * scale);
        ctx.bezierCurveTo(349 * scale, 21 * scale, 347 * scale, 36 * scale, 345 * scale, 46 * scale);
        ctx.bezierCurveTo(364 * scale, 46 * scale, 369 * scale, 48 * scale, 377 * scale, 63 * scale);
        ctx.bezierCurveTo(398 * scale, 58 * scale, 403 * scale, 49 * scale, 409 * scale, 40 * scale);
        ctx.bezierCurveTo(419 * scale, 57 * scale, 411 * scale, 79 * scale, 398 * scale, 85 * scale);
        ctx.bezierCurveTo(405 * scale, 100 * scale, 405 * scale, 106 * scale, 401 * scale, 118 * scale);
        ctx.bezierCurveTo(332.5 * scale, 128.5 * scale, 332.5 * scale, 128.5 * scale, 264 * scale, 139 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(122 * scale, 191 * scale);
        ctx.bezierCurveTo(123 * scale, 237 * scale, 135 * scale, 245 * scale, 153 * scale, 259 * scale);
        ctx.bezierCurveTo(167 * scale, 269 * scale, 158 * scale, 281 * scale, 118 * scale, 276 * scale);
        ctx.bezierCurveTo(104 * scale, 273 * scale, 98 * scale, 268 * scale, 93 * scale, 242 * scale);
        ctx.bezierCurveTo(89 * scale, 220 * scale, 92 * scale, 201 * scale, 102 * scale, 179 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[2], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(403 * scale, 182 * scale);
        ctx.bezierCurveTo(414 * scale, 215 * scale, 412 * scale, 232 * scale, 403 * scale, 260 * scale);
        ctx.bezierCurveTo(395 * scale, 274 * scale, 375 * scale, 272 * scale, 356 * scale, 270 * scale);
        ctx.bezierCurveTo(345 * scale, 268 * scale, 339 * scale, 262 * scale, 354 * scale, 252 * scale);
        ctx.bezierCurveTo(370 * scale, 242 * scale, 380 * scale, 225 * scale, 384 * scale, 184 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[2], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(155 * scale, 157 * scale);
        ctx.bezierCurveTo(146 * scale, 189 * scale, 137 * scale, 198 * scale, 114 * scale, 219 * scale);
        ctx.bezierCurveTo(104 * scale, 212 * scale, 98 * scale, 203 * scale, 89 * scale, 189 * scale);
        ctx.bezierCurveTo(82 * scale, 178 * scale, 91 * scale, 164 * scale, 93 * scale, 136 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[2], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(347 * scale, 162 * scale);
        ctx.bezierCurveTo(357 * scale, 195 * scale, 376 * scale, 209 * scale, 387 * scale, 217 * scale);
        ctx.bezierCurveTo(409 * scale, 201 * scale, 420 * scale, 181 * scale, 416 * scale, 166 * scale);
        ctx.bezierCurveTo(410 * scale, 150 * scale, 412 * scale, 149 * scale, 408 * scale, 130 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[2], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(86 * scale, 134 * scale);
        ctx.bezierCurveTo(79 * scale, 102 * scale, 92 * scale, 84 * scale, 108 * scale, 92 * scale);
        ctx.bezierCurveTo(149 * scale, 108 * scale, 184 * scale, 111 * scale, 242 * scale, 111 * scale);
        ctx.bezierCurveTo(294 * scale, 108 * scale, 341 * scale, 105 * scale, 386 * scale, 98 * scale);
        ctx.bezierCurveTo(412 * scale, 91 * scale, 417 * scale, 86 * scale, 415 * scale, 133 * scale);
        ctx.bezierCurveTo(413 * scale, 160 * scale, 413 * scale, 160 * scale, 368 * scale, 174 * scale);
        ctx.bezierCurveTo(308 * scale, 184 * scale, 291 * scale, 185 * scale, 270 * scale, 186 * scale);
        ctx.bezierCurveTo(264 * scale, 206 * scale, 262 * scale, 215 * scale, 253 * scale, 215 * scale);
        ctx.bezierCurveTo(239 * scale, 217 * scale, 239 * scale, 211 * scale, 231 * scale, 186 * scale);
        ctx.bezierCurveTo(178 * scale, 184 * scale, 156 * scale, 179 * scale, 112 * scale, 162 * scale);
        ctx.bezierCurveTo(87 * scale, 151 * scale, 90 * scale, 144 * scale, 87 * scale, 137 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[2], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(63 * scale, 98 * scale);
        ctx.bezierCurveTo(84 * scale, 121 * scale, 109 * scale, 102 * scale, 124 * scale, 117 * scale);
        ctx.bezierCurveTo(138 * scale, 136 * scale, 123 * scale, 165 * scale, 94 * scale, 150 * scale);
        ctx.bezierCurveTo(66 * scale, 131 * scale, 64 * scale, 115 * scale, 63 * scale, 99 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[2], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(449 * scale, 97 * scale);
        ctx.bezierCurveTo(446 * scale, 143 * scale, 415 * scale, 151 * scale, 402 * scale, 155 * scale);
        ctx.bezierCurveTo(386 * scale, 157 * scale, 373 * scale, 133 * scale, 391 * scale, 116 * scale);
        ctx.bezierCurveTo(402 * scale, 106 * scale, 432 * scale, 124 * scale, 449 * scale, 97 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[2], 10 * scale);
        return can;
    };

    function create_crab_loot(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 304 * scale;
        can.height = 278 * scale;
        ctx.translate(10 * scale, 25 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(128 * scale, 137 * scale);
        ctx.bezierCurveTo(155 * scale, 144 * scale, 223 * scale, 143 * scale, 256 * scale, 122 * scale);
        ctx.bezierCurveTo(249 * scale, 180 * scale, 210 * scale, 227 * scale, 164 * scale, 242 * scale);
        ctx.bezierCurveTo(74 * scale, 213 * scale, 99 * scale, 166 * scale, 127 * scale, 138 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(284 * scale, 52 * scale);
        ctx.bezierCurveTo(126 * scale, 112 * scale, 89 * scale, 177 * scale, 170 * scale, 241 * scale);
        ctx.bezierCurveTo(103 * scale, 275 * scale, 20 * scale, 239 * scale, 12 * scale, 159 * scale);
        ctx.bezierCurveTo(5 * scale, 76 * scale, 75 * scale, 4 * scale, 165 * scale, 13 * scale);
        ctx.bezierCurveTo(233 * scale, 15 * scale, 260 * scale, 33 * scale, 284 * scale, 52 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.translate(-10 * scale, -25 * scale);
        ctx.globalAlpha = 1;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(128 * scale, 137 * scale);
        ctx.bezierCurveTo(155 * scale, 144 * scale, 223 * scale, 143 * scale, 256 * scale, 122 * scale);
        ctx.bezierCurveTo(249 * scale, 180 * scale, 210 * scale, 227 * scale, 164 * scale, 242 * scale);
        ctx.bezierCurveTo(74 * scale, 213 * scale, 99 * scale, 166 * scale, 127 * scale, 138 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 15 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(284 * scale, 52 * scale);
        ctx.bezierCurveTo(126 * scale, 112 * scale, 89 * scale, 177 * scale, 170 * scale, 241 * scale);
        ctx.bezierCurveTo(103 * scale, 275 * scale, 20 * scale, 239 * scale, 12 * scale, 159 * scale);
        ctx.bezierCurveTo(5 * scale, 76 * scale, 75 * scale, 4 * scale, 165 * scale, 13 * scale);
        ctx.bezierCurveTo(233 * scale, 15 * scale, 260 * scale, 33 * scale, 284 * scale, 52 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 15 * scale);
        return can;
    };

    function create_bed(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 175 * scale;
        can.height = 169 * scale;
        ctx.globalAlpha = 0.5;
        ctx.translate(0, 3 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(19 * scale, 139 * scale);
        ctx.bezierCurveTo(18 * scale, 163 * scale, 22 * scale, 156 * scale, 53 * scale, 157 * scale);
        ctx.bezierCurveTo(97.5 * scale, 157 * scale, 97.5 * scale, 157 * scale, 142 * scale, 157 * scale);
        ctx.bezierCurveTo(150 * scale, 157 * scale, 153 * scale, 156 * scale, 154 * scale, 142 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(0, -3 * scale);
        ctx.save();
        ctx.translate(86.5 * scale, 81.5 * scale);
        round_rect(ctx, -66.5 * scale, -65.5 * scale, 133 * scale, 131 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 5 * scale);
        ctx.save();
        ctx.translate(84.5 * scale, 79 * scale);
        round_rect(ctx, -50.5 * scale, -49 * scale, 101 * scale, 98 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[3], color[2], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(42 * scale, 54 * scale);
        ctx.bezierCurveTo(37 * scale, 48 * scale, 39 * scale, 44 * scale, 38 * scale, 41 * scale);
        ctx.bezierCurveTo(42 * scale, 40 * scale, 45 * scale, 40 * scale, 50 * scale, 41 * scale);
        ctx.bezierCurveTo(85 * scale, 36 * scale, 98 * scale, 37 * scale, 116 * scale, 42 * scale);
        ctx.bezierCurveTo(132 * scale, 39 * scale, 132 * scale, 39 * scale, 133 * scale, 56 * scale);
        ctx.bezierCurveTo(136 * scale, 73 * scale, 136 * scale, 84 * scale, 132 * scale, 106 * scale);
        ctx.bezierCurveTo(47 * scale, 113 * scale, 85.5 * scale, 106 * scale, 39 * scale, 106 * scale);
        ctx.bezierCurveTo(32 * scale, 81 * scale, 38 * scale, 60 * scale, 42 * scale, 55 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 5 * scale);
        ctx.save();
        ctx.translate(28 * scale, 24 * scale);
        ctx.rotate(0);
        round_rect(ctx, -14 * scale, -14 * scale, 28 * scale, 28 * scale, 4 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 5 * scale);
        ctx.save();
        ctx.translate(143 * scale, 23 * scale);
        ctx.rotate(0);
        round_rect(ctx, -14 * scale, -14 * scale, 28 * scale, 28 * scale, 4 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(55 * scale, 80 * scale);
        ctx.bezierCurveTo(73 * scale, 78 * scale, 84 * scale, 74 * scale, 100 * scale, 64 * scale);
        ctx.bezierCurveTo(111 * scale, 57 * scale, 125 * scale, 67 * scale, 108 * scale, 84 * scale);
        ctx.bezierCurveTo(96 * scale, 95 * scale, 86 * scale, 96 * scale, 70 * scale, 88 * scale);
        ctx.bezierCurveTo(62.5 * scale, 84 * scale, 62.5 * scale, 84 * scale, 55 * scale, 80 * scale);
        ctx.closePath();
        fill_path(ctx, color[5]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(17 * scale, 112 * scale);
        ctx.bezierCurveTo(14 * scale, 146 * scale, 27 * scale, 152 * scale, 37 * scale, 149 * scale);
        ctx.bezierCurveTo(78 * scale, 155 * scale, 128 * scale, 150 * scale, 146 * scale, 150 * scale);
        ctx.bezierCurveTo(158 * scale, 144 * scale, 158 * scale, 121 * scale, 153 * scale, 114 * scale);
        ctx.closePath();
        fill_path(ctx, color[8], color[9], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(127 * scale, 111 * scale);
        ctx.bezierCurveTo(133 * scale, 136 * scale, 115 * scale, 149 * scale, 88 * scale, 150 * scale);
        ctx.bezierCurveTo(119.5 * scale, 151 * scale, 119.5 * scale, 151 * scale, 151 * scale, 152 * scale);
        ctx.bezierCurveTo(159 * scale, 136 * scale, 155 * scale, 126 * scale, 154 * scale, 113 * scale);
        ctx.closePath();
        fill_path(ctx, color[9]);
        ctx.globalAlpha = 0.5;
        ctx.translate(0, 3 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(15 * scale, 117 * scale);
        ctx.bezierCurveTo(34 * scale, 109 * scale, 61 * scale, 106 * scale, 94 * scale, 109 * scale);
        ctx.bezierCurveTo(126 * scale, 110 * scale, 142 * scale, 113 * scale, 154 * scale, 119 * scale);
        ctx.bezierCurveTo(154 * scale, 123 * scale, 154 * scale, 123 * scale, 154 * scale, 127 * scale);
        ctx.bezierCurveTo(127 * scale, 118 * scale, 15 * scale, 122 * scale, 18 * scale, 129 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(0, -3 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(14 * scale, 127 * scale);
        ctx.bezierCurveTo(13 * scale, 117 * scale, 12 * scale, 109 * scale, 15 * scale, 103 * scale);
        ctx.bezierCurveTo(16 * scale, 95 * scale, 21 * scale, 92 * scale, 60 * scale, 93 * scale);
        ctx.bezierCurveTo(91 * scale, 93 * scale, 118 * scale, 93 * scale, 143 * scale, 96 * scale);
        ctx.bezierCurveTo(151 * scale, 96 * scale, 155 * scale, 99 * scale, 156 * scale, 112 * scale);
        ctx.bezierCurveTo(157 * scale, 124 * scale, 157 * scale, 127 * scale, 156 * scale, 128 * scale);
        ctx.bezierCurveTo(138 * scale, 112 * scale, 100 * scale, 118 * scale, 84 * scale, 118 * scale);
        ctx.bezierCurveTo(28 * scale, 118 * scale, 20 * scale, 120 * scale, 16 * scale, 127 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 5 * scale);
        ctx.save();
        ctx.translate(27.5 * scale, 138.5 * scale);
        round_rect(ctx, -13.5 * scale, -14.5 * scale, 27 * scale, 29 * scale, 4 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 5 * scale);
        ctx.save();
        ctx.translate(143.5 * scale, 137 * scale);
        round_rect(ctx, -13.5 * scale, -14 * scale, 27 * scale, 28 * scale, 4 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 5 * scale);
        return can;
    };

    function create_bed_top(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 175 * scale;
        can.height = 169 * scale;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(17 * scale, 112 * scale);
        ctx.bezierCurveTo(14 * scale, 146 * scale, 27 * scale, 152 * scale, 37 * scale, 149 * scale);
        ctx.bezierCurveTo(78 * scale, 155 * scale, 128 * scale, 150 * scale, 146 * scale, 150 * scale);
        ctx.bezierCurveTo(158 * scale, 144 * scale, 158 * scale, 121 * scale, 153 * scale, 114 * scale);
        ctx.closePath();
        fill_path(ctx, color[8], color[9], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(127 * scale, 111 * scale);
        ctx.bezierCurveTo(133 * scale, 136 * scale, 115 * scale, 149 * scale, 88 * scale, 150 * scale);
        ctx.bezierCurveTo(119.5 * scale, 151 * scale, 119.5 * scale, 151 * scale, 151 * scale, 152 * scale);
        ctx.bezierCurveTo(159 * scale, 136 * scale, 155 * scale, 126 * scale, 154 * scale, 113 * scale);
        ctx.closePath();
        fill_path(ctx, color[9]);
        ctx.globalAlpha = 0.5;
        ctx.translate(0, 3 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(15 * scale, 117 * scale);
        ctx.bezierCurveTo(34 * scale, 109 * scale, 61 * scale, 106 * scale, 94 * scale, 109 * scale);
        ctx.bezierCurveTo(126 * scale, 110 * scale, 142 * scale, 113 * scale, 154 * scale, 119 * scale);
        ctx.bezierCurveTo(154 * scale, 123 * scale, 154 * scale, 123 * scale, 154 * scale, 127 * scale);
        ctx.bezierCurveTo(127 * scale, 118 * scale, 15 * scale, 122 * scale, 18 * scale, 129 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(0, -3 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(14 * scale, 127 * scale);
        ctx.bezierCurveTo(13 * scale, 117 * scale, 12 * scale, 109 * scale, 15 * scale, 103 * scale);
        ctx.bezierCurveTo(16 * scale, 95 * scale, 21 * scale, 92 * scale, 60 * scale, 93 * scale);
        ctx.bezierCurveTo(91 * scale, 93 * scale, 118 * scale, 93 * scale, 143 * scale, 96 * scale);
        ctx.bezierCurveTo(151 * scale, 96 * scale, 155 * scale, 99 * scale, 156 * scale, 112 * scale);
        ctx.bezierCurveTo(157 * scale, 124 * scale, 157 * scale, 127 * scale, 156 * scale, 128 * scale);
        ctx.bezierCurveTo(138 * scale, 112 * scale, 100 * scale, 118 * scale, 84 * scale, 118 * scale);
        ctx.bezierCurveTo(28 * scale, 118 * scale, 20 * scale, 120 * scale, 16 * scale, 127 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 5 * scale);
        ctx.save();
        ctx.translate(27.5 * scale, 138.5 * scale);
        round_rect(ctx, -13.5 * scale, -14.5 * scale, 27 * scale, 29 * scale, 4 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 5 * scale);
        ctx.save();
        ctx.translate(143.5 * scale, 137 * scale);
        round_rect(ctx, -13.5 * scale, -14 * scale, 27 * scale, 28 * scale, 4 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 5 * scale);
        return can;
    };

    function create_crab_spear(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 115 * scale;
        can.height = 585 * scale;
        ctx.scale(-1, 1);
        ctx.translate(-110 * scale, 0);
        ctx.translate(10 * scale, 10 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.save();
        ctx.translate(51.5 * scale, 342 * scale);
        round_rect(ctx, -14.5 * scale, -225 * scale, 29 * scale, 450 * scale, 20 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(54 * scale, 83 * scale);
        ctx.bezierCurveTo(70 * scale, 69 * scale, 78 * scale, 62 * scale, 82 * scale, 40 * scale);
        ctx.bezierCurveTo(93 * scale, 48 * scale, 103 * scale, 64 * scale, 95 * scale, 102 * scale);
        ctx.bezierCurveTo(60 * scale, 114 * scale, 53 * scale, 103 * scale, 54 * scale, 85 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(95 * scale, 97 * scale);
        ctx.bezierCurveTo(56 * scale, 102 * scale, 43 * scale, 77 * scale, 71 * scale, 6 * scale);
        ctx.bezierCurveTo(34 * scale, 10 * scale, 6 * scale, 43 * scale, 5 * scale, 76 * scale);
        ctx.bezierCurveTo(4 * scale, 98 * scale, 15 * scale, 130 * scale, 64 * scale, 130 * scale);
        ctx.bezierCurveTo(76 * scale, 129 * scale, 95 * scale, 113 * scale, 97 * scale, 97 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(55 * scale, 176 * scale);
        ctx.bezierCurveTo(74 * scale, 175 * scale, 82 * scale, 169 * scale, 96 * scale, 155 * scale);
        ctx.bezierCurveTo(103 * scale, 183 * scale, 95 * scale, 214 * scale, 54 * scale, 219 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(50 * scale, 176 * scale);
        ctx.bezierCurveTo(25 * scale, 177 * scale, 16 * scale, 164 * scale, 7 * scale, 156 * scale);
        ctx.bezierCurveTo(0 * scale, 186 * scale, 10 * scale, 201 * scale, 43 * scale, 220 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(35 * scale, 403 * scale);
        ctx.bezierCurveTo(47 * scale, 412 * scale, 58 * scale, 412 * scale, 67 * scale, 403 * scale);
        ctx.bezierCurveTo(66.5 * scale, 434 * scale, 66.5 * scale, 434 * scale, 66 * scale, 465 * scale);
        ctx.bezierCurveTo(56 * scale, 480 * scale, 40 * scale, 472 * scale, 36 * scale, 465 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(59 * scale, 67 * scale);
        ctx.bezierCurveTo(47 * scale, 97 * scale, 18 * scale, 117 * scale, 11 * scale, 110 * scale);
        ctx.bezierCurveTo(11 * scale, 115 * scale, 15 * scale, 122 * scale, 23 * scale, 124 * scale);
        ctx.bezierCurveTo(46 * scale, 118 * scale, 52 * scale, 113 * scale, 62 * scale, 86 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(30 * scale, 125 * scale);
        ctx.bezierCurveTo(47 * scale, 136 * scale, 57 * scale, 134 * scale, 77 * scale, 127 * scale);
        ctx.bezierCurveTo(71 * scale, 158 * scale, 71 * scale, 159 * scale, 66 * scale, 159 * scale);
        ctx.bezierCurveTo(50.5 * scale, 156.5 * scale, 50.5 * scale, 156.5 * scale, 35 * scale, 154 * scale);
        ctx.bezierCurveTo(31 * scale, 145 * scale, 31 * scale, 136 * scale, 31 * scale, 125 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(35 * scale, 171 * scale);
        ctx.bezierCurveTo(32 * scale, 221 * scale, 43 * scale, 233 * scale, 70 * scale, 247 * scale);
        ctx.bezierCurveTo(75 * scale, 234 * scale, 75 * scale, 230 * scale, 72 * scale, 221 * scale);
        ctx.bezierCurveTo(48 * scale, 206 * scale, 54 * scale, 188 * scale, 50 * scale, 176 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(60 * scale, 68 * scale);
        ctx.bezierCurveTo(63 * scale, 69 * scale, 65 * scale, 71 * scale, 67 * scale, 77 * scale);
        ctx.bezierCurveTo(61 * scale, 123 * scale, 52 * scale, 137 * scale, 42 * scale, 150 * scale);
        ctx.bezierCurveTo(38 * scale, 151 * scale, 38 * scale, 151 * scale, 34 * scale, 152 * scale);
        ctx.bezierCurveTo(33 * scale, 146.5 * scale, 33 * scale, 146.5 * scale, 32 * scale, 141 * scale);
        ctx.bezierCurveTo(49 * scale, 118 * scale, 63 * scale, 87 * scale, 59 * scale, 68 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(71 * scale, 172 * scale);
        ctx.bezierCurveTo(56 * scale, 222 * scale, 49 * scale, 234 * scale, 35 * scale, 248 * scale);
        ctx.bezierCurveTo(30 * scale, 236 * scale, 30 * scale, 230 * scale, 31 * scale, 217 * scale);
        ctx.bezierCurveTo(44 * scale, 202 * scale, 49 * scale, 191 * scale, 52 * scale, 172 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(35 * scale, 151 * scale);
        ctx.bezierCurveTo(27 * scale, 165 * scale, 31 * scale, 173 * scale, 36 * scale, 178 * scale);
        ctx.bezierCurveTo(56 * scale, 185 * scale, 73 * scale, 184 * scale, 71 * scale, 170 * scale);
        ctx.bezierCurveTo(72 * scale, 154 * scale, 71 * scale, 154 * scale, 63 * scale, 155 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.translate(-10 * scale, -10 * scale);
        ctx.globalAlpha = 1;
        ctx.save();
        ctx.translate(51.5 * scale, 342 * scale);
        round_rect(ctx, -14.5 * scale, -225 * scale, 29 * scale, 450 * scale, 20 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(54 * scale, 83 * scale);
        ctx.bezierCurveTo(70 * scale, 69 * scale, 78 * scale, 62 * scale, 82 * scale, 40 * scale);
        ctx.bezierCurveTo(93 * scale, 48 * scale, 103 * scale, 64 * scale, 95 * scale, 102 * scale);
        ctx.bezierCurveTo(60 * scale, 114 * scale, 53 * scale, 103 * scale, 54 * scale, 85 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(95 * scale, 97 * scale);
        ctx.bezierCurveTo(56 * scale, 102 * scale, 43 * scale, 77 * scale, 71 * scale, 6 * scale);
        ctx.bezierCurveTo(34 * scale, 10 * scale, 6 * scale, 43 * scale, 5 * scale, 76 * scale);
        ctx.bezierCurveTo(4 * scale, 98 * scale, 15 * scale, 130 * scale, 64 * scale, 130 * scale);
        ctx.bezierCurveTo(76 * scale, 129 * scale, 95 * scale, 113 * scale, 97 * scale, 97 * scale);
        ctx.closePath();
        fill_path(ctx, color[5], color[6], 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(35 * scale, 403 * scale);
        ctx.bezierCurveTo(47 * scale, 412 * scale, 58 * scale, 412 * scale, 67 * scale, 403 * scale);
        ctx.bezierCurveTo(66.5 * scale, 434 * scale, 66.5 * scale, 434 * scale, 66 * scale, 465 * scale);
        ctx.bezierCurveTo(56 * scale, 480 * scale, 40 * scale, 472 * scale, 36 * scale, 465 * scale);
        ctx.closePath();
        fill_path(ctx, color[7], color[8], 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(37 * scale, 427 * scale);
        ctx.bezierCurveTo(47 * scale, 435 * scale, 55 * scale, 435 * scale, 67 * scale, 427 * scale);
        fill_path(ctx, undefined, color[8], 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(36 * scale, 448 * scale);
        ctx.bezierCurveTo(46 * scale, 454 * scale, 54 * scale, 457 * scale, 65 * scale, 449 * scale);
        fill_path(ctx, undefined, color[8], 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(55 * scale, 176 * scale);
        ctx.bezierCurveTo(74 * scale, 175 * scale, 82 * scale, 169 * scale, 96 * scale, 155 * scale);
        ctx.bezierCurveTo(103 * scale, 183 * scale, 95 * scale, 214 * scale, 54 * scale, 219 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(50 * scale, 176 * scale);
        ctx.bezierCurveTo(25 * scale, 177 * scale, 16 * scale, 164 * scale, 7 * scale, 156 * scale);
        ctx.bezierCurveTo(0 * scale, 186 * scale, 10 * scale, 201 * scale, 43 * scale, 220 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(59 * scale, 67 * scale);
        ctx.bezierCurveTo(47 * scale, 97 * scale, 18 * scale, 117 * scale, 11 * scale, 110 * scale);
        ctx.bezierCurveTo(11 * scale, 115 * scale, 15 * scale, 122 * scale, 23 * scale, 124 * scale);
        ctx.bezierCurveTo(46 * scale, 118 * scale, 52 * scale, 113 * scale, 62 * scale, 86 * scale);
        ctx.closePath();
        fill_path(ctx, color[7], color[8], 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(30 * scale, 125 * scale);
        ctx.bezierCurveTo(47 * scale, 136 * scale, 57 * scale, 134 * scale, 77 * scale, 127 * scale);
        ctx.bezierCurveTo(71 * scale, 158 * scale, 71 * scale, 159 * scale, 66 * scale, 159 * scale);
        ctx.bezierCurveTo(50.5 * scale, 156.5 * scale, 50.5 * scale, 156.5 * scale, 35 * scale, 154 * scale);
        ctx.bezierCurveTo(31 * scale, 145 * scale, 31 * scale, 136 * scale, 31 * scale, 125 * scale);
        ctx.closePath();
        fill_path(ctx, color[7], color[8], 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(35 * scale, 171 * scale);
        ctx.bezierCurveTo(32 * scale, 221 * scale, 43 * scale, 233 * scale, 70 * scale, 247 * scale);
        ctx.bezierCurveTo(75 * scale, 234 * scale, 75 * scale, 230 * scale, 72 * scale, 221 * scale);
        ctx.bezierCurveTo(48 * scale, 206 * scale, 54 * scale, 188 * scale, 50 * scale, 176 * scale);
        ctx.closePath();
        fill_path(ctx, color[7], color[8], 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(60 * scale, 68 * scale);
        ctx.bezierCurveTo(63 * scale, 69 * scale, 65 * scale, 71 * scale, 67 * scale, 77 * scale);
        ctx.bezierCurveTo(61 * scale, 123 * scale, 52 * scale, 137 * scale, 42 * scale, 150 * scale);
        ctx.bezierCurveTo(38 * scale, 151 * scale, 38 * scale, 151 * scale, 34 * scale, 152 * scale);
        ctx.bezierCurveTo(33 * scale, 146.5 * scale, 33 * scale, 146.5 * scale, 32 * scale, 141 * scale);
        ctx.bezierCurveTo(49 * scale, 118 * scale, 63 * scale, 87 * scale, 59 * scale, 68 * scale);
        ctx.closePath();
        fill_path(ctx, color[7], color[8], 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(71 * scale, 172 * scale);
        ctx.bezierCurveTo(56 * scale, 222 * scale, 49 * scale, 234 * scale, 35 * scale, 248 * scale);
        ctx.bezierCurveTo(30 * scale, 236 * scale, 30 * scale, 230 * scale, 31 * scale, 217 * scale);
        ctx.bezierCurveTo(44 * scale, 202 * scale, 49 * scale, 191 * scale, 52 * scale, 172 * scale);
        ctx.closePath();
        fill_path(ctx, color[7], color[8], 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(35 * scale, 151 * scale);
        ctx.bezierCurveTo(27 * scale, 165 * scale, 31 * scale, 173 * scale, 36 * scale, 178 * scale);
        ctx.bezierCurveTo(56 * scale, 185 * scale, 73 * scale, 184 * scale, 71 * scale, 170 * scale);
        ctx.bezierCurveTo(72 * scale, 154 * scale, 71 * scale, 154 * scale, 63 * scale, 155 * scale);
        ctx.closePath();
        fill_path(ctx, color[7], color[8], 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(53 * scale, 113 * scale);
        ctx.bezierCurveTo(65 * scale, 140 * scale, 75 * scale, 166 * scale, 52 * scale, 169 * scale);
        ctx.bezierCurveTo(29 * scale, 168 * scale, 41 * scale, 143 * scale, 53 * scale, 112 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 6 * scale);
        return can;
    };

    function create_wood_spear(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 81 * scale;
        can.height = 626 * scale;
        ctx.translate(20 * scale, 20 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(55 * scale, 565 * scale);
        ctx.bezierCurveTo(56 * scale, 586 * scale, 53 * scale, 591 * scale, 40 * scale, 592 * scale);
        ctx.bezierCurveTo(28 * scale, 591 * scale, 27 * scale, 583 * scale, 28 * scale, 557 * scale);
        ctx.bezierCurveTo(27.5 * scale, 346 * scale, 27.5 * scale, 346 * scale, 27 * scale, 135 * scale);
        ctx.bezierCurveTo(26 * scale, 74 * scale, 36 * scale, 26 * scale, 41 * scale, 15 * scale);
        ctx.bezierCurveTo(54 * scale, 51 * scale, 54 * scale, 81 * scale, 55 * scale, 128 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.translate(-20 * scale, -20 * scale);
        ctx.globalAlpha = 1;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(55 * scale, 565 * scale);
        ctx.bezierCurveTo(56 * scale, 586 * scale, 53 * scale, 591 * scale, 40 * scale, 592 * scale);
        ctx.bezierCurveTo(28 * scale, 591 * scale, 27 * scale, 583 * scale, 28 * scale, 557 * scale);
        ctx.bezierCurveTo(27.5 * scale, 346 * scale, 27.5 * scale, 346 * scale, 27 * scale, 135 * scale);
        ctx.bezierCurveTo(26 * scale, 74 * scale, 36 * scale, 26 * scale, 41 * scale, 15 * scale);
        ctx.bezierCurveTo(54 * scale, 51 * scale, 54 * scale, 81 * scale, 55 * scale, 128 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(27 * scale, 129 * scale);
        ctx.bezierCurveTo(32 * scale, 135 * scale, 48 * scale, 136 * scale, 53 * scale, 129 * scale);
        ctx.bezierCurveTo(56 * scale, 97 * scale, 53 * scale, 82 * scale, 52 * scale, 64 * scale);
        ctx.bezierCurveTo(49 * scale, 33 * scale, 44 * scale, 27 * scale, 41 * scale, 21 * scale);
        ctx.bezierCurveTo(31 * scale, 40 * scale, 28 * scale, 84 * scale, 27 * scale, 127 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(55 * scale, 565 * scale);
        ctx.bezierCurveTo(56 * scale, 586 * scale, 53 * scale, 591 * scale, 40 * scale, 592 * scale);
        ctx.bezierCurveTo(28 * scale, 591 * scale, 27 * scale, 583 * scale, 28 * scale, 557 * scale);
        ctx.bezierCurveTo(27.5 * scale, 346 * scale, 27.5 * scale, 346 * scale, 27 * scale, 135 * scale);
        ctx.bezierCurveTo(26 * scale, 74 * scale, 36 * scale, 26 * scale, 41 * scale, 15 * scale);
        ctx.bezierCurveTo(54 * scale, 51 * scale, 54 * scale, 81 * scale, 55 * scale, 128 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[2], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(28 * scale, 475 * scale);
        ctx.bezierCurveTo(38 * scale, 482 * scale, 48 * scale, 480 * scale, 54 * scale, 474 * scale);
        ctx.bezierCurveTo(54 * scale, 509.5 * scale, 54 * scale, 509.5 * scale, 54 * scale, 545 * scale);
        ctx.bezierCurveTo(46 * scale, 554 * scale, 36 * scale, 552 * scale, 28 * scale, 545 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(28 * scale, 496 * scale);
        ctx.bezierCurveTo(39 * scale, 506 * scale, 49 * scale, 503 * scale, 54 * scale, 496 * scale);
        fill_path(ctx, undefined, color[5], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(28 * scale, 521 * scale);
        ctx.bezierCurveTo(41 * scale, 529 * scale, 49 * scale, 524 * scale, 54 * scale, 520 * scale);
        fill_path(ctx, undefined, color[5], 8 * scale);
        return can;
    };

    function create_stonespear(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 100 * scale;
        can.height = 648 * scale;
        ctx.translate(20 * scale, 20 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.save();
        ctx.translate(50.5 * scale, 349.5 * scale);
        round_rect(ctx, -13.5 * scale, -249.5 * scale, 27 * scale, 499 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(36 * scale, 538 * scale);
        ctx.bezierCurveTo(49.5 * scale, 538 * scale, 49.5 * scale, 538 * scale, 63 * scale, 538 * scale);
        ctx.bezierCurveTo(63.5 * scale, 568 * scale, 63.5 * scale, 568 * scale, 64 * scale, 598 * scale);
        ctx.bezierCurveTo(50 * scale, 598 * scale, 50 * scale, 598 * scale, 36 * scale, 598 * scale);
        ctx.bezierCurveTo(36 * scale, 568.5 * scale, 36 * scale, 568.5 * scale, 36 * scale, 539 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(36 * scale, 554 * scale);
        ctx.bezierCurveTo(45 * scale, 561 * scale, 56 * scale, 558 * scale, 63 * scale, 554 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(32 * scale, 569 * scale);
        ctx.bezierCurveTo(44 * scale, 576 * scale, 58 * scale, 574 * scale, 68 * scale, 569 * scale);
        ctx.bezierCurveTo(68 * scale, 584 * scale, 68 * scale, 584 * scale, 68 * scale, 599 * scale);
        ctx.bezierCurveTo(68 * scale, 608 * scale, 65 * scale, 618 * scale, 49 * scale, 617 * scale);
        ctx.bezierCurveTo(34 * scale, 617 * scale, 32 * scale, 610 * scale, 32 * scale, 598 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(41 * scale, 581 * scale);
        ctx.bezierCurveTo(48 * scale, 584 * scale, 55 * scale, 583 * scale, 60 * scale, 581 * scale);
        ctx.bezierCurveTo(60 * scale, 589.5 * scale, 60 * scale, 589.5 * scale, 60 * scale, 598 * scale);
        ctx.bezierCurveTo(60 * scale, 604 * scale, 59 * scale, 609 * scale, 48 * scale, 608 * scale);
        ctx.bezierCurveTo(40 * scale, 607 * scale, 40 * scale, 606 * scale, 41 * scale, 581 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(31 * scale, 106 * scale);
        ctx.bezierCurveTo(31 * scale, 124.5 * scale, 31 * scale, 124.5 * scale, 31 * scale, 143 * scale);
        ctx.bezierCurveTo(31 * scale, 163 * scale, 38 * scale, 169 * scale, 48 * scale, 168 * scale);
        ctx.bezierCurveTo(57 * scale, 168 * scale, 67 * scale, 165 * scale, 67 * scale, 148 * scale);
        ctx.bezierCurveTo(67 * scale, 123.5 * scale, 67 * scale, 123.5 * scale, 67 * scale, 99 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(49 * scale, 27 * scale);
        ctx.bezierCurveTo(64 * scale, 62.5 * scale, 64 * scale, 62.5 * scale, 79 * scale, 98 * scale);
        ctx.bezierCurveTo(74 * scale, 113 * scale, 63 * scale, 121 * scale, 50 * scale, 122 * scale);
        ctx.bezierCurveTo(35 * scale, 123 * scale, 22 * scale, 109 * scale, 20 * scale, 98 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(49 * scale, 43 * scale);
        ctx.bezierCurveTo(61 * scale, 70 * scale, 61 * scale, 70 * scale, 73 * scale, 97 * scale);
        ctx.bezierCurveTo(66 * scale, 116 * scale, 43 * scale, 122 * scale, 26 * scale, 99 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.translate(-20 * scale, -20 * scale);
        ctx.globalAlpha = 1;
        ctx.save();
        ctx.translate(50.5 * scale, 349.5 * scale);
        round_rect(ctx, -13.5 * scale, -249.5 * scale, 27 * scale, 499 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(36 * scale, 538 * scale);
        ctx.bezierCurveTo(49.5 * scale, 538 * scale, 49.5 * scale, 538 * scale, 63 * scale, 538 * scale);
        ctx.bezierCurveTo(63.5 * scale, 568 * scale, 63.5 * scale, 568 * scale, 64 * scale, 598 * scale);
        ctx.bezierCurveTo(50 * scale, 598 * scale, 50 * scale, 598 * scale, 36 * scale, 598 * scale);
        ctx.bezierCurveTo(36 * scale, 568.5 * scale, 36 * scale, 568.5 * scale, 36 * scale, 539 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(36 * scale, 554 * scale);
        ctx.bezierCurveTo(45 * scale, 561 * scale, 56 * scale, 558 * scale, 63 * scale, 554 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[4], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(32 * scale, 569 * scale);
        ctx.bezierCurveTo(44 * scale, 576 * scale, 58 * scale, 574 * scale, 68 * scale, 569 * scale);
        ctx.bezierCurveTo(68 * scale, 584 * scale, 68 * scale, 584 * scale, 68 * scale, 599 * scale);
        ctx.bezierCurveTo(68 * scale, 608 * scale, 65 * scale, 618 * scale, 49 * scale, 617 * scale);
        ctx.bezierCurveTo(34 * scale, 617 * scale, 32 * scale, 610 * scale, 32 * scale, 598 * scale);
        ctx.closePath();
        fill_path(ctx, color[5], color[6], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(41 * scale, 581 * scale);
        ctx.bezierCurveTo(48 * scale, 584 * scale, 55 * scale, 583 * scale, 60 * scale, 581 * scale);
        ctx.bezierCurveTo(60 * scale, 589.5 * scale, 60 * scale, 589.5 * scale, 60 * scale, 598 * scale);
        ctx.bezierCurveTo(60 * scale, 604 * scale, 59 * scale, 609 * scale, 48 * scale, 608 * scale);
        ctx.bezierCurveTo(40 * scale, 607 * scale, 40 * scale, 606 * scale, 41 * scale, 581 * scale);
        ctx.closePath();
        fill_path(ctx, color[7]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(31 * scale, 106 * scale);
        ctx.bezierCurveTo(31 * scale, 124.5 * scale, 31 * scale, 124.5 * scale, 31 * scale, 143 * scale);
        ctx.bezierCurveTo(31 * scale, 163 * scale, 38 * scale, 169 * scale, 48 * scale, 168 * scale);
        ctx.bezierCurveTo(57 * scale, 168 * scale, 67 * scale, 165 * scale, 67 * scale, 148 * scale);
        ctx.bezierCurveTo(67 * scale, 123.5 * scale, 67 * scale, 123.5 * scale, 67 * scale, 99 * scale);
        ctx.closePath();
        fill_path(ctx, color[5], color[6], 8 * scale);
        ctx.save();
        ctx.translate(-46 * scale, -50 * scale);
        ctx.scale(2, 2);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(51 * scale, 80 * scale);
        ctx.bezierCurveTo(51 * scale, 89.5 * scale, 51 * scale, 89.5 * scale, 51 * scale, 99 * scale);
        ctx.bezierCurveTo(49 * scale, 103 * scale, 46 * scale, 105 * scale, 44 * scale, 99 * scale);
        ctx.bezierCurveTo(44 * scale, 88.5 * scale, 44 * scale, 88.5 * scale, 44 * scale, 78 * scale);
        ctx.closePath();
        fill_path(ctx, color[8]);
        ctx.restore();
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(49 * scale, 27 * scale);
        ctx.bezierCurveTo(64 * scale, 62.5 * scale, 64 * scale, 62.5 * scale, 79 * scale, 98 * scale);
        ctx.bezierCurveTo(74 * scale, 113 * scale, 63 * scale, 121 * scale, 50 * scale, 122 * scale);
        ctx.bezierCurveTo(35 * scale, 123 * scale, 22 * scale, 109 * scale, 20 * scale, 98 * scale);
        ctx.closePath();
        fill_path(ctx, color[8], color[9], 8 * scale);
        ctx.scale(2, 2);
        ctx.translate(-23 * scale, -20 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(57 * scale, 69 * scale);
        ctx.bezierCurveTo(50 * scale, 76 * scale, 43 * scale, 75 * scale, 38 * scale, 69 * scale);
        ctx.bezierCurveTo(43 * scale, 57 * scale, 43 * scale, 57 * scale, 48 * scale, 45 * scale);
        ctx.closePath();
        fill_path(ctx, color[10]);
        return can;
    };

    function create_goldspear(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 88 * scale;
        can.height = 647 * scale;
        ctx.translate(20 * scale, 20 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.save();
        ctx.translate(45 * scale, 384.5 * scale);
        round_rect(ctx, -15 * scale, -216.5 * scale, 30 * scale, 433 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(27 * scale, 572 * scale);
        ctx.bezierCurveTo(44 * scale, 580 * scale, 55 * scale, 576 * scale, 62 * scale, 572 * scale);
        ctx.bezierCurveTo(65 * scale, 585.5 * scale, 65 * scale, 585.5 * scale, 68 * scale, 599 * scale);
        ctx.bezierCurveTo(71 * scale, 612 * scale, 68 * scale, 618 * scale, 34 * scale, 616 * scale);
        ctx.bezierCurveTo(14 * scale, 615 * scale, 19 * scale, 607 * scale, 27 * scale, 573 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(32 * scale, 587 * scale);
        ctx.bezierCurveTo(39 * scale, 590 * scale, 48 * scale, 588 * scale, 54 * scale, 587 * scale);
        ctx.bezierCurveTo(57 * scale, 604 * scale, 59 * scale, 609 * scale, 46 * scale, 609 * scale);
        ctx.bezierCurveTo(27 * scale, 609 * scale, 28 * scale, 605 * scale, 33 * scale, 588 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(31 * scale, 113 * scale);
        ctx.bezierCurveTo(27 * scale, 139 * scale, 27 * scale, 139 * scale, 23 * scale, 165 * scale);
        ctx.bezierCurveTo(18 * scale, 187 * scale, 39 * scale, 195 * scale, 57 * scale, 186 * scale);
        ctx.bezierCurveTo(68 * scale, 180 * scale, 65 * scale, 171 * scale, 62 * scale, 153 * scale);
        ctx.bezierCurveTo(58.5 * scale, 131 * scale, 58.5 * scale, 131 * scale, 55 * scale, 109 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(39 * scale, 139 * scale);
        ctx.bezierCurveTo(43 * scale, 139 * scale, 43 * scale, 139 * scale, 47 * scale, 139 * scale);
        ctx.bezierCurveTo(51 * scale, 158 * scale, 56 * scale, 176 * scale, 44 * scale, 175 * scale);
        ctx.bezierCurveTo(33 * scale, 177 * scale, 34 * scale, 167 * scale, 39 * scale, 140 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(44 * scale, 29 * scale);
        ctx.bezierCurveTo(57 * scale, 63 * scale, 57 * scale, 63 * scale, 70 * scale, 97 * scale);
        ctx.bezierCurveTo(60 * scale, 111 * scale, 60 * scale, 111 * scale, 50 * scale, 125 * scale);
        ctx.bezierCurveTo(45 * scale, 128 * scale, 41 * scale, 128 * scale, 35 * scale, 124 * scale);
        ctx.bezierCurveTo(26.5 * scale, 110 * scale, 26.5 * scale, 110 * scale, 18 * scale, 96 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(44 * scale, 54 * scale);
        ctx.bezierCurveTo(50 * scale, 72 * scale, 50 * scale, 72 * scale, 56 * scale, 90 * scale);
        ctx.bezierCurveTo(58 * scale, 94 * scale, 59 * scale, 98 * scale, 53 * scale, 105 * scale);
        ctx.bezierCurveTo(47 * scale, 113 * scale, 43 * scale, 113 * scale, 36 * scale, 103 * scale);
        ctx.bezierCurveTo(29 * scale, 96 * scale, 31 * scale, 94 * scale, 35 * scale, 83 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.translate(-20 * scale, -20 * scale);
        ctx.globalAlpha = 1;
        ctx.save();
        ctx.translate(45 * scale, 384.5 * scale);
        round_rect(ctx, -15 * scale, -216.5 * scale, 30 * scale, 433 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(27 * scale, 572 * scale);
        ctx.bezierCurveTo(44 * scale, 580 * scale, 55 * scale, 576 * scale, 62 * scale, 572 * scale);
        ctx.bezierCurveTo(65 * scale, 585.5 * scale, 65 * scale, 585.5 * scale, 68 * scale, 599 * scale);
        ctx.bezierCurveTo(71 * scale, 612 * scale, 68 * scale, 618 * scale, 34 * scale, 616 * scale);
        ctx.bezierCurveTo(14 * scale, 615 * scale, 19 * scale, 607 * scale, 27 * scale, 573 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(32 * scale, 587 * scale);
        ctx.bezierCurveTo(39 * scale, 590 * scale, 48 * scale, 588 * scale, 54 * scale, 587 * scale);
        ctx.bezierCurveTo(57 * scale, 604 * scale, 59 * scale, 609 * scale, 46 * scale, 609 * scale);
        ctx.bezierCurveTo(27 * scale, 609 * scale, 28 * scale, 605 * scale, 33 * scale, 588 * scale);
        ctx.closePath();
        fill_path(ctx, color[5]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(31 * scale, 113 * scale);
        ctx.bezierCurveTo(27 * scale, 139 * scale, 27 * scale, 139 * scale, 23 * scale, 165 * scale);
        ctx.bezierCurveTo(18 * scale, 187 * scale, 39 * scale, 195 * scale, 57 * scale, 186 * scale);
        ctx.bezierCurveTo(68 * scale, 180 * scale, 65 * scale, 171 * scale, 62 * scale, 153 * scale);
        ctx.bezierCurveTo(58.5 * scale, 131 * scale, 58.5 * scale, 131 * scale, 55 * scale, 109 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(39 * scale, 139 * scale);
        ctx.bezierCurveTo(43 * scale, 139 * scale, 43 * scale, 139 * scale, 47 * scale, 139 * scale);
        ctx.bezierCurveTo(51 * scale, 158 * scale, 56 * scale, 176 * scale, 44 * scale, 175 * scale);
        ctx.bezierCurveTo(33 * scale, 177 * scale, 34 * scale, 167 * scale, 39 * scale, 140 * scale);
        ctx.closePath();
        fill_path(ctx, color[5]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(44 * scale, 29 * scale);
        ctx.bezierCurveTo(57 * scale, 63 * scale, 57 * scale, 63 * scale, 70 * scale, 97 * scale);
        ctx.bezierCurveTo(60 * scale, 111 * scale, 60 * scale, 111 * scale, 50 * scale, 125 * scale);
        ctx.bezierCurveTo(45 * scale, 128 * scale, 41 * scale, 128 * scale, 35 * scale, 124 * scale);
        ctx.bezierCurveTo(26.5 * scale, 110 * scale, 26.5 * scale, 110 * scale, 18 * scale, 96 * scale);
        ctx.closePath();
        fill_path(ctx, color[6], color[7], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(44 * scale, 54 * scale);
        ctx.bezierCurveTo(50 * scale, 72 * scale, 50 * scale, 72 * scale, 56 * scale, 90 * scale);
        ctx.bezierCurveTo(58 * scale, 94 * scale, 59 * scale, 98 * scale, 53 * scale, 105 * scale);
        ctx.bezierCurveTo(47 * scale, 113 * scale, 43 * scale, 113 * scale, 36 * scale, 103 * scale);
        ctx.bezierCurveTo(29 * scale, 96 * scale, 31 * scale, 94 * scale, 35 * scale, 83 * scale);
        ctx.closePath();
        fill_path(ctx, color[8]);
        return can;
    };

    function create_diamondspear(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 106 * scale;
        can.height = 681 * scale;
        ctx.translate(20 * scale, 20 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.save();
        ctx.translate(52.5 * scale, 395 * scale);
        ctx.rotate(0);
        round_rect(ctx, -11.5 * scale, -226 * scale, 23 * scale, 452 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(35 * scale, 588 * scale);
        ctx.bezierCurveTo(47 * scale, 596 * scale, 61 * scale, 594 * scale, 69 * scale, 588 * scale);
        ctx.bezierCurveTo(79 * scale, 615 * scale, 78 * scale, 632 * scale, 59 * scale, 643 * scale);
        ctx.bezierCurveTo(41 * scale, 650 * scale, 27 * scale, 632 * scale, 30 * scale, 610 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(52 * scale, 135 * scale);
        ctx.bezierCurveTo(61.5 * scale, 142 * scale, 61.5 * scale, 142 * scale, 71 * scale, 149 * scale);
        ctx.bezierCurveTo(69.5 * scale, 166 * scale, 69.5 * scale, 166 * scale, 68 * scale, 183 * scale);
        ctx.bezierCurveTo(60.5 * scale, 187.5 * scale, 60.5 * scale, 187.5 * scale, 53 * scale, 192 * scale);
        ctx.bezierCurveTo(45 * scale, 187.5 * scale, 45 * scale, 187.5 * scale, 37 * scale, 183 * scale);
        ctx.bezierCurveTo(35.5 * scale, 167 * scale, 35.5 * scale, 167 * scale, 34 * scale, 151 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(64 * scale, 150 * scale);
        ctx.bezierCurveTo(63 * scale, 164 * scale, 63 * scale, 164 * scale, 62 * scale, 178 * scale);
        ctx.bezierCurveTo(58 * scale, 181 * scale, 58 * scale, 181 * scale, 54 * scale, 184 * scale);
        ctx.bezierCurveTo(48.5 * scale, 181.5 * scale, 48.5 * scale, 181.5 * scale, 43 * scale, 179 * scale);
        ctx.bezierCurveTo(42 * scale, 164.5 * scale, 42 * scale, 164.5 * scale, 41 * scale, 150 * scale);
        ctx.bezierCurveTo(46 * scale, 152.5 * scale, 46 * scale, 152.5 * scale, 51 * scale, 155 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(52 * scale, 39 * scale);
        ctx.bezierCurveTo(65.5 * scale, 82 * scale, 65.5 * scale, 82 * scale, 79 * scale, 125 * scale);
        ctx.bezierCurveTo(66 * scale, 137.5 * scale, 66 * scale, 137.5 * scale, 53 * scale, 150 * scale);
        ctx.bezierCurveTo(39 * scale, 138 * scale, 39 * scale, 138 * scale, 25 * scale, 126 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(52 * scale, 64 * scale);
        ctx.bezierCurveTo(60 * scale, 92.5 * scale, 60 * scale, 92.5 * scale, 68 * scale, 121 * scale);
        ctx.bezierCurveTo(61 * scale, 127.5 * scale, 61 * scale, 127.5 * scale, 54 * scale, 134 * scale);
        ctx.bezierCurveTo(46.5 * scale, 127.5 * scale, 46.5 * scale, 127.5 * scale, 39 * scale, 121 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.translate(-20 * scale, -20 * scale);
        ctx.globalAlpha = 1;
        ctx.save();
        ctx.translate(52.5 * scale, 395 * scale);
        ctx.rotate(0);
        round_rect(ctx, -11.5 * scale, -226 * scale, 23 * scale, 452 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(35 * scale, 588 * scale);
        ctx.bezierCurveTo(47 * scale, 596 * scale, 61 * scale, 594 * scale, 69 * scale, 588 * scale);
        ctx.bezierCurveTo(79 * scale, 615 * scale, 78 * scale, 632 * scale, 59 * scale, 643 * scale);
        ctx.bezierCurveTo(41 * scale, 650 * scale, 27 * scale, 632 * scale, 30 * scale, 610 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(52 * scale, 135 * scale);
        ctx.bezierCurveTo(61.5 * scale, 142 * scale, 61.5 * scale, 142 * scale, 71 * scale, 149 * scale);
        ctx.bezierCurveTo(69.5 * scale, 166 * scale, 69.5 * scale, 166 * scale, 68 * scale, 183 * scale);
        ctx.bezierCurveTo(60.5 * scale, 187.5 * scale, 60.5 * scale, 187.5 * scale, 53 * scale, 192 * scale);
        ctx.bezierCurveTo(45 * scale, 187.5 * scale, 45 * scale, 187.5 * scale, 37 * scale, 183 * scale);
        ctx.bezierCurveTo(35.5 * scale, 167 * scale, 35.5 * scale, 167 * scale, 34 * scale, 151 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(64 * scale, 150 * scale);
        ctx.bezierCurveTo(63 * scale, 164 * scale, 63 * scale, 164 * scale, 62 * scale, 178 * scale);
        ctx.bezierCurveTo(58 * scale, 181 * scale, 58 * scale, 181 * scale, 54 * scale, 184 * scale);
        ctx.bezierCurveTo(48.5 * scale, 181.5 * scale, 48.5 * scale, 181.5 * scale, 43 * scale, 179 * scale);
        ctx.bezierCurveTo(42 * scale, 164.5 * scale, 42 * scale, 164.5 * scale, 41 * scale, 150 * scale);
        ctx.bezierCurveTo(46 * scale, 152.5 * scale, 46 * scale, 152.5 * scale, 51 * scale, 155 * scale);
        ctx.closePath();
        fill_path(ctx, color[5]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(52 * scale, 39 * scale);
        ctx.bezierCurveTo(65.5 * scale, 82 * scale, 65.5 * scale, 82 * scale, 79 * scale, 125 * scale);
        ctx.bezierCurveTo(66 * scale, 137.5 * scale, 66 * scale, 137.5 * scale, 53 * scale, 150 * scale);
        ctx.bezierCurveTo(39 * scale, 138 * scale, 39 * scale, 138 * scale, 25 * scale, 126 * scale);
        ctx.closePath();
        fill_path(ctx, color[6], color[7], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(52 * scale, 64 * scale);
        ctx.bezierCurveTo(60 * scale, 92.5 * scale, 60 * scale, 92.5 * scale, 68 * scale, 121 * scale);
        ctx.bezierCurveTo(61 * scale, 127.5 * scale, 61 * scale, 127.5 * scale, 54 * scale, 134 * scale);
        ctx.bezierCurveTo(46.5 * scale, 127.5 * scale, 46.5 * scale, 127.5 * scale, 39 * scale, 121 * scale);
        ctx.closePath();
        fill_path(ctx, color[8]);
        return can;
    };

    function create_amespear(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 108 * scale;
        can.height = 669 * scale;
        ctx.translate(20 * scale, 20 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.save();
        ctx.translate(54 * scale, 389.5 * scale);
        round_rect(ctx, -15 * scale, -228.5 * scale, 30 * scale, 457 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(35 * scale, 579 * scale);
        ctx.bezierCurveTo(47 * scale, 587 * scale, 61 * scale, 584 * scale, 71 * scale, 579 * scale);
        ctx.bezierCurveTo(75 * scale, 597.5 * scale, 75 * scale, 597.5 * scale, 79 * scale, 616 * scale);
        ctx.bezierCurveTo(66.5 * scale, 628 * scale, 66.5 * scale, 628 * scale, 54 * scale, 640 * scale);
        ctx.bezierCurveTo(41 * scale, 628.5 * scale, 41 * scale, 628.5 * scale, 28 * scale, 617 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(30 * scale, 141 * scale);
        ctx.bezierCurveTo(40 * scale, 136 * scale, 40 * scale, 136 * scale, 50 * scale, 131 * scale);
        ctx.bezierCurveTo(63 * scale, 136 * scale, 63 * scale, 136 * scale, 76 * scale, 141 * scale);
        ctx.bezierCurveTo(72.5 * scale, 161.5 * scale, 72.5 * scale, 161.5 * scale, 69 * scale, 182 * scale);
        ctx.bezierCurveTo(61.5 * scale, 186.5 * scale, 61.5 * scale, 186.5 * scale, 54 * scale, 191 * scale);
        ctx.bezierCurveTo(45 * scale, 186.5 * scale, 45 * scale, 186.5 * scale, 36 * scale, 182 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(42 * scale, 152 * scale);
        ctx.bezierCurveTo(53 * scale, 152 * scale, 53 * scale, 152 * scale, 64 * scale, 152 * scale);
        ctx.bezierCurveTo(62 * scale, 171 * scale, 62 * scale, 176 * scale, 55 * scale, 177 * scale);
        ctx.bezierCurveTo(42 * scale, 176 * scale, 45 * scale, 174 * scale, 42 * scale, 152 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(52 * scale, 28 * scale);
        ctx.bezierCurveTo(67.5 * scale, 55 * scale, 67.5 * scale, 55 * scale, 83 * scale, 82 * scale);
        ctx.bezierCurveTo(80 * scale, 106.5 * scale, 80 * scale, 106.5 * scale, 77 * scale, 131 * scale);
        ctx.bezierCurveTo(58 * scale, 147 * scale, 44 * scale, 141 * scale, 29 * scale, 131 * scale);
        ctx.bezierCurveTo(26.5 * scale, 106.5 * scale, 26.5 * scale, 106.5 * scale, 24 * scale, 82 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(53 * scale, 53 * scale);
        ctx.bezierCurveTo(61 * scale, 70 * scale, 61 * scale, 70 * scale, 69 * scale, 87 * scale);
        ctx.bezierCurveTo(67 * scale, 106 * scale, 67 * scale, 106 * scale, 65 * scale, 125 * scale);
        ctx.bezierCurveTo(54 * scale, 130 * scale, 51 * scale, 130 * scale, 41 * scale, 125 * scale);
        ctx.bezierCurveTo(39 * scale, 105 * scale, 39 * scale, 105 * scale, 37 * scale, 85 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.translate(-20 * scale, -20 * scale);
        ctx.globalAlpha = 1;
        ctx.save();
        ctx.translate(54 * scale, 389.5 * scale);
        ctx.rotate(0);
        round_rect(ctx, -15 * scale, -228.5 * scale, 30 * scale, 457 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(35 * scale, 579 * scale);
        ctx.bezierCurveTo(47 * scale, 587 * scale, 61 * scale, 584 * scale, 71 * scale, 579 * scale);
        ctx.bezierCurveTo(75 * scale, 597.5 * scale, 75 * scale, 597.5 * scale, 79 * scale, 616 * scale);
        ctx.bezierCurveTo(66.5 * scale, 628 * scale, 66.5 * scale, 628 * scale, 54 * scale, 640 * scale);
        ctx.bezierCurveTo(41 * scale, 628.5 * scale, 41 * scale, 628.5 * scale, 28 * scale, 617 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(30 * scale, 141 * scale);
        ctx.bezierCurveTo(40 * scale, 136 * scale, 40 * scale, 136 * scale, 50 * scale, 131 * scale);
        ctx.bezierCurveTo(63 * scale, 136 * scale, 63 * scale, 136 * scale, 76 * scale, 141 * scale);
        ctx.bezierCurveTo(72.5 * scale, 161.5 * scale, 72.5 * scale, 161.5 * scale, 69 * scale, 182 * scale);
        ctx.bezierCurveTo(61.5 * scale, 186.5 * scale, 61.5 * scale, 186.5 * scale, 54 * scale, 191 * scale);
        ctx.bezierCurveTo(45 * scale, 186.5 * scale, 45 * scale, 186.5 * scale, 36 * scale, 182 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(42 * scale, 152 * scale);
        ctx.bezierCurveTo(53 * scale, 152 * scale, 53 * scale, 152 * scale, 64 * scale, 152 * scale);
        ctx.bezierCurveTo(62 * scale, 171 * scale, 62 * scale, 176 * scale, 55 * scale, 177 * scale);
        ctx.bezierCurveTo(42 * scale, 176 * scale, 45 * scale, 174 * scale, 42 * scale, 152 * scale);
        ctx.closePath();
        fill_path(ctx, color[5]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(52 * scale, 28 * scale);
        ctx.bezierCurveTo(67.5 * scale, 55 * scale, 67.5 * scale, 55 * scale, 83 * scale, 82 * scale);
        ctx.bezierCurveTo(80 * scale, 106.5 * scale, 80 * scale, 106.5 * scale, 77 * scale, 131 * scale);
        ctx.bezierCurveTo(58 * scale, 147 * scale, 44 * scale, 141 * scale, 29 * scale, 131 * scale);
        ctx.bezierCurveTo(26.5 * scale, 106.5 * scale, 26.5 * scale, 106.5 * scale, 24 * scale, 82 * scale);
        ctx.closePath();
        fill_path(ctx, color[6], color[7], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(53 * scale, 53 * scale);
        ctx.bezierCurveTo(61 * scale, 70 * scale, 61 * scale, 70 * scale, 69 * scale, 87 * scale);
        ctx.bezierCurveTo(67 * scale, 106 * scale, 67 * scale, 106 * scale, 65 * scale, 125 * scale);
        ctx.bezierCurveTo(54 * scale, 130 * scale, 51 * scale, 130 * scale, 41 * scale, 125 * scale);
        ctx.bezierCurveTo(39 * scale, 105 * scale, 39 * scale, 105 * scale, 37 * scale, 85 * scale);
        ctx.closePath();
        fill_path(ctx, color[8]);
        return can;
    };

    function create_spear(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 81 * scale;
        can.height = 350 * scale;
        ctx.globalAlpha = draw_shadow ? 0.6 : 1;
        ctx.translate(0, 5 * scale);
        ctx.save();
        ctx.translate(35 * scale, 160 * scale);
        ctx.rotate(0);
        round_rect(ctx, -6 * scale, -100.5 * scale, 12 * scale, 240 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.translate(0, -5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.save();
        ctx.translate(-6 * scale, 11 * scale);
        ctx.moveTo(26.0714111328125 * scale, 50.9 * scale);
        ctx.bezierCurveTo(32.0714111328125 * scale, 35.892852783203125 * scale, 39.0714111328125 * scale, 18.892852783203125 * scale, 45.0714111328125 * scale, 7.892852783203125 * scale);
        ctx.bezierCurveTo(51.0714111328125 * scale, 13.892852783203125 * scale, 56.0714111328125 * scale, 36.892852783203125 * scale, 60.0714111328125 * scale, 50.892852783203125 * scale);
        ctx.bezierCurveTo(52.5714111328125 * scale, 58.892852783203125 * scale, 52.5714111328125 * scale, 58.892852783203125 * scale, 45.0714111328125 * scale, 66.89285278320312 * scale);
        ctx.bezierCurveTo(37.0714111328125 * scale, 58.892852783203125 * scale, 37.0714111328125 * scale, 58.892852783203125 * scale, 29.0714111328125 * scale, 50.892852783203125 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.restore();
        ctx.globalAlpha = 1;
        ctx.save();
        ctx.translate(0, -10 * scale);
        ctx.translate(45.0714111328125 * scale, 149.39285278320312 * scale);
        ctx.rotate(0);
        round_rect(ctx, -6 * scale, -94.5 * scale, 12 * scale, 250 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 6 * scale);
        ctx.translate(0, 0 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(29.0714111328125 * scale, 50.9 * scale);
        ctx.bezierCurveTo(32.0714111328125 * scale, 35.892852783203125 * scale, 39.0714111328125 * scale, 18.892852783203125 * scale, 45.0714111328125 * scale, 7.892852783203125 * scale);
        ctx.bezierCurveTo(51.0714111328125 * scale, 13.892852783203125 * scale, 56.0714111328125 * scale, 36.892852783203125 * scale, 60.0714111328125 * scale, 50.892852783203125 * scale);
        ctx.bezierCurveTo(52.5714111328125 * scale, 58.892852783203125 * scale, 52.5714111328125 * scale, 58.892852783203125 * scale, 45.0714111328125 * scale, 66.89285278320312 * scale);
        ctx.bezierCurveTo(37.0714111328125 * scale, 58.892852783203125 * scale, 37.0714111328125 * scale, 58.892852783203125 * scale, 29.0714111328125 * scale, 50.892852783203125 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 6 * scale);
        return can;
    };

    function create_dragon_spear(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 43 * scale;
        can.height = 209 * scale;
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(0, 10 * scale);
        ctx.translate(5 * scale, 5 * scale);
        ctx.save();
        ctx.translate(21 * scale, 102.5 * scale);
        round_rect(ctx, -4 * scale, -76.5 * scale, 8 * scale, 163 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.translate(0, 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(20 * scale, 10 * scale);
        ctx.bezierCurveTo(25 * scale, 25.5 * scale, 25 * scale, 25.5 * scale, 30 * scale, 41 * scale);
        ctx.bezierCurveTo(25.5 * scale, 38.5 * scale, 25.5 * scale, 38.5 * scale, 21 * scale, 36 * scale);
        ctx.bezierCurveTo(16 * scale, 38.5 * scale, 16 * scale, 38.5 * scale, 11 * scale, 41 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(21 * scale, 1 * scale);
        ctx.bezierCurveTo(28 * scale, 18 * scale, 28 * scale, 18 * scale, 35 * scale, 35 * scale);
        ctx.bezierCurveTo(28.5 * scale, 32 * scale, 28.5 * scale, 32 * scale, 22 * scale, 29 * scale);
        ctx.bezierCurveTo(14.5 * scale, 32.5 * scale, 14.5 * scale, 32.5 * scale, 7 * scale, 36 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(14 * scale, 146 * scale);
        ctx.bezierCurveTo(21 * scale, 146 * scale, 21 * scale, 146 * scale, 28 * scale, 146 * scale);
        ctx.bezierCurveTo(27.5 * scale, 147.5 * scale, 27.5 * scale, 147.5 * scale, 27 * scale, 149 * scale);
        ctx.bezierCurveTo(27 * scale, 160 * scale, 27 * scale, 160 * scale, 27 * scale, 171 * scale);
        ctx.bezierCurveTo(27.5 * scale, 171.5 * scale, 27.5 * scale, 171.5 * scale, 28 * scale, 172 * scale);
        ctx.bezierCurveTo(21 * scale, 172 * scale, 21 * scale, 172 * scale, 14 * scale, 172 * scale);
        ctx.bezierCurveTo(14 * scale, 171.5 * scale, 14 * scale, 171.5 * scale, 14 * scale, 171 * scale);
        ctx.bezierCurveTo(14.5 * scale, 171.5 * scale, 14.5 * scale, 171.5 * scale, 15 * scale, 172 * scale);
        ctx.bezierCurveTo(15 * scale, 160.5 * scale, 15 * scale, 160.5 * scale, 15 * scale, 149 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(21 * scale, 6 * scale);
        ctx.bezierCurveTo(26.5 * scale, 18.5 * scale, 26.5 * scale, 18.5 * scale, 32 * scale, 31 * scale);
        ctx.bezierCurveTo(27 * scale, 29 * scale, 27 * scale, 29 * scale, 22 * scale, 27 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.translate(0, -20 * scale);
        ctx.globalAlpha = 1;
        ctx.translate(0, 10 * scale);
        ctx.translate(-5 * scale, -5 * scale);
        ctx.save();
        ctx.translate(21 * scale, 102.5 * scale);
        round_rect(ctx, -4 * scale, -76.5 * scale, 8 * scale, 163 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 4 * scale);
        ctx.translate(0, 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(20 * scale, 10 * scale);
        ctx.bezierCurveTo(25 * scale, 25.5 * scale, 25 * scale, 25.5 * scale, 30 * scale, 41 * scale);
        ctx.bezierCurveTo(25.5 * scale, 38.5 * scale, 25.5 * scale, 38.5 * scale, 21 * scale, 36 * scale);
        ctx.bezierCurveTo(16 * scale, 38.5 * scale, 16 * scale, 38.5 * scale, 11 * scale, 41 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(21 * scale, 1 * scale);
        ctx.bezierCurveTo(28 * scale, 18 * scale, 28 * scale, 18 * scale, 35 * scale, 35 * scale);
        ctx.bezierCurveTo(28.5 * scale, 32 * scale, 28.5 * scale, 32 * scale, 22 * scale, 29 * scale);
        ctx.bezierCurveTo(14.5 * scale, 32.5 * scale, 14.5 * scale, 32.5 * scale, 7 * scale, 36 * scale);
        ctx.closePath();
        fill_path(ctx, color[5], color[6], 4 * scale);
        ctx.translate(0, 0 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(14 * scale, 146 * scale);
        ctx.bezierCurveTo(21 * scale, 146 * scale, 21 * scale, 146 * scale, 28 * scale, 146 * scale);
        ctx.bezierCurveTo(27.5 * scale, 147.5 * scale, 27.5 * scale, 147.5 * scale, 27 * scale, 149 * scale);
        ctx.bezierCurveTo(27 * scale, 160 * scale, 27 * scale, 160 * scale, 27 * scale, 171 * scale);
        ctx.bezierCurveTo(27.5 * scale, 171.5 * scale, 27.5 * scale, 171.5 * scale, 28 * scale, 172 * scale);
        ctx.bezierCurveTo(21 * scale, 172 * scale, 21 * scale, 172 * scale, 14 * scale, 172 * scale);
        ctx.bezierCurveTo(14 * scale, 171.5 * scale, 14 * scale, 171.5 * scale, 14 * scale, 171 * scale);
        ctx.bezierCurveTo(14.5 * scale, 171.5 * scale, 14.5 * scale, 171.5 * scale, 15 * scale, 172 * scale);
        ctx.bezierCurveTo(15 * scale, 160.5 * scale, 15 * scale, 160.5 * scale, 15 * scale, 149 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(21 * scale, 6 * scale);
        ctx.bezierCurveTo(26.5 * scale, 18.5 * scale, 26.5 * scale, 18.5 * scale, 32 * scale, 31 * scale);
        ctx.bezierCurveTo(27 * scale, 29 * scale, 27 * scale, 29 * scale, 22 * scale, 27 * scale);
        ctx.closePath();
        fill_path(ctx, color[8]);
        return can;
    };

    function create_plus_chest(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 200 * scale;
        can.height = 200 * scale;
        ctx.save();
        ctx.translate(112 * scale, 158 * scale);
        round_rect(ctx, -86.5 * scale, -86 * scale, 150 * scale, 35 * scale, 20 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.save();
        ctx.translate(170 * scale, 100 * scale);
        round_rect(ctx, -86.5 * scale, -86 * scale, 35 * scale, 150 * scale, 20 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        return can;
    };

    function create_chest_slot(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 118 * scale;
        can.height = 129 * scale;
        ctx.save();
        ctx.translate(90 * scale, 90 * scale);
        round_rect(ctx, -86.5 * scale, -86 * scale, 110 * scale, 110 * scale, 15 * scale);
        ctx.restore();
        fill_path(ctx, color[0], color[1], 4);
        ctx.save();
        round_rect(ctx, 30 * scale, 115 * scale, 60 * scale, 5 * scale, 15 * scale);
        ctx.restore();
        fill_path(ctx, color[2], color[3], 4);
        ctx.save();
        round_rect(ctx, 50 * scale, 117 * scale, 20 * scale, 10 * scale, 15 * scale);
        ctx.restore();
        fill_path(ctx, color[2]);
        return can;
    };

    function create_chest(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 165 * scale;
        can.height = 123 * scale;
        ctx.save();
        ctx.translate(81 * scale, 65 * scale);
        round_rect(ctx, -78 * scale, -54.5 * scale, 156 * scale, 109 * scale, 20 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.save();
        ctx.translate(81 * scale, 58 * scale);
        round_rect(ctx, -78 * scale, -54.5 * scale, 156 * scale, 109 * scale, 20 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 4);
        ctx.save();
        ctx.translate(81 * scale, 58 * scale);
        round_rect(ctx, -69 * scale, -47 * scale, 138 * scale, 93 * scale, 15 * scale);
        ctx.restore();
        fill_path(ctx, color[3], color[4], 4);
        ctx.save();
        ctx.translate(79 * scale, 54 * scale);
        round_rect(ctx, -34 * scale, -40 * scale, 68 * scale, 88 * scale, 13 * scale);
        ctx.restore();
        fill_path(ctx, undefined, color[5], 4);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(44 * scale, 13 * scale);
        ctx.bezierCurveTo(43.5 * scale, 55 * scale, 43.5 * scale, 55 * scale, 43 * scale, 101 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[6], 4);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(115 * scale, 13 * scale);
        ctx.bezierCurveTo(115 * scale, 56 * scale, 115 * scale, 56 * scale, 115 * scale, 101 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[6], 4);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(35 * scale, 6 * scale);
        ctx.bezierCurveTo(35 * scale, 56 * scale, 36 * scale, 109 * scale, 35 * scale, 110 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[7], 4);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(123 * scale, 6 * scale);
        ctx.bezierCurveTo(123 * scale, 56 * scale, 123 * scale, 56 * scale, 123 * scale, 110 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[7], 4);
        ctx.save();
        ctx.translate(79 * scale, 113 * scale);
        round_rect(ctx, -18 * scale, -2 * scale, 36 * scale, 4 * scale, 20 * scale);
        ctx.restore();
        fill_path(ctx, undefined, color[8], 4);
        ctx.save();
        ctx.translate(75 * scale, 118 * scale);
        round_rect(ctx, -6 * scale, -2.5 * scale, 20 * scale, 5 * scale, 20 * scale);
        ctx.restore();
        fill_path(ctx, color[8]);
        return can;
    };

    function create_bag(scale, useless, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 86 * scale;
        can.height = 45 * scale;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(15 * scale, 15 * scale);
        ctx.bezierCurveTo(16 * scale, 15 * scale, 19.5 * scale, 9 * scale, 24 * scale, 2 * scale);
        ctx.bezierCurveTo(41 * scale, 2 * scale, 41 * scale, 2 * scale, 58 * scale, 2 * scale);
        ctx.bezierCurveTo(64 * scale, 13 * scale, 61 * scale, 8 * scale, 65 * scale, 13 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[1], 4);
        ctx.save();
        ctx.translate(43 * scale, 27 * scale);
        ctx.rotate(0);
        round_rect(ctx, -40 * scale, -15 * scale, 80 * scale, 30 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[0], color[1], 4);
        ctx.save();
        ctx.translate(43 * scale, 33 * scale);
        ctx.rotate(0);
        round_rect(ctx, -17 * scale, -4.5 * scale, 34 * scale, 9 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[0], color[1], 4);
        return can;
    };

    function create_fur(scale, useless, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 92 * scale;
        can.height = 108 * scale;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(31 * scale, 10 * scale);
        ctx.bezierCurveTo(37 * scale, 2 * scale, 49 * scale, 0 * scale, 61 * scale, 15 * scale);
        ctx.bezierCurveTo(81 * scale, 31 * scale, 78 * scale, 25 * scale, 79 * scale, 37 * scale);
        ctx.bezierCurveTo(76 * scale, 44 * scale, 81 * scale, 56 * scale, 85 * scale, 63 * scale);
        ctx.bezierCurveTo(91 * scale, 71 * scale, 90 * scale, 78 * scale, 83 * scale, 84 * scale);
        ctx.bezierCurveTo(60 * scale, 98 * scale, 67 * scale, 95 * scale, 57 * scale, 102 * scale);
        ctx.bezierCurveTo(47 * scale, 106 * scale, 43 * scale, 106 * scale, 31 * scale, 98 * scale);
        ctx.bezierCurveTo(22 * scale, 91 * scale, 17 * scale, 89 * scale, 7 * scale, 84 * scale);
        ctx.bezierCurveTo(1 * scale, 77 * scale, 4 * scale, 73 * scale, 7 * scale, 60 * scale);
        ctx.bezierCurveTo(11 * scale, 50 * scale, 5 * scale, 32 * scale, 15 * scale, 27 * scale);
        ctx.bezierCurveTo(26 * scale, 18 * scale, 26 * scale, 24 * scale, 31 * scale, 10 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[1], 4);
        return can;
    };

    function create_verified(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 60 * scale;
        can.height = 60 * scale;
        ctx.translate(-25 * scale, -25 * scale);
        ctx.translate(0, 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(24 * scale, 50 * scale);
        ctx.bezierCurveTo(32.5 * scale, 54.5 * scale, 32.5 * scale, 54.5 * scale, 41 * scale, 59 * scale);
        ctx.bezierCurveTo(57 * scale, 47 * scale, 57 * scale, 47 * scale, 73 * scale, 35 * scale);
        ctx.bezierCurveTo(57 * scale, 53 * scale, 57 * scale, 53 * scale, 41 * scale, 71 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.translate(0, -5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(24 * scale, 50 * scale);
        ctx.bezierCurveTo(32.5 * scale, 54.5 * scale, 32.5 * scale, 54.5 * scale, 41 * scale, 59 * scale);
        ctx.bezierCurveTo(57 * scale, 47 * scale, 57 * scale, 47 * scale, 73 * scale, 35 * scale);
        ctx.bezierCurveTo(57 * scale, 53 * scale, 57 * scale, 53 * scale, 41 * scale, 71 * scale);
        ctx.closePath();
        fill_path(ctx, color[1]);
        return can;
    };

    function create_earmuff(scale, useless, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 151 * scale;
        can.height = 80 * scale;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(133 * scale, 54 * scale);
        ctx.bezierCurveTo(136 * scale, 18 * scale, 129 * scale, 18 * scale, 114 * scale, 13 * scale);
        ctx.bezierCurveTo(51 * scale, 0 * scale, 36 * scale, 16 * scale, 34 * scale, 16 * scale);
        ctx.bezierCurveTo(8 * scale, 28 * scale, 22 * scale, 56 * scale, 21 * scale, 57 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[3], 4);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(130 * scale, 40 * scale);
        ctx.bezierCurveTo(132 * scale, 35 * scale, 132 * scale, 30 * scale, 132 * scale, 29 * scale);
        ctx.bezierCurveTo(145 * scale, 38 * scale, 144 * scale, 43 * scale, 137 * scale, 54 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[1], 4);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(20 * scale, 33 * scale);
        ctx.bezierCurveTo(24 * scale, 44 * scale, 215 * scale, 39 * scale, 23 * scale, 44 * scale);
        ctx.bezierCurveTo(19 * scale, 49 * scale, 19 * scale, 49 * scale, 15 * scale, 54 * scale);
        ctx.bezierCurveTo(4 * scale, 43 * scale, 10 * scale, 35 * scale, 20 * scale, 32 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[1], 4);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(18 * scale, 52 * scale);
        ctx.bezierCurveTo(24 * scale, 31 * scale, 34 * scale, 25 * scale, 75 * scale, 23 * scale);
        ctx.bezierCurveTo(130 * scale, 24 * scale, 129 * scale, 32 * scale, 134 * scale, 51 * scale);
        ctx.bezierCurveTo(138 * scale, 70 * scale, 126 * scale, 72 * scale, 90 * scale, 73 * scale);
        ctx.bezierCurveTo(18 * scale, 72 * scale, 15 * scale, 68 * scale, 18 * scale, 54 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[1], 4);
        return can;
    };

    function create_cap_scarf(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 138 * scale;
        can.height = 133 * scale;
        ctx.globalAlpha = draw_shadow ? 0.3 : 1;
        ctx.translate(0, 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(26 * scale, 79.640625 * scale);
        ctx.bezierCurveTo(13 * scale, 84.640625 * scale, 9 * scale, 86.640625 * scale, 7 * scale, 78.640625 * scale);
        ctx.bezierCurveTo(6 * scale, 69.640625 * scale, 15 * scale, 67.640625 * scale, 31 * scale, 62.640625 * scale);
        ctx.bezierCurveTo(63 * scale, 55.640625 * scale, 85 * scale, 57.640625 * scale, 104 * scale, 63.640625 * scale);
        ctx.bezierCurveTo(131 * scale, 69.640625 * scale, 132 * scale, 71.640625 * scale, 131 * scale, 78.640625 * scale);
        ctx.bezierCurveTo(131 * scale, 91.640625 * scale, 112 * scale, 80.640625 * scale, 91 * scale, 75.640625 * scale);
        ctx.bezierCurveTo(51 * scale, 70.640625 * scale, 45 * scale, 74.640625 * scale, 28 * scale, 78.640625 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(8 * scale, 82.640625 * scale);
        ctx.bezierCurveTo(40 * scale, 107.640625 * scale, 53 * scale, 104.640625 * scale, 67 * scale, 106.640625 * scale);
        ctx.bezierCurveTo(101 * scale, 103.640625 * scale, 117 * scale, 93.640625 * scale, 127 * scale, 84.640625 * scale);
        ctx.bezierCurveTo(135 * scale, 95.640625 * scale, 131 * scale, 107.640625 * scale, 110 * scale, 118.640625 * scale);
        ctx.bezierCurveTo(78 * scale, 129.640625 * scale, 67 * scale, 130.640625 * scale, 27 * scale, 119.640625 * scale);
        ctx.bezierCurveTo(0 * scale, 105.640625 * scale, 8 * scale, 83.640625 * scale, 10 * scale, 84.640625 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(0, -5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(8 * scale, 73.640625 * scale);
        ctx.bezierCurveTo(7 * scale, 23.640625 * scale, 33 * scale, 19.640625 * scale, 71 * scale, 17.640625 * scale);
        ctx.bezierCurveTo(129 * scale, 19.640625 * scale, 130 * scale, 45.640625 * scale, 130 * scale, 76.640625 * scale);
        ctx.bezierCurveTo(90 * scale, 63.640625 * scale, 85 * scale, 63.640625 * scale, 73 * scale, 63.640625 * scale);
        ctx.bezierCurveTo(38 * scale, 63.640625 * scale, 33 * scale, 66.640625 * scale, 8 * scale, 73.640625 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(72 * scale, 28.640625 * scale);
        ctx.bezierCurveTo(51 * scale, 25.640625 * scale, 56 * scale, 7.640625 * scale, 70 * scale, 5.640625 * scale);
        ctx.bezierCurveTo(94 * scale, 7.640625 * scale, 87 * scale, 29.640625 * scale, 72 * scale, 28.640625 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(51 * scale, 26.640625 * scale);
        ctx.bezierCurveTo(42 * scale, 29.640625 * scale, 43 * scale, 31.640625 * scale, 42 * scale, 37.640625 * scale);
        fill_path(ctx, undefined, color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(90 * scale, 26.640625 * scale);
        ctx.bezierCurveTo(100 * scale, 28.640625 * scale, 98 * scale, 34.640625 * scale, 99 * scale, 38.640625 * scale);
        fill_path(ctx, undefined, color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(26 * scale, 79.640625 * scale);
        ctx.bezierCurveTo(13 * scale, 84.640625 * scale, 9 * scale, 86.640625 * scale, 7 * scale, 78.640625 * scale);
        ctx.bezierCurveTo(6 * scale, 69.640625 * scale, 15 * scale, 67.640625 * scale, 31 * scale, 62.640625 * scale);
        ctx.bezierCurveTo(63 * scale, 55.640625 * scale, 85 * scale, 57.640625 * scale, 104 * scale, 63.640625 * scale);
        ctx.bezierCurveTo(131 * scale, 69.640625 * scale, 132 * scale, 71.640625 * scale, 131 * scale, 78.640625 * scale);
        ctx.bezierCurveTo(131 * scale, 91.640625 * scale, 112 * scale, 80.640625 * scale, 91 * scale, 75.640625 * scale);
        ctx.bezierCurveTo(51 * scale, 70.640625 * scale, 45 * scale, 74.640625 * scale, 28 * scale, 78.640625 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(8 * scale, 82.640625 * scale);
        ctx.bezierCurveTo(40 * scale, 107.640625 * scale, 53 * scale, 104.640625 * scale, 67 * scale, 106.640625 * scale);
        ctx.bezierCurveTo(101 * scale, 103.640625 * scale, 117 * scale, 93.640625 * scale, 127 * scale, 84.640625 * scale);
        ctx.bezierCurveTo(135 * scale, 95.640625 * scale, 131 * scale, 107.640625 * scale, 110 * scale, 118.640625 * scale);
        ctx.bezierCurveTo(78 * scale, 129.640625 * scale, 67 * scale, 130.640625 * scale, 27 * scale, 119.640625 * scale);
        ctx.bezierCurveTo(0 * scale, 105.640625 * scale, 8 * scale, 83.640625 * scale, 10 * scale, 84.640625 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 4 * scale);
        return can;
    };

    function create_spike(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        var w = scale * 170;
        var h = scale * 172;
        var x = w / 2;
        var y = h / 2;
        can.width = w;
        can.height = h;
        ctx.translate(x, y + (7 * scale));
        ctx.globalAlpha = draw_shadow ? 0.5 : 0;
        circle(ctx, 0, 0, 60 * scale);
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(0, -7 * scale);
        ctx.save();
        for (var i = 0; i < 10; i++) {
            ctx.rotate(Math.PI / 5);
            ctx.save();
            ctx.translate(65 * scale, 0);
            round_regular_polygon(ctx, 3, 20 * scale, 4 * scale);
            fill_path(ctx, color[1], color[2], 4 * scale);
            ctx.restore();
        }
        ctx.restore();
        circle(ctx, 0, 0, 60 * scale, 0);
        fill_path(ctx, color[3], color[4], 4 * scale);
        circle(ctx, 0, 0, 40 * scale);
        fill_path(ctx, color[5]);
        circle(ctx, 0, 0, 25 * scale);
        fill_path(ctx, color[6], color[7], 8 * scale);
        return can;
    };

    function create_spiketimer(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        var w = scale * 170;
        var h = scale * 172;
        var x = w / 2;
        var y = h / 2;
        can.width = w;
        can.height = h;
        ctx.translate(x, y);
        ctx.save();
        for (var i = 0; i < 10; i++) {
            ctx.rotate(Math.PI / 5);
            ctx.save();
            ctx.translate(65 * scale, 0);
            round_regular_polygon(ctx, 3, 18 * scale, 4 * scale);
            fill_path(ctx, color[0]);
            ctx.restore();
        }
        ctx.restore();
        circle(ctx, 0, 0, 40 * scale, 0);
        fill_path(ctx, undefined, color[0], 6 * scale);
        circle(ctx, 0, 0, 20 * scale, 0);
        fill_path(ctx, color[0]);
        return can;
    };

    function create_spike_stone(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 170 * scale;
        can.height = 170 * scale;
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(0, 5 * scale);
        ctx.save();
        ctx.translate(85 * scale, 88 * scale);
        ctx.rotate(1.4);
        round_regular_polygon(ctx, 7, 60 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(85 * scale, 80 * scale);
        for (var i = 0; i < 10; i++) {
            ctx.rotate(Math.PI / 5);
            ctx.save();
            ctx.translate(65 * scale, 0);
            round_regular_polygon(ctx, 3, 21 * scale, 4 * scale);
            fill_path(ctx, color[1], color[2], 4 * scale);
            ctx.restore();
        }
        ctx.save();
        ctx.translate(0 * scale, 0 * scale);
        ctx.rotate(1.4);
        round_regular_polygon(ctx, 7, 60 * scale, 10 * scale);
        fill_path(ctx, color[3], color[4], 4 * scale);
        ctx.rotate(0.64);
        round_regular_polygon(ctx, 7, 40 * scale, 10 * scale);
        fill_path(ctx, color[5], color[6], 4 * scale);
        ctx.rotate(0.12);
        round_regular_polygon(ctx, 7, 23 * scale, 5 * scale);
        ctx.restore();
        fill_path(ctx, color[7]);
        return can;
    };

    function create_spike_gold(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 170 * scale;
        can.height = 170 * scale;
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(0, 3 * scale);
        ctx.save();
        ctx.translate(85 * scale, 95 * scale);
        ctx.rotate(1.4);
        round_regular_polygon(ctx, 7, 60 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(85 * scale, 82 * scale);
        for (var i = 0; i < 10; i++) {
            ctx.rotate(Math.PI / 5);
            ctx.save();
            ctx.translate(65 * scale, 0);
            round_regular_polygon(ctx, 3, 21 * scale, 4 * scale);
            fill_path(ctx, color[1], color[2], 4 * scale);
            ctx.restore();
        }
        ctx.save();
        ctx.translate(0 * scale, 0 * scale);
        ctx.rotate(1);
        round_regular_polygon(ctx, 8, 60 * scale, 10 * scale);
        fill_path(ctx, color[3], color[4], 4 * scale);
        ctx.rotate(0.56);
        round_regular_polygon(ctx, 8, 40 * scale, 10 * scale);
        fill_path(ctx, color[5], color[6], 4 * scale);
        ctx.rotate(0.28);
        round_regular_polygon(ctx, 8, 28 * scale, 8 * scale);
        fill_path(ctx, color[7]);
        ctx.restore();
        return can;
    };

    function create_spike_diamond(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 170 * scale;
        can.height = 170 * scale;
        ctx.translate(0, 3 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.save();
        ctx.translate(85 * scale, 95 * scale);
        ctx.rotate(1.4);
        round_regular_polygon(ctx, 7, 60 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(85 * scale, 82 * scale);
        for (var i = 0; i < 10; i++) {
            ctx.rotate(Math.PI / 5);
            ctx.save();
            ctx.translate(65 * scale, 0);
            round_regular_polygon(ctx, 3, 21 * scale, 4 * scale);
            fill_path(ctx, color[1], color[2], 4 * scale);
            ctx.restore();
        }
        ctx.save();
        ctx.translate(0 * scale, 0 * scale);
        ctx.rotate(0.2);
        round_regular_polygon(ctx, 9, 60 * scale, 10 * scale);
        fill_path(ctx, color[3], color[4], 4 * scale);
        ctx.rotate(-0.32);
        round_regular_polygon(ctx, 9, 38 * scale, 10 * scale);
        fill_path(ctx, color[5], color[6], 4 * scale);
        ctx.rotate(0.68);
        round_regular_polygon(ctx, 9, 20 * scale, 8 * scale);
        fill_path(ctx, color[7], color[8], 6 * scale);
        ctx.restore();
        return can;
    };

    function create_hammer(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 69 * scale;
        can.height = 120 * scale;
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.save();
        ctx.translate(30 * scale, 84 * scale);
        round_rect(ctx, -6 * scale, -66.5 * scale, 8 * scale, 100 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.save();
        ctx.translate(30 * scale, 45 * scale);
        round_rect(ctx, -9.5 * scale, -6.5 * scale, 16 * scale, 13 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.save();
        ctx.translate(30 * scale, 17 * scale);
        round_rect(ctx, -7.5 * scale, -5.5 * scale, 12 * scale, 11 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.save();
        ctx.translate(30 * scale, 31 * scale);
        round_rect(ctx, -26 * scale, -14.5 * scale, 52 * scale, 29 * scale, 5 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.save();
        ctx.translate(36 * scale, 79.140625 * scale);
        round_rect(ctx, -6 * scale, -66.5 * scale, 8 * scale, 100 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 3 * scale);
        ctx.save();
        ctx.translate(35 * scale, 40.140625 * scale);
        round_rect(ctx, -9.5 * scale, -6.5 * scale, 16 * scale, 13 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[3], color[4], 3 * scale);
        ctx.save();
        ctx.translate(35 * scale, 12.140625 * scale);
        round_rect(ctx, -7.5 * scale, -5.5 * scale, 12 * scale, 11 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[3], color[4], 3 * scale);
        ctx.save();
        ctx.translate(34.5 * scale, 26.140625 * scale);
        round_rect(ctx, -26 * scale, -14.5 * scale, 52 * scale, 29 * scale, 5 * scale);
        ctx.restore();
        fill_path(ctx, color[3], color[4], 3 * scale);
        return can;
    };

    function create_clock_day(scale) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 321 * scale;
        can.height = 345 * scale;
        ctx.translate(0, 5 * scale);
        ctx.translate(0, 20 * scale);
        circle(ctx, 160.5 * scale, 159.5 * scale, 156.39595138242822 * scale);
        fill_path(ctx, "#322413", "#322413", 4 * scale);
        ctx.translate(0, -20 * scale);
        circle(ctx, 160.5 * scale, 159.5 * scale, 156.39595138242822 * scale);
        fill_path(ctx, "#392C16", "#5E3E1A", 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(31.999969482421875 * scale, 163.07290649414062 * scale);
        ctx.bezierCurveTo(22.999969482421875 * scale, 67.07290649414062 * scale, 106 * scale, 20.072906494140625 * scale, 162 * scale, 23.072906494140625 * scale);
        ctx.bezierCurveTo(269.9999694824219 * scale, 31.072906494140625 * scale, 292.9999694824219 * scale, 120.07290649414062 * scale, 294.9999694824219 * scale, 161.07290649414062 * scale);
        ctx.bezierCurveTo(165.49996948242188 * scale, 162.07290649414062 * scale, 165.49996948242188 * scale, 162.07290649414062 * scale, 35.999969482421875 * scale, 163.07290649414062 * scale);
        ctx.closePath();
        fill_path(ctx, "#12432D");
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(32.999969482421875 * scale, 165.07290649414062 * scale);
        ctx.bezierCurveTo(16.999969482421875 * scale, 221.07290649414062 * scale, 85 * scale, 289.0729064941406 * scale, 156 * scale, 294.0729064941406 * scale);
        ctx.bezierCurveTo(263.9999694824219 * scale, 293.0729064941406 * scale, 295.9999694824219 * scale, 199.07290649414062 * scale, 294.9999694824219 * scale, 159.07290649414062 * scale);
        ctx.closePath();
        fill_path(ctx, "#3A2A0D");
        circle(ctx, 161 * scale, 158.07290649414062 * scale, 133.4053971921676 * scale);
        fill_path(ctx, undefined, "#5E3E1A", 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(31.999969482421875 * scale, 161.62844848632812 * scale);
        ctx.bezierCurveTo(162.49996948242188 * scale, 161.62844848632812 * scale, 162.49996948242188 * scale, 161.62844848632812 * scale, 292.9999694824219 * scale, 161.62844848632812 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, "#5E3E1A", 12 * scale);
        ctx.translate(0, 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(66 * scale, 158.29513549804688 * scale);
        ctx.bezierCurveTo(86 * scale, 158.29513549804688 * scale, 86 * scale, 158.29513549804688 * scale, 106 * scale, 158.29513549804688 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, "#c7a726", 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(57.999969482421875 * scale, 117.29513549804688 * scale);
        ctx.bezierCurveTo(85 * scale, 128.29513549804688 * scale, 85 * scale, 128.29513549804688 * scale, 113 * scale, 139.29513549804688 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, "#c7a726", 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(95 * scale, 90.29513549804688 * scale);
        ctx.bezierCurveTo(112 * scale, 105.79513549804688 * scale, 112 * scale, 105.79513549804688 * scale, 129 * scale, 121.29513549804688 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, "#c7a726", 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(116 * scale, 52.850677490234375 * scale);
        ctx.bezierCurveTo(130 * scale, 83.85067749023438 * scale, 130 * scale, 83.85067749023438 * scale, 144 * scale, 114.85067749023438 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, "#c7a726", 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(159 * scale, 61.295135498046875 * scale);
        ctx.bezierCurveTo(160.49996948242188 * scale, 92.29513549804688 * scale, 160.49996948242188 * scale, 92.29513549804688 * scale, 160 * scale, 123.29513549804688 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, "#c7a726", 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(203 * scale, 51.295135498046875 * scale);
        ctx.bezierCurveTo(190.49996948242188 * scale, 83.29513549804688 * scale, 190.49996948242188 * scale, 83.29513549804688 * scale, 176 * scale, 115.29513549804688 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, "#c7a726", 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(225 * scale, 89.29513549804688 * scale);
        ctx.bezierCurveTo(210.49996948242188 * scale, 104.79513549804688 * scale, 210.49996948242188 * scale, 104.79513549804688 * scale, 194 * scale, 120.29513549804688 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, "#c7a726", 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(266.9999694824219 * scale, 112.29513549804688 * scale);
        ctx.bezierCurveTo(233.49996948242188 * scale, 127.29513549804688 * scale, 233.49996948242188 * scale, 127.29513549804688 * scale, 199 * scale, 142.29513549804688 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, "#c7a726", 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(256.9999694824219 * scale, 155.29513549804688 * scale);
        ctx.bezierCurveTo(238.49996948242188 * scale, 156.29513549804688 * scale, 238.49996948242188 * scale, 156.29513549804688 * scale, 219 * scale, 157.29513549804688 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, "#c7a726", 12 * scale);
        ctx.translate(0, -8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(66 * scale, 158.29513549804688 * scale);
        ctx.bezierCurveTo(86 * scale, 158.29513549804688 * scale, 86 * scale, 158.29513549804688 * scale, 106 * scale, 158.29513549804688 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, "#EDCE4F", 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(57.999969482421875 * scale, 117.29513549804688 * scale);
        ctx.bezierCurveTo(85 * scale, 128.29513549804688 * scale, 85 * scale, 128.29513549804688 * scale, 113 * scale, 139.29513549804688 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, "#EDCE4F", 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(95 * scale, 90.29513549804688 * scale);
        ctx.bezierCurveTo(112 * scale, 105.79513549804688 * scale, 112 * scale, 105.79513549804688 * scale, 129 * scale, 121.29513549804688 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, "#EDCE4F", 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(116 * scale, 52.850677490234375 * scale);
        ctx.bezierCurveTo(130 * scale, 83.85067749023438 * scale, 130 * scale, 83.85067749023438 * scale, 144 * scale, 114.85067749023438 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, "#EDCE4F", 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(159 * scale, 61.295135498046875 * scale);
        ctx.bezierCurveTo(160.49996948242188 * scale, 92.29513549804688 * scale, 160.49996948242188 * scale, 92.29513549804688 * scale, 160 * scale, 123.29513549804688 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, "#EDCE4F", 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(203 * scale, 51.295135498046875 * scale);
        ctx.bezierCurveTo(190.49996948242188 * scale, 83.29513549804688 * scale, 190.49996948242188 * scale, 83.29513549804688 * scale, 176 * scale, 115.29513549804688 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, "#EDCE4F", 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(225 * scale, 89.29513549804688 * scale);
        ctx.bezierCurveTo(210.49996948242188 * scale, 104.79513549804688 * scale, 210.49996948242188 * scale, 104.79513549804688 * scale, 194 * scale, 120.29513549804688 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, "#EDCE4F", 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(266.9999694824219 * scale, 112.29513549804688 * scale);
        ctx.bezierCurveTo(233.49996948242188 * scale, 127.29513549804688 * scale, 233.49996948242188 * scale, 127.29513549804688 * scale, 199 * scale, 142.29513549804688 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, "#EDCE4F", 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(256.9999694824219 * scale, 155.29513549804688 * scale);
        ctx.bezierCurveTo(238.49996948242188 * scale, 156.29513549804688 * scale, 238.49996948242188 * scale, 156.29513549804688 * scale, 219 * scale, 157.29513549804688 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, "#EDCE4F", 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(94.00003051757812 * scale, 164.40341186523438 * scale);
        ctx.bezierCurveTo(162.50003051757812 * scale, 164.40341186523438 * scale, 230.00003051757812 * scale, 165.40341186523438 * scale, 231.00003051757812 * scale, 164.40341186523438 * scale);
        ctx.bezierCurveTo(214.00003051757812 * scale, 267.4034118652344 * scale, 92.00003051757812 * scale, 243.40341186523438 * scale, 93.00003051757812 * scale, 165.40341186523438 * scale);
        ctx.closePath();
        fill_path(ctx, "#704618", "#5D3D1A", 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(96 * scale, 166 * scale);
        ctx.bezierCurveTo(88 * scale, 117 * scale, 129 * scale, 92 * scale, 161 * scale, 91 * scale);
        ctx.bezierCurveTo(201 * scale, 90 * scale, 223 * scale, 121 * scale, 230 * scale, 161 * scale);
        ctx.closePath();
        fill_path(ctx, "#ECBE35", "#EDCE4F", 8 * scale);
        circle(ctx, 160.00003051757812 * scale, 166.49432373046875 * scale, 28.30194339616981 * scale);
        fill_path(ctx, "#392C16", "#5E3E1A", 10 * scale);
        return can;
    };

    function create_clock_night(scale) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 321 * scale;
        can.height = 345 * scale;
        ctx.translate(0, 5 * scale);
        ctx.translate(0, 20 * scale);
        circle(ctx, 160.5 * scale, 159.5 * scale, 156.39595138242822 * scale);
        fill_path(ctx, "#322413", "#322413", 4 * scale);
        ctx.translate(0, -20 * scale);
        circle(ctx, 160.5 * scale, 159.5 * scale, 156.39595138242822 * scale);
        fill_path(ctx, "#392C16", "#5E3E1A", 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(31.999969482421875 * scale, 163.07290649414062 * scale);
        ctx.bezierCurveTo(22.999969482421875 * scale, 67.07290649414062 * scale, 106 * scale, 20.072906494140625 * scale, 162 * scale, 23.072906494140625 * scale);
        ctx.bezierCurveTo(269.9999694824219 * scale, 31.072906494140625 * scale, 292.9999694824219 * scale, 120.07290649414062 * scale, 294.9999694824219 * scale, 161.07290649414062 * scale);
        ctx.bezierCurveTo(165.49996948242188 * scale, 162.07290649414062 * scale, 165.49996948242188 * scale, 162.07290649414062 * scale, 35.999969482421875 * scale, 163.07290649414062 * scale);
        ctx.closePath();
        fill_path(ctx, "#3A2A0D");
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(32.999969482421875 * scale, 165.07290649414062 * scale);
        ctx.bezierCurveTo(16.999969482421875 * scale, 221.07290649414062 * scale, 85 * scale, 289.0729064941406 * scale, 156 * scale, 294.0729064941406 * scale);
        ctx.bezierCurveTo(263.9999694824219 * scale, 293.0729064941406 * scale, 295.9999694824219 * scale, 199.07290649414062 * scale, 294.9999694824219 * scale, 159.07290649414062 * scale);
        ctx.closePath();
        fill_path(ctx, "#071A1B");
        circle(ctx, 161 * scale, 158.07290649414062 * scale, 133.4053971921676 * scale);
        fill_path(ctx, undefined, "#5E3E1A", 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(31.999969482421875 * scale, 161.62844848632812 * scale);
        ctx.bezierCurveTo(162.49996948242188 * scale, 161.62844848632812 * scale, 162.49996948242188 * scale, 161.62844848632812 * scale, 292.9999694824219 * scale, 161.62844848632812 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, "#5E3E1A", 12 * scale);
        ctx.translate(0, 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(66 * scale, 158.29513549804688 * scale);
        ctx.bezierCurveTo(86 * scale, 158.29513549804688 * scale, 86 * scale, 158.29513549804688 * scale, 106 * scale, 158.29513549804688 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, "#281C08", 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(57.999969482421875 * scale, 117.29513549804688 * scale);
        ctx.bezierCurveTo(85 * scale, 128.29513549804688 * scale, 85 * scale, 128.29513549804688 * scale, 113 * scale, 139.29513549804688 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, "#281C08", 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(95 * scale, 90.29513549804688 * scale);
        ctx.bezierCurveTo(112 * scale, 105.79513549804688 * scale, 112 * scale, 105.79513549804688 * scale, 129 * scale, 121.29513549804688 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, "#281C08", 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(116 * scale, 52.850677490234375 * scale);
        ctx.bezierCurveTo(130 * scale, 83.85067749023438 * scale, 130 * scale, 83.85067749023438 * scale, 144 * scale, 114.85067749023438 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, "#281C08", 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(159 * scale, 61.295135498046875 * scale);
        ctx.bezierCurveTo(160.49996948242188 * scale, 92.29513549804688 * scale, 160.49996948242188 * scale, 92.29513549804688 * scale, 160 * scale, 123.29513549804688 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, "#281C08", 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(203 * scale, 51.295135498046875 * scale);
        ctx.bezierCurveTo(190.49996948242188 * scale, 83.29513549804688 * scale, 190.49996948242188 * scale, 83.29513549804688 * scale, 176 * scale, 115.29513549804688 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, "#281C08", 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(225 * scale, 89.29513549804688 * scale);
        ctx.bezierCurveTo(210.49996948242188 * scale, 104.79513549804688 * scale, 210.49996948242188 * scale, 104.79513549804688 * scale, 194 * scale, 120.29513549804688 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, "#281C08", 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(266.9999694824219 * scale, 112.29513549804688 * scale);
        ctx.bezierCurveTo(233.49996948242188 * scale, 127.29513549804688 * scale, 233.49996948242188 * scale, 127.29513549804688 * scale, 199 * scale, 142.29513549804688 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, "#281C08", 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(256.9999694824219 * scale, 155.29513549804688 * scale);
        ctx.bezierCurveTo(238.49996948242188 * scale, 156.29513549804688 * scale, 238.49996948242188 * scale, 156.29513549804688 * scale, 219 * scale, 157.29513549804688 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, "#281C08", 12 * scale);
        ctx.translate(0, -8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(66 * scale, 158.29513549804688 * scale);
        ctx.bezierCurveTo(86 * scale, 158.29513549804688 * scale, 86 * scale, 158.29513549804688 * scale, 106 * scale, 158.29513549804688 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, "#5E3C10", 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(57.999969482421875 * scale, 117.29513549804688 * scale);
        ctx.bezierCurveTo(85 * scale, 128.29513549804688 * scale, 85 * scale, 128.29513549804688 * scale, 113 * scale, 139.29513549804688 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, "#5E3C10", 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(95 * scale, 90.29513549804688 * scale);
        ctx.bezierCurveTo(112 * scale, 105.79513549804688 * scale, 112 * scale, 105.79513549804688 * scale, 129 * scale, 121.29513549804688 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, "#5E3C10", 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(116 * scale, 52.850677490234375 * scale);
        ctx.bezierCurveTo(130 * scale, 83.85067749023438 * scale, 130 * scale, 83.85067749023438 * scale, 144 * scale, 114.85067749023438 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, "#5E3C10", 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(159 * scale, 61.295135498046875 * scale);
        ctx.bezierCurveTo(160.49996948242188 * scale, 92.29513549804688 * scale, 160.49996948242188 * scale, 92.29513549804688 * scale, 160 * scale, 123.29513549804688 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, "#5E3C10", 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(203 * scale, 51.295135498046875 * scale);
        ctx.bezierCurveTo(190.49996948242188 * scale, 83.29513549804688 * scale, 190.49996948242188 * scale, 83.29513549804688 * scale, 176 * scale, 115.29513549804688 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, "#5E3C10", 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(225 * scale, 89.29513549804688 * scale);
        ctx.bezierCurveTo(210.49996948242188 * scale, 104.79513549804688 * scale, 210.49996948242188 * scale, 104.79513549804688 * scale, 194 * scale, 120.29513549804688 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, "#5E3C10", 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(266.9999694824219 * scale, 112.29513549804688 * scale);
        ctx.bezierCurveTo(233.49996948242188 * scale, 127.29513549804688 * scale, 233.49996948242188 * scale, 127.29513549804688 * scale, 199 * scale, 142.29513549804688 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, "#5E3C10", 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(256.9999694824219 * scale, 155.29513549804688 * scale);
        ctx.bezierCurveTo(238.49996948242188 * scale, 156.29513549804688 * scale, 238.49996948242188 * scale, 156.29513549804688 * scale, 219 * scale, 157.29513549804688 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, "#5E3C10", 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(96 * scale, 166 * scale);
        ctx.bezierCurveTo(88 * scale, 117 * scale, 129 * scale, 92 * scale, 161 * scale, 91 * scale);
        ctx.bezierCurveTo(201 * scale, 90 * scale, 223 * scale, 121 * scale, 230 * scale, 161 * scale);
        ctx.closePath();
        fill_path(ctx, "#704618", "#5D3D1A", 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(94.00003051757812 * scale, 164.40341186523438 * scale);
        ctx.bezierCurveTo(162.50003051757812 * scale, 164.40341186523438 * scale, 230.00003051757812 * scale, 165.40341186523438 * scale, 231.00003051757812 * scale, 164.40341186523438 * scale);
        ctx.bezierCurveTo(214.00003051757812 * scale, 267.4034118652344 * scale, 92.00003051757812 * scale, 243.40341186523438 * scale, 93.00003051757812 * scale, 165.40341186523438 * scale);
        ctx.closePath();
        fill_path(ctx, "#E1DDD5", "#EAE7E4", 8 * scale);
        circle(ctx, 160.00003051757812 * scale, 166.49432373046875 * scale, 28.30194339616981 * scale);
        fill_path(ctx, "#392C16", "#5E3E1A", 10 * scale);
        return can;
    };

    function create_arrow_clock(scale) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 321 * scale;
        can.height = 345 * scale;
        ctx.translate(0, 5 * scale);
        circle(ctx, 161.00003051757812 * scale, 165.40341186523438 * scale, 20.808652046684813 * scale);
        fill_path(ctx, "#C09D6F", "#A37943", 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(162.00003051757812 * scale, 48.403411865234375 * scale);
        ctx.bezierCurveTo(172.50003051757812 * scale, 67.40341186523438 * scale, 172.50003051757812 * scale, 67.40341186523438 * scale, 183.00003051757812 * scale, 86.40341186523438 * scale);
        ctx.bezierCurveTo(160.50003051757812 * scale, 86.40341186523438 * scale, 160.50003051757812 * scale, 86.40341186523438 * scale, 138.00003051757812 * scale, 86.40341186523438 * scale);
        ctx.closePath();
        fill_path(ctx, "#C09D6F", "#A37943", 10 * scale);
        ctx.save();
        ctx.translate(161.50003051757812 * scale, 117.90341186523438 * scale);
        round_rect(ctx, -5.5 * scale, -37.5 * scale, 11 * scale, 75 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, "#C09D6F", "#A37943", 10 * scale);
        ctx.save();
        ctx.translate(162.00003051757812 * scale, 78.90341186523438 * scale);
        round_rect(ctx, -10 * scale, -5.5 * scale, 20 * scale, 11 * scale, 1 * scale);
        ctx.restore();
        fill_path(ctx, "#C09D6F");
        circle(ctx, 161.00003051757812 * scale, 163.6761474609375 * scale, 17.08800749063506 * scale);
        fill_path(ctx, "#C09D6F");
        return can;
    };

    function create_island(scale, color, i) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        if (i == 0) {
            can.width = 566 * scale;
            can.height = 429 * scale;
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(312.625 * scale, 39.046875 * scale);
            ctx.bezierCurveTo(456.625 * scale, 60.046875 * scale, 521.625 * scale, 134.046875 * scale, 528.625 * scale, 199.046875 * scale);
            ctx.bezierCurveTo(540.625 * scale, 298.046875 * scale, 491.625 * scale, 364.046875 * scale, 405.625 * scale, 394.046875 * scale);
            ctx.bezierCurveTo(270.625 * scale, 429.046875 * scale, 182.625 * scale, 395.046875 * scale, 100.625 * scale, 344.046875 * scale);
            ctx.bezierCurveTo(15.625 * scale, 283.046875 * scale, 20.625 * scale, 195.046875 * scale, 33.625 * scale, 158.046875 * scale);
            ctx.bezierCurveTo(56.625 * scale, 80.046875 * scale, 102.625 * scale, 46.046875 * scale, 183.625 * scale, 33.046875 * scale);
            ctx.bezierCurveTo(225.625 * scale, 25.046875 * scale, 270.625 * scale, 30.046875 * scale, 312.625 * scale, 39.046875 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
        } else if (i == 1) {
            var can = document.createElement("canvas");
            var ctx = can.getContext("2d");
            can.width = 511 * scale;
            can.height = 408 * scale;
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(141.625 * scale, 49.296875 * scale);
            ctx.bezierCurveTo(225.625 * scale, 10.296875 * scale, 320.625 * scale, 16.296875 * scale, 390.625 * scale, 39.296875 * scale);
            ctx.bezierCurveTo(476.625 * scale, 71.296875 * scale, 483.625 * scale, 142.296875 * scale, 486.625 * scale, 197.296875 * scale);
            ctx.bezierCurveTo(491.625 * scale, 289.296875 * scale, 462.625 * scale, 317.296875 * scale, 417.625 * scale, 351.296875 * scale);
            ctx.bezierCurveTo(367.625 * scale, 385.296875 * scale, 313.625 * scale, 404.296875 * scale, 218.625 * scale, 395.296875 * scale);
            ctx.bezierCurveTo(108.625 * scale, 381.296875 * scale, 81.625 * scale, 350.296875 * scale, 52.625 * scale, 305.296875 * scale);
            ctx.bezierCurveTo(16.625 * scale, 244.296875 * scale, 23.625 * scale, 171.296875 * scale, 37.625 * scale, 145.296875 * scale);
            ctx.bezierCurveTo(65.625 * scale, 84.296875 * scale, 97.625 * scale, 74.296875 * scale, 141.625 * scale, 49.296875 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
        } else if (i == 2) {
            var can = document.createElement("canvas");
            var ctx = can.getContext("2d");
            can.width = 504 * scale;
            can.height = 408 * scale;
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(153.625 * scale, 46.296875 * scale);
            ctx.bezierCurveTo(271.625 * scale, 17.296875 * scale, 345.625 * scale, 35.296875 * scale, 410.625 * scale, 71.296875 * scale);
            ctx.bezierCurveTo(473.625 * scale, 109.296875 * scale, 478.625 * scale, 167.296875 * scale, 473.625 * scale, 205.296875 * scale);
            ctx.bezierCurveTo(462.625 * scale, 295.296875 * scale, 438.625 * scale, 316.296875 * scale, 388.625 * scale, 345.296875 * scale);
            ctx.bezierCurveTo(331.625 * scale, 374.296875 * scale, 273.625 * scale, 392.296875 * scale, 180.625 * scale, 387.296875 * scale);
            ctx.bezierCurveTo(111.625 * scale, 380.296875 * scale, 86.625 * scale, 360.296875 * scale, 51.625 * scale, 309.296875 * scale);
            ctx.bezierCurveTo(23.625 * scale, 267.296875 * scale, 25.625 * scale, 226.296875 * scale, 27.625 * scale, 175.296875 * scale);
            ctx.bezierCurveTo(37.625 * scale, 99.296875 * scale, 88.625 * scale, 57.296875 * scale, 153.625 * scale, 46.296875 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
        }
        return can;
    };

    function create_sign(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 450 * scale;
        can.height = 260 * scale;
        ctx.translate(10 * scale, 10 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(20 * scale, 20 * scale);
        round_rect(ctx, 0, 0, 400 * scale, 220 * scale, 30 * scale);
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(-20 * scale, -20 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(9 * scale, 5 * scale);
        ctx.bezierCurveTo(381 * scale, 2 * scale, 197 * scale, 4.5 * scale, 385 * scale, 4 * scale);
        ctx.bezierCurveTo(397 * scale, 4 * scale, 401 * scale, 4 * scale, 399 * scale, 23 * scale);
        ctx.bezierCurveTo(367 * scale, 27 * scale, 367 * scale, 27 * scale, 335 * scale, 31 * scale);
        ctx.bezierCurveTo(366.5 * scale, 33.5 * scale, 366.5 * scale, 33.5 * scale, 398 * scale, 36 * scale);
        ctx.bezierCurveTo(398 * scale, 41.5 * scale, 398 * scale, 41.5 * scale, 398 * scale, 47 * scale);
        ctx.bezierCurveTo(398 * scale, 56 * scale, 399 * scale, 56 * scale, 386 * scale, 56 * scale);
        ctx.bezierCurveTo(200.5 * scale, 56.5 * scale, 200.5 * scale, 56.5 * scale, 15 * scale, 57 * scale);
        ctx.bezierCurveTo(2 * scale, 55 * scale, 4 * scale, 52 * scale, 4 * scale, 43 * scale);
        ctx.bezierCurveTo(4 * scale, 30.5 * scale, 4 * scale, 30.5 * scale, 4 * scale, 18 * scale);
        ctx.bezierCurveTo(16 * scale, 18.5 * scale, 16 * scale, 18.5 * scale, 28 * scale, 19 * scale);
        ctx.bezierCurveTo(18.5 * scale, 12 * scale, 18.5 * scale, 12 * scale, 9 * scale, 5 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[1], 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(5 * scale, 70 * scale);
        ctx.bezierCurveTo(5 * scale, 58 * scale, 5 * scale, 55 * scale, 17 * scale, 57 * scale);
        ctx.bezierCurveTo(203 * scale, 57 * scale, 203 * scale, 57 * scale, 389 * scale, 57 * scale);
        ctx.bezierCurveTo(400 * scale, 57 * scale, 400 * scale, 59 * scale, 400 * scale, 69 * scale);
        ctx.bezierCurveTo(400.5 * scale, 83.5 * scale, 400.5 * scale, 83.5 * scale, 401 * scale, 98 * scale);
        ctx.bezierCurveTo(402 * scale, 108 * scale, 401 * scale, 108 * scale, 388 * scale, 108 * scale);
        ctx.bezierCurveTo(201.5 * scale, 108 * scale, 201.5 * scale, 108 * scale, 15 * scale, 108 * scale);
        ctx.bezierCurveTo(1 * scale, 106 * scale, 5 * scale, 106 * scale, 5 * scale, 87 * scale);
        ctx.bezierCurveTo(33 * scale, 84.5 * scale, 33 * scale, 84.5 * scale, 61 * scale, 82 * scale);
        ctx.bezierCurveTo(33.5 * scale, 76.5 * scale, 33.5 * scale, 76.5 * scale, 6 * scale, 71 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[1], 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(19 * scale, 158 * scale);
        ctx.bezierCurveTo(2 * scale, 159 * scale, 4 * scale, 156 * scale, 5 * scale, 118 * scale);
        ctx.bezierCurveTo(4 * scale, 110 * scale, 6 * scale, 107 * scale, 26 * scale, 109 * scale);
        ctx.bezierCurveTo(206.5 * scale, 109 * scale, 206.5 * scale, 109 * scale, 387 * scale, 109 * scale);
        ctx.bezierCurveTo(400 * scale, 108 * scale, 400 * scale, 108 * scale, 398 * scale, 127 * scale);
        ctx.bezierCurveTo(384.5 * scale, 130 * scale, 384.5 * scale, 130 * scale, 371 * scale, 133 * scale);
        ctx.bezierCurveTo(385.5 * scale, 138 * scale, 385.5 * scale, 138 * scale, 400 * scale, 143 * scale);
        ctx.bezierCurveTo(402 * scale, 156 * scale, 402 * scale, 162 * scale, 385 * scale, 160 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[1], 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(4 * scale, 183 * scale);
        ctx.bezierCurveTo(1 * scale, 163 * scale, 4 * scale, 158 * scale, 28 * scale, 161 * scale);
        ctx.bezierCurveTo(207.5 * scale, 161 * scale, 207.5 * scale, 161 * scale, 387 * scale, 161 * scale);
        ctx.bezierCurveTo(401 * scale, 159 * scale, 400 * scale, 164 * scale, 400 * scale, 177 * scale);
        ctx.bezierCurveTo(364.5 * scale, 184 * scale, 364.5 * scale, 184 * scale, 329 * scale, 191 * scale);
        ctx.bezierCurveTo(364.5 * scale, 192.5 * scale, 364.5 * scale, 192.5 * scale, 400 * scale, 194 * scale);
        ctx.bezierCurveTo(403 * scale, 209 * scale, 401 * scale, 214 * scale, 385 * scale, 213 * scale);
        ctx.bezierCurveTo(201.5 * scale, 213 * scale, 201.5 * scale, 213 * scale, 18 * scale, 213 * scale);
        ctx.bezierCurveTo(3 * scale, 213 * scale, 2 * scale, 213 * scale, 4 * scale, 198 * scale);
        ctx.bezierCurveTo(12.5 * scale, 193 * scale, 12.5 * scale, 193 * scale, 21 * scale, 188 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[1], 12 * scale);
        circle(ctx, 41 * scale, 30 * scale, 14.7648230602334 * scale);
        fill_path(ctx, color[3], color[1], 12 * scale);
        circle(ctx, 369 * scale, 30 * scale, 15.556349186104045 * scale);
        fill_path(ctx, color[3], color[1], 12 * scale);
        circle(ctx, 364 * scale, 190 * scale, 15.620499351813308 * scale);
        fill_path(ctx, color[3], color[1], 12 * scale);
        circle(ctx, 41 * scale, 186 * scale, 15.556349186104045 * scale);
        fill_path(ctx, color[3], color[1], 12 * scale);
        return can;
    };

    function create_sign_button(scale, color, i) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 450 * scale;
        can.height = 260 * scale;
        ctx.translate(10 * scale, 10 * scale);
        if (i == 1) {
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(9 * scale, 5 * scale);
            ctx.bezierCurveTo(381 * scale, 2 * scale, 197 * scale, 4.5 * scale, 385 * scale, 4 * scale);
            ctx.bezierCurveTo(397 * scale, 4 * scale, 401 * scale, 4 * scale, 399 * scale, 23 * scale);
            ctx.bezierCurveTo(367 * scale, 27 * scale, 367 * scale, 27 * scale, 335 * scale, 31 * scale);
            ctx.bezierCurveTo(366.5 * scale, 33.5 * scale, 366.5 * scale, 33.5 * scale, 398 * scale, 36 * scale);
            ctx.bezierCurveTo(398 * scale, 41.5 * scale, 398 * scale, 41.5 * scale, 398 * scale, 47 * scale);
            ctx.bezierCurveTo(398 * scale, 56 * scale, 399 * scale, 56 * scale, 386 * scale, 56 * scale);
            ctx.bezierCurveTo(200.5 * scale, 56.5 * scale, 200.5 * scale, 56.5 * scale, 15 * scale, 57 * scale);
            ctx.bezierCurveTo(2 * scale, 55 * scale, 4 * scale, 52 * scale, 4 * scale, 43 * scale);
            ctx.bezierCurveTo(4 * scale, 30.5 * scale, 4 * scale, 30.5 * scale, 4 * scale, 18 * scale);
            ctx.bezierCurveTo(16 * scale, 18.5 * scale, 16 * scale, 18.5 * scale, 28 * scale, 19 * scale);
            ctx.bezierCurveTo(18.5 * scale, 12 * scale, 18.5 * scale, 12 * scale, 9 * scale, 5 * scale);
            ctx.closePath();
            fill_path(ctx, color[3], color[3], 32 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(5 * scale, 70 * scale);
            ctx.bezierCurveTo(5 * scale, 58 * scale, 5 * scale, 55 * scale, 17 * scale, 57 * scale);
            ctx.bezierCurveTo(203 * scale, 57 * scale, 203 * scale, 57 * scale, 389 * scale, 57 * scale);
            ctx.bezierCurveTo(400 * scale, 57 * scale, 400 * scale, 59 * scale, 400 * scale, 69 * scale);
            ctx.bezierCurveTo(400.5 * scale, 83.5 * scale, 400.5 * scale, 83.5 * scale, 401 * scale, 98 * scale);
            ctx.bezierCurveTo(402 * scale, 108 * scale, 401 * scale, 108 * scale, 388 * scale, 108 * scale);
            ctx.bezierCurveTo(201.5 * scale, 108 * scale, 201.5 * scale, 108 * scale, 15 * scale, 108 * scale);
            ctx.bezierCurveTo(1 * scale, 106 * scale, 5 * scale, 106 * scale, 5 * scale, 87 * scale);
            ctx.bezierCurveTo(33 * scale, 84.5 * scale, 33 * scale, 84.5 * scale, 61 * scale, 82 * scale);
            ctx.bezierCurveTo(33.5 * scale, 76.5 * scale, 33.5 * scale, 76.5 * scale, 6 * scale, 71 * scale);
            ctx.closePath();
            fill_path(ctx, color[3], color[3], 32 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(19 * scale, 158 * scale);
            ctx.bezierCurveTo(2 * scale, 159 * scale, 4 * scale, 156 * scale, 5 * scale, 118 * scale);
            ctx.bezierCurveTo(4 * scale, 110 * scale, 6 * scale, 107 * scale, 26 * scale, 109 * scale);
            ctx.bezierCurveTo(206.5 * scale, 109 * scale, 206.5 * scale, 109 * scale, 387 * scale, 109 * scale);
            ctx.bezierCurveTo(400 * scale, 108 * scale, 400 * scale, 108 * scale, 398 * scale, 127 * scale);
            ctx.bezierCurveTo(384.5 * scale, 130 * scale, 384.5 * scale, 130 * scale, 371 * scale, 133 * scale);
            ctx.bezierCurveTo(385.5 * scale, 138 * scale, 385.5 * scale, 138 * scale, 400 * scale, 143 * scale);
            ctx.bezierCurveTo(402 * scale, 156 * scale, 402 * scale, 162 * scale, 385 * scale, 160 * scale);
            ctx.closePath();
            fill_path(ctx, color[3], color[3], 32 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(4 * scale, 183 * scale);
            ctx.bezierCurveTo(1 * scale, 163 * scale, 4 * scale, 158 * scale, 28 * scale, 161 * scale);
            ctx.bezierCurveTo(207.5 * scale, 161 * scale, 207.5 * scale, 161 * scale, 387 * scale, 161 * scale);
            ctx.bezierCurveTo(401 * scale, 159 * scale, 400 * scale, 164 * scale, 400 * scale, 177 * scale);
            ctx.bezierCurveTo(364.5 * scale, 184 * scale, 364.5 * scale, 184 * scale, 329 * scale, 191 * scale);
            ctx.bezierCurveTo(364.5 * scale, 192.5 * scale, 364.5 * scale, 192.5 * scale, 400 * scale, 194 * scale);
            ctx.bezierCurveTo(403 * scale, 209 * scale, 401 * scale, 214 * scale, 385 * scale, 213 * scale);
            ctx.bezierCurveTo(201.5 * scale, 213 * scale, 201.5 * scale, 213 * scale, 18 * scale, 213 * scale);
            ctx.bezierCurveTo(3 * scale, 213 * scale, 2 * scale, 213 * scale, 4 * scale, 198 * scale);
            ctx.bezierCurveTo(12.5 * scale, 193 * scale, 12.5 * scale, 193 * scale, 21 * scale, 188 * scale);
            ctx.closePath();
            fill_path(ctx, color[3], color[3], 32 * scale);
            circle(ctx, 41 * scale, 30 * scale, 14.7648230602334 * scale);
            fill_path(ctx, color[3], color[3], 32 * scale);
            circle(ctx, 369 * scale, 30 * scale, 15.556349186104045 * scale);
            fill_path(ctx, color[3], color[3], 32 * scale);
            circle(ctx, 364 * scale, 190 * scale, 15.620499351813308 * scale);
            fill_path(ctx, color[3], color[3], 32 * scale);
            circle(ctx, 41 * scale, 186 * scale, 15.556349186104045 * scale);
            fill_path(ctx, color[3], color[3], 32 * scale);
        } else if (i == 2) {
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(9 * scale, 5 * scale);
            ctx.bezierCurveTo(381 * scale, 2 * scale, 197 * scale, 4.5 * scale, 385 * scale, 4 * scale);
            ctx.bezierCurveTo(397 * scale, 4 * scale, 401 * scale, 4 * scale, 399 * scale, 23 * scale);
            ctx.bezierCurveTo(367 * scale, 27 * scale, 367 * scale, 27 * scale, 335 * scale, 31 * scale);
            ctx.bezierCurveTo(366.5 * scale, 33.5 * scale, 366.5 * scale, 33.5 * scale, 398 * scale, 36 * scale);
            ctx.bezierCurveTo(398 * scale, 41.5 * scale, 398 * scale, 41.5 * scale, 398 * scale, 47 * scale);
            ctx.bezierCurveTo(398 * scale, 56 * scale, 399 * scale, 56 * scale, 386 * scale, 56 * scale);
            ctx.bezierCurveTo(200.5 * scale, 56.5 * scale, 200.5 * scale, 56.5 * scale, 15 * scale, 57 * scale);
            ctx.bezierCurveTo(2 * scale, 55 * scale, 4 * scale, 52 * scale, 4 * scale, 43 * scale);
            ctx.bezierCurveTo(4 * scale, 30.5 * scale, 4 * scale, 30.5 * scale, 4 * scale, 18 * scale);
            ctx.bezierCurveTo(16 * scale, 18.5 * scale, 16 * scale, 18.5 * scale, 28 * scale, 19 * scale);
            ctx.bezierCurveTo(18.5 * scale, 12 * scale, 18.5 * scale, 12 * scale, 9 * scale, 5 * scale);
            ctx.closePath();
            fill_path(ctx, color[3], color[3], 32 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(5 * scale, 70 * scale);
            ctx.bezierCurveTo(5 * scale, 58 * scale, 5 * scale, 55 * scale, 17 * scale, 57 * scale);
            ctx.bezierCurveTo(203 * scale, 57 * scale, 203 * scale, 57 * scale, 389 * scale, 57 * scale);
            ctx.bezierCurveTo(400 * scale, 57 * scale, 400 * scale, 59 * scale, 400 * scale, 69 * scale);
            ctx.bezierCurveTo(400.5 * scale, 83.5 * scale, 400.5 * scale, 83.5 * scale, 401 * scale, 98 * scale);
            ctx.bezierCurveTo(402 * scale, 108 * scale, 401 * scale, 108 * scale, 388 * scale, 108 * scale);
            ctx.bezierCurveTo(201.5 * scale, 108 * scale, 201.5 * scale, 108 * scale, 15 * scale, 108 * scale);
            ctx.bezierCurveTo(1 * scale, 106 * scale, 5 * scale, 106 * scale, 5 * scale, 87 * scale);
            ctx.bezierCurveTo(33 * scale, 84.5 * scale, 33 * scale, 84.5 * scale, 61 * scale, 82 * scale);
            ctx.bezierCurveTo(33.5 * scale, 76.5 * scale, 33.5 * scale, 76.5 * scale, 6 * scale, 71 * scale);
            ctx.closePath();
            fill_path(ctx, color[3], color[3], 32 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(19 * scale, 158 * scale);
            ctx.bezierCurveTo(2 * scale, 159 * scale, 4 * scale, 156 * scale, 5 * scale, 118 * scale);
            ctx.bezierCurveTo(4 * scale, 110 * scale, 6 * scale, 107 * scale, 26 * scale, 109 * scale);
            ctx.bezierCurveTo(206.5 * scale, 109 * scale, 206.5 * scale, 109 * scale, 387 * scale, 109 * scale);
            ctx.bezierCurveTo(400 * scale, 108 * scale, 400 * scale, 108 * scale, 398 * scale, 127 * scale);
            ctx.bezierCurveTo(384.5 * scale, 130 * scale, 384.5 * scale, 130 * scale, 371 * scale, 133 * scale);
            ctx.bezierCurveTo(385.5 * scale, 138 * scale, 385.5 * scale, 138 * scale, 400 * scale, 143 * scale);
            ctx.bezierCurveTo(402 * scale, 156 * scale, 402 * scale, 162 * scale, 385 * scale, 160 * scale);
            ctx.closePath();
            fill_path(ctx, color[3], color[3], 32 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(4 * scale, 183 * scale);
            ctx.bezierCurveTo(1 * scale, 163 * scale, 4 * scale, 158 * scale, 28 * scale, 161 * scale);
            ctx.bezierCurveTo(207.5 * scale, 161 * scale, 207.5 * scale, 161 * scale, 387 * scale, 161 * scale);
            ctx.bezierCurveTo(401 * scale, 159 * scale, 400 * scale, 164 * scale, 400 * scale, 177 * scale);
            ctx.bezierCurveTo(364.5 * scale, 184 * scale, 364.5 * scale, 184 * scale, 329 * scale, 191 * scale);
            ctx.bezierCurveTo(364.5 * scale, 192.5 * scale, 364.5 * scale, 192.5 * scale, 400 * scale, 194 * scale);
            ctx.bezierCurveTo(403 * scale, 209 * scale, 401 * scale, 214 * scale, 385 * scale, 213 * scale);
            ctx.bezierCurveTo(201.5 * scale, 213 * scale, 201.5 * scale, 213 * scale, 18 * scale, 213 * scale);
            ctx.bezierCurveTo(3 * scale, 213 * scale, 2 * scale, 213 * scale, 4 * scale, 198 * scale);
            ctx.bezierCurveTo(12.5 * scale, 193 * scale, 12.5 * scale, 193 * scale, 21 * scale, 188 * scale);
            ctx.closePath();
            fill_path(ctx, color[3], color[3], 32 * scale);
            circle(ctx, 41 * scale, 30 * scale, 14.7648230602334 * scale);
            fill_path(ctx, color[3], color[3], 32 * scale);
            circle(ctx, 369 * scale, 30 * scale, 15.556349186104045 * scale);
            fill_path(ctx, color[3], color[3], 32 * scale);
            circle(ctx, 364 * scale, 190 * scale, 15.620499351813308 * scale);
            fill_path(ctx, color[3], color[3], 32 * scale);
            circle(ctx, 41 * scale, 186 * scale, 15.556349186104045 * scale);
            fill_path(ctx, color[3], color[3], 32 * scale);
        }
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(9 * scale, 5 * scale);
        ctx.bezierCurveTo(381 * scale, 2 * scale, 197 * scale, 4.5 * scale, 385 * scale, 4 * scale);
        ctx.bezierCurveTo(397 * scale, 4 * scale, 401 * scale, 4 * scale, 399 * scale, 23 * scale);
        ctx.bezierCurveTo(367 * scale, 27 * scale, 367 * scale, 27 * scale, 335 * scale, 31 * scale);
        ctx.bezierCurveTo(366.5 * scale, 33.5 * scale, 366.5 * scale, 33.5 * scale, 398 * scale, 36 * scale);
        ctx.bezierCurveTo(398 * scale, 41.5 * scale, 398 * scale, 41.5 * scale, 398 * scale, 47 * scale);
        ctx.bezierCurveTo(398 * scale, 56 * scale, 399 * scale, 56 * scale, 386 * scale, 56 * scale);
        ctx.bezierCurveTo(200.5 * scale, 56.5 * scale, 200.5 * scale, 56.5 * scale, 15 * scale, 57 * scale);
        ctx.bezierCurveTo(2 * scale, 55 * scale, 4 * scale, 52 * scale, 4 * scale, 43 * scale);
        ctx.bezierCurveTo(4 * scale, 30.5 * scale, 4 * scale, 30.5 * scale, 4 * scale, 18 * scale);
        ctx.bezierCurveTo(16 * scale, 18.5 * scale, 16 * scale, 18.5 * scale, 28 * scale, 19 * scale);
        ctx.bezierCurveTo(18.5 * scale, 12 * scale, 18.5 * scale, 12 * scale, 9 * scale, 5 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[0], 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(5 * scale, 70 * scale);
        ctx.bezierCurveTo(5 * scale, 58 * scale, 5 * scale, 55 * scale, 17 * scale, 57 * scale);
        ctx.bezierCurveTo(203 * scale, 57 * scale, 203 * scale, 57 * scale, 389 * scale, 57 * scale);
        ctx.bezierCurveTo(400 * scale, 57 * scale, 400 * scale, 59 * scale, 400 * scale, 69 * scale);
        ctx.bezierCurveTo(400.5 * scale, 83.5 * scale, 400.5 * scale, 83.5 * scale, 401 * scale, 98 * scale);
        ctx.bezierCurveTo(402 * scale, 108 * scale, 401 * scale, 108 * scale, 388 * scale, 108 * scale);
        ctx.bezierCurveTo(201.5 * scale, 108 * scale, 201.5 * scale, 108 * scale, 15 * scale, 108 * scale);
        ctx.bezierCurveTo(1 * scale, 106 * scale, 5 * scale, 106 * scale, 5 * scale, 87 * scale);
        ctx.bezierCurveTo(33 * scale, 84.5 * scale, 33 * scale, 84.5 * scale, 61 * scale, 82 * scale);
        ctx.bezierCurveTo(33.5 * scale, 76.5 * scale, 33.5 * scale, 76.5 * scale, 6 * scale, 71 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[0], 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(19 * scale, 158 * scale);
        ctx.bezierCurveTo(2 * scale, 159 * scale, 4 * scale, 156 * scale, 5 * scale, 118 * scale);
        ctx.bezierCurveTo(4 * scale, 110 * scale, 6 * scale, 107 * scale, 26 * scale, 109 * scale);
        ctx.bezierCurveTo(206.5 * scale, 109 * scale, 206.5 * scale, 109 * scale, 387 * scale, 109 * scale);
        ctx.bezierCurveTo(400 * scale, 108 * scale, 400 * scale, 108 * scale, 398 * scale, 127 * scale);
        ctx.bezierCurveTo(384.5 * scale, 130 * scale, 384.5 * scale, 130 * scale, 371 * scale, 133 * scale);
        ctx.bezierCurveTo(385.5 * scale, 138 * scale, 385.5 * scale, 138 * scale, 400 * scale, 143 * scale);
        ctx.bezierCurveTo(402 * scale, 156 * scale, 402 * scale, 162 * scale, 385 * scale, 160 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[0], 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(4 * scale, 183 * scale);
        ctx.bezierCurveTo(1 * scale, 163 * scale, 4 * scale, 158 * scale, 28 * scale, 161 * scale);
        ctx.bezierCurveTo(207.5 * scale, 161 * scale, 207.5 * scale, 161 * scale, 387 * scale, 161 * scale);
        ctx.bezierCurveTo(401 * scale, 159 * scale, 400 * scale, 164 * scale, 400 * scale, 177 * scale);
        ctx.bezierCurveTo(364.5 * scale, 184 * scale, 364.5 * scale, 184 * scale, 329 * scale, 191 * scale);
        ctx.bezierCurveTo(364.5 * scale, 192.5 * scale, 364.5 * scale, 192.5 * scale, 400 * scale, 194 * scale);
        ctx.bezierCurveTo(403 * scale, 209 * scale, 401 * scale, 214 * scale, 385 * scale, 213 * scale);
        ctx.bezierCurveTo(201.5 * scale, 213 * scale, 201.5 * scale, 213 * scale, 18 * scale, 213 * scale);
        ctx.bezierCurveTo(3 * scale, 213 * scale, 2 * scale, 213 * scale, 4 * scale, 198 * scale);
        ctx.bezierCurveTo(12.5 * scale, 193 * scale, 12.5 * scale, 193 * scale, 21 * scale, 188 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[0], 12 * scale);
        circle(ctx, 41 * scale, 30 * scale, 14.7648230602334 * scale);
        fill_path(ctx, color[2], color[0], 12 * scale);
        circle(ctx, 369 * scale, 30 * scale, 15.556349186104045 * scale);
        fill_path(ctx, color[2], color[0], 12 * scale);
        circle(ctx, 364 * scale, 190 * scale, 15.620499351813308 * scale);
        fill_path(ctx, color[2], color[0], 12 * scale);
        circle(ctx, 41 * scale, 186 * scale, 15.556349186104045 * scale);
        fill_path(ctx, color[2], color[0], 12 * scale);
        return can;
    };

    function create_symbols(scale, draw_shadow, color, i) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 450 * scale;
        can.height = 260 * scale;
        var img = create_sign(1 * scale, true, color);
        ctx.drawImage(img, 0 * scale, 0 * scale);
        if (i == 1) {
            ctx.translate(100 * scale, 0 * scale);
            circle(ctx, 113 * scale, 120 * scale, 66 * scale);
            fill_path(ctx, undefined, color[4], 13 * scale);
            var img = create_sword(0.65 * scale, true, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]);
            ctx.rotate(0.7);
            ctx.drawImage(img, 133 * scale, -64 * scale);
            ctx.rotate(-0.7);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(70 * scale, 70 * scale);
            ctx.bezierCurveTo(113 * scale, 120.5 * scale, 113 * scale, 120.5 * scale, 156 * scale, 171 * scale);
            ctx.closePath();
            fill_path(ctx, undefined, color[4], 13 * scale);
        } else if (i == 2) {
            ctx.translate(100 * scale, 0 * scale);
            circle(ctx, 113 * scale, 120 * scale, 66 * scale);
            fill_path(ctx, undefined, color[4], 13 * scale);
            ctx.translate(30 * scale, 40 * scale);
            ctx.save();
            ctx.translate(83.5 * scale, 66.5 * scale);
            round_rect(ctx, -40.5 * scale, -29.5 * scale, 81 * scale, 59 * scale, 15 * scale);
            ctx.restore();
            fill_path(ctx, "#dff2f7", "#187484", 7 * scale);
            circle(ctx, 22 * scale, 82 * scale, 12 * scale);
            fill_path(ctx, "#dff2f7", "#187484", 7 * scale);
            circle(ctx, 145 * scale, 82 * scale, 12 * scale);
            fill_path(ctx, "#dff2f7", "#187484", 7 * scale);
            var img = create_plant(0.5 * scale, true, ["#80500b", "#7c4908"]);
            ctx.drawImage(img, 10 * scale, 85 * scale);
            var img = create_plant(0.5 * scale, true, ["#80500b", "#7c4908"]);
            ctx.drawImage(img, 50 * scale, 85 * scale);
            var img = create_plant(0.5 * scale, true, ["#80500b", "#7c4908"]);
            ctx.drawImage(img, 90 * scale, 85 * scale);
            var img = create_fruit(1 * scale, true, ["#3d2a6e", "#8255b5"]);
            ctx.drawImage(img, 90 * scale, 105 * scale);
            var img = create_fruit(1 * scale, true, ["#3d2a6e", "#8255b5"]);
            ctx.drawImage(img, 90 * scale, 105 * scale);
            var img = create_fruit(1 * scale, true, ["#3d2a6e", "#8255b5"]);
            ctx.drawImage(img, 30 * scale, 125 * scale);
            var img = create_fruit(1 * scale, true, ["#3d2a6e", "#8255b5"]);
            ctx.drawImage(img, 50 * scale, 115 * scale);
            var img = create_fruit(1 * scale, true, ["#3d2a6e", "#8255b5"]);
            ctx.drawImage(img, 30 * scale, 100 * scale);
            var img = create_fruit(1 * scale, true, ["#3d2a6e", "#8255b5"]);
            ctx.drawImage(img, 80 * scale, 120 * scale);
            var img = create_fruit(1 * scale, true, ["#3d2a6e", "#8255b5"]);
            ctx.drawImage(img, 110 * scale, 125 * scale);
            var img = create_fruit(1 * scale, true, ["#3d2a6e", "#8255b5"]);
            ctx.drawImage(img, 120 * scale, 105 * scale);
        } else if (i == 3) {
            ctx.translate(100 * scale, 0 * scale);
            circle(ctx, 113 * scale, 120 * scale, 66 * scale);
            fill_path(ctx, undefined, color[4], 13 * scale);
            ctx.translate(40 * scale, 50 * scale);
            ctx.save();
            ctx.translate(71 * scale, 69 * scale);
            round_rect(ctx, -30 * scale, -42 * scale, 60 * scale, 84 * scale, 10 * scale);
            ctx.restore();
            fill_path(ctx, undefined, color[5], 4 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(42 * scale, 28 * scale);
            ctx.bezierCurveTo(60 * scale, 31 * scale, 60 * scale, 31 * scale, 78 * scale, 34 * scale);
            ctx.bezierCurveTo(82 * scale, 34 * scale, 84 * scale, 37 * scale, 83 * scale, 45 * scale);
            ctx.bezierCurveTo(83 * scale, 80 * scale, 83 * scale, 80 * scale, 83 * scale, 115 * scale);
            ctx.bezierCurveTo(83 * scale, 120 * scale, 80 * scale, 122 * scale, 73 * scale, 120 * scale);
            ctx.bezierCurveTo(42 * scale, 111 * scale, 43 * scale, 109 * scale, 41 * scale, 102 * scale);
            ctx.bezierCurveTo(41 * scale, 71 * scale, 41 * scale, 71 * scale, 41 * scale, 40 * scale);
            ctx.closePath();
            fill_path(ctx, color[5], color[5], 4 * scale);
            ctx.translate(-40 * scale, -50 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(70 * scale, 70 * scale);
            ctx.bezierCurveTo(113 * scale, 120.5 * scale, 113 * scale, 120.5 * scale, 156 * scale, 171 * scale);
            ctx.closePath();
            fill_path(ctx, undefined, color[4], 13 * scale);
        } else if (i == 4) {
            ctx.scale(1, 1);
            ctx.translate(70 * scale, 50 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(23 * scale, 6 * scale);
            ctx.bezierCurveTo(25.5 * scale, 56 * scale, 25.5 * scale, 56 * scale, 28 * scale, 106 * scale);
            fill_path(ctx, undefined, color[5], 14 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(59 * scale, 10 * scale);
            ctx.bezierCurveTo(61 * scale, 51.5 * scale, 61 * scale, 51.5 * scale, 63 * scale, 93 * scale);
            fill_path(ctx, undefined, color[5], 14 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(7 * scale, 55 * scale);
            ctx.bezierCurveTo(33.5 * scale, 55 * scale, 33.5 * scale, 55 * scale, 60 * scale, 55 * scale);
            fill_path(ctx, undefined, color[5], 14 * scale);
            ctx.translate(10 * scale, 0 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(123 * scale, 16 * scale);
            ctx.bezierCurveTo(103 * scale, 16.5 * scale, 103 * scale, 16.5 * scale, 83 * scale, 17 * scale);
            ctx.bezierCurveTo(83.5 * scale, 61 * scale, 83.5 * scale, 61 * scale, 84 * scale, 105 * scale);
            ctx.bezierCurveTo(106 * scale, 105 * scale, 106 * scale, 105 * scale, 128 * scale, 105 * scale);
            fill_path(ctx, undefined, color[5], 14 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(72 * scale, 63 * scale);
            ctx.bezierCurveTo(88.5 * scale, 62.5 * scale, 88.5 * scale, 62.5 * scale, 105 * scale, 62 * scale);
            fill_path(ctx, undefined, color[5], 14 * scale);
            ctx.translate(10 * scale, 10 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(141 * scale, 8 * scale);
            ctx.bezierCurveTo(143 * scale, 50 * scale, 143 * scale, 50 * scale, 145 * scale, 92 * scale);
            ctx.bezierCurveTo(169 * scale, 88.5 * scale, 169 * scale, 88.5 * scale, 193 * scale, 85 * scale);
            fill_path(ctx, undefined, color[5], 14 * scale);
            ctx.translate(10 * scale, -10 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(205 * scale, 124 * scale);
            ctx.bezierCurveTo(205 * scale, 69 * scale, 205 * scale, 69 * scale, 205 * scale, 14 * scale);
            ctx.bezierCurveTo(239 * scale, 15 * scale, 250 * scale, 37 * scale, 249 * scale, 49 * scale);
            ctx.bezierCurveTo(251 * scale, 65 * scale, 242 * scale, 76 * scale, 206 * scale, 75 * scale);
            fill_path(ctx, undefined, color[5], 14 * scale);
        }
        return can;
    };

    function create_dragon_helmet(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 345 * scale;
        can.height = 250 * scale;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(105 * scale, 58 * scale);
        ctx.bezierCurveTo(100.5 * scale, 43 * scale, 100.5 * scale, 43 * scale, 96 * scale, 28 * scale);
        ctx.bezierCurveTo(119.5 * scale, 33.5 * scale, 119.5 * scale, 33.5 * scale, 143 * scale, 39 * scale);
        ctx.bezierCurveTo(170 * scale, 37 * scale, 177 * scale, 37 * scale, 188 * scale, 40 * scale);
        ctx.bezierCurveTo(213 * scale, 33.5 * scale, 213 * scale, 33.5 * scale, 238 * scale, 27 * scale);
        ctx.bezierCurveTo(231 * scale, 52 * scale, 234 * scale, 42.5 * scale, 230 * scale, 58 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(108 * scale, 51 * scale);
        ctx.bezierCurveTo(91 * scale, 55 * scale, 85 * scale, 44 * scale, 86 * scale, 29 * scale);
        ctx.bezierCurveTo(62 * scale, 50 * scale, 78 * scale, 69 * scale, 92 * scale, 75 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(249 * scale, 27 * scale);
        ctx.bezierCurveTo(273 * scale, 49 * scale, 262 * scale, 68 * scale, 246 * scale, 77 * scale);
        ctx.bezierCurveTo(231 * scale, 59 * scale, 236 * scale, 66.5 * scale, 226 * scale, 56 * scale);
        ctx.bezierCurveTo(243 * scale, 53 * scale, 252 * scale, 43 * scale, 249 * scale, 28 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(87 * scale, 78 * scale);
        ctx.bezierCurveTo(87 * scale, 59 * scale, 98 * scale, 46 * scale, 127 * scale, 48 * scale);
        ctx.bezierCurveTo(176 * scale, 48.5 * scale, 176 * scale, 48.5 * scale, 225 * scale, 49 * scale);
        ctx.bezierCurveTo(243 * scale, 49 * scale, 253 * scale, 59 * scale, 253 * scale, 76 * scale);
        ctx.bezierCurveTo(211 * scale, 85.5 * scale, 211 * scale, 85.5 * scale, 169 * scale, 95 * scale);
        ctx.closePath();
        fill_path(ctx, color[5], color[6], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(56 * scale, 105 * scale);
        ctx.bezierCurveTo(56 * scale, 92 * scale, 59 * scale, 86 * scale, 65 * scale, 73 * scale);
        ctx.bezierCurveTo(62.5 * scale, 61.5 * scale, 62.5 * scale, 61.5 * scale, 60 * scale, 50 * scale);
        ctx.bezierCurveTo(99.5 * scale, 64.5 * scale, 99.5 * scale, 64.5 * scale, 139 * scale, 79 * scale);
        ctx.bezierCurveTo(164 * scale, 77 * scale, 177 * scale, 76 * scale, 203 * scale, 78 * scale);
        ctx.bezierCurveTo(242 * scale, 63.5 * scale, 242 * scale, 63.5 * scale, 281 * scale, 49 * scale);
        ctx.bezierCurveTo(279 * scale, 60.5 * scale, 279 * scale, 60.5 * scale, 277 * scale, 72 * scale);
        ctx.bezierCurveTo(286 * scale, 88 * scale, 286 * scale, 96 * scale, 287 * scale, 104 * scale);
        ctx.bezierCurveTo(228.5 * scale, 127 * scale, 228.5 * scale, 127 * scale, 170 * scale, 150 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(48 * scale, 130 * scale);
        ctx.bezierCurveTo(61 * scale, 155 * scale, 63 * scale, 165 * scale, 56 * scale, 171 * scale);
        ctx.bezierCurveTo(48 * scale, 177 * scale, 40 * scale, 171 * scale, 38 * scale, 178 * scale);
        ctx.bezierCurveTo(33 * scale, 180 * scale, 37 * scale, 188 * scale, 47 * scale, 208 * scale);
        ctx.bezierCurveTo(52 * scale, 221 * scale, 55 * scale, 222 * scale, 75 * scale, 229 * scale);
        ctx.bezierCurveTo(91 * scale, 213 * scale, 98 * scale, 212 * scale, 112 * scale, 219 * scale);
        ctx.bezierCurveTo(167 * scale, 225 * scale, 187 * scale, 224 * scale, 222 * scale, 220 * scale);
        ctx.bezierCurveTo(244 * scale, 214 * scale, 247 * scale, 213 * scale, 263 * scale, 229 * scale);
        ctx.bezierCurveTo(295 * scale, 220 * scale, 291 * scale, 215 * scale, 301 * scale, 194 * scale);
        ctx.bezierCurveTo(308 * scale, 178 * scale, 309 * scale, 176 * scale, 302 * scale, 173 * scale);
        ctx.bezierCurveTo(290 * scale, 177 * scale, 289 * scale, 177 * scale, 283 * scale, 169 * scale);
        ctx.bezierCurveTo(279 * scale, 163 * scale, 279 * scale, 161 * scale, 290 * scale, 130 * scale);
        ctx.bezierCurveTo(270 * scale, 127 * scale, 270 * scale, 127 * scale, 250 * scale, 124 * scale);
        ctx.bezierCurveTo(209 * scale, 137.5 * scale, 209 * scale, 137.5 * scale, 168 * scale, 151 * scale);
        ctx.bezierCurveTo(121 * scale, 135 * scale, 121 * scale, 135 * scale, 74 * scale, 119 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 8 * scale);
        ctx.globalCompositeOperation = "destination-out";
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(133 * scale, 158 * scale);
        ctx.bezierCurveTo(152 * scale, 193 * scale, 158 * scale, 205 * scale, 140 * scale, 203 * scale);
        ctx.bezierCurveTo(99 * scale, 195 * scale, 96 * scale, 189 * scale, 86 * scale, 173 * scale);
        ctx.bezierCurveTo(80 * scale, 159 * scale, 88 * scale, 145 * scale, 104 * scale, 141 * scale);
        ctx.closePath();
        fill_path(ctx, color[7], color[8], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(215 * scale, 146 * scale);
        ctx.bezierCurveTo(204 * scale, 167 * scale, 204 * scale, 167 * scale, 193 * scale, 188 * scale);
        ctx.bezierCurveTo(187 * scale, 201 * scale, 191 * scale, 209 * scale, 213 * scale, 201 * scale);
        ctx.bezierCurveTo(247 * scale, 192 * scale, 253 * scale, 181 * scale, 257 * scale, 169 * scale);
        ctx.bezierCurveTo(260 * scale, 157 * scale, 254 * scale, 149 * scale, 243 * scale, 141 * scale);
        ctx.closePath();
        fill_path(ctx, color[7], color[8], 8 * scale);
        ctx.globalCompositeOperation = "source-over";
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(133 * scale, 158 * scale);
        ctx.bezierCurveTo(152 * scale, 193 * scale, 158 * scale, 205 * scale, 140 * scale, 203 * scale);
        ctx.bezierCurveTo(99 * scale, 195 * scale, 96 * scale, 189 * scale, 86 * scale, 173 * scale);
        ctx.bezierCurveTo(80 * scale, 159 * scale, 88 * scale, 145 * scale, 104 * scale, 141 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[8], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(215 * scale, 146 * scale);
        ctx.bezierCurveTo(204 * scale, 167 * scale, 204 * scale, 167 * scale, 193 * scale, 188 * scale);
        ctx.bezierCurveTo(187 * scale, 201 * scale, 191 * scale, 209 * scale, 213 * scale, 201 * scale);
        ctx.bezierCurveTo(247 * scale, 192 * scale, 253 * scale, 181 * scale, 257 * scale, 169 * scale);
        ctx.bezierCurveTo(260 * scale, 157 * scale, 254 * scale, 149 * scale, 243 * scale, 141 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[8], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(39 * scale, 66 * scale);
        ctx.bezierCurveTo(57 * scale, 107 * scale, 63 * scale, 96 * scale, 120 * scale, 106 * scale);
        ctx.bezierCurveTo(154 * scale, 112 * scale, 163 * scale, 116 * scale, 174 * scale, 135 * scale);
        ctx.bezierCurveTo(180 * scale, 109 * scale, 191 * scale, 113 * scale, 237 * scale, 103 * scale);
        ctx.bezierCurveTo(276 * scale, 100 * scale, 289 * scale, 94 * scale, 301 * scale, 67 * scale);
        ctx.bezierCurveTo(317 * scale, 112 * scale, 301 * scale, 141 * scale, 274 * scale, 139 * scale);
        ctx.bezierCurveTo(204 * scale, 166 * scale, 197 * scale, 169 * scale, 173 * scale, 183 * scale);
        ctx.bezierCurveTo(170 * scale, 183 * scale, 170 * scale, 183 * scale, 167 * scale, 183 * scale);
        ctx.bezierCurveTo(132 * scale, 160 * scale, 112 * scale, 156 * scale, 73 * scale, 141 * scale);
        ctx.bezierCurveTo(43 * scale, 146 * scale, 27 * scale, 120 * scale, 39 * scale, 66 * scale);
        ctx.closePath();
        fill_path(ctx, color[7], color[8], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(115 * scale, 185 * scale);
        ctx.bezierCurveTo(115 * scale, 200 * scale, 118 * scale, 206 * scale, 124 * scale, 212 * scale);
        ctx.bezierCurveTo(133 * scale, 223 * scale, 132 * scale, 231 * scale, 121 * scale, 230 * scale);
        ctx.bezierCurveTo(108 * scale, 226 * scale, 108 * scale, 215 * scale, 107 * scale, 209 * scale);
        ctx.bezierCurveTo(106 * scale, 201 * scale, 110 * scale, 196 * scale, 114 * scale, 185 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(226 * scale, 186 * scale);
        ctx.bezierCurveTo(234 * scale, 201 * scale, 238 * scale, 209 * scale, 228 * scale, 225 * scale);
        ctx.bezierCurveTo(223 * scale, 233 * scale, 213 * scale, 233 * scale, 211 * scale, 226 * scale);
        ctx.bezierCurveTo(206 * scale, 219 * scale, 217 * scale, 216 * scale, 221 * scale, 207 * scale);
        ctx.bezierCurveTo(225 * scale, 196 * scale, 225 * scale, 191 * scale, 226 * scale, 186 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(172 * scale, 110 * scale);
        ctx.bezierCurveTo(189 * scale, 153 * scale, 192 * scale, 160 * scale, 188 * scale, 175 * scale);
        ctx.bezierCurveTo(183 * scale, 190 * scale, 176 * scale, 197 * scale, 165 * scale, 191 * scale);
        ctx.bezierCurveTo(153 * scale, 181 * scale, 152 * scale, 166 * scale, 157 * scale, 151 * scale);
        ctx.bezierCurveTo(164.5 * scale, 131 * scale, 164.5 * scale, 131 * scale, 172 * scale, 111 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 8 * scale);
        return can;
    };

    function create_fir_one(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 149 * scale;
        can.height = 153 * scale;
        ctx.globalAlpha = 0.5;
        circle(ctx, 74.5 * scale, 85 * scale, 66 * scale);
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        circle(ctx, 75.5 * scale, 72.5 * scale, 67 * scale);
        fill_path(ctx, color[1], color[2], 4 * scale);
        circle(ctx, 75.5 * scale, 73.5 * scale, 54 * scale);
        fill_path(ctx, color[3]);
        ctx.globalAlpha = 0.5;
        circle(ctx, 74.5 * scale, 80.5 * scale, 39 * scale);
        fill_path(ctx, color[4]);
        ctx.globalAlpha = 1;
        circle(ctx, 74.5 * scale, 74.5 * scale, 37 * scale);
        fill_path(ctx, color[5]);
        return can;
    };

    function create_fir_two(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 173 * scale;
        can.height = 178 * scale;
        ctx.globalAlpha = 0.5;
        circle(ctx, 86.5 * scale, 98 * scale, 80 * scale);
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        circle(ctx, 86.5 * scale, 89 * scale, 81 * scale);
        fill_path(ctx, color[1], color[2], 4 * scale);
        circle(ctx, 86.5 * scale, 86 * scale, 59 * scale);
        fill_path(ctx, color[3], color[4], 4 * scale);
        ctx.globalAlpha = 0.5;
        circle(ctx, 86.5 * scale, 95 * scale, 34 * scale);
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        circle(ctx, 86.5 * scale, 89 * scale, 34 * scale);
        fill_path(ctx, color[5]);
        return can;
    };

    function create_fir_three(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 253 * scale;
        can.height = 260 * scale;
        ctx.globalAlpha = 0.5;
        circle(ctx, 126.5 * scale, 134 * scale, 119 * scale);
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        circle(ctx, 126.5 * scale, 124 * scale, 119 * scale);
        fill_path(ctx, color[1], color[2], 4 * scale);
        circle(ctx, 126.5 * scale, 127 * scale, 100 * scale);
        fill_path(ctx, color[3]);
        ctx.globalAlpha = 0.5;
        circle(ctx, 126.5 * scale, 135 * scale, 81 * scale);
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        circle(ctx, 126.5 * scale, 125 * scale, 84 * scale);
        fill_path(ctx, color[4], color[5], 4 * scale);
        circle(ctx, 126.5 * scale, 125 * scale, 61 * scale);
        fill_path(ctx, color[6], color[7], 4 * scale);
        ctx.globalAlpha = 0.5;
        circle(ctx, 126.5 * scale, 134 * scale, 40 * scale);
        fill_path(ctx, color[8]);
        ctx.globalAlpha = 1;
        circle(ctx, 126.5 * scale, 125 * scale, 40 * scale);
        fill_path(ctx, color[9]);
        return can;
    };

    function create_amethyst(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 139 * scale;
        can.height = 135 * scale;
        ctx.translate(0, 10 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(32 * scale, 77 * scale);
        ctx.bezierCurveTo(6 * scale, 41 * scale, 6 * scale, 33 * scale, 12 * scale, 27 * scale);
        ctx.bezierCurveTo(27 * scale, 6 * scale, 28 * scale, 6 * scale, 37 * scale, 6 * scale);
        ctx.bezierCurveTo(62 * scale, 3 * scale, 64 * scale, 5 * scale, 67 * scale, 13 * scale);
        ctx.bezierCurveTo(80 * scale, 36 * scale, 73.5 * scale, 25 * scale, 80 * scale, 37 * scale);
        ctx.bezierCurveTo(73.5 * scale, 54 * scale, 65 * scale, 74 * scale, 67 * scale, 71 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(65 * scale, 37 * scale);
        ctx.bezierCurveTo(105 * scale, 40 * scale, 113 * scale, 39 * scale, 117 * scale, 48 * scale);
        ctx.bezierCurveTo(126 * scale, 70 * scale, 128 * scale, 72 * scale, 124 * scale, 80 * scale);
        ctx.bezierCurveTo(112 * scale, 101 * scale, 110 * scale, 104 * scale, 99 * scale, 104 * scale);
        ctx.bezierCurveTo(59 * scale, 100 * scale, 55 * scale, 99 * scale, 56 * scale, 99 * scale);
        ctx.bezierCurveTo(47.5 * scale, 79 * scale, 45 * scale, 66 * scale, 39 * scale, 59 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(30 * scale, 63 * scale);
        ctx.bezierCurveTo(5 * scale, 99 * scale, 5 * scale, 101 * scale, 8 * scale, 103 * scale);
        ctx.bezierCurveTo(19 * scale, 123 * scale, 22 * scale, 125 * scale, 28 * scale, 126 * scale);
        ctx.bezierCurveTo(57 * scale, 127 * scale, 55 * scale, 127 * scale, 58 * scale, 120 * scale);
        ctx.bezierCurveTo(82 * scale, 86 * scale, 83 * scale, 78 * scale, 82 * scale, 87 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.translate(0, -10 * scale);
        ctx.globalAlpha = 1;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(32 * scale, 77 * scale);
        ctx.bezierCurveTo(6 * scale, 41 * scale, 6 * scale, 33 * scale, 12 * scale, 27 * scale);
        ctx.bezierCurveTo(27 * scale, 6 * scale, 28 * scale, 6 * scale, 37 * scale, 6 * scale);
        ctx.bezierCurveTo(62 * scale, 3 * scale, 64 * scale, 5 * scale, 67 * scale, 13 * scale);
        ctx.bezierCurveTo(80 * scale, 36 * scale, 73.5 * scale, 25 * scale, 80 * scale, 37 * scale);
        ctx.bezierCurveTo(73.5 * scale, 54 * scale, 65 * scale, 74 * scale, 67 * scale, 71 * scale);
        ctx.closePath();
        fill_path(ctx, color[1]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(65 * scale, 37 * scale);
        ctx.bezierCurveTo(105 * scale, 40 * scale, 113 * scale, 39 * scale, 117 * scale, 48 * scale);
        ctx.bezierCurveTo(126 * scale, 70 * scale, 128 * scale, 72 * scale, 124 * scale, 80 * scale);
        ctx.bezierCurveTo(112 * scale, 101 * scale, 110 * scale, 104 * scale, 99 * scale, 104 * scale);
        ctx.bezierCurveTo(59 * scale, 100 * scale, 55 * scale, 99 * scale, 56 * scale, 99 * scale);
        ctx.bezierCurveTo(47.5 * scale, 79 * scale, 45 * scale, 66 * scale, 39 * scale, 59 * scale);
        ctx.closePath();
        fill_path(ctx, color[1]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(30 * scale, 63 * scale);
        ctx.bezierCurveTo(5 * scale, 99 * scale, 5 * scale, 101 * scale, 8 * scale, 103 * scale);
        ctx.bezierCurveTo(19 * scale, 123 * scale, 22 * scale, 125 * scale, 28 * scale, 126 * scale);
        ctx.bezierCurveTo(57 * scale, 127 * scale, 55 * scale, 127 * scale, 58 * scale, 120 * scale);
        ctx.bezierCurveTo(82 * scale, 86 * scale, 83 * scale, 78 * scale, 82 * scale, 87 * scale);
        ctx.closePath();
        fill_path(ctx, color[1]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(80 * scale, 38 * scale);
        ctx.bezierCurveTo(72.5 * scale, 52 * scale, 72.5 * scale, 52 * scale, 65 * scale, 66 * scale);
        ctx.bezierCurveTo(47.5 * scale, 37 * scale, 47.5 * scale, 37 * scale, 30 * scale, 7 * scale);
        ctx.bezierCurveTo(48 * scale, 4 * scale, 57 * scale, 4 * scale, 64 * scale, 10 * scale);
        ctx.closePath();
        fill_path(ctx, color[2]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(65 * scale, 65 * scale);
        ctx.bezierCurveTo(125 * scale, 73 * scale, 95.5 * scale, 69 * scale, 126 * scale, 73 * scale);
        ctx.bezierCurveTo(119 * scale, 98 * scale, 106 * scale, 104 * scale, 98 * scale, 103 * scale);
        ctx.bezierCurveTo(84.5 * scale, 102 * scale, 84.5 * scale, 102 * scale, 71 * scale, 101 * scale);
        ctx.bezierCurveTo(64 * scale, 86 * scale, 64 * scale, 86 * scale, 57 * scale, 70 * scale);
        ctx.closePath();
        fill_path(ctx, color[2]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(27 * scale, 69 * scale);
        ctx.bezierCurveTo(64 * scale, 65 * scale, 46 * scale, 67 * scale, 65 * scale, 65 * scale);
        ctx.bezierCurveTo(43.5 * scale, 94 * scale, 43.5 * scale, 94 * scale, 22 * scale, 123 * scale);
        ctx.bezierCurveTo(8 * scale, 103 * scale, 8 * scale, 103 * scale, 9 * scale, 103 * scale);
        ctx.bezierCurveTo(5 * scale, 98 * scale, 11 * scale, 89 * scale, 26 * scale, 70 * scale);
        ctx.closePath();
        fill_path(ctx, color[2]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(26 * scale, 69 * scale);
        ctx.bezierCurveTo(65 * scale, 60 * scale, 45 * scale, 65 * scale, 64 * scale, 60 * scale);
        ctx.bezierCurveTo(63 * scale, 65 * scale, 63 * scale, 65 * scale, 62 * scale, 70 * scale);
        ctx.closePath();
        fill_path(ctx, color[2]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(80 * scale, 38 * scale);
        ctx.bezierCurveTo(68 * scale, 70 * scale, 75 * scale, 53 * scale, 70 * scale, 68 * scale);
        ctx.bezierCurveTo(65 * scale, 67 * scale, 65 * scale, 67 * scale, 60 * scale, 65 * scale);
        ctx.closePath();
        fill_path(ctx, color[2]);
        return can;
    };

    function create_dragon_ground(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 100 * scale;
        can.height = 100 * scale;
        ctx.globalAlpha = 0.5;
        ctx.fillStyle = color[0];
        ctx.fillRect(0, 0, can.width, can.height);
        return can;
    };

    function create_snow_one(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 120 * scale;
        can.height = 300 * scale;
        ctx.translate(-80 * scale, -20);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(200.5 * scale, 14.953125 * scale);
        ctx.bezierCurveTo(203 * scale, 171.953125 * scale, 203 * scale, 171.953125 * scale, 205.5 * scale, 328.953125 * scale);
        ctx.bezierCurveTo(188.5 * scale, 257.953125 * scale, 164.5 * scale, 216.953125 * scale, 166.5 * scale, 176.953125 * scale);
        ctx.bezierCurveTo(168.5 * scale, 133.953125 * scale, 198.5 * scale, 98.953125 * scale, 200.5 * scale, 14.953125 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        return can;
    };

    function create_snow_two(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 120 * scale;
        can.height = 300 * scale;
        ctx.translate(-200 * scale, -40 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(344 * scale, 18.40625 * scale);
        ctx.bezierCurveTo(345 * scale, 361.40625 * scale, 344 * scale, 191.40625 * scale, 344 * scale, 364.40625 * scale);
        ctx.bezierCurveTo(261 * scale, 275.40625 * scale, 274 * scale, 259.40625 * scale, 229 * scale, 213.40625 * scale);
        ctx.bezierCurveTo(199 * scale, 187.40625 * scale, 222 * scale, 133.40625 * scale, 273 * scale, 100.40625 * scale);
        ctx.bezierCurveTo(321 * scale, 71.40625 * scale, 327 * scale, 34.40625 * scale, 344 * scale, 18.40625 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(335 * scale, 38.072906494140625 * scale);
        ctx.bezierCurveTo(307 * scale, 62.072906494140625 * scale, 291 * scale, 60.072906494140625 * scale, 262 * scale, 68.07290649414062 * scale);
        ctx.bezierCurveTo(223 * scale, 80.07290649414062 * scale, 225 * scale, 111.07290649414062 * scale, 264 * scale, 139.07290649414062 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        return can;
    };

    function create_snow_three(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 120 * scale;
        can.height = 320 * scale;
        ctx.translate(-60 * scale, -15 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(188.5 * scale, 3.953125 * scale);
        ctx.bezierCurveTo(188.5 * scale, 171.453125 * scale, 188.5 * scale, 171.453125 * scale, 188.5 * scale, 338.953125 * scale);
        ctx.bezierCurveTo(162.5 * scale, 268.953125 * scale, 145.5 * scale, 265.953125 * scale, 116.5 * scale, 244.953125 * scale);
        ctx.bezierCurveTo(67.5 * scale, 204.953125 * scale, 87.5 * scale, 160.953125 * scale, 113.5 * scale, 125.953125 * scale);
        ctx.bezierCurveTo(141.5 * scale, 90.953125 * scale, 176.5 * scale, 56.953125 * scale, 188.5 * scale, 3.953125 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        return can;
    };

    function create_snow_four(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 120 * scale;
        can.height = 330 * scale;
        ctx.translate(-60 * scale, -10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(188.5 * scale, 7.953125 * scale);
        ctx.bezierCurveTo(188.5 * scale, 334.953125 * scale, 188.5 * scale, 332.953125 * scale, 188.5 * scale, 339.953125 * scale);
        ctx.bezierCurveTo(166.5 * scale, 295.953125 * scale, 145.5 * scale, 295.953125 * scale, 139.5 * scale, 282.953125 * scale);
        ctx.bezierCurveTo(124.5 * scale, 244.953125 * scale, 139.5 * scale, 243.953125 * scale, 131.5 * scale, 212.953125 * scale);
        ctx.bezierCurveTo(118.5 * scale, 161.953125 * scale, 69.5 * scale, 156.953125 * scale, 74.5 * scale, 92.953125 * scale);
        ctx.bezierCurveTo(85.5 * scale, 41.953125 * scale, 158.5 * scale, 49.953125 * scale, 188.5 * scale, 7.953125 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        return can;
    };

    function create_snow_five(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 48 * scale;
        can.height = 47 * scale;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(7.1875 * scale, 25.434661865234375 * scale);
        ctx.bezierCurveTo(11.1875 * scale, 13.434661865234375 * scale, 18.1875 * scale, 8.434661865234375 * scale, 32.1875 * scale, 10.434661865234375 * scale);
        ctx.bezierCurveTo(45.1875 * scale, 14.434661865234375 * scale, 41.1875 * scale, 24.434661865234375 * scale, 36.1875 * scale, 30.434661865234375 * scale);
        ctx.bezierCurveTo(22.1875 * scale, 42.434661865234375 * scale, 2.1875 * scale, 41.434661865234375 * scale, 7.1875 * scale, 25.434661865234375 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        return can;
    };

    function create_snow_six(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 120 * scale;
        can.height = 280 * scale;
        ctx.translate(-100 * scale, -20 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(228.5 * scale, 331.953125 * scale);
        ctx.bezierCurveTo(228.5 * scale, 12.953125 * scale, 228.5 * scale, 171.453125 * scale, 228.5 * scale, 10.953125 * scale);
        ctx.bezierCurveTo(196.5 * scale, 76.953125 * scale, 206.5 * scale, 78.953125 * scale, 191.5 * scale, 114.953125 * scale);
        ctx.bezierCurveTo(162.5 * scale, 170.953125 * scale, 206.5 * scale, 220.953125 * scale, 210.5 * scale, 251.953125 * scale);
        ctx.bezierCurveTo(218.5 * scale, 287.953125 * scale, 220.5 * scale, 291.953125 * scale, 228.5 * scale, 331.953125 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        return can;
    };

    function create_snow_sept(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 33 * scale;
        can.height = 35 * scale;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(12.75 * scale, 7.1328125 * scale);
        ctx.bezierCurveTo(26.75 * scale, 8.1328125 * scale, 27.75 * scale, 14.1328125 * scale, 24.75 * scale, 23.1328125 * scale);
        ctx.bezierCurveTo(19.75 * scale, 31.1328125 * scale, 15.75 * scale, 33.1328125 * scale, 6.75 * scale, 26.1328125 * scale);
        ctx.bezierCurveTo(0.75 * scale, 19.1328125 * scale, 4.75 * scale, 8.1328125 * scale, 12.75 * scale, 7.1328125 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        return can;
    };

    function create_snow_step(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 20 * scale;
        can.height = 35 * scale;
        round_rect(ctx, 0, 0, 20, 35, 7);
        fill_path(ctx, color[0]);
        return can;
    };

    function create_winter_fox(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 161 * scale;
        can.height = 190 * scale;
        ctx.globalAlpha = 0.5;
        ctx.translate(0, 8);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(9 * scale, 93 * scale);
        ctx.bezierCurveTo(17 * scale, 95 * scale, 19 * scale, 95 * scale, 21 * scale, 95 * scale);
        ctx.bezierCurveTo(9 * scale, 83 * scale, 17 * scale, 93 * scale, 4 * scale, 76 * scale);
        ctx.bezierCurveTo(11 * scale, 75 * scale, 11 * scale, 75 * scale, 18 * scale, 75 * scale);
        ctx.bezierCurveTo(13 * scale, 67 * scale, 13 * scale, 67 * scale, 7 * scale, 59 * scale);
        ctx.bezierCurveTo(14 * scale, 59 * scale, 14 * scale, 59 * scale, 21 * scale, 59 * scale);
        ctx.bezierCurveTo(46 * scale, 35 * scale, 35 * scale, 45 * scale, 49 * scale, 31 * scale);
        ctx.bezierCurveTo(53 * scale, 24 * scale, 51 * scale, 21 * scale, 51 * scale, 16 * scale);
        ctx.bezierCurveTo(63 * scale, 23 * scale, 63 * scale, 24 * scale, 69 * scale, 29 * scale);
        ctx.bezierCurveTo(76 * scale, 7 * scale, 75 * scale, 11 * scale, 76 * scale, 6 * scale);
        ctx.bezierCurveTo(81 * scale, 12 * scale, 84 * scale, 18 * scale, 89 * scale, 27 * scale);
        ctx.bezierCurveTo(95 * scale, 25 * scale, 100 * scale, 16 * scale, 105 * scale, 14 * scale);
        ctx.bezierCurveTo(103 * scale, 25 * scale, 111 * scale, 33 * scale, 110 * scale, 34 * scale);
        ctx.bezierCurveTo(123 * scale, 48 * scale, 123 * scale, 48 * scale, 136 * scale, 62 * scale);
        ctx.bezierCurveTo(142 * scale, 60 * scale, 147 * scale, 59 * scale, 155 * scale, 58 * scale);
        ctx.bezierCurveTo(147 * scale, 65 * scale, 147 * scale, 65 * scale, 139 * scale, 73 * scale);
        ctx.bezierCurveTo(145 * scale, 73 * scale, 145 * scale, 73 * scale, 151 * scale, 73 * scale);
        ctx.bezierCurveTo(145 * scale, 80 * scale, 145 * scale, 80 * scale, 138 * scale, 87 * scale);
        ctx.bezierCurveTo(144 * scale, 88 * scale, 144 * scale, 88 * scale, 150 * scale, 89 * scale);
        ctx.bezierCurveTo(125 * scale, 103 * scale, 125 * scale, 125 * scale, 113 * scale, 141 * scale);
        ctx.bezierCurveTo(92 * scale, 178 * scale, 85 * scale, 177 * scale, 76 * scale, 178 * scale);
        ctx.bezierCurveTo(64 * scale, 179 * scale, 51 * scale, 164 * scale, 35 * scale, 131 * scale);
        ctx.bezierCurveTo(18 * scale, 95 * scale, 13 * scale, 99 * scale, 8 * scale, 93 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(0, -8);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(9 * scale, 93 * scale);
        ctx.bezierCurveTo(17 * scale, 95 * scale, 19 * scale, 95 * scale, 21 * scale, 95 * scale);
        ctx.bezierCurveTo(9 * scale, 83 * scale, 17 * scale, 93 * scale, 4 * scale, 76 * scale);
        ctx.bezierCurveTo(11 * scale, 75 * scale, 11 * scale, 75 * scale, 18 * scale, 75 * scale);
        ctx.bezierCurveTo(13 * scale, 67 * scale, 13 * scale, 67 * scale, 7 * scale, 59 * scale);
        ctx.bezierCurveTo(14 * scale, 59 * scale, 14 * scale, 59 * scale, 21 * scale, 59 * scale);
        ctx.bezierCurveTo(46 * scale, 35 * scale, 35 * scale, 45 * scale, 49 * scale, 31 * scale);
        ctx.bezierCurveTo(53 * scale, 24 * scale, 51 * scale, 21 * scale, 51 * scale, 16 * scale);
        ctx.bezierCurveTo(63 * scale, 23 * scale, 63 * scale, 24 * scale, 69 * scale, 29 * scale);
        ctx.bezierCurveTo(76 * scale, 7 * scale, 75 * scale, 11 * scale, 76 * scale, 6 * scale);
        ctx.bezierCurveTo(81 * scale, 12 * scale, 84 * scale, 18 * scale, 89 * scale, 27 * scale);
        ctx.bezierCurveTo(95 * scale, 25 * scale, 100 * scale, 16 * scale, 105 * scale, 14 * scale);
        ctx.bezierCurveTo(103 * scale, 25 * scale, 111 * scale, 33 * scale, 110 * scale, 34 * scale);
        ctx.bezierCurveTo(123 * scale, 48 * scale, 123 * scale, 48 * scale, 136 * scale, 62 * scale);
        ctx.bezierCurveTo(142 * scale, 60 * scale, 147 * scale, 59 * scale, 155 * scale, 58 * scale);
        ctx.bezierCurveTo(147 * scale, 65 * scale, 147 * scale, 65 * scale, 139 * scale, 73 * scale);
        ctx.bezierCurveTo(145 * scale, 73 * scale, 145 * scale, 73 * scale, 151 * scale, 73 * scale);
        ctx.bezierCurveTo(145 * scale, 80 * scale, 145 * scale, 80 * scale, 138 * scale, 87 * scale);
        ctx.bezierCurveTo(144 * scale, 88 * scale, 144 * scale, 88 * scale, 150 * scale, 89 * scale);
        ctx.bezierCurveTo(125 * scale, 103 * scale, 125 * scale, 125 * scale, 113 * scale, 141 * scale);
        ctx.bezierCurveTo(92 * scale, 178 * scale, 85 * scale, 177 * scale, 76 * scale, 178 * scale);
        ctx.bezierCurveTo(64 * scale, 179 * scale, 51 * scale, 164 * scale, 35 * scale, 131 * scale);
        ctx.bezierCurveTo(18 * scale, 95 * scale, 13 * scale, 99 * scale, 8 * scale, 93 * scale);
        ctx.closePath();
        fill_path(ctx, color[1]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(28 * scale, 63 * scale);
        ctx.bezierCurveTo(23 * scale, 54 * scale, 24 * scale, 47 * scale, 26 * scale, 37 * scale);
        ctx.bezierCurveTo(28 * scale, 29 * scale, 31 * scale, 31 * scale, 41 * scale, 35 * scale);
        ctx.bezierCurveTo(52 * scale, 45 * scale, 55 * scale, 51 * scale, 57 * scale, 53 * scale);
        ctx.bezierCurveTo(50 * scale, 50 * scale, 44 * scale, 47 * scale, 43 * scale, 48 * scale);
        ctx.bezierCurveTo(43 * scale, 52 * scale, 43 * scale, 52 * scale, 42 * scale, 57 * scale);
        ctx.bezierCurveTo(38 * scale, 54 * scale, 38 * scale, 54 * scale, 33 * scale, 51 * scale);
        ctx.bezierCurveTo(34 * scale, 56 * scale, 34 * scale, 56 * scale, 34 * scale, 61 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(99 * scale, 55 * scale);
        ctx.bezierCurveTo(107 * scale, 43 * scale, 113 * scale, 39 * scale, 121 * scale, 34 * scale);
        ctx.bezierCurveTo(130 * scale, 29 * scale, 130 * scale, 34 * scale, 130 * scale, 42 * scale);
        ctx.bezierCurveTo(131 * scale, 57 * scale, 128 * scale, 61 * scale, 129 * scale, 63 * scale);
        ctx.bezierCurveTo(124 * scale, 62 * scale, 124 * scale, 62 * scale, 119 * scale, 61 * scale);
        ctx.bezierCurveTo(119 * scale, 56 * scale, 120 * scale, 61 * scale, 118 * scale, 52 * scale);
        ctx.bezierCurveTo(115 * scale, 55 * scale, 111 * scale, 59 * scale, 111 * scale, 58 * scale);
        ctx.bezierCurveTo(110 * scale, 54 * scale, 109 * scale, 57 * scale, 109 * scale, 51 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        circle(ctx, 103 * scale, 110 * scale, 11 * scale);
        fill_path(ctx, color[4]);
        circle(ctx, 55 * scale, 111 * scale, 11 * scale);
        fill_path(ctx, color[4]);
        circle(ctx, 99 * scale, 107 * scale, 5 * scale);
        fill_path(ctx, color[1]);
        circle(ctx, 51 * scale, 108 * scale, 5 * scale);
        fill_path(ctx, color[1]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(31 * scale, 121 * scale);
        ctx.bezierCurveTo(45 * scale, 128 * scale, 51 * scale, 133 * scale, 53 * scale, 141 * scale);
        ctx.bezierCurveTo(59 * scale, 161 * scale, 70 * scale, 173 * scale, 80 * scale, 169 * scale);
        ctx.bezierCurveTo(89 * scale, 172 * scale, 99 * scale, 149 * scale, 107 * scale, 133 * scale);
        ctx.bezierCurveTo(114 * scale, 122 * scale, 119 * scale, 123 * scale, 124 * scale, 119 * scale);
        ctx.bezierCurveTo(109 * scale, 148 * scale, 117 * scale, 133 * scale, 109 * scale, 147 * scale);
        ctx.bezierCurveTo(87 * scale, 180 * scale, 84 * scale, 179 * scale, 76 * scale, 178 * scale);
        ctx.bezierCurveTo(49 * scale, 173 * scale, 44 * scale, 149 * scale, 31 * scale, 121 * scale);
        ctx.closePath();
        fill_path(ctx, color[5]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.translate(-2, 0);
        ctx.moveTo(71 * scale, 162 * scale);
        ctx.bezierCurveTo(80 * scale, 155 * scale, 85 * scale, 159 * scale, 89 * scale, 164 * scale);
        ctx.bezierCurveTo(90 * scale, 171 * scale, 86 * scale, 173 * scale, 79 * scale, 173 * scale);
        ctx.bezierCurveTo(67 * scale, 172 * scale, 67 * scale, 168 * scale, 71 * scale, 162 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        ctx.translate(2, 0);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(9 * scale, 93 * scale);
        ctx.bezierCurveTo(17 * scale, 95 * scale, 19 * scale, 95 * scale, 21 * scale, 95 * scale);
        ctx.bezierCurveTo(9 * scale, 83 * scale, 17 * scale, 93 * scale, 4 * scale, 76 * scale);
        ctx.bezierCurveTo(11 * scale, 75 * scale, 11 * scale, 75 * scale, 18 * scale, 75 * scale);
        ctx.bezierCurveTo(13 * scale, 67 * scale, 13 * scale, 67 * scale, 7 * scale, 59 * scale);
        ctx.bezierCurveTo(14 * scale, 59 * scale, 14 * scale, 59 * scale, 21 * scale, 59 * scale);
        ctx.bezierCurveTo(46 * scale, 35 * scale, 35 * scale, 45 * scale, 49 * scale, 31 * scale);
        ctx.bezierCurveTo(53 * scale, 24 * scale, 51 * scale, 21 * scale, 51 * scale, 16 * scale);
        ctx.bezierCurveTo(63 * scale, 23 * scale, 63 * scale, 24 * scale, 69 * scale, 29 * scale);
        ctx.bezierCurveTo(76 * scale, 7 * scale, 75 * scale, 11 * scale, 76 * scale, 6 * scale);
        ctx.bezierCurveTo(81 * scale, 12 * scale, 84 * scale, 18 * scale, 89 * scale, 27 * scale);
        ctx.bezierCurveTo(95 * scale, 25 * scale, 100 * scale, 16 * scale, 105 * scale, 14 * scale);
        ctx.bezierCurveTo(103 * scale, 25 * scale, 111 * scale, 33 * scale, 110 * scale, 34 * scale);
        ctx.bezierCurveTo(123 * scale, 48 * scale, 123 * scale, 48 * scale, 136 * scale, 62 * scale);
        ctx.bezierCurveTo(142 * scale, 60 * scale, 147 * scale, 59 * scale, 155 * scale, 58 * scale);
        ctx.bezierCurveTo(147 * scale, 65 * scale, 147 * scale, 65 * scale, 139 * scale, 73 * scale);
        ctx.bezierCurveTo(145 * scale, 73 * scale, 145 * scale, 73 * scale, 151 * scale, 73 * scale);
        ctx.bezierCurveTo(145 * scale, 80 * scale, 145 * scale, 80 * scale, 138 * scale, 87 * scale);
        ctx.bezierCurveTo(144 * scale, 88 * scale, 144 * scale, 88 * scale, 150 * scale, 89 * scale);
        ctx.bezierCurveTo(125 * scale, 103 * scale, 125 * scale, 125 * scale, 113 * scale, 141 * scale);
        ctx.bezierCurveTo(92 * scale, 178 * scale, 85 * scale, 177 * scale, 76 * scale, 178 * scale);
        ctx.bezierCurveTo(64 * scale, 179 * scale, 51 * scale, 164 * scale, 35 * scale, 131 * scale);
        ctx.bezierCurveTo(18 * scale, 95 * scale, 13 * scale, 99 * scale, 8 * scale, 93 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(25 * scale, 63 * scale);
        ctx.bezierCurveTo(16 * scale, 58 * scale, 17 * scale, 51 * scale, 17 * scale, 33 * scale);
        ctx.bezierCurveTo(19 * scale, 12 * scale, 21 * scale, 12 * scale, 32 * scale, 17 * scale);
        ctx.bezierCurveTo(63 * scale, 31 * scale, 66 * scale, 45 * scale, 66 * scale, 54 * scale);
        fill_path(ctx, color[1], color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(91 * scale, 53 * scale);
        ctx.bezierCurveTo(91 * scale, 40 * scale, 98 * scale, 33 * scale, 121 * scale, 20 * scale);
        ctx.bezierCurveTo(137 * scale, 12 * scale, 137 * scale, 16 * scale, 139 * scale, 27 * scale);
        ctx.bezierCurveTo(141 * scale, 49 * scale, 140 * scale, 57 * scale, 134 * scale, 64 * scale);
        fill_path(ctx, color[1], color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(31 * scale, 63 * scale);
        ctx.bezierCurveTo(23 * scale, 54 * scale, 24 * scale, 47 * scale, 26 * scale, 37 * scale);
        ctx.bezierCurveTo(28 * scale, 29 * scale, 31 * scale, 31 * scale, 41 * scale, 35 * scale);
        ctx.bezierCurveTo(52 * scale, 45 * scale, 55 * scale, 51 * scale, 57 * scale, 53 * scale);
        ctx.bezierCurveTo(50 * scale, 50 * scale, 44 * scale, 47 * scale, 43 * scale, 48 * scale);
        ctx.bezierCurveTo(43 * scale, 52 * scale, 43 * scale, 52 * scale, 42 * scale, 57 * scale);
        ctx.bezierCurveTo(38 * scale, 54 * scale, 38 * scale, 54 * scale, 33 * scale, 51 * scale);
        ctx.bezierCurveTo(34 * scale, 56 * scale, 34 * scale, 56 * scale, 34 * scale, 61 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(99 * scale, 55 * scale);
        ctx.bezierCurveTo(107 * scale, 43 * scale, 113 * scale, 39 * scale, 121 * scale, 34 * scale);
        ctx.bezierCurveTo(130 * scale, 29 * scale, 130 * scale, 34 * scale, 130 * scale, 42 * scale);
        ctx.bezierCurveTo(131 * scale, 57 * scale, 128 * scale, 61 * scale, 129 * scale, 63 * scale);
        ctx.bezierCurveTo(124 * scale, 62 * scale, 124 * scale, 62 * scale, 119 * scale, 61 * scale);
        ctx.bezierCurveTo(119 * scale, 56 * scale, 120 * scale, 61 * scale, 118 * scale, 52 * scale);
        ctx.bezierCurveTo(115 * scale, 55 * scale, 111 * scale, 59 * scale, 111 * scale, 58 * scale);
        ctx.bezierCurveTo(110 * scale, 54 * scale, 109 * scale, 57 * scale, 109 * scale, 51 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        return can;
    };

    function create_hurt_fox_winter(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 161 * scale;
        can.height = 190 * scale;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(9 * scale, 93 * scale);
        ctx.bezierCurveTo(17 * scale, 95 * scale, 19 * scale, 95 * scale, 21 * scale, 95 * scale);
        ctx.bezierCurveTo(9 * scale, 83 * scale, 17 * scale, 93 * scale, 4 * scale, 76 * scale);
        ctx.bezierCurveTo(11 * scale, 75 * scale, 11 * scale, 75 * scale, 18 * scale, 75 * scale);
        ctx.bezierCurveTo(13 * scale, 67 * scale, 13 * scale, 67 * scale, 7 * scale, 59 * scale);
        ctx.bezierCurveTo(14 * scale, 59 * scale, 14 * scale, 59 * scale, 21 * scale, 59 * scale);
        ctx.bezierCurveTo(46 * scale, 35 * scale, 35 * scale, 45 * scale, 49 * scale, 31 * scale);
        ctx.bezierCurveTo(53 * scale, 24 * scale, 51 * scale, 21 * scale, 51 * scale, 16 * scale);
        ctx.bezierCurveTo(63 * scale, 23 * scale, 63 * scale, 24 * scale, 69 * scale, 29 * scale);
        ctx.bezierCurveTo(76 * scale, 7 * scale, 75 * scale, 11 * scale, 76 * scale, 6 * scale);
        ctx.bezierCurveTo(81 * scale, 12 * scale, 84 * scale, 18 * scale, 89 * scale, 27 * scale);
        ctx.bezierCurveTo(95 * scale, 25 * scale, 100 * scale, 16 * scale, 105 * scale, 14 * scale);
        ctx.bezierCurveTo(103 * scale, 25 * scale, 111 * scale, 33 * scale, 110 * scale, 34 * scale);
        ctx.bezierCurveTo(123 * scale, 48 * scale, 123 * scale, 48 * scale, 136 * scale, 62 * scale);
        ctx.bezierCurveTo(142 * scale, 60 * scale, 147 * scale, 59 * scale, 155 * scale, 58 * scale);
        ctx.bezierCurveTo(147 * scale, 65 * scale, 147 * scale, 65 * scale, 139 * scale, 73 * scale);
        ctx.bezierCurveTo(145 * scale, 73 * scale, 145 * scale, 73 * scale, 151 * scale, 73 * scale);
        ctx.bezierCurveTo(145 * scale, 80 * scale, 145 * scale, 80 * scale, 138 * scale, 87 * scale);
        ctx.bezierCurveTo(144 * scale, 88 * scale, 144 * scale, 88 * scale, 150 * scale, 89 * scale);
        ctx.bezierCurveTo(125 * scale, 103 * scale, 125 * scale, 125 * scale, 113 * scale, 141 * scale);
        ctx.bezierCurveTo(92 * scale, 178 * scale, 85 * scale, 177 * scale, 76 * scale, 178 * scale);
        ctx.bezierCurveTo(64 * scale, 179 * scale, 51 * scale, 164 * scale, 35 * scale, 131 * scale);
        ctx.bezierCurveTo(18 * scale, 95 * scale, 13 * scale, 99 * scale, 8 * scale, 93 * scale);
        ctx.closePath();
        fill_path(ctx, color, color, 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(25 * scale, 63 * scale);
        ctx.bezierCurveTo(16 * scale, 58 * scale, 17 * scale, 51 * scale, 17 * scale, 33 * scale);
        ctx.bezierCurveTo(19 * scale, 12 * scale, 21 * scale, 12 * scale, 32 * scale, 17 * scale);
        ctx.bezierCurveTo(63 * scale, 31 * scale, 66 * scale, 45 * scale, 66 * scale, 54 * scale);
        fill_path(ctx, color, color, 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(91 * scale, 53 * scale);
        ctx.bezierCurveTo(91 * scale, 40 * scale, 98 * scale, 33 * scale, 121 * scale, 20 * scale);
        ctx.bezierCurveTo(137 * scale, 12 * scale, 137 * scale, 16 * scale, 139 * scale, 27 * scale);
        ctx.bezierCurveTo(141 * scale, 49 * scale, 140 * scale, 57 * scale, 134 * scale, 64 * scale);
        fill_path(ctx, color, color, 4 * scale);
        return can;
    };

    function create_polar_bear(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 147 * scale;
        can.height = 172 * scale;
        ctx.globalAlpha = 0.5;
        ctx.translate(0, 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(8 * scale, 50 * scale);
        ctx.bezierCurveTo(15 * scale, 16 * scale, 49 * scale, 6 * scale, 67 * scale, 6 * scale);
        ctx.bezierCurveTo(121 * scale, 3 * scale, 128 * scale, 32 * scale, 135 * scale, 48 * scale);
        ctx.bezierCurveTo(146 * scale, 96 * scale, 124 * scale, 131 * scale, 96 * scale, 135 * scale);
        ctx.bezierCurveTo(96 * scale, 158 * scale, 79 * scale, 156 * scale, 75 * scale, 156 * scale);
        ctx.bezierCurveTo(50 * scale, 154 * scale, 53 * scale, 150 * scale, 52 * scale, 135 * scale);
        ctx.bezierCurveTo(2 * scale, 127 * scale, 3 * scale, 87 * scale, 8 * scale, 50 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.translate(0, -8 * scale);
        ctx.globalAlpha = 1;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(8 * scale, 50 * scale);
        ctx.bezierCurveTo(15 * scale, 16 * scale, 49 * scale, 6 * scale, 67 * scale, 6 * scale);
        ctx.bezierCurveTo(121 * scale, 3 * scale, 128 * scale, 32 * scale, 135 * scale, 48 * scale);
        ctx.bezierCurveTo(146 * scale, 96 * scale, 124 * scale, 131 * scale, 96 * scale, 135 * scale);
        ctx.bezierCurveTo(96 * scale, 158 * scale, 79 * scale, 156 * scale, 75 * scale, 156 * scale);
        ctx.bezierCurveTo(50 * scale, 154 * scale, 53 * scale, 150 * scale, 52 * scale, 135 * scale);
        ctx.bezierCurveTo(2 * scale, 127 * scale, 3 * scale, 87 * scale, 8 * scale, 50 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(14 * scale, 57 * scale);
        ctx.bezierCurveTo(2 * scale, 50 * scale, 5 * scale, 22 * scale, 24 * scale, 22 * scale);
        ctx.bezierCurveTo(41 * scale, 21 * scale, 54 * scale, 32 * scale, 55 * scale, 48 * scale);
        fill_path(ctx, color[1], color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(93 * scale, 47 * scale);
        ctx.bezierCurveTo(94 * scale, 24 * scale, 116 * scale, 21 * scale, 120 * scale, 20 * scale);
        ctx.bezierCurveTo(144 * scale, 17 * scale, 146 * scale, 52 * scale, 133 * scale, 58 * scale);
        fill_path(ctx, color[1], color[2], 4 * scale);
        circle(ctx, 51 * scale, 91 * scale, 9 * scale);
        fill_path(ctx, color[3]);
        circle(ctx, 95 * scale, 91 * scale, 9 * scale);
        fill_path(ctx, color[3]);
        circle(ctx, 91 * scale, 89 * scale, 4 * scale);
        fill_path(ctx, color[4]);
        circle(ctx, 47 * scale, 89 * scale, 4 * scale);
        fill_path(ctx, color[4]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(54 * scale, 133 * scale);
        ctx.bezierCurveTo(56 * scale, 108 * scale, 64 * scale, 99 * scale, 73 * scale, 98 * scale);
        ctx.bezierCurveTo(86 * scale, 97 * scale, 91 * scale, 119 * scale, 93 * scale, 133 * scale);
        ctx.bezierCurveTo(94 * scale, 155 * scale, 90 * scale, 150 * scale, 74 * scale, 155 * scale);
        ctx.bezierCurveTo(50 * scale, 152 * scale, 55 * scale, 145 * scale, 54 * scale, 134 * scale);
        ctx.closePath();
        fill_path(ctx, color[5]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(65.25 * scale, 135 * scale);
        ctx.bezierCurveTo(75.25 * scale, 128 * scale, 83.25 * scale, 133 * scale, 83.25 * scale, 138 * scale);
        ctx.bezierCurveTo(88.25 * scale, 148 * scale, 61.25 * scale, 149 * scale, 64.25 * scale, 137 * scale);
        ctx.closePath();
        fill_path(ctx, color[6]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(74 * scale, 145 * scale);
        ctx.bezierCurveTo(74 * scale, 148 * scale, 74 * scale, 148 * scale, 74 * scale, 151 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[6], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(19 * scale, 58 * scale);
        ctx.bezierCurveTo(10 * scale, 38 * scale, 18 * scale, 33 * scale, 28 * scale, 34 * scale);
        ctx.bezierCurveTo(41 * scale, 39 * scale, 45 * scale, 45 * scale, 50 * scale, 51 * scale);
        ctx.closePath();
        fill_path(ctx, color[6]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(100 * scale, 51 * scale);
        ctx.bezierCurveTo(106 * scale, 36 * scale, 119 * scale, 31 * scale, 128 * scale, 36 * scale);
        ctx.bezierCurveTo(137 * scale, 49 * scale, 128 * scale, 58 * scale, 128 * scale, 60 * scale);
        ctx.closePath();
        fill_path(ctx, color[6]);
        return can;
    };

    function create_hurt_polar_bear(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 147 * scale;
        can.height = 172 * scale;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(8 * scale, 50 * scale);
        ctx.bezierCurveTo(15 * scale, 16 * scale, 49 * scale, 6 * scale, 67 * scale, 6 * scale);
        ctx.bezierCurveTo(121 * scale, 3 * scale, 128 * scale, 32 * scale, 135 * scale, 48 * scale);
        ctx.bezierCurveTo(146 * scale, 96 * scale, 124 * scale, 131 * scale, 96 * scale, 135 * scale);
        ctx.bezierCurveTo(96 * scale, 158 * scale, 79 * scale, 156 * scale, 75 * scale, 156 * scale);
        ctx.bezierCurveTo(50 * scale, 154 * scale, 53 * scale, 150 * scale, 52 * scale, 135 * scale);
        ctx.bezierCurveTo(2 * scale, 127 * scale, 3 * scale, 87 * scale, 8 * scale, 50 * scale);
        ctx.closePath();
        fill_path(ctx, color, color, 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(14 * scale, 57 * scale);
        ctx.bezierCurveTo(2 * scale, 50 * scale, 5 * scale, 22 * scale, 24 * scale, 22 * scale);
        ctx.bezierCurveTo(41 * scale, 21 * scale, 54 * scale, 32 * scale, 55 * scale, 48 * scale);
        fill_path(ctx, color, color, 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(93 * scale, 47 * scale);
        ctx.bezierCurveTo(94 * scale, 24 * scale, 116 * scale, 21 * scale, 120 * scale, 20 * scale);
        ctx.bezierCurveTo(144 * scale, 17 * scale, 146 * scale, 52 * scale, 133 * scale, 58 * scale);
        fill_path(ctx, color, color, 4 * scale);
        return can;
    };

    function create_dragon(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 271 * scale;
        can.height = 366 * scale;
        ctx.globalAlpha = 0.5;
        ctx.translate(0, 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(133 * scale, 99 * scale);
        ctx.bezierCurveTo(186 * scale, 123 * scale, 199 * scale, 152 * scale, 209 * scale, 169 * scale);
        ctx.bezierCurveTo(228 * scale, 205 * scale, 224 * scale, 245 * scale, 190 * scale, 276 * scale);
        ctx.bezierCurveTo(161 * scale, 296 * scale, 99 * scale, 292 * scale, 79 * scale, 274 * scale);
        ctx.bezierCurveTo(49 * scale, 253 * scale, 47 * scale, 214 * scale, 50 * scale, 197 * scale);
        ctx.bezierCurveTo(61 * scale, 143 * scale, 102 * scale, 113 * scale, 131 * scale, 99 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(73 * scale, 270 * scale);
        ctx.bezierCurveTo(79 * scale, 280 * scale, 77 * scale, 280 * scale, 78 * scale, 287 * scale);
        ctx.bezierCurveTo(78 * scale, 290 * scale, 83 * scale, 291 * scale, 82 * scale, 299 * scale);
        ctx.bezierCurveTo(81 * scale, 301 * scale, 87 * scale, 301 * scale, 92 * scale, 314 * scale);
        ctx.bezierCurveTo(94 * scale, 319 * scale, 100 * scale, 321 * scale, 107 * scale, 320 * scale);
        ctx.bezierCurveTo(111 * scale, 323 * scale, 114 * scale, 324 * scale, 119 * scale, 320 * scale);
        ctx.bezierCurveTo(137 * scale, 321 * scale, 146 * scale, 323 * scale, 139 * scale, 320 * scale);
        ctx.bezierCurveTo(141 * scale, 324 * scale, 150 * scale, 324 * scale, 153 * scale, 320 * scale);
        ctx.bezierCurveTo(168 * scale, 319 * scale, 171 * scale, 316 * scale, 173 * scale, 307 * scale);
        ctx.bezierCurveTo(180 * scale, 305 * scale, 180 * scale, 301 * scale, 178 * scale, 296 * scale);
        ctx.bezierCurveTo(183 * scale, 296 * scale, 185 * scale, 289 * scale, 188 * scale, 279 * scale);
        ctx.bezierCurveTo(171 * scale, 286 * scale, 149 * scale, 290 * scale, 132 * scale, 289 * scale);
        ctx.bezierCurveTo(101 * scale, 290 * scale, 86 * scale, 280 * scale, 74 * scale, 271 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(76 * scale, 252 * scale);
        ctx.bezierCurveTo(85 * scale, 294 * scale, 96 * scale, 314 * scale, 103 * scale, 314 * scale);
        ctx.bezierCurveTo(106 * scale, 316 * scale, 151 * scale, 314 * scale, 156 * scale, 314 * scale);
        ctx.bezierCurveTo(169 * scale, 317 * scale, 182 * scale, 285 * scale, 191 * scale, 256 * scale);
        ctx.bezierCurveTo(134.5 * scale, 254 * scale, 134.5 * scale, 254 * scale, 78 * scale, 252 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(84 * scale, 257 * scale);
        ctx.bezierCurveTo(122 * scale, 273 * scale, 146 * scale, 268 * scale, 179 * scale, 261 * scale);
        ctx.bezierCurveTo(190 * scale, 258 * scale, 187 * scale, 266 * scale, 178 * scale, 272 * scale);
        ctx.bezierCurveTo(160 * scale, 284 * scale, 123 * scale, 282 * scale, 100 * scale, 277 * scale);
        ctx.bezierCurveTo(73 * scale, 260 * scale, 79 * scale, 257 * scale, 84 * scale, 257 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(125 * scale, 65 * scale);
        ctx.bezierCurveTo(133 * scale, 45 * scale, 136 * scale, 42 * scale, 141 * scale, 55 * scale);
        ctx.bezierCurveTo(151 * scale, 96 * scale, 164 * scale, 117 * scale, 175 * scale, 134 * scale);
        ctx.bezierCurveTo(203 * scale, 181 * scale, 207 * scale, 182 * scale, 208 * scale, 215 * scale);
        ctx.bezierCurveTo(206 * scale, 240 * scale, 205 * scale, 246 * scale, 184 * scale, 258 * scale);
        ctx.bezierCurveTo(161 * scale, 267 * scale, 131 * scale, 272 * scale, 86 * scale, 258 * scale);
        ctx.bezierCurveTo(67 * scale, 252 * scale, 68 * scale, 239 * scale, 64 * scale, 216 * scale);
        ctx.bezierCurveTo(62 * scale, 194 * scale, 72 * scale, 169 * scale, 92 * scale, 142 * scale);
        ctx.bezierCurveTo(106 * scale, 121 * scale, 114 * scale, 101 * scale, 125 * scale, 65 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(115 * scale, 37 * scale);
        ctx.bezierCurveTo(116 * scale, 28 * scale, 119 * scale, 27 * scale, 126 * scale, 37 * scale);
        ctx.bezierCurveTo(134 * scale, 48 * scale, 134 * scale, 49 * scale, 132 * scale, 59 * scale);
        ctx.bezierCurveTo(131 * scale, 67 * scale, 127 * scale, 65 * scale, 120 * scale, 56 * scale);
        ctx.bezierCurveTo(114 * scale, 49 * scale, 113 * scale, 43 * scale, 115 * scale, 38 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(146 * scale, 34 * scale);
        ctx.bezierCurveTo(152 * scale, 28 * scale, 155 * scale, 27 * scale, 157 * scale, 39 * scale);
        ctx.bezierCurveTo(157 * scale, 45 * scale, 157 * scale, 49 * scale, 150 * scale, 56 * scale);
        ctx.bezierCurveTo(141 * scale, 66 * scale, 138 * scale, 66 * scale, 138 * scale, 57 * scale);
        ctx.bezierCurveTo(137 * scale, 50 * scale, 137 * scale, 47 * scale, 141 * scale, 42 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(143 * scale, 69 * scale);
        ctx.bezierCurveTo(148 * scale, 56 * scale, 156 * scale, 50 * scale, 158 * scale, 58 * scale);
        ctx.bezierCurveTo(159 * scale, 64 * scale, 160 * scale, 67 * scale, 153 * scale, 77 * scale);
        ctx.bezierCurveTo(148 * scale, 83 * scale, 145 * scale, 84 * scale, 143 * scale, 77 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(149 * scale, 92 * scale);
        ctx.bezierCurveTo(149 * scale, 89 * scale, 151 * scale, 84 * scale, 156 * scale, 79 * scale);
        ctx.bezierCurveTo(161 * scale, 73 * scale, 163 * scale, 78 * scale, 162 * scale, 86 * scale);
        ctx.bezierCurveTo(161 * scale, 91 * scale, 155 * scale, 99 * scale, 152 * scale, 98 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(111 * scale, 61 * scale);
        ctx.bezierCurveTo(114 * scale, 51 * scale, 117 * scale, 51 * scale, 124 * scale, 64 * scale);
        ctx.bezierCurveTo(128 * scale, 68 * scale, 128 * scale, 76 * scale, 126 * scale, 79 * scale);
        ctx.bezierCurveTo(123 * scale, 84 * scale, 122 * scale, 82 * scale, 115 * scale, 74 * scale);
        ctx.bezierCurveTo(112 * scale, 67 * scale, 115 * scale, 74 * scale, 115 * scale, 74 * scale);
        ctx.bezierCurveTo(111 * scale, 68 * scale, 111 * scale, 66 * scale, 111 * scale, 62 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(107 * scale, 81 * scale);
        ctx.bezierCurveTo(108 * scale, 74 * scale, 112 * scale, 73 * scale, 118 * scale, 84 * scale);
        ctx.bezierCurveTo(122 * scale, 88 * scale, 122 * scale, 93 * scale, 121 * scale, 98 * scale);
        ctx.bezierCurveTo(114 * scale, 98 * scale, 113 * scale, 98 * scale, 109 * scale, 90 * scale);
        ctx.bezierCurveTo(107 * scale, 87 * scale, 106 * scale, 85 * scale, 107 * scale, 82 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(0, -10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(133 * scale, 99 * scale);
        ctx.bezierCurveTo(186 * scale, 123 * scale, 199 * scale, 152 * scale, 209 * scale, 169 * scale);
        ctx.bezierCurveTo(228 * scale, 205 * scale, 224 * scale, 245 * scale, 190 * scale, 276 * scale);
        ctx.bezierCurveTo(161 * scale, 296 * scale, 99 * scale, 292 * scale, 79 * scale, 274 * scale);
        ctx.bezierCurveTo(49 * scale, 253 * scale, 47 * scale, 214 * scale, 50 * scale, 197 * scale);
        ctx.bezierCurveTo(61 * scale, 143 * scale, 102 * scale, 113 * scale, 131 * scale, 99 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[3], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(73 * scale, 270 * scale);
        ctx.bezierCurveTo(79 * scale, 280 * scale, 77 * scale, 280 * scale, 78 * scale, 287 * scale);
        ctx.bezierCurveTo(78 * scale, 290 * scale, 83 * scale, 291 * scale, 82 * scale, 299 * scale);
        ctx.bezierCurveTo(81 * scale, 301 * scale, 87 * scale, 301 * scale, 92 * scale, 314 * scale);
        ctx.bezierCurveTo(94 * scale, 319 * scale, 100 * scale, 321 * scale, 107 * scale, 320 * scale);
        ctx.bezierCurveTo(111 * scale, 323 * scale, 114 * scale, 324 * scale, 119 * scale, 320 * scale);
        ctx.bezierCurveTo(137 * scale, 321 * scale, 146 * scale, 323 * scale, 139 * scale, 320 * scale);
        ctx.bezierCurveTo(141 * scale, 324 * scale, 150 * scale, 324 * scale, 153 * scale, 320 * scale);
        ctx.bezierCurveTo(168 * scale, 319 * scale, 171 * scale, 316 * scale, 173 * scale, 307 * scale);
        ctx.bezierCurveTo(180 * scale, 305 * scale, 180 * scale, 301 * scale, 178 * scale, 296 * scale);
        ctx.bezierCurveTo(183 * scale, 296 * scale, 185 * scale, 289 * scale, 188 * scale, 279 * scale);
        ctx.bezierCurveTo(171 * scale, 286 * scale, 149 * scale, 290 * scale, 132 * scale, 289 * scale);
        ctx.bezierCurveTo(101 * scale, 290 * scale, 86 * scale, 280 * scale, 74 * scale, 271 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[3], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(76 * scale, 252 * scale);
        ctx.bezierCurveTo(85 * scale, 294 * scale, 96 * scale, 314 * scale, 103 * scale, 314 * scale);
        ctx.bezierCurveTo(106 * scale, 316 * scale, 151 * scale, 314 * scale, 156 * scale, 314 * scale);
        ctx.bezierCurveTo(169 * scale, 317 * scale, 182 * scale, 285 * scale, 191 * scale, 256 * scale);
        ctx.bezierCurveTo(134.5 * scale, 254 * scale, 134.5 * scale, 254 * scale, 78 * scale, 252 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[3], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(84 * scale, 257 * scale);
        ctx.bezierCurveTo(122 * scale, 273 * scale, 146 * scale, 268 * scale, 179 * scale, 261 * scale);
        ctx.bezierCurveTo(190 * scale, 258 * scale, 187 * scale, 266 * scale, 178 * scale, 272 * scale);
        ctx.bezierCurveTo(160 * scale, 284 * scale, 123 * scale, 282 * scale, 100 * scale, 277 * scale);
        ctx.bezierCurveTo(73 * scale, 260 * scale, 79 * scale, 257 * scale, 84 * scale, 257 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[3], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(125 * scale, 65 * scale);
        ctx.bezierCurveTo(133 * scale, 45 * scale, 136 * scale, 42 * scale, 141 * scale, 55 * scale);
        ctx.bezierCurveTo(151 * scale, 96 * scale, 164 * scale, 117 * scale, 175 * scale, 134 * scale);
        ctx.bezierCurveTo(203 * scale, 181 * scale, 207 * scale, 182 * scale, 208 * scale, 215 * scale);
        ctx.bezierCurveTo(206 * scale, 240 * scale, 205 * scale, 246 * scale, 184 * scale, 258 * scale);
        ctx.bezierCurveTo(161 * scale, 267 * scale, 131 * scale, 272 * scale, 86 * scale, 258 * scale);
        ctx.bezierCurveTo(67 * scale, 252 * scale, 68 * scale, 239 * scale, 64 * scale, 216 * scale);
        ctx.bezierCurveTo(62 * scale, 194 * scale, 72 * scale, 169 * scale, 92 * scale, 142 * scale);
        ctx.bezierCurveTo(106 * scale, 121 * scale, 114 * scale, 101 * scale, 125 * scale, 65 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[3], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(115 * scale, 37 * scale);
        ctx.bezierCurveTo(116 * scale, 28 * scale, 119 * scale, 27 * scale, 126 * scale, 37 * scale);
        ctx.bezierCurveTo(134 * scale, 48 * scale, 134 * scale, 49 * scale, 132 * scale, 59 * scale);
        ctx.bezierCurveTo(131 * scale, 67 * scale, 127 * scale, 65 * scale, 120 * scale, 56 * scale);
        ctx.bezierCurveTo(114 * scale, 49 * scale, 113 * scale, 43 * scale, 115 * scale, 38 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[3], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(146 * scale, 34 * scale);
        ctx.bezierCurveTo(152 * scale, 28 * scale, 155 * scale, 27 * scale, 157 * scale, 39 * scale);
        ctx.bezierCurveTo(157 * scale, 45 * scale, 157 * scale, 49 * scale, 150 * scale, 56 * scale);
        ctx.bezierCurveTo(141 * scale, 66 * scale, 138 * scale, 66 * scale, 138 * scale, 57 * scale);
        ctx.bezierCurveTo(137 * scale, 50 * scale, 137 * scale, 47 * scale, 141 * scale, 42 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[3], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(143 * scale, 69 * scale);
        ctx.bezierCurveTo(148 * scale, 56 * scale, 156 * scale, 50 * scale, 158 * scale, 58 * scale);
        ctx.bezierCurveTo(159 * scale, 64 * scale, 160 * scale, 67 * scale, 153 * scale, 77 * scale);
        ctx.bezierCurveTo(148 * scale, 83 * scale, 145 * scale, 84 * scale, 143 * scale, 77 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[3], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(149 * scale, 92 * scale);
        ctx.bezierCurveTo(149 * scale, 89 * scale, 151 * scale, 84 * scale, 156 * scale, 79 * scale);
        ctx.bezierCurveTo(161 * scale, 73 * scale, 163 * scale, 78 * scale, 162 * scale, 86 * scale);
        ctx.bezierCurveTo(161 * scale, 91 * scale, 155 * scale, 99 * scale, 152 * scale, 98 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[3], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(111 * scale, 61 * scale);
        ctx.bezierCurveTo(114 * scale, 51 * scale, 117 * scale, 51 * scale, 124 * scale, 64 * scale);
        ctx.bezierCurveTo(128 * scale, 68 * scale, 128 * scale, 76 * scale, 126 * scale, 79 * scale);
        ctx.bezierCurveTo(123 * scale, 84 * scale, 122 * scale, 82 * scale, 115 * scale, 74 * scale);
        ctx.bezierCurveTo(112 * scale, 67 * scale, 115 * scale, 74 * scale, 115 * scale, 74 * scale);
        ctx.bezierCurveTo(111 * scale, 68 * scale, 111 * scale, 66 * scale, 111 * scale, 62 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[3], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(107 * scale, 81 * scale);
        ctx.bezierCurveTo(108 * scale, 74 * scale, 112 * scale, 73 * scale, 118 * scale, 84 * scale);
        ctx.bezierCurveTo(122 * scale, 88 * scale, 122 * scale, 93 * scale, 121 * scale, 98 * scale);
        ctx.bezierCurveTo(114 * scale, 98 * scale, 113 * scale, 98 * scale, 109 * scale, 90 * scale);
        ctx.bezierCurveTo(107 * scale, 87 * scale, 106 * scale, 85 * scale, 107 * scale, 82 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[3], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(133 * scale, 99 * scale);
        ctx.bezierCurveTo(186 * scale, 123 * scale, 199 * scale, 152 * scale, 209 * scale, 169 * scale);
        ctx.bezierCurveTo(228 * scale, 205 * scale, 224 * scale, 245 * scale, 190 * scale, 276 * scale);
        ctx.bezierCurveTo(161 * scale, 296 * scale, 99 * scale, 292 * scale, 79 * scale, 274 * scale);
        ctx.bezierCurveTo(49 * scale, 253 * scale, 47 * scale, 214 * scale, 50 * scale, 197 * scale);
        ctx.bezierCurveTo(61 * scale, 143 * scale, 102 * scale, 113 * scale, 131 * scale, 99 * scale);
        ctx.closePath();
        fill_path(ctx, color[1]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(73 * scale, 270 * scale);
        ctx.bezierCurveTo(79 * scale, 280 * scale, 77 * scale, 280 * scale, 78 * scale, 287 * scale);
        ctx.bezierCurveTo(78 * scale, 290 * scale, 83 * scale, 291 * scale, 82 * scale, 299 * scale);
        ctx.bezierCurveTo(81 * scale, 301 * scale, 87 * scale, 301 * scale, 92 * scale, 314 * scale);
        ctx.bezierCurveTo(94 * scale, 319 * scale, 100 * scale, 321 * scale, 107 * scale, 320 * scale);
        ctx.bezierCurveTo(111 * scale, 323 * scale, 114 * scale, 324 * scale, 119 * scale, 320 * scale);
        ctx.bezierCurveTo(137 * scale, 321 * scale, 146 * scale, 323 * scale, 139 * scale, 320 * scale);
        ctx.bezierCurveTo(141 * scale, 324 * scale, 150 * scale, 324 * scale, 153 * scale, 320 * scale);
        ctx.bezierCurveTo(168 * scale, 319 * scale, 171 * scale, 316 * scale, 173 * scale, 307 * scale);
        ctx.bezierCurveTo(180 * scale, 305 * scale, 180 * scale, 301 * scale, 178 * scale, 296 * scale);
        ctx.bezierCurveTo(183 * scale, 296 * scale, 185 * scale, 289 * scale, 188 * scale, 279 * scale);
        ctx.bezierCurveTo(171 * scale, 286 * scale, 149 * scale, 290 * scale, 132 * scale, 289 * scale);
        ctx.bezierCurveTo(101 * scale, 290 * scale, 86 * scale, 280 * scale, 74 * scale, 271 * scale);
        ctx.closePath();
        fill_path(ctx, color[5]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(76 * scale, 252 * scale);
        ctx.bezierCurveTo(85 * scale, 294 * scale, 96 * scale, 314 * scale, 103 * scale, 314 * scale);
        ctx.bezierCurveTo(106 * scale, 316 * scale, 151 * scale, 314 * scale, 156 * scale, 314 * scale);
        ctx.bezierCurveTo(169 * scale, 317 * scale, 182 * scale, 285 * scale, 191 * scale, 256 * scale);
        ctx.bezierCurveTo(134.5 * scale, 254 * scale, 134.5 * scale, 254 * scale, 78 * scale, 252 * scale);
        ctx.closePath();
        fill_path(ctx, color[2]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(84 * scale, 257 * scale);
        ctx.bezierCurveTo(122 * scale, 273 * scale, 146 * scale, 268 * scale, 179 * scale, 261 * scale);
        ctx.bezierCurveTo(190 * scale, 258 * scale, 187 * scale, 266 * scale, 178 * scale, 272 * scale);
        ctx.bezierCurveTo(160 * scale, 284 * scale, 123 * scale, 282 * scale, 100 * scale, 277 * scale);
        ctx.bezierCurveTo(73 * scale, 260 * scale, 79 * scale, 257 * scale, 84 * scale, 257 * scale);
        ctx.closePath();
        fill_path(ctx, color[1]);
        circle(ctx, 102 * scale, 269 * scale, 11 * scale);
        fill_path(ctx, color[3]);
        circle(ctx, 98 * scale, 266 * scale, 5 * scale);
        fill_path(ctx, color[6]);
        circle(ctx, 168 * scale, 269 * scale, 11 * scale);
        fill_path(ctx, color[3]);
        circle(ctx, 164 * scale, 266 * scale, 5 * scale);
        fill_path(ctx, color[6]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(125 * scale, 65 * scale);
        ctx.bezierCurveTo(133 * scale, 45 * scale, 136 * scale, 42 * scale, 141 * scale, 55 * scale);
        ctx.bezierCurveTo(151 * scale, 96 * scale, 164 * scale, 117 * scale, 175 * scale, 134 * scale);
        ctx.bezierCurveTo(203 * scale, 181 * scale, 207 * scale, 182 * scale, 208 * scale, 215 * scale);
        ctx.bezierCurveTo(206 * scale, 240 * scale, 205 * scale, 246 * scale, 184 * scale, 258 * scale);
        ctx.bezierCurveTo(161 * scale, 267 * scale, 131 * scale, 272 * scale, 86 * scale, 258 * scale);
        ctx.bezierCurveTo(67 * scale, 252 * scale, 68 * scale, 239 * scale, 64 * scale, 216 * scale);
        ctx.bezierCurveTo(62 * scale, 194 * scale, 72 * scale, 169 * scale, 92 * scale, 142 * scale);
        ctx.bezierCurveTo(106 * scale, 121 * scale, 114 * scale, 101 * scale, 125 * scale, 65 * scale);
        ctx.closePath();
        fill_path(ctx, color[2]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(115 * scale, 235 * scale);
        ctx.bezierCurveTo(118 * scale, 258 * scale, 137 * scale, 268 * scale, 148 * scale, 246 * scale);
        ctx.bezierCurveTo(156 * scale, 228 * scale, 152 * scale, 169 * scale, 150 * scale, 140 * scale);
        ctx.bezierCurveTo(147 * scale, 87 * scale, 143 * scale, 69 * scale, 142 * scale, 60 * scale);
        ctx.bezierCurveTo(136 * scale, 44 * scale, 132 * scale, 43 * scale, 127 * scale, 62 * scale);
        ctx.bezierCurveTo(119 * scale, 116 * scale, 119 * scale, 140 * scale, 116 * scale, 166 * scale);
        ctx.bezierCurveTo(113 * scale, 202 * scale, 113 * scale, 223 * scale, 115 * scale, 233 * scale);
        ctx.closePath();
        fill_path(ctx, color[4]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(132 * scale, 219 * scale);
        ctx.bezierCurveTo(140 * scale, 229 * scale, 142 * scale, 231 * scale, 145 * scale, 237 * scale);
        ctx.bezierCurveTo(145 * scale, 245 * scale, 139 * scale, 249 * scale, 133 * scale, 249 * scale);
        ctx.bezierCurveTo(123 * scale, 248 * scale, 123 * scale, 243 * scale, 121 * scale, 239 * scale);
        ctx.bezierCurveTo(126 * scale, 227 * scale, 129 * scale, 223 * scale, 132 * scale, 219 * scale);
        ctx.closePath();
        fill_path(ctx, color[8]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(133 * scale, 179 * scale);
        ctx.bezierCurveTo(140 * scale, 188.5 * scale, 140 * scale, 188.5 * scale, 147 * scale, 198 * scale);
        ctx.bezierCurveTo(148 * scale, 209 * scale, 142 * scale, 214 * scale, 133 * scale, 214 * scale);
        ctx.bezierCurveTo(121 * scale, 211 * scale, 121 * scale, 207 * scale, 120 * scale, 200 * scale);
        ctx.bezierCurveTo(126.5 * scale, 189.5 * scale, 126.5 * scale, 189.5 * scale, 133 * scale, 179 * scale);
        ctx.closePath();
        fill_path(ctx, color[8]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(133 * scale, 143 * scale);
        ctx.bezierCurveTo(139 * scale, 151.5 * scale, 139 * scale, 151.5 * scale, 145 * scale, 160 * scale);
        ctx.bezierCurveTo(143 * scale, 167 * scale, 140 * scale, 170 * scale, 134 * scale, 170 * scale);
        ctx.bezierCurveTo(128 * scale, 169 * scale, 124 * scale, 167 * scale, 123 * scale, 161 * scale);
        ctx.bezierCurveTo(128 * scale, 152 * scale, 128 * scale, 152 * scale, 133 * scale, 143 * scale);
        ctx.closePath();
        fill_path(ctx, color[8]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(133 * scale, 115 * scale);
        ctx.bezierCurveTo(137.5 * scale, 121.5 * scale, 137.5 * scale, 121.5 * scale, 142 * scale, 128 * scale);
        ctx.bezierCurveTo(141 * scale, 133 * scale, 138 * scale, 135 * scale, 133 * scale, 135 * scale);
        ctx.bezierCurveTo(129 * scale, 135 * scale, 125 * scale, 132 * scale, 125 * scale, 129 * scale);
        ctx.bezierCurveTo(129 * scale, 122 * scale, 129 * scale, 122 * scale, 133 * scale, 115 * scale);
        ctx.closePath();
        fill_path(ctx, color[8]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(133 * scale, 94 * scale);
        ctx.bezierCurveTo(136.5 * scale, 98.5 * scale, 136.5 * scale, 98.5 * scale, 140 * scale, 103 * scale);
        ctx.bezierCurveTo(139 * scale, 109 * scale, 137 * scale, 109 * scale, 133 * scale, 110 * scale);
        ctx.bezierCurveTo(127 * scale, 108 * scale, 129 * scale, 107 * scale, 127 * scale, 105 * scale);
        ctx.bezierCurveTo(130 * scale, 99.5 * scale, 130 * scale, 99.5 * scale, 133 * scale, 94 * scale);
        ctx.closePath();
        fill_path(ctx, color[8]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(130 * scale, 279 * scale);
        ctx.bezierCurveTo(136.5 * scale, 287.5 * scale, 136.5 * scale, 287.5 * scale, 143 * scale, 296 * scale);
        ctx.bezierCurveTo(143 * scale, 302 * scale, 139 * scale, 309 * scale, 131 * scale, 308 * scale);
        ctx.bezierCurveTo(123 * scale, 306 * scale, 121 * scale, 303 * scale, 120 * scale, 297 * scale);
        ctx.bezierCurveTo(125.5 * scale, 288.5 * scale, 125.5 * scale, 288.5 * scale, 131 * scale, 280 * scale);
        ctx.closePath();
        fill_path(ctx, color[8]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(147 * scale, 303 * scale);
        ctx.bezierCurveTo(151 * scale, 311 * scale, 151 * scale, 319 * scale, 147 * scale, 321 * scale);
        ctx.bezierCurveTo(138 * scale, 320 * scale, 145 * scale, 308 * scale, 147 * scale, 303 * scale);
        ctx.closePath();
        fill_path(ctx, color[8]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(115 * scale, 303 * scale);
        ctx.bezierCurveTo(115 * scale, 312 * scale, 118 * scale, 319 * scale, 115 * scale, 319 * scale);
        ctx.bezierCurveTo(112 * scale, 324 * scale, 109 * scale, 318 * scale, 109 * scale, 314 * scale);
        ctx.bezierCurveTo(109 * scale, 308 * scale, 112 * scale, 303 * scale, 115 * scale, 303 * scale);
        ctx.closePath();
        fill_path(ctx, color[8]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(89 * scale, 280 * scale);
        ctx.bezierCurveTo(83 * scale, 279 * scale, 80 * scale, 281 * scale, 81 * scale, 286 * scale);
        ctx.bezierCurveTo(83 * scale, 290 * scale, 84 * scale, 290 * scale, 87 * scale, 286 * scale);
        ctx.closePath();
        fill_path(ctx, color[8]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(94 * scale, 290 * scale);
        ctx.bezierCurveTo(93 * scale, 294 * scale, 90 * scale, 303 * scale, 86 * scale, 298 * scale);
        ctx.bezierCurveTo(84 * scale, 295 * scale, 84 * scale, 291 * scale, 89 * scale, 291 * scale);
        ctx.closePath();
        fill_path(ctx, color[8]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(163 * scale, 295 * scale);
        ctx.bezierCurveTo(175 * scale, 294 * scale, 176 * scale, 296 * scale, 175 * scale, 301 * scale);
        ctx.bezierCurveTo(174 * scale, 305 * scale, 171 * scale, 305 * scale, 166 * scale, 300 * scale);
        ctx.closePath();
        fill_path(ctx, color[8]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(172 * scale, 286 * scale);
        ctx.bezierCurveTo(180 * scale, 285 * scale, 181 * scale, 285 * scale, 180 * scale, 291 * scale);
        ctx.bezierCurveTo(176 * scale, 295 * scale, 174 * scale, 294 * scale, 172 * scale, 286 * scale);
        ctx.closePath();
        fill_path(ctx, color[8]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(115 * scale, 37 * scale);
        ctx.bezierCurveTo(116 * scale, 28 * scale, 119 * scale, 27 * scale, 126 * scale, 37 * scale);
        ctx.bezierCurveTo(134 * scale, 48 * scale, 134 * scale, 49 * scale, 132 * scale, 59 * scale);
        ctx.bezierCurveTo(131 * scale, 67 * scale, 127 * scale, 65 * scale, 120 * scale, 56 * scale);
        ctx.bezierCurveTo(114 * scale, 49 * scale, 113 * scale, 43 * scale, 115 * scale, 38 * scale);
        ctx.closePath();
        fill_path(ctx, color[7]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(146 * scale, 34 * scale);
        ctx.bezierCurveTo(152 * scale, 28 * scale, 155 * scale, 27 * scale, 157 * scale, 39 * scale);
        ctx.bezierCurveTo(157 * scale, 45 * scale, 157 * scale, 49 * scale, 150 * scale, 56 * scale);
        ctx.bezierCurveTo(141 * scale, 66 * scale, 138 * scale, 66 * scale, 138 * scale, 57 * scale);
        ctx.bezierCurveTo(137 * scale, 50 * scale, 137 * scale, 47 * scale, 141 * scale, 42 * scale);
        ctx.closePath();
        fill_path(ctx, color[7]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(143 * scale, 69 * scale);
        ctx.bezierCurveTo(148 * scale, 56 * scale, 156 * scale, 50 * scale, 158 * scale, 58 * scale);
        ctx.bezierCurveTo(159 * scale, 64 * scale, 160 * scale, 67 * scale, 153 * scale, 77 * scale);
        ctx.bezierCurveTo(148 * scale, 83 * scale, 145 * scale, 84 * scale, 143 * scale, 77 * scale);
        ctx.closePath();
        fill_path(ctx, color[7]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(149 * scale, 92 * scale);
        ctx.bezierCurveTo(149 * scale, 89 * scale, 151 * scale, 84 * scale, 156 * scale, 79 * scale);
        ctx.bezierCurveTo(161 * scale, 73 * scale, 163 * scale, 78 * scale, 162 * scale, 86 * scale);
        ctx.bezierCurveTo(161 * scale, 91 * scale, 155 * scale, 99 * scale, 152 * scale, 98 * scale);
        ctx.closePath();
        fill_path(ctx, color[7]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(111 * scale, 61 * scale);
        ctx.bezierCurveTo(114 * scale, 51 * scale, 117 * scale, 51 * scale, 124 * scale, 64 * scale);
        ctx.bezierCurveTo(128 * scale, 68 * scale, 128 * scale, 76 * scale, 126 * scale, 79 * scale);
        ctx.bezierCurveTo(123 * scale, 84 * scale, 122 * scale, 82 * scale, 115 * scale, 74 * scale);
        ctx.bezierCurveTo(112 * scale, 67 * scale, 115 * scale, 74 * scale, 115 * scale, 74 * scale);
        ctx.bezierCurveTo(111 * scale, 68 * scale, 111 * scale, 66 * scale, 111 * scale, 62 * scale);
        ctx.closePath();
        fill_path(ctx, color[7]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(107 * scale, 81 * scale);
        ctx.bezierCurveTo(108 * scale, 74 * scale, 112 * scale, 73 * scale, 118 * scale, 84 * scale);
        ctx.bezierCurveTo(122 * scale, 88 * scale, 122 * scale, 93 * scale, 121 * scale, 98 * scale);
        ctx.bezierCurveTo(114 * scale, 98 * scale, 113 * scale, 98 * scale, 109 * scale, 90 * scale);
        ctx.bezierCurveTo(107 * scale, 87 * scale, 106 * scale, 85 * scale, 107 * scale, 82 * scale);
        ctx.closePath();
        fill_path(ctx, color[7]);
        return can;
    };

    function create_hurt_dragon(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 271 * scale;
        can.height = 366 * scale;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(133 * scale, 99 * scale);
        ctx.bezierCurveTo(186 * scale, 123 * scale, 199 * scale, 152 * scale, 209 * scale, 169 * scale);
        ctx.bezierCurveTo(228 * scale, 205 * scale, 224 * scale, 245 * scale, 190 * scale, 276 * scale);
        ctx.bezierCurveTo(161 * scale, 296 * scale, 99 * scale, 292 * scale, 79 * scale, 274 * scale);
        ctx.bezierCurveTo(49 * scale, 253 * scale, 47 * scale, 214 * scale, 50 * scale, 197 * scale);
        ctx.bezierCurveTo(61 * scale, 143 * scale, 102 * scale, 113 * scale, 131 * scale, 99 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(73 * scale, 270 * scale);
        ctx.bezierCurveTo(79 * scale, 280 * scale, 77 * scale, 280 * scale, 78 * scale, 287 * scale);
        ctx.bezierCurveTo(78 * scale, 290 * scale, 83 * scale, 291 * scale, 82 * scale, 299 * scale);
        ctx.bezierCurveTo(81 * scale, 301 * scale, 87 * scale, 301 * scale, 92 * scale, 314 * scale);
        ctx.bezierCurveTo(94 * scale, 319 * scale, 100 * scale, 321 * scale, 107 * scale, 320 * scale);
        ctx.bezierCurveTo(111 * scale, 323 * scale, 114 * scale, 324 * scale, 119 * scale, 320 * scale);
        ctx.bezierCurveTo(137 * scale, 321 * scale, 146 * scale, 323 * scale, 139 * scale, 320 * scale);
        ctx.bezierCurveTo(141 * scale, 324 * scale, 150 * scale, 324 * scale, 153 * scale, 320 * scale);
        ctx.bezierCurveTo(168 * scale, 319 * scale, 171 * scale, 316 * scale, 173 * scale, 307 * scale);
        ctx.bezierCurveTo(180 * scale, 305 * scale, 180 * scale, 301 * scale, 178 * scale, 296 * scale);
        ctx.bezierCurveTo(183 * scale, 296 * scale, 185 * scale, 289 * scale, 188 * scale, 279 * scale);
        ctx.bezierCurveTo(171 * scale, 286 * scale, 149 * scale, 290 * scale, 132 * scale, 289 * scale);
        ctx.bezierCurveTo(101 * scale, 290 * scale, 86 * scale, 280 * scale, 74 * scale, 271 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(76 * scale, 252 * scale);
        ctx.bezierCurveTo(85 * scale, 294 * scale, 96 * scale, 314 * scale, 103 * scale, 314 * scale);
        ctx.bezierCurveTo(106 * scale, 316 * scale, 151 * scale, 314 * scale, 156 * scale, 314 * scale);
        ctx.bezierCurveTo(169 * scale, 317 * scale, 182 * scale, 285 * scale, 191 * scale, 256 * scale);
        ctx.bezierCurveTo(134.5 * scale, 254 * scale, 134.5 * scale, 254 * scale, 78 * scale, 252 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(84 * scale, 257 * scale);
        ctx.bezierCurveTo(122 * scale, 273 * scale, 146 * scale, 268 * scale, 179 * scale, 261 * scale);
        ctx.bezierCurveTo(190 * scale, 258 * scale, 187 * scale, 266 * scale, 178 * scale, 272 * scale);
        ctx.bezierCurveTo(160 * scale, 284 * scale, 123 * scale, 282 * scale, 100 * scale, 277 * scale);
        ctx.bezierCurveTo(73 * scale, 260 * scale, 79 * scale, 257 * scale, 84 * scale, 257 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(125 * scale, 65 * scale);
        ctx.bezierCurveTo(133 * scale, 45 * scale, 136 * scale, 42 * scale, 141 * scale, 55 * scale);
        ctx.bezierCurveTo(151 * scale, 96 * scale, 164 * scale, 117 * scale, 175 * scale, 134 * scale);
        ctx.bezierCurveTo(203 * scale, 181 * scale, 207 * scale, 182 * scale, 208 * scale, 215 * scale);
        ctx.bezierCurveTo(206 * scale, 240 * scale, 205 * scale, 246 * scale, 184 * scale, 258 * scale);
        ctx.bezierCurveTo(161 * scale, 267 * scale, 131 * scale, 272 * scale, 86 * scale, 258 * scale);
        ctx.bezierCurveTo(67 * scale, 252 * scale, 68 * scale, 239 * scale, 64 * scale, 216 * scale);
        ctx.bezierCurveTo(62 * scale, 194 * scale, 72 * scale, 169 * scale, 92 * scale, 142 * scale);
        ctx.bezierCurveTo(106 * scale, 121 * scale, 114 * scale, 101 * scale, 125 * scale, 65 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(115 * scale, 37 * scale);
        ctx.bezierCurveTo(116 * scale, 28 * scale, 119 * scale, 27 * scale, 126 * scale, 37 * scale);
        ctx.bezierCurveTo(134 * scale, 48 * scale, 134 * scale, 49 * scale, 132 * scale, 59 * scale);
        ctx.bezierCurveTo(131 * scale, 67 * scale, 127 * scale, 65 * scale, 120 * scale, 56 * scale);
        ctx.bezierCurveTo(114 * scale, 49 * scale, 113 * scale, 43 * scale, 115 * scale, 38 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(146 * scale, 34 * scale);
        ctx.bezierCurveTo(152 * scale, 28 * scale, 155 * scale, 27 * scale, 157 * scale, 39 * scale);
        ctx.bezierCurveTo(157 * scale, 45 * scale, 157 * scale, 49 * scale, 150 * scale, 56 * scale);
        ctx.bezierCurveTo(141 * scale, 66 * scale, 138 * scale, 66 * scale, 138 * scale, 57 * scale);
        ctx.bezierCurveTo(137 * scale, 50 * scale, 137 * scale, 47 * scale, 141 * scale, 42 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(143 * scale, 69 * scale);
        ctx.bezierCurveTo(148 * scale, 56 * scale, 156 * scale, 50 * scale, 158 * scale, 58 * scale);
        ctx.bezierCurveTo(159 * scale, 64 * scale, 160 * scale, 67 * scale, 153 * scale, 77 * scale);
        ctx.bezierCurveTo(148 * scale, 83 * scale, 145 * scale, 84 * scale, 143 * scale, 77 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(149 * scale, 92 * scale);
        ctx.bezierCurveTo(149 * scale, 89 * scale, 151 * scale, 84 * scale, 156 * scale, 79 * scale);
        ctx.bezierCurveTo(161 * scale, 73 * scale, 163 * scale, 78 * scale, 162 * scale, 86 * scale);
        ctx.bezierCurveTo(161 * scale, 91 * scale, 155 * scale, 99 * scale, 152 * scale, 98 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(111 * scale, 61 * scale);
        ctx.bezierCurveTo(114 * scale, 51 * scale, 117 * scale, 51 * scale, 124 * scale, 64 * scale);
        ctx.bezierCurveTo(128 * scale, 68 * scale, 128 * scale, 76 * scale, 126 * scale, 79 * scale);
        ctx.bezierCurveTo(123 * scale, 84 * scale, 122 * scale, 82 * scale, 115 * scale, 74 * scale);
        ctx.bezierCurveTo(112 * scale, 67 * scale, 115 * scale, 74 * scale, 115 * scale, 74 * scale);
        ctx.bezierCurveTo(111 * scale, 68 * scale, 111 * scale, 66 * scale, 111 * scale, 62 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(107 * scale, 81 * scale);
        ctx.bezierCurveTo(108 * scale, 74 * scale, 112 * scale, 73 * scale, 118 * scale, 84 * scale);
        ctx.bezierCurveTo(122 * scale, 88 * scale, 122 * scale, 93 * scale, 121 * scale, 98 * scale);
        ctx.bezierCurveTo(114 * scale, 98 * scale, 113 * scale, 98 * scale, 109 * scale, 90 * scale);
        ctx.bezierCurveTo(107 * scale, 87 * scale, 106 * scale, 85 * scale, 107 * scale, 82 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        return can;
    };

    function create_wingleft(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 85 * scale;
        can.height = 145 * scale;
        ctx.translate(-20 * scale, -95 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(50 * scale, 105 * scale);
        ctx.bezierCurveTo(52 * scale, 119 * scale, 64 * scale, 137 * scale, 71 * scale, 146 * scale);
        ctx.bezierCurveTo(71 * scale, 161 * scale, 74 * scale, 169 * scale, 79 * scale, 179 * scale);
        ctx.bezierCurveTo(68 * scale, 192 * scale, 70 * scale, 204 * scale, 69 * scale, 216 * scale);
        ctx.bezierCurveTo(50 * scale, 189.5 * scale, 50 * scale, 189.5 * scale, 31 * scale, 163 * scale);
        ctx.closePath();
        fill_path(ctx, color[1]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(44 * scale, 106 * scale);
        ctx.bezierCurveTo(49 * scale, 90 * scale, 58 * scale, 104 * scale, 51 * scale, 121 * scale);
        ctx.bezierCurveTo(45 * scale, 143 * scale, 41 * scale, 151 * scale, 37 * scale, 162 * scale);
        ctx.bezierCurveTo(48 * scale, 180 * scale, 58 * scale, 188 * scale, 76 * scale, 205 * scale);
        ctx.bezierCurveTo(104 * scale, 209 * scale, 105 * scale, 229 * scale, 92 * scale, 235 * scale);
        ctx.bezierCurveTo(76 * scale, 239 * scale, 75 * scale, 232 * scale, 56 * scale, 213 * scale);
        ctx.bezierCurveTo(31 * scale, 187 * scale, 28 * scale, 176 * scale, 23 * scale, 162 * scale);
        ctx.bezierCurveTo(38 * scale, 131 * scale, 40 * scale, 120 * scale, 44 * scale, 106 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[3], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(30 * scale, 159 * scale);
        ctx.bezierCurveTo(46 * scale, 157 * scale, 59 * scale, 152 * scale, 68 * scale, 148 * scale);
        ctx.bezierCurveTo(63 * scale, 155 * scale, 52 * scale, 160 * scale, 44 * scale, 164 * scale);
        ctx.bezierCurveTo(59 * scale, 169 * scale, 66 * scale, 174 * scale, 75 * scale, 178 * scale);
        ctx.bezierCurveTo(58 * scale, 178 * scale, 49 * scale, 175 * scale, 37 * scale, 174 * scale);
        ctx.closePath();
        fill_path(ctx, color[2]);
        return can;
    };

    function create_hurt_wingleft(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 85 * scale;
        can.height = 145 * scale;
        ctx.translate(-20 * scale, -95 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(50 * scale, 105 * scale);
        ctx.bezierCurveTo(52 * scale, 119 * scale, 64 * scale, 137 * scale, 71 * scale, 146 * scale);
        ctx.bezierCurveTo(71 * scale, 161 * scale, 74 * scale, 169 * scale, 79 * scale, 179 * scale);
        ctx.bezierCurveTo(68 * scale, 192 * scale, 70 * scale, 204 * scale, 69 * scale, 216 * scale);
        ctx.bezierCurveTo(50 * scale, 189.5 * scale, 50 * scale, 189.5 * scale, 31 * scale, 163 * scale);
        ctx.closePath();
        fill_path(ctx, color);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(44 * scale, 106 * scale);
        ctx.bezierCurveTo(49 * scale, 90 * scale, 58 * scale, 104 * scale, 51 * scale, 121 * scale);
        ctx.bezierCurveTo(45 * scale, 143 * scale, 41 * scale, 151 * scale, 37 * scale, 162 * scale);
        ctx.bezierCurveTo(48 * scale, 180 * scale, 58 * scale, 188 * scale, 76 * scale, 205 * scale);
        ctx.bezierCurveTo(104 * scale, 209 * scale, 105 * scale, 229 * scale, 92 * scale, 235 * scale);
        ctx.bezierCurveTo(76 * scale, 239 * scale, 75 * scale, 232 * scale, 56 * scale, 213 * scale);
        ctx.bezierCurveTo(31 * scale, 187 * scale, 28 * scale, 176 * scale, 23 * scale, 162 * scale);
        ctx.bezierCurveTo(38 * scale, 131 * scale, 40 * scale, 120 * scale, 44 * scale, 106 * scale);
        ctx.closePath();
        fill_path(ctx, color, color, 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(30 * scale, 159 * scale);
        ctx.bezierCurveTo(46 * scale, 157 * scale, 59 * scale, 152 * scale, 68 * scale, 148 * scale);
        ctx.bezierCurveTo(63 * scale, 155 * scale, 52 * scale, 160 * scale, 44 * scale, 164 * scale);
        ctx.bezierCurveTo(59 * scale, 169 * scale, 66 * scale, 174 * scale, 75 * scale, 178 * scale);
        ctx.bezierCurveTo(58 * scale, 178 * scale, 49 * scale, 175 * scale, 37 * scale, 174 * scale);
        ctx.closePath();
        fill_path(ctx, color);
        return can;
    };

    function create_wingright(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 85 * scale;
        can.height = 145 * scale;
        ctx.translate(-165 * scale, -95 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(217 * scale, 103 * scale);
        ctx.bezierCurveTo(209 * scale, 129 * scale, 203 * scale, 137 * scale, 195 * scale, 146 * scale);
        ctx.bezierCurveTo(195 * scale, 159 * scale, 194 * scale, 167 * scale, 189 * scale, 178 * scale);
        ctx.bezierCurveTo(193 * scale, 186 * scale, 196 * scale, 195 * scale, 198 * scale, 216 * scale);
        ctx.bezierCurveTo(217.5 * scale, 189.5 * scale, 217.5 * scale, 189.5 * scale, 237 * scale, 163 * scale);
        ctx.closePath();
        fill_path(ctx, color[1]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(231 * scale, 163 * scale);
        ctx.bezierCurveTo(221 * scale, 139 * scale, 218 * scale, 128 * scale, 215 * scale, 114 * scale);
        ctx.bezierCurveTo(213 * scale, 102 * scale, 220 * scale, 92 * scale, 222 * scale, 107 * scale);
        ctx.bezierCurveTo(224 * scale, 118 * scale, 233 * scale, 138 * scale, 244 * scale, 161 * scale);
        ctx.bezierCurveTo(235 * scale, 188 * scale, 224 * scale, 198 * scale, 204 * scale, 221 * scale);
        ctx.bezierCurveTo(190 * scale, 233 * scale, 190 * scale, 235 * scale, 180 * scale, 235 * scale);
        ctx.bezierCurveTo(167 * scale, 235 * scale, 164 * scale, 216 * scale, 175 * scale, 211 * scale);
        ctx.bezierCurveTo(176 * scale, 208 * scale, 181 * scale, 207 * scale, 191 * scale, 205 * scale);
        ctx.bezierCurveTo(213 * scale, 186 * scale, 218 * scale, 180 * scale, 230 * scale, 163 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[3], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(234 * scale, 154 * scale);
        ctx.bezierCurveTo(227 * scale, 156 * scale, 222 * scale, 156 * scale, 199 * scale, 148 * scale);
        ctx.bezierCurveTo(201 * scale, 151 * scale, 216 * scale, 159 * scale, 224 * scale, 162 * scale);
        ctx.bezierCurveTo(209 * scale, 169.5 * scale, 209 * scale, 169.5 * scale, 194 * scale, 177 * scale);
        ctx.bezierCurveTo(213.5 * scale, 175 * scale, 213.5 * scale, 175 * scale, 233 * scale, 173 * scale);
        ctx.closePath();
        fill_path(ctx, color[2]);
        return can;
    };

    function create_hurt_wingright(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 85 * scale;
        can.height = 145 * scale;
        ctx.translate(-165 * scale, -95 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(217 * scale, 103 * scale);
        ctx.bezierCurveTo(209 * scale, 129 * scale, 203 * scale, 137 * scale, 195 * scale, 146 * scale);
        ctx.bezierCurveTo(195 * scale, 159 * scale, 194 * scale, 167 * scale, 189 * scale, 178 * scale);
        ctx.bezierCurveTo(193 * scale, 186 * scale, 196 * scale, 195 * scale, 198 * scale, 216 * scale);
        ctx.bezierCurveTo(217.5 * scale, 189.5 * scale, 217.5 * scale, 189.5 * scale, 237 * scale, 163 * scale);
        ctx.closePath();
        fill_path(ctx, color);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(231 * scale, 163 * scale);
        ctx.bezierCurveTo(221 * scale, 139 * scale, 218 * scale, 128 * scale, 215 * scale, 114 * scale);
        ctx.bezierCurveTo(213 * scale, 102 * scale, 220 * scale, 92 * scale, 222 * scale, 107 * scale);
        ctx.bezierCurveTo(224 * scale, 118 * scale, 233 * scale, 138 * scale, 244 * scale, 161 * scale);
        ctx.bezierCurveTo(235 * scale, 188 * scale, 224 * scale, 198 * scale, 204 * scale, 221 * scale);
        ctx.bezierCurveTo(190 * scale, 233 * scale, 190 * scale, 235 * scale, 180 * scale, 235 * scale);
        ctx.bezierCurveTo(167 * scale, 235 * scale, 164 * scale, 216 * scale, 175 * scale, 211 * scale);
        ctx.bezierCurveTo(176 * scale, 208 * scale, 181 * scale, 207 * scale, 191 * scale, 205 * scale);
        ctx.bezierCurveTo(213 * scale, 186 * scale, 218 * scale, 180 * scale, 230 * scale, 163 * scale);
        ctx.closePath();
        fill_path(ctx, color, color, 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(234 * scale, 154 * scale);
        ctx.bezierCurveTo(227 * scale, 156 * scale, 222 * scale, 156 * scale, 199 * scale, 148 * scale);
        ctx.bezierCurveTo(201 * scale, 151 * scale, 216 * scale, 159 * scale, 224 * scale, 162 * scale);
        ctx.bezierCurveTo(209 * scale, 169.5 * scale, 209 * scale, 169.5 * scale, 194 * scale, 177 * scale);
        ctx.bezierCurveTo(213.5 * scale, 175 * scale, 213.5 * scale, 175 * scale, 233 * scale, 173 * scale);
        ctx.closePath();
        fill_path(ctx, color);
        return can;
    };

    function create_explorer_hat(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 187 * scale;
        can.height = 119 * scale;
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.translate(0, 3);
        ctx.moveTo(53 * scale, 45 * scale);
        ctx.bezierCurveTo(3 * scale, 60 * scale, 11 * scale, 72 * scale, 19 * scale, 81 * scale);
        ctx.bezierCurveTo(28 * scale, 82 * scale, 24 * scale, 81 * scale, 29 * scale, 82 * scale);
        ctx.bezierCurveTo(26 * scale, 87 * scale, 28 * scale, 84 * scale, 28 * scale, 87 * scale);
        ctx.bezierCurveTo(63 * scale, 101 * scale, 92 * scale, 100 * scale, 138 * scale, 93 * scale);
        ctx.bezierCurveTo(172 * scale, 87 * scale, 180 * scale, 72 * scale, 168 * scale, 62 * scale);
        ctx.bezierCurveTo(154 * scale, 51 * scale, 150 * scale, 50 * scale, 148 * scale, 49 * scale);
        ctx.bezierCurveTo(132 * scale, 42 * scale, 90 * scale, 40 * scale, 55 * scale, 45 * scale);
        ctx.closePath();
        fill_path(ctx, color[5]);
        ctx.globalAlpha = 1;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.translate(0, -3);
        ctx.moveTo(53 * scale, 45 * scale);
        ctx.bezierCurveTo(3 * scale, 60 * scale, 11 * scale, 72 * scale, 19 * scale, 81 * scale);
        ctx.bezierCurveTo(28 * scale, 82 * scale, 24 * scale, 81 * scale, 29 * scale, 82 * scale);
        ctx.bezierCurveTo(26 * scale, 87 * scale, 28 * scale, 84 * scale, 28 * scale, 87 * scale);
        ctx.bezierCurveTo(63 * scale, 101 * scale, 92 * scale, 100 * scale, 138 * scale, 93 * scale);
        ctx.bezierCurveTo(172 * scale, 87 * scale, 180 * scale, 72 * scale, 168 * scale, 62 * scale);
        ctx.bezierCurveTo(154 * scale, 51 * scale, 150 * scale, 50 * scale, 148 * scale, 49 * scale);
        ctx.bezierCurveTo(132 * scale, 42 * scale, 90 * scale, 40 * scale, 55 * scale, 45 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[1], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(151 * scale, 60 * scale);
        ctx.bezierCurveTo(140 * scale, 36 * scale, 137 * scale, 32 * scale, 124 * scale, 29 * scale);
        ctx.bezierCurveTo(98 * scale, 22 * scale, 80 * scale, 24 * scale, 62 * scale, 28 * scale);
        ctx.bezierCurveTo(42 * scale, 35 * scale, 38 * scale, 46 * scale, 34 * scale, 58 * scale);
        ctx.bezierCurveTo(53 * scale, 74 * scale, 76 * scale, 76 * scale, 91 * scale, 78 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[1], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(37 * scale, 53 * scale);
        ctx.bezierCurveTo(30 * scale, 56 * scale, 29 * scale, 67 * scale, 30 * scale, 68 * scale);
        ctx.bezierCurveTo(94 * scale, 108 * scale, 150 * scale, 76 * scale, 155 * scale, 70 * scale);
        ctx.bezierCurveTo(154 * scale, 60 * scale, 151 * scale, 54 * scale, 149 * scale, 53 * scale);
        ctx.bezierCurveTo(101 * scale, 74 * scale, 66 * scale, 66 * scale, 37 * scale, 53 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[3], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(100 * scale, 36 * scale);
        ctx.bezierCurveTo(92 * scale, 25 * scale, 86 * scale, 28 * scale, 82 * scale, 34 * scale);
        ctx.bezierCurveTo(88 * scale, 40 * scale, 93 * scale, 40 * scale, 98 * scale, 36 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[1], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(80 * scale, 43 * scale);
        ctx.bezierCurveTo(69 * scale, 46 * scale, 67 * scale, 52 * scale, 69 * scale, 58 * scale);
        fill_path(ctx, undefined, color[1], 4 * scale);
        circle(ctx, 58 * scale, 50 * scale, 5 * scale);
        fill_path(ctx, color[4]);
        circle(ctx, 43 * scale, 65 * scale, 5 * scale);
        fill_path(ctx, color[4]);
        circle(ctx, 58 * scale, 73 * scale, 5 * scale);
        fill_path(ctx, color[4]);
        circle(ctx, 58 * scale, 50 * scale, 2 * scale);
        fill_path(ctx, color[5]);
        circle(ctx, 43 * scale, 65 * scale, 2 * scale);
        fill_path(ctx, color[5]);
        circle(ctx, 58 * scale, 73 * scale, 2 * scale);
        fill_path(ctx, color[5]);
        return can;
    };

    function create_wooden_helmet(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 180 * scale;
        can.height = 120 * scale;
        ctx.translate(-65 * scale, -35 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(0, 10 * scale);
        ctx.save();
        ctx.translate(150.5 * scale, 63.84375 * scale);
        round_rect(ctx, -67 * scale, -16.5 * scale, 134 * scale, 33 * scale, 5 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(80.5 * scale, 75.34375 * scale);
        ctx.bezierCurveTo(83 * scale, 106.34375 * scale, 83 * scale, 106.34375 * scale, 85.5 * scale, 137.34375 * scale);
        ctx.bezierCurveTo(93 * scale, 135.84375 * scale, 93 * scale, 135.84375 * scale, 100.5 * scale, 134.34375 * scale);
        ctx.bezierCurveTo(99.5 * scale, 100.84375 * scale, 99.5 * scale, 100.84375 * scale, 98.5 * scale, 67.34375 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(206.5 * scale, 71.34375 * scale);
        ctx.bezierCurveTo(203.5 * scale, 104.34375 * scale, 203.5 * scale, 104.34375 * scale, 200.5 * scale, 137.34375 * scale);
        ctx.bezierCurveTo(208.5 * scale, 137.34375 * scale, 208.5 * scale, 137.34375 * scale, 216.5 * scale, 137.34375 * scale);
        ctx.bezierCurveTo(219 * scale, 102.84375 * scale, 219 * scale, 102.84375 * scale, 221.5 * scale, 68.34375 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(136.5 * scale, 75.34375 * scale);
        ctx.bezierCurveTo(139 * scale, 94.34375 * scale, 139 * scale, 94.34375 * scale, 141.5 * scale, 113.34375 * scale);
        ctx.bezierCurveTo(149.5 * scale, 115.34375 * scale, 149.5 * scale, 115.34375 * scale, 157.5 * scale, 117.34375 * scale);
        ctx.bezierCurveTo(162 * scale, 97.34375 * scale, 162 * scale, 97.34375 * scale, 166.5 * scale, 77.34375 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.save();
        ctx.translate(152.5 * scale, 80.84375 * scale);
        ctx.rotate(3.12);
        round_rect(ctx, -73 * scale, -20.5 * scale, 146 * scale, 41 * scale, 5 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(0, -10 * scale);
        ctx.save();
        ctx.translate(150.5 * scale, 63.84375 * scale);
        round_rect(ctx, -67 * scale, -16.5 * scale, 134 * scale, 33 * scale, 5 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(80.5 * scale, 75.34375 * scale);
        ctx.bezierCurveTo(83 * scale, 106.34375 * scale, 83 * scale, 106.34375 * scale, 85.5 * scale, 137.34375 * scale);
        ctx.bezierCurveTo(93 * scale, 135.84375 * scale, 93 * scale, 135.84375 * scale, 100.5 * scale, 134.34375 * scale);
        ctx.bezierCurveTo(99.5 * scale, 100.84375 * scale, 99.5 * scale, 100.84375 * scale, 98.5 * scale, 67.34375 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(206.5 * scale, 71.34375 * scale);
        ctx.bezierCurveTo(203.5 * scale, 104.34375 * scale, 203.5 * scale, 104.34375 * scale, 200.5 * scale, 137.34375 * scale);
        ctx.bezierCurveTo(208.5 * scale, 137.34375 * scale, 208.5 * scale, 137.34375 * scale, 216.5 * scale, 137.34375 * scale);
        ctx.bezierCurveTo(219 * scale, 102.84375 * scale, 219 * scale, 102.84375 * scale, 221.5 * scale, 68.34375 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(136.5 * scale, 75.34375 * scale);
        ctx.bezierCurveTo(139 * scale, 94.34375 * scale, 139 * scale, 94.34375 * scale, 141.5 * scale, 113.34375 * scale);
        ctx.bezierCurveTo(149.5 * scale, 115.34375 * scale, 149.5 * scale, 115.34375 * scale, 157.5 * scale, 117.34375 * scale);
        ctx.bezierCurveTo(162 * scale, 97.34375 * scale, 162 * scale, 97.34375 * scale, 166.5 * scale, 77.34375 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 4 * scale);
        ctx.save();
        ctx.translate(152.5 * scale, 80.84375 * scale);
        ctx.rotate(3.12);
        round_rect(ctx, -73 * scale, -20.5 * scale, 146 * scale, 41 * scale, 5 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(83.5 * scale, 73.34375 * scale);
        ctx.bezierCurveTo(93.5 * scale, 70.34375 * scale, 105.5 * scale, 70.34375 * scale, 124.5 * scale, 72.34375 * scale);
        ctx.bezierCurveTo(132.5 * scale, 78.34375 * scale, 162.5 * scale, 80.34375 * scale, 176.5 * scale, 76.34375 * scale);
        ctx.bezierCurveTo(194.5 * scale, 69.34375 * scale, 192.5 * scale, 68.34375 * scale, 199.5 * scale, 63.34375 * scale);
        ctx.bezierCurveTo(204.5 * scale, 63.34375 * scale, 204.5 * scale, 63.34375 * scale, 209.5 * scale, 63.34375 * scale);
        ctx.bezierCurveTo(153.5 * scale, 82.34375 * scale, 157.5 * scale, 85.34375 * scale, 209.5 * scale, 63.34375 * scale);
        ctx.bezierCurveTo(194.5 * scale, 88.34375 * scale, 162.5 * scale, 87.34375 * scale, 149.5 * scale, 88.34375 * scale);
        ctx.bezierCurveTo(129.5 * scale, 81.34375 * scale, 103.5 * scale, 75.34375 * scale, 83.5 * scale, 82.34375 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(137.5 * scale, 65.34375 * scale);
        ctx.bezierCurveTo(150.5 * scale, 76.34375 * scale, 170.5 * scale, 71.34375 * scale, 174.5 * scale, 65.34375 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(221.5 * scale, 85.34375 * scale);
        ctx.bezierCurveTo(211.5 * scale, 79.34375 * scale, 191.5 * scale, 88.34375 * scale, 181.5 * scale, 96.34375 * scale);
        ctx.bezierCurveTo(201.5 * scale, 96.34375 * scale, 201.5 * scale, 96.34375 * scale, 221.5 * scale, 96.34375 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(84.5 * scale, 89.34375 * scale);
        ctx.bezierCurveTo(102.5 * scale, 87.34375 * scale, 112.5 * scale, 88.34375 * scale, 119.5 * scale, 97.34375 * scale);
        ctx.bezierCurveTo(102 * scale, 98.34375 * scale, 102 * scale, 98.34375 * scale, 84.5 * scale, 99.34375 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(208.5 * scale, 104.34375 * scale);
        ctx.bezierCurveTo(208.5 * scale, 110.34375 * scale, 208.5 * scale, 110.34375 * scale, 208.5 * scale, 116.34375 * scale);
        ctx.bezierCurveTo(211.5 * scale, 110.34375 * scale, 211.5 * scale, 110.34375 * scale, 214.5 * scale, 104.34375 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(87.5 * scale, 117.34375 * scale);
        ctx.bezierCurveTo(92 * scale, 118.84375 * scale, 92 * scale, 118.84375 * scale, 96.5 * scale, 120.34375 * scale);
        ctx.bezierCurveTo(93 * scale, 123.84375 * scale, 93 * scale, 123.84375 * scale, 89.5 * scale, 127.34375 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(107.5 * scale, 51.34375 * scale);
        ctx.bezierCurveTo(122.5 * scale, 54.34375 * scale, 122.5 * scale, 54.34375 * scale, 137.5 * scale, 57.34375 * scale);
        ctx.bezierCurveTo(118 * scale, 57.34375 * scale, 118 * scale, 57.34375 * scale, 98.5 * scale, 57.34375 * scale);
        ctx.bezierCurveTo(94.5 * scale, 54.84375 * scale, 94.5 * scale, 54.84375 * scale, 90.5 * scale, 52.34375 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(170.5 * scale, 52.34375 * scale);
        ctx.bezierCurveTo(179.5 * scale, 51.84375 * scale, 179.5 * scale, 51.84375 * scale, 188.5 * scale, 51.34375 * scale);
        ctx.bezierCurveTo(187.5 * scale, 53.84375 * scale, 187.5 * scale, 53.84375 * scale, 186.5 * scale, 56.34375 * scale);
        ctx.bezierCurveTo(177 * scale, 56.34375 * scale, 177 * scale, 56.34375 * scale, 167.5 * scale, 56.34375 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(80.5 * scale, 69.34375 * scale);
        ctx.bezierCurveTo(86.5 * scale, 70.34375 * scale, 86.5 * scale, 70.34375 * scale, 92.5 * scale, 71.34375 * scale);
        ctx.bezierCurveTo(86 * scale, 73.34375 * scale, 86 * scale, 73.34375 * scale, 79.5 * scale, 75.34375 * scale);
        ctx.closePath();
        fill_path(ctx, color[2]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(222.5 * scale, 75.34375 * scale);
        ctx.bezierCurveTo(214.5 * scale, 76.34375 * scale, 214.5 * scale, 76.34375 * scale, 206.5 * scale, 77.34375 * scale);
        ctx.bezierCurveTo(216.5 * scale, 79.34375 * scale, 216.5 * scale, 79.34375 * scale, 226.5 * scale, 81.34375 * scale);
        ctx.closePath();
        fill_path(ctx, color[2]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(116.5 * scale, 100.34375 * scale);
        ctx.bezierCurveTo(128 * scale, 97.34375 * scale, 128 * scale, 97.34375 * scale, 139.5 * scale, 94.34375 * scale);
        ctx.bezierCurveTo(140 * scale, 96.84375 * scale, 140 * scale, 96.84375 * scale, 140.5 * scale, 99.34375 * scale);
        ctx.closePath();
        fill_path(ctx, color[2]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(112.5 * scale, 48.34375 * scale);
        ctx.bezierCurveTo(115.5 * scale, 50.84375 * scale, 115.5 * scale, 50.84375 * scale, 118.5 * scale, 53.34375 * scale);
        ctx.bezierCurveTo(131 * scale, 50.84375 * scale, 131 * scale, 50.84375 * scale, 143.5 * scale, 48.34375 * scale);
        ctx.closePath();
        fill_path(ctx, color[2]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(216.5 * scale, 109.34375 * scale);
        ctx.bezierCurveTo(213 * scale, 114.84375 * scale, 213 * scale, 114.84375 * scale, 209.5 * scale, 120.34375 * scale);
        ctx.bezierCurveTo(212 * scale, 118.84375 * scale, 212 * scale, 118.84375 * scale, 214.5 * scale, 117.34375 * scale);
        ctx.closePath();
        fill_path(ctx, color[2]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(86.5 * scale, 133.34375 * scale);
        ctx.bezierCurveTo(89 * scale, 127.34375 * scale, 89 * scale, 127.34375 * scale, 91.5 * scale, 121.34375 * scale);
        ctx.bezierCurveTo(92.5 * scale, 127.34375 * scale, 92.5 * scale, 127.34375 * scale, 93.5 * scale, 133.34375 * scale);
        ctx.closePath();
        fill_path(ctx, color[2]);
        return can;
    };

    function create_viking_hat(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 175 * scale;
        can.height = 106 * scale;
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(0, 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(28 * scale, 67 * scale);
        ctx.bezierCurveTo(55 * scale, 80 * scale, 126 * scale, 74 * scale, 144 * scale, 68 * scale);
        ctx.bezierCurveTo(144.5 * scale, 75 * scale, 144.5 * scale, 75 * scale, 145 * scale, 82 * scale);
        ctx.bezierCurveTo(114 * scale, 94 * scale, 47 * scale, 91 * scale, 28 * scale, 82 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(0, -8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(145 * scale, 75 * scale);
        ctx.bezierCurveTo(143 * scale, 51 * scale, 133 * scale, 29 * scale, 100 * scale, 27 * scale);
        ctx.bezierCurveTo(52 * scale, 21 * scale, 37 * scale, 37 * scale, 31 * scale, 54 * scale);
        ctx.bezierCurveTo(23 * scale, 78 * scale, 28 * scale, 77 * scale, 36 * scale, 79 * scale);
        ctx.bezierCurveTo(80 * scale, 87 * scale, 120 * scale, 81 * scale, 145 * scale, 76 * scale);
        ctx.closePath();
        fill_path(ctx, color[1]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(38 * scale, 46 * scale);
        ctx.bezierCurveTo(52 * scale, 37 * scale, 69 * scale, 36 * scale, 85 * scale, 36 * scale);
        ctx.bezierCurveTo(118 * scale, 38 * scale, 129 * scale, 42 * scale, 137 * scale, 48 * scale);
        ctx.bezierCurveTo(135 * scale, 45 * scale, 135 * scale, 45 * scale, 133 * scale, 42 * scale);
        ctx.bezierCurveTo(124 * scale, 32 * scale, 116 * scale, 28 * scale, 88 * scale, 25 * scale);
        ctx.bezierCurveTo(47 * scale, 28 * scale, 40 * scale, 32 * scale, 36 * scale, 44 * scale);
        ctx.closePath();
        fill_path(ctx, color[5]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(145 * scale, 75 * scale);
        ctx.bezierCurveTo(143 * scale, 51 * scale, 133 * scale, 29 * scale, 100 * scale, 27 * scale);
        ctx.bezierCurveTo(52 * scale, 21 * scale, 37 * scale, 37 * scale, 31 * scale, 54 * scale);
        ctx.bezierCurveTo(23 * scale, 78 * scale, 28 * scale, 77 * scale, 36 * scale, 79 * scale);
        ctx.bezierCurveTo(80 * scale, 87 * scale, 120 * scale, 81 * scale, 145 * scale, 76 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[2], 4 * scale);
        ctx.translate(0, -3 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(28 * scale, 67 * scale);
        ctx.bezierCurveTo(55 * scale, 80 * scale, 126 * scale, 74 * scale, 144 * scale, 68 * scale);
        ctx.bezierCurveTo(144.5 * scale, 75 * scale, 144.5 * scale, 75 * scale, 145 * scale, 82 * scale);
        ctx.bezierCurveTo(114 * scale, 94 * scale, 47 * scale, 91 * scale, 28 * scale, 82 * scale);
        ctx.closePath();
        fill_path(ctx, color[10], color[10], 4 * scale);
        ctx.translate(0, 3 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(131 * scale, 43 * scale);
        ctx.bezierCurveTo(145 * scale, 40 * scale, 148 * scale, 32 * scale, 147 * scale, 17 * scale);
        ctx.bezierCurveTo(166 * scale, 39 * scale, 155 * scale, 62 * scale, 140 * scale, 67 * scale);
        ctx.bezierCurveTo(128 * scale, 65 * scale, 128 * scale, 52 * scale, 131 * scale, 45 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(41 * scale, 43 * scale);
        ctx.bezierCurveTo(30 * scale, 42 * scale, 24 * scale, 33 * scale, 25 * scale, 17 * scale);
        ctx.bezierCurveTo(7 * scale, 34 * scale, 17 * scale, 63 * scale, 33 * scale, 66 * scale);
        ctx.bezierCurveTo(45 * scale, 59 * scale, 44 * scale, 53 * scale, 42 * scale, 44 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(24 * scale, 19 * scale);
        ctx.bezierCurveTo(24 * scale, 35 * scale, 35 * scale, 42 * scale, 42 * scale, 44 * scale);
        ctx.bezierCurveTo(43 * scale, 51 * scale, 43 * scale, 48 * scale, 43 * scale, 56 * scale);
        ctx.bezierCurveTo(25 * scale, 47 * scale, 17 * scale, 36 * scale, 23 * scale, 20 * scale);
        ctx.closePath();
        fill_path(ctx, color[6]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(148 * scale, 18 * scale);
        ctx.bezierCurveTo(159 * scale, 44 * scale, 139 * scale, 52 * scale, 130 * scale, 55 * scale);
        ctx.bezierCurveTo(129 * scale, 48 * scale, 129 * scale, 46 * scale, 131 * scale, 43 * scale);
        ctx.bezierCurveTo(144 * scale, 37 * scale, 148 * scale, 35 * scale, 147 * scale, 18 * scale);
        ctx.closePath();
        fill_path(ctx, color[6]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(131 * scale, 43 * scale);
        ctx.bezierCurveTo(145 * scale, 40 * scale, 148 * scale, 32 * scale, 147 * scale, 17 * scale);
        ctx.bezierCurveTo(166 * scale, 39 * scale, 155 * scale, 62 * scale, 140 * scale, 67 * scale);
        ctx.bezierCurveTo(128 * scale, 65 * scale, 128 * scale, 52 * scale, 131 * scale, 45 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[4], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(41 * scale, 43 * scale);
        ctx.bezierCurveTo(30 * scale, 42 * scale, 24 * scale, 33 * scale, 25 * scale, 17 * scale);
        ctx.bezierCurveTo(7 * scale, 34 * scale, 17 * scale, 63 * scale, 33 * scale, 66 * scale);
        ctx.bezierCurveTo(45 * scale, 59 * scale, 44 * scale, 53 * scale, 42 * scale, 44 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[4], 4 * scale);
        ctx.save();
        ctx.translate(87 * scale, 34.5 * scale);
        ctx.rotate(0);
        round_rect(ctx, -8 * scale, -10.5 * scale, 16 * scale, 21 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[7], color[2], 4 * scale);
        ctx.save();
        ctx.translate(87 * scale, 57 * scale);
        ctx.rotate(0);
        round_rect(ctx, -8 * scale, -23 * scale, 16 * scale, 46 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[8], color[2], 4 * scale);
        circle(ctx, 87 * scale, 39 * scale, 4.123105625617661 * scale);
        fill_path(ctx, color[9], color[2], 4 * scale);
        circle(ctx, 87 * scale, 60 * scale, 4.242640687119285 * scale);
        fill_path(ctx, color[9], color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(28 * scale, 67 * scale);
        ctx.bezierCurveTo(55 * scale, 80 * scale, 126 * scale, 74 * scale, 144 * scale, 68 * scale);
        ctx.bezierCurveTo(144.5 * scale, 75 * scale, 144.5 * scale, 75 * scale, 145 * scale, 82 * scale);
        ctx.bezierCurveTo(114 * scale, 94 * scale, 47 * scale, 91 * scale, 28 * scale, 82 * scale);
        ctx.closePath();
        fill_path(ctx, color[8], color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(27 * scale, 69 * scale);
        ctx.bezierCurveTo(13 * scale, 77 * scale, 16 * scale, 74 * scale, 27 * scale, 80 * scale);
        ctx.closePath();
        fill_path(ctx, color[9], color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(145 * scale, 70 * scale);
        ctx.bezierCurveTo(149.5 * scale, 72 * scale, 149.5 * scale, 72 * scale, 154 * scale, 74 * scale);
        ctx.bezierCurveTo(150 * scale, 77 * scale, 150 * scale, 77 * scale, 146 * scale, 80 * scale);
        ctx.closePath();
        fill_path(ctx, color[9], color[2], 4 * scale);
        circle(ctx, 50 * scale, 80 * scale, 5 * scale);
        fill_path(ctx, color[9], color[2], 4 * scale);
        circle(ctx, 86.01141357421875 * scale, 81.76705932617188 * scale, 5 * scale);
        fill_path(ctx, color[9], color[2], 4 * scale);
        circle(ctx, 119.01141357421875 * scale, 80.13069152832031 * scale, 5 * scale);
        fill_path(ctx, color[9], color[2], 4 * scale);
        return can;
    };

    function create_gold_helmet(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 142 * scale;
        can.height = 118 * scale;
        ctx.save();
        ctx.translate(70.16665649414062 * scale, 38.20831298828125 * scale);
        round_rect(ctx, -58.5 * scale, -27.5 * scale, 117 * scale, 55 * scale, 20 * scale);
        ctx.restore();
        fill_path(ctx, color[0], color[1], 4 * scale);
        ctx.save();
        ctx.translate(70 * scale, 42.70831298828125 * scale);
        round_rect(ctx, -61 * scale, -20 * scale, 122 * scale, 40 * scale, 20 * scale);
        ctx.restore();
        fill_path(ctx, color[2], color[1], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(123 * scale, 70.375 * scale);
        ctx.bezierCurveTo(115 * scale, 99.375 * scale, 119 * scale, 85.375 * scale, 115 * scale, 100.375 * scale);
        ctx.bezierCurveTo(112 * scale, 116.375 * scale, 117 * scale, 109.375 * scale, 131 * scale, 100.375 * scale);
        ctx.bezierCurveTo(131 * scale, 83.375 * scale, 131 * scale, 83.375 * scale, 131 * scale, 66.375 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[1], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(11 * scale, 68.375 * scale);
        ctx.bezierCurveTo(11.166656494140625 * scale, 84.375 * scale, 9 * scale, 99.375 * scale, 10 * scale, 100.375 * scale);
        ctx.bezierCurveTo(35 * scale, 113.375 * scale, 27 * scale, 110.375 * scale, 25 * scale, 95.375 * scale);
        ctx.bezierCurveTo(16 * scale, 68.375 * scale, 17 * scale, 69.375 * scale, 17 * scale, 68.375 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[1], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(46 * scale, 32.375 * scale);
        ctx.bezierCurveTo(43 * scale, 8.375 * scale, 45 * scale, 7.375 * scale, 56 * scale, 6.375 * scale);
        ctx.bezierCurveTo(105 * scale, 4.375 * scale, 102 * scale, 6.375 * scale, 97 * scale, 32.375 * scale);
        ctx.bezierCurveTo(138 * scale, 43.375 * scale, 133 * scale, 45.375 * scale, 133 * scale, 58.375 * scale);
        ctx.bezierCurveTo(133 * scale, 85.375 * scale, 125 * scale, 74.375 * scale, 111 * scale, 70.375 * scale);
        ctx.bezierCurveTo(70 * scale, 69.875 * scale, 29 * scale, 69.375 * scale, 29 * scale, 69.375 * scale);
        ctx.bezierCurveTo(7 * scale, 84.375 * scale, 7 * scale, 70.375 * scale, 7 * scale, 59.375 * scale);
        ctx.bezierCurveTo(6 * scale, 28.375 * scale, 32 * scale, 39.375 * scale, 44 * scale, 32.375 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[1], 4 * scale);
        circle(ctx, 71 * scale, 44.375 * scale, 16.55294535724685 * scale);
        fill_path(ctx, color[2], color[1], 4 * scale);
        circle(ctx, 71 * scale, 43.70831298828125 * scale, 8.94427190999916 * scale);
        fill_path(ctx, color[2], color[1], 4 * scale);
        return can;
    };

    function create_diamond_helmet(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 142 * scale;
        can.height = 118 * scale;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(111 * scale, 27.3671875 * scale);
        ctx.bezierCurveTo(128 * scale, 9.3671875 * scale, 125 * scale, 13.3671875 * scale, 126 * scale, 21.3671875 * scale);
        ctx.bezierCurveTo(126 * scale, 33.3671875 * scale, 119 * scale, 43.3671875 * scale, 118 * scale, 42.3671875 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(31 * scale, 23.3671875 * scale);
        ctx.bezierCurveTo(17 * scale, 15.3671875 * scale, 16 * scale, 14.3671875 * scale, 17 * scale, 20.3671875 * scale);
        ctx.bezierCurveTo(22 * scale, 33.3671875 * scale, 20 * scale, 27.3671875 * scale, 24 * scale, 34.3671875 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 4 * scale);
        ctx.save();
        ctx.translate(70.5 * scale, 34.8671875 * scale);
        ctx.rotate(0);
        round_rect(ctx, -49.5 * scale, -21.5 * scale, 99 * scale, 43 * scale, 15 * scale);
        ctx.restore();
        fill_path(ctx, color[0], color[1], 4 * scale);
        ctx.save();
        ctx.translate(71 * scale, 40.8671875 * scale);
        ctx.rotate(0);
        round_rect(ctx, -49 * scale, -12.5 * scale, 98 * scale, 25 * scale, 15 * scale);
        ctx.restore();
        fill_path(ctx, color[2], color[1], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(19.800003051757812 * scale, 75.95625305175781 * scale);
        ctx.bezierCurveTo(19.300003051757812 * scale, 82.95625305175781 * scale, 19.300003051757812 * scale, 82.95625305175781 * scale, 18.800003051757812 * scale, 89.95625305175781 * scale);
        ctx.bezierCurveTo(38.80000305175781 * scale, 115.95625305175781 * scale, 37.80000305175781 * scale, 104.95625305175781 * scale, 31.800003051757812 * scale, 91.95625305175781 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[1], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(119.80000305175781 * scale, 75.95625305175781 * scale);
        ctx.bezierCurveTo(120.80000305175781 * scale, 82.95625305175781 * scale, 120.80000305175781 * scale, 82.95625305175781 * scale, 121.80000305175781 * scale, 89.95625305175781 * scale);
        ctx.bezierCurveTo(101.80000305175781 * scale, 111.95625305175781 * scale, 99.80000305175781 * scale, 111.95625305175781 * scale, 112.80000305175781 * scale, 81.95625305175781 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[1], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(17.800003051757812 * scale, 49.15625 * scale);
        ctx.bezierCurveTo(17.800003051757812 * scale, 64.15625 * scale, 17.800003051757812 * scale, 64.15625 * scale, 17.800003051757812 * scale, 79.15625 * scale);
        ctx.bezierCurveTo(23.300003051757812 * scale, 85.15625 * scale, 23.300003051757812 * scale, 85.15625 * scale, 28.800003051757812 * scale, 91.15625 * scale);
        ctx.bezierCurveTo(36.80000305175781 * scale, 96.15625 * scale, 32.80000305175781 * scale, 91.15625 * scale, 28.800003051757812 * scale, 77.15625 * scale);
        ctx.bezierCurveTo(33.80000305175781 * scale, 65.15625 * scale, 33.80000305175781 * scale, 65.15625 * scale, 38.80000305175781 * scale, 53.15625 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(123.80000305175781 * scale, 53.95625305175781 * scale);
        ctx.bezierCurveTo(121.80000305175781 * scale, 77.95625305175781 * scale, 121.80000305175781 * scale, 74.95625305175781 * scale, 121.80000305175781 * scale, 78.95625305175781 * scale);
        ctx.bezierCurveTo(115.80000305175781 * scale, 84.95625305175781 * scale, 115.80000305175781 * scale, 84.95625305175781 * scale, 109.80000305175781 * scale, 90.95625305175781 * scale);
        ctx.bezierCurveTo(102.80000305175781 * scale, 93.95625305175781 * scale, 105.80000305175781 * scale, 86.95625305175781 * scale, 110.80000305175781 * scale, 76.95625305175781 * scale);
        ctx.bezierCurveTo(107.30000305175781 * scale, 65.45625305175781 * scale, 103.80000305175781 * scale, 53.95625305175781 * scale, 103.80000305175781 * scale, 53.95625305175781 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(18 * scale, 56.3671875 * scale);
        ctx.bezierCurveTo(70 * scale, 56.8671875 * scale, 70 * scale, 56.8671875 * scale, 122 * scale, 57.3671875 * scale);
        ctx.bezierCurveTo(137 * scale, 20.3671875 * scale, 137 * scale, 16.3671875 * scale, 126 * scale, 22.3671875 * scale);
        ctx.bezierCurveTo(115.5 * scale, 34.3671875 * scale, 115.5 * scale, 34.3671875 * scale, 105 * scale, 46.3671875 * scale);
        ctx.bezierCurveTo(70.5 * scale, 46.3671875 * scale, 70.5 * scale, 46.3671875 * scale, 36 * scale, 46.3671875 * scale);
        ctx.bezierCurveTo(4 * scale, 14.3671875 * scale, 7 * scale, 18.3671875 * scale, 8 * scale, 27.3671875 * scale);
        ctx.bezierCurveTo(12.5 * scale, 41.8671875 * scale, 12.5 * scale, 41.8671875 * scale, 17 * scale, 56.3671875 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 4 * scale);
        ctx.save();
        ctx.translate(68.30000305175781 * scale, 41.45625305175781 * scale);
        ctx.rotate(0.76);
        round_rect(ctx, -20.5 * scale, -20.5 * scale, 41 * scale, 41 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, undefined, color[5], 4 * scale);
        ctx.save();
        ctx.translate(68.80000305175781 * scale, 44.45625305175781 * scale);
        ctx.rotate(0.76);
        round_rect(ctx, -21 * scale, -20.5 * scale, 42 * scale, 41 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[3], color[4], 4 * scale);
        ctx.save();
        ctx.translate(69.80000305175781 * scale, 44.556243896484375 * scale);
        ctx.rotate(0.76);
        round_rect(ctx, -10 * scale, -10 * scale, 20 * scale, 20 * scale, 5 * scale);
        ctx.restore();
        fill_path(ctx, color[6], color[7], 4 * scale);
        return can;
    };

    function create_amethyst_helmet(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 145 * scale;
        can.height = 120 * scale;
        ctx.beginPath();
        ctx.scale(0.6, 0.6);
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.translate(18 * scale, -8 * scale);
        ctx.moveTo(101 * scale, 72 * scale);
        ctx.bezierCurveTo(144 * scale, 69 * scale, 149 * scale, 58 * scale, 162 * scale, 49 * scale);
        ctx.bezierCurveTo(174 * scale, 31 * scale, 173 * scale, 38 * scale, 172 * scale, 45 * scale);
        ctx.bezierCurveTo(168 * scale, 73 * scale, 158 * scale, 75 * scale, 152 * scale, 78 * scale);
        ctx.bezierCurveTo(106 * scale, 89 * scale, 107 * scale, 91 * scale, 107 * scale, 94 * scale);
        ctx.bezierCurveTo(107 * scale, 100 * scale, 107 * scale, 107 * scale, 107 * scale, 107 * scale);
        ctx.bezierCurveTo(99 * scale, 112 * scale, 98 * scale, 110 * scale, 93 * scale, 107 * scale);
        ctx.bezierCurveTo(94 * scale, 107 * scale, 93 * scale, 107 * scale, 93 * scale, 107 * scale);
        ctx.bezierCurveTo(93 * scale, 100 * scale, 93 * scale, 100 * scale, 92 * scale, 94 * scale);
        ctx.bezierCurveTo(92 * scale, 89 * scale, 90 * scale, 90 * scale, 73 * scale, 86 * scale);
        ctx.bezierCurveTo(45 * scale, 81 * scale, 40 * scale, 77 * scale, 35 * scale, 68 * scale);
        ctx.bezierCurveTo(23 * scale, 36 * scale, 28 * scale, 34 * scale, 36 * scale, 46 * scale);
        ctx.bezierCurveTo(45 * scale, 58 * scale, 83 * scale, 72 * scale, 98 * scale, 72 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 4 * scale);
        ctx.beginPath();
        ctx.scale(1.1, 1.1);
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.translate(-9 * scale, 4 * scale);
        ctx.moveTo(101 * scale, 72 * scale);
        ctx.bezierCurveTo(144 * scale, 69 * scale, 149 * scale, 58 * scale, 162 * scale, 49 * scale);
        ctx.bezierCurveTo(174 * scale, 31 * scale, 173 * scale, 38 * scale, 172 * scale, 45 * scale);
        ctx.bezierCurveTo(168 * scale, 73 * scale, 158 * scale, 75 * scale, 152 * scale, 78 * scale);
        ctx.bezierCurveTo(106 * scale, 89 * scale, 107 * scale, 91 * scale, 107 * scale, 94 * scale);
        ctx.bezierCurveTo(107 * scale, 100 * scale, 107 * scale, 107 * scale, 107 * scale, 107 * scale);
        ctx.bezierCurveTo(99 * scale, 112 * scale, 98 * scale, 110 * scale, 93 * scale, 107 * scale);
        ctx.bezierCurveTo(94 * scale, 107 * scale, 93 * scale, 107 * scale, 93 * scale, 107 * scale);
        ctx.bezierCurveTo(93 * scale, 100 * scale, 93 * scale, 100 * scale, 92 * scale, 94 * scale);
        ctx.bezierCurveTo(92 * scale, 89 * scale, 90 * scale, 90 * scale, 73 * scale, 86 * scale);
        ctx.bezierCurveTo(45 * scale, 81 * scale, 40 * scale, 77 * scale, 35 * scale, 68 * scale);
        ctx.bezierCurveTo(23 * scale, 36 * scale, 28 * scale, 34 * scale, 36 * scale, 46 * scale);
        ctx.bezierCurveTo(45 * scale, 58 * scale, 83 * scale, 72 * scale, 98 * scale, 72 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 4 * scale);
        ctx.scale(1.1, 1.1);
        ctx.translate(-9 * scale, 4 * scale);
        ctx.save();
        ctx.translate(100 * scale, 73.06874084472656 * scale);
        ctx.rotate(0);
        round_rect(ctx, -61 * scale, -38.5 * scale, 122 * scale, 40 * scale, 20 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 4 * scale);
        ctx.save();
        ctx.translate(100 * scale, 71.36874389648438 * scale);
        ctx.rotate(0);
        round_rect(ctx, -60.5 * scale, -18 * scale, 121 * scale, 30 * scale, 20 * scale);
        ctx.restore();
        fill_path(ctx, color[3], color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(144 * scale, 80 * scale);
        ctx.bezierCurveTo(152 * scale, 100 * scale, 152 * scale, 101 * scale, 153 * scale, 102 * scale);
        ctx.bezierCurveTo(159 * scale, 100 * scale, 159 * scale, 100 * scale, 160 * scale, 100 * scale);
        ctx.bezierCurveTo(161 * scale, 84 * scale, 161 * scale, 84 * scale, 162 * scale, 68 * scale);
        ctx.closePath();
        fill_path(ctx, color[2]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(57 * scale, 75 * scale);
        ctx.bezierCurveTo(48 * scale, 101 * scale, 53 * scale, 89 * scale, 48 * scale, 102 * scale);
        ctx.bezierCurveTo(44 * scale, 100 * scale, 44 * scale, 100 * scale, 39 * scale, 97 * scale);
        ctx.bezierCurveTo(39 * scale, 83 * scale, 39 * scale, 83 * scale, 39 * scale, 69 * scale);
        ctx.closePath();
        fill_path(ctx, color[2]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(101 * scale, 72 * scale);
        ctx.bezierCurveTo(144 * scale, 69 * scale, 149 * scale, 58 * scale, 162 * scale, 49 * scale);
        ctx.bezierCurveTo(174 * scale, 31 * scale, 173 * scale, 38 * scale, 172 * scale, 45 * scale);
        ctx.bezierCurveTo(168 * scale, 73 * scale, 158 * scale, 75 * scale, 152 * scale, 78 * scale);
        ctx.bezierCurveTo(106 * scale, 89 * scale, 107 * scale, 91 * scale, 107 * scale, 94 * scale);
        ctx.bezierCurveTo(107 * scale, 100 * scale, 107 * scale, 107 * scale, 107 * scale, 107 * scale);
        ctx.bezierCurveTo(99 * scale, 112 * scale, 98 * scale, 110 * scale, 93 * scale, 107 * scale);
        ctx.bezierCurveTo(94 * scale, 107 * scale, 93 * scale, 107 * scale, 93 * scale, 107 * scale);
        ctx.bezierCurveTo(93 * scale, 100 * scale, 93 * scale, 100 * scale, 92 * scale, 94 * scale);
        ctx.bezierCurveTo(92 * scale, 89 * scale, 90 * scale, 90 * scale, 73 * scale, 86 * scale);
        ctx.bezierCurveTo(45 * scale, 81 * scale, 40 * scale, 77 * scale, 35 * scale, 68 * scale);
        ctx.bezierCurveTo(23 * scale, 36 * scale, 28 * scale, 34 * scale, 36 * scale, 46 * scale);
        ctx.bezierCurveTo(45 * scale, 58 * scale, 83 * scale, 72 * scale, 98 * scale, 72 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 4 * scale);
        ctx.translate(0, 0);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(115.5 * scale, 116.07290649414062 * scale);
        ctx.bezierCurveTo(159.5 * scale, 99.07290649414062 * scale, 159.5 * scale, 98.07290649414062 * scale, 159.5 * scale, 98.07290649414062 * scale);
        ctx.bezierCurveTo(155.5 * scale, 116.07290649414062 * scale, 159.5 * scale, 116.07290649414062 * scale, 159.5 * scale, 118.07290649414062 * scale);
        ctx.bezierCurveTo(147.5 * scale, 130.07290649414062 * scale, 136.5 * scale, 132.07290649414062 * scale, 115.5 * scale, 138.07290649414062 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(39.5 * scale, 96.07290649414062 * scale);
        ctx.bezierCurveTo(85.5 * scale, 114.07290649414062 * scale, 62.5 * scale, 105.57290649414062 * scale, 85.5 * scale, 115.07290649414062 * scale);
        ctx.bezierCurveTo(85.5 * scale, 125.57290649414062 * scale, 85.5 * scale, 125.57290649414062 * scale, 85.5 * scale, 136.07290649414062 * scale);
        ctx.bezierCurveTo(51.5 * scale, 129.07290649414062 * scale, 51.5 * scale, 125.07290649414062 * scale, 41.5 * scale, 118.07290649414062 * scale);
        ctx.bezierCurveTo(44.5 * scale, 106.07290649414062 * scale, 42.5 * scale, 103.07290649414062 * scale, 40.5 * scale, 96.07290649414062 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(86 * scale, 80 * scale);
        ctx.bezierCurveTo(97 * scale, 88 * scale, 106 * scale, 84 * scale, 112 * scale, 80 * scale);
        ctx.bezierCurveTo(112 * scale, 62 * scale, 106 * scale, 59 * scale, 99 * scale, 54 * scale);
        ctx.bezierCurveTo(86 * scale, 62 * scale, 86 * scale, 73 * scale, 86 * scale, 80 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[2], 4 * scale);
        ctx.scale(0.5, 0.5);
        ctx.translate(100 * scale, 71 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(86 * scale, 80 * scale);
        ctx.bezierCurveTo(97 * scale, 88 * scale, 106 * scale, 84 * scale, 112 * scale, 80 * scale);
        ctx.bezierCurveTo(112 * scale, 62 * scale, 106 * scale, 59 * scale, 99 * scale, 54 * scale);
        ctx.bezierCurveTo(86 * scale, 62 * scale, 86 * scale, 73 * scale, 86 * scale, 80 * scale);
        ctx.closePath();
        fill_path(ctx, color[6], color[2], 4 * scale);
        return can;
    };

    function create_book(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 400 * scale;
        can.height = 400 * scale;
        ctx.save();
        ctx.translate(204 * scale, 195.0833282470703 * scale);
        ctx.rotate(10.16);
        round_rect(ctx, -97.5 * scale, -134.5 * scale, 195 * scale, 269 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[0], color[1], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(58.5 * scale, 226.5833282470703 * scale);
        ctx.bezierCurveTo(120.5 * scale, 281.5833282470703 * scale, 120.5 * scale, 281.5833282470703 * scale, 182.5 * scale, 336.5833282470703 * scale);
        ctx.bezierCurveTo(263 * scale, 248.5833282470703 * scale, 263 * scale, 248.5833282470703 * scale, 343.5 * scale, 160.5833282470703 * scale);
        ctx.bezierCurveTo(280.5 * scale, 104.58332824707031 * scale, 280.5 * scale, 104.58332824707031 * scale, 217.5 * scale, 48.58332824707031 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[3], 4 * scale);
        ctx.save();
        ctx.translate(197 * scale, 169.0833282470703 * scale);
        ctx.rotate(10.16);
        round_rect(ctx, -93.5 * scale, -126.5 * scale, 187 * scale, 253 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[4], color[1], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(226.5 * scale, 24.583328247070312 * scale);
        ctx.bezierCurveTo(58.5 * scale, 207.5833282470703 * scale, 143 * scale, 116.58332824707031 * scale, 59.5 * scale, 208.5833282470703 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[1], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(46.133331298828125 * scale, 202.64999389648438 * scale);
        ctx.bezierCurveTo(46.133331298828125 * scale, 215.64999389648438 * scale, 46.133331298828125 * scale, 215.64999389648438 * scale, 46.133331298828125 * scale, 228.64999389648438 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[1], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(55.133331298828125 * scale, 211.64999389648438 * scale);
        ctx.bezierCurveTo(55.133331298828125 * scale, 225.14999389648438 * scale, 55.133331298828125 * scale, 225.14999389648438 * scale, 55.133331298828125 * scale, 238.64999389648438 * scale);
        ctx.bezierCurveTo(50.133331298828125 * scale, 235.64999389648438 * scale, 50.133331298828125 * scale, 235.64999389648438 * scale, 45.133331298828125 * scale, 232.64999389648438 * scale);
        ctx.bezierCurveTo(45.133331298828125 * scale, 216.64999389648438 * scale, 45.133331298828125 * scale, 216.64999389648438 * scale, 45.133331298828125 * scale, 200.64999389648438 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[1], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(46.133331298828125 * scale, 198.39999389648438 * scale);
        ctx.bezierCurveTo(46.133331298828125 * scale, 199.89999389648438 * scale, 46.133331298828125 * scale, 199.89999389648438 * scale, 46.133331298828125 * scale, 201.39999389648438 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[1], 8 * scale);
        ctx.save();
        ctx.translate(249.63333129882812 * scale, 120.89999389648438 * scale);
        ctx.rotate(7.04);
        round_rect(ctx, -58.5 * scale, -32 * scale, 117 * scale, 64 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[5]);
        return can;
    };

    function create_paper(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 170 * scale;
        can.height = 170 * scale;
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(-10 * scale, 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(72.5 * scale, 4.109375 * scale);
        ctx.bezierCurveTo(117 * scale, 9.609375 * scale, 117 * scale, 9.609375 * scale, 161.5 * scale, 15.109375 * scale);
        ctx.bezierCurveTo(134.5 * scale, 106.109375 * scale, 110.5 * scale, 130.109375 * scale, 63.5 * scale, 145.109375 * scale);
        ctx.bezierCurveTo(33.5 * scale, 120.609375 * scale, 33.5 * scale, 120.609375 * scale, 3.5 * scale, 96.109375 * scale);
        ctx.bezierCurveTo(82.5 * scale, 75.109375 * scale, 69.5 * scale, 29.109375 * scale, 71.5 * scale, 6.109375 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(10 * scale, -10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(72.5 * scale, 4.109375 * scale);
        ctx.bezierCurveTo(117 * scale, 9.609375 * scale, 117 * scale, 9.609375 * scale, 161.5 * scale, 15.109375 * scale);
        ctx.bezierCurveTo(134.5 * scale, 106.109375 * scale, 110.5 * scale, 130.109375 * scale, 63.5 * scale, 145.109375 * scale);
        ctx.bezierCurveTo(33.5 * scale, 120.609375 * scale, 33.5 * scale, 120.609375 * scale, 3.5 * scale, 96.109375 * scale);
        ctx.bezierCurveTo(82.5 * scale, 75.109375 * scale, 69.5 * scale, 29.109375 * scale, 71.5 * scale, 6.109375 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 10 * scale);
        return can;
    };

    function create_lock(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 47 * scale;
        can.height = 60 * scale;
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 47 * scale;
        can.height = 60 * scale;
        circle(ctx, 23.5 * scale, 20.734375 * scale, 15.132745950421556 * scale);
        fill_path(ctx, undefined, color[2], 4 * scale);
        circle(ctx, 23.5 * scale, 20.734375 * scale, 18.601075237738275 * scale);
        fill_path(ctx, undefined, color[1], 4 * scale);
        circle(ctx, 23.5 * scale, 20.734375 * scale, 11.40175425099138 * scale);
        fill_path(ctx, undefined, color[1], 4 * scale);
        ctx.save();
        ctx.translate(23 * scale, 38.734375 * scale);
        ctx.rotate(0);
        round_rect(ctx, -21.5 * scale, -19 * scale, 43 * scale, 38 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[2], color[1], 4 * scale);
        ctx.save();
        ctx.translate(23.5 * scale, 43.734375 * scale);
        ctx.rotate(0.5235987755982988);
        round_regular_polygon(ctx, 3, 8.06225774829855 * scale, 0 * scale);
        ctx.restore();
        fill_path(ctx, color[3]);
        circle(ctx, 23.5 * scale, 35.734375 * scale, 7.0710678118654755 * scale);
        fill_path(ctx, color[3]);
        return can;
    };

    function create_tronctotem(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 201 * scale;
        can.height = 164 * scale;
        ctx.translate(0, 5 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        circle(ctx, 100.5 * scale, 82 * scale, 74.92746655359852 * scale);
        fill_path(ctx, color[0], color[0], 4 * scale);
        circle(ctx, 100.5 * scale, 82 * scale, 65.9417374971317 * scale);
        fill_path(ctx, color[0], color[0], 4 * scale);
        ctx.translate(0, -5);
        ctx.globalAlpha = 1;
        circle(ctx, 100.5 * scale, 82 * scale, 74.92746655359852 * scale);
        fill_path(ctx, color[1], color[3], 4 * scale);
        circle(ctx, 100.5 * scale, 82 * scale, 65.9417374971317 * scale);
        fill_path(ctx, color[1], color[2], 4 * scale);
        circle(ctx, 100.5 * scale, 82 * scale, 35.9417374971317 * scale);
        fill_path(ctx, color[1], color[2], 20 * scale);
        circle(ctx, 100.5 * scale, 82 * scale, 15.9417374971317 * scale);
        fill_path(ctx, color[1], color[2], 6 * scale);
        return can;
    };

    function create_headtotem(scale, draw_shadow, color, rotate) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 501 * scale;
        can.height = 564 * scale;
        ctx.scale(0.5, 0.5);
        ctx.translate(240 * scale, 255 * scale);
        ctx.rotate(rotate);
        ctx.globalAlpha = draw_shadow ? 0.5 : 0.2;
        circle(ctx, 174 * scale, 87.984375 * scale, 20.8806130178211 * scale);
        fill_path(ctx, color[0], color[0], 8 * scale);
        circle(ctx, 174 * scale, 87.984375 * scale, 12.165525060596439 * scale);
        fill_path(ctx, color[0], color[0], 8 * scale);
        circle(ctx, 174 * scale, 87.484375 * scale, 6 * scale);
        fill_path(ctx, color[0]);
        circle(ctx, 30 * scale, 87.984375 * scale, 20.8806130178211 * scale);
        fill_path(ctx, color[0], color[0], 4 * scale);
        circle(ctx, 30 * scale, 87.984375 * scale, 12.165525060596439 * scale);
        fill_path(ctx, color[0], color[0], 4 * scale);
        circle(ctx, 30 * scale, 87.484375 * scale, 6 * scale);
        fill_path(ctx, color[0]);
        circle(ctx, 100 * scale, 30 * scale, 20.8806130178211 * scale);
        fill_path(ctx, color[0], color[0], 4 * scale);
        circle(ctx, 100 * scale, 30 * scale, 12.165525060596439 * scale);
        fill_path(ctx, color[0], color[0], 4 * scale);
        circle(ctx, 100 * scale, 30 * scale, 6 * scale);
        fill_path(ctx, color[0]);
        circle(ctx, 100 * scale, 130 * scale, 20.8806130178211 * scale);
        fill_path(ctx, color[0], color[0], 4 * scale);
        circle(ctx, 100 * scale, 130 * scale, 12.165525060596439 * scale);
        fill_path(ctx, color[0], color[0], 4 * scale);
        circle(ctx, 100 * scale, 130 * scale, 6 * scale);
        fill_path(ctx, color[0]);
        ctx.save();
        ctx.translate(102 * scale, 81.984375 * scale);
        ctx.rotate(0);
        round_rect(ctx, -74 * scale, -57 * scale, 148 * scale, 114 * scale, 23 * scale);
        ctx.restore();
        fill_path(ctx, color[0], color[0], 4 * scale);
        ctx.save();
        ctx.translate(101 * scale, 64.984375 * scale);
        ctx.rotate(0);
        round_rect(ctx, -33 * scale, -10 * scale, 66 * scale, 20 * scale, 15 * scale);
        ctx.restore();
        fill_path(ctx, color[0], color[0], 4 * scale);
        ctx.save();
        ctx.translate(102 * scale, 63.484375 * scale);
        ctx.rotate(0);
        round_rect(ctx, -9 * scale, -27.5 * scale, 18 * scale, 55 * scale, 15 * scale);
        ctx.restore();
        ctx.translate(5, -5);
        ctx.globalAlpha = 1;
        circle(ctx, 174 * scale, 87.984375 * scale, 20.8806130178211 * scale);
        fill_path(ctx, color[1], color[3], 8 * scale);
        circle(ctx, 174 * scale, 87.984375 * scale, 12.165525060596439 * scale);
        fill_path(ctx, color[1], color[3], 8 * scale);
        circle(ctx, 174 * scale, 87.484375 * scale, 6 * scale);
        fill_path(ctx, color[2]);
        circle(ctx, 30 * scale, 87.984375 * scale, 20.8806130178211 * scale);
        fill_path(ctx, color[1], color[3], 8 * scale);
        circle(ctx, 30 * scale, 87.984375 * scale, 12.165525060596439 * scale);
        fill_path(ctx, color[1], color[3], 8 * scale);
        circle(ctx, 30 * scale, 87.484375 * scale, 6 * scale);
        fill_path(ctx, color[2]);
        circle(ctx, 102 * scale, 30 * scale, 20.8806130178211 * scale);
        fill_path(ctx, color[1], color[3], 8 * scale);
        circle(ctx, 102 * scale, 30 * scale, 12.165525060596439 * scale);
        fill_path(ctx, color[1], color[3], 8 * scale);
        circle(ctx, 102 * scale, 30 * scale, 6 * scale);
        fill_path(ctx, color[1]);
        circle(ctx, 102 * scale, 130 * scale, 20.8806130178211 * scale);
        fill_path(ctx, color[1], color[3], 8 * scale);
        circle(ctx, 102 * scale, 130 * scale, 12.165525060596439 * scale);
        fill_path(ctx, color[1], color[3], 8 * scale);
        circle(ctx, 102 * scale, 130 * scale, 6 * scale);
        fill_path(ctx, color[1]);
        ctx.save();
        ctx.translate(102 * scale, 81.984375 * scale);
        round_rect(ctx, -74 * scale, -57 * scale, 148 * scale, 114 * scale, 23 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[3], 8 * scale);
        ctx.save();
        ctx.translate(101 * scale, 64.984375 * scale);
        round_rect(ctx, -33 * scale, -10 * scale, 66 * scale, 20 * scale, 15 * scale);
        ctx.restore();
        fill_path(ctx, color[2], color[1], 8 * scale);
        ctx.save();
        ctx.translate(102 * scale, 63.484375 * scale);
        round_rect(ctx, -9 * scale, -27.5 * scale, 18 * scale, 55 * scale, 15 * scale);
        ctx.restore();
        fill_path(ctx, color[2], color[1], 8 * scale);
        circle(ctx, 135 * scale, 107.36605834960938 * scale, 21.095023109728988 * scale);
        fill_path(ctx, color[1], color[3], 8 * scale);
        circle(ctx, 135 * scale, 107.36605834960938 * scale, 13 * scale);
        fill_path(ctx, color[1], color[3], 8 * scale);
        circle(ctx, 135 * scale, 107.36605834960938 * scale, 6.082762530298219 * scale);
        fill_path(ctx, color[2]);
        circle(ctx, 70 * scale, 107.36605834960938 * scale, 21.095023109728988 * scale);
        fill_path(ctx, color[1], color[3], 8 * scale);
        circle(ctx, 70 * scale, 107.36605834960938 * scale, 13 * scale);
        fill_path(ctx, color[1], color[3], 8 * scale);
        circle(ctx, 70 * scale, 107.36605834960938 * scale, 6.082762530298219 * scale);
        fill_path(ctx, color[2]);
        return can;
    };

    function create_icon_team(scale, color, i) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 95 * scale;
        can.height = 85 * scale;
        if (i == 0) {
            ctx.translate(7 * scale, 15 * scale);
            ctx.scale(0.9, 0.9);
            ctx.save();
            round_rect(ctx, 0 * scale, 5 * scale, 90 * scale, 60 * scale, 10);
            fill_path(ctx, color[0]);
            ctx.globalCompositeOperation = "destination-out";
            circle(ctx, 25 * scale, 40 * scale, 10 * scale);
            ctx.fill();
            circle(ctx, 65 * scale, 40 * scale, 10 * scale);
            ctx.fill();
            ctx.restore();
            ctx.save();
            round_rect(ctx, 0, 0, 90 * scale, 60 * scale, 10 * scale);
            fill_path(ctx, color[1]);
            ctx.globalCompositeOperation = "destination-out";
            circle(ctx, 25 * scale, 40 * scale, 10 * scale);
            ctx.fill();
            circle(ctx, 65 * scale, 40 * scale, 10 * scale);
            ctx.fill();
            ctx.restore();
        } else if (i == 1) {
            ctx.scale(0.8, 0.8);
            ctx.translate(15 * scale, 33 * scale);
            ctx.save();
            ctx.scale(0.56, 0.56);
            ctx.translate(-39 * scale, -60 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(32.5 * scale, 50.642852783203125 * scale);
            ctx.bezierCurveTo(83 * scale, 69.64285278320312 * scale, 83 * scale, 69.64285278320312 * scale, 133.5 * scale, 88.64285278320312 * scale);
            ctx.bezierCurveTo(93 * scale, 92.64285278320312 * scale, 93 * scale, 92.64285278320312 * scale, 52.5 * scale, 96.64285278320312 * scale);
            ctx.bezierCurveTo(30.5 * scale, 100.64285278320312 * scale, 36.5 * scale, 94.64285278320312 * scale, 32.5 * scale, 84.64285278320312 * scale);
            ctx.bezierCurveTo(21.5 * scale, 45.642852783203125 * scale, 24.5 * scale, 48.642852783203125 * scale, 31.5 * scale, 50.642852783203125 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(116.5 * scale, 85.64285278320312 * scale);
            ctx.bezierCurveTo(160.5 * scale, 67.14285278320312 * scale, 160.5 * scale, 67.14285278320312 * scale, 204.5 * scale, 48.642852783203125 * scale);
            ctx.bezierCurveTo(220.5 * scale, 42.642852783203125 * scale, 208.5 * scale, 68.64285278320312 * scale, 205.5 * scale, 85.64285278320312 * scale);
            ctx.bezierCurveTo(202.5 * scale, 98.64285278320312 * scale, 199.5 * scale, 98.64285278320312 * scale, 188.5 * scale, 100.64285278320312 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(166.5 * scale, 68.64285278320312 * scale);
            ctx.bezierCurveTo(147.5 * scale, 72.64285278320312 * scale, 145.5 * scale, 73.64285278320312 * scale, 142.5 * scale, 62.642852783203125 * scale);
            ctx.bezierCurveTo(121.5 * scale, 12.642852783203125 * scale, 122.5 * scale, 5.642852783203125 * scale, 117.5 * scale, 15.642852783203125 * scale);
            ctx.bezierCurveTo(105.5 * scale, 40.642852783203125 * scale, 105.5 * scale, 40.642852783203125 * scale, 93.5 * scale, 65.64285278320312 * scale);
            ctx.bezierCurveTo(89.5 * scale, 74.64285278320312 * scale, 84.5 * scale, 72.64285278320312 * scale, 73.5 * scale, 74.64285278320312 * scale);
            ctx.bezierCurveTo(98 * scale, 87.64285278320312 * scale, 98 * scale, 87.64285278320312 * scale, 122.5 * scale, 100.64285278320312 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.restore();
            ctx.save();
            round_rect(ctx, 0, 15 * scale, 90 * scale, 50 * scale, 10 * scale);
            fill_path(ctx, color[0]);
            round_rect(ctx, 0, 10 * scale, 90 * scale, 50 * scale, 10 * scale);
            fill_path(ctx, color[1]);
            ctx.globalCompositeOperation = "destination-out";
            circle(ctx, 25 * scale, 40 * scale, 10 * scale);
            ctx.fill();
            circle(ctx, 65 * scale, 40 * scale, 10 * scale);
            ctx.fill();
            ctx.restore();
        }
        return can;
    };

    function create_team_button(scale, color, i) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 120 * scale;
        can.height = 100 * scale;
        round_rect(ctx, 10 * scale, 10 * scale, 95 * scale, 80 * scale, 10 * scale);
        fill_path(ctx, color[2]);
        round_rect(ctx, 10 * scale, 5 * scale, 95 * scale, 80 * scale, 10 * scale);
        fill_path(ctx, color[3], color[4], 4 * scale);
        if (i == 0) {
            var img = create_icon_team(0.75 * scale, color, 0);
            ctx.drawImage(img, 22 * scale, 18 * scale);
        } else if (i == 1) {
            var img = create_icon_team(0.75 * scale, color, 1);
            ctx.drawImage(img, 22 * scale, 18 * scale);
        }
        return can;
    };

    function create_totem(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 185 * scale;
        can.height = 164 * scale;
        ctx.translate(0, 0);
        var img = create_tronctotem(scale, draw_shadow, color);
        ctx.drawImage(img, -10 * scale, 0 * scale);
        var img = create_headtotem(scale, draw_shadow, color, 0);
        ctx.drawImage(img, -83 * scale, -40 * scale);
        var img = create_headtotem(scale, draw_shadow, color, Math.PI / 1.4);
        ctx.drawImage(img, -15 * scale, -88 * scale);
        var img = create_headtotem(scale, draw_shadow, color, Math.PI / -1.4);
        ctx.drawImage(img, 15 * scale, -8 * scale);
        return can;
    };

    function create_lockpick(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 450 * scale;
        can.height = 790 * scale;
        ctx.translate(5 * scale, 5 * scale);
        ctx.globalAlpha = draw_shadow ? 0 : 0;
        circle(ctx, 178.5 * scale, 172.828125 * scale, 150 * scale);
        fill_path(ctx, undefined, color[0], 65 * scale);
        circle(ctx, 178.5 * scale, 172.828125 * scale, 150 * scale);
        fill_path(ctx, undefined, color[0], 55 * scale);
        ctx.closePath();
        ctx.save();
        ctx.translate(177 * scale, 512.328125 * scale);
        round_rect(ctx, -25 * scale, -202.5 * scale, 65 * scale, 405 * scale, 25 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.save();
        ctx.translate(136 * scale, 581.828125 * scale);
        round_rect(ctx, -39 * scale, -23 * scale, 78 * scale, 46 * scale, 25 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.save();
        ctx.translate(135.5 * scale, 663.828125 * scale);
        round_rect(ctx, -39.5 * scale, -22 * scale, 79 * scale, 44 * scale, 25 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(114 * scale, 594.828125 * scale);
        ctx.bezierCurveTo(175 * scale, 596.828125 * scale, 163 * scale, 596.828125 * scale, 172 * scale, 594.828125 * scale);
        ctx.bezierCurveTo(171.5 * scale, 633.828125 * scale, 171.5 * scale, 633.828125 * scale, 171 * scale, 672.828125 * scale);
        ctx.bezierCurveTo(110 * scale, 673.828125 * scale, 140.5 * scale, 673.328125 * scale, 110 * scale, 673.828125 * scale);
        ctx.bezierCurveTo(110.5 * scale, 661.828125 * scale, 110.5 * scale, 661.828125 * scale, 111 * scale, 649.828125 * scale);
        ctx.bezierCurveTo(157 * scale, 633.828125 * scale, 134 * scale, 607.828125 * scale, 114 * scale, 594.828125 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.translate(0, 5 * scale);
        ctx.moveTo(140 * scale, 294.828125 * scale);
        ctx.bezierCurveTo(212 * scale, 295.828125 * scale, 176.5 * scale, 295.328125 * scale, 213 * scale, 295.828125 * scale);
        ctx.bezierCurveTo(201.5 * scale, 325.328125 * scale, 201.5 * scale, 325.328125 * scale, 190 * scale, 354.828125 * scale);
        ctx.bezierCurveTo(175.5 * scale, 355.828125 * scale, 175.5 * scale, 355.828125 * scale, 161 * scale, 356.828125 * scale);
        ctx.bezierCurveTo(154.5 * scale, 328.828125 * scale, 154.5 * scale, 328.828125 * scale, 148 * scale, 300.828125 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.translate(3, -5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(159 * scale, 679.828125 * scale);
        ctx.bezierCurveTo(180 * scale, 665.828125 * scale, 155 * scale, 675.828125 * scale, 151 * scale, 671.828125 * scale);
        ctx.bezierCurveTo(154.5 * scale, 685.328125 * scale, 154.5 * scale, 685.328125 * scale, 158 * scale, 698.828125 * scale);
        ctx.bezierCurveTo(171 * scale, 699.828125 * scale, 171 * scale, 699.828125 * scale, 184 * scale, 700.828125 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.save();
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(157 * scale, 548.828125 * scale);
        ctx.bezierCurveTo(157 * scale, 561.828125 * scale, 157 * scale, 561.828125 * scale, 157 * scale, 574.828125 * scale);
        ctx.bezierCurveTo(132.5 * scale, 580.828125 * scale, 132.5 * scale, 580.828125 * scale, 108 * scale, 586.828125 * scale);
        ctx.bezierCurveTo(112 * scale, 599.828125 * scale, 111 * scale, 593.828125 * scale, 112 * scale, 599.828125 * scale);
        ctx.bezierCurveTo(159 * scale, 603.828125 * scale, 126.5 * scale, 601.328125 * scale, 141 * scale, 602.828125 * scale);
        ctx.bezierCurveTo(145 * scale, 641.828125 * scale, 143.5 * scale, 623.828125 * scale, 146 * scale, 644.828125 * scale);
        ctx.bezierCurveTo(129.5 * scale, 645.328125 * scale, 129.5 * scale, 645.328125 * scale, 113 * scale, 645.828125 * scale);
        ctx.bezierCurveTo(107.5 * scale, 652.828125 * scale, 107.5 * scale, 652.828125 * scale, 102 * scale, 659.828125 * scale);
        ctx.bezierCurveTo(104 * scale, 669.328125 * scale, 104 * scale, 669.328125 * scale, 106 * scale, 678.828125 * scale);
        ctx.bezierCurveTo(145 * scale, 679.328125 * scale, 145 * scale, 679.328125 * scale, 184 * scale, 679.828125 * scale);
        ctx.bezierCurveTo(185 * scale, 615.828125 * scale, 185 * scale, 615.828125 * scale, 186 * scale, 551.828125 * scale);
        ctx.bezierCurveTo(172.5 * scale, 551.328125 * scale, 172.5 * scale, 551.328125 * scale, 159 * scale, 550.828125 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 7 * scale);
        ctx.restore();
        ctx.globalAlpha = 1;
        ctx.translate(15 * scale, 35 * scale);
        circle(ctx, 178.5 * scale, 172.828125 * scale, 150 * scale);
        fill_path(ctx, undefined, color[2], 95 * scale);
        circle(ctx, 178.5 * scale, 172.828125 * scale, 150 * scale);
        fill_path(ctx, undefined, color[1], 55 * scale);
        ctx.closePath();
        ctx.save();
        ctx.translate(177 * scale, 512.328125 * scale);
        round_rect(ctx, -25 * scale, -202.5 * scale, 65 * scale, 405 * scale, 25 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 20 * scale);
        ctx.save();
        ctx.translate(136 * scale, 581.828125 * scale);
        round_rect(ctx, -39 * scale, -23 * scale, 78 * scale, 46 * scale, 25 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 20 * scale);
        ctx.save();
        ctx.translate(135.5 * scale, 663.828125 * scale);
        round_rect(ctx, -39.5 * scale, -22 * scale, 79 * scale, 44 * scale, 25 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 20 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(114 * scale, 594.828125 * scale);
        ctx.bezierCurveTo(175 * scale, 596.828125 * scale, 163 * scale, 596.828125 * scale, 172 * scale, 594.828125 * scale);
        ctx.bezierCurveTo(171.5 * scale, 633.828125 * scale, 171.5 * scale, 633.828125 * scale, 171 * scale, 672.828125 * scale);
        ctx.bezierCurveTo(110 * scale, 673.828125 * scale, 140.5 * scale, 673.328125 * scale, 110 * scale, 673.828125 * scale);
        ctx.bezierCurveTo(110.5 * scale, 661.828125 * scale, 110.5 * scale, 661.828125 * scale, 111 * scale, 649.828125 * scale);
        ctx.bezierCurveTo(157 * scale, 633.828125 * scale, 134 * scale, 607.828125 * scale, 114 * scale, 594.828125 * scale);
        ctx.closePath();
        fill_path(ctx, color[1]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.translate(0, 5 * scale);
        ctx.moveTo(123 * scale, 294.828125 * scale);
        ctx.bezierCurveTo(212 * scale, 295.828125 * scale, 190.5 * scale, 295.328125 * scale, 250 * scale, 295.828125 * scale);
        ctx.bezierCurveTo(231.5 * scale, 325.328125 * scale, 231.5 * scale, 325.328125 * scale, 220 * scale, 354.828125 * scale);
        ctx.bezierCurveTo(175.5 * scale, 355.828125 * scale, 175.5 * scale, 355.828125 * scale, 140 * scale, 356.828125 * scale);
        ctx.bezierCurveTo(123.5 * scale, 328.828125 * scale, 123.5 * scale, 328.828125 * scale, 123 * scale, 294.828125 * scale);
        ctx.closePath();
        fill_path(ctx, color[1]);
        ctx.translate(0, -5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(159 * scale, 679.828125 * scale);
        ctx.bezierCurveTo(180 * scale, 665.828125 * scale, 155 * scale, 675.828125 * scale, 151 * scale, 671.828125 * scale);
        ctx.bezierCurveTo(154.5 * scale, 685.328125 * scale, 154.5 * scale, 685.328125 * scale, 158 * scale, 698.828125 * scale);
        ctx.bezierCurveTo(171 * scale, 699.828125 * scale, 171 * scale, 699.828125 * scale, 184 * scale, 700.828125 * scale);
        ctx.closePath();
        fill_path(ctx, color[1]);
        ctx.save();
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(157 * scale, 548.828125 * scale);
        ctx.bezierCurveTo(157 * scale, 561.828125 * scale, 157 * scale, 561.828125 * scale, 157 * scale, 574.828125 * scale);
        ctx.bezierCurveTo(132.5 * scale, 580.828125 * scale, 132.5 * scale, 580.828125 * scale, 108 * scale, 586.828125 * scale);
        ctx.bezierCurveTo(112 * scale, 599.828125 * scale, 111 * scale, 593.828125 * scale, 112 * scale, 599.828125 * scale);
        ctx.bezierCurveTo(159 * scale, 603.828125 * scale, 126.5 * scale, 601.328125 * scale, 141 * scale, 602.828125 * scale);
        ctx.bezierCurveTo(145 * scale, 641.828125 * scale, 143.5 * scale, 623.828125 * scale, 146 * scale, 644.828125 * scale);
        ctx.bezierCurveTo(129.5 * scale, 645.328125 * scale, 129.5 * scale, 645.328125 * scale, 113 * scale, 645.828125 * scale);
        ctx.bezierCurveTo(107.5 * scale, 652.828125 * scale, 107.5 * scale, 652.828125 * scale, 102 * scale, 659.828125 * scale);
        ctx.bezierCurveTo(104 * scale, 669.328125 * scale, 104 * scale, 669.328125 * scale, 106 * scale, 678.828125 * scale);
        ctx.bezierCurveTo(145 * scale, 679.328125 * scale, 145 * scale, 679.328125 * scale, 184 * scale, 679.828125 * scale);
        ctx.bezierCurveTo(185 * scale, 615.828125 * scale, 185 * scale, 615.828125 * scale, 186 * scale, 551.828125 * scale);
        ctx.bezierCurveTo(172.5 * scale, 551.328125 * scale, 172.5 * scale, 551.328125 * scale, 159 * scale, 550.828125 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[1], 7 * scale);
        ctx.restore();
        return can;
    };

    function create_resurrection_ground(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 202 * scale;
        can.height = 202 * scale;
        ctx.translate(2 * scale, 1 * scale);
        ctx.globalAlpha = 0.3;
        circle(ctx, 98 * scale, 99 * scale, 100 * scale);
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 0.5;
        circle(ctx, 98 * scale, 99 * scale, 90 * scale);
        fill_path(ctx, color[1]);
        return can;
    };

    function create_resurrection_hole(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 89 * scale;
        can.height = 89 * scale;
        ctx.save();
        ctx.translate(44.5 * scale, 44.5 * scale);
        round_regular_polygon(ctx, 6, 40 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[0], color[1], 5 * scale);
        ctx.save();
        ctx.translate(44.5 * scale, 44.5 * scale);
        round_regular_polygon(ctx, 6, 25.11521001172521 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[2], color[3], 5 * scale);
        return can;
    };

    function create_resurrection_rotate(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 88 * scale;
        can.height = 88 * scale;
        ctx.save();
        ctx.translate(44 * scale, 44 * scale);
        ctx.rotate(0.52);
        round_regular_polygon(ctx, 6, 43 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[0], color[1], 3 * scale);
        return can;
    };

    function create_resurrection(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 202 * scale;
        can.height = 202 * scale;
        ctx.translate(2 * scale, 1 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(0, 10 * scale);
        ctx.save();
        ctx.translate(98 * scale, 41.15177917480469 * scale);
        ctx.rotate(0.8);
        round_rect(ctx, -16 * scale, -16.5 * scale, 32 * scale, 33 * scale, 7 * scale);
        ctx.restore();
        fill_path(ctx, color[2]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(98 * scale, 22.5089111328125 * scale);
        ctx.bezierCurveTo(97.5 * scale, 41.5089111328125 * scale, 97.5 * scale, 41.5089111328125 * scale, 97 * scale, 60.5089111328125 * scale);
        fill_path(ctx, color[2]);
        ctx.save();
        ctx.translate(147.5 * scale, 69.5089111328125 * scale);
        ctx.rotate(0.2);
        round_rect(ctx, -15.5 * scale, -16 * scale, 31 * scale, 32 * scale, 7 * scale);
        ctx.restore();
        fill_path(ctx, color[2]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(163 * scale, 59.50892639160156 * scale);
        ctx.bezierCurveTo(147 * scale, 69.50892639160156 * scale, 127 * scale, 82.50892639160156 * scale, 131 * scale, 79.50892639160156 * scale);
        fill_path(ctx, color[2]);
        ctx.save();
        ctx.translate(143.5 * scale, 128.2946319580078 * scale);
        ctx.rotate(1.24);
        round_rect(ctx, -16.5 * scale, -17.5 * scale, 33 * scale, 35 * scale, 7 * scale);
        ctx.restore();
        fill_path(ctx, color[2]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(162 * scale, 135.93748474121094 * scale);
        ctx.bezierCurveTo(143.5 * scale, 128.43748474121094 * scale, 129 * scale, 120.93748474121094 * scale, 125 * scale, 120.93748474121094 * scale);
        fill_path(ctx, color[2]);
        ctx.save();
        ctx.translate(99 * scale, 156.08035278320312 * scale);
        ctx.rotate(0.84);
        round_rect(ctx, -18 * scale, -18 * scale, 36 * scale, 36 * scale, 7 * scale);
        ctx.restore();
        fill_path(ctx, color[2]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(98 * scale, 136.08035278320312 * scale);
        ctx.bezierCurveTo(98 * scale, 156.08035278320312 * scale, 98 * scale, 156.08035278320312 * scale, 98 * scale, 176.08035278320312 * scale);
        fill_path(ctx, color[2]);
        ctx.save();
        ctx.translate(54 * scale, 72.22320556640625 * scale);
        ctx.rotate(1.32);
        round_rect(ctx, -18 * scale, -19 * scale, 36 * scale, 38 * scale, 7 * scale);
        ctx.restore();
        fill_path(ctx, color[2]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(34 * scale, 60.79463195800781 * scale);
        ctx.bezierCurveTo(53.5 * scale, 72.29463195800781 * scale, 69 * scale, 79.79463195800781 * scale, 73 * scale, 83.79463195800781 * scale);
        fill_path(ctx, color[2]);
        ctx.save();
        ctx.translate(49 * scale, 127.29463195800781 * scale);
        ctx.rotate(1.76);
        round_rect(ctx, -20 * scale, -17.5 * scale, 40 * scale, 35 * scale, 7 * scale);
        ctx.restore();
        fill_path(ctx, color[2]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(30 * scale, 141.7946319580078 * scale);
        ctx.bezierCurveTo(47 * scale, 130.2946319580078 * scale, 64 * scale, 119.79463195800781 * scale, 64 * scale, 118.79463195800781 * scale);
        fill_path(ctx, color[2]);
        ctx.globalAlpha = 1;
        ctx.translate(0, -10 * scale);
        ctx.save();
        ctx.translate(98 * scale, 41.15177917480469 * scale);
        ctx.rotate(0.8);
        round_rect(ctx, -16 * scale, -16.5 * scale, 32 * scale, 33 * scale, 7 * scale);
        ctx.restore();
        fill_path(ctx, color[3], color[4], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(98 * scale, 22.5089111328125 * scale);
        ctx.bezierCurveTo(97.5 * scale, 41.5089111328125 * scale, 97.5 * scale, 41.5089111328125 * scale, 97 * scale, 60.5089111328125 * scale);
        fill_path(ctx, undefined, color[4], 5 * scale);
        ctx.save();
        ctx.translate(147.5 * scale, 69.5089111328125 * scale);
        ctx.rotate(0.2);
        round_rect(ctx, -15.5 * scale, -16 * scale, 31 * scale, 32 * scale, 7 * scale);
        ctx.restore();
        fill_path(ctx, color[3], color[4], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(163 * scale, 59.50892639160156 * scale);
        ctx.bezierCurveTo(147 * scale, 69.50892639160156 * scale, 127 * scale, 82.50892639160156 * scale, 131 * scale, 79.50892639160156 * scale);
        fill_path(ctx, undefined, color[4], 5 * scale);
        ctx.save();
        ctx.translate(143.5 * scale, 128.2946319580078 * scale);
        ctx.rotate(1.24);
        round_rect(ctx, -16.5 * scale, -17.5 * scale, 33 * scale, 35 * scale, 7 * scale);
        ctx.restore();
        fill_path(ctx, color[3], color[4], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(162 * scale, 135.93748474121094 * scale);
        ctx.bezierCurveTo(143.5 * scale, 128.43748474121094 * scale, 129 * scale, 120.93748474121094 * scale, 125 * scale, 120.93748474121094 * scale);
        fill_path(ctx, undefined, color[4], 5 * scale);
        ctx.save();
        ctx.translate(99 * scale, 156.08035278320312 * scale);
        ctx.rotate(0.84);
        round_rect(ctx, -18 * scale, -18 * scale, 36 * scale, 36 * scale, 7 * scale);
        ctx.restore();
        fill_path(ctx, color[3], color[4], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(98 * scale, 136.08035278320312 * scale);
        ctx.bezierCurveTo(98 * scale, 156.08035278320312 * scale, 98 * scale, 156.08035278320312 * scale, 98 * scale, 176.08035278320312 * scale);
        fill_path(ctx, undefined, color[4], 5 * scale);
        ctx.save();
        ctx.translate(54 * scale, 72.22320556640625 * scale);
        ctx.rotate(1.32);
        round_rect(ctx, -18 * scale, -19 * scale, 36 * scale, 38 * scale, 7 * scale);
        ctx.restore();
        fill_path(ctx, color[3], color[4], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(34 * scale, 60.79463195800781 * scale);
        ctx.bezierCurveTo(53.5 * scale, 72.29463195800781 * scale, 69 * scale, 79.79463195800781 * scale, 73 * scale, 83.79463195800781 * scale);
        fill_path(ctx, undefined, color[4], 5 * scale);
        ctx.save();
        ctx.translate(49 * scale, 127.29463195800781 * scale);
        ctx.rotate(1.76);
        round_rect(ctx, -20 * scale, -17.5 * scale, 40 * scale, 35 * scale, 7 * scale);
        ctx.restore();
        fill_path(ctx, color[3], color[4], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(30 * scale, 141.7946319580078 * scale);
        ctx.bezierCurveTo(47 * scale, 130.2946319580078 * scale, 64 * scale, 119.79463195800781 * scale, 64 * scale, 118.79463195800781 * scale);
        fill_path(ctx, undefined, color[4], 5 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(0, 10 * scale);
        ctx.save();
        ctx.translate(98 * scale, 99 * scale);
        round_regular_polygon(ctx, 6, 70.28669492273468 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[2]);
        ctx.save();
        ctx.translate(98 * scale, 99 * scale);
        round_regular_polygon(ctx, 6, 56.455940020351264 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[2]);
        ctx.globalAlpha = 1;
        ctx.translate(0, -10 * scale);
        ctx.save();
        ctx.translate(98 * scale, 99 * scale);
        round_regular_polygon(ctx, 6, 70.28669492273468 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[5], color[6], 5 * scale);
        ctx.save();
        ctx.translate(98 * scale, 99 * scale);
        round_regular_polygon(ctx, 6, 56.455940020351264 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[7], color[8], 7 * scale);
        return can;
    };

    function create_dragon_heart(scale, useless, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 161 * scale;
        can.height = 184 * scale;
        ctx.translate(0, 10 * scale);
        ctx.globalAlpha = 1;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(105.5 * scale, 34.609375 * scale);
        ctx.bezierCurveTo(48.5 * scale, 7.609375 * scale, 11.5 * scale, 58.609375 * scale, 20.5 * scale, 97.609375 * scale);
        ctx.bezierCurveTo(44.5 * scale, 161.609375 * scale, 70.5 * scale, 171.609375 * scale, 88.5 * scale, 156.609375 * scale);
        ctx.bezierCurveTo(120.5 * scale, 129.609375 * scale, 123.5 * scale, 105.609375 * scale, 128.5 * scale, 83.609375 * scale);
        ctx.bezierCurveTo(137.5 * scale, 79.609375 * scale, 141.5 * scale, 79.609375 * scale, 146.5 * scale, 81.609375 * scale);
        ctx.bezierCurveTo(153.5 * scale, 70.609375 * scale, 151.5 * scale, 65.609375 * scale, 148.5 * scale, 61.609375 * scale);
        ctx.bezierCurveTo(134.5 * scale, 60.609375 * scale, 131.5 * scale, 63.609375 * scale, 127.5 * scale, 66.609375 * scale);
        ctx.bezierCurveTo(127.5 * scale, 55.609375 * scale, 125.5 * scale, 54.609375 * scale, 120.5 * scale, 51.609375 * scale);
        ctx.bezierCurveTo(128.5 * scale, 42.609375 * scale, 136.5 * scale, 38.609375 * scale, 147.5 * scale, 39.609375 * scale);
        ctx.bezierCurveTo(152.5 * scale, 23.609375 * scale, 147.5 * scale, 21.609375 * scale, 140.5 * scale, 17.609375 * scale);
        ctx.bezierCurveTo(120.5 * scale, 17.609375 * scale, 114.5 * scale, 27.609375 * scale, 106.5 * scale, 35.609375 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(45.5 * scale, 144.609375 * scale);
        ctx.bezierCurveTo(35.5 * scale, 155.609375 * scale, 37 * scale, 152.109375 * scale, 28.5 * scale, 159.609375 * scale);
        ctx.bezierCurveTo(16.5 * scale, 154.609375 * scale, 16.5 * scale, 151.609375 * scale, 17.5 * scale, 141.609375 * scale);
        ctx.bezierCurveTo(25.5 * scale, 134.109375 * scale, 25.5 * scale, 134.109375 * scale, 33.5 * scale, 126.609375 * scale);
        fill_path(ctx, color[0]);
        ctx.translate(0, -10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(45.5 * scale, 144.609375 * scale);
        ctx.bezierCurveTo(35.5 * scale, 155.609375 * scale, 37 * scale, 152.109375 * scale, 28.5 * scale, 159.609375 * scale);
        ctx.bezierCurveTo(16.5 * scale, 154.609375 * scale, 16.5 * scale, 151.609375 * scale, 17.5 * scale, 141.609375 * scale);
        ctx.bezierCurveTo(25.5 * scale, 134.109375 * scale, 25.5 * scale, 134.109375 * scale, 33.5 * scale, 126.609375 * scale);
        fill_path(ctx, color[1], color[2], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(105.5 * scale, 34.609375 * scale);
        ctx.bezierCurveTo(48.5 * scale, 7.609375 * scale, 11.5 * scale, 58.609375 * scale, 20.5 * scale, 97.609375 * scale);
        ctx.bezierCurveTo(44.5 * scale, 161.609375 * scale, 70.5 * scale, 171.609375 * scale, 88.5 * scale, 156.609375 * scale);
        ctx.bezierCurveTo(120.5 * scale, 129.609375 * scale, 123.5 * scale, 105.609375 * scale, 128.5 * scale, 83.609375 * scale);
        ctx.bezierCurveTo(137.5 * scale, 79.609375 * scale, 141.5 * scale, 79.609375 * scale, 146.5 * scale, 81.609375 * scale);
        ctx.bezierCurveTo(153.5 * scale, 70.609375 * scale, 151.5 * scale, 65.609375 * scale, 148.5 * scale, 61.609375 * scale);
        ctx.bezierCurveTo(134.5 * scale, 60.609375 * scale, 131.5 * scale, 63.609375 * scale, 127.5 * scale, 66.609375 * scale);
        ctx.bezierCurveTo(127.5 * scale, 55.609375 * scale, 125.5 * scale, 54.609375 * scale, 120.5 * scale, 51.609375 * scale);
        ctx.bezierCurveTo(128.5 * scale, 42.609375 * scale, 136.5 * scale, 38.609375 * scale, 147.5 * scale, 39.609375 * scale);
        ctx.bezierCurveTo(152.5 * scale, 23.609375 * scale, 147.5 * scale, 21.609375 * scale, 140.5 * scale, 17.609375 * scale);
        ctx.bezierCurveTo(120.5 * scale, 17.609375 * scale, 114.5 * scale, 27.609375 * scale, 106.5 * scale, 35.609375 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(104.5 * scale, 35.609375 * scale);
        ctx.bezierCurveTo(71.5 * scale, 36.609375 * scale, 57.5 * scale, 52.609375 * scale, 58.5 * scale, 81.609375 * scale);
        ctx.bezierCurveTo(59.5 * scale, 103.609375 * scale, 66.5 * scale, 107.609375 * scale, 66.5 * scale, 116.609375 * scale);
        ctx.bezierCurveTo(67.5 * scale, 128.609375 * scale, 65.5 * scale, 131.609375 * scale, 63.5 * scale, 137.609375 * scale);
        fill_path(ctx, undefined, color[2], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(59.5 * scale, 72.609375 * scale);
        ctx.bezierCurveTo(38.5 * scale, 80.609375 * scale, 43.5 * scale, 81.609375 * scale, 37.5 * scale, 89.609375 * scale);
        fill_path(ctx, undefined, color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(60.5 * scale, 85.609375 * scale);
        ctx.bezierCurveTo(75.5 * scale, 91.609375 * scale, 76.5 * scale, 96.609375 * scale, 81.5 * scale, 104.609375 * scale);
        fill_path(ctx, undefined, color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(68.5 * scale, 122.609375 * scale);
        ctx.bezierCurveTo(79.5 * scale, 130.609375 * scale, 74.5 * scale, 128.609375 * scale, 80.5 * scale, 134.609375 * scale);
        fill_path(ctx, color[1], color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(142.5 * scale, 18.609375 * scale);
        ctx.bezierCurveTo(151.5 * scale, 28.609375 * scale, 151.5 * scale, 32.609375 * scale, 146.5 * scale, 40.609375 * scale);
        ctx.bezierCurveTo(137.5 * scale, 26.609375 * scale, 138.5 * scale, 24.609375 * scale, 142.5 * scale, 19.609375 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(146.5 * scale, 61.50892639160156 * scale);
        ctx.bezierCurveTo(157.5 * scale, 69.50892639160156 * scale, 150.5 * scale, 79.50892639160156 * scale, 145.5 * scale, 81.50892639160156 * scale);
        ctx.bezierCurveTo(140.5 * scale, 65.50892639160156 * scale, 144.5 * scale, 64.50892639160156 * scale, 146.5 * scale, 62.50892639160156 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        return can;
    };

    function create_ghost(scale, useless, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 254 * scale;
        can.height = 288 * scale;
        ctx.translate(0, 5);
        ctx.globalAlpha = 0.5;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(218 * scale, 84.640625 * scale);
        ctx.bezierCurveTo(150 * scale, 13.640625 * scale, 186 * scale, 92.640625 * scale, 168 * scale, 103.640625 * scale);
        ctx.bezierCurveTo(151 * scale, 107.640625 * scale, 150 * scale, 61.640625 * scale, 144 * scale, 39.640625 * scale);
        ctx.bezierCurveTo(135 * scale, 1.640625 * scale, 113 * scale, 2.640625 * scale, 110 * scale, 40.640625 * scale);
        ctx.bezierCurveTo(106 * scale, 97.640625 * scale, 98 * scale, 102.640625 * scale, 83 * scale, 100.640625 * scale);
        ctx.bezierCurveTo(68 * scale, 98.640625 * scale, 67 * scale, 77.640625 * scale, 70 * scale, 55.640625 * scale);
        ctx.bezierCurveTo(75 * scale, 16.640625 * scale, 47 * scale, 52.640625 * scale, 38 * scale, 67.640625 * scale);
        ctx.bezierCurveTo(10 * scale, 113.640625 * scale, 10 * scale, 181.640625 * scale, 23 * scale, 213.640625 * scale);
        ctx.bezierCurveTo(45 * scale, 266.640625 * scale, 97 * scale, 277.640625 * scale, 147 * scale, 269.640625 * scale);
        ctx.bezierCurveTo(217 * scale, 259.640625 * scale, 236 * scale, 221.640625 * scale, 239 * scale, 166.640625 * scale);
        ctx.bezierCurveTo(239 * scale, 113.640625 * scale, 223 * scale, 90.640625 * scale, 219 * scale, 86.640625 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 4 * scale);
        circle(ctx, 175 * scale, 220.640625 * scale, 29.546573405388315 * scale);
        fill_path(ctx, color[0]);
        circle(ctx, 79 * scale, 222.640625 * scale, 28.178005607210743 * scale);
        fill_path(ctx, color[0]);
        circle(ctx, 175 * scale, 214.640625 * scale, 27.892651361962706 * scale);
        fill_path(ctx, color[0], color[0], 4 * scale);
        circle(ctx, 79 * scale, 215.640625 * scale, 26.570660511172846 * scale);
        fill_path(ctx, color[0], color[0], 4 * scale);
        ctx.translate(0, -5);
        ctx.globalAlpha = 1;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(218 * scale, 84.640625 * scale);
        ctx.bezierCurveTo(150 * scale, 13.640625 * scale, 186 * scale, 92.640625 * scale, 168 * scale, 103.640625 * scale);
        ctx.bezierCurveTo(151 * scale, 107.640625 * scale, 150 * scale, 61.640625 * scale, 144 * scale, 39.640625 * scale);
        ctx.bezierCurveTo(135 * scale, 1.640625 * scale, 113 * scale, 2.640625 * scale, 110 * scale, 40.640625 * scale);
        ctx.bezierCurveTo(106 * scale, 97.640625 * scale, 98 * scale, 102.640625 * scale, 83 * scale, 100.640625 * scale);
        ctx.bezierCurveTo(68 * scale, 98.640625 * scale, 67 * scale, 77.640625 * scale, 70 * scale, 55.640625 * scale);
        ctx.bezierCurveTo(75 * scale, 16.640625 * scale, 47 * scale, 52.640625 * scale, 38 * scale, 67.640625 * scale);
        ctx.bezierCurveTo(10 * scale, 113.640625 * scale, 10 * scale, 181.640625 * scale, 23 * scale, 213.640625 * scale);
        ctx.bezierCurveTo(45 * scale, 266.640625 * scale, 97 * scale, 277.640625 * scale, 147 * scale, 269.640625 * scale);
        ctx.bezierCurveTo(217 * scale, 259.640625 * scale, 236 * scale, 221.640625 * scale, 239 * scale, 166.640625 * scale);
        ctx.bezierCurveTo(239 * scale, 113.640625 * scale, 223 * scale, 90.640625 * scale, 219 * scale, 86.640625 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 4 * scale);
        circle(ctx, 175 * scale, 222.640625 * scale, 26.546573405388315 * scale);
        fill_path(ctx, color[3]);
        circle(ctx, 79 * scale, 222.640625 * scale, 26.178005607210743 * scale);
        fill_path(ctx, color[3]);
        circle(ctx, 175 * scale, 210.640625 * scale, 26.892651361962706 * scale);
        fill_path(ctx, color[4], color[5], 8 * scale);
        circle(ctx, 79 * scale, 210.640625 * scale, 26.570660511172846 * scale);
        fill_path(ctx, color[4], color[5], 8 * scale);
        return can;
    };

    function create_gemme_green(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 104 * scale;
        can.height = 117 * scale;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(4 * scale, 90 * scale);
        ctx.bezierCurveTo(20 * scale, 99.5 * scale, 20 * scale, 99.5 * scale, 36 * scale, 109 * scale);
        ctx.bezierCurveTo(67 * scale, 92 * scale, 67 * scale, 92 * scale, 98 * scale, 75 * scale);
        ctx.bezierCurveTo(91 * scale, 27 * scale, 91 * scale, 27 * scale, 91 * scale, 28 * scale);
        ctx.bezierCurveTo(72.5 * scale, 16 * scale, 72.5 * scale, 16 * scale, 54 * scale, 4 * scale);
        ctx.bezierCurveTo(33.5 * scale, 10 * scale, 33.5 * scale, 10 * scale, 13 * scale, 16 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(6 * scale, 76 * scale);
        ctx.bezierCurveTo(13.5 * scale, 51.5 * scale, 13.5 * scale, 51.5 * scale, 21 * scale, 27 * scale);
        ctx.bezierCurveTo(37.5 * scale, 17 * scale, 37.5 * scale, 17 * scale, 54 * scale, 7 * scale);
        ctx.bezierCurveTo(33.5 * scale, 12.5 * scale, 33.5 * scale, 12.5 * scale, 13 * scale, 18 * scale);
        ctx.closePath();
        fill_path(ctx, color[1]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(24 * scale, 62 * scale);
        ctx.bezierCurveTo(28.5 * scale, 53 * scale, 28.5 * scale, 53 * scale, 33 * scale, 44 * scale);
        ctx.bezierCurveTo(41.5 * scale, 41 * scale, 41.5 * scale, 41 * scale, 50 * scale, 38 * scale);
        ctx.bezierCurveTo(52.5 * scale, 35 * scale, 52.5 * scale, 35 * scale, 55 * scale, 32 * scale);
        ctx.bezierCurveTo(52 * scale, 30 * scale, 52 * scale, 30 * scale, 49 * scale, 28 * scale);
        ctx.bezierCurveTo(38 * scale, 31.5 * scale, 38 * scale, 31.5 * scale, 27 * scale, 35 * scale);
        ctx.closePath();
        fill_path(ctx, color[1]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(36 * scale, 107 * scale);
        ctx.bezierCurveTo(66 * scale, 90.5 * scale, 66 * scale, 90.5 * scale, 96 * scale, 74 * scale);
        ctx.bezierCurveTo(93 * scale, 52.5 * scale, 93 * scale, 52.5 * scale, 90 * scale, 31 * scale);
        ctx.bezierCurveTo(87 * scale, 48 * scale, 87 * scale, 48 * scale, 84 * scale, 65 * scale);
        ctx.closePath();
        fill_path(ctx, color[2]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(1 * scale, 89 * scale);
        ctx.bezierCurveTo(18 * scale, 100 * scale, 34 * scale, 110 * scale, 35 * scale, 111 * scale);
        ctx.bezierCurveTo(67 * scale, 93 * scale, 67 * scale, 93 * scale, 99 * scale, 75 * scale);
        ctx.bezierCurveTo(100 * scale, 78.5 * scale, 100 * scale, 78.5 * scale, 101 * scale, 82 * scale);
        ctx.bezierCurveTo(68 * scale, 99 * scale, 68 * scale, 99 * scale, 35 * scale, 116 * scale);
        ctx.bezierCurveTo(18 * scale, 106.5 * scale, 18 * scale, 106.5 * scale, 1 * scale, 97 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(36 * scale, 107 * scale);
        ctx.bezierCurveTo(66.5 * scale, 91.5 * scale, 66.5 * scale, 91.5 * scale, 97 * scale, 76 * scale);
        ctx.bezierCurveTo(94.5 * scale, 52 * scale, 94.5 * scale, 52 * scale, 92 * scale, 28 * scale);
        ctx.bezierCurveTo(73 * scale, 15.5 * scale, 73 * scale, 15.5 * scale, 54 * scale, 3 * scale);
        ctx.bezierCurveTo(33 * scale, 9.5 * scale, 33 * scale, 9.5 * scale, 12 * scale, 16 * scale);
        ctx.bezierCurveTo(8 * scale, 53 * scale, 8 * scale, 53 * scale, 4 * scale, 90 * scale);
        ctx.bezierCurveTo(18.5 * scale, 99 * scale, 18.5 * scale, 99 * scale, 33 * scale, 108 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[4], 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(22 * scale, 71 * scale);
        ctx.bezierCurveTo(30 * scale, 76.5 * scale, 30 * scale, 76.5 * scale, 38 * scale, 82 * scale);
        ctx.bezierCurveTo(53 * scale, 72 * scale, 53 * scale, 72 * scale, 68 * scale, 62 * scale);
        ctx.bezierCurveTo(68 * scale, 52 * scale, 68 * scale, 52 * scale, 68 * scale, 42 * scale);
        ctx.bezierCurveTo(59.5 * scale, 35.5 * scale, 59.5 * scale, 35.5 * scale, 51 * scale, 29 * scale);
        ctx.bezierCurveTo(39.5 * scale, 32 * scale, 39.5 * scale, 32 * scale, 28 * scale, 35 * scale);
        ctx.bezierCurveTo(25 * scale, 52 * scale, 25 * scale, 52 * scale, 22 * scale, 69 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[4], 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(5 * scale, 89 * scale);
        ctx.bezierCurveTo(20 * scale, 73 * scale, 12.5 * scale, 80.5 * scale, 20 * scale, 72 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[4], 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(35 * scale, 102 * scale);
        ctx.bezierCurveTo(36 * scale, 92.5 * scale, 36 * scale, 92.5 * scale, 37 * scale, 83 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[4], 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(68 * scale, 62 * scale);
        ctx.bezierCurveTo(81 * scale, 67.5 * scale, 81 * scale, 67.5 * scale, 94 * scale, 73 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[4], 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(70 * scale, 41 * scale);
        ctx.bezierCurveTo(80 * scale, 35.5 * scale, 80 * scale, 35.5 * scale, 90 * scale, 30 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[4], 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(28 * scale, 33 * scale);
        ctx.bezierCurveTo(21.5 * scale, 26.5 * scale, 21.5 * scale, 26.5 * scale, 15 * scale, 20 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[4], 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(51 * scale, 28 * scale);
        ctx.bezierCurveTo(53 * scale, 17 * scale, 53 * scale, 17 * scale, 55 * scale, 6 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[4], 6 * scale);
        return can;
    };

    function create_superhammer(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 105 * scale;
        can.height = 144 * scale;
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(-5 * scale, 0 * scale);
        ctx.save();
        ctx.translate(52.5 * scale, 91.5 * scale);
        round_rect(ctx, -4.5 * scale, -39 * scale, 9 * scale, 78 * scale, 5 * scale);
        ctx.restore();
        fill_path(ctx, color[0], color[0], 3 * scale);
        ctx.save();
        ctx.translate(53 * scale, 36 * scale);
        round_rect(ctx, -29 * scale, -17.5 * scale, 58 * scale, 35 * scale, 5 * scale);
        ctx.restore();
        fill_path(ctx, color[0], color[0], 4 * scale);
        ctx.save();
        ctx.translate(53.5 * scale, 35.5 * scale);
        round_rect(ctx, -26.5 * scale, -15 * scale, 53 * scale, 30 * scale, 5 * scale);
        ctx.restore();
        fill_path(ctx, color[0], color[0], 4 * scale);
        ctx.translate(5 * scale, 0 * scale);
        ctx.globalAlpha = 1;
        ctx.save();
        ctx.translate(52.5 * scale, 91.5 * scale);
        round_rect(ctx, -4.5 * scale, -39 * scale, 9 * scale, 78 * scale, 5 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 3 * scale);
        ctx.save();
        ctx.translate(53 * scale, 36 * scale);
        round_rect(ctx, -29 * scale, -17.5 * scale, 58 * scale, 35 * scale, 5 * scale);
        ctx.restore();
        fill_path(ctx, color[3], color[4], 4 * scale);
        ctx.save();
        ctx.translate(53.5 * scale, 35.5 * scale);
        round_rect(ctx, -26.5 * scale, -15 * scale, 53 * scale, 30 * scale, 5 * scale);
        ctx.restore();
        fill_path(ctx, color[5], color[6], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(49 * scale, 60.5 * scale);
        ctx.bezierCurveTo(44 * scale, 56.5 * scale, 44 * scale, 56.5 * scale, 39 * scale, 52.5 * scale);
        ctx.bezierCurveTo(39 * scale, 46.5 * scale, 39 * scale, 46.5 * scale, 39 * scale, 40.5 * scale);
        ctx.bezierCurveTo(44 * scale, 44 * scale, 44 * scale, 44 * scale, 49 * scale, 47.5 * scale);
        ctx.bezierCurveTo(49 * scale, 54 * scale, 49 * scale, 54 * scale, 49 * scale, 60.5 * scale);
        ctx.closePath();
        fill_path(ctx, color[7], color[6], 3 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(66 * scale, 40.5 * scale);
        ctx.bezierCurveTo(66 * scale, 46.5 * scale, 66 * scale, 46.5 * scale, 66 * scale, 52.5 * scale);
        ctx.bezierCurveTo(60.5 * scale, 56.5 * scale, 60.5 * scale, 56.5 * scale, 55 * scale, 60.5 * scale);
        ctx.bezierCurveTo(56 * scale, 53 * scale, 56 * scale, 53 * scale, 57 * scale, 45.5 * scale);
        ctx.bezierCurveTo(61.5 * scale, 43 * scale, 61.5 * scale, 43 * scale, 66 * scale, 40.5 * scale);
        ctx.closePath();
        fill_path(ctx, color[7], color[6], 3 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(52 * scale, 33.5 * scale);
        ctx.bezierCurveTo(55.5 * scale, 41 * scale, 55.5 * scale, 41 * scale, 59 * scale, 48.5 * scale);
        ctx.bezierCurveTo(56 * scale, 58 * scale, 56 * scale, 58 * scale, 53 * scale, 67.5 * scale);
        ctx.bezierCurveTo(49 * scale, 58 * scale, 49 * scale, 58 * scale, 45 * scale, 48.5 * scale);
        ctx.bezierCurveTo(48.5 * scale, 41 * scale, 48.5 * scale, 41 * scale, 52 * scale, 33.5 * scale);
        ctx.closePath();
        fill_path(ctx, color[9], color[8], 3 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(52 * scale, 47.5 * scale);
        ctx.bezierCurveTo(54.5 * scale, 50.5 * scale, 54.5 * scale, 50.5 * scale, 57 * scale, 53.5 * scale);
        ctx.bezierCurveTo(55 * scale, 60 * scale, 55 * scale, 60 * scale, 53 * scale, 66.5 * scale);
        ctx.bezierCurveTo(50.5 * scale, 61 * scale, 50.5 * scale, 61 * scale, 48 * scale, 55.5 * scale);
        ctx.bezierCurveTo(50 * scale, 52 * scale, 50 * scale, 52 * scale, 52 * scale, 48.5 * scale);
        ctx.closePath();
        fill_path(ctx, color[11], color[10], 3 * scale);
        return can;
    };

    function create_dragon_sword(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 46 * scale;
        can.height = 140 * scale;
        ctx.scale(-1 * scale, 1 * scale);
        ctx.translate(-50 * scale, 40 * scale);
        ctx.translate(-20 * scale, 0);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(10 * scale, 0);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(22.599990844726562 * scale, 85.94999694824219 * scale);
        ctx.bezierCurveTo(17.599990844726562 * scale, 83.94999694824219 * scale, 17.599990844726562 * scale, 83.94999694824219 * scale, 12.599990844726562 * scale, 81.94999694824219 * scale);
        ctx.bezierCurveTo(19.599990844726562 * scale, 73.94999694824219 * scale, 2.5999908447265625 * scale, 22.949996948242188 * scale, 33.59999084472656 * scale, 7.9499969482421875 * scale);
        ctx.bezierCurveTo(27.599990844726562 * scale, 28.949996948242188 * scale, 33.59999084472656 * scale, 26.949996948242188 * scale, 35.59999084472656 * scale, 32.94999694824219 * scale);
        ctx.bezierCurveTo(25.599990844726562 * scale, 59.94999694824219 * scale, 26.599990844726562 * scale, 69.94999694824219 * scale, 29.599990844726562 * scale, 82.94999694824219 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.translate(-1 * scale, 0);
        ctx.moveTo(17.599990844726562 * scale, 89.75 * scale);
        ctx.bezierCurveTo(24.599990844726562 * scale, 99.75 * scale, 24.599990844726562 * scale, 101.75 * scale, 20.599990844726562 * scale, 111.75 * scale);
        ctx.bezierCurveTo(28.599990844726562 * scale, 110.75 * scale, 26.599990844726562 * scale, 112.75 * scale, 28.599990844726562 * scale, 111.75 * scale);
        ctx.bezierCurveTo(30.599990844726562 * scale, 96.75 * scale, 32.59999084472656 * scale, 96.75 * scale, 30.599990844726562 * scale, 87.75 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.translate(1 * scale, 0);
        ctx.moveTo(7.5999908447265625 * scale, 86.34999084472656 * scale);
        ctx.bezierCurveTo(12.599990844726562 * scale, 85.34999084472656 * scale, 14.599990844726562 * scale, 84.34999084472656 * scale, 13.599990844726562 * scale, 84.34999084472656 * scale);
        ctx.bezierCurveTo(21.599990844726562 * scale, 83.34999084472656 * scale, 21.599990844726562 * scale, 83.34999084472656 * scale, 29.599990844726562 * scale, 82.34999084472656 * scale);
        ctx.bezierCurveTo(33.59999084472656 * scale, 85.84999084472656 * scale, 33.59999084472656 * scale, 85.84999084472656 * scale, 37.59999084472656 * scale, 89.34999084472656 * scale);
        ctx.bezierCurveTo(34.09999084472656 * scale, 91.84999084472656 * scale, 34.09999084472656 * scale, 91.84999084472656 * scale, 30.599990844726562 * scale, 94.34999084472656 * scale);
        ctx.bezierCurveTo(21.099990844726562 * scale, 93.34999084472656 * scale, 21.099990844726562 * scale, 93.34999084472656 * scale, 11.599990844726562 * scale, 92.34999084472656 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.save();
        ctx.translate(23.599990844726562 * scale, 110.94999694824219 * scale);
        ctx.rotate(0);
        round_rect(ctx, -7 * scale, -4 * scale, 14 * scale, 8 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.translate(0 * scale, 0);
        ctx.globalAlpha = 1;
        ctx.translate(10 * scale, 0);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(22.599990844726562 * scale, 85.94999694824219 * scale);
        ctx.bezierCurveTo(17.599990844726562 * scale, 83.94999694824219 * scale, 17.599990844726562 * scale, 83.94999694824219 * scale, 12.599990844726562 * scale, 81.94999694824219 * scale);
        ctx.bezierCurveTo(19.599990844726562 * scale, 73.94999694824219 * scale, 2.5999908447265625 * scale, 22.949996948242188 * scale, 33.59999084472656 * scale, 7.9499969482421875 * scale);
        ctx.bezierCurveTo(27.599990844726562 * scale, 28.949996948242188 * scale, 33.59999084472656 * scale, 26.949996948242188 * scale, 35.59999084472656 * scale, 32.94999694824219 * scale);
        ctx.bezierCurveTo(25.599990844726562 * scale, 59.94999694824219 * scale, 26.599990844726562 * scale, 69.94999694824219 * scale, 29.599990844726562 * scale, 82.94999694824219 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 3 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.translate(-1 * scale, 0);
        ctx.moveTo(17.599990844726562 * scale, 89.75 * scale);
        ctx.bezierCurveTo(24.599990844726562 * scale, 99.75 * scale, 24.599990844726562 * scale, 101.75 * scale, 20.599990844726562 * scale, 111.75 * scale);
        ctx.bezierCurveTo(28.599990844726562 * scale, 110.75 * scale, 26.599990844726562 * scale, 112.75 * scale, 28.599990844726562 * scale, 111.75 * scale);
        ctx.bezierCurveTo(30.599990844726562 * scale, 96.75 * scale, 32.59999084472656 * scale, 96.75 * scale, 30.599990844726562 * scale, 87.75 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 3 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.translate(1 * scale, 0);
        ctx.moveTo(7.5999908447265625 * scale, 86.34999084472656 * scale);
        ctx.bezierCurveTo(12.599990844726562 * scale, 85.34999084472656 * scale, 14.599990844726562 * scale, 84.34999084472656 * scale, 13.599990844726562 * scale, 84.34999084472656 * scale);
        ctx.bezierCurveTo(21.599990844726562 * scale, 83.34999084472656 * scale, 21.599990844726562 * scale, 83.34999084472656 * scale, 29.599990844726562 * scale, 82.34999084472656 * scale);
        ctx.bezierCurveTo(33.59999084472656 * scale, 85.84999084472656 * scale, 33.59999084472656 * scale, 85.84999084472656 * scale, 37.59999084472656 * scale, 89.34999084472656 * scale);
        ctx.bezierCurveTo(34.09999084472656 * scale, 91.84999084472656 * scale, 34.09999084472656 * scale, 91.84999084472656 * scale, 30.599990844726562 * scale, 94.34999084472656 * scale);
        ctx.bezierCurveTo(21.099990844726562 * scale, 93.34999084472656 * scale, 21.099990844726562 * scale, 93.34999084472656 * scale, 11.599990844726562 * scale, 92.34999084472656 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 3 * scale);
        ctx.save();
        ctx.translate(23.599990844726562 * scale, 110.94999694824219 * scale);
        ctx.rotate(0);
        round_rect(ctx, -7 * scale, -4 * scale, 14 * scale, 8 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 3 * scale);
        return can;
    };

    function create_cursed_sword(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 65 * scale;
        can.height = 131 * scale;
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(3, 0);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(21.25 * scale, 88.9375 * scale);
        ctx.bezierCurveTo(19.25 * scale, 57.9375 * scale, 19.25 * scale, 57.9375 * scale, 17.25 * scale, 26.9375 * scale);
        ctx.bezierCurveTo(24.25 * scale, 20.9375 * scale, 24.25 * scale, 20.9375 * scale, 31.25 * scale, 14.9375 * scale);
        ctx.bezierCurveTo(32.75 * scale, 54.4375 * scale, 32.75 * scale, 54.4375 * scale, 34.25 * scale, 93.9375 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(30.25 * scale, 5.9375 * scale);
        ctx.bezierCurveTo(39.25 * scale, 14.9375 * scale, 39.25 * scale, 14.9375 * scale, 48.25 * scale, 23.9375 * scale);
        ctx.bezierCurveTo(44.75 * scale, 56.4375 * scale, 44.75 * scale, 56.4375 * scale, 41.25 * scale, 88.9375 * scale);
        ctx.bezierCurveTo(36.25 * scale, 88.9375 * scale, 36.25 * scale, 88.9375 * scale, 31.25 * scale, 88.9375 * scale);
        ctx.bezierCurveTo(30.75 * scale, 47.9375 * scale, 30.75 * scale, 47.9375 * scale, 30.25 * scale, 6.9375 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(7.25 * scale, 85.4375 * scale);
        ctx.bezierCurveTo(31.75 * scale, 85.4375 * scale, 31.75 * scale, 85.4375 * scale, 56.25 * scale, 85.4375 * scale);
        ctx.bezierCurveTo(51.25 * scale, 91.9375 * scale, 51.25 * scale, 91.9375 * scale, 46.25 * scale, 98.4375 * scale);
        ctx.bezierCurveTo(30.25 * scale, 98.4375 * scale, 30.25 * scale, 98.4375 * scale, 14.25 * scale, 98.4375 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 4 * scale);
        ctx.save();
        ctx.translate(31.25 * scale, 108.9375 * scale);
        round_rect(ctx, -6 * scale, -14.5 * scale, 12 * scale, 29 * scale, 10 * scale);
        ctx.restore();
        ctx.globalAlpha = 1;
        ctx.translate(-3, 0);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(21.25 * scale, 88.9375 * scale);
        ctx.bezierCurveTo(19.25 * scale, 57.9375 * scale, 19.25 * scale, 57.9375 * scale, 17.25 * scale, 26.9375 * scale);
        ctx.bezierCurveTo(24.25 * scale, 20.9375 * scale, 24.25 * scale, 20.9375 * scale, 31.25 * scale, 14.9375 * scale);
        ctx.bezierCurveTo(32.75 * scale, 54.4375 * scale, 32.75 * scale, 54.4375 * scale, 34.25 * scale, 93.9375 * scale);
        ctx.closePath();
        fill_path(ctx, color[1]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(30.25 * scale, 5.9375 * scale);
        ctx.bezierCurveTo(39.25 * scale, 14.9375 * scale, 39.25 * scale, 14.9375 * scale, 48.25 * scale, 23.9375 * scale);
        ctx.bezierCurveTo(44.75 * scale, 56.4375 * scale, 44.75 * scale, 56.4375 * scale, 41.25 * scale, 88.9375 * scale);
        ctx.bezierCurveTo(36.25 * scale, 88.9375 * scale, 36.25 * scale, 88.9375 * scale, 31.25 * scale, 88.9375 * scale);
        ctx.bezierCurveTo(30.75 * scale, 47.9375 * scale, 30.75 * scale, 47.9375 * scale, 30.25 * scale, 6.9375 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[1], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(7.25 * scale, 85.4375 * scale);
        ctx.bezierCurveTo(31.75 * scale, 85.4375 * scale, 31.75 * scale, 85.4375 * scale, 56.25 * scale, 85.4375 * scale);
        ctx.bezierCurveTo(51.25 * scale, 91.9375 * scale, 51.25 * scale, 91.9375 * scale, 46.25 * scale, 98.4375 * scale);
        ctx.bezierCurveTo(30.25 * scale, 98.4375 * scale, 30.25 * scale, 98.4375 * scale, 14.25 * scale, 98.4375 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 4 * scale);
        ctx.save();
        ctx.translate(31.25 * scale, 108.9375 * scale);
        round_rect(ctx, -6 * scale, -14.5 * scale, 12 * scale, 29 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[4], color[5], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(31.25 * scale, 73.4375 * scale);
        ctx.bezierCurveTo(33.25 * scale, 77.9375 * scale, 33.25 * scale, 77.9375 * scale, 35.25 * scale, 82.4375 * scale);
        ctx.bezierCurveTo(33.25 * scale, 87.4375 * scale, 33.25 * scale, 87.4375 * scale, 31.25 * scale, 92.4375 * scale);
        ctx.bezierCurveTo(29.25 * scale, 87.9375 * scale, 29.25 * scale, 87.9375 * scale, 27.25 * scale, 83.4375 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[1], 2 * scale);
        return can;
    };

    function create_shop(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        var w = scale * 120;
        var h = scale * 140;
        can.width = w;
        can.height = h;
        can.width = 130 * scale;
        can.height = 120 * scale;
        round_rect(ctx, 10 * scale, 12 * scale, 110 * scale, 90 * scale, 10 * scale);
        fill_path(ctx, color[0]);
        round_rect(ctx, 10 * scale, 5 * scale, 110 * scale, 90 * scale, 10 * scale);
        fill_path(ctx, color[1], color[2], 4 * scale);
        var img = create_rotated_img(-Math.PI / 5, create_pickaxe(scale * 0.5, true, ["rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
        ctx.drawImage(img, 12 * scale, 18 * scale);
        var img = create_rotated_img(Math.PI / 4, create_hammer(scale * 0.55, true, ["rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
        ctx.drawImage(img, 36 * scale, 16 * scale);
        return can;
    };

    function create_blue_orb(scale, useless, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 137 * scale;
        can.height = 129 * scale;
        ctx.globalAlpha = 0.5;
        circle(ctx, 69 * scale, 64 * scale, 48.16637831516918 * scale);
        fill_path(ctx, color[1]);
        ctx.globalAlpha = 0.7;
        circle(ctx, 69 * scale, 64 * scale, 38.23105625617661 * scale);
        fill_path(ctx, color[2]);
        ctx.globalAlpha = 0.7;
        circle(ctx, 69 * scale, 64 * scale, 32.01562118716424 * scale);
        fill_path(ctx, color[2], color[3], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(72 * scale, 41 * scale);
        ctx.bezierCurveTo(52 * scale, 41 * scale, 48 * scale, 50 * scale, 45 * scale, 58 * scale);
        ctx.bezierCurveTo(43 * scale, 67 * scale, 45 * scale, 68 * scale, 46 * scale, 72 * scale);
        ctx.bezierCurveTo(52 * scale, 53 * scale, 60 * scale, 48 * scale, 72 * scale, 42 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(93 * scale, 62 * scale);
        ctx.bezierCurveTo(95 * scale, 72 * scale, 90 * scale, 81 * scale, 81 * scale, 87 * scale);
        ctx.bezierCurveTo(74 * scale, 91 * scale, 69 * scale, 89 * scale, 64 * scale, 88 * scale);
        ctx.bezierCurveTo(77 * scale, 83 * scale, 84 * scale, 82 * scale, 92 * scale, 62 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        return can;
    };

    function create_dragon_cube(scale, useless, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 137 * scale;
        can.height = 129 * scale;
        ctx.globalAlpha = 0.4;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(42.000030517578125 * scale, 41.17047119140625 * scale);
        ctx.bezierCurveTo(45.000030517578125 * scale, 38.17047119140625 * scale, 49.000030517578125 * scale, 37.17047119140625 * scale, 62.000030517578125 * scale, 38.17047119140625 * scale);
        ctx.bezierCurveTo(78.00003051757812 * scale, 38.17047119140625 * scale, 78.00003051757812 * scale, 38.17047119140625 * scale, 94.00003051757812 * scale, 38.17047119140625 * scale);
        ctx.bezierCurveTo(100.00003051757812 * scale, 38.17047119140625 * scale, 102.00003051757812 * scale, 38.17047119140625 * scale, 101.00003051757812 * scale, 47.17047119140625 * scale);
        ctx.bezierCurveTo(101.00003051757812 * scale, 63.67047119140625 * scale, 101.00003051757812 * scale, 63.67047119140625 * scale, 101.00003051757812 * scale, 80.17047119140625 * scale);
        ctx.bezierCurveTo(102.00003051757812 * scale, 84.17047119140625 * scale, 100.00003051757812 * scale, 86.17047119140625 * scale, 95.00003051757812 * scale, 88.17047119140625 * scale);
        ctx.bezierCurveTo(84.00003051757812 * scale, 94.17047119140625 * scale, 89.00003051757812 * scale, 94.17047119140625 * scale, 79.00003051757812 * scale, 94.17047119140625 * scale);
        ctx.bezierCurveTo(59.500030517578125 * scale, 94.17047119140625 * scale, 59.500030517578125 * scale, 94.17047119140625 * scale, 40.000030517578125 * scale, 94.17047119140625 * scale);
        ctx.bezierCurveTo(33.000030517578125 * scale, 94.17047119140625 * scale, 34.000030517578125 * scale, 94.17047119140625 * scale, 34.000030517578125 * scale, 86.17047119140625 * scale);
        ctx.bezierCurveTo(34.000030517578125 * scale, 69.67047119140625 * scale, 34.000030517578125 * scale, 69.67047119140625 * scale, 34.000030517578125 * scale, 53.17047119140625 * scale);
        ctx.bezierCurveTo(33.000030517578125 * scale, 47.17047119140625 * scale, 34.000030517578125 * scale, 47.17047119140625 * scale, 40.000030517578125 * scale, 42.17047119140625 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[2], 40 * scale);
        ctx.globalAlpha = 0.4;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(42.000030517578125 * scale, 41.17047119140625 * scale);
        ctx.bezierCurveTo(45.000030517578125 * scale, 38.17047119140625 * scale, 49.000030517578125 * scale, 37.17047119140625 * scale, 62.000030517578125 * scale, 38.17047119140625 * scale);
        ctx.bezierCurveTo(78.00003051757812 * scale, 38.17047119140625 * scale, 78.00003051757812 * scale, 38.17047119140625 * scale, 94.00003051757812 * scale, 38.17047119140625 * scale);
        ctx.bezierCurveTo(100.00003051757812 * scale, 38.17047119140625 * scale, 102.00003051757812 * scale, 38.17047119140625 * scale, 101.00003051757812 * scale, 47.17047119140625 * scale);
        ctx.bezierCurveTo(101.00003051757812 * scale, 63.67047119140625 * scale, 101.00003051757812 * scale, 63.67047119140625 * scale, 101.00003051757812 * scale, 80.17047119140625 * scale);
        ctx.bezierCurveTo(102.00003051757812 * scale, 84.17047119140625 * scale, 100.00003051757812 * scale, 86.17047119140625 * scale, 95.00003051757812 * scale, 88.17047119140625 * scale);
        ctx.bezierCurveTo(84.00003051757812 * scale, 94.17047119140625 * scale, 89.00003051757812 * scale, 94.17047119140625 * scale, 79.00003051757812 * scale, 94.17047119140625 * scale);
        ctx.bezierCurveTo(59.500030517578125 * scale, 94.17047119140625 * scale, 59.500030517578125 * scale, 94.17047119140625 * scale, 40.000030517578125 * scale, 94.17047119140625 * scale);
        ctx.bezierCurveTo(33.000030517578125 * scale, 94.17047119140625 * scale, 34.000030517578125 * scale, 94.17047119140625 * scale, 34.000030517578125 * scale, 86.17047119140625 * scale);
        ctx.bezierCurveTo(34.000030517578125 * scale, 69.67047119140625 * scale, 34.000030517578125 * scale, 69.67047119140625 * scale, 34.000030517578125 * scale, 53.17047119140625 * scale);
        ctx.bezierCurveTo(33.000030517578125 * scale, 47.17047119140625 * scale, 34.000030517578125 * scale, 47.17047119140625 * scale, 40.000030517578125 * scale, 42.17047119140625 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[1], 20 * scale);
        ctx.globalAlpha = 0.8;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(42.000030517578125 * scale, 41.17047119140625 * scale);
        ctx.bezierCurveTo(45.000030517578125 * scale, 38.17047119140625 * scale, 49.000030517578125 * scale, 37.17047119140625 * scale, 62.000030517578125 * scale, 38.17047119140625 * scale);
        ctx.bezierCurveTo(78.00003051757812 * scale, 38.17047119140625 * scale, 78.00003051757812 * scale, 38.17047119140625 * scale, 94.00003051757812 * scale, 38.17047119140625 * scale);
        ctx.bezierCurveTo(100.00003051757812 * scale, 38.17047119140625 * scale, 102.00003051757812 * scale, 38.17047119140625 * scale, 101.00003051757812 * scale, 47.17047119140625 * scale);
        ctx.bezierCurveTo(101.00003051757812 * scale, 63.67047119140625 * scale, 101.00003051757812 * scale, 63.67047119140625 * scale, 101.00003051757812 * scale, 80.17047119140625 * scale);
        ctx.bezierCurveTo(102.00003051757812 * scale, 84.17047119140625 * scale, 100.00003051757812 * scale, 86.17047119140625 * scale, 95.00003051757812 * scale, 88.17047119140625 * scale);
        ctx.bezierCurveTo(84.00003051757812 * scale, 94.17047119140625 * scale, 89.00003051757812 * scale, 94.17047119140625 * scale, 79.00003051757812 * scale, 94.17047119140625 * scale);
        ctx.bezierCurveTo(59.500030517578125 * scale, 94.17047119140625 * scale, 59.500030517578125 * scale, 94.17047119140625 * scale, 40.000030517578125 * scale, 94.17047119140625 * scale);
        ctx.bezierCurveTo(33.000030517578125 * scale, 94.17047119140625 * scale, 34.000030517578125 * scale, 94.17047119140625 * scale, 34.000030517578125 * scale, 86.17047119140625 * scale);
        ctx.bezierCurveTo(34.000030517578125 * scale, 69.67047119140625 * scale, 34.000030517578125 * scale, 69.67047119140625 * scale, 34.000030517578125 * scale, 53.17047119140625 * scale);
        ctx.bezierCurveTo(33.000030517578125 * scale, 47.17047119140625 * scale, 34.000030517578125 * scale, 47.17047119140625 * scale, 40.000030517578125 * scale, 42.17047119140625 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[1], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(51.000030517578125 * scale, 37.9886474609375 * scale);
        ctx.bezierCurveTo(51.000030517578125 * scale, 61.9886474609375 * scale, 51.000030517578125 * scale, 61.9886474609375 * scale, 51.000030517578125 * scale, 85.9886474609375 * scale);
        ctx.bezierCurveTo(75.50003051757812 * scale, 85.9886474609375 * scale, 75.50003051757812 * scale, 85.9886474609375 * scale, 100.00003051757812 * scale, 85.9886474609375 * scale);
        ctx.bezierCurveTo(100.00003051757812 * scale, 61.9886474609375 * scale, 100.00003051757812 * scale, 61.9886474609375 * scale, 100.00003051757812 * scale, 37.9886474609375 * scale);
        ctx.bezierCurveTo(76.00003051757812 * scale, 37.9886474609375 * scale, 76.00003051757812 * scale, 37.9886474609375 * scale, 52.000030517578125 * scale, 37.9886474609375 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(99.00003051757812 * scale, 38.9886474609375 * scale);
        ctx.bezierCurveTo(93.50003051757812 * scale, 44.9886474609375 * scale, 93.50003051757812 * scale, 44.9886474609375 * scale, 88.00003051757812 * scale, 50.9886474609375 * scale);
        ctx.bezierCurveTo(88.00003051757812 * scale, 72.4886474609375 * scale, 88.00003051757812 * scale, 72.4886474609375 * scale, 88.00003051757812 * scale, 93.9886474609375 * scale);
        ctx.bezierCurveTo(94.00003051757812 * scale, 90.4886474609375 * scale, 94.00003051757812 * scale, 90.4886474609375 * scale, 100.00003051757812 * scale, 86.9886474609375 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(87.00003051757812 * scale, 49.625 * scale);
        ctx.bezierCurveTo(61.000030517578125 * scale, 49.625 * scale, 61.000030517578125 * scale, 49.625 * scale, 35.000030517578125 * scale, 49.625 * scale);
        ctx.bezierCurveTo(35.000030517578125 * scale, 70.625 * scale, 35.000030517578125 * scale, 70.625 * scale, 35.000030517578125 * scale, 91.625 * scale);
        ctx.bezierCurveTo(60.500030517578125 * scale, 91.625 * scale, 60.500030517578125 * scale, 91.625 * scale, 86.00003051757812 * scale, 91.625 * scale);
        ctx.bezierCurveTo(86.50003051757812 * scale, 70.625 * scale, 86.50003051757812 * scale, 70.625 * scale, 87.00003051757812 * scale, 49.625 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[3], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(47.000030517578125 * scale, 36.625 * scale);
        ctx.bezierCurveTo(73.00003051757812 * scale, 37.125 * scale, 73.00003051757812 * scale, 37.125 * scale, 99.00003051757812 * scale, 37.625 * scale);
        ctx.bezierCurveTo(93.50003051757812 * scale, 44.125 * scale, 93.50003051757812 * scale, 44.125 * scale, 88.00003051757812 * scale, 50.625 * scale);
        ctx.bezierCurveTo(60.500030517578125 * scale, 50.125 * scale, 60.500030517578125 * scale, 50.125 * scale, 33.000030517578125 * scale, 49.625 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[3], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(53.000030517578125 * scale, 52.625 * scale);
        ctx.bezierCurveTo(40.000030517578125 * scale, 54.625 * scale, 39.000030517578125 * scale, 59.625 * scale, 40.000030517578125 * scale, 67.625 * scale);
        ctx.bezierCurveTo(45.000030517578125 * scale, 59.625 * scale, 48.000030517578125 * scale, 58.625 * scale, 54.000030517578125 * scale, 53.625 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        ctx.globalAlpha = 1;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(42.000030517578125 * scale, 41.17047119140625 * scale);
        ctx.bezierCurveTo(45.000030517578125 * scale, 38.17047119140625 * scale, 49.000030517578125 * scale, 37.17047119140625 * scale, 62.000030517578125 * scale, 38.17047119140625 * scale);
        ctx.bezierCurveTo(78.00003051757812 * scale, 38.17047119140625 * scale, 78.00003051757812 * scale, 38.17047119140625 * scale, 94.00003051757812 * scale, 38.17047119140625 * scale);
        ctx.bezierCurveTo(100.00003051757812 * scale, 38.17047119140625 * scale, 102.00003051757812 * scale, 38.17047119140625 * scale, 101.00003051757812 * scale, 47.17047119140625 * scale);
        ctx.bezierCurveTo(101.00003051757812 * scale, 63.67047119140625 * scale, 101.00003051757812 * scale, 63.67047119140625 * scale, 101.00003051757812 * scale, 80.17047119140625 * scale);
        ctx.bezierCurveTo(102.00003051757812 * scale, 84.17047119140625 * scale, 100.00003051757812 * scale, 86.17047119140625 * scale, 95.00003051757812 * scale, 88.17047119140625 * scale);
        ctx.bezierCurveTo(84.00003051757812 * scale, 94.17047119140625 * scale, 89.00003051757812 * scale, 94.17047119140625 * scale, 79.00003051757812 * scale, 94.17047119140625 * scale);
        ctx.bezierCurveTo(59.500030517578125 * scale, 94.17047119140625 * scale, 59.500030517578125 * scale, 94.17047119140625 * scale, 40.000030517578125 * scale, 94.17047119140625 * scale);
        ctx.bezierCurveTo(33.000030517578125 * scale, 94.17047119140625 * scale, 34.000030517578125 * scale, 94.17047119140625 * scale, 34.000030517578125 * scale, 86.17047119140625 * scale);
        ctx.bezierCurveTo(34.000030517578125 * scale, 69.67047119140625 * scale, 34.000030517578125 * scale, 69.67047119140625 * scale, 34.000030517578125 * scale, 53.17047119140625 * scale);
        ctx.bezierCurveTo(33.000030517578125 * scale, 47.17047119140625 * scale, 34.000030517578125 * scale, 47.17047119140625 * scale, 40.000030517578125 * scale, 42.17047119140625 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[3], 4 * scale);
        return can;
    };

    function create_lake_edge(scale, color, i) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        if (i == 0) {
            can.width = 543 * scale;
            can.height = 393 * scale;
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(164.23297119140625 * scale, 72.80398559570312 * scale);
            ctx.bezierCurveTo(289.23297119140625 * scale, 41.803985595703125 * scale, 413.23297119140625 * scale, 86.80398559570312 * scale, 441.23297119140625 * scale, 105.80398559570312 * scale);
            ctx.bezierCurveTo(513.2329711914062 * scale, 149.80398559570312 * scale, 475.23297119140625 * scale, 224.80398559570312 * scale, 451.23297119140625 * scale, 258.8039855957031 * scale);
            ctx.bezierCurveTo(410.23297119140625 * scale, 315.8039855957031 * scale, 380.23297119140625 * scale, 314.8039855957031 * scale, 289.23297119140625 * scale, 320.8039855957031 * scale);
            ctx.bezierCurveTo(160.23297119140625 * scale, 329.8039855957031 * scale, 102.23297119140625 * scale, 312.8039855957031 * scale, 72.23297119140625 * scale, 258.8039855957031 * scale);
            ctx.bezierCurveTo(32.23297119140625 * scale, 156.80398559570312 * scale, 93.23297119140625 * scale, 92.80398559570312 * scale, 164.23297119140625 * scale, 72.80398559570312 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
        } else if (i == 1) {
            can.width = 543 * scale;
            can.height = 470 * scale;
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(238.23297119140625 * scale, 34.622161865234375 * scale);
            ctx.bezierCurveTo(423.23297119140625 * scale, 21.622161865234375 * scale, 474.23297119140625 * scale, 96.62216186523438 * scale, 499.23297119140625 * scale, 167.62216186523438 * scale);
            ctx.bezierCurveTo(536.2329711914062 * scale, 288.6221618652344 * scale, 487.23297119140625 * scale, 367.6221618652344 * scale, 403.23297119140625 * scale, 412.6221618652344 * scale);
            ctx.bezierCurveTo(287.23297119140625 * scale, 466.6221618652344 * scale, 127.23297119140625 * scale, 424.6221618652344 * scale, 50.23297119140625 * scale, 318.6221618652344 * scale);
            ctx.bezierCurveTo(-0.76702880859375 * scale, 239.62216186523438 * scale, 30.23297119140625 * scale, 110.62216186523438 * scale, 73.23297119140625 * scale, 77.62216186523438 * scale);
            ctx.bezierCurveTo(128.23297119140625 * scale, 29.622161865234375 * scale, 202.23297119140625 * scale, 40.622161865234375 * scale, 238.23297119140625 * scale, 34.622161865234375 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
        } else {
            can.width = 543 * scale;
            can.height = 470 * scale;
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(268.23297119140625 * scale, 23.349441528320312 * scale);
            ctx.bezierCurveTo(424.23297119140625 * scale, -0.6505584716796875 * scale, 524.2329711914062 * scale, 44.34944152832031 * scale, 519.2329711914062 * scale, 186.3494415283203 * scale);
            ctx.bezierCurveTo(515.2329711914062 * scale, 341.3494415283203 * scale, 431.23297119140625 * scale, 409.3494415283203 * scale, 357.23297119140625 * scale, 442.3494415283203 * scale);
            ctx.bezierCurveTo(278.23297119140625 * scale, 469.3494415283203 * scale, 144.23297119140625 * scale, 460.3494415283203 * scale, 51.23297119140625 * scale, 348.3494415283203 * scale);
            ctx.bezierCurveTo(3.23297119140625 * scale, 274.3494415283203 * scale, 45.23297119140625 * scale, 87.34944152832031 * scale, 268.23297119140625 * scale, 23.349441528320312 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
        }
        return can;
    };

    function create_lake_deep(scale, color, i) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        if (i == 0) {
            can.width = 543 * scale;
            can.height = 393 * scale;
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(109.5 * scale, 154.046875 * scale);
            ctx.bezierCurveTo(143.5 * scale, 96.046875 * scale, 208.5 * scale, 92.046875 * scale, 288.5 * scale, 97.046875 * scale);
            ctx.bezierCurveTo(357.5 * scale, 104.046875 * scale, 414.5 * scale, 132.046875 * scale, 422.5 * scale, 166.046875 * scale);
            ctx.bezierCurveTo(431.5 * scale, 192.046875 * scale, 400.5 * scale, 261.046875 * scale, 332.5 * scale, 271.046875 * scale);
            ctx.bezierCurveTo(272.5 * scale, 279.046875 * scale, 159.5 * scale, 285.046875 * scale, 126.5 * scale, 260.046875 * scale);
            ctx.bezierCurveTo(99.5 * scale, 238.046875 * scale, 95.5 * scale, 183.046875 * scale, 109.5 * scale, 154.046875 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
        } else if (i == 1) {
            can.width = 543 * scale;
            can.height = 470 * scale;
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(216.23297119140625 * scale, 100.34944152832031 * scale);
            ctx.bezierCurveTo(349.23297119140625 * scale, 110.34944152832031 * scale, 422.23297119140625 * scale, 142.3494415283203 * scale, 434.23297119140625 * scale, 194.3494415283203 * scale);
            ctx.bezierCurveTo(451.23297119140625 * scale, 268.3494415283203 * scale, 397.23297119140625 * scale, 367.3494415283203 * scale, 313.23297119140625 * scale, 351.3494415283203 * scale);
            ctx.bezierCurveTo(148.23297119140625 * scale, 330.3494415283203 * scale, 106.23297119140625 * scale, 319.3494415283203 * scale, 87.23297119140625 * scale, 248.3494415283203 * scale);
            ctx.bezierCurveTo(63.23297119140625 * scale, 164.3494415283203 * scale, 102.23297119140625 * scale, 90.34944152832031 * scale, 216.23297119140625 * scale, 100.34944152832031 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
        } else {
            can.width = 543 * scale;
            can.height = 470 * scale;
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(155.23297119140625 * scale, 126.71307373046875 * scale);
            ctx.bezierCurveTo(232.23297119140625 * scale, 76.71307373046875 * scale, 340.23297119140625 * scale, 67.71307373046875 * scale, 411.23297119140625 * scale, 106.71307373046875 * scale);
            ctx.bezierCurveTo(458.23297119140625 * scale, 131.71307373046875 * scale, 465.23297119140625 * scale, 280.71307373046875 * scale, 353.23297119140625 * scale, 363.71307373046875 * scale);
            ctx.bezierCurveTo(299.23297119140625 * scale, 404.71307373046875 * scale, 143.23297119140625 * scale, 415.71307373046875 * scale, 88.23297119140625 * scale, 327.71307373046875 * scale);
            ctx.bezierCurveTo(48.23297119140625 * scale, 256.71307373046875 * scale, 93.23297119140625 * scale, 171.71307373046875 * scale, 155.23297119140625 * scale, 126.71307373046875 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
        }
        return can;
    };

    function create_lake(scale, color, i) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        if (i == 0) {
            can.width = 543 * scale;
            can.height = 393 * scale;
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(196.23297119140625 * scale, 77.8948974609375 * scale);
            ctx.bezierCurveTo(276.23297119140625 * scale, 69.8948974609375 * scale, 360.23297119140625 * scale, 87.8948974609375 * scale, 431.23297119140625 * scale, 121.8948974609375 * scale);
            ctx.bezierCurveTo(474.23297119140625 * scale, 146.8948974609375 * scale, 463.23297119140625 * scale, 184.8948974609375 * scale, 437.23297119140625 * scale, 235.8948974609375 * scale);
            ctx.bezierCurveTo(413.23297119140625 * scale, 277.8948974609375 * scale, 383.23297119140625 * scale, 289.8948974609375 * scale, 303.23297119140625 * scale, 289.8948974609375 * scale);
            ctx.bezierCurveTo(178.23297119140625 * scale, 292.8948974609375 * scale, 127.23297119140625 * scale, 301.8948974609375 * scale, 92.23297119140625 * scale, 268.8948974609375 * scale);
            ctx.bezierCurveTo(55.23297119140625 * scale, 234.8948974609375 * scale, 59.23297119140625 * scale, 147.8948974609375 * scale, 100.23297119140625 * scale, 112.8948974609375 * scale);
            ctx.bezierCurveTo(133.23297119140625 * scale, 83.8948974609375 * scale, 167.23297119140625 * scale, 82.8948974609375 * scale, 196.23297119140625 * scale, 77.8948974609375 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
        } else if (i == 1) {
            can.width = 543 * scale;
            can.height = 470 * scale;
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(285.23297119140625 * scale, 51.803985595703125 * scale);
            ctx.bezierCurveTo(408.23297119140625 * scale, 57.803985595703125 * scale, 463.23297119140625 * scale, 107.80398559570312 * scale, 480.23297119140625 * scale, 183.80398559570312 * scale);
            ctx.bezierCurveTo(500.23297119140625 * scale, 282.8039855957031 * scale, 473.23297119140625 * scale, 351.8039855957031 * scale, 373.23297119140625 * scale, 390.8039855957031 * scale);
            ctx.bezierCurveTo(286.23297119140625 * scale, 420.8039855957031 * scale, 173.23297119140625 * scale, 396.8039855957031 * scale, 86.23297119140625 * scale, 331.8039855957031 * scale);
            ctx.bezierCurveTo(13.23297119140625 * scale, 267.8039855957031 * scale, 19.23297119140625 * scale, 79.80398559570312 * scale, 143.23297119140625 * scale, 50.803985595703125 * scale);
            ctx.bezierCurveTo(175.23297119140625 * scale, 41.803985595703125 * scale, 263.23297119140625 * scale, 51.803985595703125 * scale, 285.23297119140625 * scale, 51.803985595703125 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
        } else {
            can.width = 543 * scale;
            can.height = 470 * scale;
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(492.23297119140625 * scale, 170.0767059326172 * scale);
            ctx.bezierCurveTo(493.23297119140625 * scale, 300.16761779785156 * scale, 411.23297119140625 * scale, 382.16761779785156 * scale, 321.23297119140625 * scale, 419.16761779785156 * scale);
            ctx.bezierCurveTo(251.23297119140625 * scale, 444.16761779785156 * scale, 125.23297119140625 * scale, 422.16761779785156 * scale, 63.23297119140625 * scale, 347.16761779785156 * scale);
            ctx.bezierCurveTo(22.23297119140625 * scale, 282.16761779785156 * scale, 53.23297119140625 * scale, 152.16761779785156 * scale, 179.23297119140625 * scale, 79.16761779785156 * scale);
            ctx.bezierCurveTo(237.23297119140625 * scale, 46.16761779785156 * scale, 326.23297119140625 * scale, 27.167617797851562 * scale, 409.23297119140625 * scale, 50.16761779785156 * scale);
            ctx.bezierCurveTo(470.23297119140625 * scale, 66.16761779785156 * scale, 493.23297119140625 * scale, 104.16761779785156 * scale, 492.23297119140625 * scale, 170.0767059326172 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
        }
        return can;
    };

    function create_shingle(scale, color, i) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        if (i == 0) {
            can.width = 543 * scale;
            can.height = 393 * scale;
            ctx.translate(40 * scale, 60 * scale);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(176 * scale, 10.25 * scale);
            ctx.bezierCurveTo(188 * scale, 16.25 * scale, 187 * scale, 25.25 * scale, 183 * scale, 26.25 * scale);
            ctx.bezierCurveTo(177 * scale, 26.25 * scale, 175 * scale, 21.25 * scale, 173 * scale, 19.25 * scale);
            ctx.bezierCurveTo(170 * scale, 14.25 * scale, 170 * scale, 10.25 * scale, 176 * scale, 10.25 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(176 * scale, 10.25 * scale);
            ctx.bezierCurveTo(188 * scale, 16.25 * scale, 187 * scale, 25.25 * scale, 183 * scale, 26.25 * scale);
            ctx.bezierCurveTo(177 * scale, 26.25 * scale, 175 * scale, 21.25 * scale, 173 * scale, 19.25 * scale);
            ctx.bezierCurveTo(170 * scale, 14.25 * scale, 170 * scale, 10.25 * scale, 176 * scale, 10.25 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(274 * scale, 8 * scale);
            ctx.bezierCurveTo(276 * scale, 12 * scale, 271 * scale, 23 * scale, 266 * scale, 20 * scale);
            ctx.bezierCurveTo(264 * scale, 19 * scale, 262 * scale, 15 * scale, 267 * scale, 9 * scale);
            ctx.bezierCurveTo(271 * scale, 5 * scale, 274 * scale, 5 * scale, 274 * scale, 8 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(274 * scale, 8 * scale);
            ctx.bezierCurveTo(276 * scale, 12 * scale, 271 * scale, 23 * scale, 266 * scale, 20 * scale);
            ctx.bezierCurveTo(264 * scale, 19 * scale, 262 * scale, 15 * scale, 267 * scale, 9 * scale);
            ctx.bezierCurveTo(271 * scale, 5 * scale, 274 * scale, 5 * scale, 274 * scale, 8 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(282 * scale, 23.25 * scale);
            ctx.bezierCurveTo(275 * scale, 25.25 * scale, 272 * scale, 29.25 * scale, 274 * scale, 36.25 * scale);
            ctx.bezierCurveTo(277 * scale, 40.25 * scale, 280 * scale, 37.25 * scale, 283 * scale, 32.25 * scale);
            ctx.bezierCurveTo(286 * scale, 26.25 * scale, 286 * scale, 25.25 * scale, 282 * scale, 23.25 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(282 * scale, 23.25 * scale);
            ctx.bezierCurveTo(275 * scale, 25.25 * scale, 272 * scale, 29.25 * scale, 274 * scale, 36.25 * scale);
            ctx.bezierCurveTo(277 * scale, 40.25 * scale, 280 * scale, 37.25 * scale, 283 * scale, 32.25 * scale);
            ctx.bezierCurveTo(286 * scale, 26.25 * scale, 286 * scale, 25.25 * scale, 282 * scale, 23.25 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(343.75 * scale, 18.25 * scale);
            ctx.bezierCurveTo(346.75 * scale, 27.25 * scale, 346.75 * scale, 32.25 * scale, 339.75 * scale, 31.25 * scale);
            ctx.bezierCurveTo(336.75 * scale, 29.25 * scale, 335.75 * scale, 27.25 * scale, 336.75 * scale, 22.25 * scale);
            ctx.bezierCurveTo(336.75 * scale, 16.25 * scale, 338.75 * scale, 15.25 * scale, 343.75 * scale, 18.25 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(343.75 * scale, 18.25 * scale);
            ctx.bezierCurveTo(346.75 * scale, 27.25 * scale, 346.75 * scale, 32.25 * scale, 339.75 * scale, 31.25 * scale);
            ctx.bezierCurveTo(336.75 * scale, 29.25 * scale, 335.75 * scale, 27.25 * scale, 336.75 * scale, 22.25 * scale);
            ctx.bezierCurveTo(336.75 * scale, 16.25 * scale, 338.75 * scale, 15.25 * scale, 343.75 * scale, 18.25 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(364.75 * scale, 22.25 * scale);
            ctx.bezierCurveTo(368.75 * scale, 27.25 * scale, 362.75 * scale, 36.25 * scale, 356.75 * scale, 39.25 * scale);
            ctx.bezierCurveTo(346.75 * scale, 43.25 * scale, 346.75 * scale, 34.25 * scale, 348.75 * scale, 31.25 * scale);
            ctx.bezierCurveTo(352.75 * scale, 23.25 * scale, 360.75 * scale, 20.25 * scale, 363.75 * scale, 22.25 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(364.75 * scale, 22.25 * scale);
            ctx.bezierCurveTo(368.75 * scale, 27.25 * scale, 362.75 * scale, 36.25 * scale, 356.75 * scale, 39.25 * scale);
            ctx.bezierCurveTo(346.75 * scale, 43.25 * scale, 346.75 * scale, 34.25 * scale, 348.75 * scale, 31.25 * scale);
            ctx.bezierCurveTo(352.75 * scale, 23.25 * scale, 360.75 * scale, 20.25 * scale, 363.75 * scale, 22.25 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(350.75 * scale, 52.25 * scale);
            ctx.bezierCurveTo(352.75 * scale, 45.25 * scale, 360.75 * scale, 43.25 * scale, 368.75 * scale, 52.25 * scale);
            ctx.bezierCurveTo(369.75 * scale, 58.25 * scale, 366.75 * scale, 59.25 * scale, 357.75 * scale, 57.25 * scale);
            ctx.bezierCurveTo(350.75 * scale, 56.25 * scale, 352.75 * scale, 55.25 * scale, 350.75 * scale, 52.25 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(350.75 * scale, 52.25 * scale);
            ctx.bezierCurveTo(352.75 * scale, 45.25 * scale, 360.75 * scale, 43.25 * scale, 368.75 * scale, 52.25 * scale);
            ctx.bezierCurveTo(369.75 * scale, 58.25 * scale, 366.75 * scale, 59.25 * scale, 357.75 * scale, 57.25 * scale);
            ctx.bezierCurveTo(350.75 * scale, 56.25 * scale, 352.75 * scale, 55.25 * scale, 350.75 * scale, 52.25 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(421.75 * scale, 81.25 * scale);
            ctx.bezierCurveTo(432.75 * scale, 85.25 * scale, 431.75 * scale, 89.25 * scale, 426.75 * scale, 93.25 * scale);
            ctx.bezierCurveTo(418.75 * scale, 95.25 * scale, 414.75 * scale, 93.25 * scale, 412.75 * scale, 89.25 * scale);
            ctx.bezierCurveTo(411.75 * scale, 84.25 * scale, 413.75 * scale, 81.25 * scale, 421.75 * scale, 81.25 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(421.75 * scale, 81.25 * scale);
            ctx.bezierCurveTo(432.75 * scale, 85.25 * scale, 431.75 * scale, 89.25 * scale, 426.75 * scale, 93.25 * scale);
            ctx.bezierCurveTo(418.75 * scale, 95.25 * scale, 414.75 * scale, 93.25 * scale, 412.75 * scale, 89.25 * scale);
            ctx.bezierCurveTo(411.75 * scale, 84.25 * scale, 413.75 * scale, 81.25 * scale, 421.75 * scale, 81.25 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(432.75 * scale, 105.25 * scale);
            ctx.bezierCurveTo(430.75 * scale, 115.25 * scale, 411.75 * scale, 130.25 * scale, 408.75 * scale, 117.25 * scale);
            ctx.bezierCurveTo(407.75 * scale, 106.25 * scale, 414.75 * scale, 103.25 * scale, 421.75 * scale, 101.25 * scale);
            ctx.bezierCurveTo(430.75 * scale, 100.25 * scale, 432.75 * scale, 101.25 * scale, 432.75 * scale, 105.25 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(432.75 * scale, 105.25 * scale);
            ctx.bezierCurveTo(430.75 * scale, 115.25 * scale, 411.75 * scale, 130.25 * scale, 408.75 * scale, 117.25 * scale);
            ctx.bezierCurveTo(407.75 * scale, 106.25 * scale, 414.75 * scale, 103.25 * scale, 421.75 * scale, 101.25 * scale);
            ctx.bezierCurveTo(430.75 * scale, 100.25 * scale, 432.75 * scale, 101.25 * scale, 432.75 * scale, 105.25 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(422.75 * scale, 153.25 * scale);
            ctx.bezierCurveTo(437.75 * scale, 155.25 * scale, 442.75 * scale, 158.25 * scale, 436.75 * scale, 165.25 * scale);
            ctx.bezierCurveTo(431.75 * scale, 170.25 * scale, 424.75 * scale, 167.25 * scale, 419.75 * scale, 163.25 * scale);
            ctx.bezierCurveTo(413.75 * scale, 157.25 * scale, 415.75 * scale, 153.25 * scale, 422.75 * scale, 153.25 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(422.75 * scale, 153.25 * scale);
            ctx.bezierCurveTo(437.75 * scale, 155.25 * scale, 442.75 * scale, 158.25 * scale, 436.75 * scale, 165.25 * scale);
            ctx.bezierCurveTo(431.75 * scale, 170.25 * scale, 424.75 * scale, 167.25 * scale, 419.75 * scale, 163.25 * scale);
            ctx.bezierCurveTo(413.75 * scale, 157.25 * scale, 415.75 * scale, 153.25 * scale, 422.75 * scale, 153.25 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(409.75 * scale, 158.25 * scale);
            ctx.bezierCurveTo(409.75 * scale, 168.25 * scale, 401.75 * scale, 172.25 * scale, 397.75 * scale, 167.25 * scale);
            ctx.bezierCurveTo(394.75 * scale, 159.25 * scale, 407.75 * scale, 150.25 * scale, 408.75 * scale, 158.25 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(409.75 * scale, 158.25 * scale);
            ctx.bezierCurveTo(409.75 * scale, 168.25 * scale, 401.75 * scale, 172.25 * scale, 397.75 * scale, 167.25 * scale);
            ctx.bezierCurveTo(394.75 * scale, 159.25 * scale, 407.75 * scale, 150.25 * scale, 408.75 * scale, 158.25 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(204 * scale, 238.25 * scale);
            ctx.bezierCurveTo(204 * scale, 248.25 * scale, 184 * scale, 255.25 * scale, 180 * scale, 247.25 * scale);
            ctx.bezierCurveTo(177 * scale, 241.25 * scale, 187 * scale, 236.25 * scale, 192 * scale, 235.25 * scale);
            ctx.bezierCurveTo(201 * scale, 233.25 * scale, 204 * scale, 233.25 * scale, 204 * scale, 238.25 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(204 * scale, 238.25 * scale);
            ctx.bezierCurveTo(204 * scale, 248.25 * scale, 184 * scale, 255.25 * scale, 180 * scale, 247.25 * scale);
            ctx.bezierCurveTo(177 * scale, 241.25 * scale, 187 * scale, 236.25 * scale, 192 * scale, 235.25 * scale);
            ctx.bezierCurveTo(201 * scale, 233.25 * scale, 204 * scale, 233.25 * scale, 204 * scale, 238.25 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(208 * scale, 246.25 * scale);
            ctx.bezierCurveTo(202 * scale, 255.25 * scale, 204 * scale, 258.25 * scale, 212 * scale, 255.25 * scale);
            ctx.bezierCurveTo(217 * scale, 250.25 * scale, 217 * scale, 248.25 * scale, 216 * scale, 244.25 * scale);
            ctx.bezierCurveTo(210 * scale, 241.25 * scale, 209 * scale, 245.25 * scale, 208 * scale, 246.25 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(208 * scale, 246.25 * scale);
            ctx.bezierCurveTo(202 * scale, 255.25 * scale, 204 * scale, 258.25 * scale, 212 * scale, 255.25 * scale);
            ctx.bezierCurveTo(217 * scale, 250.25 * scale, 217 * scale, 248.25 * scale, 216 * scale, 244.25 * scale);
            ctx.bezierCurveTo(210 * scale, 241.25 * scale, 209 * scale, 245.25 * scale, 208 * scale, 246.25 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(197 * scale, 258.25 * scale);
            ctx.bezierCurveTo(194 * scale, 265.25 * scale, 186 * scale, 270.25 * scale, 185 * scale, 262.25 * scale);
            ctx.bezierCurveTo(187 * scale, 255.25 * scale, 191 * scale, 252.25 * scale, 195 * scale, 253.25 * scale);
            ctx.bezierCurveTo(198 * scale, 256.25 * scale, 197 * scale, 257.25 * scale, 197 * scale, 258.25 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(197 * scale, 258.25 * scale);
            ctx.bezierCurveTo(194 * scale, 265.25 * scale, 186 * scale, 270.25 * scale, 185 * scale, 262.25 * scale);
            ctx.bezierCurveTo(187 * scale, 255.25 * scale, 191 * scale, 252.25 * scale, 195 * scale, 253.25 * scale);
            ctx.bezierCurveTo(198 * scale, 256.25 * scale, 197 * scale, 257.25 * scale, 197 * scale, 258.25 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(24 * scale, 111.25 * scale);
            ctx.bezierCurveTo(32 * scale, 115.25 * scale, 29 * scale, 123.25 * scale, 22 * scale, 133.25 * scale);
            ctx.bezierCurveTo(15 * scale, 140.25 * scale, 7 * scale, 137.25 * scale, 9 * scale, 125.25 * scale);
            ctx.bezierCurveTo(12 * scale, 114.25 * scale, 20 * scale, 110.25 * scale, 24 * scale, 111.25 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(24 * scale, 111.25 * scale);
            ctx.bezierCurveTo(32 * scale, 115.25 * scale, 29 * scale, 123.25 * scale, 22 * scale, 133.25 * scale);
            ctx.bezierCurveTo(15 * scale, 140.25 * scale, 7 * scale, 137.25 * scale, 9 * scale, 125.25 * scale);
            ctx.bezierCurveTo(12 * scale, 114.25 * scale, 20 * scale, 110.25 * scale, 24 * scale, 111.25 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(33 * scale, 137.25 * scale);
            ctx.bezierCurveTo(41 * scale, 142.25 * scale, 40 * scale, 145.25 * scale, 35 * scale, 147.25 * scale);
            ctx.bezierCurveTo(22 * scale, 147.25 * scale, 18 * scale, 144.25 * scale, 22 * scale, 138.25 * scale);
            ctx.bezierCurveTo(26 * scale, 133.25 * scale, 31 * scale, 136.25 * scale, 33 * scale, 137.25 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(33 * scale, 137.25 * scale);
            ctx.bezierCurveTo(41 * scale, 142.25 * scale, 40 * scale, 145.25 * scale, 35 * scale, 147.25 * scale);
            ctx.bezierCurveTo(22 * scale, 147.25 * scale, 18 * scale, 144.25 * scale, 22 * scale, 138.25 * scale);
            ctx.bezierCurveTo(26 * scale, 133.25 * scale, 31 * scale, 136.25 * scale, 33 * scale, 137.25 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(36 * scale, 187.25 * scale);
            ctx.bezierCurveTo(25 * scale, 198.25 * scale, 19 * scale, 193.25 * scale, 23 * scale, 187.25 * scale);
            ctx.bezierCurveTo(26 * scale, 178.25 * scale, 32 * scale, 173.25 * scale, 38 * scale, 175.25 * scale);
            ctx.bezierCurveTo(44 * scale, 180.25 * scale, 39 * scale, 186.25 * scale, 36 * scale, 187.25 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(36 * scale, 187.25 * scale);
            ctx.bezierCurveTo(25 * scale, 198.25 * scale, 19 * scale, 193.25 * scale, 23 * scale, 187.25 * scale);
            ctx.bezierCurveTo(26 * scale, 178.25 * scale, 32 * scale, 173.25 * scale, 38 * scale, 175.25 * scale);
            ctx.bezierCurveTo(44 * scale, 180.25 * scale, 39 * scale, 186.25 * scale, 36 * scale, 187.25 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
        } else if (i == 1) {
            can.width = 543 * scale;
            can.height = 470 * scale;
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(377.1428527832031 * scale, 56.87498474121094 * scale);
            ctx.bezierCurveTo(384.1428527832031 * scale, 44.87498474121094 * scale, 403.1428527832031 * scale, 39.87498474121094 * scale, 403.1428527832031 * scale, 51.87498474121094 * scale);
            ctx.bezierCurveTo(402.1428527832031 * scale, 59.87498474121094 * scale, 396.1428527832031 * scale, 61.87498474121094 * scale, 389.1428527832031 * scale, 64.87498474121094 * scale);
            ctx.bezierCurveTo(376.1428527832031 * scale, 67.87498474121094 * scale, 375.1428527832031 * scale, 62.87498474121094 * scale, 377.1428527832031 * scale, 56.87498474121094 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(377.1428527832031 * scale, 56.87498474121094 * scale);
            ctx.bezierCurveTo(384.1428527832031 * scale, 44.87498474121094 * scale, 403.1428527832031 * scale, 39.87498474121094 * scale, 403.1428527832031 * scale, 51.87498474121094 * scale);
            ctx.bezierCurveTo(402.1428527832031 * scale, 59.87498474121094 * scale, 396.1428527832031 * scale, 61.87498474121094 * scale, 389.1428527832031 * scale, 64.87498474121094 * scale);
            ctx.bezierCurveTo(376.1428527832031 * scale, 67.87498474121094 * scale, 375.1428527832031 * scale, 62.87498474121094 * scale, 377.1428527832031 * scale, 56.87498474121094 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(349.1428527832031 * scale, 44.303558349609375 * scale);
            ctx.bezierCurveTo(358.1428527832031 * scale, 37.303558349609375 * scale, 370.1428527832031 * scale, 47.303558349609375 * scale, 364.1428527832031 * scale, 51.303558349609375 * scale);
            ctx.bezierCurveTo(356.1428527832031 * scale, 55.303558349609375 * scale, 345.1428527832031 * scale, 48.303558349609375 * scale, 349.1428527832031 * scale, 45.303558349609375 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(349.1428527832031 * scale, 44.303558349609375 * scale);
            ctx.bezierCurveTo(358.1428527832031 * scale, 37.303558349609375 * scale, 370.1428527832031 * scale, 47.303558349609375 * scale, 364.1428527832031 * scale, 51.303558349609375 * scale);
            ctx.bezierCurveTo(356.1428527832031 * scale, 55.303558349609375 * scale, 345.1428527832031 * scale, 48.303558349609375 * scale, 349.1428527832031 * scale, 45.303558349609375 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(480.1428527832031 * scale, 152.30355834960938 * scale);
            ctx.bezierCurveTo(477.1428527832031 * scale, 145.30355834960938 * scale, 480.1428527832031 * scale, 140.30355834960938 * scale, 489.1428527832031 * scale, 135.30355834960938 * scale);
            ctx.bezierCurveTo(497.1428527832031 * scale, 133.30355834960938 * scale, 498.1428527832031 * scale, 140.30355834960938 * scale, 491.1428527832031 * scale, 147.30355834960938 * scale);
            ctx.bezierCurveTo(485.1428527832031 * scale, 155.30355834960938 * scale, 482.1428527832031 * scale, 156.30355834960938 * scale, 480.1428527832031 * scale, 152.30355834960938 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(480.1428527832031 * scale, 152.30355834960938 * scale);
            ctx.bezierCurveTo(477.1428527832031 * scale, 145.30355834960938 * scale, 480.1428527832031 * scale, 140.30355834960938 * scale, 489.1428527832031 * scale, 135.30355834960938 * scale);
            ctx.bezierCurveTo(497.1428527832031 * scale, 133.30355834960938 * scale, 498.1428527832031 * scale, 140.30355834960938 * scale, 491.1428527832031 * scale, 147.30355834960938 * scale);
            ctx.bezierCurveTo(485.1428527832031 * scale, 155.30355834960938 * scale, 482.1428527832031 * scale, 156.30355834960938 * scale, 480.1428527832031 * scale, 152.30355834960938 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(211.14285278320312 * scale, 27.303558349609375 * scale);
            ctx.bezierCurveTo(223.14285278320312 * scale, 21.303558349609375 * scale, 234.14285278320312 * scale, 34.303558349609375 * scale, 232.14285278320312 * scale, 42.303558349609375 * scale);
            ctx.bezierCurveTo(228.14285278320312 * scale, 49.303558349609375 * scale, 223.14285278320312 * scale, 45.303558349609375 * scale, 213.14285278320312 * scale, 38.303558349609375 * scale);
            ctx.bezierCurveTo(205.14285278320312 * scale, 31.303558349609375 * scale, 208.14285278320312 * scale, 29.303558349609375 * scale, 211.14285278320312 * scale, 27.303558349609375 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(211.14285278320312 * scale, 27.303558349609375 * scale);
            ctx.bezierCurveTo(223.14285278320312 * scale, 21.303558349609375 * scale, 234.14285278320312 * scale, 34.303558349609375 * scale, 232.14285278320312 * scale, 42.303558349609375 * scale);
            ctx.bezierCurveTo(228.14285278320312 * scale, 49.303558349609375 * scale, 223.14285278320312 * scale, 45.303558349609375 * scale, 213.14285278320312 * scale, 38.303558349609375 * scale);
            ctx.bezierCurveTo(205.14285278320312 * scale, 31.303558349609375 * scale, 208.14285278320312 * scale, 29.303558349609375 * scale, 211.14285278320312 * scale, 27.303558349609375 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(364.1428527832031 * scale, 73.30355834960938 * scale);
            ctx.bezierCurveTo(354.1428527832031 * scale, 72.30355834960938 * scale, 356.1428527832031 * scale, 64.30355834960938 * scale, 359.1428527832031 * scale, 59.303558349609375 * scale);
            ctx.bezierCurveTo(365.1428527832031 * scale, 55.303558349609375 * scale, 366.1428527832031 * scale, 61.303558349609375 * scale, 366.1428527832031 * scale, 69.30355834960938 * scale);
            ctx.bezierCurveTo(365.1428527832031 * scale, 73.30355834960938 * scale, 365.1428527832031 * scale, 73.30355834960938 * scale, 364.1428527832031 * scale, 73.30355834960938 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(364.1428527832031 * scale, 73.30355834960938 * scale);
            ctx.bezierCurveTo(354.1428527832031 * scale, 72.30355834960938 * scale, 356.1428527832031 * scale, 64.30355834960938 * scale, 359.1428527832031 * scale, 59.303558349609375 * scale);
            ctx.bezierCurveTo(365.1428527832031 * scale, 55.303558349609375 * scale, 366.1428527832031 * scale, 61.303558349609375 * scale, 366.1428527832031 * scale, 69.30355834960938 * scale);
            ctx.bezierCurveTo(365.1428527832031 * scale, 73.30355834960938 * scale, 365.1428527832031 * scale, 73.30355834960938 * scale, 364.1428527832031 * scale, 73.30355834960938 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(182.14285278320312 * scale, 57.303558349609375 * scale);
            ctx.bezierCurveTo(173.14285278320312 * scale, 52.303558349609375 * scale, 177.14285278320312 * scale, 39.303558349609375 * scale, 198.14285278320312 * scale, 36.303558349609375 * scale);
            ctx.bezierCurveTo(209.14285278320312 * scale, 37.303558349609375 * scale, 206.14285278320312 * scale, 49.303558349609375 * scale, 193.14285278320312 * scale, 53.303558349609375 * scale);
            ctx.bezierCurveTo(187.14285278320312 * scale, 56.303558349609375 * scale, 185.14285278320312 * scale, 57.303558349609375 * scale, 182.14285278320312 * scale, 57.303558349609375 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(182.14285278320312 * scale, 57.303558349609375 * scale);
            ctx.bezierCurveTo(173.14285278320312 * scale, 52.303558349609375 * scale, 177.14285278320312 * scale, 39.303558349609375 * scale, 198.14285278320312 * scale, 36.303558349609375 * scale);
            ctx.bezierCurveTo(209.14285278320312 * scale, 37.303558349609375 * scale, 206.14285278320312 * scale, 49.303558349609375 * scale, 193.14285278320312 * scale, 53.303558349609375 * scale);
            ctx.bezierCurveTo(187.14285278320312 * scale, 56.303558349609375 * scale, 185.14285278320312 * scale, 57.303558349609375 * scale, 182.14285278320312 * scale, 57.303558349609375 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(489.1428527832031 * scale, 267.0178527832031 * scale);
            ctx.bezierCurveTo(500.1428527832031 * scale, 257.0178527832031 * scale, 511.1428527832031 * scale, 269.0178527832031 * scale, 514.1428527832031 * scale, 275.0178527832031 * scale);
            ctx.bezierCurveTo(519.1428527832031 * scale, 285.0178527832031 * scale, 509.1428527832031 * scale, 288.0178527832031 * scale, 501.1428527832031 * scale, 282.0178527832031 * scale);
            ctx.bezierCurveTo(488.1428527832031 * scale, 277.0178527832031 * scale, 485.1428527832031 * scale, 271.0178527832031 * scale, 489.1428527832031 * scale, 267.0178527832031 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(489.1428527832031 * scale, 267.0178527832031 * scale);
            ctx.bezierCurveTo(500.1428527832031 * scale, 257.0178527832031 * scale, 511.1428527832031 * scale, 269.0178527832031 * scale, 514.1428527832031 * scale, 275.0178527832031 * scale);
            ctx.bezierCurveTo(519.1428527832031 * scale, 285.0178527832031 * scale, 509.1428527832031 * scale, 288.0178527832031 * scale, 501.1428527832031 * scale, 282.0178527832031 * scale);
            ctx.bezierCurveTo(488.1428527832031 * scale, 277.0178527832031 * scale, 485.1428527832031 * scale, 271.0178527832031 * scale, 489.1428527832031 * scale, 267.0178527832031 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(480.1428527832031 * scale, 122.73213958740234 * scale);
            ctx.bezierCurveTo(469.1428527832031 * scale, 119.73213958740234 * scale, 473.1428527832031 * scale, 108.73213958740234 * scale, 476.1428527832031 * scale, 107.73213958740234 * scale);
            ctx.bezierCurveTo(483.1428527832031 * scale, 102.73213958740234 * scale, 485.1428527832031 * scale, 118.73213958740234 * scale, 480.1428527832031 * scale, 122.73213958740234 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(480.1428527832031 * scale, 122.73213958740234 * scale);
            ctx.bezierCurveTo(469.1428527832031 * scale, 119.73213958740234 * scale, 473.1428527832031 * scale, 108.73213958740234 * scale, 476.1428527832031 * scale, 107.73213958740234 * scale);
            ctx.bezierCurveTo(483.1428527832031 * scale, 102.73213958740234 * scale, 485.1428527832031 * scale, 118.73213958740234 * scale, 480.1428527832031 * scale, 122.73213958740234 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(470.1428527832031 * scale, 286.3035697937012 * scale);
            ctx.bezierCurveTo(472.1428527832031 * scale, 277.3035697937012 * scale, 480.1428527832031 * scale, 277.3035697937012 * scale, 489.1428527832031 * scale, 286.3035697937012 * scale);
            ctx.bezierCurveTo(490.1428527832031 * scale, 292.3035697937012 * scale, 482.1428527832031 * scale, 294.3035697937012 * scale, 470.1428527832031 * scale, 286.3035697937012 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(470.1428527832031 * scale, 286.3035697937012 * scale);
            ctx.bezierCurveTo(472.1428527832031 * scale, 277.3035697937012 * scale, 480.1428527832031 * scale, 277.3035697937012 * scale, 489.1428527832031 * scale, 286.3035697937012 * scale);
            ctx.bezierCurveTo(490.1428527832031 * scale, 292.3035697937012 * scale, 482.1428527832031 * scale, 294.3035697937012 * scale, 470.1428527832031 * scale, 286.3035697937012 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(518.1428527832031 * scale, 265.0178565979004 * scale);
            ctx.bezierCurveTo(524.1428527832031 * scale, 262.0178565979004 * scale, 521.1428527832031 * scale, 247.0178565979004 * scale, 514.1428527832031 * scale, 250.0178565979004 * scale);
            ctx.bezierCurveTo(510.1428527832031 * scale, 252.0178565979004 * scale, 509.1428527832031 * scale, 266.0178565979004 * scale, 518.1428527832031 * scale, 266.0178565979004 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(518.1428527832031 * scale, 265.0178565979004 * scale);
            ctx.bezierCurveTo(524.1428527832031 * scale, 262.0178565979004 * scale, 521.1428527832031 * scale, 247.0178565979004 * scale, 514.1428527832031 * scale, 250.0178565979004 * scale);
            ctx.bezierCurveTo(510.1428527832031 * scale, 252.0178565979004 * scale, 509.1428527832031 * scale, 266.0178565979004 * scale, 518.1428527832031 * scale, 266.0178565979004 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(179.14285278320312 * scale, 399.5892858505249 * scale);
            ctx.bezierCurveTo(174.14285278320312 * scale, 385.5892858505249 * scale, 186.14285278320312 * scale, 379.5892858505249 * scale, 198.14285278320312 * scale, 379.5892858505249 * scale);
            ctx.bezierCurveTo(208.14285278320312 * scale, 379.5892858505249 * scale, 206.14285278320312 * scale, 391.5892858505249 * scale, 194.14285278320312 * scale, 396.5892858505249 * scale);
            ctx.bezierCurveTo(184.14285278320312 * scale, 401.5892858505249 * scale, 182.14285278320312 * scale, 402.5892858505249 * scale, 179.14285278320312 * scale, 399.5892858505249 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(179.14285278320312 * scale, 399.5892858505249 * scale);
            ctx.bezierCurveTo(174.14285278320312 * scale, 385.5892858505249 * scale, 186.14285278320312 * scale, 379.5892858505249 * scale, 198.14285278320312 * scale, 379.5892858505249 * scale);
            ctx.bezierCurveTo(208.14285278320312 * scale, 379.5892858505249 * scale, 206.14285278320312 * scale, 391.5892858505249 * scale, 194.14285278320312 * scale, 396.5892858505249 * scale);
            ctx.bezierCurveTo(184.14285278320312 * scale, 401.5892858505249 * scale, 182.14285278320312 * scale, 402.5892858505249 * scale, 179.14285278320312 * scale, 399.5892858505249 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(163.14285278320312 * scale, 407.875 * scale);
            ctx.bezierCurveTo(152.14285278320312 * scale, 405.875 * scale, 156.14285278320312 * scale, 391.875 * scale, 163.14285278320312 * scale, 385.875 * scale);
            ctx.bezierCurveTo(170.14285278320312 * scale, 381.875 * scale, 173.14285278320312 * scale, 385.875 * scale, 170.14285278320312 * scale, 398.875 * scale);
            ctx.bezierCurveTo(169.14285278320312 * scale, 403.875 * scale, 165.14285278320312 * scale, 408.875 * scale, 164.14285278320312 * scale, 407.875 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(163.14285278320312 * scale, 407.875 * scale);
            ctx.bezierCurveTo(152.14285278320312 * scale, 405.875 * scale, 156.14285278320312 * scale, 391.875 * scale, 163.14285278320312 * scale, 385.875 * scale);
            ctx.bezierCurveTo(170.14285278320312 * scale, 381.875 * scale, 173.14285278320312 * scale, 385.875 * scale, 170.14285278320312 * scale, 398.875 * scale);
            ctx.bezierCurveTo(169.14285278320312 * scale, 403.875 * scale, 165.14285278320312 * scale, 408.875 * scale, 164.14285278320312 * scale, 407.875 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(78.14285278320312 * scale, 71.73211669921875 * scale);
            ctx.bezierCurveTo(82.14285278320312 * scale, 62.73211669921875 * scale, 88.14285278320312 * scale, 69.73211669921875 * scale, 91.14285278320312 * scale, 79.73211669921875 * scale);
            ctx.bezierCurveTo(90.14285278320312 * scale, 86.73211669921875 * scale, 79.14285278320312 * scale, 83.73211669921875 * scale, 78.14285278320312 * scale, 71.73211669921875 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(78.14285278320312 * scale, 71.73211669921875 * scale);
            ctx.bezierCurveTo(82.14285278320312 * scale, 62.73211669921875 * scale, 88.14285278320312 * scale, 69.73211669921875 * scale, 91.14285278320312 * scale, 79.73211669921875 * scale);
            ctx.bezierCurveTo(90.14285278320312 * scale, 86.73211669921875 * scale, 79.14285278320312 * scale, 83.73211669921875 * scale, 78.14285278320312 * scale, 71.73211669921875 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(385.1428527832031 * scale, 405.017858505249 * scale);
            ctx.bezierCurveTo(392.1428527832031 * scale, 397.017858505249 * scale, 406.1428527832031 * scale, 401.017858505249 * scale, 409.1428527832031 * scale, 418.017858505249 * scale);
            ctx.bezierCurveTo(410.1428527832031 * scale, 426.017858505249 * scale, 401.1428527832031 * scale, 425.017858505249 * scale, 388.1428527832031 * scale, 418.017858505249 * scale);
            ctx.bezierCurveTo(381.1428527832031 * scale, 411.017858505249 * scale, 383.1428527832031 * scale, 407.017858505249 * scale, 385.1428527832031 * scale, 405.017858505249 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(385.1428527832031 * scale, 405.017858505249 * scale);
            ctx.bezierCurveTo(392.1428527832031 * scale, 397.017858505249 * scale, 406.1428527832031 * scale, 401.017858505249 * scale, 409.1428527832031 * scale, 418.017858505249 * scale);
            ctx.bezierCurveTo(410.1428527832031 * scale, 426.017858505249 * scale, 401.1428527832031 * scale, 425.017858505249 * scale, 388.1428527832031 * scale, 418.017858505249 * scale);
            ctx.bezierCurveTo(381.1428527832031 * scale, 411.017858505249 * scale, 383.1428527832031 * scale, 407.017858505249 * scale, 385.1428527832031 * scale, 405.017858505249 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(414.1428527832031 * scale, 361.4464282989502 * scale);
            ctx.bezierCurveTo(418.1428527832031 * scale, 352.4464282989502 * scale, 426.1428527832031 * scale, 353.4464282989502 * scale, 437.1428527832031 * scale, 362.4464282989502 * scale);
            ctx.bezierCurveTo(441.1428527832031 * scale, 366.4464282989502 * scale, 439.1428527832031 * scale, 373.4464282989502 * scale, 428.1428527832031 * scale, 372.4464282989502 * scale);
            ctx.bezierCurveTo(416.1428527832031 * scale, 370.4464282989502 * scale, 412.1428527832031 * scale, 367.4464282989502 * scale, 415.1428527832031 * scale, 361.4464282989502 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(414.1428527832031 * scale, 361.4464282989502 * scale);
            ctx.bezierCurveTo(418.1428527832031 * scale, 352.4464282989502 * scale, 426.1428527832031 * scale, 353.4464282989502 * scale, 437.1428527832031 * scale, 362.4464282989502 * scale);
            ctx.bezierCurveTo(441.1428527832031 * scale, 366.4464282989502 * scale, 439.1428527832031 * scale, 373.4464282989502 * scale, 428.1428527832031 * scale, 372.4464282989502 * scale);
            ctx.bezierCurveTo(416.1428527832031 * scale, 370.4464282989502 * scale, 412.1428527832031 * scale, 367.4464282989502 * scale, 415.1428527832031 * scale, 361.4464282989502 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(453.1428527832031 * scale, 356.875 * scale);
            ctx.bezierCurveTo(458.1428527832031 * scale, 363.875 * scale, 447.1428527832031 * scale, 373.875 * scale, 444.1428527832031 * scale, 369.875 * scale);
            ctx.bezierCurveTo(441.1428527832031 * scale, 361.875 * scale, 448.1428527832031 * scale, 352.875 * scale, 453.1428527832031 * scale, 356.875 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(453.1428527832031 * scale, 356.875 * scale);
            ctx.bezierCurveTo(458.1428527832031 * scale, 363.875 * scale, 447.1428527832031 * scale, 373.875 * scale, 444.1428527832031 * scale, 369.875 * scale);
            ctx.bezierCurveTo(441.1428527832031 * scale, 361.875 * scale, 448.1428527832031 * scale, 352.875 * scale, 453.1428527832031 * scale, 356.875 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(40.142852783203125 * scale, 225.1607151031494 * scale);
            ctx.bezierCurveTo(52.142852783203125 * scale, 224.1607151031494 * scale, 44.142852783203125 * scale, 251.1607151031494 * scale, 36.142852783203125 * scale, 248.1607151031494 * scale);
            ctx.bezierCurveTo(25.142852783203125 * scale, 245.1607151031494 * scale, 34.142852783203125 * scale, 225.1607151031494 * scale, 41.142852783203125 * scale, 225.1607151031494 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(40.142852783203125 * scale, 225.1607151031494 * scale);
            ctx.bezierCurveTo(52.142852783203125 * scale, 224.1607151031494 * scale, 44.142852783203125 * scale, 251.1607151031494 * scale, 36.142852783203125 * scale, 248.1607151031494 * scale);
            ctx.bezierCurveTo(25.142852783203125 * scale, 245.1607151031494 * scale, 34.142852783203125 * scale, 225.1607151031494 * scale, 41.142852783203125 * scale, 225.1607151031494 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(114.14285278320312 * scale, 52.4464111328125 * scale);
            ctx.bezierCurveTo(123.14285278320312 * scale, 57.4464111328125 * scale, 111.14285278320312 * scale, 71.4464111328125 * scale, 106.14285278320312 * scale, 65.4464111328125 * scale);
            ctx.bezierCurveTo(101.14285278320312 * scale, 58.4464111328125 * scale, 111.14285278320312 * scale, 51.4464111328125 * scale, 114.14285278320312 * scale, 52.4464111328125 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(114.14285278320312 * scale, 52.4464111328125 * scale);
            ctx.bezierCurveTo(123.14285278320312 * scale, 57.4464111328125 * scale, 111.14285278320312 * scale, 71.4464111328125 * scale, 106.14285278320312 * scale, 65.4464111328125 * scale);
            ctx.bezierCurveTo(101.14285278320312 * scale, 58.4464111328125 * scale, 111.14285278320312 * scale, 51.4464111328125 * scale, 114.14285278320312 * scale, 52.4464111328125 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(35.142852783203125 * scale, 256.3035707473755 * scale);
            ctx.bezierCurveTo(41.142852783203125 * scale, 263.3035707473755 * scale, 32.142852783203125 * scale, 270.3035707473755 * scale, 27.142852783203125 * scale, 270.3035707473755 * scale);
            ctx.bezierCurveTo(20.142852783203125 * scale, 267.3035707473755 * scale, 29.142852783203125 * scale, 252.3035707473755 * scale, 35.142852783203125 * scale, 255.3035707473755 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(35.142852783203125 * scale, 256.3035707473755 * scale);
            ctx.bezierCurveTo(41.142852783203125 * scale, 263.3035707473755 * scale, 32.142852783203125 * scale, 270.3035707473755 * scale, 27.142852783203125 * scale, 270.3035707473755 * scale);
            ctx.bezierCurveTo(20.142852783203125 * scale, 267.3035707473755 * scale, 29.142852783203125 * scale, 252.3035707473755 * scale, 35.142852783203125 * scale, 255.3035707473755 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(48.142852783203125 * scale, 266.4464282989502 * scale);
            ctx.bezierCurveTo(59.142852783203125 * scale, 273.4464282989502 * scale, 41.142852783203125 * scale, 290.4464282989502 * scale, 33.142852783203125 * scale, 285.4464282989502 * scale);
            ctx.bezierCurveTo(25.142852783203125 * scale, 277.4464282989502 * scale, 44.142852783203125 * scale, 261.4464282989502 * scale, 48.142852783203125 * scale, 266.4464282989502 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(48.142852783203125 * scale, 266.4464282989502 * scale);
            ctx.bezierCurveTo(59.142852783203125 * scale, 273.4464282989502 * scale, 41.142852783203125 * scale, 290.4464282989502 * scale, 33.142852783203125 * scale, 285.4464282989502 * scale);
            ctx.bezierCurveTo(25.142852783203125 * scale, 277.4464282989502 * scale, 44.142852783203125 * scale, 261.4464282989502 * scale, 48.142852783203125 * scale, 266.4464282989502 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(138.14285278320312 * scale, 385.5892868041992 * scale);
            ctx.bezierCurveTo(150.14285278320312 * scale, 387.5892868041992 * scale, 140.14285278320312 * scale, 405.5892868041992 * scale, 131.14285278320312 * scale, 402.5892868041992 * scale);
            ctx.bezierCurveTo(125.14285278320312 * scale, 397.5892868041992 * scale, 134.14285278320312 * scale, 385.5892868041992 * scale, 138.14285278320312 * scale, 385.5892868041992 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(138.14285278320312 * scale, 385.5892868041992 * scale);
            ctx.bezierCurveTo(150.14285278320312 * scale, 387.5892868041992 * scale, 140.14285278320312 * scale, 405.5892868041992 * scale, 131.14285278320312 * scale, 402.5892868041992 * scale);
            ctx.bezierCurveTo(125.14285278320312 * scale, 397.5892868041992 * scale, 134.14285278320312 * scale, 385.5892868041992 * scale, 138.14285278320312 * scale, 385.5892868041992 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(218.14285278320312 * scale, 394.16071701049805 * scale);
            ctx.bezierCurveTo(224.14285278320312 * scale, 398.16071701049805 * scale, 222.14285278320312 * scale, 403.16071701049805 * scale, 214.14285278320312 * scale, 407.16071701049805 * scale);
            ctx.bezierCurveTo(204.14285278320312 * scale, 407.16071701049805 * scale, 213.14285278320312 * scale, 392.16071701049805 * scale, 218.14285278320312 * scale, 394.16071701049805 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(218.14285278320312 * scale, 394.16071701049805 * scale);
            ctx.bezierCurveTo(224.14285278320312 * scale, 398.16071701049805 * scale, 222.14285278320312 * scale, 403.16071701049805 * scale, 214.14285278320312 * scale, 407.16071701049805 * scale);
            ctx.bezierCurveTo(204.14285278320312 * scale, 407.16071701049805 * scale, 213.14285278320312 * scale, 392.16071701049805 * scale, 218.14285278320312 * scale, 394.16071701049805 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.translate(50 * scale, 100 * scale);
        } else {
            can.width = 543 * scale;
            can.height = 470 * scale;
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(97.14285278320312 * scale, 113.875 * scale);
            ctx.bezierCurveTo(104.14285278320312 * scale, 106.875 * scale, 113.14285278320312 * scale, 109.875 * scale, 118.14285278320312 * scale, 118.875 * scale);
            ctx.bezierCurveTo(119.14285278320312 * scale, 121.875 * scale, 118.14285278320312 * scale, 129.875 * scale, 103.14285278320312 * scale, 124.875 * scale);
            ctx.bezierCurveTo(94.14285278320312 * scale, 120.875 * scale, 95.14285278320312 * scale, 117.875 * scale, 97.14285278320312 * scale, 113.875 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(97.14285278320312 * scale, 113.875 * scale);
            ctx.bezierCurveTo(104.14285278320312 * scale, 106.875 * scale, 113.14285278320312 * scale, 109.875 * scale, 118.14285278320312 * scale, 118.875 * scale);
            ctx.bezierCurveTo(119.14285278320312 * scale, 121.875 * scale, 118.14285278320312 * scale, 129.875 * scale, 103.14285278320312 * scale, 124.875 * scale);
            ctx.bezierCurveTo(94.14285278320312 * scale, 120.875 * scale, 95.14285278320312 * scale, 117.875 * scale, 97.14285278320312 * scale, 113.875 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(88.14285278320312 * scale, 138.87498474121094 * scale);
            ctx.bezierCurveTo(90.14285278320312 * scale, 128.87498474121094 * scale, 104.14285278320312 * scale, 130.87498474121094 * scale, 107.14285278320312 * scale, 138.87498474121094 * scale);
            ctx.bezierCurveTo(109.14285278320312 * scale, 147.87498474121094 * scale, 89.14285278320312 * scale, 145.87498474121094 * scale, 88.14285278320312 * scale, 138.87498474121094 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(88.14285278320312 * scale, 138.87498474121094 * scale);
            ctx.bezierCurveTo(90.14285278320312 * scale, 128.87498474121094 * scale, 104.14285278320312 * scale, 130.87498474121094 * scale, 107.14285278320312 * scale, 138.87498474121094 * scale);
            ctx.bezierCurveTo(109.14285278320312 * scale, 147.87498474121094 * scale, 89.14285278320312 * scale, 145.87498474121094 * scale, 88.14285278320312 * scale, 138.87498474121094 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(194.14285278320312 * scale, 44.87498474121094 * scale);
            ctx.bezierCurveTo(202.14285278320312 * scale, 49.87498474121094 * scale, 195.14285278320312 * scale, 62.87498474121094 * scale, 187.14285278320312 * scale, 60.87498474121094 * scale);
            ctx.bezierCurveTo(180.14285278320312 * scale, 57.87498474121094 * scale, 190.14285278320312 * scale, 40.87498474121094 * scale, 194.14285278320312 * scale, 44.87498474121094 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(194.14285278320312 * scale, 44.87498474121094 * scale);
            ctx.bezierCurveTo(202.14285278320312 * scale, 49.87498474121094 * scale, 195.14285278320312 * scale, 62.87498474121094 * scale, 187.14285278320312 * scale, 60.87498474121094 * scale);
            ctx.bezierCurveTo(180.14285278320312 * scale, 57.87498474121094 * scale, 190.14285278320312 * scale, 40.87498474121094 * scale, 194.14285278320312 * scale, 44.87498474121094 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(22.142852783203125 * scale, 218.44642639160156 * scale);
            ctx.bezierCurveTo(31.142852783203125 * scale, 205.44642639160156 * scale, 49.142852783203125 * scale, 221.44642639160156 * scale, 49.142852783203125 * scale, 230.44642639160156 * scale);
            ctx.bezierCurveTo(44.142852783203125 * scale, 243.44642639160156 * scale, 14.142852783203125 * scale, 228.44642639160156 * scale, 22.142852783203125 * scale, 218.44642639160156 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(22.142852783203125 * scale, 218.44642639160156 * scale);
            ctx.bezierCurveTo(31.142852783203125 * scale, 205.44642639160156 * scale, 49.142852783203125 * scale, 221.44642639160156 * scale, 49.142852783203125 * scale, 230.44642639160156 * scale);
            ctx.bezierCurveTo(44.142852783203125 * scale, 243.44642639160156 * scale, 14.142852783203125 * scale, 228.44642639160156 * scale, 22.142852783203125 * scale, 218.44642639160156 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(41.142852783203125 * scale, 249.875 * scale);
            ctx.bezierCurveTo(33.142852783203125 * scale, 255.875 * scale, 30.142852783203125 * scale, 265.875 * scale, 40.142852783203125 * scale, 266.875 * scale);
            ctx.bezierCurveTo(49.142852783203125 * scale, 261.875 * scale, 53.142852783203125 * scale, 244.875 * scale, 41.142852783203125 * scale, 249.875 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(41.142852783203125 * scale, 249.875 * scale);
            ctx.bezierCurveTo(33.142852783203125 * scale, 255.875 * scale, 30.142852783203125 * scale, 265.875 * scale, 40.142852783203125 * scale, 266.875 * scale);
            ctx.bezierCurveTo(49.142852783203125 * scale, 261.875 * scale, 53.142852783203125 * scale, 244.875 * scale, 41.142852783203125 * scale, 249.875 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(105.14285278320312 * scale, 369.875 * scale);
            ctx.bezierCurveTo(92.14285278320312 * scale, 361.875 * scale, 77.14285278320312 * scale, 375.875 * scale, 79.14285278320312 * scale, 384.875 * scale);
            ctx.bezierCurveTo(84.14285278320312 * scale, 399.875 * scale, 114.14285278320312 * scale, 375.875 * scale, 104.14285278320312 * scale, 369.875 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(105.14285278320312 * scale, 369.875 * scale);
            ctx.bezierCurveTo(92.14285278320312 * scale, 361.875 * scale, 77.14285278320312 * scale, 375.875 * scale, 79.14285278320312 * scale, 384.875 * scale);
            ctx.bezierCurveTo(84.14285278320312 * scale, 399.875 * scale, 114.14285278320312 * scale, 375.875 * scale, 104.14285278320312 * scale, 369.875 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(233.14285278320312 * scale, 43.4464111328125 * scale);
            ctx.bezierCurveTo(238.14285278320312 * scale, 47.4464111328125 * scale, 222.14285278320312 * scale, 73.4464111328125 * scale, 214.14285278320312 * scale, 58.4464111328125 * scale);
            ctx.bezierCurveTo(211.14285278320312 * scale, 48.4464111328125 * scale, 230.14285278320312 * scale, 35.4464111328125 * scale, 233.14285278320312 * scale, 42.4464111328125 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(233.14285278320312 * scale, 43.4464111328125 * scale);
            ctx.bezierCurveTo(238.14285278320312 * scale, 47.4464111328125 * scale, 222.14285278320312 * scale, 73.4464111328125 * scale, 214.14285278320312 * scale, 58.4464111328125 * scale);
            ctx.bezierCurveTo(211.14285278320312 * scale, 48.4464111328125 * scale, 230.14285278320312 * scale, 35.4464111328125 * scale, 233.14285278320312 * scale, 42.4464111328125 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(371.1428527832031 * scale, 34.73213195800781 * scale);
            ctx.bezierCurveTo(378.1428527832031 * scale, 20.732131958007812 * scale, 395.1428527832031 * scale, 32.73213195800781 * scale, 396.1428527832031 * scale, 42.73213195800781 * scale);
            ctx.bezierCurveTo(399.1428527832031 * scale, 59.73213195800781 * scale, 369.1428527832031 * scale, 43.73213195800781 * scale, 372.1428527832031 * scale, 34.73213195800781 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(371.1428527832031 * scale, 34.73213195800781 * scale);
            ctx.bezierCurveTo(378.1428527832031 * scale, 20.732131958007812 * scale, 395.1428527832031 * scale, 32.73213195800781 * scale, 396.1428527832031 * scale, 42.73213195800781 * scale);
            ctx.bezierCurveTo(399.1428527832031 * scale, 59.73213195800781 * scale, 369.1428527832031 * scale, 43.73213195800781 * scale, 372.1428527832031 * scale, 34.73213195800781 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(117.14285278320312 * scale, 392.5892868041992 * scale);
            ctx.bezierCurveTo(115.14285278320312 * scale, 384.5892868041992 * scale, 109.14285278320312 * scale, 383.5892868041992 * scale, 103.14285278320312 * scale, 384.5892868041992 * scale);
            ctx.bezierCurveTo(95.14285278320312 * scale, 389.5892868041992 * scale, 97.14285278320312 * scale, 393.5892868041992 * scale, 107.14285278320312 * scale, 396.5892868041992 * scale);
            ctx.bezierCurveTo(114.14285278320312 * scale, 396.5892868041992 * scale, 118.14285278320312 * scale, 393.5892868041992 * scale, 116.14285278320312 * scale, 391.5892868041992 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(117.14285278320312 * scale, 392.5892868041992 * scale);
            ctx.bezierCurveTo(115.14285278320312 * scale, 384.5892868041992 * scale, 109.14285278320312 * scale, 383.5892868041992 * scale, 103.14285278320312 * scale, 384.5892868041992 * scale);
            ctx.bezierCurveTo(95.14285278320312 * scale, 389.5892868041992 * scale, 97.14285278320312 * scale, 393.5892868041992 * scale, 107.14285278320312 * scale, 396.5892868041992 * scale);
            ctx.bezierCurveTo(114.14285278320312 * scale, 396.5892868041992 * scale, 118.14285278320312 * scale, 393.5892868041992 * scale, 116.14285278320312 * scale, 391.5892868041992 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(122.14285278320312 * scale, 403.7321472167969 * scale);
            ctx.bezierCurveTo(132.14285278320312 * scale, 399.7321472167969 * scale, 133.14285278320312 * scale, 418.7321472167969 * scale, 129.14285278320312 * scale, 419.7321472167969 * scale);
            ctx.bezierCurveTo(119.14285278320312 * scale, 420.7321472167969 * scale, 118.14285278320312 * scale, 402.7321472167969 * scale, 123.14285278320312 * scale, 403.7321472167969 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(122.14285278320312 * scale, 403.7321472167969 * scale);
            ctx.bezierCurveTo(132.14285278320312 * scale, 399.7321472167969 * scale, 133.14285278320312 * scale, 418.7321472167969 * scale, 129.14285278320312 * scale, 419.7321472167969 * scale);
            ctx.bezierCurveTo(119.14285278320312 * scale, 420.7321472167969 * scale, 118.14285278320312 * scale, 402.7321472167969 * scale, 123.14285278320312 * scale, 403.7321472167969 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(317.1428527832031 * scale, 417.5892868041992 * scale);
            ctx.bezierCurveTo(333.1428527832031 * scale, 421.5892868041992 * scale, 299.1428527832031 * scale, 455.5892868041992 * scale, 294.1428527832031 * scale, 438.5892868041992 * scale);
            ctx.bezierCurveTo(289.1428527832031 * scale, 423.5892868041992 * scale, 307.1428527832031 * scale, 414.5892868041992 * scale, 317.1428527832031 * scale, 417.5892868041992 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(317.1428527832031 * scale, 417.5892868041992 * scale);
            ctx.bezierCurveTo(333.1428527832031 * scale, 421.5892868041992 * scale, 299.1428527832031 * scale, 455.5892868041992 * scale, 294.1428527832031 * scale, 438.5892868041992 * scale);
            ctx.bezierCurveTo(289.1428527832031 * scale, 423.5892868041992 * scale, 307.1428527832031 * scale, 414.5892868041992 * scale, 317.1428527832031 * scale, 417.5892868041992 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(322.1428527832031 * scale, 437.30357360839844 * scale);
            ctx.bezierCurveTo(330.1428527832031 * scale, 431.30357360839844 * scale, 336.1428527832031 * scale, 440.30357360839844 * scale, 336.1428527832031 * scale, 448.30357360839844 * scale);
            ctx.bezierCurveTo(334.1428527832031 * scale, 454.30357360839844 * scale, 316.1428527832031 * scale, 447.30357360839844 * scale, 323.1428527832031 * scale, 437.30357360839844 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(322.1428527832031 * scale, 437.30357360839844 * scale);
            ctx.bezierCurveTo(330.1428527832031 * scale, 431.30357360839844 * scale, 336.1428527832031 * scale, 440.30357360839844 * scale, 336.1428527832031 * scale, 448.30357360839844 * scale);
            ctx.bezierCurveTo(334.1428527832031 * scale, 454.30357360839844 * scale, 316.1428527832031 * scale, 447.30357360839844 * scale, 323.1428527832031 * scale, 437.30357360839844 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(438.1428527832031 * scale, 358.5892868041992 * scale);
            ctx.bezierCurveTo(455.1428527832031 * scale, 351.5892868041992 * scale, 467.1428527832031 * scale, 371.5892868041992 * scale, 455.1428527832031 * scale, 374.5892868041992 * scale);
            ctx.bezierCurveTo(442.1428527832031 * scale, 377.5892868041992 * scale, 429.1428527832031 * scale, 361.5892868041992 * scale, 438.1428527832031 * scale, 358.5892868041992 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(438.1428527832031 * scale, 358.5892868041992 * scale);
            ctx.bezierCurveTo(455.1428527832031 * scale, 351.5892868041992 * scale, 467.1428527832031 * scale, 371.5892868041992 * scale, 455.1428527832031 * scale, 374.5892868041992 * scale);
            ctx.bezierCurveTo(442.1428527832031 * scale, 377.5892868041992 * scale, 429.1428527832031 * scale, 361.5892868041992 * scale, 438.1428527832031 * scale, 358.5892868041992 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(423.1428527832031 * scale, 363.16071701049805 * scale);
            ctx.bezierCurveTo(433.1428527832031 * scale, 362.16071701049805 * scale, 433.1428527832031 * scale, 374.16071701049805 * scale, 421.1428527832031 * scale, 382.16071701049805 * scale);
            ctx.bezierCurveTo(413.1428527832031 * scale, 383.16071701049805 * scale, 413.1428527832031 * scale, 368.16071701049805 * scale, 423.1428527832031 * scale, 363.16071701049805 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(423.1428527832031 * scale, 363.16071701049805 * scale);
            ctx.bezierCurveTo(433.1428527832031 * scale, 362.16071701049805 * scale, 433.1428527832031 * scale, 374.16071701049805 * scale, 421.1428527832031 * scale, 382.16071701049805 * scale);
            ctx.bezierCurveTo(413.1428527832031 * scale, 383.16071701049805 * scale, 413.1428527832031 * scale, 368.16071701049805 * scale, 423.1428527832031 * scale, 363.16071701049805 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(431.1428527832031 * scale, 333.0178565979004 * scale);
            ctx.bezierCurveTo(447.1428527832031 * scale, 330.0178565979004 * scale, 448.1428527832031 * scale, 340.0178565979004 * scale, 447.1428527832031 * scale, 343.0178565979004 * scale);
            ctx.bezierCurveTo(445.1428527832031 * scale, 351.0178565979004 * scale, 415.1428527832031 * scale, 343.0178565979004 * scale, 431.1428527832031 * scale, 333.0178565979004 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(431.1428527832031 * scale, 333.0178565979004 * scale);
            ctx.bezierCurveTo(447.1428527832031 * scale, 330.0178565979004 * scale, 448.1428527832031 * scale, 340.0178565979004 * scale, 447.1428527832031 * scale, 343.0178565979004 * scale);
            ctx.bezierCurveTo(445.1428527832031 * scale, 351.0178565979004 * scale, 415.1428527832031 * scale, 343.0178565979004 * scale, 431.1428527832031 * scale, 333.0178565979004 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(486.1428527832031 * scale, 272.44642639160156 * scale);
            ctx.bezierCurveTo(493.1428527832031 * scale, 260.44642639160156 * scale, 519.1428527832031 * scale, 277.44642639160156 * scale, 511.1428527832031 * scale, 289.44642639160156 * scale);
            ctx.bezierCurveTo(503.1428527832031 * scale, 297.44642639160156 * scale, 483.1428527832031 * scale, 277.44642639160156 * scale, 486.1428527832031 * scale, 273.44642639160156 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(486.1428527832031 * scale, 272.44642639160156 * scale);
            ctx.bezierCurveTo(493.1428527832031 * scale, 260.44642639160156 * scale, 519.1428527832031 * scale, 277.44642639160156 * scale, 511.1428527832031 * scale, 289.44642639160156 * scale);
            ctx.bezierCurveTo(503.1428527832031 * scale, 297.44642639160156 * scale, 483.1428527832031 * scale, 277.44642639160156 * scale, 486.1428527832031 * scale, 273.44642639160156 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(503.1428527832031 * scale, 245.01785278320312 * scale);
            ctx.bezierCurveTo(516.1428527832031 * scale, 247.01785278320312 * scale, 513.1428527832031 * scale, 264.0178527832031 * scale, 509.1428527832031 * scale, 265.0178527832031 * scale);
            ctx.bezierCurveTo(499.1428527832031 * scale, 268.0178527832031 * scale, 494.1428527832031 * scale, 244.01785278320312 * scale, 504.1428527832031 * scale, 245.01785278320312 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(503.1428527832031 * scale, 245.01785278320312 * scale);
            ctx.bezierCurveTo(516.1428527832031 * scale, 247.01785278320312 * scale, 513.1428527832031 * scale, 264.0178527832031 * scale, 509.1428527832031 * scale, 265.0178527832031 * scale);
            ctx.bezierCurveTo(499.1428527832031 * scale, 268.0178527832031 * scale, 494.1428527832031 * scale, 244.01785278320312 * scale, 504.1428527832031 * scale, 245.01785278320312 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(518.1428527832031 * scale, 179.73213958740234 * scale);
            ctx.bezierCurveTo(529.1428527832031 * scale, 181.73213958740234 * scale, 514.1428527832031 * scale, 212.73213958740234 * scale, 505.1428527832031 * scale, 200.73213958740234 * scale);
            ctx.bezierCurveTo(499.1428527832031 * scale, 186.73213958740234 * scale, 515.1428527832031 * scale, 177.73213958740234 * scale, 518.1428527832031 * scale, 179.73213958740234 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(518.1428527832031 * scale, 179.73213958740234 * scale);
            ctx.bezierCurveTo(529.1428527832031 * scale, 181.73213958740234 * scale, 514.1428527832031 * scale, 212.73213958740234 * scale, 505.1428527832031 * scale, 200.73213958740234 * scale);
            ctx.bezierCurveTo(499.1428527832031 * scale, 186.73213958740234 * scale, 515.1428527832031 * scale, 177.73213958740234 * scale, 518.1428527832031 * scale, 179.73213958740234 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(438.1428527832031 * scale, 22.16070556640625 * scale);
            ctx.bezierCurveTo(446.1428527832031 * scale, 27.16070556640625 * scale, 422.1428527832031 * scale, 54.16070556640625 * scale, 414.1428527832031 * scale, 40.16070556640625 * scale);
            ctx.bezierCurveTo(409.1428527832031 * scale, 27.16070556640625 * scale, 430.1428527832031 * scale, 15.16070556640625 * scale, 438.1428527832031 * scale, 22.16070556640625 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(438.1428527832031 * scale, 22.16070556640625 * scale);
            ctx.bezierCurveTo(446.1428527832031 * scale, 27.16070556640625 * scale, 422.1428527832031 * scale, 54.16070556640625 * scale, 414.1428527832031 * scale, 40.16070556640625 * scale);
            ctx.bezierCurveTo(409.1428527832031 * scale, 27.16070556640625 * scale, 430.1428527832031 * scale, 15.16070556640625 * scale, 438.1428527832031 * scale, 22.16070556640625 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.globalAlpha = 0.5;
            ctx.translate(3 * scale, 3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(406.1428527832031 * scale, 11.16070556640625 * scale);
            ctx.bezierCurveTo(418.1428527832031 * scale, 14.16070556640625 * scale, 411.1428527832031 * scale, 27.16070556640625 * scale, 403.1428527832031 * scale, 30.16070556640625 * scale);
            ctx.bezierCurveTo(395.1428527832031 * scale, 31.16070556640625 * scale, 391.1428527832031 * scale, 16.16070556640625 * scale, 406.1428527832031 * scale, 10.16070556640625 * scale);
            ctx.closePath();
            fill_path(ctx, color[0]);
            ctx.globalAlpha = 1;
            ctx.translate(-3 * scale, -3 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(406.1428527832031 * scale, 11.16070556640625 * scale);
            ctx.bezierCurveTo(418.1428527832031 * scale, 14.16070556640625 * scale, 411.1428527832031 * scale, 27.16070556640625 * scale, 403.1428527832031 * scale, 30.16070556640625 * scale);
            ctx.bezierCurveTo(395.1428527832031 * scale, 31.16070556640625 * scale, 391.1428527832031 * scale, 16.16070556640625 * scale, 406.1428527832031 * scale, 10.16070556640625 * scale);
            ctx.closePath();
            fill_path(ctx, color[1]);
            ctx.translate(100 * scale, 100 * scale);
        }
        ctx.globalAlpha = 1;
        ctx.translate(-3 * scale, -3 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(271 * scale, 111 * scale);
        ctx.bezierCurveTo(259 * scale, 110 * scale, 258 * scale, 99 * scale, 265 * scale, 95 * scale);
        ctx.bezierCurveTo(276 * scale, 91 * scale, 279 * scale, 100 * scale, 275 * scale, 107 * scale);
        ctx.bezierCurveTo(274 * scale, 109 * scale, 273 * scale, 110 * scale, 271 * scale, 111 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[3], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(169 * scale, 121 * scale);
        ctx.bezierCurveTo(159 * scale, 129 * scale, 149 * scale, 126 * scale, 144 * scale, 114 * scale);
        ctx.bezierCurveTo(142 * scale, 102 * scale, 149 * scale, 98 * scale, 163 * scale, 96 * scale);
        ctx.bezierCurveTo(175 * scale, 98 * scale, 176 * scale, 115 * scale, 169 * scale, 121 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[3], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(213 * scale, 150 * scale);
        ctx.bezierCurveTo(206 * scale, 134 * scale, 216 * scale, 120 * scale, 235 * scale, 129 * scale);
        ctx.bezierCurveTo(247 * scale, 139 * scale, 242 * scale, 146 * scale, 237 * scale, 154 * scale);
        ctx.bezierCurveTo(226 * scale, 162 * scale, 218 * scale, 159 * scale, 213 * scale, 150 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[3], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(236 * scale, 169 * scale);
        ctx.bezierCurveTo(247 * scale, 166 * scale, 250 * scale, 172 * scale, 247 * scale, 181 * scale);
        ctx.bezierCurveTo(242 * scale, 186 * scale, 241 * scale, 181 * scale, 242 * scale, 182 * scale);
        ctx.bezierCurveTo(241 * scale, 178 * scale, 240 * scale, 179 * scale, 239 * scale, 181 * scale);
        ctx.bezierCurveTo(240 * scale, 184 * scale, 237 * scale, 186 * scale, 233 * scale, 181 * scale);
        ctx.bezierCurveTo(230 * scale, 173 * scale, 233 * scale, 169 * scale, 236 * scale, 169 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[3], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(163 * scale, 170 * scale);
        ctx.bezierCurveTo(176 * scale, 165 * scale, 180 * scale, 172 * scale, 181 * scale, 181 * scale);
        ctx.bezierCurveTo(182 * scale, 189 * scale, 178 * scale, 192 * scale, 174 * scale, 188 * scale);
        ctx.bezierCurveTo(172 * scale, 183 * scale, 170 * scale, 184 * scale, 170 * scale, 188 * scale);
        ctx.bezierCurveTo(176 * scale, 194 * scale, 165 * scale, 196 * scale, 162 * scale, 190 * scale);
        ctx.bezierCurveTo(152 * scale, 181 * scale, 157 * scale, 173 * scale, 163 * scale, 170 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[3], 2 * scale);
        ctx.scale(0.05, 0.05);
        ctx.translate(5000 * scale, 1900 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(273 * scale, 46.546875 * scale);
        ctx.bezierCurveTo(353 * scale, 131.546875 * scale, 303 * scale, 213.546875 * scale, 272 * scale, 236.546875 * scale);
        ctx.bezierCurveTo(203 * scale, 179.546875 * scale, 236 * scale, 84.546875 * scale, 273 * scale, 47.546875 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(467 * scale, 257.546875 * scale);
        ctx.bezierCurveTo(369 * scale, 194.546875 * scale, 325 * scale, 236.546875 * scale, 291 * scale, 271.546875 * scale);
        ctx.bezierCurveTo(371 * scale, 335.546875 * scale, 427 * scale, 313.546875 * scale, 467 * scale, 258.546875 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(269 * scale, 275.546875 * scale);
        ctx.bezierCurveTo(343 * scale, 356.546875 * scale, 355 * scale, 407.546875 * scale, 323 * scale, 472.546875 * scale);
        ctx.bezierCurveTo(224 * scale, 451.546875 * scale, 238 * scale, 326.546875 * scale, 270 * scale, 275.546875 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(260 * scale, 267.546875 * scale);
        ctx.bezierCurveTo(134 * scale, 221.546875 * scale, 89 * scale, 256.546875 * scale, 60 * scale, 295.546875 * scale);
        ctx.bezierCurveTo(116 * scale, 357.546875 * scale, 242 * scale, 344.546875 * scale, 260 * scale, 267.546875 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(124 * scale, 123.546875 * scale);
        ctx.bezierCurveTo(255 * scale, 140.546875 * scale, 265 * scale, 234.546875 * scale, 267 * scale, 269.546875 * scale);
        ctx.bezierCurveTo(159 * scale, 283.546875 * scale, 127 * scale, 192.546875 * scale, 124 * scale, 124.546875 * scale);
        ctx.closePath();
        fill_path(ctx, color[6], color[7], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(267 * scale, 268.546875 * scale);
        ctx.bezierCurveTo(265 * scale, 170.546875 * scale, 364 * scale, 127.546875 * scale, 407 * scale, 132.546875 * scale);
        ctx.bezierCurveTo(427 * scale, 204.546875 * scale, 341 * scale, 277.546875 * scale, 268 * scale, 271.546875 * scale);
        ctx.closePath();
        fill_path(ctx, color[6], color[7], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(270 * scale, 269.546875 * scale);
        ctx.bezierCurveTo(370 * scale, 251.546875 * scale, 410 * scale, 328.546875 * scale, 420 * scale, 399.546875 * scale);
        ctx.bezierCurveTo(292 * scale, 412.546875 * scale, 275 * scale, 313.546875 * scale, 269 * scale, 272.546875 * scale);
        ctx.closePath();
        fill_path(ctx, color[6], color[7], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(273 * scale, 266.546875 * scale);
        ctx.bezierCurveTo(291 * scale, 370.546875 * scale, 235 * scale, 428.546875 * scale, 173 * scale, 451.546875 * scale);
        ctx.bezierCurveTo(124 * scale, 365.546875 * scale, 217 * scale, 274.546875 * scale, 272 * scale, 265.546875 * scale);
        ctx.closePath();
        fill_path(ctx, color[6], color[7], 2 * scale);
        circle(ctx, 266 * scale, 251.546875 * scale, 19.1049731745428 * scale);
        fill_path(ctx, color[8], color[9], 2 * scale);
        circle(ctx, 292 * scale, 274.546875 * scale, 15.556349186104045 * scale);
        fill_path(ctx, color[8], color[9], 2 * scale);
        circle(ctx, 258 * scale, 291.546875 * scale, 17.029386365926403 * scale);
        fill_path(ctx, color[8], color[9], 2 * scale);
        ctx.scale(1.4, 1.4);
        ctx.translate(-700 * scale, 280 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(273 * scale, 46.546875 * scale);
        ctx.bezierCurveTo(353 * scale, 131.546875 * scale, 303 * scale, 213.546875 * scale, 272 * scale, 236.546875 * scale);
        ctx.bezierCurveTo(203 * scale, 179.546875 * scale, 236 * scale, 84.546875 * scale, 273 * scale, 47.546875 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(467 * scale, 257.546875 * scale);
        ctx.bezierCurveTo(369 * scale, 194.546875 * scale, 325 * scale, 236.546875 * scale, 291 * scale, 271.546875 * scale);
        ctx.bezierCurveTo(371 * scale, 335.546875 * scale, 427 * scale, 313.546875 * scale, 467 * scale, 258.546875 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(269 * scale, 275.546875 * scale);
        ctx.bezierCurveTo(343 * scale, 356.546875 * scale, 355 * scale, 407.546875 * scale, 323 * scale, 472.546875 * scale);
        ctx.bezierCurveTo(224 * scale, 451.546875 * scale, 238 * scale, 326.546875 * scale, 270 * scale, 275.546875 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(260 * scale, 267.546875 * scale);
        ctx.bezierCurveTo(134 * scale, 221.546875 * scale, 89 * scale, 256.546875 * scale, 60 * scale, 295.546875 * scale);
        ctx.bezierCurveTo(116 * scale, 357.546875 * scale, 242 * scale, 344.546875 * scale, 260 * scale, 267.546875 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(124 * scale, 123.546875 * scale);
        ctx.bezierCurveTo(255 * scale, 140.546875 * scale, 265 * scale, 234.546875 * scale, 267 * scale, 269.546875 * scale);
        ctx.bezierCurveTo(159 * scale, 283.546875 * scale, 127 * scale, 192.546875 * scale, 124 * scale, 124.546875 * scale);
        ctx.closePath();
        fill_path(ctx, color[6], color[7], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(267 * scale, 268.546875 * scale);
        ctx.bezierCurveTo(265 * scale, 170.546875 * scale, 364 * scale, 127.546875 * scale, 407 * scale, 132.546875 * scale);
        ctx.bezierCurveTo(427 * scale, 204.546875 * scale, 341 * scale, 277.546875 * scale, 268 * scale, 271.546875 * scale);
        ctx.closePath();
        fill_path(ctx, color[6], color[7], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(270 * scale, 269.546875 * scale);
        ctx.bezierCurveTo(370 * scale, 251.546875 * scale, 410 * scale, 328.546875 * scale, 420 * scale, 399.546875 * scale);
        ctx.bezierCurveTo(292 * scale, 412.546875 * scale, 275 * scale, 313.546875 * scale, 269 * scale, 272.546875 * scale);
        ctx.closePath();
        fill_path(ctx, color[6], color[7], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(273 * scale, 266.546875 * scale);
        ctx.bezierCurveTo(291 * scale, 370.546875 * scale, 235 * scale, 428.546875 * scale, 173 * scale, 451.546875 * scale);
        ctx.bezierCurveTo(124 * scale, 365.546875 * scale, 217 * scale, 274.546875 * scale, 272 * scale, 265.546875 * scale);
        ctx.closePath();
        fill_path(ctx, color[6], color[7], 2 * scale);
        circle(ctx, 266 * scale, 251.546875 * scale, 19.1049731745428 * scale);
        fill_path(ctx, color[8], color[9], 2 * scale);
        circle(ctx, 292 * scale, 274.546875 * scale, 15.556349186104045 * scale);
        fill_path(ctx, color[8], color[9], 2 * scale);
        circle(ctx, 258 * scale, 291.546875 * scale, 17.029386365926403 * scale);
        fill_path(ctx, color[8], color[9], 2 * scale);
        ctx.translate(-900 * scale, -200 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(273 * scale, 46.546875 * scale);
        ctx.bezierCurveTo(353 * scale, 131.546875 * scale, 303 * scale, 213.546875 * scale, 272 * scale, 236.546875 * scale);
        ctx.bezierCurveTo(203 * scale, 179.546875 * scale, 236 * scale, 84.546875 * scale, 273 * scale, 47.546875 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(467 * scale, 257.546875 * scale);
        ctx.bezierCurveTo(369 * scale, 194.546875 * scale, 325 * scale, 236.546875 * scale, 291 * scale, 271.546875 * scale);
        ctx.bezierCurveTo(371 * scale, 335.546875 * scale, 427 * scale, 313.546875 * scale, 467 * scale, 258.546875 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(269 * scale, 275.546875 * scale);
        ctx.bezierCurveTo(343 * scale, 356.546875 * scale, 355 * scale, 407.546875 * scale, 323 * scale, 472.546875 * scale);
        ctx.bezierCurveTo(224 * scale, 451.546875 * scale, 238 * scale, 326.546875 * scale, 270 * scale, 275.546875 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(260 * scale, 267.546875 * scale);
        ctx.bezierCurveTo(134 * scale, 221.546875 * scale, 89 * scale, 256.546875 * scale, 60 * scale, 295.546875 * scale);
        ctx.bezierCurveTo(116 * scale, 357.546875 * scale, 242 * scale, 344.546875 * scale, 260 * scale, 267.546875 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(124 * scale, 123.546875 * scale);
        ctx.bezierCurveTo(255 * scale, 140.546875 * scale, 265 * scale, 234.546875 * scale, 267 * scale, 269.546875 * scale);
        ctx.bezierCurveTo(159 * scale, 283.546875 * scale, 127 * scale, 192.546875 * scale, 124 * scale, 124.546875 * scale);
        ctx.closePath();
        fill_path(ctx, color[6], color[7], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(267 * scale, 268.546875 * scale);
        ctx.bezierCurveTo(265 * scale, 170.546875 * scale, 364 * scale, 127.546875 * scale, 407 * scale, 132.546875 * scale);
        ctx.bezierCurveTo(427 * scale, 204.546875 * scale, 341 * scale, 277.546875 * scale, 268 * scale, 271.546875 * scale);
        ctx.closePath();
        fill_path(ctx, color[6], color[7], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(270 * scale, 269.546875 * scale);
        ctx.bezierCurveTo(370 * scale, 251.546875 * scale, 410 * scale, 328.546875 * scale, 420 * scale, 399.546875 * scale);
        ctx.bezierCurveTo(292 * scale, 412.546875 * scale, 275 * scale, 313.546875 * scale, 269 * scale, 272.546875 * scale);
        ctx.closePath();
        fill_path(ctx, color[6], color[7], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(273 * scale, 266.546875 * scale);
        ctx.bezierCurveTo(291 * scale, 370.546875 * scale, 235 * scale, 428.546875 * scale, 173 * scale, 451.546875 * scale);
        ctx.bezierCurveTo(124 * scale, 365.546875 * scale, 217 * scale, 274.546875 * scale, 272 * scale, 265.546875 * scale);
        ctx.closePath();
        fill_path(ctx, color[6], color[7], 2 * scale);
        circle(ctx, 266 * scale, 251.546875 * scale, 19.1049731745428 * scale);
        fill_path(ctx, color[8], color[9], 2 * scale);
        circle(ctx, 292 * scale, 274.546875 * scale, 15.556349186104045 * scale);
        fill_path(ctx, color[8], color[9], 2 * scale);
        circle(ctx, 258 * scale, 291.546875 * scale, 17.029386365926403 * scale);
        fill_path(ctx, color[8], color[9], 2 * scale);
        return can;
    };

    function create_kraken(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 376 * scale;
        can.height = 371 * scale;
        ctx.globalAlpha = 0.5;
        ctx.translate(5 * scale, 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(191.633544921875 * scale, 123.98580932617188 * scale);
        ctx.bezierCurveTo(215.633544921875 * scale, 85.98580932617188 * scale, 187.633544921875 * scale, 71.98580932617188 * scale, 202.633544921875 * scale, 19.985809326171875 * scale);
        ctx.bezierCurveTo(231.633544921875 * scale, 68.98580932617188 * scale, 253.633544921875 * scale, 71.98580932617188 * scale, 256.633544921875 * scale, 93.98580932617188 * scale);
        ctx.bezierCurveTo(306.633544921875 * scale, 64.98580932617188 * scale, 319.633544921875 * scale, 61.985809326171875 * scale, 350.633544921875 * scale, 58.985809326171875 * scale);
        ctx.bezierCurveTo(280.633544921875 * scale, 86.98580932617188 * scale, 281.633544921875 * scale, 106.98580932617188 * scale, 268.633544921875 * scale, 130.98580932617188 * scale);
        ctx.bezierCurveTo(295.633544921875 * scale, 158.98580932617188 * scale, 328.633544921875 * scale, 155.98580932617188 * scale, 353.633544921875 * scale, 90.98580932617188 * scale);
        ctx.bezierCurveTo(371.633544921875 * scale, 158.98580932617188 * scale, 337.633544921875 * scale, 210.98580932617188 * scale, 286.633544921875 * scale, 209.98580932617188 * scale);
        ctx.bezierCurveTo(323.633544921875 * scale, 230.98580932617188 * scale, 317.633544921875 * scale, 274.9858093261719 * scale, 356.633544921875 * scale, 305.9858093261719 * scale);
        ctx.bezierCurveTo(288.633544921875 * scale, 297.9858093261719 * scale, 288.633544921875 * scale, 265.9858093261719 * scale, 275.633544921875 * scale, 266.9858093261719 * scale);
        ctx.bezierCurveTo(280.633544921875 * scale, 294.9858093261719 * scale, 315.633544921875 * scale, 306.9858093261719 * scale, 336.633544921875 * scale, 316.9858093261719 * scale);
        ctx.bezierCurveTo(295.633544921875 * scale, 318.9858093261719 * scale, 264.633544921875 * scale, 302.9858093261719 * scale, 254.633544921875 * scale, 289.9858093261719 * scale);
        ctx.bezierCurveTo(252.633544921875 * scale, 301.9858093261719 * scale, 224.633544921875 * scale, 315.9858093261719 * scale, 201.633544921875 * scale, 356.9858093261719 * scale);
        ctx.bezierCurveTo(195.633544921875 * scale, 313.9858093261719 * scale, 195.633544921875 * scale, 308.9858093261719 * scale, 196.633544921875 * scale, 307.9858093261719 * scale);
        ctx.bezierCurveTo(197.633544921875 * scale, 289.9858093261719 * scale, 207.633544921875 * scale, 283.9858093261719 * scale, 195.633544921875 * scale, 258.9858093261719 * scale);
        ctx.bezierCurveTo(182.633544921875 * scale, 282.9858093261719 * scale, 190.633544921875 * scale, 287.9858093261719 * scale, 193.633544921875 * scale, 297.9858093261719 * scale);
        ctx.bezierCurveTo(195.633544921875 * scale, 306.9858093261719 * scale, 191.633544921875 * scale, 334.9858093261719 * scale, 187.633544921875 * scale, 354.9858093261719 * scale);
        ctx.bezierCurveTo(165.633544921875 * scale, 320.9858093261719 * scale, 138.633544921875 * scale, 307.9858093261719 * scale, 135.633544921875 * scale, 288.9858093261719 * scale);
        ctx.bezierCurveTo(110.633544921875 * scale, 318.9858093261719 * scale, 68.633544921875 * scale, 323.9858093261719 * scale, 49.633544921875 * scale, 320.9858093261719 * scale);
        ctx.bezierCurveTo(88.633544921875 * scale, 308.9858093261719 * scale, 108.633544921875 * scale, 284.9858093261719 * scale, 118.633544921875 * scale, 258.9858093261719 * scale);
        ctx.bezierCurveTo(86.633544921875 * scale, 264.9858093261719 * scale, 75.633544921875 * scale, 310.9858093261719 * scale, 19.633544921875 * scale, 304.9858093261719 * scale);
        ctx.bezierCurveTo(54.633544921875 * scale, 276.9858093261719 * scale, 59.633544921875 * scale, 214.98580932617188 * scale, 105.633544921875 * scale, 205.98580932617188 * scale);
        ctx.bezierCurveTo(14.633544921875 * scale, 201.98580932617188 * scale, 24.633544921875 * scale, 141.98580932617188 * scale, 25.633544921875 * scale, 82.98580932617188 * scale);
        ctx.bezierCurveTo(49.633544921875 * scale, 168.98580932617188 * scale, 87.633544921875 * scale, 141.98580932617188 * scale, 112.633544921875 * scale, 123.98580932617188 * scale);
        ctx.bezierCurveTo(95.633544921875 * scale, 75.98580932617188 * scale, 70.633544921875 * scale, 68.98580932617188 * scale, 35.633544921875 * scale, 50.985809326171875 * scale);
        ctx.bezierCurveTo(70.633544921875 * scale, 53.985809326171875 * scale, 102.633544921875 * scale, 65.98580932617188 * scale, 125.633544921875 * scale, 84.98580932617188 * scale);
        ctx.bezierCurveTo(133.633544921875 * scale, 69.98580932617188 * scale, 166.633544921875 * scale, 42.985809326171875 * scale, 176.633544921875 * scale, 21.985809326171875 * scale);
        ctx.bezierCurveTo(185.633544921875 * scale, 49.985809326171875 * scale, 168.633544921875 * scale, 95.98580932617188 * scale, 191.633544921875 * scale, 121.98580932617188 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(-4 * scale, -5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(191.633544921875 * scale, 123.98580932617188 * scale);
        ctx.bezierCurveTo(215.633544921875 * scale, 85.98580932617188 * scale, 187.633544921875 * scale, 71.98580932617188 * scale, 202.633544921875 * scale, 19.985809326171875 * scale);
        ctx.bezierCurveTo(231.633544921875 * scale, 68.98580932617188 * scale, 253.633544921875 * scale, 71.98580932617188 * scale, 256.633544921875 * scale, 93.98580932617188 * scale);
        ctx.bezierCurveTo(306.633544921875 * scale, 64.98580932617188 * scale, 319.633544921875 * scale, 61.985809326171875 * scale, 350.633544921875 * scale, 58.985809326171875 * scale);
        ctx.bezierCurveTo(280.633544921875 * scale, 86.98580932617188 * scale, 281.633544921875 * scale, 106.98580932617188 * scale, 268.633544921875 * scale, 130.98580932617188 * scale);
        ctx.bezierCurveTo(295.633544921875 * scale, 158.98580932617188 * scale, 328.633544921875 * scale, 155.98580932617188 * scale, 353.633544921875 * scale, 90.98580932617188 * scale);
        ctx.bezierCurveTo(371.633544921875 * scale, 158.98580932617188 * scale, 337.633544921875 * scale, 210.98580932617188 * scale, 286.633544921875 * scale, 209.98580932617188 * scale);
        ctx.bezierCurveTo(323.633544921875 * scale, 230.98580932617188 * scale, 317.633544921875 * scale, 274.9858093261719 * scale, 356.633544921875 * scale, 305.9858093261719 * scale);
        ctx.bezierCurveTo(288.633544921875 * scale, 297.9858093261719 * scale, 288.633544921875 * scale, 265.9858093261719 * scale, 275.633544921875 * scale, 266.9858093261719 * scale);
        ctx.bezierCurveTo(280.633544921875 * scale, 294.9858093261719 * scale, 315.633544921875 * scale, 306.9858093261719 * scale, 336.633544921875 * scale, 316.9858093261719 * scale);
        ctx.bezierCurveTo(295.633544921875 * scale, 318.9858093261719 * scale, 264.633544921875 * scale, 302.9858093261719 * scale, 254.633544921875 * scale, 289.9858093261719 * scale);
        ctx.bezierCurveTo(252.633544921875 * scale, 301.9858093261719 * scale, 224.633544921875 * scale, 315.9858093261719 * scale, 201.633544921875 * scale, 356.9858093261719 * scale);
        ctx.bezierCurveTo(195.633544921875 * scale, 313.9858093261719 * scale, 195.633544921875 * scale, 308.9858093261719 * scale, 196.633544921875 * scale, 307.9858093261719 * scale);
        ctx.bezierCurveTo(197.633544921875 * scale, 289.9858093261719 * scale, 207.633544921875 * scale, 283.9858093261719 * scale, 195.633544921875 * scale, 258.9858093261719 * scale);
        ctx.bezierCurveTo(182.633544921875 * scale, 282.9858093261719 * scale, 190.633544921875 * scale, 287.9858093261719 * scale, 193.633544921875 * scale, 297.9858093261719 * scale);
        ctx.bezierCurveTo(195.633544921875 * scale, 306.9858093261719 * scale, 191.633544921875 * scale, 334.9858093261719 * scale, 187.633544921875 * scale, 354.9858093261719 * scale);
        ctx.bezierCurveTo(165.633544921875 * scale, 320.9858093261719 * scale, 138.633544921875 * scale, 307.9858093261719 * scale, 135.633544921875 * scale, 288.9858093261719 * scale);
        ctx.bezierCurveTo(110.633544921875 * scale, 318.9858093261719 * scale, 68.633544921875 * scale, 323.9858093261719 * scale, 49.633544921875 * scale, 320.9858093261719 * scale);
        ctx.bezierCurveTo(88.633544921875 * scale, 308.9858093261719 * scale, 108.633544921875 * scale, 284.9858093261719 * scale, 118.633544921875 * scale, 258.9858093261719 * scale);
        ctx.bezierCurveTo(86.633544921875 * scale, 264.9858093261719 * scale, 75.633544921875 * scale, 310.9858093261719 * scale, 19.633544921875 * scale, 304.9858093261719 * scale);
        ctx.bezierCurveTo(54.633544921875 * scale, 276.9858093261719 * scale, 59.633544921875 * scale, 214.98580932617188 * scale, 105.633544921875 * scale, 205.98580932617188 * scale);
        ctx.bezierCurveTo(14.633544921875 * scale, 201.98580932617188 * scale, 24.633544921875 * scale, 141.98580932617188 * scale, 25.633544921875 * scale, 82.98580932617188 * scale);
        ctx.bezierCurveTo(49.633544921875 * scale, 168.98580932617188 * scale, 87.633544921875 * scale, 141.98580932617188 * scale, 112.633544921875 * scale, 123.98580932617188 * scale);
        ctx.bezierCurveTo(95.633544921875 * scale, 75.98580932617188 * scale, 70.633544921875 * scale, 68.98580932617188 * scale, 35.633544921875 * scale, 50.985809326171875 * scale);
        ctx.bezierCurveTo(70.633544921875 * scale, 53.985809326171875 * scale, 102.633544921875 * scale, 65.98580932617188 * scale, 125.633544921875 * scale, 84.98580932617188 * scale);
        ctx.bezierCurveTo(133.633544921875 * scale, 69.98580932617188 * scale, 166.633544921875 * scale, 42.985809326171875 * scale, 176.633544921875 * scale, 21.985809326171875 * scale);
        ctx.bezierCurveTo(185.633544921875 * scale, 49.985809326171875 * scale, 168.633544921875 * scale, 95.98580932617188 * scale, 191.633544921875 * scale, 121.98580932617188 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[1], 12 * scale);
        ctx.translate(-1 * scale, 0 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(270.633544921875 * scale, 88.98580932617188 * scale);
        ctx.bezierCurveTo(296.633544921875 * scale, 65.98580932617188 * scale, 318.633544921875 * scale, 62.985809326171875 * scale, 348.633544921875 * scale, 57.985809326171875 * scale);
        ctx.bezierCurveTo(309.633544921875 * scale, 76.98580932617188 * scale, 291.633544921875 * scale, 88.98580932617188 * scale, 280.633544921875 * scale, 99.98580932617188 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(275.633544921875 * scale, 281.9858093261719 * scale);
        ctx.bezierCurveTo(303.633544921875 * scale, 308.9858093261719 * scale, 321.633544921875 * scale, 308.9858093261719 * scale, 335.633544921875 * scale, 315.9858093261719 * scale);
        ctx.bezierCurveTo(305.633544921875 * scale, 320.9858093261719 * scale, 278.633544921875 * scale, 307.9858093261719 * scale, 264.633544921875 * scale, 293.9858093261719 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(124.633544921875 * scale, 291.9858093261719 * scale);
        ctx.bezierCurveTo(106.633544921875 * scale, 316.9858093261719 * scale, 72.633544921875 * scale, 325.9858093261719 * scale, 53.633544921875 * scale, 319.9858093261719 * scale);
        ctx.bezierCurveTo(83.633544921875 * scale, 308.9858093261719 * scale, 97.633544921875 * scale, 298.9858093261719 * scale, 112.633544921875 * scale, 284.9858093261719 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(113.633544921875 * scale, 80.98580932617188 * scale);
        ctx.bezierCurveTo(91.633544921875 * scale, 54.985809326171875 * scale, 72.633544921875 * scale, 56.985809326171875 * scale, 36.633544921875 * scale, 49.985809326171875 * scale);
        ctx.bezierCurveTo(87.633544921875 * scale, 72.98580932617188 * scale, 95.633544921875 * scale, 82.98580932617188 * scale, 106.633544921875 * scale, 96.98580932617188 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(202.633544921875 * scale, 20.985809326171875 * scale);
        ctx.bezierCurveTo(219.633544921875 * scale, 49.985809326171875 * scale, 259.633544921875 * scale, 80.98580932617188 * scale, 255.633544921875 * scale, 92.98580932617188 * scale);
        ctx.bezierCurveTo(268.633544921875 * scale, 86.98580932617188 * scale, 265.633544921875 * scale, 87.98580932617188 * scale, 275.633544921875 * scale, 82.98580932617188 * scale);
        ctx.bezierCurveTo(283.633544921875 * scale, 87.98580932617188 * scale, 283.633544921875 * scale, 87.98580932617188 * scale, 291.633544921875 * scale, 92.98580932617188 * scale);
        ctx.bezierCurveTo(269.633544921875 * scale, 116.98580932617188 * scale, 270.633544921875 * scale, 124.98580932617188 * scale, 267.633544921875 * scale, 130.98580932617188 * scale);
        ctx.bezierCurveTo(307.633544921875 * scale, 168.98580932617188 * scale, 339.633544921875 * scale, 132.98580932617188 * scale, 352.633544921875 * scale, 93.98580932617188 * scale);
        ctx.bezierCurveTo(366.633544921875 * scale, 145.98580932617188 * scale, 345.633544921875 * scale, 207.98580932617188 * scale, 286.633544921875 * scale, 208.98580932617188 * scale);
        ctx.bezierCurveTo(315.633544921875 * scale, 223.98580932617188 * scale, 327.633544921875 * scale, 287.9858093261719 * scale, 355.633544921875 * scale, 305.9858093261719 * scale);
        ctx.bezierCurveTo(293.633544921875 * scale, 298.9858093261719 * scale, 293.633544921875 * scale, 275.9858093261719 * scale, 276.633544921875 * scale, 266.9858093261719 * scale);
        ctx.bezierCurveTo(274.633544921875 * scale, 282.9858093261719 * scale, 287.633544921875 * scale, 288.9858093261719 * scale, 295.633544921875 * scale, 296.9858093261719 * scale);
        ctx.bezierCurveTo(287.133544921875 * scale, 302.4858093261719 * scale, 287.133544921875 * scale, 302.4858093261719 * scale, 278.633544921875 * scale, 307.9858093261719 * scale);
        ctx.bezierCurveTo(261.633544921875 * scale, 297.9858093261719 * scale, 258.633544921875 * scale, 293.9858093261719 * scale, 255.633544921875 * scale, 290.9858093261719 * scale);
        ctx.bezierCurveTo(249.633544921875 * scale, 301.9858093261719 * scale, 225.633544921875 * scale, 320.9858093261719 * scale, 202.633544921875 * scale, 354.9858093261719 * scale);
        ctx.bezierCurveTo(195.633544921875 * scale, 318.9858093261719 * scale, 196.633544921875 * scale, 306.9858093261719 * scale, 198.633544921875 * scale, 300.9858093261719 * scale);
        ctx.bezierCurveTo(209.633544921875 * scale, 268.9858093261719 * scale, 199.633544921875 * scale, 266.9858093261719 * scale, 195.633544921875 * scale, 256.9858093261719 * scale);
        ctx.bezierCurveTo(183.633544921875 * scale, 274.9858093261719 * scale, 182.633544921875 * scale, 281.9858093261719 * scale, 192.633544921875 * scale, 305.9858093261719 * scale);
        ctx.bezierCurveTo(194.633544921875 * scale, 317.9858093261719 * scale, 191.633544921875 * scale, 336.9858093261719 * scale, 186.633544921875 * scale, 351.9858093261719 * scale);
        ctx.bezierCurveTo(166.633544921875 * scale, 318.9858093261719 * scale, 141.633544921875 * scale, 303.9858093261719 * scale, 136.633544921875 * scale, 286.9858093261719 * scale);
        ctx.bezierCurveTo(122.633544921875 * scale, 303.9858093261719 * scale, 115.633544921875 * scale, 305.9858093261719 * scale, 109.633544921875 * scale, 306.9858093261719 * scale);
        ctx.bezierCurveTo(101.133544921875 * scale, 301.9858093261719 * scale, 94.633544921875 * scale, 297.9858093261719 * scale, 92.633544921875 * scale, 296.9858093261719 * scale);
        ctx.bezierCurveTo(116.633544921875 * scale, 277.9858093261719 * scale, 116.633544921875 * scale, 266.9858093261719 * scale, 119.633544921875 * scale, 257.9858093261719 * scale);
        ctx.bezierCurveTo(107.633544921875 * scale, 257.9858093261719 * scale, 65.633544921875 * scale, 308.9858093261719 * scale, 24.633544921875 * scale, 303.9858093261719 * scale);
        ctx.bezierCurveTo(51.633544921875 * scale, 275.9858093261719 * scale, 64.633544921875 * scale, 220.98580932617188 * scale, 108.633544921875 * scale, 205.98580932617188 * scale);
        ctx.bezierCurveTo(14.633544921875 * scale, 198.98580932617188 * scale, 26.633544921875 * scale, 142.98580932617188 * scale, 25.633544921875 * scale, 86.98580932617188 * scale);
        ctx.bezierCurveTo(41.633544921875 * scale, 155.98580932617188 * scale, 81.633544921875 * scale, 148.98580932617188 * scale, 113.633544921875 * scale, 124.98580932617188 * scale);
        ctx.bezierCurveTo(102.633544921875 * scale, 93.98580932617188 * scale, 95.633544921875 * scale, 88.98580932617188 * scale, 89.633544921875 * scale, 81.98580932617188 * scale);
        ctx.bezierCurveTo(97.633544921875 * scale, 76.48580932617188 * scale, 97.633544921875 * scale, 76.48580932617188 * scale, 105.633544921875 * scale, 70.98580932617188 * scale);
        ctx.bezierCurveTo(120.633544921875 * scale, 78.98580932617188 * scale, 121.633544921875 * scale, 81.98580932617188 * scale, 124.633544921875 * scale, 86.98580932617188 * scale);
        ctx.bezierCurveTo(132.633544921875 * scale, 71.98580932617188 * scale, 160.633544921875 * scale, 56.985809326171875 * scale, 175.633544921875 * scale, 23.985809326171875 * scale);
        ctx.bezierCurveTo(182.633544921875 * scale, 53.985809326171875 * scale, 170.633544921875 * scale, 102.98580932617188 * scale, 191.633544921875 * scale, 125.98580932617188 * scale);
        ctx.bezierCurveTo(214.633544921875 * scale, 89.98580932617188 * scale, 192.633544921875 * scale, 58.985809326171875 * scale, 202.633544921875 * scale, 20.985809326171875 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[3], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(203.633544921875 * scale, 21.985809326171875 * scale);
        ctx.bezierCurveTo(223.633544921875 * scale, 63.985809326171875 * scale, 227.633544921875 * scale, 72.98580932617188 * scale, 235.633544921875 * scale, 98.98580932617188 * scale);
        ctx.bezierCurveTo(241.633544921875 * scale, 123.98580932617188 * scale, 225.633544921875 * scale, 138.98580932617188 * scale, 196.633544921875 * scale, 122.98580932617188 * scale);
        ctx.bezierCurveTo(213.633544921875 * scale, 93.98580932617188 * scale, 199.633544921875 * scale, 49.985809326171875 * scale, 203.633544921875 * scale, 26.985809326171875 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(175.633544921875 * scale, 25.985809326171875 * scale);
        ctx.bezierCurveTo(176.633544921875 * scale, 51.985809326171875 * scale, 171.633544921875 * scale, 88.98580932617188 * scale, 186.633544921875 * scale, 121.98580932617188 * scale);
        ctx.bezierCurveTo(156.633544921875 * scale, 144.98580932617188 * scale, 139.633544921875 * scale, 120.98580932617188 * scale, 147.633544921875 * scale, 97.98580932617188 * scale);
        ctx.bezierCurveTo(152.633544921875 * scale, 77.98580932617188 * scale, 162.633544921875 * scale, 60.985809326171875 * scale, 176.633544921875 * scale, 25.985809326171875 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(26.633544921875 * scale, 96.98580932617188 * scale);
        ctx.bezierCurveTo(38.633544921875 * scale, 151.98580932617188 * scale, 61.633544921875 * scale, 161.98580932617188 * scale, 88.633544921875 * scale, 168.98580932617188 * scale);
        ctx.bezierCurveTo(117.633544921875 * scale, 177.98580932617188 * scale, 113.633544921875 * scale, 185.98580932617188 * scale, 106.633544921875 * scale, 204.98580932617188 * scale);
        ctx.bezierCurveTo(32.633544921875 * scale, 204.98580932617188 * scale, 25.633544921875 * scale, 149.98580932617188 * scale, 25.633544921875 * scale, 97.98580932617188 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(351.633544921875 * scale, 99.98580932617188 * scale);
        ctx.bezierCurveTo(365.633544921875 * scale, 161.98580932617188 * scale, 333.633544921875 * scale, 203.98580932617188 * scale, 287.633544921875 * scale, 207.98580932617188 * scale);
        ctx.bezierCurveTo(255.633544921875 * scale, 208.98580932617188 * scale, 266.633544921875 * scale, 174.98580932617188 * scale, 285.633544921875 * scale, 176.98580932617188 * scale);
        ctx.bezierCurveTo(313.633544921875 * scale, 178.98580932617188 * scale, 348.633544921875 * scale, 135.98580932617188 * scale, 353.633544921875 * scale, 99.98580932617188 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(350.633544921875 * scale, 302.9858093261719 * scale);
        ctx.bezierCurveTo(310.633544921875 * scale, 280.9858093261719 * scale, 314.633544921875 * scale, 244.98580932617188 * scale, 292.633544921875 * scale, 230.98580932617188 * scale);
        ctx.bezierCurveTo(272.633544921875 * scale, 215.98580932617188 * scale, 263.633544921875 * scale, 222.98580932617188 * scale, 256.633544921875 * scale, 236.98580932617188 * scale);
        ctx.bezierCurveTo(251.633544921875 * scale, 249.98580932617188 * scale, 264.633544921875 * scale, 255.98580932617188 * scale, 279.633544921875 * scale, 268.9858093261719 * scale);
        ctx.bezierCurveTo(306.633544921875 * scale, 295.9858093261719 * scale, 325.633544921875 * scale, 299.9858093261719 * scale, 349.633544921875 * scale, 302.9858093261719 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(95.633544921875 * scale, 224.98580932617188 * scale);
        ctx.bezierCurveTo(64.633544921875 * scale, 245.98580932617188 * scale, 62.633544921875 * scale, 280.9858093261719 * scale, 32.633544921875 * scale, 303.9858093261719 * scale);
        ctx.bezierCurveTo(59.633544921875 * scale, 301.9858093261719 * scale, 102.633544921875 * scale, 260.9858093261719 * scale, 116.633544921875 * scale, 255.98580932617188 * scale);
        ctx.bezierCurveTo(139.633544921875 * scale, 229.98580932617188 * scale, 108.633544921875 * scale, 209.98580932617188 * scale, 97.633544921875 * scale, 224.98580932617188 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(195.633544921875 * scale, 253.98580932617188 * scale);
        ctx.bezierCurveTo(209.633544921875 * scale, 282.9858093261719 * scale, 205.633544921875 * scale, 278.9858093261719 * scale, 199.633544921875 * scale, 307.9858093261719 * scale);
        ctx.bezierCurveTo(198.633544921875 * scale, 332.9858093261719 * scale, 201.633544921875 * scale, 340.9858093261719 * scale, 202.633544921875 * scale, 348.9858093261719 * scale);
        ctx.bezierCurveTo(215.633544921875 * scale, 313.9858093261719 * scale, 226.633544921875 * scale, 291.9858093261719 * scale, 235.633544921875 * scale, 270.9858093261719 * scale);
        ctx.bezierCurveTo(243.633544921875 * scale, 247.98580932617188 * scale, 219.633544921875 * scale, 235.98580932617188 * scale, 196.633544921875 * scale, 252.98580932617188 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(195.633544921875 * scale, 251.98580932617188 * scale);
        ctx.bezierCurveTo(176.633544921875 * scale, 275.9858093261719 * scale, 182.633544921875 * scale, 285.9858093261719 * scale, 191.633544921875 * scale, 308.9858093261719 * scale);
        ctx.bezierCurveTo(194.633544921875 * scale, 318.9858093261719 * scale, 190.633544921875 * scale, 334.9858093261719 * scale, 186.633544921875 * scale, 348.9858093261719 * scale);
        ctx.bezierCurveTo(175.633544921875 * scale, 307.9858093261719 * scale, 157.633544921875 * scale, 291.9858093261719 * scale, 155.633544921875 * scale, 272.9858093261719 * scale);
        ctx.bezierCurveTo(150.633544921875 * scale, 243.98580932617188 * scale, 170.633544921875 * scale, 236.98580932617188 * scale, 195.633544921875 * scale, 251.98580932617188 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(316 * scale, 186.8020782470703 * scale);
        ctx.bezierCurveTo(315 * scale, 173.8020782470703 * scale, 298 * scale, 177.8020782470703 * scale, 293 * scale, 183.8020782470703 * scale);
        ctx.bezierCurveTo(285 * scale, 195.8020782470703 * scale, 314 * scale, 197.8020782470703 * scale, 315 * scale, 187.8020782470703 * scale);
        ctx.closePath();
        fill_path(ctx, color[6], color[7], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(340 * scale, 157.8020782470703 * scale);
        ctx.bezierCurveTo(327 * scale, 153.8020782470703 * scale, 321 * scale, 168.8020782470703 * scale, 330 * scale, 174.8020782470703 * scale);
        ctx.bezierCurveTo(341 * scale, 178.8020782470703 * scale, 347 * scale, 161.8020782470703 * scale, 341 * scale, 157.8020782470703 * scale);
        ctx.closePath();
        fill_path(ctx, color[6], color[7], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(349 * scale, 136.8020782470703 * scale);
        ctx.bezierCurveTo(343 * scale, 135.8020782470703 * scale, 342 * scale, 139.8020782470703 * scale, 341 * scale, 147.8020782470703 * scale);
        ctx.bezierCurveTo(343 * scale, 155.8020782470703 * scale, 353 * scale, 143.8020782470703 * scale, 349 * scale, 137.8020782470703 * scale);
        ctx.closePath();
        fill_path(ctx, color[6], color[7], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(278.75 * scale, 246.4375 * scale);
        ctx.bezierCurveTo(288.75 * scale, 242.4375 * scale, 301.75 * scale, 248.4375 * scale, 298.75 * scale, 262.4375 * scale);
        ctx.bezierCurveTo(293.75 * scale, 271.4375 * scale, 287.75 * scale, 271.4375 * scale, 278.75 * scale, 262.4375 * scale);
        ctx.bezierCurveTo(271.75 * scale, 255.4375 * scale, 274.75 * scale, 250.4375 * scale, 277.75 * scale, 247.4375 * scale);
        ctx.closePath();
        fill_path(ctx, color[6], color[7], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(310.75 * scale, 277.4375 * scale);
        ctx.bezierCurveTo(319.75 * scale, 280.4375 * scale, 322.75 * scale, 283.4375 * scale, 321.75 * scale, 289.4375 * scale);
        ctx.bezierCurveTo(319.75 * scale, 295.4375 * scale, 313.75 * scale, 291.4375 * scale, 308.75 * scale, 288.4375 * scale);
        ctx.bezierCurveTo(301.75 * scale, 281.4375 * scale, 306.75 * scale, 277.4375 * scale, 309.75 * scale, 277.4375 * scale);
        ctx.closePath();
        fill_path(ctx, color[6], color[7], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(217.75 * scale, 257.4375 * scale);
        ctx.bezierCurveTo(227.75 * scale, 269.4375 * scale, 220.75 * scale, 281.4375 * scale, 212.75 * scale, 280.4375 * scale);
        ctx.bezierCurveTo(206.75 * scale, 279.4375 * scale, 206.75 * scale, 269.4375 * scale, 204.75 * scale, 260.4375 * scale);
        ctx.bezierCurveTo(204.75 * scale, 254.4375 * scale, 211.75 * scale, 253.4375 * scale, 216.75 * scale, 256.4375 * scale);
        ctx.closePath();
        fill_path(ctx, color[6], color[7], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(211.75 * scale, 289.4375 * scale);
        ctx.bezierCurveTo(219.75 * scale, 292.4375 * scale, 213.75 * scale, 306.4375 * scale, 206.75 * scale, 307.4375 * scale);
        ctx.bezierCurveTo(199.75 * scale, 303.4375 * scale, 209.75 * scale, 287.4375 * scale, 210.75 * scale, 289.4375 * scale);
        ctx.closePath();
        fill_path(ctx, color[6], color[7], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(171.75 * scale, 256.4375 * scale);
        ctx.bezierCurveTo(162.75 * scale, 273.4375 * scale, 166.75 * scale, 278.4375 * scale, 175.75 * scale, 280.4375 * scale);
        ctx.bezierCurveTo(183.75 * scale, 278.4375 * scale, 185.75 * scale, 257.4375 * scale, 182.75 * scale, 255.4375 * scale);
        ctx.bezierCurveTo(176.75 * scale, 251.4375 * scale, 172.75 * scale, 253.4375 * scale, 172.75 * scale, 256.4375 * scale);
        ctx.closePath();
        fill_path(ctx, color[6], color[7], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(175.75 * scale, 289.9375 * scale);
        ctx.bezierCurveTo(183.75 * scale, 287.9375 * scale, 186.75 * scale, 301.9375 * scale, 182.75 * scale, 305.9375 * scale);
        ctx.bezierCurveTo(176.75 * scale, 307.9375 * scale, 171.75 * scale, 292.9375 * scale, 174.75 * scale, 290.9375 * scale);
        ctx.closePath();
        fill_path(ctx, color[6], color[7], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(205.75 * scale, 314.4375 * scale);
        ctx.bezierCurveTo(209.75 * scale, 316.4375 * scale, 210.75 * scale, 320.4375 * scale, 206.75 * scale, 323.4375 * scale);
        ctx.bezierCurveTo(201.75 * scale, 324.4375 * scale, 201.75 * scale, 314.4375 * scale, 204.75 * scale, 314.4375 * scale);
        ctx.closePath();
        fill_path(ctx, color[6], color[7], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(186.75 * scale, 313.4375 * scale);
        ctx.bezierCurveTo(181.75 * scale, 315.4375 * scale, 180.75 * scale, 321.4375 * scale, 185.75 * scale, 326.4375 * scale);
        ctx.bezierCurveTo(190.75 * scale, 327.4375 * scale, 190.75 * scale, 313.4375 * scale, 187.75 * scale, 314.4375 * scale);
        ctx.closePath();
        fill_path(ctx, color[6], color[7], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(103.75 * scale, 244.4375 * scale);
        ctx.bezierCurveTo(96.75 * scale, 239.4375 * scale, 83.75 * scale, 240.4375 * scale, 81.75 * scale, 255.4375 * scale);
        ctx.bezierCurveTo(80.75 * scale, 264.4375 * scale, 89.75 * scale, 269.4375 * scale, 99.75 * scale, 260.4375 * scale);
        ctx.bezierCurveTo(106.75 * scale, 254.4375 * scale, 106.75 * scale, 250.4375 * scale, 104.75 * scale, 245.4375 * scale);
        ctx.closePath();
        fill_path(ctx, color[6], color[7], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(86.75 * scale, 182.4375 * scale);
        ctx.bezierCurveTo(82.75 * scale, 170.4375 * scale, 66.75 * scale, 169.4375 * scale, 61.75 * scale, 181.4375 * scale);
        ctx.bezierCurveTo(58.75 * scale, 187.4375 * scale, 68.75 * scale, 194.4375 * scale, 75.75 * scale, 192.4375 * scale);
        ctx.bezierCurveTo(83.75 * scale, 192.4375 * scale, 86.75 * scale, 187.4375 * scale, 86.75 * scale, 183.4375 * scale);
        ctx.closePath();
        fill_path(ctx, color[6], color[7], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(44.75 * scale, 152.4375 * scale);
        ctx.bezierCurveTo(55.75 * scale, 159.4375 * scale, 54.75 * scale, 170.4375 * scale, 46.75 * scale, 171.4375 * scale);
        ctx.bezierCurveTo(39.75 * scale, 170.4375 * scale, 34.75 * scale, 151.4375 * scale, 43.75 * scale, 152.4375 * scale);
        ctx.closePath();
        fill_path(ctx, color[6], color[7], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(31.75 * scale, 130.4375 * scale);
        ctx.bezierCurveTo(35.75 * scale, 132.4375 * scale, 35.75 * scale, 131.4375 * scale, 37.75 * scale, 137.4375 * scale);
        ctx.bezierCurveTo(36.75 * scale, 144.4375 * scale, 36.75 * scale, 145.4375 * scale, 33.75 * scale, 144.4375 * scale);
        ctx.bezierCurveTo(26.75 * scale, 137.4375 * scale, 29.75 * scale, 131.4375 * scale, 31.75 * scale, 130.4375 * scale);
        ctx.closePath();
        fill_path(ctx, color[6], color[7], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(69.75 * scale, 274.4375 * scale);
        ctx.bezierCurveTo(62.75 * scale, 272.4375 * scale, 59.75 * scale, 277.4375 * scale, 57.75 * scale, 284.4375 * scale);
        ctx.bezierCurveTo(56.75 * scale, 290.4375 * scale, 63.75 * scale, 289.4375 * scale, 71.75 * scale, 282.4375 * scale);
        ctx.bezierCurveTo(75.75 * scale, 277.4375 * scale, 72.75 * scale, 275.4375 * scale, 69.75 * scale, 274.4375 * scale);
        ctx.closePath();
        fill_path(ctx, color[6], color[7], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(165.75 * scale, 95.4375 * scale);
        ctx.bezierCurveTo(177.75 * scale, 97.4375 * scale, 182.75 * scale, 115.4375 * scale, 173.75 * scale, 121.4375 * scale);
        ctx.bezierCurveTo(164.75 * scale, 126.4375 * scale, 149.75 * scale, 102.4375 * scale, 164.75 * scale, 96.4375 * scale);
        ctx.closePath();
        fill_path(ctx, color[6], color[7], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(216.75 * scale, 94.4375 * scale);
        ctx.bezierCurveTo(227.75 * scale, 99.4375 * scale, 223.75 * scale, 122.4375 * scale, 210.75 * scale, 119.4375 * scale);
        ctx.bezierCurveTo(203.75 * scale, 115.4375 * scale, 207.75 * scale, 93.4375 * scale, 216.75 * scale, 94.4375 * scale);
        ctx.closePath();
        fill_path(ctx, color[6], color[7], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(211.75 * scale, 68.4375 * scale);
        ctx.bezierCurveTo(218.75 * scale, 69.4375 * scale, 220.75 * scale, 77.4375 * scale, 216.75 * scale, 83.4375 * scale);
        ctx.bezierCurveTo(208.75 * scale, 89.4375 * scale, 205.75 * scale, 68.4375 * scale, 210.75 * scale, 68.4375 * scale);
        ctx.closePath();
        fill_path(ctx, color[6], color[7], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(169.75 * scale, 71.4375 * scale);
        ctx.bezierCurveTo(162.75 * scale, 72.4375 * scale, 159.75 * scale, 83.4375 * scale, 167.75 * scale, 88.4375 * scale);
        ctx.bezierCurveTo(174.75 * scale, 90.4375 * scale, 174.75 * scale, 72.4375 * scale, 170.75 * scale, 71.4375 * scale);
        ctx.closePath();
        fill_path(ctx, color[6], color[7], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(193.75 * scale, 160.4375 * scale);
        ctx.bezierCurveTo(215.75 * scale, 168.4375 * scale, 224.75 * scale, 180.4375 * scale, 229.75 * scale, 193.4375 * scale);
        ctx.bezierCurveTo(223.75 * scale, 211.4375 * scale, 205.75 * scale, 225.4375 * scale, 193.75 * scale, 229.4375 * scale);
        ctx.bezierCurveTo(167.75 * scale, 217.4375 * scale, 161.75 * scale, 205.4375 * scale, 156.75 * scale, 192.4375 * scale);
        ctx.bezierCurveTo(164.75 * scale, 175.4375 * scale, 176.75 * scale, 166.4375 * scale, 192.75 * scale, 160.4375 * scale);
        ctx.closePath();
        fill_path(ctx, color[8], color[9], 3 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(189.1999969482422 * scale, 182.61249923706055 * scale);
        ctx.bezierCurveTo(190.1999969482422 * scale, 184.11249923706055 * scale, 190.1999969482422 * scale, 184.11249923706055 * scale, 191.1999969482422 * scale, 185.61249923706055 * scale);
        ctx.bezierCurveTo(192.1999969482422 * scale, 180.61249923706055 * scale, 192.1999969482422 * scale, 180.61249923706055 * scale, 193.1999969482422 * scale, 175.61249923706055 * scale);
        ctx.bezierCurveTo(195.6999969482422 * scale, 177.11249923706055 * scale, 195.6999969482422 * scale, 177.11249923706055 * scale, 198.1999969482422 * scale, 178.61249923706055 * scale);
        ctx.bezierCurveTo(198.1999969482422 * scale, 181.11249923706055 * scale, 198.1999969482422 * scale, 181.11249923706055 * scale, 198.1999969482422 * scale, 183.61249923706055 * scale);
        ctx.bezierCurveTo(201.6999969482422 * scale, 181.11249923706055 * scale, 201.6999969482422 * scale, 181.11249923706055 * scale, 205.1999969482422 * scale, 178.61249923706055 * scale);
        ctx.bezierCurveTo(206.6999969482422 * scale, 180.61249923706055 * scale, 206.6999969482422 * scale, 180.61249923706055 * scale, 208.1999969482422 * scale, 182.61249923706055 * scale);
        ctx.bezierCurveTo(206.1999969482422 * scale, 185.61249923706055 * scale, 206.1999969482422 * scale, 185.61249923706055 * scale, 204.1999969482422 * scale, 188.61249923706055 * scale);
        ctx.bezierCurveTo(208.6999969482422 * scale, 188.61249923706055 * scale, 208.6999969482422 * scale, 188.61249923706055 * scale, 213.1999969482422 * scale, 188.61249923706055 * scale);
        ctx.bezierCurveTo(213.1999969482422 * scale, 191.11249923706055 * scale, 213.1999969482422 * scale, 191.11249923706055 * scale, 213.1999969482422 * scale, 193.61249923706055 * scale);
        ctx.bezierCurveTo(209.6999969482422 * scale, 194.61249923706055 * scale, 209.6999969482422 * scale, 194.61249923706055 * scale, 206.1999969482422 * scale, 195.61249923706055 * scale);
        ctx.bezierCurveTo(210.1999969482422 * scale, 198.61249923706055 * scale, 210.1999969482422 * scale, 198.61249923706055 * scale, 214.1999969482422 * scale, 201.61249923706055 * scale);
        ctx.bezierCurveTo(212.1999969482422 * scale, 203.61249923706055 * scale, 212.1999969482422 * scale, 203.61249923706055 * scale, 210.1999969482422 * scale, 205.61249923706055 * scale);
        ctx.bezierCurveTo(207.1999969482422 * scale, 204.11249923706055 * scale, 207.1999969482422 * scale, 204.11249923706055 * scale, 204.1999969482422 * scale, 202.61249923706055 * scale);
        ctx.bezierCurveTo(205.6999969482422 * scale, 207.61249923706055 * scale, 205.6999969482422 * scale, 207.61249923706055 * scale, 207.1999969482422 * scale, 212.61249923706055 * scale);
        ctx.bezierCurveTo(204.6999969482422 * scale, 213.61249923706055 * scale, 204.6999969482422 * scale, 213.61249923706055 * scale, 202.1999969482422 * scale, 214.61249923706055 * scale);
        ctx.bezierCurveTo(200.1999969482422 * scale, 210.61249923706055 * scale, 200.1999969482422 * scale, 210.61249923706055 * scale, 198.1999969482422 * scale, 206.61249923706055 * scale);
        ctx.bezierCurveTo(196.6999969482422 * scale, 211.61249923706055 * scale, 196.6999969482422 * scale, 211.61249923706055 * scale, 195.1999969482422 * scale, 216.61249923706055 * scale);
        ctx.bezierCurveTo(192.6999969482422 * scale, 216.11249923706055 * scale, 192.6999969482422 * scale, 216.11249923706055 * scale, 190.1999969482422 * scale, 215.61249923706055 * scale);
        ctx.bezierCurveTo(190.1999969482422 * scale, 211.61249923706055 * scale, 190.1999969482422 * scale, 211.61249923706055 * scale, 190.1999969482422 * scale, 207.61249923706055 * scale);
        ctx.bezierCurveTo(186.1999969482422 * scale, 210.61249923706055 * scale, 186.1999969482422 * scale, 210.61249923706055 * scale, 182.1999969482422 * scale, 213.61249923706055 * scale);
        ctx.bezierCurveTo(181.1999969482422 * scale, 211.11249923706055 * scale, 181.1999969482422 * scale, 211.11249923706055 * scale, 180.1999969482422 * scale, 208.61249923706055 * scale);
        ctx.bezierCurveTo(183.1999969482422 * scale, 205.61249923706055 * scale, 183.1999969482422 * scale, 205.61249923706055 * scale, 186.1999969482422 * scale, 202.61249923706055 * scale);
        ctx.bezierCurveTo(180.6999969482422 * scale, 203.11249923706055 * scale, 180.6999969482422 * scale, 203.11249923706055 * scale, 175.1999969482422 * scale, 203.61249923706055 * scale);
        ctx.bezierCurveTo(174.6999969482422 * scale, 200.11249923706055 * scale, 174.6999969482422 * scale, 200.11249923706055 * scale, 174.1999969482422 * scale, 196.61249923706055 * scale);
        ctx.bezierCurveTo(177.1999969482422 * scale, 195.61249923706055 * scale, 177.1999969482422 * scale, 195.61249923706055 * scale, 180.1999969482422 * scale, 194.61249923706055 * scale);
        ctx.bezierCurveTo(177.1999969482422 * scale, 191.61249923706055 * scale, 177.1999969482422 * scale, 191.61249923706055 * scale, 174.1999969482422 * scale, 188.61249923706055 * scale);
        ctx.bezierCurveTo(175.6999969482422 * scale, 187.11249923706055 * scale, 175.6999969482422 * scale, 187.11249923706055 * scale, 177.1999969482422 * scale, 185.61249923706055 * scale);
        ctx.bezierCurveTo(180.6999969482422 * scale, 187.11249923706055 * scale, 180.6999969482422 * scale, 187.11249923706055 * scale, 184.1999969482422 * scale, 188.61249923706055 * scale);
        ctx.bezierCurveTo(182.6999969482422 * scale, 183.61249923706055 * scale, 182.6999969482422 * scale, 183.61249923706055 * scale, 181.1999969482422 * scale, 178.61249923706055 * scale);
        ctx.bezierCurveTo(183.1999969482422 * scale, 177.11249923706055 * scale, 183.1999969482422 * scale, 177.11249923706055 * scale, 185.1999969482422 * scale, 175.61249923706055 * scale);
        ctx.closePath();
        fill_path(ctx, color[10]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(185.1999969482422 * scale, 173.8125 * scale);
        ctx.bezierCurveTo(187.1999969482422 * scale, 179.3125 * scale, 187.1999969482422 * scale, 179.3125 * scale, 189.1999969482422 * scale, 184.8125 * scale);
        ctx.bezierCurveTo(184.1999969482422 * scale, 181.8125 * scale, 184.1999969482422 * scale, 181.8125 * scale, 179.1999969482422 * scale, 178.8125 * scale);
        ctx.bezierCurveTo(181.1999969482422 * scale, 175.8125 * scale, 182.1999969482422 * scale, 174.8125 * scale, 185.1999969482422 * scale, 173.8125 * scale);
        ctx.closePath();
        fill_path(ctx, color[11]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(192.1999969482422 * scale, 173.61249542236328 * scale);
        ctx.bezierCurveTo(194.1999969482422 * scale, 172.61249542236328 * scale, 196.1999969482422 * scale, 171.61249542236328 * scale, 199.1999969482422 * scale, 173.61249542236328 * scale);
        ctx.bezierCurveTo(197.6999969482422 * scale, 179.61249542236328 * scale, 197.6999969482422 * scale, 179.61249542236328 * scale, 196.1999969482422 * scale, 185.61249542236328 * scale);
        ctx.bezierCurveTo(194.1999969482422 * scale, 179.61249542236328 * scale, 194.1999969482422 * scale, 179.61249542236328 * scale, 192.1999969482422 * scale, 173.61249542236328 * scale);
        ctx.closePath();
        fill_path(ctx, color[11]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(205.1999969482422 * scale, 176.2125015258789 * scale);
        ctx.bezierCurveTo(210.1999969482422 * scale, 178.2125015258789 * scale, 211.1999969482422 * scale, 179.2125015258789 * scale, 211.1999969482422 * scale, 181.2125015258789 * scale);
        ctx.bezierCurveTo(206.6999969482422 * scale, 184.7125015258789 * scale, 206.6999969482422 * scale, 184.7125015258789 * scale, 202.1999969482422 * scale, 188.2125015258789 * scale);
        ctx.bezierCurveTo(203.6999969482422 * scale, 182.2125015258789 * scale, 203.6999969482422 * scale, 182.2125015258789 * scale, 205.1999969482422 * scale, 176.2125015258789 * scale);
        ctx.closePath();
        fill_path(ctx, color[11]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(214.1999969482422 * scale, 187.21249985694885 * scale);
        ctx.bezierCurveTo(216.1999969482422 * scale, 191.21249985694885 * scale, 216.1999969482422 * scale, 192.21249985694885 * scale, 215.1999969482422 * scale, 195.21249985694885 * scale);
        ctx.bezierCurveTo(206.1999969482422 * scale, 194.21249985694885 * scale, 205.1999969482422 * scale, 194.21249985694885 * scale, 205.1999969482422 * scale, 194.21249985694885 * scale);
        ctx.bezierCurveTo(209.6999969482422 * scale, 190.71249985694885 * scale, 209.6999969482422 * scale, 190.71249985694885 * scale, 214.1999969482422 * scale, 187.21249985694885 * scale);
        ctx.closePath();
        fill_path(ctx, color[11]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(204.1999969482422 * scale, 201.8125 * scale);
        ctx.bezierCurveTo(209.1999969482422 * scale, 201.3125 * scale, 209.1999969482422 * scale, 201.3125 * scale, 214.1999969482422 * scale, 200.8125 * scale);
        ctx.bezierCurveTo(215.1999969482422 * scale, 204.8125 * scale, 214.1999969482422 * scale, 205.8125 * scale, 213.1999969482422 * scale, 208.8125 * scale);
        ctx.bezierCurveTo(208.6999969482422 * scale, 205.3125 * scale, 208.6999969482422 * scale, 205.3125 * scale, 204.1999969482422 * scale, 201.8125 * scale);
        ctx.closePath();
        fill_path(ctx, color[11]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(199.1999969482422 * scale, 205.61249923706055 * scale);
        ctx.bezierCurveTo(207.1999969482422 * scale, 212.61249923706055 * scale, 203.6999969482422 * scale, 209.11249923706055 * scale, 208.1999969482422 * scale, 212.61249923706055 * scale);
        ctx.bezierCurveTo(206.1999969482422 * scale, 215.61249923706055 * scale, 204.1999969482422 * scale, 217.61249923706055 * scale, 203.1999969482422 * scale, 216.61249923706055 * scale);
        ctx.bezierCurveTo(201.1999969482422 * scale, 211.11249923706055 * scale, 201.1999969482422 * scale, 211.11249923706055 * scale, 199.1999969482422 * scale, 205.61249923706055 * scale);
        ctx.closePath();
        fill_path(ctx, color[11]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(191.1999969482422 * scale, 207.01250076293945 * scale);
        ctx.bezierCurveTo(194.1999969482422 * scale, 213.01250076293945 * scale, 194.1999969482422 * scale, 216.01250076293945 * scale, 196.1999969482422 * scale, 218.01250076293945 * scale);
        ctx.bezierCurveTo(193.1999969482422 * scale, 220.01250076293945 * scale, 190.1999969482422 * scale, 220.01250076293945 * scale, 188.1999969482422 * scale, 218.01250076293945 * scale);
        ctx.bezierCurveTo(189.6999969482422 * scale, 213.01250076293945 * scale, 189.6999969482422 * scale, 213.01250076293945 * scale, 191.1999969482422 * scale, 208.01250076293945 * scale);
        ctx.closePath();
        fill_path(ctx, color[11]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(186.1999969482422 * scale, 203.21249961853027 * scale);
        ctx.bezierCurveTo(184.1999969482422 * scale, 209.21249961853027 * scale, 184.1999969482422 * scale, 209.21249961853027 * scale, 182.1999969482422 * scale, 215.21249961853027 * scale);
        ctx.bezierCurveTo(177.1999969482422 * scale, 212.21249961853027 * scale, 176.1999969482422 * scale, 211.21249961853027 * scale, 177.1999969482422 * scale, 210.21249961853027 * scale);
        ctx.bezierCurveTo(181.6999969482422 * scale, 206.71249961853027 * scale, 181.6999969482422 * scale, 206.71249961853027 * scale, 186.1999969482422 * scale, 203.21249961853027 * scale);
        ctx.closePath();
        fill_path(ctx, color[11]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(183.1999969482422 * scale, 196.8125 * scale);
        ctx.bezierCurveTo(177.1999969482422 * scale, 196.3125 * scale, 177.1999969482422 * scale, 196.3125 * scale, 171.1999969482422 * scale, 195.8125 * scale);
        ctx.bezierCurveTo(171.1999969482422 * scale, 199.8125 * scale, 171.1999969482422 * scale, 202.8125 * scale, 174.1999969482422 * scale, 204.8125 * scale);
        ctx.bezierCurveTo(178.6999969482422 * scale, 200.8125 * scale, 178.6999969482422 * scale, 200.8125 * scale, 183.1999969482422 * scale, 196.8125 * scale);
        ctx.closePath();
        fill_path(ctx, color[11]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(185.1999969482422 * scale, 190.21249771118164 * scale);
        ctx.bezierCurveTo(179.6999969482422 * scale, 186.71249771118164 * scale, 179.6999969482422 * scale, 186.71249771118164 * scale, 174.1999969482422 * scale, 183.21249771118164 * scale);
        ctx.bezierCurveTo(172.1999969482422 * scale, 186.21249771118164 * scale, 172.1999969482422 * scale, 187.21249771118164 * scale, 172.1999969482422 * scale, 190.21249771118164 * scale);
        ctx.bezierCurveTo(178.1999969482422 * scale, 190.21249771118164 * scale, 178.1999969482422 * scale, 190.21249771118164 * scale, 184.1999969482422 * scale, 190.21249771118164 * scale);
        ctx.closePath();
        fill_path(ctx, color[11]);
        circle(ctx, 126.19999694824219 * scale, 169.8125 * scale, 8.94427190999916 * scale);
        fill_path(ctx, color[12]);
        circle(ctx, 123.19999694824219 * scale, 164.8125 * scale, 2.8284271247461903 * scale);
        fill_path(ctx, color[13]);
        circle(ctx, 253.1999969482422 * scale, 169.8125 * scale, 8.94427190999916 * scale);
        fill_path(ctx, color[12]);
        circle(ctx, 255.1999969482422 * scale, 164.8125 * scale, 2.23606797749979 * scale);
        fill_path(ctx, color[13]);
        return can;
    };

    function create_bread(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 400 * scale;
        can.height = 400 * scale;
        ctx.globalAlpha = 1;
        ctx.translate(20 * scale, 20 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(36.5 * scale, 278.0625 * scale);
        ctx.bezierCurveTo(67.5 * scale, 316.0625 * scale, 134.5 * scale, 334.0625 * scale, 199.5 * scale, 319.0625 * scale);
        ctx.bezierCurveTo(254.5 * scale, 304.0625 * scale, 346.5 * scale, 270.0625 * scale, 348.5 * scale, 237.0625 * scale);
        ctx.bezierCurveTo(359.5 * scale, 206.0625 * scale, 318.5 * scale, 129.0625 * scale, 262.5 * scale, 122.0625 * scale);
        ctx.bezierCurveTo(213.5 * scale, 115.0625 * scale, 166.5 * scale, 133.0625 * scale, 104.5 * scale, 166.0625 * scale);
        ctx.bezierCurveTo(54.5 * scale, 194.0625 * scale, 23.5 * scale, 241.0625 * scale, 36.5 * scale, 277.0625 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.translate(-20 * scale, -20 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(36.5 * scale, 278.0625 * scale);
        ctx.bezierCurveTo(67.5 * scale, 316.0625 * scale, 134.5 * scale, 334.0625 * scale, 199.5 * scale, 319.0625 * scale);
        ctx.bezierCurveTo(254.5 * scale, 304.0625 * scale, 346.5 * scale, 270.0625 * scale, 348.5 * scale, 237.0625 * scale);
        ctx.bezierCurveTo(359.5 * scale, 206.0625 * scale, 318.5 * scale, 129.0625 * scale, 262.5 * scale, 122.0625 * scale);
        ctx.bezierCurveTo(213.5 * scale, 115.0625 * scale, 166.5 * scale, 133.0625 * scale, 104.5 * scale, 166.0625 * scale);
        ctx.bezierCurveTo(54.5 * scale, 194.0625 * scale, 23.5 * scale, 241.0625 * scale, 36.5 * scale, 277.0625 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 19 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(214.5 * scale, 124.0625 * scale);
        ctx.bezierCurveTo(242.5 * scale, 125.0625 * scale, 272.5 * scale, 159.0625 * scale, 283.5 * scale, 184.0625 * scale);
        ctx.bezierCurveTo(277.5 * scale, 161.0625 * scale, 233.5 * scale, 128.0625 * scale, 219.5 * scale, 122.0625 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[2], 19 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(157.5 * scale, 145.0625 * scale);
        ctx.bezierCurveTo(176.5 * scale, 148.0625 * scale, 205.5 * scale, 176.0625 * scale, 212.5 * scale, 197.0625 * scale);
        ctx.bezierCurveTo(205.5 * scale, 178.0625 * scale, 177.5 * scale, 152.0625 * scale, 156.5 * scale, 142.0625 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[2], 19 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(103.5 * scale, 169.0625 * scale);
        ctx.bezierCurveTo(160.5 * scale, 166.0625 * scale, 228.5 * scale, 312.0625 * scale, 162.5 * scale, 323.0625 * scale);
        ctx.bezierCurveTo(128.5 * scale, 330.0625 * scale, 45.5 * scale, 312.0625 * scale, 34.5 * scale, 268.0625 * scale);
        ctx.bezierCurveTo(30.5 * scale, 238.0625 * scale, 44.5 * scale, 222.0625 * scale, 52.5 * scale, 211.0625 * scale);
        ctx.bezierCurveTo(82.5 * scale, 174.0625 * scale, 104.5 * scale, 166.0625 * scale, 119.5 * scale, 172.0625 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[2], 19 * scale);
        circle(ctx, 92.5 * scale, 216.0625 * scale, 13.892443989449804 * scale);
        fill_path(ctx, color[4]);
        circle(ctx, 68.5 * scale, 227.0625 * scale, 8.06225774829855 * scale);
        fill_path(ctx, color[4]);
        circle(ctx, 85.5 * scale, 240.0625 * scale, 6.708203932499369 * scale);
        fill_path(ctx, color[4]);
        circle(ctx, 147.5 * scale, 294.0625 * scale, 17.46424919657298 * scale);
        fill_path(ctx, color[4]);
        circle(ctx, 166.5 * scale, 273.0625 * scale, 6.708203932499369 * scale);
        fill_path(ctx, color[4]);
        circle(ctx, 114.5 * scale, 294.0625 * scale, 12.36931687685298 * scale);
        fill_path(ctx, color[4]);
        circle(ctx, 123.5 * scale, 220.0625 * scale, 5.830951894845301 * scale);
        fill_path(ctx, color[4]);
        circle(ctx, 114.5 * scale, 259.0625 * scale, 4.123105625617661 * scale);
        fill_path(ctx, color[4]);
        circle(ctx, 63.5 * scale, 265.0625 * scale, 5.385164807134504 * scale);
        fill_path(ctx, color[4]);
        circle(ctx, 148.5 * scale, 235.0625 * scale, 4.47213595499958 * scale);
        fill_path(ctx, color[4]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(194.5 * scale, 313.0625 * scale);
        ctx.bezierCurveTo(222.5 * scale, 306.0625 * scale, 319.5 * scale, 271.0625 * scale, 337.5 * scale, 241.0625 * scale);
        ctx.bezierCurveTo(274.5 * scale, 270.0625 * scale, 216.5 * scale, 288.0625 * scale, 199.5 * scale, 287.0625 * scale);
        ctx.bezierCurveTo(198.5 * scale, 302.0625 * scale, 195.5 * scale, 311.0625 * scale, 193.5 * scale, 312.0625 * scale);
        ctx.closePath();
        fill_path(ctx, color[5]);
        return can;
    };

    function create_hurt_kraken(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 376 * scale;
        can.height = 371 * scale;
        ctx.globalAlpha = 1;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(191.633544921875 * scale, 123.98580932617188 * scale);
        ctx.bezierCurveTo(215.633544921875 * scale, 85.98580932617188 * scale, 187.633544921875 * scale, 71.98580932617188 * scale, 202.633544921875 * scale, 19.985809326171875 * scale);
        ctx.bezierCurveTo(231.633544921875 * scale, 68.98580932617188 * scale, 253.633544921875 * scale, 71.98580932617188 * scale, 256.633544921875 * scale, 93.98580932617188 * scale);
        ctx.bezierCurveTo(306.633544921875 * scale, 64.98580932617188 * scale, 319.633544921875 * scale, 61.985809326171875 * scale, 350.633544921875 * scale, 58.985809326171875 * scale);
        ctx.bezierCurveTo(280.633544921875 * scale, 86.98580932617188 * scale, 281.633544921875 * scale, 106.98580932617188 * scale, 268.633544921875 * scale, 130.98580932617188 * scale);
        ctx.bezierCurveTo(295.633544921875 * scale, 158.98580932617188 * scale, 328.633544921875 * scale, 155.98580932617188 * scale, 353.633544921875 * scale, 90.98580932617188 * scale);
        ctx.bezierCurveTo(371.633544921875 * scale, 158.98580932617188 * scale, 337.633544921875 * scale, 210.98580932617188 * scale, 286.633544921875 * scale, 209.98580932617188 * scale);
        ctx.bezierCurveTo(323.633544921875 * scale, 230.98580932617188 * scale, 317.633544921875 * scale, 274.9858093261719 * scale, 356.633544921875 * scale, 305.9858093261719 * scale);
        ctx.bezierCurveTo(288.633544921875 * scale, 297.9858093261719 * scale, 288.633544921875 * scale, 265.9858093261719 * scale, 275.633544921875 * scale, 266.9858093261719 * scale);
        ctx.bezierCurveTo(280.633544921875 * scale, 294.9858093261719 * scale, 315.633544921875 * scale, 306.9858093261719 * scale, 336.633544921875 * scale, 316.9858093261719 * scale);
        ctx.bezierCurveTo(295.633544921875 * scale, 318.9858093261719 * scale, 264.633544921875 * scale, 302.9858093261719 * scale, 254.633544921875 * scale, 289.9858093261719 * scale);
        ctx.bezierCurveTo(252.633544921875 * scale, 301.9858093261719 * scale, 224.633544921875 * scale, 315.9858093261719 * scale, 201.633544921875 * scale, 356.9858093261719 * scale);
        ctx.bezierCurveTo(195.633544921875 * scale, 313.9858093261719 * scale, 195.633544921875 * scale, 308.9858093261719 * scale, 196.633544921875 * scale, 307.9858093261719 * scale);
        ctx.bezierCurveTo(197.633544921875 * scale, 289.9858093261719 * scale, 207.633544921875 * scale, 283.9858093261719 * scale, 195.633544921875 * scale, 258.9858093261719 * scale);
        ctx.bezierCurveTo(182.633544921875 * scale, 282.9858093261719 * scale, 190.633544921875 * scale, 287.9858093261719 * scale, 193.633544921875 * scale, 297.9858093261719 * scale);
        ctx.bezierCurveTo(195.633544921875 * scale, 306.9858093261719 * scale, 191.633544921875 * scale, 334.9858093261719 * scale, 187.633544921875 * scale, 354.9858093261719 * scale);
        ctx.bezierCurveTo(165.633544921875 * scale, 320.9858093261719 * scale, 138.633544921875 * scale, 307.9858093261719 * scale, 135.633544921875 * scale, 288.9858093261719 * scale);
        ctx.bezierCurveTo(110.633544921875 * scale, 318.9858093261719 * scale, 68.633544921875 * scale, 323.9858093261719 * scale, 49.633544921875 * scale, 320.9858093261719 * scale);
        ctx.bezierCurveTo(88.633544921875 * scale, 308.9858093261719 * scale, 108.633544921875 * scale, 284.9858093261719 * scale, 118.633544921875 * scale, 258.9858093261719 * scale);
        ctx.bezierCurveTo(86.633544921875 * scale, 264.9858093261719 * scale, 75.633544921875 * scale, 310.9858093261719 * scale, 19.633544921875 * scale, 304.9858093261719 * scale);
        ctx.bezierCurveTo(54.633544921875 * scale, 276.9858093261719 * scale, 59.633544921875 * scale, 214.98580932617188 * scale, 105.633544921875 * scale, 205.98580932617188 * scale);
        ctx.bezierCurveTo(14.633544921875 * scale, 201.98580932617188 * scale, 24.633544921875 * scale, 141.98580932617188 * scale, 25.633544921875 * scale, 82.98580932617188 * scale);
        ctx.bezierCurveTo(49.633544921875 * scale, 168.98580932617188 * scale, 87.633544921875 * scale, 141.98580932617188 * scale, 112.633544921875 * scale, 123.98580932617188 * scale);
        ctx.bezierCurveTo(95.633544921875 * scale, 75.98580932617188 * scale, 70.633544921875 * scale, 68.98580932617188 * scale, 35.633544921875 * scale, 50.985809326171875 * scale);
        ctx.bezierCurveTo(70.633544921875 * scale, 53.985809326171875 * scale, 102.633544921875 * scale, 65.98580932617188 * scale, 125.633544921875 * scale, 84.98580932617188 * scale);
        ctx.bezierCurveTo(133.633544921875 * scale, 69.98580932617188 * scale, 166.633544921875 * scale, 42.985809326171875 * scale, 176.633544921875 * scale, 21.985809326171875 * scale);
        ctx.bezierCurveTo(185.633544921875 * scale, 49.985809326171875 * scale, 168.633544921875 * scale, 95.98580932617188 * scale, 191.633544921875 * scale, 121.98580932617188 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 12 * scale);
        return can;
    };

    function create_bread_oven_off(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 440 * scale;
        can.height = 388 * scale;
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(5 * scale, 5 * scale);
        circle(ctx, 220 * scale, 201 * scale, 170.41713528867922 * scale);
        fill_path(ctx, color[0], color[0], 6 * scale);
        ctx.globalAlpha = 1;
        ctx.translate(-5 * scale, -5 * scale);
        circle(ctx, 220 * scale, 201 * scale, 170.41713528867922 * scale);
        fill_path(ctx, color[1], color[2], 6 * scale);
        circle(ctx, 220 * scale, 201 * scale, 130 * scale);
        fill_path(ctx, color[11], color[2], 6 * scale);
        circle(ctx, 222 * scale, 199 * scale, 120.74767078498864 * scale);
        fill_path(ctx, undefined, color[3], 40 * scale);
        circle(ctx, 220 * scale, 200 * scale, 95.44108130150245 * scale);
        fill_path(ctx, undefined, color[2], 15 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(5 * scale, 5 * scale);
        circle(ctx, 63 * scale, 136 * scale, 49.193495504995376 * scale);
        fill_path(ctx, color[0], color[0], 4 * scale);
        ctx.globalAlpha = 1;
        ctx.translate(-5 * scale, -5 * scale);
        circle(ctx, 63 * scale, 136 * scale, 49.193495504995376 * scale);
        fill_path(ctx, color[8], color[2], 4 * scale);
        circle(ctx, 63 * scale, 137 * scale, 25.632011235952593 * scale);
        fill_path(ctx, color[7], color[2], 4 * scale);
        return can;
    };

    function create_bread_oven(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 440 * scale;
        can.height = 388 * scale;
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(5 * scale, 5 * scale);
        circle(ctx, 220 * scale, 201 * scale, 170.41713528867922 * scale);
        fill_path(ctx, color[0], color[0], 6 * scale);
        ctx.globalAlpha = 1;
        ctx.translate(-5 * scale, -5 * scale);
        circle(ctx, 220 * scale, 201 * scale, 170.41713528867922 * scale);
        fill_path(ctx, color[1], color[2], 6 * scale);
        circle(ctx, 220 * scale, 201 * scale, 130 * scale);
        fill_path(ctx, color[11], color[2], 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(218 * scale, 97 * scale);
        ctx.bezierCurveTo(219 * scale, 163 * scale, 201 * scale, 176 * scale, 191 * scale, 175 * scale);
        ctx.bezierCurveTo(176 * scale, 177 * scale, 168 * scale, 167 * scale, 160 * scale, 115 * scale);
        ctx.closePath();
        fill_path(ctx, color[5], color[6], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(224 * scale, 181 * scale);
        ctx.bezierCurveTo(225 * scale, 138 * scale, 246 * scale, 115 * scale, 263 * scale, 137 * scale);
        ctx.bezierCurveTo(282 * scale, 174 * scale, 279 * scale, 217 * scale, 265 * scale, 243 * scale);
        ctx.bezierCurveTo(253 * scale, 264 * scale, 240 * scale, 256 * scale, 233 * scale, 238 * scale);
        ctx.bezierCurveTo(221 * scale, 212 * scale, 225 * scale, 198 * scale, 224 * scale, 184 * scale);
        ctx.closePath();
        fill_path(ctx, color[5], color[6], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(169 * scale, 289 * scale);
        ctx.bezierCurveTo(161 * scale, 234 * scale, 168 * scale, 197 * scale, 187 * scale, 195 * scale);
        ctx.bezierCurveTo(219 * scale, 189 * scale, 222 * scale, 256 * scale, 216 * scale, 307 * scale);
        ctx.closePath();
        fill_path(ctx, color[5], color[6], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(143 * scale, 146 * scale);
        ctx.bezierCurveTo(161 * scale, 199 * scale, 151 * scale, 245 * scale, 138 * scale, 266 * scale);
        ctx.bezierCurveTo(120.5 * scale, 239.5 * scale, 120.5 * scale, 239.5 * scale, 103 * scale, 213 * scale);
        ctx.closePath();
        fill_path(ctx, color[5], color[6], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(283 * scale, 135 * scale);
        ctx.bezierCurveTo(277 * scale, 176 * scale, 298 * scale, 194 * scale, 315 * scale, 205 * scale);
        ctx.bezierCurveTo(323.5 * scale, 175 * scale, 323.5 * scale, 175 * scale, 332 * scale, 145 * scale);
        ctx.closePath();
        fill_path(ctx, color[5], color[6], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(318 * scale, 223 * scale);
        ctx.bezierCurveTo(290 * scale, 195 * scale, 271 * scale, 256 * scale, 283 * scale, 281 * scale);
        ctx.bezierCurveTo(303.5 * scale, 267 * scale, 303.5 * scale, 267 * scale, 324 * scale, 253 * scale);
        ctx.closePath();
        fill_path(ctx, color[5], color[6], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(142 * scale, 223 * scale);
        ctx.bezierCurveTo(128 * scale, 213 * scale, 123 * scale, 214 * scale, 111 * scale, 223 * scale);
        ctx.closePath();
        fill_path(ctx, color[10], color[10], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(251 * scale, 133 * scale);
        ctx.bezierCurveTo(269 * scale, 188 * scale, 262 * scale, 229 * scale, 251 * scale, 253 * scale);
        ctx.bezierCurveTo(288 * scale, 224 * scale, 273 * scale, 139 * scale, 252 * scale, 133 * scale);
        ctx.closePath();
        fill_path(ctx, color[10], color[10], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(203 * scale, 102 * scale);
        ctx.bezierCurveTo(204 * scale, 136 * scale, 200 * scale, 159 * scale, 189 * scale, 174 * scale);
        ctx.bezierCurveTo(223 * scale, 164 * scale, 219 * scale, 87 * scale, 205 * scale, 83 * scale);
        ctx.closePath();
        fill_path(ctx, color[10], color[10], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(196 * scale, 324 * scale);
        ctx.bezierCurveTo(209 * scale, 239 * scale, 200 * scale, 219 * scale, 192 * scale, 196 * scale);
        ctx.bezierCurveTo(229 * scale, 216 * scale, 219 * scale, 316 * scale, 198 * scale, 325 * scale);
        ctx.closePath();
        fill_path(ctx, color[10], color[10], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(266 * scale, 166 * scale);
        ctx.bezierCurveTo(249 * scale, 154 * scale, 243 * scale, 161 * scale, 233 * scale, 167 * scale);
        fill_path(ctx, undefined, color[6], 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(269 * scale, 192 * scale);
        ctx.bezierCurveTo(256 * scale, 183 * scale, 241 * scale, 186 * scale, 233 * scale, 192 * scale);
        fill_path(ctx, undefined, color[6], 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(263 * scale, 217 * scale);
        ctx.bezierCurveTo(251 * scale, 211 * scale, 242 * scale, 213 * scale, 236 * scale, 218 * scale);
        fill_path(ctx, undefined, color[6], 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(204 * scale, 141 * scale);
        ctx.bezierCurveTo(191 * scale, 131 * scale, 187 * scale, 133 * scale, 176 * scale, 141 * scale);
        fill_path(ctx, undefined, color[6], 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(207 * scale, 230 * scale);
        ctx.bezierCurveTo(193 * scale, 222 * scale, 185 * scale, 224 * scale, 177 * scale, 231 * scale);
        fill_path(ctx, undefined, color[6], 6 * scale);
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(210 * scale, 258 * scale);
        ctx.bezierCurveTo(196 * scale, 247 * scale, 191 * scale, 250 * scale, 177 * scale, 259 * scale);
        fill_path(ctx, undefined, color[6], 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(145 * scale, 196 * scale);
        ctx.bezierCurveTo(130 * scale, 186 * scale, 124 * scale, 187 * scale, 114 * scale, 195 * scale);
        fill_path(ctx, undefined, color[6], 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(218 * scale, 97 * scale);
        ctx.bezierCurveTo(219 * scale, 163 * scale, 201 * scale, 176 * scale, 191 * scale, 175 * scale);
        ctx.bezierCurveTo(176 * scale, 177 * scale, 168 * scale, 167 * scale, 160 * scale, 115 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[6], 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(224 * scale, 181 * scale);
        ctx.bezierCurveTo(225 * scale, 138 * scale, 246 * scale, 115 * scale, 263 * scale, 137 * scale);
        ctx.bezierCurveTo(282 * scale, 174 * scale, 279 * scale, 217 * scale, 265 * scale, 243 * scale);
        ctx.bezierCurveTo(253 * scale, 264 * scale, 240 * scale, 256 * scale, 233 * scale, 238 * scale);
        ctx.bezierCurveTo(221 * scale, 212 * scale, 225 * scale, 198 * scale, 224 * scale, 184 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[6], 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(169 * scale, 289 * scale);
        ctx.bezierCurveTo(161 * scale, 234 * scale, 168 * scale, 197 * scale, 187 * scale, 195 * scale);
        ctx.bezierCurveTo(219 * scale, 189 * scale, 222 * scale, 256 * scale, 216 * scale, 307 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[6], 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(143 * scale, 146 * scale);
        ctx.bezierCurveTo(161 * scale, 199 * scale, 151 * scale, 245 * scale, 138 * scale, 266 * scale);
        ctx.bezierCurveTo(120.5 * scale, 239.5 * scale, 120.5 * scale, 239.5 * scale, 103 * scale, 213 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[6], 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(283 * scale, 135 * scale);
        ctx.bezierCurveTo(277 * scale, 176 * scale, 298 * scale, 194 * scale, 315 * scale, 205 * scale);
        ctx.bezierCurveTo(323.5 * scale, 175 * scale, 323.5 * scale, 175 * scale, 332 * scale, 145 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[6], 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(318 * scale, 223 * scale);
        ctx.bezierCurveTo(290 * scale, 195 * scale, 271 * scale, 256 * scale, 283 * scale, 281 * scale);
        ctx.bezierCurveTo(303.5 * scale, 267 * scale, 303.5 * scale, 267 * scale, 324 * scale, 253 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[6], 6 * scale);
        circle(ctx, 222 * scale, 199 * scale, 120.74767078498864 * scale);
        fill_path(ctx, undefined, color[3], 40 * scale);
        circle(ctx, 220 * scale, 200 * scale, 95.44108130150245 * scale);
        fill_path(ctx, undefined, color[2], 15 * scale);
        circle(ctx, 220 * scale, 201 * scale, 85 * scale);
        fill_path(ctx, undefined, color[4], 10 * scale);
        ctx.globalAlpha = 0.5;
        circle(ctx, 220 * scale, 201 * scale, 82 * scale);
        fill_path(ctx, color[9]);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(5 * scale, 5 * scale);
        circle(ctx, 63 * scale, 136 * scale, 49.193495504995376 * scale);
        fill_path(ctx, color[0], color[0], 4 * scale);
        ctx.globalAlpha = 1;
        ctx.translate(-5 * scale, -5 * scale);
        circle(ctx, 63 * scale, 136 * scale, 49.193495504995376 * scale);
        fill_path(ctx, color[8], color[2], 4 * scale);
        circle(ctx, 63 * scale, 137 * scale, 25.632011235952593 * scale);
        fill_path(ctx, color[7], color[2], 4 * scale);
        return can;
    };

    function create_bread_light_down(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 110 * scale;
        can.height = 110 * scale;
        ctx.globalAlpha = 0.2;
        circle(ctx, 55 * scale, 55 * scale, 55 * scale);
        fill_path(ctx, color[0]);
        return can;
    };

    function create_bread_light_up(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 110 * scale;
        can.height = 110 * scale;
        ctx.globalAlpha = 0.2;
        circle(ctx, 55 * scale, 55 * scale, 55 * scale);
        fill_path(ctx, color[0]);
        return can;
    };

    function create_bridge(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 102 * scale;
        can.height = 102 * scale;
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(3, 3);
        round_rect(ctx, 24 * scale, 26 * scale, 70 * scale, 9 * scale, 10 * scale);
        fill_path(ctx, color[0]);
        round_rect(ctx, 26 * scale, 70 * scale, 70 * scale, 9 * scale, 10 * scale);
        fill_path(ctx, color[0]);
        round_rect(ctx, 5 * scale, 3 * scale, 22 * scale, 94 * scale, 5 * scale);
        fill_path(ctx, color[0]);
        round_rect(ctx, 40 * scale, 3 * scale, 22 * scale, 94 * scale, 5 * scale);
        fill_path(ctx, color[0]);
        round_rect(ctx, 75 * scale, 3 * scale, 22 * scale, 94 * scale, 5 * scale);
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(-3, -3);
        round_rect(ctx, 24 * scale, 26 * scale, 70 * scale, 9 * scale, 10 * scale);
        fill_path(ctx, color[1]);
        round_rect(ctx, 26 * scale, 70 * scale, 70 * scale, 9 * scale, 10 * scale);
        fill_path(ctx, color[1]);
        round_rect(ctx, 5 * scale, 3 * scale, 22 * scale, 94 * scale, 5 * scale);
        fill_path(ctx, color[2], color[3], 4 * scale);
        round_rect(ctx, 40 * scale, 3 * scale, 22 * scale, 94 * scale, 5 * scale);
        fill_path(ctx, color[2], color[3], 4 * scale);
        round_rect(ctx, 75 * scale, 3 * scale, 22 * scale, 94 * scale, 5 * scale);
        fill_path(ctx, color[2], color[3], 4 * scale);
        return can;
    };

    function create_well_border(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 496 * scale;
        can.height = 520 * scale;
        ctx.globalAlpha = 1;
        ctx.translate(0, -10 * scale);
        circle(ctx, 247.01138305664062 * scale, 250.13068389892578 * scale, 232.81967270830015 * scale);
        fill_path(ctx, color[1], color[2], 14 * scale);
        ctx.globalCompositeOperation = "destination-out";
        circle(ctx, 247.01138305664062 * scale, 249.3125 * scale, 161.4465855941215 * scale);
        fill_path(ctx, color[0], color[0], 14 * scale);
        ctx.globalCompositeOperation = "source-over";
        return can;
    };

    function create_well(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 496 * scale;
        can.height = 520 * scale;
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(0, 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(19.000030517578125 * scale, 256.67613983154297 * scale);
        ctx.bezierCurveTo(1.000030517578125 * scale, 332.67613983154297 * scale, 23.000030517578125 * scale, 404.67613983154297 * scale, 95.00003051757812 * scale, 463.67613983154297 * scale);
        ctx.bezierCurveTo(128.00003051757812 * scale, 491.67613983154297 * scale, 165.00003051757812 * scale, 507.67613983154297 * scale, 194.00003051757812 * scale, 512.676139831543 * scale);
        ctx.bezierCurveTo(280.0000305175781 * scale, 517.676139831543 * scale, 291.0000305175781 * scale, 516.676139831543 * scale, 342.0000305175781 * scale, 497.67613983154297 * scale);
        ctx.bezierCurveTo(425.0000305175781 * scale, 454.67613983154297 * scale, 469.0000305175781 * scale, 392.67613983154297 * scale, 468.0000305175781 * scale, 300.67613983154297 * scale);
        ctx.bezierCurveTo(408.5000305175781 * scale, 365.17613983154297 * scale, 408.5000305175781 * scale, 365.17613983154297 * scale, 349.0000305175781 * scale, 429.67613983154297 * scale);
        ctx.bezierCurveTo(256.0000305175781 * scale, 473.67613983154297 * scale, 167.00003051757812 * scale, 459.67613983154297 * scale, 78.00003051757812 * scale, 384.67613983154297 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(0, -10 * scale);
        circle(ctx, 247.01138305664062 * scale, 249.3125 * scale, 161.4465855941215 * scale);
        fill_path(ctx, color[5], undefined, 12 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(0, 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(65.00003051757812 * scale, 263.4034118652344 * scale);
        ctx.bezierCurveTo(109.00003051757812 * scale, 160.40341186523438 * scale, 185.00003051757812 * scale, 128.40341186523438 * scale, 222.00003051757812 * scale, 124.40341186523438 * scale);
        ctx.bezierCurveTo(277.0000305175781 * scale, 116.40341186523438 * scale, 339.0000305175781 * scale, 134.40341186523438 * scale, 379.0000305175781 * scale, 195.40341186523438 * scale);
        ctx.bezierCurveTo(409.0000305175781 * scale, 242.40341186523438 * scale, 416.0000305175781 * scale, 256.4034118652344 * scale, 428.0000305175781 * scale, 304.4034118652344 * scale);
        ctx.bezierCurveTo(457.0000305175781 * scale, 203.40341186523438 * scale, 449.0000305175781 * scale, 183.40341186523438 * scale, 438.0000305175781 * scale, 162.40341186523438 * scale);
        ctx.bezierCurveTo(381.0000305175781 * scale, 73.40341186523438 * scale, 360.0000305175781 * scale, 66.40341186523438 * scale, 257.0000305175781 * scale, 46.403411865234375 * scale);
        ctx.bezierCurveTo(191.00003051757812 * scale, 45.403411865234375 * scale, 142.00003051757812 * scale, 65.40341186523438 * scale, 101.00003051757812 * scale, 115.40341186523438 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        var img = create_well_border(scale, color);
        ctx.drawImage(img, 0, 0);
        ctx.translate(0, -10 * scale);
        circle(ctx, 247.01138305664062 * scale, 249.3125 * scale, 161.4465855941215 * scale);
        fill_path(ctx, undefined, color[2], 12 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(0, 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(325.0113830566406 * scale, 13.767059326171875 * scale);
        ctx.bezierCurveTo(349.5113830566406 * scale, 25.767059326171875 * scale, 349.5113830566406 * scale, 25.767059326171875 * scale, 374.0113830566406 * scale, 37.767059326171875 * scale);
        ctx.bezierCurveTo(384.0113830566406 * scale, 44.767059326171875 * scale, 383.0113830566406 * scale, 50.767059326171875 * scale, 368.0113830566406 * scale, 68.76705932617188 * scale);
        ctx.bezierCurveTo(352.5113830566406 * scale, 91.26705932617188 * scale, 352.5113830566406 * scale, 91.26705932617188 * scale, 337.0113830566406 * scale, 113.76705932617188 * scale);
        ctx.bezierCurveTo(328.0113830566406 * scale, 119.76705932617188 * scale, 328.0113830566406 * scale, 121.76705932617188 * scale, 312.0113830566406 * scale, 112.76705932617188 * scale);
        ctx.bezierCurveTo(303.0113830566406 * scale, 108.26705932617188 * scale, 303.0113830566406 * scale, 108.26705932617188 * scale, 294.0113830566406 * scale, 103.76705932617188 * scale);
        ctx.bezierCurveTo(287.0113830566406 * scale, 99.76705932617188 * scale, 293.0113830566406 * scale, 84.76705932617188 * scale, 297.0113830566406 * scale, 67.76705932617188 * scale);
        ctx.bezierCurveTo(302.0113830566406 * scale, 47.767059326171875 * scale, 302.0113830566406 * scale, 47.767059326171875 * scale, 307.0113830566406 * scale, 27.767059326171875 * scale);
        ctx.bezierCurveTo(310.0113830566406 * scale, 15.767059326171875 * scale, 317.0113830566406 * scale, 12.767059326171875 * scale, 323.0113830566406 * scale, 13.767059326171875 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 12 * scale);
        ctx.globalAlpha = 1;
        ctx.translate(0, -5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(325.0113830566406 * scale, 13.767059326171875 * scale);
        ctx.bezierCurveTo(349.5113830566406 * scale, 25.767059326171875 * scale, 349.5113830566406 * scale, 25.767059326171875 * scale, 374.0113830566406 * scale, 37.767059326171875 * scale);
        ctx.bezierCurveTo(384.0113830566406 * scale, 44.767059326171875 * scale, 383.0113830566406 * scale, 50.767059326171875 * scale, 368.0113830566406 * scale, 68.76705932617188 * scale);
        ctx.bezierCurveTo(352.5113830566406 * scale, 91.26705932617188 * scale, 352.5113830566406 * scale, 91.26705932617188 * scale, 337.0113830566406 * scale, 113.76705932617188 * scale);
        ctx.bezierCurveTo(328.0113830566406 * scale, 119.76705932617188 * scale, 328.0113830566406 * scale, 121.76705932617188 * scale, 312.0113830566406 * scale, 112.76705932617188 * scale);
        ctx.bezierCurveTo(303.0113830566406 * scale, 108.26705932617188 * scale, 303.0113830566406 * scale, 108.26705932617188 * scale, 294.0113830566406 * scale, 103.76705932617188 * scale);
        ctx.bezierCurveTo(287.0113830566406 * scale, 99.76705932617188 * scale, 293.0113830566406 * scale, 84.76705932617188 * scale, 297.0113830566406 * scale, 67.76705932617188 * scale);
        ctx.bezierCurveTo(302.0113830566406 * scale, 47.767059326171875 * scale, 302.0113830566406 * scale, 47.767059326171875 * scale, 307.0113830566406 * scale, 27.767059326171875 * scale);
        ctx.bezierCurveTo(310.0113830566406 * scale, 15.767059326171875 * scale, 317.0113830566406 * scale, 12.767059326171875 * scale, 323.0113830566406 * scale, 13.767059326171875 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[2], 12 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(0, 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(403.0113830566406 * scale, 89.76705932617188 * scale);
        ctx.bezierCurveTo(413.0113830566406 * scale, 76.76705932617188 * scale, 418.0113830566406 * scale, 79.76705932617188 * scale, 428.0113830566406 * scale, 92.76705932617188 * scale);
        ctx.bezierCurveTo(435.0113830566406 * scale, 99.76705932617188 * scale, 435.0113830566406 * scale, 99.76705932617188 * scale, 442.0113830566406 * scale, 106.76705932617188 * scale);
        ctx.bezierCurveTo(450.0113830566406 * scale, 116.76705932617188 * scale, 445.0113830566406 * scale, 119.76705932617188 * scale, 433.0113830566406 * scale, 128.76705932617188 * scale);
        ctx.bezierCurveTo(408.0113830566406 * scale, 146.26705932617188 * scale, 408.0113830566406 * scale, 146.26705932617188 * scale, 383.0113830566406 * scale, 163.76705932617188 * scale);
        ctx.bezierCurveTo(376.0113830566406 * scale, 166.76705932617188 * scale, 377.0113830566406 * scale, 165.76705932617188 * scale, 368.0113830566406 * scale, 156.76705932617188 * scale);
        ctx.bezierCurveTo(359.0113830566406 * scale, 144.76705932617188 * scale, 359.0113830566406 * scale, 142.76705932617188 * scale, 367.0113830566406 * scale, 133.76705932617188 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 12 * scale);
        ctx.globalAlpha = 1;
        ctx.translate(0, -5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(403.0113830566406 * scale, 89.76705932617188 * scale);
        ctx.bezierCurveTo(413.0113830566406 * scale, 76.76705932617188 * scale, 418.0113830566406 * scale, 79.76705932617188 * scale, 428.0113830566406 * scale, 92.76705932617188 * scale);
        ctx.bezierCurveTo(435.0113830566406 * scale, 99.76705932617188 * scale, 435.0113830566406 * scale, 99.76705932617188 * scale, 442.0113830566406 * scale, 106.76705932617188 * scale);
        ctx.bezierCurveTo(450.0113830566406 * scale, 116.76705932617188 * scale, 445.0113830566406 * scale, 119.76705932617188 * scale, 433.0113830566406 * scale, 128.76705932617188 * scale);
        ctx.bezierCurveTo(408.0113830566406 * scale, 146.26705932617188 * scale, 408.0113830566406 * scale, 146.26705932617188 * scale, 383.0113830566406 * scale, 163.76705932617188 * scale);
        ctx.bezierCurveTo(376.0113830566406 * scale, 166.76705932617188 * scale, 377.0113830566406 * scale, 165.76705932617188 * scale, 368.0113830566406 * scale, 156.76705932617188 * scale);
        ctx.bezierCurveTo(359.0113830566406 * scale, 144.76705932617188 * scale, 359.0113830566406 * scale, 142.76705932617188 * scale, 367.0113830566406 * scale, 133.76705932617188 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[2], 12 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(0, 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(228.01138305664062 * scale, 1.767059326171875 * scale);
        ctx.bezierCurveTo(246.51138305664062 * scale, 3.267059326171875 * scale, 246.51138305664062 * scale, 3.267059326171875 * scale, 265.0113830566406 * scale, 4.767059326171875 * scale);
        ctx.bezierCurveTo(273.0113830566406 * scale, 5.767059326171875 * scale, 275.0113830566406 * scale, 11.767059326171875 * scale, 270.0113830566406 * scale, 27.767059326171875 * scale);
        ctx.bezierCurveTo(264.0113830566406 * scale, 54.267059326171875 * scale, 264.0113830566406 * scale, 54.267059326171875 * scale, 258.0113830566406 * scale, 80.76705932617188 * scale);
        ctx.bezierCurveTo(256.0113830566406 * scale, 92.76705932617188 * scale, 256.0113830566406 * scale, 94.76705932617188 * scale, 242.01138305664062 * scale, 93.76705932617188 * scale);
        ctx.bezierCurveTo(226.01138305664062 * scale, 95.76705932617188 * scale, 225.01138305664062 * scale, 91.76705932617188 * scale, 225.01138305664062 * scale, 80.76705932617188 * scale);
        ctx.bezierCurveTo(223.51138305664062 * scale, 50.267059326171875 * scale, 223.51138305664062 * scale, 50.267059326171875 * scale, 222.01138305664062 * scale, 19.767059326171875 * scale);
        ctx.bezierCurveTo(219.01138305664062 * scale, 8.767059326171875 * scale, 224.01138305664062 * scale, 4.767059326171875 * scale, 227.01138305664062 * scale, 2.767059326171875 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 12 * scale);
        ctx.globalAlpha = 1;
        ctx.translate(0, -5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(228.01138305664062 * scale, 1.767059326171875 * scale);
        ctx.bezierCurveTo(246.51138305664062 * scale, 3.267059326171875 * scale, 246.51138305664062 * scale, 3.267059326171875 * scale, 265.0113830566406 * scale, 4.767059326171875 * scale);
        ctx.bezierCurveTo(273.0113830566406 * scale, 5.767059326171875 * scale, 275.0113830566406 * scale, 11.767059326171875 * scale, 270.0113830566406 * scale, 27.767059326171875 * scale);
        ctx.bezierCurveTo(264.0113830566406 * scale, 54.267059326171875 * scale, 264.0113830566406 * scale, 54.267059326171875 * scale, 258.0113830566406 * scale, 80.76705932617188 * scale);
        ctx.bezierCurveTo(256.0113830566406 * scale, 92.76705932617188 * scale, 256.0113830566406 * scale, 94.76705932617188 * scale, 242.01138305664062 * scale, 93.76705932617188 * scale);
        ctx.bezierCurveTo(226.01138305664062 * scale, 95.76705932617188 * scale, 225.01138305664062 * scale, 91.76705932617188 * scale, 225.01138305664062 * scale, 80.76705932617188 * scale);
        ctx.bezierCurveTo(223.51138305664062 * scale, 50.267059326171875 * scale, 223.51138305664062 * scale, 50.267059326171875 * scale, 222.01138305664062 * scale, 19.767059326171875 * scale);
        ctx.bezierCurveTo(219.01138305664062 * scale, 8.767059326171875 * scale, 224.01138305664062 * scale, 4.767059326171875 * scale, 227.01138305664062 * scale, 2.767059326171875 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[2], 12 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(0, 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(142.01138305664062 * scale, 25.767059326171875 * scale);
        ctx.bezierCurveTo(158.51138305664062 * scale, 19.767059326171875 * scale, 158.51138305664062 * scale, 19.767059326171875 * scale, 175.01138305664062 * scale, 13.767059326171875 * scale);
        ctx.bezierCurveTo(188.01138305664062 * scale, 11.767059326171875 * scale, 188.01138305664062 * scale, 16.767059326171875 * scale, 191.01138305664062 * scale, 29.767059326171875 * scale);
        ctx.bezierCurveTo(197.01138305664062 * scale, 60.267059326171875 * scale, 197.01138305664062 * scale, 60.267059326171875 * scale, 203.01138305664062 * scale, 90.76705932617188 * scale);
        ctx.bezierCurveTo(206.01138305664062 * scale, 102.76705932617188 * scale, 196.01138305664062 * scale, 99.76705932617188 * scale, 181.01138305664062 * scale, 105.76705932617188 * scale);
        ctx.bezierCurveTo(175.01138305664062 * scale, 108.76705932617188 * scale, 172.01138305664062 * scale, 104.76705932617188 * scale, 164.01138305664062 * scale, 84.76705932617188 * scale);
        ctx.bezierCurveTo(152.51138305664062 * scale, 63.267059326171875 * scale, 152.51138305664062 * scale, 63.267059326171875 * scale, 141.01138305664062 * scale, 41.767059326171875 * scale);
        ctx.bezierCurveTo(138.01138305664062 * scale, 35.767059326171875 * scale, 138.01138305664062 * scale, 29.767059326171875 * scale, 141.01138305664062 * scale, 27.767059326171875 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 12 * scale);
        ctx.globalAlpha = 1;
        ctx.translate(0, -5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(142.01138305664062 * scale, 25.767059326171875 * scale);
        ctx.bezierCurveTo(158.51138305664062 * scale, 19.767059326171875 * scale, 158.51138305664062 * scale, 19.767059326171875 * scale, 175.01138305664062 * scale, 13.767059326171875 * scale);
        ctx.bezierCurveTo(188.01138305664062 * scale, 11.767059326171875 * scale, 188.01138305664062 * scale, 16.767059326171875 * scale, 191.01138305664062 * scale, 29.767059326171875 * scale);
        ctx.bezierCurveTo(197.01138305664062 * scale, 60.267059326171875 * scale, 197.01138305664062 * scale, 60.267059326171875 * scale, 203.01138305664062 * scale, 90.76705932617188 * scale);
        ctx.bezierCurveTo(206.01138305664062 * scale, 102.76705932617188 * scale, 196.01138305664062 * scale, 99.76705932617188 * scale, 181.01138305664062 * scale, 105.76705932617188 * scale);
        ctx.bezierCurveTo(175.01138305664062 * scale, 108.76705932617188 * scale, 172.01138305664062 * scale, 104.76705932617188 * scale, 164.01138305664062 * scale, 84.76705932617188 * scale);
        ctx.bezierCurveTo(152.51138305664062 * scale, 63.267059326171875 * scale, 152.51138305664062 * scale, 63.267059326171875 * scale, 141.01138305664062 * scale, 41.767059326171875 * scale);
        ctx.bezierCurveTo(138.01138305664062 * scale, 35.767059326171875 * scale, 138.01138305664062 * scale, 29.767059326171875 * scale, 141.01138305664062 * scale, 27.767059326171875 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[2], 12 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(0, 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(70.01138305664062 * scale, 76.76705932617188 * scale);
        ctx.bezierCurveTo(83.01138305664062 * scale, 64.26705932617188 * scale, 83.01138305664062 * scale, 64.26705932617188 * scale, 96.01138305664062 * scale, 51.767059326171875 * scale);
        ctx.bezierCurveTo(104.01138305664062 * scale, 44.767059326171875 * scale, 110.01138305664062 * scale, 51.767059326171875 * scale, 119.01138305664062 * scale, 66.76705932617188 * scale);
        ctx.bezierCurveTo(135.01138305664062 * scale, 88.26705932617188 * scale, 135.01138305664062 * scale, 88.26705932617188 * scale, 151.01138305664062 * scale, 109.76705932617188 * scale);
        ctx.bezierCurveTo(157.01138305664062 * scale, 119.76705932617188 * scale, 153.01138305664062 * scale, 122.76705932617188 * scale, 147.01138305664062 * scale, 129.76705932617188 * scale);
        ctx.bezierCurveTo(138.01138305664062 * scale, 140.76705932617188 * scale, 136.01138305664062 * scale, 140.76705932617188 * scale, 122.01138305664062 * scale, 127.76705932617188 * scale);
        ctx.bezierCurveTo(99.51138305664062 * scale, 110.26705932617188 * scale, 99.51138305664062 * scale, 110.26705932617188 * scale, 77.01138305664062 * scale, 92.76705932617188 * scale);
        ctx.bezierCurveTo(66.01138305664062 * scale, 83.76705932617188 * scale, 66.01138305664062 * scale, 82.76705932617188 * scale, 69.01138305664062 * scale, 78.76705932617188 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 12 * scale);
        ctx.globalAlpha = 1;
        ctx.translate(0, -5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(70.01138305664062 * scale, 76.76705932617188 * scale);
        ctx.bezierCurveTo(83.01138305664062 * scale, 64.26705932617188 * scale, 83.01138305664062 * scale, 64.26705932617188 * scale, 96.01138305664062 * scale, 51.767059326171875 * scale);
        ctx.bezierCurveTo(104.01138305664062 * scale, 44.767059326171875 * scale, 110.01138305664062 * scale, 51.767059326171875 * scale, 119.01138305664062 * scale, 66.76705932617188 * scale);
        ctx.bezierCurveTo(135.01138305664062 * scale, 88.26705932617188 * scale, 135.01138305664062 * scale, 88.26705932617188 * scale, 151.01138305664062 * scale, 109.76705932617188 * scale);
        ctx.bezierCurveTo(157.01138305664062 * scale, 119.76705932617188 * scale, 153.01138305664062 * scale, 122.76705932617188 * scale, 147.01138305664062 * scale, 129.76705932617188 * scale);
        ctx.bezierCurveTo(138.01138305664062 * scale, 140.76705932617188 * scale, 136.01138305664062 * scale, 140.76705932617188 * scale, 122.01138305664062 * scale, 127.76705932617188 * scale);
        ctx.bezierCurveTo(99.51138305664062 * scale, 110.26705932617188 * scale, 99.51138305664062 * scale, 110.26705932617188 * scale, 77.01138305664062 * scale, 92.76705932617188 * scale);
        ctx.bezierCurveTo(66.01138305664062 * scale, 83.76705932617188 * scale, 66.01138305664062 * scale, 82.76705932617188 * scale, 69.01138305664062 * scale, 78.76705932617188 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[2], 12 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(0, 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(33.011383056640625 * scale, 126.76705932617188 * scale);
        ctx.bezierCurveTo(22.011383056640625 * scale, 149.76705932617188 * scale, 22.011383056640625 * scale, 149.76705932617188 * scale, 11.011383056640625 * scale, 172.76705932617188 * scale);
        ctx.bezierCurveTo(7.011383056640625 * scale, 184.76705932617188 * scale, 11.011383056640625 * scale, 189.76705932617188 * scale, 36.011383056640625 * scale, 195.76705932617188 * scale);
        ctx.bezierCurveTo(61.011383056640625 * scale, 202.26705932617188 * scale, 61.011383056640625 * scale, 202.26705932617188 * scale, 86.01138305664062 * scale, 208.76705932617188 * scale);
        ctx.bezierCurveTo(100.01138305664062 * scale, 214.76705932617188 * scale, 102.01138305664062 * scale, 203.76705932617188 * scale, 109.01138305664062 * scale, 189.76705932617188 * scale);
        ctx.bezierCurveTo(117.01138305664062 * scale, 171.76705932617188 * scale, 116.01138305664062 * scale, 166.76705932617188 * scale, 97.01138305664062 * scale, 156.76705932617188 * scale);
        ctx.bezierCurveTo(74.01138305664062 * scale, 140.76705932617188 * scale, 74.01138305664062 * scale, 140.76705932617188 * scale, 51.011383056640625 * scale, 124.76705932617188 * scale);
        ctx.bezierCurveTo(42.011383056640625 * scale, 118.76705932617188 * scale, 37.011383056640625 * scale, 119.76705932617188 * scale, 33.011383056640625 * scale, 126.76705932617188 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 12 * scale);
        ctx.globalAlpha = 1;
        ctx.translate(0, -5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(33.011383056640625 * scale, 126.76705932617188 * scale);
        ctx.bezierCurveTo(22.011383056640625 * scale, 149.76705932617188 * scale, 22.011383056640625 * scale, 149.76705932617188 * scale, 11.011383056640625 * scale, 172.76705932617188 * scale);
        ctx.bezierCurveTo(7.011383056640625 * scale, 184.76705932617188 * scale, 11.011383056640625 * scale, 189.76705932617188 * scale, 36.011383056640625 * scale, 195.76705932617188 * scale);
        ctx.bezierCurveTo(61.011383056640625 * scale, 202.26705932617188 * scale, 61.011383056640625 * scale, 202.26705932617188 * scale, 86.01138305664062 * scale, 208.76705932617188 * scale);
        ctx.bezierCurveTo(100.01138305664062 * scale, 214.76705932617188 * scale, 102.01138305664062 * scale, 203.76705932617188 * scale, 109.01138305664062 * scale, 189.76705932617188 * scale);
        ctx.bezierCurveTo(117.01138305664062 * scale, 171.76705932617188 * scale, 116.01138305664062 * scale, 166.76705932617188 * scale, 97.01138305664062 * scale, 156.76705932617188 * scale);
        ctx.bezierCurveTo(74.01138305664062 * scale, 140.76705932617188 * scale, 74.01138305664062 * scale, 140.76705932617188 * scale, 51.011383056640625 * scale, 124.76705932617188 * scale);
        ctx.bezierCurveTo(42.011383056640625 * scale, 118.76705932617188 * scale, 37.011383056640625 * scale, 119.76705932617188 * scale, 33.011383056640625 * scale, 126.76705932617188 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[2], 12 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(0, 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(13.011383056640625 * scale, 229.76705932617188 * scale);
        ctx.bezierCurveTo(45.511383056640625 * scale, 233.76705932617188 * scale, 45.511383056640625 * scale, 233.76705932617188 * scale, 78.01138305664062 * scale, 237.76705932617188 * scale);
        ctx.bezierCurveTo(92.01138305664062 * scale, 239.76705932617188 * scale, 92.01138305664062 * scale, 246.76705932617188 * scale, 91.01138305664062 * scale, 257.7670593261719 * scale);
        ctx.bezierCurveTo(92.01138305664062 * scale, 275.7670593261719 * scale, 91.01138305664062 * scale, 274.7670593261719 * scale, 68.01138305664062 * scale, 276.7670593261719 * scale);
        ctx.bezierCurveTo(42.511383056640625 * scale, 279.7670593261719 * scale, 42.511383056640625 * scale, 279.7670593261719 * scale, 17.011383056640625 * scale, 282.7670593261719 * scale);
        ctx.bezierCurveTo(2.011383056640625 * scale, 282.7670593261719 * scale, 3.011383056640625 * scale, 276.7670593261719 * scale, 2.011383056640625 * scale, 260.7670593261719 * scale);
        ctx.bezierCurveTo(2.011383056640625 * scale, 231.76705932617188 * scale, 4.011383056640625 * scale, 232.76705932617188 * scale, 11.011383056640625 * scale, 230.76705932617188 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 12 * scale);
        ctx.globalAlpha = 1;
        ctx.translate(0, -5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(13.011383056640625 * scale, 229.76705932617188 * scale);
        ctx.bezierCurveTo(45.511383056640625 * scale, 233.76705932617188 * scale, 45.511383056640625 * scale, 233.76705932617188 * scale, 78.01138305664062 * scale, 237.76705932617188 * scale);
        ctx.bezierCurveTo(92.01138305664062 * scale, 239.76705932617188 * scale, 92.01138305664062 * scale, 246.76705932617188 * scale, 91.01138305664062 * scale, 257.7670593261719 * scale);
        ctx.bezierCurveTo(92.01138305664062 * scale, 275.7670593261719 * scale, 91.01138305664062 * scale, 274.7670593261719 * scale, 68.01138305664062 * scale, 276.7670593261719 * scale);
        ctx.bezierCurveTo(42.511383056640625 * scale, 279.7670593261719 * scale, 42.511383056640625 * scale, 279.7670593261719 * scale, 17.011383056640625 * scale, 282.7670593261719 * scale);
        ctx.bezierCurveTo(2.011383056640625 * scale, 282.7670593261719 * scale, 3.011383056640625 * scale, 276.7670593261719 * scale, 2.011383056640625 * scale, 260.7670593261719 * scale);
        ctx.bezierCurveTo(2.011383056640625 * scale, 231.76705932617188 * scale, 4.011383056640625 * scale, 232.76705932617188 * scale, 11.011383056640625 * scale, 230.76705932617188 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[2], 12 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(0, 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(97.01138305664062 * scale, 329.7670593261719 * scale);
        ctx.bezierCurveTo(68.51138305664062 * scale, 343.7670593261719 * scale, 68.51138305664062 * scale, 343.7670593261719 * scale, 40.011383056640625 * scale, 357.7670593261719 * scale);
        ctx.bezierCurveTo(29.011383056640625 * scale, 360.7670593261719 * scale, 27.011383056640625 * scale, 361.7670593261719 * scale, 20.011383056640625 * scale, 346.7670593261719 * scale);
        ctx.bezierCurveTo(16.511383056640625 * scale, 336.2670593261719 * scale, 16.511383056640625 * scale, 336.2670593261719 * scale, 13.011383056640625 * scale, 325.7670593261719 * scale);
        ctx.bezierCurveTo(10.011383056640625 * scale, 307.7670593261719 * scale, 18.011383056640625 * scale, 312.7670593261719 * scale, 34.011383056640625 * scale, 306.7670593261719 * scale);
        ctx.bezierCurveTo(59.511383056640625 * scale, 302.2670593261719 * scale, 59.511383056640625 * scale, 302.2670593261719 * scale, 85.01138305664062 * scale, 297.7670593261719 * scale);
        ctx.bezierCurveTo(97.01138305664062 * scale, 294.7670593261719 * scale, 100.01138305664062 * scale, 297.7670593261719 * scale, 100.01138305664062 * scale, 307.7670593261719 * scale);
        ctx.bezierCurveTo(105.01138305664062 * scale, 326.7670593261719 * scale, 103.01138305664062 * scale, 325.7670593261719 * scale, 97.01138305664062 * scale, 329.7670593261719 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 12 * scale);
        ctx.globalAlpha = 1;
        ctx.translate(0, -5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(97.01138305664062 * scale, 329.7670593261719 * scale);
        ctx.bezierCurveTo(68.51138305664062 * scale, 343.7670593261719 * scale, 68.51138305664062 * scale, 343.7670593261719 * scale, 40.011383056640625 * scale, 357.7670593261719 * scale);
        ctx.bezierCurveTo(29.011383056640625 * scale, 360.7670593261719 * scale, 27.011383056640625 * scale, 361.7670593261719 * scale, 20.011383056640625 * scale, 346.7670593261719 * scale);
        ctx.bezierCurveTo(16.511383056640625 * scale, 336.2670593261719 * scale, 16.511383056640625 * scale, 336.2670593261719 * scale, 13.011383056640625 * scale, 325.7670593261719 * scale);
        ctx.bezierCurveTo(10.011383056640625 * scale, 307.7670593261719 * scale, 18.011383056640625 * scale, 312.7670593261719 * scale, 34.011383056640625 * scale, 306.7670593261719 * scale);
        ctx.bezierCurveTo(59.511383056640625 * scale, 302.2670593261719 * scale, 59.511383056640625 * scale, 302.2670593261719 * scale, 85.01138305664062 * scale, 297.7670593261719 * scale);
        ctx.bezierCurveTo(97.01138305664062 * scale, 294.7670593261719 * scale, 100.01138305664062 * scale, 297.7670593261719 * scale, 100.01138305664062 * scale, 307.7670593261719 * scale);
        ctx.bezierCurveTo(105.01138305664062 * scale, 326.7670593261719 * scale, 103.01138305664062 * scale, 325.7670593261719 * scale, 97.01138305664062 * scale, 329.7670593261719 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[2], 12 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(0, 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(394.0113830566406 * scale, 181.76705932617188 * scale);
        ctx.bezierCurveTo(426.5113830566406 * scale, 166.76705932617188 * scale, 426.5113830566406 * scale, 166.76705932617188 * scale, 459.0113830566406 * scale, 151.76705932617188 * scale);
        ctx.bezierCurveTo(469.0113830566406 * scale, 152.76705932617188 * scale, 469.0113830566406 * scale, 155.76705932617188 * scale, 472.0113830566406 * scale, 165.76705932617188 * scale);
        ctx.bezierCurveTo(476.0113830566406 * scale, 177.26705932617188 * scale, 476.0113830566406 * scale, 177.26705932617188 * scale, 480.0113830566406 * scale, 188.76705932617188 * scale);
        ctx.bezierCurveTo(483.0113830566406 * scale, 199.76705932617188 * scale, 480.0113830566406 * scale, 200.76705932617188 * scale, 460.0113830566406 * scale, 205.76705932617188 * scale);
        ctx.bezierCurveTo(433.5113830566406 * scale, 210.26705932617188 * scale, 433.5113830566406 * scale, 210.26705932617188 * scale, 407.0113830566406 * scale, 214.76705932617188 * scale);
        ctx.bezierCurveTo(395.0113830566406 * scale, 218.76705932617188 * scale, 397.0113830566406 * scale, 211.76705932617188 * scale, 393.0113830566406 * scale, 202.76705932617188 * scale);
        ctx.bezierCurveTo(387.0113830566406 * scale, 188.76705932617188 * scale, 387.0113830566406 * scale, 187.76705932617188 * scale, 394.0113830566406 * scale, 181.76705932617188 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 12 * scale);
        ctx.globalAlpha = 1;
        ctx.translate(0, -5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(394.0113830566406 * scale, 181.76705932617188 * scale);
        ctx.bezierCurveTo(426.5113830566406 * scale, 166.76705932617188 * scale, 426.5113830566406 * scale, 166.76705932617188 * scale, 459.0113830566406 * scale, 151.76705932617188 * scale);
        ctx.bezierCurveTo(469.0113830566406 * scale, 152.76705932617188 * scale, 469.0113830566406 * scale, 155.76705932617188 * scale, 472.0113830566406 * scale, 165.76705932617188 * scale);
        ctx.bezierCurveTo(476.0113830566406 * scale, 177.26705932617188 * scale, 476.0113830566406 * scale, 177.26705932617188 * scale, 480.0113830566406 * scale, 188.76705932617188 * scale);
        ctx.bezierCurveTo(483.0113830566406 * scale, 199.76705932617188 * scale, 480.0113830566406 * scale, 200.76705932617188 * scale, 460.0113830566406 * scale, 205.76705932617188 * scale);
        ctx.bezierCurveTo(433.5113830566406 * scale, 210.26705932617188 * scale, 433.5113830566406 * scale, 210.26705932617188 * scale, 407.0113830566406 * scale, 214.76705932617188 * scale);
        ctx.bezierCurveTo(395.0113830566406 * scale, 218.76705932617188 * scale, 397.0113830566406 * scale, 211.76705932617188 * scale, 393.0113830566406 * scale, 202.76705932617188 * scale);
        ctx.bezierCurveTo(387.0113830566406 * scale, 188.76705932617188 * scale, 387.0113830566406 * scale, 187.76705932617188 * scale, 394.0113830566406 * scale, 181.76705932617188 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[2], 12 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(0, 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(411.0113830566406 * scale, 234.76705932617188 * scale);
        ctx.bezierCurveTo(446.0113830566406 * scale, 233.26705932617188 * scale, 446.0113830566406 * scale, 233.26705932617188 * scale, 481.0113830566406 * scale, 231.76705932617188 * scale);
        ctx.bezierCurveTo(491.0113830566406 * scale, 232.76705932617188 * scale, 493.0113830566406 * scale, 239.76705932617188 * scale, 491.0113830566406 * scale, 251.76705932617188 * scale);
        ctx.bezierCurveTo(490.0113830566406 * scale, 263.7670593261719 * scale, 490.0113830566406 * scale, 263.7670593261719 * scale, 489.0113830566406 * scale, 275.7670593261719 * scale);
        ctx.bezierCurveTo(487.0113830566406 * scale, 283.7670593261719 * scale, 483.0113830566406 * scale, 284.7670593261719 * scale, 464.0113830566406 * scale, 280.7670593261719 * scale);
        ctx.bezierCurveTo(437.0113830566406 * scale, 273.7670593261719 * scale, 437.0113830566406 * scale, 273.7670593261719 * scale, 410.0113830566406 * scale, 266.7670593261719 * scale);
        ctx.bezierCurveTo(400.0113830566406 * scale, 261.7670593261719 * scale, 401.0113830566406 * scale, 259.7670593261719 * scale, 402.0113830566406 * scale, 249.76705932617188 * scale);
        ctx.bezierCurveTo(401.0113830566406 * scale, 237.76705932617188 * scale, 403.0113830566406 * scale, 235.76705932617188 * scale, 408.0113830566406 * scale, 234.76705932617188 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 12 * scale);
        ctx.globalAlpha = 1;
        ctx.translate(0, -5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(411.0113830566406 * scale, 234.76705932617188 * scale);
        ctx.bezierCurveTo(446.0113830566406 * scale, 233.26705932617188 * scale, 446.0113830566406 * scale, 233.26705932617188 * scale, 481.0113830566406 * scale, 231.76705932617188 * scale);
        ctx.bezierCurveTo(491.0113830566406 * scale, 232.76705932617188 * scale, 493.0113830566406 * scale, 239.76705932617188 * scale, 491.0113830566406 * scale, 251.76705932617188 * scale);
        ctx.bezierCurveTo(490.0113830566406 * scale, 263.7670593261719 * scale, 490.0113830566406 * scale, 263.7670593261719 * scale, 489.0113830566406 * scale, 275.7670593261719 * scale);
        ctx.bezierCurveTo(487.0113830566406 * scale, 283.7670593261719 * scale, 483.0113830566406 * scale, 284.7670593261719 * scale, 464.0113830566406 * scale, 280.7670593261719 * scale);
        ctx.bezierCurveTo(437.0113830566406 * scale, 273.7670593261719 * scale, 437.0113830566406 * scale, 273.7670593261719 * scale, 410.0113830566406 * scale, 266.7670593261719 * scale);
        ctx.bezierCurveTo(400.0113830566406 * scale, 261.7670593261719 * scale, 401.0113830566406 * scale, 259.7670593261719 * scale, 402.0113830566406 * scale, 249.76705932617188 * scale);
        ctx.bezierCurveTo(401.0113830566406 * scale, 237.76705932617188 * scale, 403.0113830566406 * scale, 235.76705932617188 * scale, 408.0113830566406 * scale, 234.76705932617188 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[2], 12 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(0, 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(400.0113830566406 * scale, 290.7670593261719 * scale);
        ctx.bezierCurveTo(437.0113830566406 * scale, 301.2670593261719 * scale, 437.0113830566406 * scale, 301.2670593261719 * scale, 474.0113830566406 * scale, 311.7670593261719 * scale);
        ctx.bezierCurveTo(484.0113830566406 * scale, 319.7670593261719 * scale, 481.0113830566406 * scale, 322.7670593261719 * scale, 474.0113830566406 * scale, 335.7670593261719 * scale);
        ctx.bezierCurveTo(465.5113830566406 * scale, 354.7670593261719 * scale, 465.5113830566406 * scale, 354.7670593261719 * scale, 457.0113830566406 * scale, 373.7670593261719 * scale);
        ctx.bezierCurveTo(449.0113830566406 * scale, 386.7670593261719 * scale, 444.0113830566406 * scale, 384.7670593261719 * scale, 427.0113830566406 * scale, 370.7670593261719 * scale);
        ctx.bezierCurveTo(403.0113830566406 * scale, 354.7670593261719 * scale, 403.0113830566406 * scale, 354.7670593261719 * scale, 379.0113830566406 * scale, 338.7670593261719 * scale);
        ctx.bezierCurveTo(371.0113830566406 * scale, 327.7670593261719 * scale, 373.0113830566406 * scale, 323.7670593261719 * scale, 377.0113830566406 * scale, 313.7670593261719 * scale);
        ctx.bezierCurveTo(386.0113830566406 * scale, 292.7670593261719 * scale, 393.0113830566406 * scale, 288.7670593261719 * scale, 398.0113830566406 * scale, 291.7670593261719 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 12 * scale);
        ctx.globalAlpha = 1;
        ctx.translate(0, -5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(400.0113830566406 * scale, 290.7670593261719 * scale);
        ctx.bezierCurveTo(437.0113830566406 * scale, 301.2670593261719 * scale, 437.0113830566406 * scale, 301.2670593261719 * scale, 474.0113830566406 * scale, 311.7670593261719 * scale);
        ctx.bezierCurveTo(484.0113830566406 * scale, 319.7670593261719 * scale, 481.0113830566406 * scale, 322.7670593261719 * scale, 474.0113830566406 * scale, 335.7670593261719 * scale);
        ctx.bezierCurveTo(465.5113830566406 * scale, 354.7670593261719 * scale, 465.5113830566406 * scale, 354.7670593261719 * scale, 457.0113830566406 * scale, 373.7670593261719 * scale);
        ctx.bezierCurveTo(449.0113830566406 * scale, 386.7670593261719 * scale, 444.0113830566406 * scale, 384.7670593261719 * scale, 427.0113830566406 * scale, 370.7670593261719 * scale);
        ctx.bezierCurveTo(403.0113830566406 * scale, 354.7670593261719 * scale, 403.0113830566406 * scale, 354.7670593261719 * scale, 379.0113830566406 * scale, 338.7670593261719 * scale);
        ctx.bezierCurveTo(371.0113830566406 * scale, 327.7670593261719 * scale, 373.0113830566406 * scale, 323.7670593261719 * scale, 377.0113830566406 * scale, 313.7670593261719 * scale);
        ctx.bezierCurveTo(386.0113830566406 * scale, 292.7670593261719 * scale, 393.0113830566406 * scale, 288.7670593261719 * scale, 398.0113830566406 * scale, 291.7670593261719 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[2], 12 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(0, 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(366.0113830566406 * scale, 361.2216033935547 * scale);
        ctx.bezierCurveTo(393.0113830566406 * scale, 383.2216033935547 * scale, 393.0113830566406 * scale, 383.2216033935547 * scale, 420.0113830566406 * scale, 405.2216033935547 * scale);
        ctx.bezierCurveTo(427.0113830566406 * scale, 414.2216033935547 * scale, 425.0113830566406 * scale, 417.2216033935547 * scale, 413.0113830566406 * scale, 428.2216033935547 * scale);
        ctx.bezierCurveTo(405.5113830566406 * scale, 435.2216033935547 * scale, 405.5113830566406 * scale, 435.2216033935547 * scale, 398.0113830566406 * scale, 442.2216033935547 * scale);
        ctx.bezierCurveTo(388.0113830566406 * scale, 451.2216033935547 * scale, 385.0113830566406 * scale, 445.2216033935547 * scale, 373.0113830566406 * scale, 428.2216033935547 * scale);
        ctx.bezierCurveTo(358.5113830566406 * scale, 408.2216033935547 * scale, 358.5113830566406 * scale, 408.2216033935547 * scale, 344.0113830566406 * scale, 388.2216033935547 * scale);
        ctx.bezierCurveTo(337.0113830566406 * scale, 378.2216033935547 * scale, 342.0113830566406 * scale, 377.2216033935547 * scale, 347.0113830566406 * scale, 371.2216033935547 * scale);
        ctx.bezierCurveTo(359.0113830566406 * scale, 359.2216033935547 * scale, 361.0113830566406 * scale, 358.2216033935547 * scale, 364.0113830566406 * scale, 361.2216033935547 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 12 * scale);
        ctx.globalAlpha = 1;
        ctx.translate(0, -5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(366.0113830566406 * scale, 361.2216033935547 * scale);
        ctx.bezierCurveTo(393.0113830566406 * scale, 383.2216033935547 * scale, 393.0113830566406 * scale, 383.2216033935547 * scale, 420.0113830566406 * scale, 405.2216033935547 * scale);
        ctx.bezierCurveTo(427.0113830566406 * scale, 414.2216033935547 * scale, 425.0113830566406 * scale, 417.2216033935547 * scale, 413.0113830566406 * scale, 428.2216033935547 * scale);
        ctx.bezierCurveTo(405.5113830566406 * scale, 435.2216033935547 * scale, 405.5113830566406 * scale, 435.2216033935547 * scale, 398.0113830566406 * scale, 442.2216033935547 * scale);
        ctx.bezierCurveTo(388.0113830566406 * scale, 451.2216033935547 * scale, 385.0113830566406 * scale, 445.2216033935547 * scale, 373.0113830566406 * scale, 428.2216033935547 * scale);
        ctx.bezierCurveTo(358.5113830566406 * scale, 408.2216033935547 * scale, 358.5113830566406 * scale, 408.2216033935547 * scale, 344.0113830566406 * scale, 388.2216033935547 * scale);
        ctx.bezierCurveTo(337.0113830566406 * scale, 378.2216033935547 * scale, 342.0113830566406 * scale, 377.2216033935547 * scale, 347.0113830566406 * scale, 371.2216033935547 * scale);
        ctx.bezierCurveTo(359.0113830566406 * scale, 359.2216033935547 * scale, 361.0113830566406 * scale, 358.2216033935547 * scale, 364.0113830566406 * scale, 361.2216033935547 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[2], 12 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(0, 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(323.0113830566406 * scale, 393.2216033935547 * scale);
        ctx.bezierCurveTo(338.0113830566406 * scale, 424.7216033935547 * scale, 338.0113830566406 * scale, 424.7216033935547 * scale, 353.0113830566406 * scale, 456.2216033935547 * scale);
        ctx.bezierCurveTo(355.0113830566406 * scale, 467.2216033935547 * scale, 354.0113830566406 * scale, 469.2216033935547 * scale, 336.0113830566406 * scale, 475.2216033935547 * scale);
        ctx.bezierCurveTo(326.0113830566406 * scale, 478.2216033935547 * scale, 326.0113830566406 * scale, 478.2216033935547 * scale, 316.0113830566406 * scale, 481.2216033935547 * scale);
        ctx.bezierCurveTo(304.0113830566406 * scale, 484.2216033935547 * scale, 304.0113830566406 * scale, 477.2216033935547 * scale, 301.0113830566406 * scale, 454.2216033935547 * scale);
        ctx.bezierCurveTo(295.5113830566406 * scale, 429.2216033935547 * scale, 295.5113830566406 * scale, 429.2216033935547 * scale, 290.0113830566406 * scale, 404.2216033935547 * scale);
        ctx.bezierCurveTo(287.0113830566406 * scale, 396.2216033935547 * scale, 297.0113830566406 * scale, 394.2216033935547 * scale, 303.0113830566406 * scale, 392.2216033935547 * scale);
        ctx.bezierCurveTo(316.0113830566406 * scale, 387.2216033935547 * scale, 318.0113830566406 * scale, 387.2216033935547 * scale, 323.0113830566406 * scale, 394.2216033935547 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 12 * scale);
        ctx.globalAlpha = 1;
        ctx.translate(0, -5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(323.0113830566406 * scale, 393.2216033935547 * scale);
        ctx.bezierCurveTo(338.0113830566406 * scale, 424.7216033935547 * scale, 338.0113830566406 * scale, 424.7216033935547 * scale, 353.0113830566406 * scale, 456.2216033935547 * scale);
        ctx.bezierCurveTo(355.0113830566406 * scale, 467.2216033935547 * scale, 354.0113830566406 * scale, 469.2216033935547 * scale, 336.0113830566406 * scale, 475.2216033935547 * scale);
        ctx.bezierCurveTo(326.0113830566406 * scale, 478.2216033935547 * scale, 326.0113830566406 * scale, 478.2216033935547 * scale, 316.0113830566406 * scale, 481.2216033935547 * scale);
        ctx.bezierCurveTo(304.0113830566406 * scale, 484.2216033935547 * scale, 304.0113830566406 * scale, 477.2216033935547 * scale, 301.0113830566406 * scale, 454.2216033935547 * scale);
        ctx.bezierCurveTo(295.5113830566406 * scale, 429.2216033935547 * scale, 295.5113830566406 * scale, 429.2216033935547 * scale, 290.0113830566406 * scale, 404.2216033935547 * scale);
        ctx.bezierCurveTo(287.0113830566406 * scale, 396.2216033935547 * scale, 297.0113830566406 * scale, 394.2216033935547 * scale, 303.0113830566406 * scale, 392.2216033935547 * scale);
        ctx.bezierCurveTo(316.0113830566406 * scale, 387.2216033935547 * scale, 318.0113830566406 * scale, 387.2216033935547 * scale, 323.0113830566406 * scale, 394.2216033935547 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[2], 12 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(0, 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(270.0113830566406 * scale, 413.2216033935547 * scale);
        ctx.bezierCurveTo(271.0113830566406 * scale, 445.7216033935547 * scale, 271.0113830566406 * scale, 445.7216033935547 * scale, 272.0113830566406 * scale, 478.2216033935547 * scale);
        ctx.bezierCurveTo(273.0113830566406 * scale, 490.2216033935547 * scale, 267.0113830566406 * scale, 493.2216033935547 * scale, 249.01138305664062 * scale, 490.2216033935547 * scale);
        ctx.bezierCurveTo(222.01138305664062 * scale, 492.2216033935547 * scale, 220.01138305664062 * scale, 485.2216033935547 * scale, 225.01138305664062 * scale, 467.2216033935547 * scale);
        ctx.bezierCurveTo(230.51138305664062 * scale, 440.2216033935547 * scale, 230.51138305664062 * scale, 440.2216033935547 * scale, 236.01138305664062 * scale, 413.2216033935547 * scale);
        ctx.bezierCurveTo(237.01138305664062 * scale, 405.2216033935547 * scale, 238.01138305664062 * scale, 404.2216033935547 * scale, 253.01138305664062 * scale, 403.2216033935547 * scale);
        ctx.bezierCurveTo(269.0113830566406 * scale, 405.2216033935547 * scale, 270.0113830566406 * scale, 407.2216033935547 * scale, 269.0113830566406 * scale, 412.2216033935547 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 12 * scale);
        ctx.globalAlpha = 1;
        ctx.translate(0, -5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(270.0113830566406 * scale, 413.2216033935547 * scale);
        ctx.bezierCurveTo(271.0113830566406 * scale, 445.7216033935547 * scale, 271.0113830566406 * scale, 445.7216033935547 * scale, 272.0113830566406 * scale, 478.2216033935547 * scale);
        ctx.bezierCurveTo(273.0113830566406 * scale, 490.2216033935547 * scale, 267.0113830566406 * scale, 493.2216033935547 * scale, 249.01138305664062 * scale, 490.2216033935547 * scale);
        ctx.bezierCurveTo(222.01138305664062 * scale, 492.2216033935547 * scale, 220.01138305664062 * scale, 485.2216033935547 * scale, 225.01138305664062 * scale, 467.2216033935547 * scale);
        ctx.bezierCurveTo(230.51138305664062 * scale, 440.2216033935547 * scale, 230.51138305664062 * scale, 440.2216033935547 * scale, 236.01138305664062 * scale, 413.2216033935547 * scale);
        ctx.bezierCurveTo(237.01138305664062 * scale, 405.2216033935547 * scale, 238.01138305664062 * scale, 404.2216033935547 * scale, 253.01138305664062 * scale, 403.2216033935547 * scale);
        ctx.bezierCurveTo(269.0113830566406 * scale, 405.2216033935547 * scale, 270.0113830566406 * scale, 407.2216033935547 * scale, 269.0113830566406 * scale, 412.2216033935547 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[2], 12 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(0, 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(207.01138305664062 * scale, 406.2216033935547 * scale);
        ctx.bezierCurveTo(197.51138305664062 * scale, 440.7216033935547 * scale, 197.51138305664062 * scale, 440.7216033935547 * scale, 188.01138305664062 * scale, 475.2216033935547 * scale);
        ctx.bezierCurveTo(184.01138305664062 * scale, 485.2216033935547 * scale, 179.01138305664062 * scale, 491.2216033935547 * scale, 152.01138305664062 * scale, 477.2216033935547 * scale);
        ctx.bezierCurveTo(136.51138305664062 * scale, 469.7216033935547 * scale, 136.51138305664062 * scale, 469.7216033935547 * scale, 121.01138305664062 * scale, 462.2216033935547 * scale);
        ctx.bezierCurveTo(109.01138305664062 * scale, 453.2216033935547 * scale, 117.01138305664062 * scale, 447.2216033935547 * scale, 133.01138305664062 * scale, 427.2216033935547 * scale);
        ctx.bezierCurveTo(146.51138305664062 * scale, 406.7216033935547 * scale, 146.51138305664062 * scale, 406.7216033935547 * scale, 160.01138305664062 * scale, 386.2216033935547 * scale);
        ctx.bezierCurveTo(163.01138305664062 * scale, 377.2216033935547 * scale, 168.01138305664062 * scale, 378.2216033935547 * scale, 187.01138305664062 * scale, 387.2216033935547 * scale);
        ctx.bezierCurveTo(206.01138305664062 * scale, 395.2216033935547 * scale, 208.01138305664062 * scale, 398.2216033935547 * scale, 207.01138305664062 * scale, 405.2216033935547 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 12 * scale);
        ctx.globalAlpha = 1;
        ctx.translate(0, -5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(207.01138305664062 * scale, 406.2216033935547 * scale);
        ctx.bezierCurveTo(197.51138305664062 * scale, 440.7216033935547 * scale, 197.51138305664062 * scale, 440.7216033935547 * scale, 188.01138305664062 * scale, 475.2216033935547 * scale);
        ctx.bezierCurveTo(184.01138305664062 * scale, 485.2216033935547 * scale, 179.01138305664062 * scale, 491.2216033935547 * scale, 152.01138305664062 * scale, 477.2216033935547 * scale);
        ctx.bezierCurveTo(136.51138305664062 * scale, 469.7216033935547 * scale, 136.51138305664062 * scale, 469.7216033935547 * scale, 121.01138305664062 * scale, 462.2216033935547 * scale);
        ctx.bezierCurveTo(109.01138305664062 * scale, 453.2216033935547 * scale, 117.01138305664062 * scale, 447.2216033935547 * scale, 133.01138305664062 * scale, 427.2216033935547 * scale);
        ctx.bezierCurveTo(146.51138305664062 * scale, 406.7216033935547 * scale, 146.51138305664062 * scale, 406.7216033935547 * scale, 160.01138305664062 * scale, 386.2216033935547 * scale);
        ctx.bezierCurveTo(163.01138305664062 * scale, 377.2216033935547 * scale, 168.01138305664062 * scale, 378.2216033935547 * scale, 187.01138305664062 * scale, 387.2216033935547 * scale);
        ctx.bezierCurveTo(206.01138305664062 * scale, 395.2216033935547 * scale, 208.01138305664062 * scale, 398.2216033935547 * scale, 207.01138305664062 * scale, 405.2216033935547 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[2], 12 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(0, 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(130.01138305664062 * scale, 375.2216033935547 * scale);
        ctx.bezierCurveTo(109.51138305664062 * scale, 400.7216033935547 * scale, 109.51138305664062 * scale, 400.7216033935547 * scale, 89.01138305664062 * scale, 426.2216033935547 * scale);
        ctx.bezierCurveTo(82.01138305664062 * scale, 435.2216033935547 * scale, 77.01138305664062 * scale, 435.2216033935547 * scale, 62.011383056640625 * scale, 417.2216033935547 * scale);
        ctx.bezierCurveTo(43.011383056640625 * scale, 397.2216033935547 * scale, 47.011383056640625 * scale, 395.2216033935547 * scale, 62.011383056640625 * scale, 382.2216033935547 * scale);
        ctx.bezierCurveTo(84.01138305664062 * scale, 366.7216033935547 * scale, 84.01138305664062 * scale, 366.7216033935547 * scale, 106.01138305664062 * scale, 351.2216033935547 * scale);
        ctx.bezierCurveTo(116.01138305664062 * scale, 344.2216033935547 * scale, 120.01138305664062 * scale, 347.2216033935547 * scale, 127.01138305664062 * scale, 356.2216033935547 * scale);
        ctx.bezierCurveTo(137.01138305664062 * scale, 366.2216033935547 * scale, 137.01138305664062 * scale, 366.2216033935547 * scale, 131.01138305664062 * scale, 376.2216033935547 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 12 * scale);
        ctx.globalAlpha = 1;
        ctx.translate(0, -5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(130.01138305664062 * scale, 375.2216033935547 * scale);
        ctx.bezierCurveTo(109.51138305664062 * scale, 400.7216033935547 * scale, 109.51138305664062 * scale, 400.7216033935547 * scale, 89.01138305664062 * scale, 426.2216033935547 * scale);
        ctx.bezierCurveTo(82.01138305664062 * scale, 435.2216033935547 * scale, 77.01138305664062 * scale, 435.2216033935547 * scale, 62.011383056640625 * scale, 417.2216033935547 * scale);
        ctx.bezierCurveTo(43.011383056640625 * scale, 397.2216033935547 * scale, 47.011383056640625 * scale, 395.2216033935547 * scale, 62.011383056640625 * scale, 382.2216033935547 * scale);
        ctx.bezierCurveTo(84.01138305664062 * scale, 366.7216033935547 * scale, 84.01138305664062 * scale, 366.7216033935547 * scale, 106.01138305664062 * scale, 351.2216033935547 * scale);
        ctx.bezierCurveTo(116.01138305664062 * scale, 344.2216033935547 * scale, 120.01138305664062 * scale, 347.2216033935547 * scale, 127.01138305664062 * scale, 356.2216033935547 * scale);
        ctx.bezierCurveTo(137.01138305664062 * scale, 366.2216033935547 * scale, 137.01138305664062 * scale, 366.2216033935547 * scale, 131.01138305664062 * scale, 376.2216033935547 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[2], 12 * scale);
        return can;
    };

    function create_sand(scale, useless, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 218 * scale;
        can.height = 185 * scale;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(64 * scale, 53.135406494140625 * scale);
        ctx.bezierCurveTo(92 * scale, 17.135406494140625 * scale, 116 * scale, 11.135406494140625 * scale, 158 * scale, 53.135406494140625 * scale);
        ctx.bezierCurveTo(178 * scale, 74.13540649414062 * scale, 181 * scale, 81.13540649414062 * scale, 196 * scale, 101.13540649414062 * scale);
        ctx.bezierCurveTo(214 * scale, 127.13540649414062 * scale, 192 * scale, 138.13540649414062 * scale, 173 * scale, 149.13540649414062 * scale);
        ctx.bezierCurveTo(137 * scale, 166.13540649414062 * scale, 74 * scale, 170.13540649414062 * scale, 36 * scale, 141.13540649414062 * scale);
        ctx.bezierCurveTo(13 * scale, 127.13540649414062 * scale, 20 * scale, 119.13540649414062 * scale, 30 * scale, 103.13540649414062 * scale);
        ctx.bezierCurveTo(48 * scale, 71.13540649414062 * scale, 54 * scale, 67.13540649414062 * scale, 63 * scale, 54.135406494140625 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[1], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(107 * scale, 25.135406494140625 * scale);
        ctx.bezierCurveTo(62 * scale, 90.13540649414062 * scale, 54 * scale, 129.13540649414062 * scale, 53 * scale, 151.13540649414062 * scale);
        ctx.bezierCurveTo(39.5 * scale, 142.13540649414062 * scale, 39.5 * scale, 142.13540649414062 * scale, 26 * scale, 133.13540649414062 * scale);
        ctx.bezierCurveTo(23.5 * scale, 128.63540649414062 * scale, 23.5 * scale, 128.63540649414062 * scale, 21 * scale, 124.13540649414062 * scale);
        ctx.bezierCurveTo(22 * scale, 113.13540649414062 * scale, 31 * scale, 99.13540649414062 * scale, 40 * scale, 88.13540649414062 * scale);
        ctx.bezierCurveTo(54.5 * scale, 67.13540649414062 * scale, 54.5 * scale, 67.13540649414062 * scale, 69 * scale, 46.135406494140625 * scale);
        ctx.bezierCurveTo(80.5 * scale, 36.635406494140625 * scale, 80.5 * scale, 36.635406494140625 * scale, 92 * scale, 27.135406494140625 * scale);
        ctx.closePath();
        fill_path(ctx, color[1]);
        return can;
    };

    function create_ice(scale, useless, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 167 * scale;
        can.height = 136 * scale;
        ctx.globalAlpha = 0.5;
        ctx.save();
        ctx.translate(76.71426391601562 * scale, 67.85713195800781 * scale);
        round_rect(ctx, -57.5 * scale, -54.5 * scale, 115 * scale, 109 * scale, 15 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 0.8;
        ctx.save();
        ctx.translate(76.71426391601562 * scale, 67.85713195800781 * scale);
        round_rect(ctx, -57.5 * scale, -54.5 * scale, 115 * scale, 109 * scale, 15 * scale);
        ctx.restore();
        fill_path(ctx, undefined, color[1], 7 * scale);
        ctx.globalAlpha = 0.5;
        ctx.save();
        ctx.translate(91.21426391601562 * scale, 67.35713195800781 * scale);
        round_rect(ctx, -56 * scale, -55 * scale, 115 * scale, 109 * scale, 15 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.save();
        ctx.translate(91.21426391601562 * scale, 67.35713195800781 * scale);
        round_rect(ctx, -56 * scale, -55 * scale, 115 * scale, 109 * scale, 15 * scale);
        ctx.restore();
        fill_path(ctx, undefined, color[1], 7 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(131.21426391601562 * scale, 70.35713195800781 * scale);
        ctx.bezierCurveTo(133.21426391601562 * scale, 95.35713195800781 * scale, 128.21426391601562 * scale, 109.35713195800781 * scale, 108.21426391601562 * scale, 108.35713195800781 * scale);
        fill_path(ctx, undefined, color[1], 10 * scale);
        return can;
    };

    function create_plot(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 163 * scale;
        can.height = 163 * scale;
        ctx.save();
        ctx.translate(82.5 * scale, 81.1015625 * scale);
        ctx.rotate(0);
        round_rect(ctx, -65.5 * scale, -66 * scale, 131 * scale, 131 * scale, 5 * scale);
        ctx.restore();
        fill_path(ctx, color[1]);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(5 * scale, 5 * scale);
        ctx.save();
        ctx.translate(80 * scale, 17.1015625 * scale);
        round_rect(ctx, -64 * scale, -4.5 * scale, 129 * scale, 9 * scale, 5 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(-5 * scale, -5 * scale);
        ctx.save();
        ctx.translate(80 * scale, 17.1015625 * scale);
        round_rect(ctx, -64 * scale, -4.5 * scale, 129 * scale, 9 * scale, 5 * scale);
        ctx.restore();
        fill_path(ctx, color[2], color[3], 3 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(5 * scale, 5 * scale);
        ctx.save();
        ctx.translate(145.5 * scale, 83.6015625 * scale);
        round_rect(ctx, -4.5 * scale, -61 * scale, 9 * scale, 129 * scale, 5 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(-5 * scale, -5 * scale);
        ctx.save();
        ctx.translate(145.5 * scale, 83.6015625 * scale);
        round_rect(ctx, -4.5 * scale, -61 * scale, 9 * scale, 129 * scale, 5 * scale);
        ctx.restore();
        fill_path(ctx, color[2], color[3], 3 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(5 * scale, 5 * scale);
        ctx.save();
        ctx.translate(17.5 * scale, 82.6015625 * scale);
        round_rect(ctx, -4.5 * scale, -65 * scale, 9 * scale, 129 * scale, 5 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(-5 * scale, -5 * scale);
        ctx.save();
        ctx.translate(17.5 * scale, 82.6015625 * scale);
        round_rect(ctx, -4.5 * scale, -65 * scale, 9 * scale, 129 * scale, 5 * scale);
        ctx.restore();
        fill_path(ctx, color[2], color[3], 3 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(5 * scale, 5 * scale);
        ctx.save();
        ctx.translate(80.5 * scale, 145.6015625 * scale);
        round_rect(ctx, -65.5 * scale, -4 * scale, 129 * scale, 9 * scale, 5 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(-5 * scale, -5 * scale);
        ctx.save();
        ctx.translate(80.5 * scale, 145.6015625 * scale);
        round_rect(ctx, -65.5 * scale, -4 * scale, 129 * scale, 9 * scale, 5 * scale);
        ctx.restore();
        fill_path(ctx, color[2], color[3], 3 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(5 * scale, 5 * scale);
        ctx.save();
        ctx.translate(17 * scale, 18.1015625 * scale);
        round_rect(ctx, -11 * scale, -11.5 * scale, 22 * scale, 22 * scale, 5 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(-5 * scale, -5 * scale);
        ctx.save();
        ctx.translate(17 * scale, 18.1015625 * scale);
        round_rect(ctx, -11 * scale, -11.5 * scale, 22 * scale, 22 * scale, 5 * scale);
        ctx.restore();
        fill_path(ctx, color[2], color[3], 3 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(5 * scale, 5 * scale);
        ctx.save();
        ctx.translate(145.5 * scale, 16.6015625 * scale);
        round_rect(ctx, -10.5 * scale, -11.5 * scale, 21 * scale, 22 * scale, 5 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(-5 * scale, -5 * scale);
        ctx.save();
        ctx.translate(145.5 * scale, 16.6015625 * scale);
        round_rect(ctx, -10.5 * scale, -11.5 * scale, 21 * scale, 22 * scale, 5 * scale);
        ctx.restore();
        fill_path(ctx, color[2], color[3], 3 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(5 * scale, 5 * scale);
        ctx.save();
        ctx.translate(145.5 * scale, 144.1015625 * scale);
        round_rect(ctx, -10.5 * scale, -11 * scale, 22 * scale, 22 * scale, 5 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(-5 * scale, -5 * scale);
        ctx.save();
        ctx.translate(145.5 * scale, 144.1015625 * scale);
        round_rect(ctx, -10.5 * scale, -11 * scale, 22 * scale, 22 * scale, 5 * scale);
        ctx.restore();
        fill_path(ctx, color[2], color[3], 3 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(5 * scale, 5 * scale);
        ctx.save();
        ctx.translate(17.5 * scale, 145.1015625 * scale);
        round_rect(ctx, -11.5 * scale, -12 * scale, 22 * scale, 22 * scale, 5 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(-5 * scale, -5 * scale);
        ctx.save();
        ctx.translate(17.5 * scale, 145.1015625 * scale);
        round_rect(ctx, -11.5 * scale, -12 * scale, 22 * scale, 22 * scale, 5 * scale);
        ctx.restore();
        fill_path(ctx, color[2], color[3], 3 * scale);
        return can;
    };

    function create_watering_can(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 168 * scale;
        can.height = 100 * scale;
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(10 * scale, 5 * scale);
        ctx.save();
        ctx.translate(24.5 * scale, 44.30000305175781 * scale);
        round_rect(ctx, -19.5 * scale, -8.5 * scale, 39 * scale, 17 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(115 * scale, 37.80000305175781 * scale);
        ctx.bezierCurveTo(142 * scale, 37.80000305175781 * scale, 140 * scale, 37.80000305175781 * scale, 141 * scale, 37.80000305175781 * scale);
        ctx.bezierCurveTo(147 * scale, 28.800003051757812 * scale, 149 * scale, 26.800003051757812 * scale, 153 * scale, 32.80000305175781 * scale);
        ctx.bezierCurveTo(160 * scale, 42.80000305175781 * scale, 157 * scale, 50.80000305175781 * scale, 153 * scale, 58.80000305175781 * scale);
        ctx.bezierCurveTo(148 * scale, 62.80000305175781 * scale, 147 * scale, 59.80000305175781 * scale, 143 * scale, 52.80000305175781 * scale);
        ctx.bezierCurveTo(129 * scale, 52.80000305175781 * scale, 129 * scale, 52.80000305175781 * scale, 115 * scale, 52.80000305175781 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        circle(ctx, 78 * scale, 44.80000305175781 * scale, 39.44616584663204 * scale);
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(-10 * scale, -5 * scale);
        ctx.save();
        ctx.translate(24.5 * scale, 44.30000305175781 * scale);
        round_rect(ctx, -19.5 * scale, -8.5 * scale, 39 * scale, 17 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, undefined, color[3], 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(115 * scale, 37.80000305175781 * scale);
        ctx.bezierCurveTo(142 * scale, 37.80000305175781 * scale, 140 * scale, 37.80000305175781 * scale, 141 * scale, 37.80000305175781 * scale);
        ctx.bezierCurveTo(147 * scale, 28.800003051757812 * scale, 149 * scale, 26.800003051757812 * scale, 153 * scale, 32.80000305175781 * scale);
        ctx.bezierCurveTo(160 * scale, 42.80000305175781 * scale, 157 * scale, 50.80000305175781 * scale, 153 * scale, 58.80000305175781 * scale);
        ctx.bezierCurveTo(148 * scale, 62.80000305175781 * scale, 147 * scale, 59.80000305175781 * scale, 143 * scale, 52.80000305175781 * scale);
        ctx.bezierCurveTo(129 * scale, 52.80000305175781 * scale, 129 * scale, 52.80000305175781 * scale, 115 * scale, 52.80000305175781 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[3], 6 * scale);
        circle(ctx, 78 * scale, 44.80000305175781 * scale, 42.44616584663204 * scale);
        fill_path(ctx, undefined, color[3], 6 * scale);
        ctx.save();
        ctx.translate(24.5 * scale, 44.30000305175781 * scale);
        round_rect(ctx, -19.5 * scale, -8.5 * scale, 39 * scale, 17 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[1]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(115 * scale, 37.80000305175781 * scale);
        ctx.bezierCurveTo(142 * scale, 37.80000305175781 * scale, 140 * scale, 37.80000305175781 * scale, 141 * scale, 37.80000305175781 * scale);
        ctx.bezierCurveTo(147 * scale, 28.800003051757812 * scale, 149 * scale, 26.800003051757812 * scale, 153 * scale, 32.80000305175781 * scale);
        ctx.bezierCurveTo(160 * scale, 42.80000305175781 * scale, 157 * scale, 50.80000305175781 * scale, 153 * scale, 58.80000305175781 * scale);
        ctx.bezierCurveTo(148 * scale, 62.80000305175781 * scale, 147 * scale, 59.80000305175781 * scale, 143 * scale, 52.80000305175781 * scale);
        ctx.bezierCurveTo(129 * scale, 52.80000305175781 * scale, 129 * scale, 52.80000305175781 * scale, 115 * scale, 52.80000305175781 * scale);
        ctx.closePath();
        fill_path(ctx, color[1]);
        circle(ctx, 78 * scale, 44.80000305175781 * scale, 39.44616584663204 * scale);
        fill_path(ctx, color[2], color[1], 4 * scale);
        circle(ctx, 78 * scale, 44.80000305175781 * scale, 29.68164415931166 * scale);
        fill_path(ctx, color[3], color[1], 4 * scale);
        circle(ctx, 78 * scale, 44 * scale, 20 * scale);
        fill_path(ctx, color[4]);
        return can;
    };

    function create_pirahna(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 158 * scale;
        can.height = 201 * scale;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(96.5 * scale, 76.421875 * scale);
        ctx.bezierCurveTo(100.5 * scale, 64.421875 * scale, 103.5 * scale, 62.421875 * scale, 110.5 * scale, 65.421875 * scale);
        ctx.bezierCurveTo(116.5 * scale, 66.421875 * scale, 117.5 * scale, 67.421875 * scale, 112.5 * scale, 73.421875 * scale);
        ctx.bezierCurveTo(107 * scale, 79.921875 * scale, 107 * scale, 79.921875 * scale, 101.5 * scale, 86.421875 * scale);
        ctx.closePath();
        fill_path(ctx, color[8], color[8], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(61.5 * scale, 78.421875 * scale);
        ctx.bezierCurveTo(57.5 * scale, 73.421875 * scale, 51.5 * scale, 66.421875 * scale, 45.5 * scale, 68.421875 * scale);
        ctx.bezierCurveTo(32.5 * scale, 73.421875 * scale, 38.5 * scale, 75.421875 * scale, 46.5 * scale, 81.421875 * scale);
        ctx.bezierCurveTo(51.5 * scale, 84.921875 * scale, 51.5 * scale, 84.921875 * scale, 56.5 * scale, 88.421875 * scale);
        ctx.closePath();
        fill_path(ctx, color[8], color[8], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(116.5 * scale, 127.421875 * scale);
        ctx.bezierCurveTo(124.5 * scale, 108.421875 * scale, 129.5 * scale, 104.421875 * scale, 141.5 * scale, 107.421875 * scale);
        ctx.bezierCurveTo(156.5 * scale, 112.421875 * scale, 153.5 * scale, 113.421875 * scale, 132.5 * scale, 134.421875 * scale);
        ctx.bezierCurveTo(123.5 * scale, 141.921875 * scale, 123.5 * scale, 141.921875 * scale, 114.5 * scale, 149.421875 * scale);
        ctx.closePath();
        fill_path(ctx, color[8], color[8], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(41.5 * scale, 134.421875 * scale);
        ctx.bezierCurveTo(30.5 * scale, 119.421875 * scale, 25.5 * scale, 111.421875 * scale, 12.5 * scale, 115.421875 * scale);
        ctx.bezierCurveTo(4.5 * scale, 120.421875 * scale, 4.5 * scale, 121.421875 * scale, 26.5 * scale, 142.421875 * scale);
        ctx.bezierCurveTo(35 * scale, 149.921875 * scale, 35 * scale, 149.921875 * scale, 43.5 * scale, 157.421875 * scale);
        ctx.closePath();
        fill_path(ctx, color[8], color[8], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(78.5 * scale, 51.921875 * scale);
        ctx.bezierCurveTo(99.5 * scale, 75.921875 * scale, 110.5 * scale, 96.921875 * scale, 118.5 * scale, 120.921875 * scale);
        ctx.bezierCurveTo(121.5 * scale, 140.921875 * scale, 107.5 * scale, 179.921875 * scale, 75.5 * scale, 183.921875 * scale);
        ctx.bezierCurveTo(30.5 * scale, 169.921875 * scale, 37.5 * scale, 131.921875 * scale, 34.5 * scale, 120.921875 * scale);
        ctx.bezierCurveTo(41.5 * scale, 89.921875 * scale, 61.5 * scale, 67.921875 * scale, 78.5 * scale, 51.921875 * scale);
        ctx.closePath();
        fill_path(ctx, color[8], color[8], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(72.5 * scale, 72.421875 * scale);
        ctx.bezierCurveTo(76.5 * scale, 79.421875 * scale, 79.5 * scale, 80.421875 * scale, 83.5 * scale, 73.421875 * scale);
        ctx.bezierCurveTo(80.5 * scale, 96.921875 * scale, 79.5 * scale, 114.421875 * scale, 77.5 * scale, 120.421875 * scale);
        ctx.closePath();
        fill_path(ctx, color[8], color[8], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(42.5 * scale, 163.421875 * scale);
        ctx.bezierCurveTo(62.5 * scale, 185.421875 * scale, 86.5 * scale, 186.421875 * scale, 111.5 * scale, 165.421875 * scale);
        ctx.bezierCurveTo(107.5 * scale, 176.421875 * scale, 95.5 * scale, 187.421875 * scale, 75.5 * scale, 188.421875 * scale);
        ctx.bezierCurveTo(53.5 * scale, 188.421875 * scale, 43.5 * scale, 171.421875 * scale, 42.5 * scale, 164.421875 * scale);
        ctx.closePath();
        fill_path(ctx, color[8], color[8], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(79.5 * scale, 61.421875 * scale);
        ctx.bezierCurveTo(88.5 * scale, 31.421875 * scale, 81.5 * scale, 16.421875 * scale, 75.5 * scale, 7.421875 * scale);
        ctx.bezierCurveTo(77.5 * scale, 28.421875 * scale, 77.5 * scale, 37.421875 * scale, 68.5 * scale, 42.421875 * scale);
        ctx.bezierCurveTo(79.5 * scale, 57.421875 * scale, 79.5 * scale, 58.421875 * scale, 80.5 * scale, 61.421875 * scale);
        ctx.closePath();
        fill_path(ctx, color[8], color[8], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(72.5 * scale, 72.421875 * scale);
        ctx.bezierCurveTo(76.5 * scale, 79.421875 * scale, 79.5 * scale, 80.421875 * scale, 83.5 * scale, 73.421875 * scale);
        ctx.bezierCurveTo(80.5 * scale, 96.921875 * scale, 79.5 * scale, 114.421875 * scale, 77.5 * scale, 120.421875 * scale);
        ctx.closePath();
        fill_path(ctx, color[8], color[8], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(96.5 * scale, 76.421875 * scale);
        ctx.bezierCurveTo(100.5 * scale, 64.421875 * scale, 103.5 * scale, 62.421875 * scale, 110.5 * scale, 65.421875 * scale);
        ctx.bezierCurveTo(116.5 * scale, 66.421875 * scale, 117.5 * scale, 67.421875 * scale, 112.5 * scale, 73.421875 * scale);
        ctx.bezierCurveTo(107 * scale, 79.921875 * scale, 107 * scale, 79.921875 * scale, 101.5 * scale, 86.421875 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(61.5 * scale, 78.421875 * scale);
        ctx.bezierCurveTo(57.5 * scale, 73.421875 * scale, 51.5 * scale, 66.421875 * scale, 45.5 * scale, 68.421875 * scale);
        ctx.bezierCurveTo(32.5 * scale, 73.421875 * scale, 38.5 * scale, 75.421875 * scale, 46.5 * scale, 81.421875 * scale);
        ctx.bezierCurveTo(51.5 * scale, 84.921875 * scale, 51.5 * scale, 84.921875 * scale, 56.5 * scale, 88.421875 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(116.5 * scale, 127.421875 * scale);
        ctx.bezierCurveTo(124.5 * scale, 108.421875 * scale, 129.5 * scale, 104.421875 * scale, 141.5 * scale, 107.421875 * scale);
        ctx.bezierCurveTo(156.5 * scale, 112.421875 * scale, 153.5 * scale, 113.421875 * scale, 132.5 * scale, 134.421875 * scale);
        ctx.bezierCurveTo(123.5 * scale, 141.921875 * scale, 123.5 * scale, 141.921875 * scale, 114.5 * scale, 149.421875 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(41.5 * scale, 134.421875 * scale);
        ctx.bezierCurveTo(30.5 * scale, 119.421875 * scale, 25.5 * scale, 111.421875 * scale, 12.5 * scale, 115.421875 * scale);
        ctx.bezierCurveTo(4.5 * scale, 120.421875 * scale, 4.5 * scale, 121.421875 * scale, 26.5 * scale, 142.421875 * scale);
        ctx.bezierCurveTo(35 * scale, 149.921875 * scale, 35 * scale, 149.921875 * scale, 43.5 * scale, 157.421875 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(78.5 * scale, 51.921875 * scale);
        ctx.bezierCurveTo(99.5 * scale, 75.921875 * scale, 110.5 * scale, 96.921875 * scale, 118.5 * scale, 120.921875 * scale);
        ctx.bezierCurveTo(121.5 * scale, 140.921875 * scale, 107.5 * scale, 179.921875 * scale, 75.5 * scale, 183.921875 * scale);
        ctx.bezierCurveTo(30.5 * scale, 169.921875 * scale, 37.5 * scale, 131.921875 * scale, 34.5 * scale, 120.921875 * scale);
        ctx.bezierCurveTo(41.5 * scale, 89.921875 * scale, 61.5 * scale, 67.921875 * scale, 78.5 * scale, 51.921875 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[2], 4 * scale);
        circle(ctx, 108.5 * scale, 148.421875 * scale, 9 * scale);
        fill_path(ctx, color[5]);
        circle(ctx, 106.5 * scale, 144.421875 * scale, 3 * scale);
        fill_path(ctx, color[6]);
        circle(ctx, 46.5 * scale, 148.421875 * scale, 9 * scale);
        fill_path(ctx, color[5]);
        circle(ctx, 44.5 * scale, 144.421875 * scale, 3 * scale);
        fill_path(ctx, color[6]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(116.5 * scale, 114.421875 * scale);
        ctx.bezierCurveTo(121.5 * scale, 137.421875 * scale, 118.5 * scale, 133.421875 * scale, 108.5 * scale, 139.421875 * scale);
        ctx.bezierCurveTo(94.5 * scale, 146.421875 * scale, 96.5 * scale, 148.421875 * scale, 95.5 * scale, 152.421875 * scale);
        fill_path(ctx, color[3], color[2], 4 * scale);
        ctx.beginPath();
        ctx.translate(0, -2 * scale);
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(35.5 * scale, 131.421875 * scale);
        ctx.bezierCurveTo(36.5 * scale, 140.421875 * scale, 39.5 * scale, 140.421875 * scale, 49.5 * scale, 143.421875 * scale);
        ctx.bezierCurveTo(59.5 * scale, 149.421875 * scale, 57.5 * scale, 151.421875 * scale, 59.5 * scale, 155.421875 * scale);
        fill_path(ctx, color[3], color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(84.5 * scale, 57.421875 * scale);
        ctx.bezierCurveTo(101.5 * scale, 120.421875 * scale, 92.5 * scale, 127.421875 * scale, 78.5 * scale, 134.421875 * scale);
        ctx.bezierCurveTo(51.5 * scale, 131.421875 * scale, 63.5 * scale, 102.421875 * scale, 70.5 * scale, 59.421875 * scale);
        ctx.bezierCurveTo(75 * scale, 55.421875 * scale, 78.5 * scale, 52.421875 * scale, 79.5 * scale, 51.421875 * scale);
        ctx.closePath();
        fill_path(ctx, color[4]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(79.5 * scale, 61.421875 * scale);
        ctx.bezierCurveTo(88.5 * scale, 31.421875 * scale, 81.5 * scale, 16.421875 * scale, 75.5 * scale, 7.421875 * scale);
        ctx.bezierCurveTo(77.5 * scale, 28.421875 * scale, 77.5 * scale, 37.421875 * scale, 68.5 * scale, 42.421875 * scale);
        ctx.bezierCurveTo(79.5 * scale, 57.421875 * scale, 79.5 * scale, 58.421875 * scale, 80.5 * scale, 61.421875 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(72.5 * scale, 72.421875 * scale);
        ctx.bezierCurveTo(76.5 * scale, 79.421875 * scale, 79.5 * scale, 80.421875 * scale, 83.5 * scale, 73.421875 * scale);
        ctx.bezierCurveTo(80.5 * scale, 96.921875 * scale, 79.5 * scale, 114.421875 * scale, 77.5 * scale, 120.421875 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(87.5 * scale, 154.421875 * scale);
        ctx.bezierCurveTo(93.5 * scale, 163.921875 * scale, 93.5 * scale, 163.921875 * scale, 99.5 * scale, 173.421875 * scale);
        ctx.bezierCurveTo(95 * scale, 177.421875 * scale, 95 * scale, 177.421875 * scale, 90.5 * scale, 181.421875 * scale);
        ctx.bezierCurveTo(89 * scale, 167.921875 * scale, 89 * scale, 167.921875 * scale, 87.5 * scale, 154.421875 * scale);
        ctx.closePath();
        fill_path(ctx, color[6], color[7], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(81.5 * scale, 164.421875 * scale);
        ctx.bezierCurveTo(84 * scale, 172.921875 * scale, 84 * scale, 172.921875 * scale, 86.5 * scale, 181.421875 * scale);
        ctx.bezierCurveTo(82.5 * scale, 182.421875 * scale, 82.5 * scale, 182.421875 * scale, 78.5 * scale, 183.421875 * scale);
        ctx.closePath();
        fill_path(ctx, color[6], color[7], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(72.5 * scale, 164.421875 * scale);
        ctx.bezierCurveTo(73.5 * scale, 173.921875 * scale, 73.5 * scale, 173.921875 * scale, 74.5 * scale, 183.421875 * scale);
        ctx.bezierCurveTo(70.5 * scale, 182.921875 * scale, 70.5 * scale, 182.921875 * scale, 66.5 * scale, 182.421875 * scale);
        ctx.closePath();
        fill_path(ctx, color[6], color[7], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(65.5 * scale, 156.421875 * scale);
        ctx.bezierCurveTo(65 * scale, 168.421875 * scale, 65 * scale, 168.421875 * scale, 64.5 * scale, 180.421875 * scale);
        ctx.bezierCurveTo(58.5 * scale, 177.421875 * scale, 58.5 * scale, 177.421875 * scale, 52.5 * scale, 174.421875 * scale);
        ctx.closePath();
        fill_path(ctx, color[6], color[7], 2 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(42.5 * scale, 163.421875 * scale);
        ctx.bezierCurveTo(62.5 * scale, 185.421875 * scale, 86.5 * scale, 186.421875 * scale, 111.5 * scale, 165.421875 * scale);
        ctx.bezierCurveTo(107.5 * scale, 176.421875 * scale, 95.5 * scale, 187.421875 * scale, 75.5 * scale, 188.421875 * scale);
        ctx.bezierCurveTo(53.5 * scale, 188.421875 * scale, 43.5 * scale, 171.421875 * scale, 42.5 * scale, 164.421875 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[2], 4 * scale);
        return can;
    };

    function create_hurt_pirahna(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 158 * scale;
        can.height = 201 * scale;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(96.5 * scale, 76.421875 * scale);
        ctx.bezierCurveTo(100.5 * scale, 64.421875 * scale, 103.5 * scale, 62.421875 * scale, 110.5 * scale, 65.421875 * scale);
        ctx.bezierCurveTo(116.5 * scale, 66.421875 * scale, 117.5 * scale, 67.421875 * scale, 112.5 * scale, 73.421875 * scale);
        ctx.bezierCurveTo(107 * scale, 79.921875 * scale, 107 * scale, 79.921875 * scale, 101.5 * scale, 86.421875 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(61.5 * scale, 78.421875 * scale);
        ctx.bezierCurveTo(57.5 * scale, 73.421875 * scale, 51.5 * scale, 66.421875 * scale, 45.5 * scale, 68.421875 * scale);
        ctx.bezierCurveTo(32.5 * scale, 73.421875 * scale, 38.5 * scale, 75.421875 * scale, 46.5 * scale, 81.421875 * scale);
        ctx.bezierCurveTo(51.5 * scale, 84.921875 * scale, 51.5 * scale, 84.921875 * scale, 56.5 * scale, 88.421875 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(116.5 * scale, 127.421875 * scale);
        ctx.bezierCurveTo(124.5 * scale, 108.421875 * scale, 129.5 * scale, 104.421875 * scale, 141.5 * scale, 107.421875 * scale);
        ctx.bezierCurveTo(156.5 * scale, 112.421875 * scale, 153.5 * scale, 113.421875 * scale, 132.5 * scale, 134.421875 * scale);
        ctx.bezierCurveTo(123.5 * scale, 141.921875 * scale, 123.5 * scale, 141.921875 * scale, 114.5 * scale, 149.421875 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(41.5 * scale, 134.421875 * scale);
        ctx.bezierCurveTo(30.5 * scale, 119.421875 * scale, 25.5 * scale, 111.421875 * scale, 12.5 * scale, 115.421875 * scale);
        ctx.bezierCurveTo(4.5 * scale, 120.421875 * scale, 4.5 * scale, 121.421875 * scale, 26.5 * scale, 142.421875 * scale);
        ctx.bezierCurveTo(35 * scale, 149.921875 * scale, 35 * scale, 149.921875 * scale, 43.5 * scale, 157.421875 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(78.5 * scale, 51.921875 * scale);
        ctx.bezierCurveTo(99.5 * scale, 75.921875 * scale, 110.5 * scale, 96.921875 * scale, 118.5 * scale, 120.921875 * scale);
        ctx.bezierCurveTo(121.5 * scale, 140.921875 * scale, 107.5 * scale, 179.921875 * scale, 75.5 * scale, 183.921875 * scale);
        ctx.bezierCurveTo(30.5 * scale, 169.921875 * scale, 37.5 * scale, 131.921875 * scale, 34.5 * scale, 120.921875 * scale);
        ctx.bezierCurveTo(41.5 * scale, 89.921875 * scale, 61.5 * scale, 67.921875 * scale, 78.5 * scale, 51.921875 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(72.5 * scale, 72.421875 * scale);
        ctx.bezierCurveTo(76.5 * scale, 79.421875 * scale, 79.5 * scale, 80.421875 * scale, 83.5 * scale, 73.421875 * scale);
        ctx.bezierCurveTo(80.5 * scale, 96.921875 * scale, 79.5 * scale, 114.421875 * scale, 77.5 * scale, 120.421875 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(42.5 * scale, 163.421875 * scale);
        ctx.bezierCurveTo(62.5 * scale, 185.421875 * scale, 86.5 * scale, 186.421875 * scale, 111.5 * scale, 165.421875 * scale);
        ctx.bezierCurveTo(107.5 * scale, 176.421875 * scale, 95.5 * scale, 187.421875 * scale, 75.5 * scale, 188.421875 * scale);
        ctx.bezierCurveTo(53.5 * scale, 188.421875 * scale, 43.5 * scale, 171.421875 * scale, 42.5 * scale, 164.421875 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(79.5 * scale, 61.421875 * scale);
        ctx.bezierCurveTo(88.5 * scale, 31.421875 * scale, 81.5 * scale, 16.421875 * scale, 75.5 * scale, 7.421875 * scale);
        ctx.bezierCurveTo(77.5 * scale, 28.421875 * scale, 77.5 * scale, 37.421875 * scale, 68.5 * scale, 42.421875 * scale);
        ctx.bezierCurveTo(79.5 * scale, 57.421875 * scale, 79.5 * scale, 58.421875 * scale, 80.5 * scale, 61.421875 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(72.5 * scale, 72.421875 * scale);
        ctx.bezierCurveTo(76.5 * scale, 79.421875 * scale, 79.5 * scale, 80.421875 * scale, 83.5 * scale, 73.421875 * scale);
        ctx.bezierCurveTo(80.5 * scale, 96.921875 * scale, 79.5 * scale, 114.421875 * scale, 77.5 * scale, 120.421875 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 10 * scale);
        return can;
    };

    function create_flour(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 400 * scale;
        can.height = 170 * scale;
        ctx.translate(0, -170 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(159.5 * scale, 322.0625 * scale);
        ctx.bezierCurveTo(240.5 * scale, 293.0625 * scale, 240.5 * scale, 293.0625 * scale, 321.5 * scale, 264.0625 * scale);
        ctx.bezierCurveTo(276.5 * scale, 230.0625 * scale, 276.5 * scale, 230.0625 * scale, 231.5 * scale, 196.0625 * scale);
        ctx.bezierCurveTo(158.5 * scale, 221.5625 * scale, 158.5 * scale, 221.5625 * scale, 85.5 * scale, 247.0625 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[1], 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(212.5 * scale, 270.0625 * scale);
        ctx.bezierCurveTo(235 * scale, 261.5625 * scale, 235 * scale, 261.5625 * scale, 257.5 * scale, 253.0625 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[0], 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(193.5 * scale, 226.0625 * scale);
        ctx.bezierCurveTo(204.5 * scale, 242.0625 * scale, 242.5 * scale, 237.0625 * scale, 251.5 * scale, 225.0625 * scale);
        ctx.bezierCurveTo(246.5 * scale, 195.0625 * scale, 205.5 * scale, 190.0625 * scale, 193.5 * scale, 227.0625 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[3], 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(164.5 * scale, 245.0625 * scale);
        ctx.bezierCurveTo(182.5 * scale, 264.0625 * scale, 252.5 * scale, 258.0625 * scale, 276.5 * scale, 244.0625 * scale);
        ctx.bezierCurveTo(265.5 * scale, 226.0625 * scale, 244.5 * scale, 231.0625 * scale, 229.5 * scale, 230.0625 * scale);
        ctx.bezierCurveTo(205.5 * scale, 227.0625 * scale, 175.5 * scale, 202.0625 * scale, 162.5 * scale, 244.0625 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[3], 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(115.5 * scale, 260.0625 * scale);
        ctx.bezierCurveTo(134.5 * scale, 279.0625 * scale, 170.5 * scale, 275.0625 * scale, 191.5 * scale, 257.0625 * scale);
        ctx.bezierCurveTo(174.5 * scale, 208.0625 * scale, 142.5 * scale, 197.0625 * scale, 116.5 * scale, 259.0625 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[3], 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(152.5 * scale, 278.0625 * scale);
        ctx.bezierCurveTo(165.5 * scale, 294.0625 * scale, 200.5 * scale, 287.0625 * scale, 216.5 * scale, 278.0625 * scale);
        ctx.bezierCurveTo(206.5 * scale, 247.0625 * scale, 173.5 * scale, 233.0625 * scale, 153.5 * scale, 276.0625 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[3], 12 * scale);
        return can;
    };

    function create_leaderboard(scale) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        var w = 200 * scale;
        var h = 270 * scale;
        var r = 8 * scale;
        can.width = w;
        can.height = h + 20;
        ctx.beginPath();
        round_rect(ctx, 0, 0, w, h - r, r);
        ctx.globalAlpha = 0.5;
        fill_path(ctx, "#1D6055");
        ctx.globalAlpha = 1;
        var text = create_text(scale, "Leaderboard", 25, "#FFF");
        ctx.drawImage(text, (w - text.width) / 2, scale * 5);
        return can;
    };

    function create_pumpkin(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 272 * scale;
        can.height = 264 * scale;
        ctx.translate(0, 20 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(56.999969482421875 * scale, 84.517333984375 * scale);
        ctx.bezierCurveTo(61.999969482421875 * scale, 58.517333984375 * scale, 79.99996948242188 * scale, 50.517333984375 * scale, 102.99996948242188 * scale, 50.517333984375 * scale);
        ctx.bezierCurveTo(119.99996948242188 * scale, 26.517333984375 * scale, 137.99996948242188 * scale, 32.517333984375 * scale, 156.99996948242188 * scale, 44.517333984375 * scale);
        ctx.bezierCurveTo(187.99996948242188 * scale, 42.517333984375 * scale, 195.99996948242188 * scale, 50.517333984375 * scale, 202.99996948242188 * scale, 77.517333984375 * scale);
        ctx.bezierCurveTo(229.99996948242188 * scale, 80.517333984375 * scale, 231.99996948242188 * scale, 96.517333984375 * scale, 229.99996948242188 * scale, 118.517333984375 * scale);
        ctx.bezierCurveTo(241.99996948242188 * scale, 147.517333984375 * scale, 236.99996948242188 * scale, 148.517333984375 * scale, 220.99996948242188 * scale, 165.517333984375 * scale);
        ctx.bezierCurveTo(222.99996948242188 * scale, 192.517333984375 * scale, 209.99996948242188 * scale, 212.517333984375 * scale, 177.99996948242188 * scale, 213.517333984375 * scale);
        ctx.bezierCurveTo(159.99996948242188 * scale, 234.517333984375 * scale, 141.99996948242188 * scale, 234.517333984375 * scale, 116.99996948242188 * scale, 222.517333984375 * scale);
        ctx.bezierCurveTo(72.99996948242188 * scale, 226.517333984375 * scale, 66.99996948242188 * scale, 207.517333984375 * scale, 65.99996948242188 * scale, 190.517333984375 * scale);
        ctx.bezierCurveTo(35.999969482421875 * scale, 180.517333984375 * scale, 30.999969482421875 * scale, 162.517333984375 * scale, 39.999969482421875 * scale, 135.517333984375 * scale);
        ctx.bezierCurveTo(23.999969482421875 * scale, 110.517333984375 * scale, 43.999969482421875 * scale, 90.517333984375 * scale, 55.999969482421875 * scale, 85.517333984375 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.translate(0, -20 * scale);
        ctx.globalAlpha = 1;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(56.999969482421875 * scale, 84.517333984375 * scale);
        ctx.bezierCurveTo(61.999969482421875 * scale, 58.517333984375 * scale, 79.99996948242188 * scale, 50.517333984375 * scale, 102.99996948242188 * scale, 50.517333984375 * scale);
        ctx.bezierCurveTo(119.99996948242188 * scale, 26.517333984375 * scale, 137.99996948242188 * scale, 32.517333984375 * scale, 156.99996948242188 * scale, 44.517333984375 * scale);
        ctx.bezierCurveTo(187.99996948242188 * scale, 42.517333984375 * scale, 195.99996948242188 * scale, 50.517333984375 * scale, 202.99996948242188 * scale, 77.517333984375 * scale);
        ctx.bezierCurveTo(229.99996948242188 * scale, 80.517333984375 * scale, 231.99996948242188 * scale, 96.517333984375 * scale, 229.99996948242188 * scale, 118.517333984375 * scale);
        ctx.bezierCurveTo(241.99996948242188 * scale, 147.517333984375 * scale, 236.99996948242188 * scale, 148.517333984375 * scale, 220.99996948242188 * scale, 165.517333984375 * scale);
        ctx.bezierCurveTo(222.99996948242188 * scale, 192.517333984375 * scale, 209.99996948242188 * scale, 212.517333984375 * scale, 177.99996948242188 * scale, 213.517333984375 * scale);
        ctx.bezierCurveTo(159.99996948242188 * scale, 234.517333984375 * scale, 141.99996948242188 * scale, 234.517333984375 * scale, 116.99996948242188 * scale, 222.517333984375 * scale);
        ctx.bezierCurveTo(72.99996948242188 * scale, 226.517333984375 * scale, 66.99996948242188 * scale, 207.517333984375 * scale, 65.99996948242188 * scale, 190.517333984375 * scale);
        ctx.bezierCurveTo(35.999969482421875 * scale, 180.517333984375 * scale, 30.999969482421875 * scale, 162.517333984375 * scale, 39.999969482421875 * scale, 135.517333984375 * scale);
        ctx.bezierCurveTo(23.999969482421875 * scale, 110.517333984375 * scale, 43.999969482421875 * scale, 90.517333984375 * scale, 55.999969482421875 * scale, 85.517333984375 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(123.99996948242188 * scale, 116.18402099609375 * scale);
        ctx.bezierCurveTo(115.99996948242188 * scale, 99.18402099609375 * scale, 109.99996948242188 * scale, 74.18402099609375 * scale, 109.99996948242188 * scale, 63.18402099609375 * scale);
        ctx.bezierCurveTo(115.99996948242188 * scale, 69.18402099609375 * scale, 125.99996948242188 * scale, 87.18402099609375 * scale, 137.99996948242188 * scale, 112.18402099609375 * scale);
        ctx.bezierCurveTo(142.99996948242188 * scale, 84.18402099609375 * scale, 143.99996948242188 * scale, 76.18402099609375 * scale, 153.99996948242188 * scale, 62.18402099609375 * scale);
        ctx.bezierCurveTo(155.99996948242188 * scale, 79.18402099609375 * scale, 149.99996948242188 * scale, 110.18402099609375 * scale, 151.99996948242188 * scale, 117.18402099609375 * scale);
        ctx.bezierCurveTo(162.99996948242188 * scale, 104.18402099609375 * scale, 180.99996948242188 * scale, 91.18402099609375 * scale, 191.99996948242188 * scale, 91.18402099609375 * scale);
        ctx.bezierCurveTo(185.99996948242188 * scale, 102.18402099609375 * scale, 180.99996948242188 * scale, 106.18402099609375 * scale, 160.99996948242188 * scale, 124.18402099609375 * scale);
        ctx.bezierCurveTo(190.99996948242188 * scale, 121.18402099609375 * scale, 199.99996948242188 * scale, 120.18402099609375 * scale, 207.99996948242188 * scale, 123.18402099609375 * scale);
        ctx.bezierCurveTo(199.99996948242188 * scale, 129.18402099609375 * scale, 181.99996948242188 * scale, 132.18402099609375 * scale, 160.99996948242188 * scale, 135.18402099609375 * scale);
        ctx.bezierCurveTo(179.99996948242188 * scale, 142.18402099609375 * scale, 193.99996948242188 * scale, 151.18402099609375 * scale, 196.99996948242188 * scale, 156.18402099609375 * scale);
        ctx.bezierCurveTo(185.99996948242188 * scale, 156.18402099609375 * scale, 163.99996948242188 * scale, 149.18402099609375 * scale, 152.99996948242188 * scale, 147.18402099609375 * scale);
        ctx.bezierCurveTo(157.99996948242188 * scale, 155.18402099609375 * scale, 165.99996948242188 * scale, 176.18402099609375 * scale, 169.99996948242188 * scale, 195.18402099609375 * scale);
        ctx.bezierCurveTo(162.99996948242188 * scale, 190.18402099609375 * scale, 147.99996948242188 * scale, 167.18402099609375 * scale, 139.99996948242188 * scale, 153.18402099609375 * scale);
        ctx.bezierCurveTo(137.99996948242188 * scale, 167.18402099609375 * scale, 126.99996948242188 * scale, 194.18402099609375 * scale, 119.99996948242188 * scale, 204.18402099609375 * scale);
        ctx.bezierCurveTo(117.99996948242188 * scale, 186.18402099609375 * scale, 123.99996948242188 * scale, 165.18402099609375 * scale, 126.99996948242188 * scale, 149.18402099609375 * scale);
        ctx.bezierCurveTo(110.99996948242188 * scale, 163.18402099609375 * scale, 103.99996948242188 * scale, 170.18402099609375 * scale, 82.99996948242188 * scale, 177.18402099609375 * scale);
        ctx.bezierCurveTo(90.99996948242188 * scale, 162.18402099609375 * scale, 99.99996948242188 * scale, 153.18402099609375 * scale, 117.99996948242188 * scale, 140.18402099609375 * scale);
        ctx.bezierCurveTo(97.99996948242188 * scale, 140.18402099609375 * scale, 83.99996948242188 * scale, 139.18402099609375 * scale, 65.99996948242188 * scale, 132.18402099609375 * scale);
        ctx.bezierCurveTo(77.99996948242188 * scale, 127.18402099609375 * scale, 95.99996948242188 * scale, 127.18402099609375 * scale, 115.99996948242188 * scale, 127.18402099609375 * scale);
        ctx.bezierCurveTo(91.99996948242188 * scale, 113.18402099609375 * scale, 84.99996948242188 * scale, 107.18402099609375 * scale, 76.99996948242188 * scale, 96.18402099609375 * scale);
        ctx.bezierCurveTo(94.99996948242188 * scale, 99.18402099609375 * scale, 109.99996948242188 * scale, 109.18402099609375 * scale, 123.99996948242188 * scale, 116.18402099609375 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(131.99996948242188 * scale, 119.18402099609375 * scale);
        ctx.bezierCurveTo(141.99996948242188 * scale, 119.18402099609375 * scale, 145.99996948242188 * scale, 116.18402099609375 * scale, 147.99996948242188 * scale, 109.18402099609375 * scale);
        ctx.bezierCurveTo(151.99996948242188 * scale, 107.18402099609375 * scale, 159.99996948242188 * scale, 107.18402099609375 * scale, 156.99996948242188 * scale, 123.18402099609375 * scale);
        ctx.bezierCurveTo(155.99996948242188 * scale, 140.18402099609375 * scale, 142.99996948242188 * scale, 149.18402099609375 * scale, 132.99996948242188 * scale, 147.18402099609375 * scale);
        ctx.bezierCurveTo(119.99996948242188 * scale, 144.18402099609375 * scale, 113.99996948242188 * scale, 122.18402099609375 * scale, 131.99996948242188 * scale, 119.18402099609375 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 6 * scale);
        return can;
    };

    function create_brambles(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 247 * scale;
        can.height = 247 * scale;
        ctx.translate(0, 10 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(150 * scale, 62 * scale);
        ctx.bezierCurveTo(151.5 * scale, 71.5 * scale, 149 * scale, 70 * scale, 153 * scale, 81 * scale);
        ctx.bezierCurveTo(158 * scale, 73.5 * scale, 158 * scale, 73.5 * scale, 163 * scale, 66 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(164 * scale, 171 * scale);
        ctx.bezierCurveTo(149 * scale, 159 * scale, 156.5 * scale, 165 * scale, 149 * scale, 159 * scale);
        ctx.bezierCurveTo(149 * scale, 167 * scale, 149 * scale, 170 * scale, 152 * scale, 178 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(132 * scale, 95 * scale);
        ctx.bezierCurveTo(154 * scale, 102 * scale, 154 * scale, 126 * scale, 137 * scale, 139 * scale);
        ctx.bezierCurveTo(113 * scale, 152 * scale, 89 * scale, 136 * scale, 80 * scale, 121 * scale);
        ctx.bezierCurveTo(57 * scale, 89 * scale, 69 * scale, 63 * scale, 79 * scale, 52 * scale);
        ctx.bezierCurveTo(110 * scale, 20 * scale, 139 * scale, 21 * scale, 150 * scale, 25 * scale);
        ctx.bezierCurveTo(197 * scale, 36 * scale, 221 * scale, 67 * scale, 226 * scale, 90 * scale);
        ctx.bezierCurveTo(234 * scale, 134 * scale, 214 * scale, 177 * scale, 195 * scale, 197 * scale);
        ctx.bezierCurveTo(144 * scale, 242 * scale, 79 * scale, 216 * scale, 58 * scale, 206 * scale);
        ctx.bezierCurveTo(13 * scale, 174 * scale, 20 * scale, 134 * scale, 23 * scale, 107 * scale);
        ctx.bezierCurveTo(26 * scale, 78 * scale, 33 * scale, 60 * scale, 38 * scale, 43 * scale);
        ctx.bezierCurveTo(42 * scale, 32 * scale, 47 * scale, 32 * scale, 50 * scale, 36 * scale);
        ctx.bezierCurveTo(54 * scale, 37 * scale, 50 * scale, 52 * scale, 44 * scale, 87 * scale);
        ctx.bezierCurveTo(40 * scale, 115 * scale, 46 * scale, 142 * scale, 57 * scale, 158 * scale);
        ctx.bezierCurveTo(76 * scale, 189 * scale, 129 * scale, 182 * scale, 152 * scale, 173 * scale);
        ctx.bezierCurveTo(186 * scale, 156 * scale, 191 * scale, 106 * scale, 176 * scale, 85 * scale);
        ctx.bezierCurveTo(159 * scale, 61 * scale, 132 * scale, 62 * scale, 122 * scale, 66 * scale);
        ctx.bezierCurveTo(108 * scale, 74 * scale, 108 * scale, 89 * scale, 116 * scale, 90 * scale);
        ctx.bezierCurveTo(123 * scale, 92 * scale, 130 * scale, 93 * scale, 131 * scale, 94 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.translate(0, -10 * scale);
        ctx.globalAlpha = 1;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(150 * scale, 62 * scale);
        ctx.bezierCurveTo(151.5 * scale, 71.5 * scale, 149 * scale, 70 * scale, 153 * scale, 81 * scale);
        ctx.bezierCurveTo(158 * scale, 73.5 * scale, 158 * scale, 73.5 * scale, 163 * scale, 66 * scale);
        ctx.closePath();
        fill_path(ctx, color[5]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(164 * scale, 171 * scale);
        ctx.bezierCurveTo(149 * scale, 159 * scale, 156.5 * scale, 165 * scale, 149 * scale, 159 * scale);
        ctx.bezierCurveTo(149 * scale, 167 * scale, 149 * scale, 170 * scale, 152 * scale, 178 * scale);
        ctx.closePath();
        fill_path(ctx, color[5]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(132 * scale, 95 * scale);
        ctx.bezierCurveTo(154 * scale, 102 * scale, 154 * scale, 126 * scale, 137 * scale, 139 * scale);
        ctx.bezierCurveTo(113 * scale, 152 * scale, 89 * scale, 136 * scale, 80 * scale, 121 * scale);
        ctx.bezierCurveTo(57 * scale, 89 * scale, 69 * scale, 63 * scale, 79 * scale, 52 * scale);
        ctx.bezierCurveTo(110 * scale, 20 * scale, 139 * scale, 21 * scale, 150 * scale, 25 * scale);
        ctx.bezierCurveTo(197 * scale, 36 * scale, 221 * scale, 67 * scale, 226 * scale, 90 * scale);
        ctx.bezierCurveTo(234 * scale, 134 * scale, 214 * scale, 177 * scale, 195 * scale, 197 * scale);
        ctx.bezierCurveTo(144 * scale, 242 * scale, 79 * scale, 216 * scale, 58 * scale, 206 * scale);
        ctx.bezierCurveTo(13 * scale, 174 * scale, 20 * scale, 134 * scale, 23 * scale, 107 * scale);
        ctx.bezierCurveTo(26 * scale, 78 * scale, 33 * scale, 60 * scale, 38 * scale, 43 * scale);
        ctx.bezierCurveTo(42 * scale, 32 * scale, 47 * scale, 32 * scale, 50 * scale, 36 * scale);
        ctx.bezierCurveTo(54 * scale, 37 * scale, 50 * scale, 52 * scale, 44 * scale, 87 * scale);
        ctx.bezierCurveTo(40 * scale, 115 * scale, 46 * scale, 142 * scale, 57 * scale, 158 * scale);
        ctx.bezierCurveTo(76 * scale, 189 * scale, 129 * scale, 182 * scale, 152 * scale, 173 * scale);
        ctx.bezierCurveTo(186 * scale, 156 * scale, 191 * scale, 106 * scale, 176 * scale, 85 * scale);
        ctx.bezierCurveTo(159 * scale, 61 * scale, 132 * scale, 62 * scale, 122 * scale, 66 * scale);
        ctx.bezierCurveTo(108 * scale, 74 * scale, 108 * scale, 89 * scale, 116 * scale, 90 * scale);
        ctx.bezierCurveTo(123 * scale, 92 * scale, 130 * scale, 93 * scale, 131 * scale, 94 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(137 * scale, 137 * scale);
        ctx.bezierCurveTo(145 * scale, 125 * scale, 138 * scale, 108 * scale, 123 * scale, 104 * scale);
        ctx.bezierCurveTo(81 * scale, 101 * scale, 88 * scale, 77 * scale, 98 * scale, 65 * scale);
        ctx.bezierCurveTo(117 * scale, 38 * scale, 138 * scale, 39 * scale, 165 * scale, 52 * scale);
        ctx.bezierCurveTo(197 * scale, 72 * scale, 207 * scale, 111 * scale, 197 * scale, 140 * scale);
        ctx.bezierCurveTo(182 * scale, 180 * scale, 161 * scale, 197 * scale, 112 * scale, 194 * scale);
        ctx.bezierCurveTo(58 * scale, 194 * scale, 37 * scale, 170 * scale, 34 * scale, 142 * scale);
        ctx.bezierCurveTo(29 * scale, 102 * scale, 40 * scale, 63 * scale, 51 * scale, 45 * scale);
        ctx.bezierCurveTo(43 * scale, 78 * scale, 41 * scale, 103 * scale, 43 * scale, 122 * scale);
        ctx.bezierCurveTo(51 * scale, 158 * scale, 63 * scale, 174 * scale, 95 * scale, 179 * scale);
        ctx.bezierCurveTo(129 * scale, 186 * scale, 169 * scale, 172 * scale, 177 * scale, 144 * scale);
        ctx.bezierCurveTo(197 * scale, 105 * scale, 172 * scale, 76 * scale, 160 * scale, 71 * scale);
        ctx.bezierCurveTo(125 * scale, 52 * scale, 111 * scale, 73 * scale, 111 * scale, 81 * scale);
        ctx.bezierCurveTo(106 * scale, 93 * scale, 140 * scale, 92 * scale, 147 * scale, 107 * scale);
        ctx.bezierCurveTo(153 * scale, 128 * scale, 140 * scale, 135 * scale, 137 * scale, 139 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(132 * scale, 95 * scale);
        ctx.bezierCurveTo(154 * scale, 102 * scale, 154 * scale, 126 * scale, 137 * scale, 139 * scale);
        ctx.bezierCurveTo(113 * scale, 152 * scale, 89 * scale, 136 * scale, 80 * scale, 121 * scale);
        ctx.bezierCurveTo(57 * scale, 89 * scale, 69 * scale, 63 * scale, 79 * scale, 52 * scale);
        ctx.bezierCurveTo(110 * scale, 20 * scale, 139 * scale, 21 * scale, 150 * scale, 25 * scale);
        ctx.bezierCurveTo(197 * scale, 36 * scale, 221 * scale, 67 * scale, 226 * scale, 90 * scale);
        ctx.bezierCurveTo(234 * scale, 134 * scale, 214 * scale, 177 * scale, 195 * scale, 197 * scale);
        ctx.bezierCurveTo(144 * scale, 242 * scale, 79 * scale, 216 * scale, 58 * scale, 206 * scale);
        ctx.bezierCurveTo(13 * scale, 174 * scale, 20 * scale, 134 * scale, 23 * scale, 107 * scale);
        ctx.bezierCurveTo(26 * scale, 78 * scale, 33 * scale, 60 * scale, 38 * scale, 43 * scale);
        ctx.bezierCurveTo(42 * scale, 32 * scale, 47 * scale, 32 * scale, 50 * scale, 36 * scale);
        ctx.bezierCurveTo(54 * scale, 37 * scale, 50 * scale, 52 * scale, 44 * scale, 87 * scale);
        ctx.bezierCurveTo(40 * scale, 115 * scale, 46 * scale, 142 * scale, 57 * scale, 158 * scale);
        ctx.bezierCurveTo(76 * scale, 189 * scale, 129 * scale, 182 * scale, 152 * scale, 173 * scale);
        ctx.bezierCurveTo(186 * scale, 156 * scale, 191 * scale, 106 * scale, 176 * scale, 85 * scale);
        ctx.bezierCurveTo(159 * scale, 61 * scale, 132 * scale, 62 * scale, 122 * scale, 66 * scale);
        ctx.bezierCurveTo(108 * scale, 74 * scale, 108 * scale, 89 * scale, 116 * scale, 90 * scale);
        ctx.bezierCurveTo(123 * scale, 92 * scale, 130 * scale, 93 * scale, 131 * scale, 94 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[2], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(82 * scale, 63 * scale);
        ctx.bezierCurveTo(91 * scale, 64 * scale, 96 * scale, 62 * scale, 98 * scale, 53 * scale);
        ctx.bezierCurveTo(91 * scale, 45 * scale, 85 * scale, 42 * scale, 78 * scale, 41 * scale);
        ctx.bezierCurveTo(81 * scale, 51 * scale, 82 * scale, 57 * scale, 82 * scale, 63 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(148 * scale, 40 * scale);
        ctx.bezierCurveTo(140 * scale, 52 * scale, 131 * scale, 51 * scale, 123 * scale, 43 * scale);
        ctx.bezierCurveTo(123 * scale, 25 * scale, 129 * scale, 17 * scale, 134 * scale, 12 * scale);
        ctx.bezierCurveTo(138 * scale, 35 * scale, 142 * scale, 31 * scale, 148 * scale, 40 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(189 * scale, 43 * scale);
        ctx.bezierCurveTo(191 * scale, 54 * scale, 196 * scale, 58 * scale, 205 * scale, 59 * scale);
        ctx.bezierCurveTo(211 * scale, 42 * scale, 214 * scale, 37 * scale, 216 * scale, 31 * scale);
        ctx.bezierCurveTo(202 * scale, 34 * scale, 195 * scale, 39 * scale, 190 * scale, 43 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(216 * scale, 98 * scale);
        ctx.bezierCurveTo(219 * scale, 105 * scale, 225 * scale, 107 * scale, 230 * scale, 109 * scale);
        ctx.bezierCurveTo(227 * scale, 113 * scale, 221 * scale, 115 * scale, 215 * scale, 115 * scale);
        ctx.bezierCurveTo(208 * scale, 109 * scale, 211 * scale, 101 * scale, 216 * scale, 98 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(180 * scale, 85 * scale);
        ctx.bezierCurveTo(193 * scale, 86 * scale, 196 * scale, 98 * scale, 191 * scale, 108 * scale);
        ctx.bezierCurveTo(179 * scale, 112 * scale, 167 * scale, 113 * scale, 155 * scale, 111 * scale);
        ctx.bezierCurveTo(169 * scale, 100 * scale, 176 * scale, 96 * scale, 180 * scale, 85 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(96 * scale, 114 * scale);
        ctx.bezierCurveTo(102 * scale, 109 * scale, 112 * scale, 110 * scale, 114 * scale, 118 * scale);
        ctx.bezierCurveTo(111 * scale, 134 * scale, 102 * scale, 143 * scale, 95 * scale, 147 * scale);
        ctx.bezierCurveTo(98 * scale, 123 * scale, 97 * scale, 119 * scale, 96 * scale, 115 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(79 * scale, 92 * scale);
        ctx.bezierCurveTo(86 * scale, 95 * scale, 89 * scale, 102 * scale, 83 * scale, 111 * scale);
        ctx.bezierCurveTo(70 * scale, 110 * scale, 61 * scale, 107 * scale, 54 * scale, 100 * scale);
        ctx.bezierCurveTo(70 * scale, 97 * scale, 70 * scale, 95 * scale, 78 * scale, 92 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(39 * scale, 130 * scale);
        ctx.bezierCurveTo(37 * scale, 141 * scale, 41 * scale, 143 * scale, 48 * scale, 144 * scale);
        ctx.bezierCurveTo(54 * scale, 134 * scale, 55 * scale, 131 * scale, 56 * scale, 123 * scale);
        ctx.bezierCurveTo(47 * scale, 129 * scale, 43 * scale, 129 * scale, 39 * scale, 129 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(113 * scale, 189 * scale);
        ctx.bezierCurveTo(119 * scale, 201 * scale, 127 * scale, 198 * scale, 134 * scale, 192 * scale);
        ctx.bezierCurveTo(128 * scale, 175 * scale, 128 * scale, 173 * scale, 128 * scale, 165 * scale);
        ctx.bezierCurveTo(117 * scale, 176 * scale, 116 * scale, 182 * scale, 113 * scale, 187 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(74 * scale, 154 * scale);
        ctx.bezierCurveTo(76 * scale, 163 * scale, 76 * scale, 170 * scale, 75 * scale, 177 * scale);
        ctx.bezierCurveTo(68 * scale, 179 * scale, 66 * scale, 176 * scale, 63 * scale, 171 * scale);
        ctx.bezierCurveTo(69 * scale, 164 * scale, 72 * scale, 159 * scale, 74 * scale, 154 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(206 * scale, 152 * scale);
        ctx.bezierCurveTo(198 * scale, 158 * scale, 198 * scale, 166 * scale, 201 * scale, 171 * scale);
        ctx.bezierCurveTo(209 * scale, 170 * scale, 221 * scale, 170 * scale, 226 * scale, 172 * scale);
        ctx.bezierCurveTo(219 * scale, 159 * scale, 210 * scale, 155 * scale, 207 * scale, 153 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(181 * scale, 184 * scale);
        ctx.bezierCurveTo(170 * scale, 184 * scale, 167 * scale, 187 * scale, 163 * scale, 195 * scale);
        ctx.bezierCurveTo(171 * scale, 207 * scale, 183 * scale, 214 * scale, 191 * scale, 217 * scale);
        ctx.bezierCurveTo(183 * scale, 204 * scale, 184 * scale, 196 * scale, 181 * scale, 184 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(66 * scale, 199 * scale);
        ctx.bezierCurveTo(73 * scale, 197 * scale, 78 * scale, 199 * scale, 79 * scale, 206 * scale);
        ctx.bezierCurveTo(71 * scale, 216 * scale, 67 * scale, 221 * scale, 57 * scale, 223 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(182 * scale, 143 * scale);
        ctx.bezierCurveTo(183 * scale, 146 * scale, 183 * scale, 149 * scale, 179 * scale, 152 * scale);
        ctx.bezierCurveTo(174 * scale, 146 * scale, 174 * scale, 146 * scale, 169 * scale, 140 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(32 * scale, 159 * scale);
        ctx.bezierCurveTo(45 * scale, 160 * scale, 48 * scale, 164 * scale, 45 * scale, 175 * scale);
        ctx.bezierCurveTo(28 * scale, 183 * scale, 25 * scale, 184 * scale, 19 * scale, 184 * scale);
        ctx.bezierCurveTo(30 * scale, 170 * scale, 29 * scale, 164 * scale, 31 * scale, 160 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(110 * scale, 214 * scale);
        ctx.bezierCurveTo(106 * scale, 212 * scale, 104 * scale, 213 * scale, 102 * scale, 218 * scale);
        ctx.bezierCurveTo(104 * scale, 220 * scale, 107 * scale, 222 * scale, 110 * scale, 224 * scale);
        ctx.bezierCurveTo(110.5 * scale, 219 * scale, 110.5 * scale, 219 * scale, 111 * scale, 214 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(40 * scale, 52 * scale);
        ctx.bezierCurveTo(41 * scale, 57 * scale, 40 * scale, 61 * scale, 34 * scale, 60 * scale);
        ctx.bezierCurveTo(31.5 * scale, 55 * scale, 31.5 * scale, 55 * scale, 29 * scale, 50 * scale);
        ctx.bezierCurveTo(34 * scale, 50.5 * scale, 34 * scale, 50.5 * scale, 39 * scale, 51 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(31 * scale, 81 * scale);
        ctx.bezierCurveTo(37 * scale, 84 * scale, 38 * scale, 90 * scale, 34 * scale, 99 * scale);
        ctx.bezierCurveTo(23 * scale, 97 * scale, 19 * scale, 96 * scale, 16 * scale, 93 * scale);
        ctx.bezierCurveTo(24 * scale, 88 * scale, 28 * scale, 85 * scale, 30 * scale, 81 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 5 * scale);
        return can;
    };

    function create_hood(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 465 * scale;
        can.height = 310 * scale;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(126 * scale, 192 * scale);
        ctx.bezierCurveTo(198 * scale, 202 * scale, 245 * scale, 203 * scale, 335 * scale, 194 * scale);
        ctx.bezierCurveTo(336 * scale, 232 * scale, 326 * scale, 235 * scale, 232 * scale, 237 * scale);
        ctx.bezierCurveTo(161 * scale, 235 * scale, 122 * scale, 235 * scale, 126 * scale, 193 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[1], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(146 * scale, 239 * scale);
        ctx.bezierCurveTo(174 * scale, 74 * scale, 287 * scale, 88 * scale, 320 * scale, 240 * scale);
        ctx.bezierCurveTo(329 * scale, 231 * scale, 340 * scale, 219 * scale, 332 * scale, 115 * scale);
        ctx.bezierCurveTo(330 * scale, 40 * scale, 144 * scale, 30 * scale, 129 * scale, 116 * scale);
        ctx.bezierCurveTo(124 * scale, 217 * scale, 124 * scale, 228 * scale, 143 * scale, 237 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[1], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(126 * scale, 193 * scale);
        ctx.bezierCurveTo(173 * scale, 94 * scale, 209 * scale, 100 * scale, 228 * scale, 57 * scale);
        ctx.bezierCurveTo(190 * scale, 112 * scale, 165 * scale, 115 * scale, 127 * scale, 184 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[1], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(230 * scale, 57 * scale);
        ctx.bezierCurveTo(266 * scale, 117 * scale, 310 * scale, 130 * scale, 332 * scale, 183 * scale);
        ctx.bezierCurveTo(290 * scale, 112 * scale, 262 * scale, 109 * scale, 230 * scale, 56 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[1], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(154 * scale, 212 * scale);
        ctx.bezierCurveTo(208 * scale, 224 * scale, 252 * scale, 219 * scale, 305 * scale, 212 * scale);
        ctx.bezierCurveTo(267 * scale, 219 * scale, 204 * scale, 222 * scale, 155 * scale, 212 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[1], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(239 * scale, 59 * scale);
        ctx.bezierCurveTo(302 * scale, 72 * scale, 325 * scale, 84 * scale, 326 * scale, 115 * scale);
        ctx.bezierCurveTo(289 * scale, 80 * scale, 270 * scale, 88 * scale, 253 * scale, 78 * scale);
        ctx.closePath();
        fill_path(ctx, color[2]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(216 * scale, 61 * scale);
        ctx.bezierCurveTo(209 * scale, 70 * scale, 209 * scale, 70 * scale, 202 * scale, 79 * scale);
        ctx.bezierCurveTo(173 * scale, 87 * scale, 162 * scale, 91 * scale, 137 * scale, 107 * scale);
        ctx.bezierCurveTo(153 * scale, 78 * scale, 174 * scale, 67 * scale, 212 * scale, 62 * scale);
        ctx.closePath();
        fill_path(ctx, color[2]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(175 * scale, 125 * scale);
        ctx.bezierCurveTo(218 * scale, 94 * scale, 238 * scale, 90 * scale, 281 * scale, 125 * scale);
        ctx.bezierCurveTo(245 * scale, 89 * scale, 240 * scale, 80 * scale, 228 * scale, 67 * scale);
        ctx.bezierCurveTo(207 * scale, 100 * scale, 192 * scale, 104 * scale, 177 * scale, 123 * scale);
        ctx.closePath();
        fill_path(ctx, color[2]);
        return can;
    };

    function create_winter_hood(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 465 * scale;
        can.height = 405 * scale;
        ctx.globalAlpha = 1;
        ctx.translate(6 * scale, 0 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(39.000030517578125 * scale, 162.03977966308594 * scale);
        ctx.bezierCurveTo(125.00003051757812 * scale, 84.03977966308594 * scale, 108.50003051757812 * scale, 115.03977966308594 * scale, 178.00003051757812 * scale, 68.03977966308594 * scale);
        ctx.bezierCurveTo(299.0000305175781 * scale, 146.53977966308594 * scale, 299.0000305175781 * scale, 146.53977966308594 * scale, 420.0000305175781 * scale, 225.03977966308594 * scale);
        ctx.bezierCurveTo(400.0000305175781 * scale, 288.53977966308594 * scale, 400.0000305175781 * scale, 288.53977966308594 * scale, 380.0000305175781 * scale, 352.03977966308594 * scale);
        ctx.bezierCurveTo(216.50003051757812 * scale, 345.53977966308594 * scale, 216.50003051757812 * scale, 345.53977966308594 * scale, 53.000030517578125 * scale, 339.03977966308594 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(23.000030517578125 * scale, 306.94886779785156 * scale);
        ctx.bezierCurveTo(5.000030517578125 * scale, 275.94886779785156 * scale, 6.000030517578125 * scale, 201.94886779785156 * scale, 14.000030517578125 * scale, 150.94886779785156 * scale);
        ctx.bezierCurveTo(40.000030517578125 * scale, 34.94886779785156 * scale, 157.00003051757812 * scale, 14.948867797851562 * scale, 199.00003051757812 * scale, 11.948867797851562 * scale);
        ctx.bezierCurveTo(331.0000305175781 * scale, 0.9488677978515625 * scale, 409.0000305175781 * scale, 61.94886779785156 * scale, 428.0000305175781 * scale, 133.94886779785156 * scale);
        ctx.bezierCurveTo(445.0000305175781 * scale, 207.94886779785156 * scale, 439.0000305175781 * scale, 274.94886779785156 * scale, 426.0000305175781 * scale, 342.94886779785156 * scale);
        ctx.bezierCurveTo(355.0000305175781 * scale, 207.94886779785156 * scale, 345.0000305175781 * scale, 208.94886779785156 * scale, 333.0000305175781 * scale, 202.94886779785156 * scale);
        ctx.bezierCurveTo(262.0000305175781 * scale, 143.94886779785156 * scale, 236.00003051757812 * scale, 148.94886779785156 * scale, 189.00003051757812 * scale, 162.94886779785156 * scale);
        ctx.bezierCurveTo(82.00003051757812 * scale, 190.94886779785156 * scale, 78.00003051757812 * scale, 235.94886779785156 * scale, 62.000030517578125 * scale, 279.94886779785156 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[1], 20 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(17.000030517578125 * scale, 149.94886779785156 * scale);
        ctx.bezierCurveTo(76.00003051757812 * scale, 67.94886779785156 * scale, 177.00003051757812 * scale, 40.94886779785156 * scale, 232.00003051757812 * scale, 45.94886779785156 * scale);
        ctx.bezierCurveTo(316.0000305175781 * scale, 46.94886779785156 * scale, 359.0000305175781 * scale, 74.94886779785156 * scale, 428.0000305175781 * scale, 145.94886779785156 * scale);
        ctx.bezierCurveTo(414.0000305175781 * scale, 73.94886779785156 * scale, 386.0000305175781 * scale, 68.94886779785156 * scale, 359.0000305175781 * scale, 43.94886779785156 * scale);
        ctx.bezierCurveTo(295.0000305175781 * scale, 5.9488677978515625 * scale, 239.00003051757812 * scale, 10.948867797851562 * scale, 207.00003051757812 * scale, 10.948867797851562 * scale);
        ctx.bezierCurveTo(121.00003051757812 * scale, 20.948867797851562 * scale, 104.00003051757812 * scale, 34.94886779785156 * scale, 45.000030517578125 * scale, 84.94886779785156 * scale);
        ctx.bezierCurveTo(14.000030517578125 * scale, 128.94886779785156 * scale, 18.000030517578125 * scale, 142.94886779785156 * scale, 16.000030517578125 * scale, 151.94886779785156 * scale);
        ctx.closePath();
        fill_path(ctx, color[2]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(23.000030517578125 * scale, 306.94886779785156 * scale);
        ctx.bezierCurveTo(5.000030517578125 * scale, 275.94886779785156 * scale, 6.000030517578125 * scale, 201.94886779785156 * scale, 14.000030517578125 * scale, 150.94886779785156 * scale);
        ctx.bezierCurveTo(40.000030517578125 * scale, 34.94886779785156 * scale, 157.00003051757812 * scale, 14.948867797851562 * scale, 199.00003051757812 * scale, 11.948867797851562 * scale);
        ctx.bezierCurveTo(331.0000305175781 * scale, 0.9488677978515625 * scale, 409.0000305175781 * scale, 61.94886779785156 * scale, 428.0000305175781 * scale, 133.94886779785156 * scale);
        ctx.bezierCurveTo(445.0000305175781 * scale, 207.94886779785156 * scale, 439.0000305175781 * scale, 274.94886779785156 * scale, 426.0000305175781 * scale, 342.94886779785156 * scale);
        ctx.bezierCurveTo(355.0000305175781 * scale, 207.94886779785156 * scale, 345.0000305175781 * scale, 208.94886779785156 * scale, 333.0000305175781 * scale, 202.94886779785156 * scale);
        ctx.bezierCurveTo(262.0000305175781 * scale, 143.94886779785156 * scale, 236.00003051757812 * scale, 148.94886779785156 * scale, 189.00003051757812 * scale, 162.94886779785156 * scale);
        ctx.bezierCurveTo(82.00003051757812 * scale, 190.94886779785156 * scale, 78.00003051757812 * scale, 235.94886779785156 * scale, 62.000030517578125 * scale, 279.94886779785156 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[1], 16 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(60.000030517578125 * scale, 288.03977966308594 * scale);
        ctx.bezierCurveTo(183.00003051757812 * scale, 320.03977966308594 * scale, 342.0000305175781 * scale, 306.03977966308594 * scale, 399.0000305175781 * scale, 286.03977966308594 * scale);
        ctx.bezierCurveTo(420.0000305175781 * scale, 345.03977966308594 * scale, 410.0000305175781 * scale, 335.03977966308594 * scale, 415.0000305175781 * scale, 362.03977966308594 * scale);
        ctx.bezierCurveTo(351.0000305175781 * scale, 384.03977966308594 * scale, 299.0000305175781 * scale, 389.03977966308594 * scale, 215.00003051757812 * scale, 391.03977966308594 * scale);
        ctx.bezierCurveTo(128.00003051757812 * scale, 388.03977966308594 * scale, 69.00003051757812 * scale, 373.03977966308594 * scale, 39.000030517578125 * scale, 359.03977966308594 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[1], 13 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(47.000030517578125 * scale, 327.03977966308594 * scale);
        ctx.bezierCurveTo(203.00003051757812 * scale, 377.03977966308594 * scale, 331.0000305175781 * scale, 349.03977966308594 * scale, 410.0000305175781 * scale, 330.03977966308594 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[1], 20 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(9.000030517578125 * scale, 339.1306915283203 * scale);
        ctx.bezierCurveTo(2.000030517578125 * scale, 280.1306915283203 * scale, 30.000030517578125 * scale, 219.1306915283203 * scale, 85.00003051757812 * scale, 167.1306915283203 * scale);
        ctx.bezierCurveTo(174.00003051757812 * scale, 82.13069152832031 * scale, 241.00003051757812 * scale, 101.13069152832031 * scale, 284.0000305175781 * scale, 115.13069152832031 * scale);
        ctx.bezierCurveTo(333.0000305175781 * scale, 134.1306915283203 * scale, 376.0000305175781 * scale, 177.1306915283203 * scale, 410.0000305175781 * scale, 247.1306915283203 * scale);
        ctx.bezierCurveTo(439.0000305175781 * scale, 300.1306915283203 * scale, 442.0000305175781 * scale, 346.1306915283203 * scale, 430.0000305175781 * scale, 363.1306915283203 * scale);
        ctx.bezierCurveTo(418.0000305175781 * scale, 366.1306915283203 * scale, 395.0000305175781 * scale, 295.1306915283203 * scale, 355.0000305175781 * scale, 223.1306915283203 * scale);
        ctx.bezierCurveTo(299.0000305175781 * scale, 156.1306915283203 * scale, 262.0000305175781 * scale, 155.1306915283203 * scale, 215.00003051757812 * scale, 159.1306915283203 * scale);
        ctx.bezierCurveTo(133.00003051757812 * scale, 171.1306915283203 * scale, 120.00003051757812 * scale, 193.1306915283203 * scale, 96.00003051757812 * scale, 221.1306915283203 * scale);
        ctx.bezierCurveTo(49.000030517578125 * scale, 262.1306915283203 * scale, 47.000030517578125 * scale, 306.1306915283203 * scale, 38.000030517578125 * scale, 336.1306915283203 * scale);
        ctx.bezierCurveTo(30.000030517578125 * scale, 349.1306915283203 * scale, 30.000030517578125 * scale, 349.1306915283203 * scale, 22.000030517578125 * scale, 362.1306915283203 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[1], 20 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(228.00003051757812 * scale, 128.03977966308594 * scale);
        ctx.bezierCurveTo(315.0000305175781 * scale, 131.03977966308594 * scale, 349.0000305175781 * scale, 178.03977966308594 * scale, 386.0000305175781 * scale, 234.03977966308594 * scale);
        ctx.bezierCurveTo(444.0000305175781 * scale, 329.03977966308594 * scale, 446.0000305175781 * scale, 354.03977966308594 * scale, 427.0000305175781 * scale, 373.03977966308594 * scale);
        ctx.bezierCurveTo(389.0000305175781 * scale, 389.03977966308594 * scale, 399.0000305175781 * scale, 329.03977966308594 * scale, 361.0000305175781 * scale, 277.03977966308594 * scale);
        ctx.bezierCurveTo(306.0000305175781 * scale, 191.03977966308594 * scale, 266.0000305175781 * scale, 183.03977966308594 * scale, 220.00003051757812 * scale, 181.03977966308594 * scale);
        ctx.bezierCurveTo(138.00003051757812 * scale, 184.03977966308594 * scale, 123.00003051757812 * scale, 212.03977966308594 * scale, 89.00003051757812 * scale, 271.03977966308594 * scale);
        ctx.bezierCurveTo(52.000030517578125 * scale, 349.03977966308594 * scale, 68.00003051757812 * scale, 364.03977966308594 * scale, 33.000030517578125 * scale, 369.03977966308594 * scale);
        ctx.bezierCurveTo(6.000030517578125 * scale, 366.03977966308594 * scale, 5.000030517578125 * scale, 341.03977966308594 * scale, 26.000030517578125 * scale, 288.03977966308594 * scale);
        ctx.bezierCurveTo(60.000030517578125 * scale, 207.03977966308594 * scale, 100.00003051757812 * scale, 180.03977966308594 * scale, 113.00003051757812 * scale, 170.03977966308594 * scale);
        ctx.bezierCurveTo(159.00003051757812 * scale, 132.03977966308594 * scale, 196.00003051757812 * scale, 133.03977966308594 * scale, 226.00003051757812 * scale, 129.03977966308594 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[1], 20 * scale);
        return can;
    };

    function create_peasant(scale, draw_shadow, color, i) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 198 * scale;
        can.height = 147 * scale;
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(0, 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(44 * scale, 76 * scale);
        ctx.bezierCurveTo(50 * scale, 82 * scale, 50 * scale, 82 * scale, 56 * scale, 88 * scale);
        ctx.bezierCurveTo(59 * scale, 82 * scale, 59 * scale, 82 * scale, 62 * scale, 76 * scale);
        ctx.bezierCurveTo(59 * scale, 71 * scale, 59 * scale, 71 * scale, 56 * scale, 66 * scale);
        ctx.bezierCurveTo(59 * scale, 69 * scale, 59 * scale, 69 * scale, 62 * scale, 72 * scale);
        ctx.bezierCurveTo(80 * scale, 48 * scale, 102 * scale, 50 * scale, 120 * scale, 62 * scale);
        ctx.bezierCurveTo(127 * scale, 58 * scale, 127 * scale, 58 * scale, 134 * scale, 54 * scale);
        ctx.bezierCurveTo(129 * scale, 60 * scale, 129 * scale, 60 * scale, 124 * scale, 66 * scale);
        ctx.bezierCurveTo(129 * scale, 73 * scale, 129 * scale, 73 * scale, 134 * scale, 80 * scale);
        ctx.bezierCurveTo(140 * scale, 74 * scale, 140 * scale, 74 * scale, 146 * scale, 68 * scale);
        ctx.bezierCurveTo(142 * scale, 76 * scale, 142 * scale, 76 * scale, 138 * scale, 84 * scale);
        ctx.bezierCurveTo(144 * scale, 90 * scale, 142 * scale, 90 * scale, 144 * scale, 90 * scale);
        ctx.bezierCurveTo(136 * scale, 97 * scale, 136 * scale, 97 * scale, 128 * scale, 104 * scale);
        ctx.bezierCurveTo(154 * scale, 110 * scale, 164 * scale, 90 * scale, 160 * scale, 80 * scale);
        ctx.bezierCurveTo(138 * scale, 22 * scale, 148 * scale, 51 * scale, 136 * scale, 22 * scale);
        ctx.bezierCurveTo(97 * scale, 24 * scale, 97 * scale, 24 * scale, 58 * scale, 26 * scale);
        ctx.bezierCurveTo(47 * scale, 54 * scale, 36 * scale, 80 * scale, 36 * scale, 82 * scale);
        ctx.bezierCurveTo(40 * scale, 108 * scale, 54 * scale, 104 * scale, 62 * scale, 104 * scale);
        ctx.bezierCurveTo(46 * scale, 92 * scale, 54 * scale, 97 * scale, 46 * scale, 90 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(36 * scale, 80 * scale);
        ctx.bezierCurveTo(30 * scale, 84 * scale, 28 * scale, 92 * scale, 34 * scale, 100 * scale);
        ctx.bezierCurveTo(41.5 * scale, 102 * scale, 41.5 * scale, 102 * scale, 49 * scale, 104 * scale);
        ctx.bezierCurveTo(43 * scale, 105.5 * scale, 43 * scale, 105.5 * scale, 37 * scale, 107 * scale);
        ctx.bezierCurveTo(46 * scale, 111 * scale, 60 * scale, 114 * scale, 76 * scale, 114 * scale);
        ctx.bezierCurveTo(78 * scale, 110.5 * scale, 78 * scale, 110.5 * scale, 80 * scale, 107 * scale);
        ctx.bezierCurveTo(81 * scale, 110.5 * scale, 81 * scale, 110.5 * scale, 82 * scale, 114 * scale);
        ctx.bezierCurveTo(94.5 * scale, 113.5 * scale, 94.5 * scale, 113.5 * scale, 107 * scale, 113 * scale);
        ctx.bezierCurveTo(108.5 * scale, 110 * scale, 108.5 * scale, 110 * scale, 110 * scale, 107 * scale);
        ctx.bezierCurveTo(111.5 * scale, 110.5 * scale, 111.5 * scale, 110.5 * scale, 113 * scale, 114 * scale);
        ctx.bezierCurveTo(131 * scale, 112.5 * scale, 131 * scale, 112.5 * scale, 149 * scale, 111 * scale);
        ctx.bezierCurveTo(148.5 * scale, 107.5 * scale, 148.5 * scale, 107.5 * scale, 148 * scale, 104 * scale);
        ctx.bezierCurveTo(150.5 * scale, 107 * scale, 150.5 * scale, 107 * scale, 153 * scale, 110 * scale);
        ctx.bezierCurveTo(155.5 * scale, 108.5 * scale, 155.5 * scale, 108.5 * scale, 158 * scale, 107 * scale);
        ctx.bezierCurveTo(156.5 * scale, 104 * scale, 156.5 * scale, 104 * scale, 155 * scale, 101 * scale);
        ctx.bezierCurveTo(158.5 * scale, 102.5 * scale, 158.5 * scale, 102.5 * scale, 162 * scale, 104 * scale);
        ctx.bezierCurveTo(168 * scale, 100 * scale, 170 * scale, 92 * scale, 169 * scale, 85 * scale);
        ctx.bezierCurveTo(166 * scale, 86 * scale, 166 * scale, 86 * scale, 163 * scale, 87 * scale);
        ctx.bezierCurveTo(165.5 * scale, 83 * scale, 165.5 * scale, 83 * scale, 168 * scale, 79 * scale);
        ctx.bezierCurveTo(165.5 * scale, 76.5 * scale, 165.5 * scale, 76.5 * scale, 163 * scale, 74 * scale);
        ctx.bezierCurveTo(155 * scale, 82.5 * scale, 155 * scale, 82.5 * scale, 147 * scale, 91 * scale);
        ctx.bezierCurveTo(139 * scale, 95.5 * scale, 139 * scale, 95.5 * scale, 131 * scale, 100 * scale);
        ctx.bezierCurveTo(97.5 * scale, 100.5 * scale, 97.5 * scale, 100.5 * scale, 64 * scale, 101 * scale);
        ctx.bezierCurveTo(49 * scale, 102 * scale, 43 * scale, 90 * scale, 36 * scale, 80 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(0, -6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(36 * scale, 80 * scale);
        ctx.bezierCurveTo(30 * scale, 84 * scale, 28 * scale, 92 * scale, 34 * scale, 100 * scale);
        ctx.bezierCurveTo(41.5 * scale, 102 * scale, 41.5 * scale, 102 * scale, 49 * scale, 104 * scale);
        ctx.bezierCurveTo(43 * scale, 105.5 * scale, 43 * scale, 105.5 * scale, 37 * scale, 107 * scale);
        ctx.bezierCurveTo(46 * scale, 111 * scale, 60 * scale, 114 * scale, 76 * scale, 114 * scale);
        ctx.bezierCurveTo(78 * scale, 110.5 * scale, 78 * scale, 110.5 * scale, 80 * scale, 107 * scale);
        ctx.bezierCurveTo(81 * scale, 110.5 * scale, 81 * scale, 110.5 * scale, 82 * scale, 114 * scale);
        ctx.bezierCurveTo(94.5 * scale, 113.5 * scale, 94.5 * scale, 113.5 * scale, 107 * scale, 113 * scale);
        ctx.bezierCurveTo(108.5 * scale, 110 * scale, 108.5 * scale, 110 * scale, 110 * scale, 107 * scale);
        ctx.bezierCurveTo(111.5 * scale, 110.5 * scale, 111.5 * scale, 110.5 * scale, 113 * scale, 114 * scale);
        ctx.bezierCurveTo(131 * scale, 112.5 * scale, 131 * scale, 112.5 * scale, 149 * scale, 111 * scale);
        ctx.bezierCurveTo(148.5 * scale, 107.5 * scale, 148.5 * scale, 107.5 * scale, 148 * scale, 104 * scale);
        ctx.bezierCurveTo(150.5 * scale, 107 * scale, 150.5 * scale, 107 * scale, 153 * scale, 110 * scale);
        ctx.bezierCurveTo(155.5 * scale, 108.5 * scale, 155.5 * scale, 108.5 * scale, 158 * scale, 107 * scale);
        ctx.bezierCurveTo(156.5 * scale, 104 * scale, 156.5 * scale, 104 * scale, 155 * scale, 101 * scale);
        ctx.bezierCurveTo(158.5 * scale, 102.5 * scale, 158.5 * scale, 102.5 * scale, 162 * scale, 104 * scale);
        ctx.bezierCurveTo(168 * scale, 100 * scale, 170 * scale, 92 * scale, 169 * scale, 85 * scale);
        ctx.bezierCurveTo(166 * scale, 86 * scale, 166 * scale, 86 * scale, 163 * scale, 87 * scale);
        ctx.bezierCurveTo(165.5 * scale, 83 * scale, 165.5 * scale, 83 * scale, 168 * scale, 79 * scale);
        ctx.bezierCurveTo(165.5 * scale, 76.5 * scale, 165.5 * scale, 76.5 * scale, 163 * scale, 74 * scale);
        ctx.bezierCurveTo(155 * scale, 82.5 * scale, 155 * scale, 82.5 * scale, 147 * scale, 91 * scale);
        ctx.bezierCurveTo(139 * scale, 95.5 * scale, 139 * scale, 95.5 * scale, 131 * scale, 100 * scale);
        ctx.bezierCurveTo(97.5 * scale, 100.5 * scale, 97.5 * scale, 100.5 * scale, 64 * scale, 101 * scale);
        ctx.bezierCurveTo(49 * scale, 102 * scale, 43 * scale, 90 * scale, 36 * scale, 80 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(49 * scale, 98 * scale);
        ctx.bezierCurveTo(96.5 * scale, 98 * scale, 96.5 * scale, 98 * scale, 144 * scale, 98 * scale);
        ctx.bezierCurveTo(136.5 * scale, 102 * scale, 136.5 * scale, 102 * scale, 129 * scale, 106 * scale);
        ctx.bezierCurveTo(103 * scale, 105.5 * scale, 103 * scale, 105.5 * scale, 77 * scale, 105 * scale);
        ctx.bezierCurveTo(65 * scale, 105 * scale, 65 * scale, 105 * scale, 53 * scale, 105 * scale);
        ctx.closePath();
        fill_path(ctx, color[1]);
        ctx.globalAlpha = 0.5;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(54 * scale, 98 * scale);
        ctx.bezierCurveTo(97 * scale, 98 * scale, 97 * scale, 98 * scale, 140 * scale, 98 * scale);
        ctx.bezierCurveTo(134 * scale, 101 * scale, 134 * scale, 101 * scale, 128 * scale, 104 * scale);
        ctx.bezierCurveTo(92 * scale, 104 * scale, 92 * scale, 104 * scale, 56 * scale, 104 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(118 * scale, 47 * scale);
        ctx.bezierCurveTo(124.5 * scale, 43.5 * scale, 124.5 * scale, 43.5 * scale, 131 * scale, 40 * scale);
        ctx.bezierCurveTo(128 * scale, 46 * scale, 128 * scale, 46 * scale, 125 * scale, 52 * scale);
        ctx.bezierCurveTo(131 * scale, 57 * scale, 135 * scale, 64 * scale, 139 * scale, 73 * scale);
        ctx.bezierCurveTo(142.5 * scale, 69.5 * scale, 142.5 * scale, 69.5 * scale, 146 * scale, 66 * scale);
        ctx.bezierCurveTo(143.5 * scale, 72.5 * scale, 143.5 * scale, 72.5 * scale, 141 * scale, 79 * scale);
        ctx.bezierCurveTo(142 * scale, 91 * scale, 141 * scale, 94 * scale, 132 * scale, 98 * scale);
        ctx.bezierCurveTo(117 * scale, 102 * scale, 126 * scale, 108 * scale, 142 * scale, 102 * scale);
        ctx.bezierCurveTo(159 * scale, 98 * scale, 164 * scale, 80 * scale, 162 * scale, 47 * scale);
        ctx.bezierCurveTo(160 * scale, 19 * scale, 150 * scale, 6 * scale, 117 * scale, 4 * scale);
        ctx.bezierCurveTo(44 * scale, 0 * scale, 35 * scale, 20 * scale, 33 * scale, 37 * scale);
        ctx.bezierCurveTo(29 * scale, 69 * scale, 33 * scale, 88 * scale, 44 * scale, 96 * scale);
        ctx.bezierCurveTo(64 * scale, 107 * scale, 70 * scale, 102 * scale, 54 * scale, 93 * scale);
        ctx.bezierCurveTo(49 * scale, 88 * scale, 50 * scale, 82 * scale, 53 * scale, 77 * scale);
        ctx.bezierCurveTo(51.5 * scale, 71 * scale, 51.5 * scale, 71 * scale, 50 * scale, 65 * scale);
        ctx.bezierCurveTo(53 * scale, 68.5 * scale, 53 * scale, 68.5 * scale, 56 * scale, 72 * scale);
        ctx.bezierCurveTo(59 * scale, 67.5 * scale, 59 * scale, 67.5 * scale, 62 * scale, 63 * scale);
        ctx.bezierCurveTo(60.5 * scale, 59.5 * scale, 60.5 * scale, 59.5 * scale, 59 * scale, 56 * scale);
        ctx.bezierCurveTo(62 * scale, 57 * scale, 62 * scale, 57 * scale, 65 * scale, 58 * scale);
        ctx.bezierCurveTo(78 * scale, 35 * scale, 103 * scale, 36 * scale, 117 * scale, 47 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(62 * scale, 21 * scale);
        ctx.bezierCurveTo(63 * scale, 34 * scale, 64 * scale, 37 * scale, 66 * scale, 40 * scale);
        ctx.bezierCurveTo(54 * scale, 49 * scale, 53 * scale, 51 * scale, 48 * scale, 58 * scale);
        ctx.bezierCurveTo(44 * scale, 51 * scale, 42 * scale, 43 * scale, 40 * scale, 36 * scale);
        ctx.bezierCurveTo(47 * scale, 28 * scale, 52 * scale, 25 * scale, 61 * scale, 21 * scale);
        ctx.closePath();
        fill_path(ctx, color[4]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(60 * scale, 29 * scale);
        ctx.bezierCurveTo(62 * scale, 25 * scale, 65 * scale, 24 * scale, 70 * scale, 23 * scale);
        fill_path(ctx, undefined, color[3], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(61 * scale, 37 * scale);
        ctx.bezierCurveTo(63 * scale, 32 * scale, 66 * scale, 32 * scale, 71 * scale, 32 * scale);
        fill_path(ctx, undefined, color[3], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(52 * scale, 31 * scale);
        ctx.bezierCurveTo(50 * scale, 26 * scale, 50 * scale, 25 * scale, 51 * scale, 23 * scale);
        fill_path(ctx, undefined, color[3], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(46 * scale, 35 * scale);
        ctx.bezierCurveTo(44 * scale, 31 * scale, 43 * scale, 29 * scale, 45 * scale, 26 * scale);
        fill_path(ctx, undefined, color[3], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(58 * scale, 44 * scale);
        ctx.bezierCurveTo(57 * scale, 48 * scale, 57 * scale, 50 * scale, 60 * scale, 52 * scale);
        fill_path(ctx, undefined, color[3], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(53 * scale, 48 * scale);
        ctx.bezierCurveTo(52 * scale, 52 * scale, 52 * scale, 54 * scale, 55 * scale, 57 * scale);
        fill_path(ctx, undefined, color[3], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(46 * scale, 41 * scale);
        ctx.bezierCurveTo(41 * scale, 42 * scale, 39 * scale, 45 * scale, 38 * scale, 48 * scale);
        fill_path(ctx, undefined, color[3], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(48 * scale, 48 * scale);
        ctx.bezierCurveTo(42 * scale, 51 * scale, 42 * scale, 53 * scale, 40 * scale, 55 * scale);
        fill_path(ctx, undefined, color[3], 4 * scale);
        if (i == 0) {
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(99 * scale, 101 * scale);
            ctx.bezierCurveTo(118.6666259765625 * scale, 104.33331298828125 * scale, 124.6666259765625 * scale, 116.33331298828125 * scale, 112.6666259765625 * scale, 114.33331298828125 * scale);
            ctx.bezierCurveTo(104.6666259765625 * scale, 112.33331298828125 * scale, 100.6666259765625 * scale, 105.33331298828125 * scale, 99.6666259765625 * scale, 101.33331298828125 * scale);
            fill_path(ctx, undefined, color[5], 6 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(97.6666259765625 * scale, 101.33331298828125 * scale);
            ctx.bezierCurveTo(81.6666259765625 * scale, 106.33331298828125 * scale, 79.6666259765625 * scale, 114.33331298828125 * scale, 89.6666259765625 * scale, 114.33331298828125 * scale);
            ctx.bezierCurveTo(95.6666259765625 * scale, 111.33331298828125 * scale, 95.6666259765625 * scale, 109.33331298828125 * scale, 98.6666259765625 * scale, 102.33331298828125 * scale);
            fill_path(ctx, undefined, color[5], 6 * scale);
        } else {
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(103 * scale, 100.39999389648438 * scale);
            ctx.bezierCurveTo(120 * scale, 106.39999389648438 * scale, 118 * scale, 107.39999389648438 * scale, 120 * scale, 111.39999389648438 * scale);
            fill_path(ctx, undefined, color[5], 6 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(103 * scale, 100.39999389648438 * scale);
            ctx.bezierCurveTo(90 * scale, 103.39999389648438 * scale, 89 * scale, 106.39999389648438 * scale, 87 * scale, 112.39999389648438 * scale);
            fill_path(ctx, undefined, color[5], 6 * scale);
            circle(ctx, 86 * scale, 114.39999389648438 * scale, 4.5 * scale);
            fill_path(ctx, color[1], color[5], 6 * scale);
            circle(ctx, 121 * scale, 114.39999389648438 * scale, 4.5 * scale);
            fill_path(ctx, color[1], color[5], 6 * scale);
        }
        return can;
    };

    function create_treasure_chest(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 253 * scale;
        can.height = 192 * scale;
        ctx.globalAlpha = 0.5;
        ctx.save();
        ctx.translate(42 * scale, 99 * scale);
        ctx.globalAlpha = 0.5;
        round_rect(ctx, -7 * scale, -20 * scale, 14 * scale, 39 * scale, 20 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.save();
        ctx.translate(37 * scale, 94 * scale);
        round_rect(ctx, -7 * scale, -20 * scale, 14 * scale, 37 * scale, 20 * scale);
        ctx.restore();
        fill_path(ctx, color[2]);
        ctx.globalAlpha = 0.5;
        ctx.save();
        ctx.translate(136 * scale, 99 * scale);
        ctx.globalAlpha = 0.5;
        round_rect(ctx, -84 * scale, -67 * scale, 168 * scale, 134 * scale, 20 * scale);
        ctx.restore();
        fill_path(ctx, color[0], color[0], 13 * scale);
        ctx.globalAlpha = 1;
        ctx.save();
        ctx.translate(131 * scale, 94 * scale);
        round_rect(ctx, -84 * scale, -67 * scale, 168 * scale, 134 * scale, 20 * scale);
        ctx.restore();
        fill_path(ctx, color[2], color[2], 13 * scale);
        ctx.save();
        ctx.translate(131 * scale, 94 * scale);
        round_rect(ctx, -76 * scale, -61 * scale, 152 * scale, 122 * scale, 20 * scale);
        ctx.restore();
        fill_path(ctx, color[3], color[1], 8 * scale);
        ctx.save();
        ctx.translate(168.5 * scale, 93.5 * scale);
        round_rect(ctx, -30.5 * scale, -58.5 * scale, 61 * scale, 117 * scale, 20 * scale);
        ctx.restore();
        fill_path(ctx, color[3], color[4], 6 * scale);
        ctx.save();
        ctx.translate(93.5 * scale, 95.5 * scale);
        round_rect(ctx, -32 * scale, -59.5 * scale, 59 * scale, 119 * scale, 20 * scale);
        ctx.restore();
        fill_path(ctx, color[3], color[4], 6 * scale);
        ctx.save();
        ctx.translate(130.5 * scale, 94 * scale);
        round_rect(ctx, -36 * scale, -67 * scale, 73 * scale, 134 * scale, 20 * scale);
        ctx.restore();
        fill_path(ctx, color[3], color[2], 8 * scale);
        ctx.globalAlpha = 0.5;
        ctx.save();
        ctx.translate(133 * scale, 97 * scale);
        round_rect(ctx, -83 * scale, -12 * scale, 160 * scale, 24 * scale, 0 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.save();
        ctx.translate(133 * scale, 92 * scale);
        round_rect(ctx, -83 * scale, -12 * scale, 160 * scale, 24 * scale, 0 * scale);
        ctx.restore();
        fill_path(ctx, color[2]);
        ctx.globalAlpha = 0.5;
        ctx.save();
        ctx.translate(228 * scale, 99.5 * scale);
        ctx.globalAlpha = 0.5;
        round_rect(ctx, -5 * scale, -18.5 * scale, 10 * scale, 37 * scale, 20 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.save();
        ctx.translate(223 * scale, 94.5 * scale);
        round_rect(ctx, -5 * scale, -18.5 * scale, 10 * scale, 37 * scale, 20 * scale);
        ctx.restore();
        fill_path(ctx, color[2]);
        ctx.save();
        ctx.translate(133.5 * scale, 175.5 * scale);
        ctx.globalAlpha = 0.5;
        round_rect(ctx, -22.5 * scale, -6.5 * scale, 45 * scale, 13 * scale, 20 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.save();
        ctx.translate(128.5 * scale, 170.5 * scale);
        round_rect(ctx, -22.5 * scale, -6.5 * scale, 45 * scale, 13 * scale, 20 * scale);
        ctx.restore();
        fill_path(ctx, color[2]);
        return can;
    };

    function create_hurt_treasure_chest(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 253 * scale;
        can.height = 192 * scale;
        ctx.save();
        ctx.translate(37 * scale, 94 * scale);
        round_rect(ctx, -7 * scale, -20 * scale, 14 * scale, 37 * scale, 20 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.save();
        ctx.translate(131 * scale, 94 * scale);
        round_rect(ctx, -84 * scale, -67 * scale, 168 * scale, 134 * scale, 20 * scale);
        ctx.restore();
        fill_path(ctx, color[0], color[0], 13 * scale);
        ctx.save();
        ctx.translate(223 * scale, 94.5 * scale);
        round_rect(ctx, -5 * scale, -18.5 * scale, 10 * scale, 37 * scale, 20 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.save();
        ctx.translate(128.5 * scale, 170.5 * scale);
        round_rect(ctx, -22.5 * scale, -6.5 * scale, 45 * scale, 13 * scale, 20 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        return can;
    };

    function create_bottle(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 316 * scale;
        can.height = 365 * scale;
        ctx.save();
        ctx.translate(156.07142639160156 * scale, 51.81248474121094 * scale);
        ctx.rotate(0);
        round_rect(ctx, -21.5 * scale, -34 * scale, 43 * scale, 68 * scale, 8 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 15 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(110.57142639160156 * scale, 197.09820556640625 * scale);
        ctx.bezierCurveTo(158.07142639160156 * scale, 179.09820556640625 * scale, 158.07142639160156 * scale, 179.09820556640625 * scale, 205.57142639160156 * scale, 161.09820556640625 * scale);
        ctx.bezierCurveTo(205.57142639160156 * scale, 235.45535278320312 * scale, 205.57142639160156 * scale, 235.45535278320312 * scale, 205.57142639160156 * scale, 309.8125 * scale);
        ctx.bezierCurveTo(205.57142639160156 * scale, 323.8125 * scale, 200.57142639160156 * scale, 325.8125 * scale, 187.57142639160156 * scale, 326.8125 * scale);
        ctx.bezierCurveTo(155.57142639160156 * scale, 326.3125 * scale, 155.57142639160156 * scale, 326.3125 * scale, 123.57142639160156 * scale, 325.8125 * scale);
        ctx.bezierCurveTo(111.57142639160156 * scale, 326.8125 * scale, 109.57142639160156 * scale, 321.8125 * scale, 110.57142639160156 * scale, 312.8125 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 15 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(126.57142639160156 * scale, 67.38392639160156 * scale);
        ctx.bezierCurveTo(126.57142639160156 * scale, 57.38392639160156 * scale, 132.57142639160156 * scale, 54.38392639160156 * scale, 140.57142639160156 * scale, 54.38392639160156 * scale);
        ctx.bezierCurveTo(177.57142639160156 * scale, 55.38392639160156 * scale, 158.07142639160156 * scale, 54.38392639160156 * scale, 175.57142639160156 * scale, 54.38392639160156 * scale);
        ctx.bezierCurveTo(185.57142639160156 * scale, 56.38392639160156 * scale, 185.57142639160156 * scale, 57.38392639160156 * scale, 184.57142639160156 * scale, 66.38392639160156 * scale);
        ctx.bezierCurveTo(184.57142639160156 * scale, 78.38392639160156 * scale, 184.57142639160156 * scale, 89.38392639160156 * scale, 184.57142639160156 * scale, 90.38392639160156 * scale);
        ctx.bezierCurveTo(177.57142639160156 * scale, 107.38392639160156 * scale, 180.57142639160156 * scale, 112.38392639160156 * scale, 189.57142639160156 * scale, 116.38392639160156 * scale);
        ctx.bezierCurveTo(212.57142639160156 * scale, 127.38392639160156 * scale, 212.57142639160156 * scale, 132.38392639160156 * scale, 211.57142639160156 * scale, 150.38392639160156 * scale);
        ctx.bezierCurveTo(211.57142639160156 * scale, 227.59821128845215 * scale, 211.57142639160156 * scale, 227.59821128845215 * scale, 211.57142639160156 * scale, 304.81249618530273 * scale);
        ctx.bezierCurveTo(212.57142639160156 * scale, 328.81249618530273 * scale, 209.57142639160156 * scale, 330.81249618530273 * scale, 188.57142639160156 * scale, 333.81249618530273 * scale);
        ctx.bezierCurveTo(155.07142639160156 * scale, 333.31249618530273 * scale, 155.07142639160156 * scale, 333.31249618530273 * scale, 121.57142639160156 * scale, 332.81249618530273 * scale);
        ctx.bezierCurveTo(104.57142639160156 * scale, 327.81249618530273 * scale, 105.57142639160156 * scale, 328.81249618530273 * scale, 104.57142639160156 * scale, 312.81249618530273 * scale);
        ctx.bezierCurveTo(104.57142639160156 * scale, 228.16963958740234 * scale, 104.57142639160156 * scale, 228.16963958740234 * scale, 104.57142639160156 * scale, 143.52678298950195 * scale);
        ctx.bezierCurveTo(106.57142639160156 * scale, 124.52678298950195 * scale, 110.57142639160156 * scale, 123.52678298950195 * scale, 123.57142639160156 * scale, 116.52678298950195 * scale);
        ctx.bezierCurveTo(136.57142639160156 * scale, 110.52678298950195 * scale, 130.57142639160156 * scale, 106.52678298950195 * scale, 126.57142639160156 * scale, 98.52678298950195 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[5], 15 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(125.57142639160156 * scale, 156.66963958740234 * scale);
        ctx.bezierCurveTo(125.57142639160156 * scale, 182.66963958740234 * scale, 125.57142639160156 * scale, 182.66963958740234 * scale, 125.57142639160156 * scale, 208.66963958740234 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[6], 15 * scale);
        return can;
    };

    function create_bottle_full(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 316 * scale;
        can.height = 365 * scale;
        ctx.save();
        ctx.translate(156.07142639160156 * scale, 51.81248474121094 * scale);
        ctx.rotate(0);
        round_rect(ctx, -21.5 * scale, -34 * scale, 43 * scale, 68 * scale, 8 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 15 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(126.57142639160156 * scale, 67.38392639160156 * scale);
        ctx.bezierCurveTo(126.57142639160156 * scale, 57.38392639160156 * scale, 132.57142639160156 * scale, 54.38392639160156 * scale, 140.57142639160156 * scale, 54.38392639160156 * scale);
        ctx.bezierCurveTo(177.57142639160156 * scale, 55.38392639160156 * scale, 158.07142639160156 * scale, 54.38392639160156 * scale, 175.57142639160156 * scale, 54.38392639160156 * scale);
        ctx.bezierCurveTo(185.57142639160156 * scale, 56.38392639160156 * scale, 185.57142639160156 * scale, 57.38392639160156 * scale, 184.57142639160156 * scale, 66.38392639160156 * scale);
        ctx.bezierCurveTo(184.57142639160156 * scale, 78.38392639160156 * scale, 184.57142639160156 * scale, 89.38392639160156 * scale, 184.57142639160156 * scale, 90.38392639160156 * scale);
        ctx.bezierCurveTo(177.57142639160156 * scale, 107.38392639160156 * scale, 180.57142639160156 * scale, 112.38392639160156 * scale, 189.57142639160156 * scale, 116.38392639160156 * scale);
        ctx.bezierCurveTo(212.57142639160156 * scale, 127.38392639160156 * scale, 212.57142639160156 * scale, 132.38392639160156 * scale, 211.57142639160156 * scale, 150.38392639160156 * scale);
        ctx.bezierCurveTo(211.57142639160156 * scale, 227.59821128845215 * scale, 211.57142639160156 * scale, 227.59821128845215 * scale, 211.57142639160156 * scale, 304.81249618530273 * scale);
        ctx.bezierCurveTo(212.57142639160156 * scale, 328.81249618530273 * scale, 209.57142639160156 * scale, 330.81249618530273 * scale, 188.57142639160156 * scale, 333.81249618530273 * scale);
        ctx.bezierCurveTo(155.07142639160156 * scale, 333.31249618530273 * scale, 155.07142639160156 * scale, 333.31249618530273 * scale, 121.57142639160156 * scale, 332.81249618530273 * scale);
        ctx.bezierCurveTo(104.57142639160156 * scale, 327.81249618530273 * scale, 105.57142639160156 * scale, 328.81249618530273 * scale, 104.57142639160156 * scale, 312.81249618530273 * scale);
        ctx.bezierCurveTo(104.57142639160156 * scale, 228.16963958740234 * scale, 104.57142639160156 * scale, 228.16963958740234 * scale, 104.57142639160156 * scale, 143.52678298950195 * scale);
        ctx.bezierCurveTo(106.57142639160156 * scale, 124.52678298950195 * scale, 110.57142639160156 * scale, 123.52678298950195 * scale, 123.57142639160156 * scale, 116.52678298950195 * scale);
        ctx.bezierCurveTo(136.57142639160156 * scale, 110.52678298950195 * scale, 130.57142639160156 * scale, 106.52678298950195 * scale, 126.57142639160156 * scale, 98.52678298950195 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[5], 15 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(125.57142639160156 * scale, 156.66963958740234 * scale);
        ctx.bezierCurveTo(125.57142639160156 * scale, 182.66963958740234 * scale, 125.57142639160156 * scale, 182.66963958740234 * scale, 125.57142639160156 * scale, 208.66963958740234 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[6], 15 * scale);
        return can;
    };

    function create_drink_delay(scale, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 316 * scale;
        can.height = 365 * scale;
        ctx.save();
        ctx.translate(156.07142639160156 * scale, 51.81248474121094 * scale);
        ctx.rotate(0);
        round_rect(ctx, -21.5 * scale, -34 * scale, 43 * scale, 68 * scale, 8 * scale);
        ctx.restore();
        fill_path(ctx, color[0], color[0], 15 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(126.57142639160156 * scale, 67.38392639160156 * scale);
        ctx.bezierCurveTo(126.57142639160156 * scale, 57.38392639160156 * scale, 132.57142639160156 * scale, 54.38392639160156 * scale, 140.57142639160156 * scale, 54.38392639160156 * scale);
        ctx.bezierCurveTo(177.57142639160156 * scale, 55.38392639160156 * scale, 158.07142639160156 * scale, 54.38392639160156 * scale, 175.57142639160156 * scale, 54.38392639160156 * scale);
        ctx.bezierCurveTo(185.57142639160156 * scale, 56.38392639160156 * scale, 185.57142639160156 * scale, 57.38392639160156 * scale, 184.57142639160156 * scale, 66.38392639160156 * scale);
        ctx.bezierCurveTo(184.57142639160156 * scale, 78.38392639160156 * scale, 184.57142639160156 * scale, 89.38392639160156 * scale, 184.57142639160156 * scale, 90.38392639160156 * scale);
        ctx.bezierCurveTo(177.57142639160156 * scale, 107.38392639160156 * scale, 180.57142639160156 * scale, 112.38392639160156 * scale, 189.57142639160156 * scale, 116.38392639160156 * scale);
        ctx.bezierCurveTo(212.57142639160156 * scale, 127.38392639160156 * scale, 212.57142639160156 * scale, 132.38392639160156 * scale, 211.57142639160156 * scale, 150.38392639160156 * scale);
        ctx.bezierCurveTo(211.57142639160156 * scale, 227.59821128845215 * scale, 211.57142639160156 * scale, 227.59821128845215 * scale, 211.57142639160156 * scale, 304.81249618530273 * scale);
        ctx.bezierCurveTo(212.57142639160156 * scale, 328.81249618530273 * scale, 209.57142639160156 * scale, 330.81249618530273 * scale, 188.57142639160156 * scale, 333.81249618530273 * scale);
        ctx.bezierCurveTo(155.07142639160156 * scale, 333.31249618530273 * scale, 155.07142639160156 * scale, 333.31249618530273 * scale, 121.57142639160156 * scale, 332.81249618530273 * scale);
        ctx.bezierCurveTo(104.57142639160156 * scale, 327.81249618530273 * scale, 105.57142639160156 * scale, 328.81249618530273 * scale, 104.57142639160156 * scale, 312.81249618530273 * scale);
        ctx.bezierCurveTo(104.57142639160156 * scale, 228.16963958740234 * scale, 104.57142639160156 * scale, 228.16963958740234 * scale, 104.57142639160156 * scale, 143.52678298950195 * scale);
        ctx.bezierCurveTo(106.57142639160156 * scale, 124.52678298950195 * scale, 110.57142639160156 * scale, 123.52678298950195 * scale, 123.57142639160156 * scale, 116.52678298950195 * scale);
        ctx.bezierCurveTo(136.57142639160156 * scale, 110.52678298950195 * scale, 130.57142639160156 * scale, 106.52678298950195 * scale, 126.57142639160156 * scale, 98.52678298950195 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 15 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(125.57142639160156 * scale, 156.66963958740234 * scale);
        ctx.bezierCurveTo(125.57142639160156 * scale, 182.66963958740234 * scale, 125.57142639160156 * scale, 182.66963958740234 * scale, 125.57142639160156 * scale, 208.66963958740234 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 15 * scale);
        return can;
    };

    function create_bucket_empty(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 400 * scale;
        can.height = 400 * scale;
        ctx.translate(0, 15 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(102 * scale, 154 * scale);
        ctx.bezierCurveTo(108 * scale, 216.5 * scale, 108 * scale, 216.5 * scale, 114 * scale, 279 * scale);
        ctx.bezierCurveTo(124 * scale, 300 * scale, 237 * scale, 299 * scale, 251 * scale, 279 * scale);
        ctx.bezierCurveTo(257 * scale, 217 * scale, 257 * scale, 217 * scale, 263 * scale, 155 * scale);
        ctx.bezierCurveTo(248 * scale, 194 * scale, 91 * scale, 180 * scale, 103 * scale, 156 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(102 * scale, 154 * scale);
        ctx.bezierCurveTo(106 * scale, 53 * scale, 255 * scale, 53 * scale, 263 * scale, 154 * scale);
        ctx.bezierCurveTo(248 * scale, 38 * scale, 99 * scale, 69 * scale, 103 * scale, 154 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[0], 11 * scale);
        ctx.translate(0, -5 * scale);
        ctx.globalAlpha = 1;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(103 * scale, 154 * scale);
        ctx.bezierCurveTo(98 * scale, 119 * scale, 264 * scale, 119 * scale, 264 * scale, 154 * scale);
        ctx.bezierCurveTo(271 * scale, 189 * scale, 94 * scale, 188 * scale, 103 * scale, 154 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[2], 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(102 * scale, 154 * scale);
        ctx.bezierCurveTo(108 * scale, 216.5 * scale, 108 * scale, 216.5 * scale, 114 * scale, 279 * scale);
        ctx.bezierCurveTo(124 * scale, 300 * scale, 237 * scale, 299 * scale, 251 * scale, 279 * scale);
        ctx.bezierCurveTo(257 * scale, 217 * scale, 257 * scale, 217 * scale, 263 * scale, 155 * scale);
        ctx.bezierCurveTo(248 * scale, 194 * scale, 91 * scale, 180 * scale, 103 * scale, 156 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(182 * scale, 185 * scale);
        ctx.bezierCurveTo(182.5 * scale, 237.5 * scale, 182.5 * scale, 237.5 * scale, 183 * scale, 290 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[2], 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(222 * scale, 287 * scale);
        ctx.bezierCurveTo(226 * scale, 233.5 * scale, 226 * scale, 233.5 * scale, 230 * scale, 180 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[2], 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(145 * scale, 290 * scale);
        ctx.bezierCurveTo(140.5 * scale, 237 * scale, 140.5 * scale, 237 * scale, 136 * scale, 184 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 11 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(105 * scale, 184 * scale);
        ctx.bezierCurveTo(148 * scale, 205 * scale, 231 * scale, 202 * scale, 260 * scale, 182 * scale);
        ctx.bezierCurveTo(259 * scale, 195.5 * scale, 259 * scale, 195.5 * scale, 258 * scale, 209 * scale);
        ctx.bezierCurveTo(217 * scale, 218 * scale, 163 * scale, 225 * scale, 108 * scale, 207 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[2], 11 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(251 * scale, 276 * scale);
        ctx.bezierCurveTo(251.5 * scale, 267.5 * scale, 251.5 * scale, 267.5 * scale, 252 * scale, 259 * scale);
        ctx.bezierCurveTo(212 * scale, 272 * scale, 156 * scale, 275 * scale, 112 * scale, 260 * scale);
        ctx.bezierCurveTo(112.5 * scale, 269 * scale, 112.5 * scale, 269 * scale, 113 * scale, 278 * scale);
        ctx.bezierCurveTo(155 * scale, 306 * scale, 253 * scale, 286 * scale, 250 * scale, 276 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[2], 11 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(102 * scale, 154 * scale);
        ctx.bezierCurveTo(106 * scale, 53 * scale, 255 * scale, 53 * scale, 263 * scale, 154 * scale);
        ctx.bezierCurveTo(248 * scale, 38 * scale, 99 * scale, 69 * scale, 103 * scale, 154 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[2], 11 * scale);
        return can;
    };

    function create_bucket_full(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 400 * scale;
        can.height = 400 * scale;
        ctx.translate(0, 15 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(102 * scale, 154 * scale);
        ctx.bezierCurveTo(108 * scale, 216.5 * scale, 108 * scale, 216.5 * scale, 114 * scale, 279 * scale);
        ctx.bezierCurveTo(124 * scale, 300 * scale, 237 * scale, 299 * scale, 251 * scale, 279 * scale);
        ctx.bezierCurveTo(257 * scale, 217 * scale, 257 * scale, 217 * scale, 263 * scale, 155 * scale);
        ctx.bezierCurveTo(248 * scale, 194 * scale, 91 * scale, 180 * scale, 103 * scale, 156 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(102 * scale, 154 * scale);
        ctx.bezierCurveTo(106 * scale, 53 * scale, 255 * scale, 53 * scale, 263 * scale, 154 * scale);
        ctx.bezierCurveTo(248 * scale, 38 * scale, 99 * scale, 69 * scale, 103 * scale, 154 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[0], 11 * scale);
        ctx.translate(0, -5 * scale);
        ctx.globalAlpha = 1;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(103 * scale, 154 * scale);
        ctx.bezierCurveTo(98 * scale, 119 * scale, 264 * scale, 119 * scale, 264 * scale, 154 * scale);
        ctx.bezierCurveTo(271 * scale, 189 * scale, 94 * scale, 188 * scale, 103 * scale, 154 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[2], 12 * scale);
        ctx.translate(0, 25 * scale);
        ctx.globalAlpha = 1;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(103 * scale, 154 * scale);
        ctx.bezierCurveTo(98 * scale, 119 * scale, 264 * scale, 119 * scale, 264 * scale, 154 * scale);
        ctx.bezierCurveTo(271 * scale, 189 * scale, 94 * scale, 188 * scale, 103 * scale, 154 * scale);
        ctx.closePath();
        fill_path(ctx, color[5]);
        ctx.translate(0, -25 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(102 * scale, 154 * scale);
        ctx.bezierCurveTo(108 * scale, 216.5 * scale, 108 * scale, 216.5 * scale, 114 * scale, 279 * scale);
        ctx.bezierCurveTo(124 * scale, 300 * scale, 237 * scale, 299 * scale, 251 * scale, 279 * scale);
        ctx.bezierCurveTo(257 * scale, 217 * scale, 257 * scale, 217 * scale, 263 * scale, 155 * scale);
        ctx.bezierCurveTo(248 * scale, 194 * scale, 91 * scale, 180 * scale, 103 * scale, 156 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(182 * scale, 185 * scale);
        ctx.bezierCurveTo(182.5 * scale, 237.5 * scale, 182.5 * scale, 237.5 * scale, 183 * scale, 290 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[2], 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(222 * scale, 287 * scale);
        ctx.bezierCurveTo(226 * scale, 233.5 * scale, 226 * scale, 233.5 * scale, 230 * scale, 180 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[2], 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(145 * scale, 290 * scale);
        ctx.bezierCurveTo(140.5 * scale, 237 * scale, 140.5 * scale, 237 * scale, 136 * scale, 184 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 11 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(105 * scale, 184 * scale);
        ctx.bezierCurveTo(148 * scale, 205 * scale, 231 * scale, 202 * scale, 260 * scale, 182 * scale);
        ctx.bezierCurveTo(259 * scale, 195.5 * scale, 259 * scale, 195.5 * scale, 258 * scale, 209 * scale);
        ctx.bezierCurveTo(217 * scale, 218 * scale, 163 * scale, 225 * scale, 108 * scale, 207 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[2], 11 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(251 * scale, 276 * scale);
        ctx.bezierCurveTo(251.5 * scale, 267.5 * scale, 251.5 * scale, 267.5 * scale, 252 * scale, 259 * scale);
        ctx.bezierCurveTo(212 * scale, 272 * scale, 156 * scale, 275 * scale, 112 * scale, 260 * scale);
        ctx.bezierCurveTo(112.5 * scale, 269 * scale, 112.5 * scale, 269 * scale, 113 * scale, 278 * scale);
        ctx.bezierCurveTo(155 * scale, 306 * scale, 253 * scale, 286 * scale, 250 * scale, 276 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[2], 11 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(102 * scale, 154 * scale);
        ctx.bezierCurveTo(106 * scale, 53 * scale, 255 * scale, 53 * scale, 263 * scale, 154 * scale);
        ctx.bezierCurveTo(248 * scale, 38 * scale, 99 * scale, 69 * scale, 103 * scale, 154 * scale);
        ctx.closePath();
        fill_path(ctx, undefined, color[2], 11 * scale);
        return can;
    };

    function create_shovel(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 80 * scale;
        can.height = 160 * scale;
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(5 * scale, 5 * scale);
        ctx.save();
        round_rect(ctx, 33 * scale, 53 * scale, 10 * scale, 98 * scale, 10 * scale);
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.translate(-150 * scale, -100 * scale);
        ctx.moveTo(167.5 * scale, 171.0625 * scale);
        ctx.bezierCurveTo(188 * scale, 171.0625 * scale, 188 * scale, 171.0625 * scale, 208.5 * scale, 171.0625 * scale);
        ctx.bezierCurveTo(208.5 * scale, 156.0625 * scale, 208.5 * scale, 156.0625 * scale, 208.5 * scale, 141.0625 * scale);
        ctx.bezierCurveTo(203.5 * scale, 113.0625 * scale, 179.5 * scale, 96.0625 * scale, 167.5 * scale, 141.0625 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.restore();
        ctx.globalAlpha = 1;
        ctx.translate(-5 * scale, -5 * scale);
        ctx.save();
        round_rect(ctx, 33 * scale, 53 * scale, 10 * scale, 98 * scale, 10 * scale);
        fill_path(ctx, color[1], color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.translate(-150 * scale, -100 * scale);
        ctx.moveTo(167.5 * scale, 171.0625 * scale);
        ctx.bezierCurveTo(188 * scale, 171.0625 * scale, 188 * scale, 171.0625 * scale, 208.5 * scale, 171.0625 * scale);
        ctx.bezierCurveTo(208.5 * scale, 156.0625 * scale, 208.5 * scale, 156.0625 * scale, 208.5 * scale, 141.0625 * scale);
        ctx.bezierCurveTo(203.5 * scale, 113.0625 * scale, 179.5 * scale, 96.0625 * scale, 167.5 * scale, 141.0625 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.translate(0 * scale, 1 * scale);
        ctx.moveTo(180.5 * scale, 169.0625 * scale);
        ctx.bezierCurveTo(180.5 * scale, 157.5625 * scale, 180.5 * scale, 157.5625 * scale, 180.5 * scale, 146.0625 * scale);
        ctx.bezierCurveTo(181.5 * scale, 134.0625 * scale, 193.5 * scale, 129.0625 * scale, 196.5 * scale, 146.0625 * scale);
        ctx.bezierCurveTo(196.5 * scale, 157.5625 * scale, 196.5 * scale, 157.5625 * scale, 196.5 * scale, 169.0625 * scale);
        ctx.closePath();
        fill_path(ctx, color[5]);
        ctx.restore();
        return can;
    };

    function create_symbol_hud(scale, color, i) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 109 * scale;
        can.height = 110 * scale;
        circle(ctx, 54.5 * scale, 55 * scale, 48.038209575038294 * scale);
        fill_path(ctx, color[0], color[1], 8 * scale);
        if (i == 0) {
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(54.928558349609375 * scale, 43.72320556640625 * scale);
            ctx.bezierCurveTo(66.92855834960938 * scale, 31.72320556640625 * scale, 69.92855834960938 * scale, 29.72320556640625 * scale, 74.92855834960938 * scale, 29.72320556640625 * scale);
            ctx.bezierCurveTo(86.92855834960938 * scale, 28.72320556640625 * scale, 91.92855834960938 * scale, 42.72320556640625 * scale, 89.92855834960938 * scale, 52.72320556640625 * scale);
            ctx.bezierCurveTo(88.92855834960938 * scale, 63.72320556640625 * scale, 73.92855834960938 * scale, 75.72320556640625 * scale, 55.928558349609375 * scale, 87.72320556640625 * scale);
            ctx.bezierCurveTo(37.928558349609375 * scale, 78.72320556640625 * scale, 26.928558349609375 * scale, 65.72320556640625 * scale, 19.928558349609375 * scale, 54.72320556640625 * scale);
            ctx.bezierCurveTo(13.928558349609375 * scale, 42.72320556640625 * scale, 21.928558349609375 * scale, 28.72320556640625 * scale, 35.928558349609375 * scale, 29.72320556640625 * scale);
            ctx.bezierCurveTo(45.928558349609375 * scale, 31.72320556640625 * scale, 51.928558349609375 * scale, 40.72320556640625 * scale, 53.928558349609375 * scale, 44.72320556640625 * scale);
            ctx.closePath();
            fill_path(ctx, color[2]);
        } else if (i == 1) {
            ctx.save();
            ctx.translate(55 * scale, 39.48748779296875 * scale);
            round_rect(ctx, -11.5 * scale, -36 * scale, 23 * scale, 72 * scale, 10 * scale);
            ctx.restore();
            fill_path(ctx, color[2], color[3], 4 * scale);
            circle(ctx, 54.5 * scale, 78.48748779296875 * scale, 22.02271554554524 * scale);
            fill_path(ctx, color[4], color[3], 4 * scale);
            ctx.save();
            ctx.translate(55.5 * scale, 57.287506103515625 * scale);
            round_rect(ctx, -9 * scale, -16 * scale, 18 * scale, 32 * scale, 10 * scale);
            ctx.restore();
            fill_path(ctx, color[4]);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(66.5 * scale, 25.287506103515625 * scale);
            ctx.bezierCurveTo(60.5 * scale, 25.287506103515625 * scale, 63.5 * scale, 25.287506103515625 * scale, 54.5 * scale, 25.287506103515625 * scale);
            ctx.closePath();
            fill_path(ctx, undefined, color[5], 4 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(66.5 * scale, 37.287506103515625 * scale);
            ctx.bezierCurveTo(60.5 * scale, 37.287506103515625 * scale, 60.5 * scale, 37.287506103515625 * scale, 54.5 * scale, 37.287506103515625 * scale);
            ctx.closePath();
            fill_path(ctx, undefined, color[5], 4 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(66.5 * scale, 50.287506103515625 * scale);
            ctx.bezierCurveTo(61 * scale, 50.287506103515625 * scale, 61 * scale, 50.287506103515625 * scale, 55.5 * scale, 50.287506103515625 * scale);
            ctx.closePath();
            fill_path(ctx, undefined, color[5], 4 * scale);
        } else if (i == 2) {
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(45.928558349609375 * scale, 55.29463195800781 * scale);
            ctx.bezierCurveTo(38.928558349609375 * scale, 67.29463195800781 * scale, 38.928558349609375 * scale, 67.29463195800781 * scale, 31.928558349609375 * scale, 79.29463195800781 * scale);
            ctx.bezierCurveTo(15.928558349609375 * scale, 85.29463195800781 * scale, 17.928558349609375 * scale, 86.29463195800781 * scale, 17.928558349609375 * scale, 90.29463195800781 * scale);
            ctx.bezierCurveTo(19.928558349609375 * scale, 94.29463195800781 * scale, 21.928558349609375 * scale, 94.29463195800781 * scale, 27.928558349609375 * scale, 92.29463195800781 * scale);
            ctx.bezierCurveTo(29.928558349609375 * scale, 98.29463195800781 * scale, 30.928558349609375 * scale, 99.29463195800781 * scale, 33.928558349609375 * scale, 99.29463195800781 * scale);
            ctx.bezierCurveTo(38.928558349609375 * scale, 97.29463195800781 * scale, 38.928558349609375 * scale, 93.29463195800781 * scale, 37.928558349609375 * scale, 86.29463195800781 * scale);
            ctx.bezierCurveTo(45.428558349609375 * scale, 73.29463195800781 * scale, 51.928558349609375 * scale, 64.29463195800781 * scale, 52.928558349609375 * scale, 60.29463195800781 * scale);
            ctx.closePath();
            fill_path(ctx, color[2]);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(55.928558349609375 * scale, 8.866058349609375 * scale);
            ctx.bezierCurveTo(35.928558349609375 * scale, 35.866058349609375 * scale, 37.928558349609375 * scale, 48.866058349609375 * scale, 46.928558349609375 * scale, 62.866058349609375 * scale);
            ctx.bezierCurveTo(65.92855834960938 * scale, 72.86605834960938 * scale, 80.92855834960938 * scale, 55.866058349609375 * scale, 93.92855834960938 * scale, 36.866058349609375 * scale);
            ctx.closePath();
            fill_path(ctx, color[3], color[4], 6 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(93.92855834960938 * scale, 36.866058349609375 * scale);
            ctx.bezierCurveTo(82.92855834960938 * scale, 37.866058349609375 * scale, 77.92855834960938 * scale, 36.866058349609375 * scale, 67.92855834960938 * scale, 28.866058349609375 * scale);
            ctx.bezierCurveTo(53.928558349609375 * scale, 16.866058349609375 * scale, 53.928558349609375 * scale, 14.866058349609375 * scale, 55.928558349609375 * scale, 7.866058349609375 * scale);
            ctx.bezierCurveTo(65.92855834960938 * scale, 4.866058349609375 * scale, 71.92855834960938 * scale, 7.866058349609375 * scale, 83.92855834960938 * scale, 13.866058349609375 * scale);
            ctx.bezierCurveTo(96.92855834960938 * scale, 21.866058349609375 * scale, 95.92855834960938 * scale, 31.866058349609375 * scale, 92.92855834960938 * scale, 36.866058349609375 * scale);
            ctx.closePath();
            fill_path(ctx, color[3], color[4], 6 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(68.92855834960938 * scale, 16.866058349609375 * scale);
            ctx.bezierCurveTo(71.92855834960938 * scale, 13.866058349609375 * scale, 76.92855834960938 * scale, 16.866058349609375 * scale, 79.92855834960938 * scale, 21.866058349609375 * scale);
            ctx.bezierCurveTo(82.92855834960938 * scale, 24.866058349609375 * scale, 81.92855834960938 * scale, 27.866058349609375 * scale, 73.92855834960938 * scale, 24.866058349609375 * scale);
            ctx.bezierCurveTo(67.92855834960938 * scale, 20.866058349609375 * scale, 66.92855834960938 * scale, 19.866058349609375 * scale, 67.92855834960938 * scale, 17.866058349609375 * scale);
            ctx.closePath();
            fill_path(ctx, color[2]);
        } else if (i == 3) {
            ctx.scale(0.9, 0.9);
            ctx.translate(6 * scale, 0);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(54 * scale, 0.421875 * scale);
            ctx.bezierCurveTo(84 * scale, 45.421875 * scale, 89 * scale, 51.421875 * scale, 83 * scale, 74.421875 * scale);
            ctx.bezierCurveTo(74 * scale, 95.421875 * scale, 46 * scale, 98.421875 * scale, 30 * scale, 78.421875 * scale);
            ctx.bezierCurveTo(22 * scale, 59.421875 * scale, 27 * scale, 49.421875 * scale, 34 * scale, 36.421875 * scale);
            ctx.closePath();
            fill_path(ctx, color[2], color[3], 6 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(74 * scale, 52.421875 * scale);
            ctx.bezierCurveTo(77 * scale, 73.421875 * scale, 69 * scale, 81.421875 * scale, 58 * scale, 81.421875 * scale);
            ctx.bezierCurveTo(66 * scale, 71.421875 * scale, 70 * scale, 66.421875 * scale, 74 * scale, 52.421875 * scale);
            ctx.closePath();
            fill_path(ctx, color[3]);
        }
        return can;
    };

    function create_button_background(style, pressed) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        var w = style.w + style.lw;
        var h = style.h + style.lw;
        var shadow = h * 0.1;
        can.width = w;
        can.height = h + shadow;
        ctx.beginPath();
        ctx.translate(w / 2, (h / 2) + shadow);
        ctx.globalAlpha = 0.5;
        round_rect(ctx, -style.w / 2, -style.h / 2, style.w, style.h, style.r);
        fill_path(ctx, "#000", "#000", style.lw);
        ctx.globalAlpha = 1;
        ctx.beginPath();
        if (!pressed)
            ctx.translate(0, -shadow);

        round_rect(ctx, -style.w / 2, -style.h / 2, style.w, style.h, style.r);
        fill_path(ctx, style.bg, style.fg, style.lw);
        ctx.beginPath();
        ctx.fillStyle = style.color;
        ctx.textBaseline = "middle", ctx.textAlign = "center", ctx.font = (style.size + "px ") + style.font;
        ctx.fillText(style.text, 0, 0);
        return can;
    };

    function create_button(style) {
        var buttons = [];
        for (var i = 0; i < style.length; i++)
            buttons.push(create_button_background(style[i], (i == 2) ? true : false));
        return buttons;
    };

    function create_oxygen_gauges(scale) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        var w = 600 * scale;
        var h = 22 * scale;
        var r = 4 * scale;
        var lw = 4 * scale;
        can.width = w;
        can.height = h;
        round_rect(ctx, 5 * scale, 5 * scale, w - (10 * scale), h - (10 * scale), r);
        fill_path(ctx, null, "#BBE8EF", lw);
        return can;
    };

    function create_recipe_button(scale, color, i) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 573 * scale;
        can.height = 350 * scale;
        if (i == 1) {
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(336 * scale, 72 * scale);
            ctx.bezierCurveTo(366 * scale, 15 * scale, 426 * scale, 36 * scale, 497 * scale, 83 * scale);
            ctx.bezierCurveTo(522 * scale, 85 * scale, 522 * scale, 85 * scale, 547 * scale, 87 * scale);
            ctx.bezierCurveTo(476.5 * scale, 205 * scale, 476.5 * scale, 205 * scale, 406 * scale, 323 * scale);
            ctx.bezierCurveTo(297.5 * scale, 319 * scale, 297.5 * scale, 319 * scale, 189 * scale, 315 * scale);
            ctx.bezierCurveTo(105.5 * scale, 279 * scale, 105.5 * scale, 279 * scale, 22 * scale, 243 * scale);
            ctx.bezierCurveTo(92 * scale, 140 * scale, 92 * scale, 140 * scale, 162 * scale, 37 * scale);
            ctx.bezierCurveTo(173 * scale, 39 * scale, 173 * scale, 39 * scale, 184 * scale, 41 * scale);
            ctx.bezierCurveTo(185 * scale, 38.5 * scale, 185 * scale, 38.5 * scale, 186 * scale, 36 * scale);
            ctx.bezierCurveTo(323 * scale, 13 * scale, 322 * scale, 25 * scale, 337 * scale, 74 * scale);
            ctx.closePath();
            fill_path(ctx, color[4], color[4], 35 * scale);
        }
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(168 * scale, 42 * scale);
        ctx.bezierCurveTo(255 * scale, 60 * scale, 255 * scale, 60 * scale, 342 * scale, 78 * scale);
        ctx.bezierCurveTo(443 * scale, 81.5 * scale, 443 * scale, 81.5 * scale, 544 * scale, 85 * scale);
        ctx.bezierCurveTo(475 * scale, 204.5 * scale, 475 * scale, 204.5 * scale, 406 * scale, 324 * scale);
        ctx.bezierCurveTo(297.5 * scale, 320 * scale, 297.5 * scale, 320 * scale, 189 * scale, 316 * scale);
        ctx.bezierCurveTo(105.5 * scale, 279 * scale, 105.5 * scale, 279 * scale, 22 * scale, 242 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[1], 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(188 * scale, 41 * scale);
        ctx.bezierCurveTo(308 * scale, 15 * scale, 325 * scale, 18 * scale, 337 * scale, 66 * scale);
        ctx.bezierCurveTo(191 * scale, 305 * scale, 196 * scale, 286 * scale, 184 * scale, 307 * scale);
        ctx.bezierCurveTo(175 * scale, 250 * scale, 90 * scale, 254 * scale, 52 * scale, 241 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[3], 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(336 * scale, 71 * scale);
        ctx.bezierCurveTo(375 * scale, 8 * scale, 429 * scale, 50 * scale, 518 * scale, 92 * scale);
        ctx.bezierCurveTo(455 * scale, 199.5 * scale, 455 * scale, 199.5 * scale, 392 * scale, 307 * scale);
        ctx.bezierCurveTo(227 * scale, 301 * scale, 261 * scale, 255 * scale, 188 * scale, 308 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[3], 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(357 * scale, 76 * scale);
        ctx.bezierCurveTo(390 * scale, 67 * scale, 414 * scale, 86 * scale, 435 * scale, 104 * scale);
        ctx.bezierCurveTo(417 * scale, 135 * scale, 417 * scale, 135 * scale, 399 * scale, 166 * scale);
        ctx.bezierCurveTo(352 * scale, 140 * scale, 345 * scale, 139 * scale, 319 * scale, 142 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[3], 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(309 * scale, 168 * scale);
        ctx.bezierCurveTo(345 * scale, 163 * scale, 372 * scale, 180 * scale, 412 * scale, 203 * scale);
        fill_path(ctx, color[2], color[3], 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(263 * scale, 54 * scale);
        ctx.bezierCurveTo(305 * scale, 44 * scale, 307 * scale, 51 * scale, 311 * scale, 64 * scale);
        ctx.bezierCurveTo(270.5 * scale, 129.5 * scale, 270.5 * scale, 129.5 * scale, 230 * scale, 195 * scale);
        ctx.bezierCurveTo(221 * scale, 175 * scale, 203 * scale, 171 * scale, 186 * scale, 172 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[3], 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(292 * scale, 198 * scale);
        ctx.bezierCurveTo(328 * scale, 191 * scale, 364 * scale, 211 * scale, 401 * scale, 237 * scale);
        fill_path(ctx, color[2], color[3], 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(245 * scale, 68 * scale);
        ctx.bezierCurveTo(210 * scale, 72 * scale, 210 * scale, 72 * scale, 189 * scale, 69 * scale);
        fill_path(ctx, color[2], color[3], 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(222 * scale, 96 * scale);
        ctx.bezierCurveTo(196 * scale, 97 * scale, 193 * scale, 97 * scale, 177 * scale, 92 * scale);
        fill_path(ctx, color[2], color[3], 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(207 * scale, 124 * scale);
        ctx.bezierCurveTo(179 * scale, 123 * scale, 177 * scale, 124 * scale, 161 * scale, 119 * scale);
        fill_path(ctx, color[2], color[3], 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(115 * scale, 183 * scale);
        ctx.bezierCurveTo(184 * scale, 185 * scale, 203 * scale, 198 * scale, 219 * scale, 221 * scale);
        fill_path(ctx, color[2], color[3], 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(98 * scale, 213 * scale);
        ctx.bezierCurveTo(161 * scale, 214 * scale, 193 * scale, 227 * scale, 201 * scale, 249 * scale);
        fill_path(ctx, color[2], color[3], 12 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(399 * scale, 257 * scale);
        ctx.bezierCurveTo(287 * scale, 215 * scale, 280 * scale, 215 * scale, 263 * scale, 222 * scale);
        ctx.bezierCurveTo(253 * scale, 238 * scale, 247 * scale, 245 * scale, 243 * scale, 254 * scale);
        ctx.bezierCurveTo(267 * scale, 236 * scale, 292 * scale, 263 * scale, 377 * scale, 284 * scale);
        fill_path(ctx, color[3], color[3], 12 * scale);
        return can;
    };

    function create_quest_button(scale, draw_shadow, color, i) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 170 * scale;
        can.height = 200 * scale;
        ctx.translate(5 * scale, 15 * scale);
        if (i == 1) {
            ctx.translate(0, -5 * scale);
            circle(ctx, 77.00003051757812 * scale, 104.49432373046875 * scale, 71.84010022264724 * scale);
            fill_path(ctx, color[1], color[5], 20 * scale);
            circle(ctx, 77.00003051757812 * scale, 104.22160339355469 * scale, 61.554853586049575 * scale);
            fill_path(ctx, color[1], color[5], 20 * scale);
            ctx.save();
            ctx.translate(77.00003051757812 * scale, 31.267044067382812 * scale);
            round_rect(ctx, -6 * scale, -12.5 * scale, 12 * scale, 25 * scale, 10 * scale);
            ctx.restore();
            fill_path(ctx, color[1], color[5], 20 * scale);
            ctx.save();
            ctx.translate(77.00003051757812 * scale, 13.267044067382812 * scale);
            round_rect(ctx, -15 * scale, -10.5 * scale, 30 * scale, 21 * scale, 10 * scale);
            ctx.restore();
            fill_path(ctx, color[1], color[5], 20 * scale);
        }
        circle(ctx, 77.00003051757812 * scale, 104.49432373046875 * scale, 71.84010022264724 * scale);
        fill_path(ctx, color[1], color[2], 7 * scale);
        circle(ctx, 77.00003051757812 * scale, 104.22160339355469 * scale, 61.554853586049575 * scale);
        fill_path(ctx, color[1], color[2], 7 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(18.000030517578125 * scale, 105.85795593261719 * scale);
        ctx.bezierCurveTo(134.00003051757812 * scale, 104.85795593261719 * scale, 77.00003051757812 * scale, 104.85795593261719 * scale, 136.00003051757812 * scale, 103.85795593261719 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 8 * scale);
        circle(ctx, 77.00003051757812 * scale, 104.6761474609375 * scale, 32.55764119219941 * scale);
        fill_path(ctx, color[1], color[2], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(78.00003051757812 * scale, 112.03977966308594 * scale);
        ctx.bezierCurveTo(78.00003051757812 * scale, 87.03977966308594 * scale, 78.00003051757812 * scale, 87.03977966308594 * scale, 78.00003051757812 * scale, 62.03977966308594 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[2], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(78.00003051757812 * scale, 48.03977966308594 * scale);
        ctx.bezierCurveTo(82.00003051757812 * scale, 55.53977966308594 * scale, 82.00003051757812 * scale, 55.53977966308594 * scale, 86.00003051757812 * scale, 63.03977966308594 * scale);
        ctx.bezierCurveTo(78.00003051757812 * scale, 63.03977966308594 * scale, 78.00003051757812 * scale, 63.03977966308594 * scale, 70.00003051757812 * scale, 63.03977966308594 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[2], 4 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(80.00003051757812 * scale, 111.6761474609375 * scale);
        ctx.bezierCurveTo(95.00003051757812 * scale, 97.1761474609375 * scale, 95.00003051757812 * scale, 97.1761474609375 * scale, 110.00003051757812 * scale, 82.6761474609375 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[2], 8 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(107.00003051757812 * scale, 76.6761474609375 * scale);
        ctx.bezierCurveTo(111.50003051757812 * scale, 82.6761474609375 * scale, 111.50003051757812 * scale, 82.6761474609375 * scale, 116.00003051757812 * scale, 88.6761474609375 * scale);
        ctx.bezierCurveTo(118.50003051757812 * scale, 81.6761474609375 * scale, 118.50003051757812 * scale, 81.6761474609375 * scale, 121.00003051757812 * scale, 74.6761474609375 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[2], 4 * scale);
        circle(ctx, 77.00003051757812 * scale, 105.03977966308594 * scale, 15.556349186104045 * scale);
        fill_path(ctx, color[3], color[2], 4 * scale);
        ctx.save();
        ctx.translate(77.00003051757812 * scale, 31.267044067382812 * scale);
        ctx.rotate(0);
        round_rect(ctx, -6 * scale, -12.5 * scale, 12 * scale, 25 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 7 * scale);
        ctx.save();
        ctx.translate(77.00003051757812 * scale, 13.267044067382812 * scale);
        ctx.rotate(0);
        round_rect(ctx, -15 * scale, -10.5 * scale, 30 * scale, 21 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 7 * scale);
        return can;
    };

    function create_market_button(scale, color, i) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 81 * scale;
        can.height = 77 * scale;
        ctx.translate(0, 10 * scale);
        ctx.scale(0.2, 0.2);
        ctx.translate(0, -30 * scale);
        if (i == 1) {
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(36.5 * scale, 278.0625 * scale);
            ctx.bezierCurveTo(67.5 * scale, 316.0625 * scale, 134.5 * scale, 334.0625 * scale, 199.5 * scale, 319.0625 * scale);
            ctx.bezierCurveTo(254.5 * scale, 304.0625 * scale, 346.5 * scale, 270.0625 * scale, 348.5 * scale, 237.0625 * scale);
            ctx.bezierCurveTo(359.5 * scale, 206.0625 * scale, 318.5 * scale, 129.0625 * scale, 262.5 * scale, 122.0625 * scale);
            ctx.bezierCurveTo(213.5 * scale, 115.0625 * scale, 166.5 * scale, 133.0625 * scale, 104.5 * scale, 166.0625 * scale);
            ctx.bezierCurveTo(54.5 * scale, 194.0625 * scale, 23.5 * scale, 241.0625 * scale, 36.5 * scale, 277.0625 * scale);
            ctx.closePath();
            fill_path(ctx, color[0], color[3], 50 * scale);
        }
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(36.5 * scale, 278.0625 * scale);
        ctx.bezierCurveTo(67.5 * scale, 316.0625 * scale, 134.5 * scale, 334.0625 * scale, 199.5 * scale, 319.0625 * scale);
        ctx.bezierCurveTo(254.5 * scale, 304.0625 * scale, 346.5 * scale, 270.0625 * scale, 348.5 * scale, 237.0625 * scale);
        ctx.bezierCurveTo(359.5 * scale, 206.0625 * scale, 318.5 * scale, 129.0625 * scale, 262.5 * scale, 122.0625 * scale);
        ctx.bezierCurveTo(213.5 * scale, 115.0625 * scale, 166.5 * scale, 133.0625 * scale, 104.5 * scale, 166.0625 * scale);
        ctx.bezierCurveTo(54.5 * scale, 194.0625 * scale, 23.5 * scale, 241.0625 * scale, 36.5 * scale, 277.0625 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[1], 19 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(214.5 * scale, 124.0625 * scale);
        ctx.bezierCurveTo(242.5 * scale, 125.0625 * scale, 272.5 * scale, 159.0625 * scale, 283.5 * scale, 184.0625 * scale);
        ctx.bezierCurveTo(277.5 * scale, 161.0625 * scale, 233.5 * scale, 128.0625 * scale, 219.5 * scale, 122.0625 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[1], 19 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(157.5 * scale, 145.0625 * scale);
        ctx.bezierCurveTo(176.5 * scale, 148.0625 * scale, 205.5 * scale, 176.0625 * scale, 212.5 * scale, 197.0625 * scale);
        ctx.bezierCurveTo(205.5 * scale, 178.0625 * scale, 177.5 * scale, 152.0625 * scale, 156.5 * scale, 142.0625 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[1], 19 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(103.5 * scale, 169.0625 * scale);
        ctx.bezierCurveTo(160.5 * scale, 166.0625 * scale, 228.5 * scale, 312.0625 * scale, 162.5 * scale, 323.0625 * scale);
        ctx.bezierCurveTo(128.5 * scale, 330.0625 * scale, 45.5 * scale, 312.0625 * scale, 34.5 * scale, 268.0625 * scale);
        ctx.bezierCurveTo(30.5 * scale, 238.0625 * scale, 44.5 * scale, 222.0625 * scale, 52.5 * scale, 211.0625 * scale);
        ctx.bezierCurveTo(82.5 * scale, 174.0625 * scale, 104.5 * scale, 166.0625 * scale, 119.5 * scale, 172.0625 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[1], 19 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(194.5 * scale, 313.0625 * scale);
        ctx.bezierCurveTo(222.5 * scale, 306.0625 * scale, 319.5 * scale, 271.0625 * scale, 337.5 * scale, 241.0625 * scale);
        ctx.bezierCurveTo(274.5 * scale, 270.0625 * scale, 216.5 * scale, 288.0625 * scale, 199.5 * scale, 287.0625 * scale);
        ctx.bezierCurveTo(198.5 * scale, 302.0625 * scale, 195.5 * scale, 311.0625 * scale, 193.5 * scale, 312.0625 * scale);
        ctx.closePath();
        fill_path(ctx, color[1]);
        ctx.scale(3, 3);
        ctx.translate(15, 10 * scale);
        if (i == 1) {
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(4 * scale, 32 * scale);
            ctx.bezierCurveTo(19 * scale, 25 * scale, 19 * scale, 25 * scale, 34 * scale, 18 * scale);
            ctx.bezierCurveTo(41.5 * scale, 23.5 * scale, 41.5 * scale, 23.5 * scale, 49 * scale, 29 * scale);
            ctx.bezierCurveTo(59.5 * scale, 20 * scale, 59.5 * scale, 20 * scale, 70 * scale, 11 * scale);
            fill_path(ctx, undefined, color[3], 28 * scale);
            ctx.beginPath();
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.moveTo(56 * scale, 6 * scale);
            ctx.bezierCurveTo(63.5 * scale, 13.5 * scale, 63.5 * scale, 13.5 * scale, 71 * scale, 21 * scale);
            ctx.bezierCurveTo(74.5 * scale, 11.5 * scale, 74.5 * scale, 11.5 * scale, 78 * scale, 2 * scale);
            ctx.closePath();
            fill_path(ctx, color[3], color[3], 28 * scale);
        }
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(4 * scale, 32 * scale);
        ctx.bezierCurveTo(19 * scale, 25 * scale, 19 * scale, 25 * scale, 34 * scale, 18 * scale);
        ctx.bezierCurveTo(41.5 * scale, 23.5 * scale, 41.5 * scale, 23.5 * scale, 49 * scale, 29 * scale);
        ctx.bezierCurveTo(59.5 * scale, 20 * scale, 59.5 * scale, 20 * scale, 70 * scale, 11 * scale);
        fill_path(ctx, undefined, color[1], 17 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(56 * scale, 6 * scale);
        ctx.bezierCurveTo(63.5 * scale, 13.5 * scale, 63.5 * scale, 13.5 * scale, 71 * scale, 21 * scale);
        ctx.bezierCurveTo(74.5 * scale, 11.5 * scale, 74.5 * scale, 11.5 * scale, 78 * scale, 2 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[1], 17 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(4 * scale, 32 * scale);
        ctx.bezierCurveTo(19 * scale, 25 * scale, 19 * scale, 25 * scale, 34 * scale, 18 * scale);
        ctx.bezierCurveTo(41.5 * scale, 23.5 * scale, 41.5 * scale, 23.5 * scale, 49 * scale, 29 * scale);
        ctx.bezierCurveTo(59.5 * scale, 20 * scale, 59.5 * scale, 20 * scale, 70 * scale, 11 * scale);
        fill_path(ctx, undefined, color[2], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(56 * scale, 6 * scale);
        ctx.bezierCurveTo(63.5 * scale, 13.5 * scale, 63.5 * scale, 13.5 * scale, 71 * scale, 21 * scale);
        ctx.bezierCurveTo(74.5 * scale, 11.5 * scale, 74.5 * scale, 11.5 * scale, 78 * scale, 2 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[2], 10 * scale);
        return can;
    };

    function create_spanner(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 144 * scale;
        can.height = 280 * scale;
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(5 * scale, 5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(62 * scale, 103.79999542236328 * scale);
        ctx.bezierCurveTo(62.5 * scale, 148.79999542236328 * scale, 62.5 * scale, 148.79999542236328 * scale, 63 * scale, 193.79999542236328 * scale);
        ctx.bezierCurveTo(63 * scale, 219.79999542236328 * scale, 47 * scale, 217.79999542236328 * scale, 51 * scale, 230.79999542236328 * scale);
        ctx.bezierCurveTo(62 * scale, 255.79999542236328 * scale, 74 * scale, 260.7999954223633 * scale, 72 * scale, 248.79999542236328 * scale);
        ctx.bezierCurveTo(65 * scale, 226.79999542236328 * scale, 71 * scale, 229.79999542236328 * scale, 76 * scale, 225.79999542236328 * scale);
        ctx.bezierCurveTo(90 * scale, 224.79999542236328 * scale, 89 * scale, 232.79999542236328 * scale, 90 * scale, 243.79999542236328 * scale);
        ctx.bezierCurveTo(95 * scale, 253.79999542236328 * scale, 99 * scale, 249.79999542236328 * scale, 100 * scale, 229.79999542236328 * scale);
        ctx.bezierCurveTo(102 * scale, 213.79999542236328 * scale, 98 * scale, 214.79999542236328 * scale, 90 * scale, 205.79999542236328 * scale);
        ctx.bezierCurveTo(82 * scale, 201.79999542236328 * scale, 82 * scale, 185.79999542236328 * scale, 82 * scale, 114.79999542236328 * scale);
        ctx.bezierCurveTo(80 * scale, 73 * scale, 82 * scale, 68 * scale, 93 * scale, 53 * scale);
        ctx.bezierCurveTo(98 * scale, 37 * scale, 65 * scale, 14 * scale, 74 * scale, 33 * scale);
        ctx.bezierCurveTo(82 * scale, 56 * scale, 77 * scale, 52 * scale, 69 * scale, 54 * scale);
        ctx.bezierCurveTo(55 * scale, 57 * scale, 57 * scale, 53 * scale, 54 * scale, 39 * scale);
        ctx.bezierCurveTo(46 * scale, 20 * scale, 37 * scale, 61 * scale, 50 * scale, 68 * scale);
        ctx.bezierCurveTo(65 * scale, 81 * scale, 60 * scale, 89 * scale, 62 * scale, 102 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(-5 * scale, -5 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(62 * scale, 103.79999542236328 * scale);
        ctx.bezierCurveTo(62.5 * scale, 148.79999542236328 * scale, 62.5 * scale, 148.79999542236328 * scale, 63 * scale, 193.79999542236328 * scale);
        ctx.bezierCurveTo(63 * scale, 219.79999542236328 * scale, 47 * scale, 217.79999542236328 * scale, 51 * scale, 230.79999542236328 * scale);
        ctx.bezierCurveTo(62 * scale, 255.79999542236328 * scale, 74 * scale, 260.7999954223633 * scale, 72 * scale, 248.79999542236328 * scale);
        ctx.bezierCurveTo(65 * scale, 226.79999542236328 * scale, 71 * scale, 229.79999542236328 * scale, 76 * scale, 225.79999542236328 * scale);
        ctx.bezierCurveTo(90 * scale, 224.79999542236328 * scale, 89 * scale, 232.79999542236328 * scale, 90 * scale, 243.79999542236328 * scale);
        ctx.bezierCurveTo(95 * scale, 253.79999542236328 * scale, 99 * scale, 249.79999542236328 * scale, 100 * scale, 229.79999542236328 * scale);
        ctx.bezierCurveTo(102 * scale, 213.79999542236328 * scale, 98 * scale, 214.79999542236328 * scale, 90 * scale, 205.79999542236328 * scale);
        ctx.bezierCurveTo(82 * scale, 201.79999542236328 * scale, 82 * scale, 185.79999542236328 * scale, 82 * scale, 114.79999542236328 * scale);
        ctx.bezierCurveTo(80 * scale, 73 * scale, 82 * scale, 68 * scale, 93 * scale, 53 * scale);
        ctx.bezierCurveTo(98 * scale, 37 * scale, 65 * scale, 14 * scale, 74 * scale, 33 * scale);
        ctx.bezierCurveTo(82 * scale, 56 * scale, 77 * scale, 52 * scale, 69 * scale, 54 * scale);
        ctx.bezierCurveTo(55 * scale, 57 * scale, 57 * scale, 53 * scale, 54 * scale, 39 * scale);
        ctx.bezierCurveTo(46 * scale, 20 * scale, 37 * scale, 61 * scale, 50 * scale, 68 * scale);
        ctx.bezierCurveTo(65 * scale, 81 * scale, 60 * scale, 89 * scale, 62 * scale, 102 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[2], 6 * scale);
        return can;
    };

    function create_present(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 160 * scale;
        can.height = 161 * scale;
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(0, 10 * scale);
        ctx.save();
        ctx.translate(80.5 * scale, 78 * scale);
        round_rect(ctx, -71.5 * scale, -71 * scale, 143 * scale, 143 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(0, -10 * scale);
        ctx.save();
        ctx.translate(80.5 * scale, 78 * scale);
        round_rect(ctx, -71.5 * scale, -71 * scale, 143 * scale, 143 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[1], color[2], 6 * scale);
        ctx.save();
        ctx.translate(80 * scale, 78.5 * scale);
        round_rect(ctx, -17 * scale, -72.5 * scale, 34 * scale, 145 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[3], color[4], 6 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(0, 10 * scale);
        ctx.save();
        ctx.translate(80 * scale, 79.5 * scale);
        round_rect(ctx, -73 * scale, -16.5 * scale, 145 * scale, 34 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(0, -10 * scale);
        ctx.save();
        ctx.translate(80 * scale, 79.5 * scale);
        round_rect(ctx, -73 * scale, -16.5 * scale, 145 * scale, 34 * scale, 10 * scale);
        ctx.restore();
        fill_path(ctx, color[3], color[4], 6 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(0, 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(79 * scale, 71 * scale);
        ctx.bezierCurveTo(90 * scale, 42 * scale, 98 * scale, 36 * scale, 109 * scale, 43 * scale);
        ctx.bezierCurveTo(119 * scale, 47 * scale, 128 * scale, 62 * scale, 107 * scale, 72 * scale);
        ctx.bezierCurveTo(96 * scale, 78.5 * scale, 96 * scale, 78.5 * scale, 85 * scale, 85 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(84 * scale, 78 * scale);
        ctx.bezierCurveTo(113 * scale, 82 * scale, 123 * scale, 97 * scale, 115 * scale, 108 * scale);
        ctx.bezierCurveTo(110 * scale, 119 * scale, 98 * scale, 124 * scale, 87 * scale, 107 * scale);
        ctx.bezierCurveTo(81.5 * scale, 94.5 * scale, 81.5 * scale, 94.5 * scale, 76 * scale, 82 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(80 * scale, 73 * scale);
        ctx.bezierCurveTo(64 * scale, 37 * scale, 55 * scale, 34 * scale, 45 * scale, 42 * scale);
        ctx.bezierCurveTo(30 * scale, 54 * scale, 36 * scale, 65 * scale, 51 * scale, 72 * scale);
        ctx.bezierCurveTo(62.5 * scale, 77 * scale, 62.5 * scale, 77 * scale, 74 * scale, 82 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(82 * scale, 83 * scale);
        ctx.bezierCurveTo(73 * scale, 107 * scale, 60 * scale, 123 * scale, 47 * scale, 113 * scale);
        ctx.bezierCurveTo(33 * scale, 105 * scale, 33 * scale, 92 * scale, 52 * scale, 85 * scale);
        ctx.bezierCurveTo(74 * scale, 73 * scale, 77 * scale, 76 * scale, 76 * scale, 75 * scale);
        ctx.closePath();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(0, -10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(79 * scale, 71 * scale);
        ctx.bezierCurveTo(90 * scale, 42 * scale, 98 * scale, 36 * scale, 109 * scale, 43 * scale);
        ctx.bezierCurveTo(119 * scale, 47 * scale, 128 * scale, 62 * scale, 107 * scale, 72 * scale);
        ctx.bezierCurveTo(96 * scale, 78.5 * scale, 96 * scale, 78.5 * scale, 85 * scale, 85 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(84 * scale, 78 * scale);
        ctx.bezierCurveTo(113 * scale, 82 * scale, 123 * scale, 97 * scale, 115 * scale, 108 * scale);
        ctx.bezierCurveTo(110 * scale, 119 * scale, 98 * scale, 124 * scale, 87 * scale, 107 * scale);
        ctx.bezierCurveTo(81.5 * scale, 94.5 * scale, 81.5 * scale, 94.5 * scale, 76 * scale, 82 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(80 * scale, 73 * scale);
        ctx.bezierCurveTo(64 * scale, 37 * scale, 55 * scale, 34 * scale, 45 * scale, 42 * scale);
        ctx.bezierCurveTo(30 * scale, 54 * scale, 36 * scale, 65 * scale, 51 * scale, 72 * scale);
        ctx.bezierCurveTo(62.5 * scale, 77 * scale, 62.5 * scale, 77 * scale, 74 * scale, 82 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 6 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(82 * scale, 83 * scale);
        ctx.bezierCurveTo(73 * scale, 107 * scale, 60 * scale, 123 * scale, 47 * scale, 113 * scale);
        ctx.bezierCurveTo(33 * scale, 105 * scale, 33 * scale, 92 * scale, 52 * scale, 85 * scale);
        ctx.bezierCurveTo(74 * scale, 73 * scale, 77 * scale, 76 * scale, 76 * scale, 75 * scale);
        ctx.closePath();
        fill_path(ctx, color[3], color[4], 6 * scale);
        ctx.globalAlpha = draw_shadow ? 0.5 : 1;
        ctx.translate(0, 10 * scale);
        ctx.save();
        ctx.translate(78.5 * scale, 78 * scale);
        round_rect(ctx, -13.5 * scale, -14 * scale, 27 * scale, 27 * scale, 6 * scale);
        ctx.restore();
        fill_path(ctx, color[0]);
        ctx.globalAlpha = 1;
        ctx.translate(0, -10 * scale);
        ctx.save();
        ctx.translate(78.5 * scale, 78 * scale);
        round_rect(ctx, -13.5 * scale, -14 * scale, 27 * scale, 27 * scale, 6 * scale);
        ctx.restore();
        fill_path(ctx, color[3], color[4], 6 * scale);
        return can;
    };

    function create_crown_life(scale, draw_shadow, color) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 372 * scale;
        can.height = 358 * scale;
        ctx.translate(0 * scale, 10 * scale);
        ctx.globalAlpha = draw_shadow ? 0.2 : 1;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(247.00003051757812 * scale, 115.76704406738281 * scale);
        ctx.bezierCurveTo(305.0000305175781 * scale, 124.76704406738281 * scale, 335.0000305175781 * scale, 112.76704406738281 * scale, 359.0000305175781 * scale, 93.76704406738281 * scale);
        ctx.bezierCurveTo(359.5000305175781 * scale, 113.26704406738281 * scale, 359.5000305175781 * scale, 113.26704406738281 * scale, 360.0000305175781 * scale, 132.7670440673828 * scale);
        ctx.bezierCurveTo(339.0000305175781 * scale, 177.7670440673828 * scale, 281.0000305175781 * scale, 178.7670440673828 * scale, 243.00003051757812 * scale, 183.7670440673828 * scale);
        ctx.bezierCurveTo(214.50003051757812 * scale, 214.2670440673828 * scale, 214.50003051757812 * scale, 214.2670440673828 * scale, 186.00003051757812 * scale, 244.7670440673828 * scale);
        ctx.bezierCurveTo(155.00003051757812 * scale, 214.2670440673828 * scale, 155.00003051757812 * scale, 214.2670440673828 * scale, 124.00003051757812 * scale, 183.7670440673828 * scale);
        ctx.bezierCurveTo(51.000030517578125 * scale, 180.7670440673828 * scale, 21.000030517578125 * scale, 161.7670440673828 * scale, 9.000030517578125 * scale, 129.7670440673828 * scale);
        ctx.bezierCurveTo(8.500030517578125 * scale, 110.76704406738281 * scale, 8.500030517578125 * scale, 110.76704406738281 * scale, 8.000030517578125 * scale, 91.76704406738281 * scale);
        ctx.bezierCurveTo(31.000030517578125 * scale, 112.76704406738281 * scale, 87.00003051757812 * scale, 119.76704406738281 * scale, 116.00003051757812 * scale, 117.76704406738281 * scale);
        ctx.bezierCurveTo(175.00003051757812 * scale, 18.767044067382812 * scale, 170.00003051757812 * scale, 23.767044067382812 * scale, 181.00003051757812 * scale, 14.767044067382812 * scale);
        ctx.bezierCurveTo(199.00003051757812 * scale, 34.76704406738281 * scale, 203.00003051757812 * scale, 54.76704406738281 * scale, 247.00003051757812 * scale, 115.76704406738281 * scale);
        ctx.closePath();
        fill_path(ctx, color[0], color[0], 10 * scale);
        ctx.translate(0 * scale, -10 * scale);
        ctx.globalAlpha = 1;
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(107.00003051757812 * scale, 54.13069152832031 * scale);
        ctx.bezierCurveTo(106.50003051757812 * scale, 38.63069152832031 * scale, 106.50003051757812 * scale, 38.63069152832031 * scale, 106.00003051757812 * scale, 23.130691528320312 * scale);
        ctx.bezierCurveTo(121.50003051757812 * scale, 38.13069152832031 * scale, 121.50003051757812 * scale, 38.13069152832031 * scale, 137.00003051757812 * scale, 53.13069152832031 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[3], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(233.00003051757812 * scale, 53.6761474609375 * scale);
        ctx.bezierCurveTo(247.00003051757812 * scale, 37.1761474609375 * scale, 247.00003051757812 * scale, 37.1761474609375 * scale, 261.0000305175781 * scale, 20.6761474609375 * scale);
        ctx.bezierCurveTo(261.0000305175781 * scale, 36.1761474609375 * scale, 261.0000305175781 * scale, 36.1761474609375 * scale, 261.0000305175781 * scale, 51.6761474609375 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[3], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(293.0000305175781 * scale, 54.403411865234375 * scale);
        ctx.bezierCurveTo(300.0000305175781 * scale, 49.903411865234375 * scale, 300.0000305175781 * scale, 49.903411865234375 * scale, 307.0000305175781 * scale, 45.403411865234375 * scale);
        ctx.bezierCurveTo(307.0000305175781 * scale, 49.903411865234375 * scale, 307.0000305175781 * scale, 49.903411865234375 * scale, 307.0000305175781 * scale, 54.403411865234375 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[3], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(77.00003051757812 * scale, 54.403411865234375 * scale);
        ctx.bezierCurveTo(70.00003051757812 * scale, 50.403411865234375 * scale, 70.00003051757812 * scale, 50.403411865234375 * scale, 63.000030517578125 * scale, 46.403411865234375 * scale);
        ctx.bezierCurveTo(62.500030517578125 * scale, 50.903411865234375 * scale, 62.500030517578125 * scale, 50.903411865234375 * scale, 62.000030517578125 * scale, 55.403411865234375 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[3], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(58.000030517578125 * scale, 122.3125 * scale);
        ctx.bezierCurveTo(59.500030517578125 * scale, 97.3125 * scale, 59.500030517578125 * scale, 97.3125 * scale, 61.000030517578125 * scale, 72.3125 * scale);
        ctx.bezierCurveTo(91.00003051757812 * scale, 89.3125 * scale, 91.00003051757812 * scale, 89.3125 * scale, 121.00003051757812 * scale, 106.3125 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[1], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(310.0000305175781 * scale, 127.3125 * scale);
        ctx.bezierCurveTo(308.0000305175781 * scale, 98.3125 * scale, 308.0000305175781 * scale, 98.3125 * scale, 306.0000305175781 * scale, 69.3125 * scale);
        ctx.bezierCurveTo(274.5000305175781 * scale, 88.8125 * scale, 274.5000305175781 * scale, 88.8125 * scale, 243.00003051757812 * scale, 108.3125 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[1], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(226.00003051757812 * scale, 87.85795593261719 * scale);
        ctx.bezierCurveTo(243.50003051757812 * scale, 66.85795593261719 * scale, 243.50003051757812 * scale, 66.85795593261719 * scale, 261.0000305175781 * scale, 45.85795593261719 * scale);
        ctx.bezierCurveTo(265.0000305175781 * scale, 83.85795593261719 * scale, 265.0000305175781 * scale, 83.85795593261719 * scale, 269.0000305175781 * scale, 121.85795593261719 * scale);
        ctx.bezierCurveTo(235.00003051757812 * scale, 122.85795593261719 * scale, 233.00003051757812 * scale, 107.85795593261719 * scale, 228.00003051757812 * scale, 90.85795593261719 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[3], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(105.00003051757812 * scale, 128.8579559326172 * scale);
        ctx.bezierCurveTo(104.50003051757812 * scale, 87.85795593261719 * scale, 104.50003051757812 * scale, 87.85795593261719 * scale, 104.00003051757812 * scale, 46.85795593261719 * scale);
        ctx.bezierCurveTo(126.50003051757812 * scale, 69.35795593261719 * scale, 126.50003051757812 * scale, 69.35795593261719 * scale, 149.00003051757812 * scale, 91.85795593261719 * scale);
        ctx.bezierCurveTo(130.00003051757812 * scale, 123.85795593261719 * scale, 123.00003051757812 * scale, 132.8579559326172 * scale, 107.00003051757812 * scale, 130.8579559326172 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[1], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(59.000030517578125 * scale, 121.85795593261719 * scale);
        ctx.bezierCurveTo(59.500030517578125 * scale, 99.35795593261719 * scale, 59.500030517578125 * scale, 99.35795593261719 * scale, 60.000030517578125 * scale, 76.85795593261719 * scale);
        ctx.bezierCurveTo(84.00003051757812 * scale, 92.35795593261719 * scale, 84.00003051757812 * scale, 92.35795593261719 * scale, 108.00003051757812 * scale, 107.85795593261719 * scale);
        ctx.bezierCurveTo(106.00003051757812 * scale, 148.8579559326172 * scale, 86.00003051757812 * scale, 148.8579559326172 * scale, 62.000030517578125 * scale, 123.85795593261719 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[3], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(105.00003051757812 * scale, 132.8579559326172 * scale);
        ctx.bezierCurveTo(104.50003051757812 * scale, 93.35795593261719 * scale, 104.50003051757812 * scale, 93.35795593261719 * scale, 104.00003051757812 * scale, 53.85795593261719 * scale);
        ctx.bezierCurveTo(126.50003051757812 * scale, 75.85795593261719 * scale, 126.50003051757812 * scale, 75.85795593261719 * scale, 149.00003051757812 * scale, 97.85795593261719 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[3], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(311.0000305175781 * scale, 126.85795593261719 * scale);
        ctx.bezierCurveTo(309.0000305175781 * scale, 101.35795593261719 * scale, 309.0000305175781 * scale, 101.35795593261719 * scale, 307.0000305175781 * scale, 75.85795593261719 * scale);
        ctx.bezierCurveTo(271.0000305175781 * scale, 96.85795593261719 * scale, 271.0000305175781 * scale, 96.85795593261719 * scale, 235.00003051757812 * scale, 117.85795593261719 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[3], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(228.00003051757812 * scale, 96.85795593261719 * scale);
        ctx.bezierCurveTo(244.50003051757812 * scale, 74.85795593261719 * scale, 244.50003051757812 * scale, 74.85795593261719 * scale, 261.0000305175781 * scale, 52.85795593261719 * scale);
        ctx.bezierCurveTo(265.5000305175781 * scale, 89.85795593261719 * scale, 265.5000305175781 * scale, 89.85795593261719 * scale, 270.0000305175781 * scale, 126.85795593261719 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[3], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(12.000030517578125 * scale, 86.13069152832031 * scale);
        ctx.bezierCurveTo(36.000030517578125 * scale, 113.13069152832031 * scale, 84.00003051757812 * scale, 111.13069152832031 * scale, 116.00003051757812 * scale, 113.13069152832031 * scale);
        ctx.bezierCurveTo(164.00003051757812 * scale, 23.130691528320312 * scale, 172.00003051757812 * scale, 18.130691528320312 * scale, 181.00003051757812 * scale, 9.130691528320312 * scale);
        ctx.bezierCurveTo(199.00003051757812 * scale, 29.130691528320312 * scale, 221.00003051757812 * scale, 78.13069152832031 * scale, 247.00003051757812 * scale, 112.13069152832031 * scale);
        ctx.bezierCurveTo(301.0000305175781 * scale, 122.13069152832031 * scale, 338.0000305175781 * scale, 111.13069152832031 * scale, 359.0000305175781 * scale, 94.13069152832031 * scale);
        ctx.bezierCurveTo(359.0000305175781 * scale, 113.13069152832031 * scale, 358.5000305175781 * scale, 105.13069152832031 * scale, 358.0000305175781 * scale, 116.13069152832031 * scale);
        ctx.bezierCurveTo(270.5000305175781 * scale, 130.1306915283203 * scale, 270.5000305175781 * scale, 130.1306915283203 * scale, 183.00003051757812 * scale, 144.1306915283203 * scale);
        ctx.bezierCurveTo(98.00003051757812 * scale, 128.6306915283203 * scale, 98.00003051757812 * scale, 128.6306915283203 * scale, 13.000030517578125 * scale, 113.13069152832031 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[1], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(247.00003051757812 * scale, 115.76704406738281 * scale);
        ctx.bezierCurveTo(305.0000305175781 * scale, 124.76704406738281 * scale, 335.0000305175781 * scale, 112.76704406738281 * scale, 359.0000305175781 * scale, 93.76704406738281 * scale);
        ctx.bezierCurveTo(359.5000305175781 * scale, 113.26704406738281 * scale, 359.5000305175781 * scale, 113.26704406738281 * scale, 360.0000305175781 * scale, 132.7670440673828 * scale);
        ctx.bezierCurveTo(339.0000305175781 * scale, 177.7670440673828 * scale, 281.0000305175781 * scale, 178.7670440673828 * scale, 243.00003051757812 * scale, 183.7670440673828 * scale);
        ctx.bezierCurveTo(214.50003051757812 * scale, 214.2670440673828 * scale, 214.50003051757812 * scale, 214.2670440673828 * scale, 186.00003051757812 * scale, 244.7670440673828 * scale);
        ctx.bezierCurveTo(155.00003051757812 * scale, 214.2670440673828 * scale, 155.00003051757812 * scale, 214.2670440673828 * scale, 124.00003051757812 * scale, 183.7670440673828 * scale);
        ctx.bezierCurveTo(51.000030517578125 * scale, 180.7670440673828 * scale, 21.000030517578125 * scale, 161.7670440673828 * scale, 9.000030517578125 * scale, 129.7670440673828 * scale);
        ctx.bezierCurveTo(8.500030517578125 * scale, 110.76704406738281 * scale, 8.500030517578125 * scale, 110.76704406738281 * scale, 8.000030517578125 * scale, 91.76704406738281 * scale);
        ctx.bezierCurveTo(31.000030517578125 * scale, 112.76704406738281 * scale, 87.00003051757812 * scale, 119.76704406738281 * scale, 116.00003051757812 * scale, 117.76704406738281 * scale);
        ctx.bezierCurveTo(175.00003051757812 * scale, 18.767044067382812 * scale, 170.00003051757812 * scale, 23.767044067382812 * scale, 181.00003051757812 * scale, 14.767044067382812 * scale);
        ctx.bezierCurveTo(199.00003051757812 * scale, 34.76704406738281 * scale, 203.00003051757812 * scale, 54.76704406738281 * scale, 247.00003051757812 * scale, 115.76704406738281 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[3], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(27.000030517578125 * scale, 94.76704406738281 * scale);
        ctx.bezierCurveTo(11.000030517578125 * scale, 81.76704406738281 * scale, 31.000030517578125 * scale, 72.76704406738281 * scale, 44.000030517578125 * scale, 59.76704406738281 * scale);
        ctx.bezierCurveTo(9.000030517578125 * scale, 65.76704406738281 * scale, 4.000030517578125 * scale, 78.76704406738281 * scale, 9.000030517578125 * scale, 89.76704406738281 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[3], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(352.0000305175781 * scale, 100.76705932617188 * scale);
        ctx.bezierCurveTo(362.0000305175781 * scale, 92.76705932617188 * scale, 352.0000305175781 * scale, 84.76705932617188 * scale, 340.0000305175781 * scale, 68.76705932617188 * scale);
        ctx.bezierCurveTo(360.0000305175781 * scale, 69.76705932617188 * scale, 364.0000305175781 * scale, 79.76705932617188 * scale, 364.0000305175781 * scale, 94.76705932617188 * scale);
        ctx.closePath();
        fill_path(ctx, color[1], color[1], 1 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(25.000030517578125 * scale, 97.94886779785156 * scale);
        ctx.bezierCurveTo(2.000030517578125 * scale, 76.94886779785156 * scale, 29.000030517578125 * scale, 62.94886779785156 * scale, 44.000030517578125 * scale, 59.94886779785156 * scale);
        ctx.bezierCurveTo(8.000030517578125 * scale, 59.94886779785156 * scale, -0.999969482421875 * scale, 81.94886779785156 * scale, 4.000030517578125 * scale, 92.94886779785156 * scale);
        ctx.closePath();
        fill_path(ctx, color[3]);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(349.0000305175781 * scale, 100.94886779785156 * scale);
        ctx.bezierCurveTo(366.0000305175781 * scale, 82.94886779785156 * scale, 353.0000305175781 * scale, 76.94886779785156 * scale, 337.0000305175781 * scale, 67.94886779785156 * scale);
        ctx.bezierCurveTo(366.0000305175781 * scale, 69.94886779785156 * scale, 366.0000305175781 * scale, 83.94886779785156 * scale, 363.0000305175781 * scale, 101.94886779785156 * scale);
        ctx.closePath();
        fill_path(ctx, color[2], color[3], 10 * scale);
        circle(ctx, 46.000030517578125 * scale, 137.5852279663086 * scale, 9.219544457292887 * scale);
        fill_path(ctx, color[4], color[5], 1 * scale);
        circle(ctx, 308.0000305175781 * scale, 141.5852279663086 * scale, 8.54400374531753 * scale);
        fill_path(ctx, color[4], color[5], 1 * scale);
        circle(ctx, 92.00003051757812 * scale, 149.58523559570312 * scale, 14.866068747318506 * scale);
        fill_path(ctx, color[4], color[5], 1 * scale);
        circle(ctx, 262.0000305175781 * scale, 148.8579559326172 * scale, 15.620499351813308 * scale);
        fill_path(ctx, color[4], color[5], 1 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(184.00003051757812 * scale, 68.85795593261719 * scale);
        ctx.bezierCurveTo(203.00003051757812 * scale, 108.85795593261719 * scale, 203.00003051757812 * scale, 108.85795593261719 * scale, 222.00003051757812 * scale, 148.8579559326172 * scale);
        ctx.bezierCurveTo(202.50003051757812 * scale, 177.8579559326172 * scale, 202.50003051757812 * scale, 177.8579559326172 * scale, 183.00003051757812 * scale, 206.8579559326172 * scale);
        ctx.bezierCurveTo(162.00003051757812 * scale, 178.8579559326172 * scale, 162.00003051757812 * scale, 178.8579559326172 * scale, 141.00003051757812 * scale, 150.8579559326172 * scale);
        ctx.closePath();
        fill_path(ctx, color[4], color[5], 10 * scale);
        ctx.beginPath();
        ctx.lineCap = "round";
        ctx.lineJoin = "round";
        ctx.moveTo(183.00003051757812 * scale, 104.94886779785156 * scale);
        ctx.bezierCurveTo(192.50003051757812 * scale, 125.44886779785156 * scale, 192.50003051757812 * scale, 125.44886779785156 * scale, 202.00003051757812 * scale, 145.94886779785156 * scale);
        ctx.bezierCurveTo(192.00003051757812 * scale, 163.94886779785156 * scale, 192.00003051757812 * scale, 163.94886779785156 * scale, 182.00003051757812 * scale, 181.94886779785156 * scale);
        ctx.bezierCurveTo(172.50003051757812 * scale, 164.44886779785156 * scale, 172.50003051757812 * scale, 164.44886779785156 * scale, 163.00003051757812 * scale, 146.94886779785156 * scale);
        ctx.closePath();
        fill_path(ctx, color[6]);
        return can;
    };

    function create_background_market() {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        can.width = 460;
        can.height = 220;
        ctx.fillStyle = "#3a2a0d";
        ctx.fillRect(0, 0, can.width, can.height);
        ctx.lineWidth = 4;
        ctx.beginPath();
        ctx.strokeStyle = "#513810";
        for (var y = 20; y < 220; y += 20) {
            ctx.moveTo(0, y);
            ctx.lineTo(460, y);
            ctx.closePath();
            ctx.stroke();
        }
        return can;
    };

    function create_gauges(scale) {
        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        var w = 950 * scale;
        var gw = 180 * scale;
        var h = 50 * scale;
        var hg = 20 * scale;
        var gh = 240 * scale;
        var xw = 35 * scale;
        var yh = 1 * scale;
        var r = 4 * scale;
        var lw = 4 * scale;
        can.width = w;
        can.height = h;
        ctx.translate(0, 15 * scale);
        round_rect(ctx, xw, yh, gw, hg, r);
        fill_path(ctx, null, "#69A148", lw);
        var img = sprite[SPRITE.HEART_SYMBOL_HUD];
        ctx.drawImage(img, 17, -8);
        ctx.translate(gh, 0);
        round_rect(ctx, xw, yh, gw, hg, r);
        fill_path(ctx, null, "#AF352A", lw);
        var img = sprite[SPRITE.FOOD_SYMBOL_HUD];
        ctx.drawImage(img, 17, -9);
        ctx.translate(gh, 0);
        round_rect(ctx, xw, yh, gw, hg, r);
        fill_path(ctx, null, "#669BB1", lw);
        var img = sprite[SPRITE.COLD_SYMBOL_HUD];
        ctx.drawImage(img, 17, -8);
        ctx.translate(gh, 0);
        round_rect(ctx, xw, yh, gw, hg, r);
        fill_path(ctx, null, "#074A87", lw);
        var img = sprite[SPRITE.WATER_SYMBOL_HUD];
        ctx.drawImage(img, 17, -8);
        return can;
    };

    function _load_images() {
        var TIMEDEBUG = (new Date).getTime();
        render_cosmetics();

        function codeToTile(code) {
            var tile = 0;
            for (var i = 0, j = 0; i < code.length; i++) {
                var c = code.charAt(i);
                if ((c === "_") || (i === 5))
                    continue;

                if (c === "1")
                    tile += Math.pow(2, j);

                j++;
            }
            return tile;
        };
        sprite[SPRITE.RIVER_WAVE] = [IMAGES.RIVER_WAVED, IMAGES.RIVER_WAVEN];
        sprite[SPRITE.RIVER_DECO] = [];
        sprite[SPRITE.RIVER_DECO][SPRITE.DAY] = [];
        sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("000_010_000")] = [IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO20];
        sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("000_010_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("000_010_000")];
        sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("000_011_000")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("000_010_000")];
        sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("000_011_010")] = [IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24];
        sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("000_011_011")] = [IMAGES.DAY_RIVER_COMPO4, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25];
        sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("000_110_000")] = [IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO20];
        sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("000_110_010")] = [IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO27];
        sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("000_110_110")] = [IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO8, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO27];
        sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("000_111_000")] = [IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19];
        sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("000_111_111")] = [IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO4, IMAGES.DAY_RIVER_COMPO13];
        sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("010_010_000")] = [IMAGES.DAY_RIVER_COMPO20];
        sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("010_010_010")] = [IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21];
        sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("010_011_000")] = [IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO26];
        sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("010_110_000")] = [IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28];
        sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("010_110_110")] = [IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28];
        sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("010_011_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("010_110_110")];
        sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("010_011_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("010_110_110")];
        sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("000_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("010_110_110")];
        sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("010_110_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("010_110_110")];
        sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("010_111_000")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("010_110_110")];
        sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("010_111_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("010_110_110")];
        sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("010_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("010_110_110")];
        sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("010_111_110")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("010_110_110")];
        sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("010_111_111")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("010_110_110")];
        sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("000_111_110")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("010_110_110")];
        sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("000_111_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("010_110_110")];
        sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("011_011_000")] = [IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO26];
        sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("011_011_010")] = [IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28];
        sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("011_011_011")] = [IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO4, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO15];
        sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("011_111_000")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("011_011_010")];
        sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("011_111_010")] = [IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28];
        sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("011_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("011_111_010")];
        sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("011_111_110")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("011_111_010")];
        sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("011_111_111")] = [IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO4, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28];
        sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("110_110_000")] = [IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO12, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO28];
        sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("110_110_010")] = [IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO28];
        sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("110_110_110")] = [IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO28];
        sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("110_111_000")] = [IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO12, IMAGES.DAY_RIVER_COMPO14, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28];
        sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("110_111_110")] = [IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO14, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28];
        sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("110_111_111")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("110_111_110")];
        sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("110_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("110_111_110")];
        sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("110_111_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("110_111_110")];
        sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("111_111_110")] = [IMAGES.DAY_RIVER_COMPO28, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO14, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO1];
        sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("111_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("111_111_110")];
        sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("111_111_000")] = [IMAGES.DAY_RIVER_COMPO12, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO14];
        sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("111_111_111")] = [IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO4, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28];
        sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("111_111_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("111_111_110")];
        sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT] = [];
        sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("000_010_000")] = [IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO20];
        sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("000_010_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("000_010_000")];
        sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("000_011_000")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("000_010_000")];
        sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("000_011_010")] = [IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24];
        sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("000_011_011")] = [IMAGES.NIGHT_RIVER_COMPO4, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25];
        sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("000_110_000")] = [IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO20];
        sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("000_110_010")] = [IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO27];
        sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("000_110_110")] = [IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO8, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO27];
        sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("000_111_000")] = [IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19];
        sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("000_111_111")] = [IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO4, IMAGES.NIGHT_RIVER_COMPO13];
        sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("010_010_000")] = [IMAGES.NIGHT_RIVER_COMPO20];
        sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("010_010_010")] = [IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21];
        sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("010_011_000")] = [IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO26];
        sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("010_110_000")] = [IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28];
        sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("010_110_110")] = [IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28];
        sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("010_011_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("010_110_110")];
        sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("010_011_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("010_110_110")];
        sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("000_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("010_110_110")];
        sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("010_110_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("010_110_110")];
        sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("010_111_000")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("010_110_110")];
        sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("010_111_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("010_110_110")];
        sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("010_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("010_110_110")];
        sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("010_111_110")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("010_110_110")];
        sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("010_111_111")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("010_110_110")];
        sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("000_111_110")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("010_110_110")];
        sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("000_111_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("010_110_110")];
        sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("011_011_000")] = [IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO26];
        sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("011_011_010")] = [IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28];
        sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("011_011_011")] = [IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO4, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO15];
        sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("011_111_000")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("011_011_010")];
        sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("011_111_010")] = [IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28];
        sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("011_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("011_111_010")];
        sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("011_111_110")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("011_111_010")];
        sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("011_111_111")] = [IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO4, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28];
        sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("110_110_000")] = [IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO12, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO28];
        sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("110_110_010")] = [IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO28];
        sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("110_110_110")] = [IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO28];
        sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("110_111_000")] = [IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO12, IMAGES.NIGHT_RIVER_COMPO14, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28];
        sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("110_111_110")] = [IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO14, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28];
        sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("110_111_111")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("110_111_110")];
        sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("110_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("110_111_110")];
        sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("110_111_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("110_111_110")];
        sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("111_111_110")] = [IMAGES.NIGHT_RIVER_COMPO28, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO14, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO1];
        sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("111_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("111_111_110")];
        sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("111_111_000")] = [IMAGES.NIGHT_RIVER_COMPO12, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO14];
        sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("111_111_111")] = [IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO4, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28];
        sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("111_111_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("111_111_110")];
        sprite[SPRITE.RIVER] = [];
        sprite[SPRITE.RIVER][SPRITE.DAY] = [];
        sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("000_010_000")] = IMAGES.DAY_RIVER_000_010_000;
        sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("000_010_010")] = IMAGES.DAY_RIVER_000_010_010;
        sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("000_011_000")] = IMAGES.DAY_RIVER_000_011_000;
        sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("000_011_010")] = IMAGES.DAY_RIVER_000_011_010;
        sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("000_011_011")] = IMAGES.DAY_RIVER_000_011_011;
        sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("000_110_000")] = IMAGES.DAY_RIVER_000_110_000;
        sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("000_110_010")] = IMAGES.DAY_RIVER_000_110_010;
        sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("000_110_110")] = IMAGES.DAY_RIVER_000_110_110;
        sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("000_111_000")] = IMAGES.DAY_RIVER_000_111_000;
        sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("000_111_010")] = IMAGES.DAY_RIVER_000_111_010;
        sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("000_111_011")] = IMAGES.DAY_RIVER_000_111_011;
        sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("000_111_110")] = IMAGES.DAY_RIVER_000_111_110;
        sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("000_111_111")] = IMAGES.DAY_RIVER_000_111_111;
        sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("010_010_000")] = IMAGES.DAY_RIVER_010_010_000;
        sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("010_010_010")] = IMAGES.DAY_RIVER_010_010_010;
        sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("010_011_000")] = IMAGES.DAY_RIVER_010_011_000;
        sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("010_011_010")] = IMAGES.DAY_RIVER_010_011_010;
        sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("010_011_011")] = IMAGES.DAY_RIVER_010_011_011;
        sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("010_110_000")] = IMAGES.DAY_RIVER_010_110_000;
        sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("010_110_010")] = IMAGES.DAY_RIVER_010_110_010;
        sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("010_110_110")] = IMAGES.DAY_RIVER_010_110_110;
        sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("010_111_000")] = IMAGES.DAY_RIVER_010_111_000;
        sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("010_111_010")] = IMAGES.DAY_RIVER_010_111_010;
        sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("010_111_011")] = IMAGES.DAY_RIVER_010_111_011;
        sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("010_111_110")] = IMAGES.DAY_RIVER_010_111_110;
        sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("010_111_111")] = IMAGES.DAY_RIVER_010_111_111;
        sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("011_011_000")] = IMAGES.DAY_RIVER_011_011_000;
        sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("011_011_010")] = IMAGES.DAY_RIVER_011_011_010;
        sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("011_011_011")] = IMAGES.DAY_RIVER_011_011_011;
        sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("011_111_000")] = IMAGES.DAY_RIVER_011_111_000;
        sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("011_111_010")] = IMAGES.DAY_RIVER_011_111_010;
        sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("011_111_011")] = IMAGES.DAY_RIVER_011_111_011;
        sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("011_111_110")] = IMAGES.DAY_RIVER_011_111_110;
        sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("011_111_111")] = IMAGES.DAY_RIVER_011_111_111;
        sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("110_110_000")] = IMAGES.DAY_RIVER_110_110_000;
        sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("110_110_010")] = IMAGES.DAY_RIVER_110_110_010;
        sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("110_110_110")] = IMAGES.DAY_RIVER_110_110_110;
        sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("110_111_000")] = IMAGES.DAY_RIVER_110_111_000;
        sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("110_111_010")] = IMAGES.DAY_RIVER_110_111_010;
        sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("110_111_011")] = IMAGES.DAY_RIVER_110_111_011;
        sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("110_111_110")] = IMAGES.DAY_RIVER_110_111_110;
        sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("110_111_111")] = IMAGES.DAY_RIVER_110_111_111;
        sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("111_111_011")] = IMAGES.DAY_RIVER_111_111_011;
        sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("111_111_110")] = IMAGES.DAY_RIVER_111_111_110;
        sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("111_111_011")] = IMAGES.DAY_RIVER_111_111_011;
        sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("111_111_000")] = IMAGES.DAY_RIVER_111_111_000;
        sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("111_111_111")] = IMAGES.DAY_RIVER_111_111_111;
        sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("111_111_010")] = IMAGES.DAY_RIVER_111_111_010;
        sprite[SPRITE.RIVER][SPRITE.NIGHT] = [];
        sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("000_010_000")] = IMAGES.NIGHT_RIVER_000_010_000;
        sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("000_010_010")] = IMAGES.NIGHT_RIVER_000_010_010;
        sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("000_011_000")] = IMAGES.NIGHT_RIVER_000_011_000;
        sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("000_011_010")] = IMAGES.NIGHT_RIVER_000_011_010;
        sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("000_011_011")] = IMAGES.NIGHT_RIVER_000_011_011;
        sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("000_110_000")] = IMAGES.NIGHT_RIVER_000_110_000;
        sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("000_110_010")] = IMAGES.NIGHT_RIVER_000_110_010;
        sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("000_110_110")] = IMAGES.NIGHT_RIVER_000_110_110;
        sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("000_111_000")] = IMAGES.NIGHT_RIVER_000_111_000;
        sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("000_111_010")] = IMAGES.NIGHT_RIVER_000_111_010;
        sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("000_111_011")] = IMAGES.NIGHT_RIVER_000_111_011;
        sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("000_111_110")] = IMAGES.NIGHT_RIVER_000_111_110;
        sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("000_111_111")] = IMAGES.NIGHT_RIVER_000_111_111;
        sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("010_010_000")] = IMAGES.NIGHT_RIVER_010_010_000;
        sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("010_010_010")] = IMAGES.NIGHT_RIVER_010_010_010;
        sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("010_011_000")] = IMAGES.NIGHT_RIVER_010_011_000;
        sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("010_011_010")] = IMAGES.NIGHT_RIVER_010_011_010;
        sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("010_011_011")] = IMAGES.NIGHT_RIVER_010_011_011;
        sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("010_110_000")] = IMAGES.NIGHT_RIVER_010_110_000;
        sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("010_110_010")] = IMAGES.NIGHT_RIVER_010_110_010;
        sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("010_110_110")] = IMAGES.NIGHT_RIVER_010_110_110;
        sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("010_111_000")] = IMAGES.NIGHT_RIVER_010_111_000;
        sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("010_111_010")] = IMAGES.NIGHT_RIVER_010_111_010;
        sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("010_111_011")] = IMAGES.NIGHT_RIVER_010_111_011;
        sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("010_111_110")] = IMAGES.NIGHT_RIVER_010_111_110;
        sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("010_111_111")] = IMAGES.NIGHT_RIVER_010_111_111;
        sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("011_011_000")] = IMAGES.NIGHT_RIVER_011_011_000;
        sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("011_011_010")] = IMAGES.NIGHT_RIVER_011_011_010;
        sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("011_011_011")] = IMAGES.NIGHT_RIVER_011_011_011;
        sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("011_111_000")] = IMAGES.NIGHT_RIVER_011_111_000;
        sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("011_111_010")] = IMAGES.NIGHT_RIVER_011_111_010;
        sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("011_111_011")] = IMAGES.NIGHT_RIVER_011_111_011;
        sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("011_111_110")] = IMAGES.NIGHT_RIVER_011_111_110;
        sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("011_111_111")] = IMAGES.NIGHT_RIVER_011_111_111;
        sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("110_110_000")] = IMAGES.NIGHT_RIVER_110_110_000;
        sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("110_110_010")] = IMAGES.NIGHT_RIVER_110_110_010;
        sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("110_110_110")] = IMAGES.NIGHT_RIVER_110_110_110;
        sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("110_111_000")] = IMAGES.NIGHT_RIVER_110_111_000;
        sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("110_111_010")] = IMAGES.NIGHT_RIVER_110_111_010;
        sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("110_111_011")] = IMAGES.NIGHT_RIVER_110_111_011;
        sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("110_111_110")] = IMAGES.NIGHT_RIVER_110_111_110;
        sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("110_111_111")] = IMAGES.NIGHT_RIVER_110_111_111;
        sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("111_111_011")] = IMAGES.NIGHT_RIVER_111_111_011;
        sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("111_111_110")] = IMAGES.NIGHT_RIVER_111_111_110;
        sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("111_111_011")] = IMAGES.NIGHT_RIVER_111_111_011;
        sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("111_111_000")] = IMAGES.NIGHT_RIVER_111_111_000;
        sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("111_111_111")] = IMAGES.NIGHT_RIVER_111_111_111;
        sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("111_111_010")] = IMAGES.NIGHT_RIVER_111_111_010;
        sprite[SPRITE.PICK_REIDITE] = [];
        sprite[SPRITE.PICK_REIDITE][SPRITE.DAY] = IMAGES.PICK_REIDITED;
        sprite[SPRITE.PICK_REIDITE][SPRITE.NIGHT] = IMAGES.PICK_REIDITEN;
        sprite[SPRITE.CARROT] = [];
        sprite[SPRITE.CARROT][SPRITE.DAY] = IMAGES.CARROTD;
        sprite[SPRITE.CARROT][SPRITE.NIGHT] = IMAGES.CARROTN;
        sprite[SPRITE.TOMATO_MINI] = [];
        sprite[SPRITE.TOMATO_MINI][SPRITE.DAY] = IMAGES.TOMATO_MINID;
        sprite[SPRITE.TOMATO_MINI][SPRITE.NIGHT] = IMAGES.TOMATO_MININ;
        sprite[SPRITE.TOMATO] = [];
        sprite[SPRITE.TOMATO][SPRITE.DAY] = IMAGES.TOMATOD;
        sprite[SPRITE.TOMATO][SPRITE.NIGHT] = IMAGES.TOMATON;
        sprite[SPRITE.DRIED_CARROT] = [];
        sprite[SPRITE.DRIED_CARROT][SPRITE.DAY] = IMAGES.CARROT_DRIEDD;
        sprite[SPRITE.DRIED_CARROT][SPRITE.NIGHT] = IMAGES.CARROT_DRIEDN;
        sprite[SPRITE.DRIED_TOMATO_MINI] = [];
        sprite[SPRITE.DRIED_TOMATO_MINI][SPRITE.DAY] = IMAGES.TOMATO_MINI_DRIEDD;
        sprite[SPRITE.DRIED_TOMATO_MINI][SPRITE.NIGHT] = IMAGES.TOMATO_MINI_DRIEDN;
        sprite[SPRITE.WATERMELON] = [];
        sprite[SPRITE.WATERMELON][SPRITE.DAY] = IMAGES.WATERMELOND;
        sprite[SPRITE.WATERMELON][SPRITE.NIGHT] = IMAGES.WATERMELONN;
        sprite[SPRITE.DRIED_WATERMELON] = [];
        sprite[SPRITE.DRIED_WATERMELON][SPRITE.DAY] = IMAGES.DRIED_WATERMELOND;
        sprite[SPRITE.DRIED_WATERMELON][SPRITE.NIGHT] = IMAGES.DRIED_WATERMELONN;
        sprite[SPRITE.ALOE_VERA_GROWN] = [];
        sprite[SPRITE.ALOE_VERA_GROWN][SPRITE.DAY] = IMAGES.ALOE_VERA_GROWND;
        sprite[SPRITE.ALOE_VERA_GROWN][SPRITE.NIGHT] = IMAGES.ALOE_VERA_GROWNN;
        sprite[SPRITE.DRIED_ALOE_VERA] = [];
        sprite[SPRITE.DRIED_ALOE_VERA][SPRITE.DAY] = IMAGES.ALOE_VERA_DRIEDD;
        sprite[SPRITE.DRIED_ALOE_VERA][SPRITE.NIGHT] = IMAGES.ALOE_VERAN_DRIEDN;
        sprite[SPRITE.CACTUS] = [];
        sprite[SPRITE.CACTUS][SPRITE.DAY] = [IMAGES.CACTUSD];
        sprite[SPRITE.CACTUS][SPRITE.NIGHT] = [IMAGES.CACTUSN];
        sprite[SPRITE.REIDITE_WALL] = [], sprite[SPRITE.REIDITE_WALL][SPRITE.DAY] = IMAGES.REIDITE_WALLD;
        sprite[SPRITE.REIDITE_WALL][SPRITE.NIGHT] = IMAGES.REIDITE_WALLN;
        sprite[SPRITE.REIDITE_SPIKE] = [], sprite[SPRITE.REIDITE_SPIKE][SPRITE.DAY] = IMAGES.REIDITE_SPIKED;
        sprite[SPRITE.REIDITE_SPIKE][SPRITE.NIGHT] = IMAGES.REIDITE_SPIKEN;
        sprite[SPRITE.REIDITE_DOOR] = [];
        sprite[SPRITE.REIDITE_DOOR][SPRITE.DAY] = IMAGES.REIDITE_DOORD;
        sprite[SPRITE.REIDITE_DOOR][SPRITE.NIGHT] = IMAGES.REIDITE_DOORN;
        sprite[SPRITE.WOOD_DOOR_SPIKE] = [];
        sprite[SPRITE.WOOD_DOOR_SPIKE][SPRITE.DAY] = IMAGES.WOOD_DOOR_SPIKED;
        sprite[SPRITE.WOOD_DOOR_SPIKE][SPRITE.NIGHT] = IMAGES.WOOD_DOOR_SPIKEN;
        sprite[SPRITE.STONE_DOOR_SPIKE] = [];
        sprite[SPRITE.STONE_DOOR_SPIKE][SPRITE.DAY] = IMAGES.STONE_DOOR_SPIKED;
        sprite[SPRITE.STONE_DOOR_SPIKE][SPRITE.NIGHT] = IMAGES.STONE_DOOR_SPIKEN;
        sprite[SPRITE.GOLD_DOOR_SPIKE] = [];
        sprite[SPRITE.GOLD_DOOR_SPIKE][SPRITE.DAY] = IMAGES.GOLD_DOOR_SPIKED;
        sprite[SPRITE.GOLD_DOOR_SPIKE][SPRITE.NIGHT] = IMAGES.GOLD_DOOR_SPIKEN;
        sprite[SPRITE.DIAMOND_DOOR_SPIKE] = [];
        sprite[SPRITE.DIAMOND_DOOR_SPIKE][SPRITE.DAY] = IMAGES.DIAMOND_DOOR_SPIKED;
        sprite[SPRITE.DIAMOND_DOOR_SPIKE][SPRITE.NIGHT] = IMAGES.DIAMOND_DOOR_SPIKEN;
        sprite[SPRITE.AMETHYST_DOOR_SPIKE] = [];
        sprite[SPRITE.AMETHYST_DOOR_SPIKE][SPRITE.DAY] = IMAGES.AMETHYST_DOOR_SPIKED;
        sprite[SPRITE.AMETHYST_DOOR_SPIKE][SPRITE.NIGHT] = IMAGES.AMETHYST_DOOR_SPIKEN;
        sprite[SPRITE.REIDITE_DOOR_SPIKE] = [];
        sprite[SPRITE.REIDITE_DOOR_SPIKE][SPRITE.DAY] = IMAGES.REIDITE_DOOR_SPIKED;
        sprite[SPRITE.REIDITE_DOOR_SPIKE][SPRITE.NIGHT] = IMAGES.REIDITE_DOOR_SPIKEN;
        sprite[SPRITE.GOLDEN_HEN] = [];
        sprite[SPRITE.GOLDEN_HEN][SPRITE.DAY] = IMAGES.HEND;
        sprite[SPRITE.GOLDEN_HEN][SPRITE.NIGHT] = IMAGES.HENN;
        sprite[SPRITE.GOLDEN_CHICKEN] = [];
        sprite[SPRITE.GOLDEN_CHICKEN][SPRITE.DAY] = IMAGES.CHICKEND;
        sprite[SPRITE.GOLDEN_CHICKEN][SPRITE.NIGHT] = IMAGES.CHICKENN;
        sprite[SPRITE.HAMMER_REIDITE] = [];
        sprite[SPRITE.HAMMER_REIDITE][SPRITE.DAY] = IMAGES.HAMMER_REIDITED;
        sprite[SPRITE.HAMMER_REIDITE][SPRITE.NIGHT] = IMAGES.HAMMER_REIDITEN;
        sprite[SPRITE.HURT_GOLDEN_HEN] = IMAGES.HURT_GOLDEN_HEN;
        sprite[SPRITE.HURT_GOLDEN_CHICKEN] = IMAGES.HURT_GOLDEN_CHICKEN;
        sprite[SPRITE.FOG] = [];
        sprite[SPRITE.FOG][SPRITE.DAY] = [];
        sprite[SPRITE.FOG][SPRITE.NIGHT] = [];
        sprite[SPRITE.FOG][SPRITE.DAY].push(IMAGES.FOG0D);
        sprite[SPRITE.FOG][SPRITE.DAY].push(IMAGES.FOG1D);
        sprite[SPRITE.FOG][SPRITE.DAY].push(IMAGES.FOG2D);
        sprite[SPRITE.FOG][SPRITE.NIGHT].push(IMAGES.FOG0N);
        sprite[SPRITE.FOG][SPRITE.NIGHT].push(IMAGES.FOG1N);
        sprite[SPRITE.FOG][SPRITE.NIGHT].push(IMAGES.FOG2N);
        sprite[SPRITE.FOD] = [];
        sprite[SPRITE.FOD][SPRITE.DAY] = [];
        sprite[SPRITE.FOD][SPRITE.NIGHT] = [];
        sprite[SPRITE.FOD][SPRITE.DAY].push(IMAGES.FOD0D);
        sprite[SPRITE.FOD][SPRITE.DAY].push(IMAGES.FOD1D);
        sprite[SPRITE.FOD][SPRITE.DAY].push(IMAGES.FOD2D);
        sprite[SPRITE.FOD][SPRITE.NIGHT].push(IMAGES.FOD0N);
        sprite[SPRITE.FOD][SPRITE.NIGHT].push(IMAGES.FOD1N);
        sprite[SPRITE.FOD][SPRITE.NIGHT].push(IMAGES.FOD2N);
        sprite[SPRITE.MARKER] = [];
        sprite[SPRITE.MARKER][SPRITE.DAY] = [];
        sprite[SPRITE.MARKER][SPRITE.NIGHT] = [];
        sprite[SPRITE.MARKER][SPRITE.DAY].push(IMAGES.MARKER0D);
        sprite[SPRITE.MARKER][SPRITE.DAY].push(IMAGES.MARKER1D);
        sprite[SPRITE.MARKER][SPRITE.DAY].push(IMAGES.MARKER2D);
        sprite[SPRITE.MARKER][SPRITE.DAY].push(IMAGES.MARKER3D);
        sprite[SPRITE.MARKER][SPRITE.NIGHT].push(IMAGES.MARKER0N);
        sprite[SPRITE.MARKER][SPRITE.NIGHT].push(IMAGES.MARKER1N);
        sprite[SPRITE.MARKER][SPRITE.NIGHT].push(IMAGES.MARKER2N);
        sprite[SPRITE.MARKER][SPRITE.NIGHT].push(IMAGES.MARKER3N);
        sprite[SPRITE.LAVA_DRAGON] = [];
        sprite[SPRITE.LAVA_DRAGON][SPRITE.DAY] = IMAGES.LAVA_DRAGOND;
        sprite[SPRITE.LAVA_DRAGON][SPRITE.NIGHT] = IMAGES.LAVA_DRAGONN;
        sprite[SPRITE.LAVA_WING_LEFT] = [];
        sprite[SPRITE.LAVA_WING_LEFT][SPRITE.DAY] = IMAGES.LAVA_WING_LEFTD;
        sprite[SPRITE.LAVA_WING_LEFT][SPRITE.NIGHT] = IMAGES.LAVA_WING_LEFTN;
        sprite[SPRITE.LAVA_WING_RIGHT] = [];
        sprite[SPRITE.LAVA_WING_RIGHT][SPRITE.DAY] = IMAGES.LAVA_WING_RIGHTD;
        sprite[SPRITE.LAVA_WING_RIGHT][SPRITE.NIGHT] = IMAGES.LAVA_WING_RIGHTN;
        sprite[SPRITE.HURT_LAVA_DRAGON] = IMAGES.HURT_LAVA_DRAGON;
        sprite[SPRITE.HURT_LAVA_WING_LEFT] = IMAGES.HURT_LAVA_WING_LEFT;
        sprite[SPRITE.HURT_LAVA_WING_RIGHT] = IMAGES.HURT_LAVA_WING_RIGHT;
        sprite[SPRITE.DIAMOND_PROTECTION] = [];
        sprite[SPRITE.DIAMOND_PROTECTION][SPRITE.DAY] = IMAGES.DIAMOND_PROTECTIOND;
        sprite[SPRITE.DIAMOND_PROTECTION][SPRITE.NIGHT] = IMAGES.DIAMOND_PROTECTIONN;
        sprite[SPRITE.GLOVES_DIAMOND_PROTECTION] = [];
        sprite[SPRITE.GLOVES_DIAMOND_PROTECTION][SPRITE.DAY] = IMAGES.HAND_DIAMOND_PROTECTIOND;
        sprite[SPRITE.GLOVES_DIAMOND_PROTECTION][SPRITE.NIGHT] = IMAGES.HAND_DIAMOND_PROTECTIONN;
        sprite[SPRITE.AMETHYST_PROTECTION] = [];
        sprite[SPRITE.AMETHYST_PROTECTION][SPRITE.DAY] = IMAGES.AMETHYST_PROTECTIOND;
        sprite[SPRITE.AMETHYST_PROTECTION][SPRITE.NIGHT] = IMAGES.AMETHYST_PROTECTIONN;
        sprite[SPRITE.GLOVES_AMETHYST_PROTECTION] = [];
        sprite[SPRITE.GLOVES_AMETHYST_PROTECTION][SPRITE.DAY] = IMAGES.HAND_DIAMOND_PROTECTIOND;
        sprite[SPRITE.GLOVES_AMETHYST_PROTECTION][SPRITE.NIGHT] = IMAGES.HAND_DIAMOND_PROTECTIONN;
        sprite[SPRITE.REIDITE_HELMET] = [];
        sprite[SPRITE.REIDITE_HELMET][SPRITE.DAY] = IMAGES.REIDITE_HELMETD;
        sprite[SPRITE.REIDITE_HELMET][SPRITE.NIGHT] = IMAGES.REIDITE_HELMETN;
        sprite[SPRITE.REIDITE_SWORD] = [];
        sprite[SPRITE.REIDITE_SWORD][SPRITE.DAY] = IMAGES.REIDITE_SWORDD;
        sprite[SPRITE.REIDITE_SWORD][SPRITE.NIGHT] = IMAGES.REIDITE_SWORDN;
        sprite[SPRITE.REIDITE_SPEAR] = [];
        sprite[SPRITE.REIDITE_SPEAR][SPRITE.DAY] = IMAGES.REIDITE_SPEARD;
        sprite[SPRITE.REIDITE_SPEAR][SPRITE.NIGHT] = IMAGES.REIDITE_SPEARN;
        sprite[SPRITE.LAVA_SPEAR] = [];
        sprite[SPRITE.LAVA_SPEAR][SPRITE.DAY] = IMAGES.LAVA_SPEARD;
        sprite[SPRITE.LAVA_SPEAR][SPRITE.NIGHT] = IMAGES.LAVA_SPEARN;
        sprite[SPRITE.LAVA_SWORD] = [];
        sprite[SPRITE.LAVA_SWORD][SPRITE.DAY] = IMAGES.LAVA_SWORDD;
        sprite[SPRITE.LAVA_SWORD][SPRITE.NIGHT] = IMAGES.LAVA_SWORDN;
        sprite[SPRITE.LAVA_HELMET] = [];
        sprite[SPRITE.LAVA_HELMET][SPRITE.DAY] = IMAGES.LAVA_HELMETD;
        sprite[SPRITE.LAVA_HELMET][SPRITE.NIGHT] = IMAGES.LAVA_HELMETN;
        sprite[SPRITE.WITCH] = [];
        sprite[SPRITE.WITCH][SPRITE.DAY] = IMAGES.WITCHD;
        sprite[SPRITE.WITCH][SPRITE.NIGHT] = IMAGES.WITCHN;
        sprite[SPRITE.NIMBUS] = [];
        sprite[SPRITE.NIMBUS][SPRITE.DAY] = IMAGES.NIMBUSD;
        sprite[SPRITE.NIMBUS][SPRITE.NIGHT] = IMAGES.NIMBUSN;
        sprite[SPRITE.WOOD_SHIELD] = [];
        sprite[SPRITE.WOOD_SHIELD][SPRITE.DAY] = IMAGES.WOOD_SHIELDD;
        sprite[SPRITE.WOOD_SHIELD][SPRITE.NIGHT] = IMAGES.WOOD_SHIELDN;
        sprite[SPRITE.STONE_SHIELD] = [];
        sprite[SPRITE.STONE_SHIELD][SPRITE.DAY] = IMAGES.STONE_SHIELDD;
        sprite[SPRITE.STONE_SHIELD][SPRITE.NIGHT] = IMAGES.STONE_SHIELDN;
        sprite[SPRITE.GOLD_SHIELD] = [];
        sprite[SPRITE.GOLD_SHIELD][SPRITE.DAY] = IMAGES.GOLD_SHIELDD;
        sprite[SPRITE.GOLD_SHIELD][SPRITE.NIGHT] = IMAGES.GOLD_SHIELDN;
        sprite[SPRITE.DIAMOND_SHIELD] = [];
        sprite[SPRITE.DIAMOND_SHIELD][SPRITE.DAY] = IMAGES.DIAMOND_SHIELDD;
        sprite[SPRITE.DIAMOND_SHIELD][SPRITE.NIGHT] = IMAGES.DIAMOND_SHIELDN;
        sprite[SPRITE.AMETHYST_SHIELD] = [];
        sprite[SPRITE.AMETHYST_SHIELD][SPRITE.DAY] = IMAGES.AMETHYST_SHIELDD;
        sprite[SPRITE.AMETHYST_SHIELD][SPRITE.NIGHT] = IMAGES.AMETHYST_SHIELDN;
        sprite[SPRITE.REIDITE_SHIELD] = [];
        sprite[SPRITE.REIDITE_SHIELD][SPRITE.DAY] = IMAGES.REIDITE_SHIELDD;
        sprite[SPRITE.REIDITE_SHIELD][SPRITE.NIGHT] = IMAGES.REIDITE_SHIELDN;
        sprite[SPRITE.WOOD_ARROW] = [];
        sprite[SPRITE.WOOD_ARROW][SPRITE.DAY] = IMAGES.WOOD_ARROWD;
        sprite[SPRITE.WOOD_ARROW][SPRITE.NIGHT] = IMAGES.WOOD_ARROWN;
        sprite[SPRITE.WOOD_BOW] = [];
        sprite[SPRITE.WOOD_BOW][SPRITE.DAY] = IMAGES.WOOD_BOWD;
        sprite[SPRITE.WOOD_BOW][SPRITE.NIGHT] = IMAGES.WOOD_BOWN;
        sprite[SPRITE.STONE_ARROW] = [];
        sprite[SPRITE.STONE_ARROW][SPRITE.DAY] = IMAGES.STONE_ARROWD;
        sprite[SPRITE.STONE_ARROW][SPRITE.NIGHT] = IMAGES.STONE_ARROWN;
        sprite[SPRITE.STONE_BOW] = [];
        sprite[SPRITE.STONE_BOW][SPRITE.DAY] = IMAGES.STONE_BOWD;
        sprite[SPRITE.STONE_BOW][SPRITE.NIGHT] = IMAGES.STONE_BOWN;
        sprite[SPRITE.GOLD_ARROW] = [];
        sprite[SPRITE.GOLD_ARROW][SPRITE.DAY] = IMAGES.GOLD_ARROWD;
        sprite[SPRITE.GOLD_ARROW][SPRITE.NIGHT] = IMAGES.GOLD_ARROWN;
        sprite[SPRITE.GOLD_BOW] = [];
        sprite[SPRITE.GOLD_BOW][SPRITE.DAY] = IMAGES.GOLD_BOWD;
        sprite[SPRITE.GOLD_BOW][SPRITE.NIGHT] = IMAGES.GOLD_BOWN;
        sprite[SPRITE.DIAMOND_ARROW] = [];
        sprite[SPRITE.DIAMOND_ARROW][SPRITE.DAY] = IMAGES.DIAMOND_ARROWD;
        sprite[SPRITE.DIAMOND_ARROW][SPRITE.NIGHT] = IMAGES.DIAMOND_ARROWN;
        sprite[SPRITE.DIAMOND_BOW] = [];
        sprite[SPRITE.DIAMOND_BOW][SPRITE.DAY] = IMAGES.DIAMOND_BOWD;
        sprite[SPRITE.DIAMOND_BOW][SPRITE.NIGHT] = IMAGES.DIAMOND_BOWN;
        sprite[SPRITE.AMETHYST_ARROW] = [];
        sprite[SPRITE.AMETHYST_ARROW][SPRITE.DAY] = IMAGES.AMETHYST_ARROWD;
        sprite[SPRITE.AMETHYST_ARROW][SPRITE.NIGHT] = IMAGES.AMETHYST_ARROWN;
        sprite[SPRITE.AMETHYST_BOW] = [];
        sprite[SPRITE.AMETHYST_BOW][SPRITE.DAY] = IMAGES.AMETHYST_BOWD;
        sprite[SPRITE.AMETHYST_BOW][SPRITE.NIGHT] = IMAGES.AMETHYST_BOWN;
        sprite[SPRITE.REIDITE_ARROW] = [];
        sprite[SPRITE.REIDITE_ARROW][SPRITE.DAY] = IMAGES.REIDITE_ARROWD;
        sprite[SPRITE.REIDITE_ARROW][SPRITE.NIGHT] = IMAGES.REIDITE_ARROWN;
        sprite[SPRITE.REIDITE_BOW] = [];
        sprite[SPRITE.REIDITE_BOW][SPRITE.DAY] = IMAGES.REIDITE_BOWD;
        sprite[SPRITE.REIDITE_BOW][SPRITE.NIGHT] = IMAGES.REIDITE_BOWN;
        sprite[SPRITE.DRAGON_ARROW] = [];
        sprite[SPRITE.DRAGON_ARROW][SPRITE.DAY] = IMAGES.DRAGON_ARROWD;
        sprite[SPRITE.DRAGON_ARROW][SPRITE.NIGHT] = IMAGES.DRAGON_ARROWN;
        sprite[SPRITE.DRAGON_BOW] = [];
        sprite[SPRITE.DRAGON_BOW][SPRITE.DAY] = IMAGES.DRAGON_BOWD;
        sprite[SPRITE.DRAGON_BOW][SPRITE.NIGHT] = IMAGES.DRAGON_BOWN;
        sprite[SPRITE.TURBAN1] = [];
        sprite[SPRITE.TURBAN1][SPRITE.DAY] = IMAGES.TURBAN1D;
        sprite[SPRITE.TURBAN1][SPRITE.NIGHT] = IMAGES.TURBAN1N;
        sprite[SPRITE.TURBAN2] = [];
        sprite[SPRITE.TURBAN2][SPRITE.DAY] = IMAGES.TURBAN2D;
        sprite[SPRITE.TURBAN2][SPRITE.NIGHT] = IMAGES.TURBAN2N;
        sprite[SPRITE.REIDITE_PROTECTION] = [];
        sprite[SPRITE.REIDITE_PROTECTION][SPRITE.DAY] = IMAGES.REIDITE_PROTECTIOND;
        sprite[SPRITE.REIDITE_PROTECTION][SPRITE.NIGHT] = IMAGES.REIDITE_PROTECTIONN;
        sprite[SPRITE.GLOVES_REIDITE_PROTECTION] = [];
        sprite[SPRITE.GLOVES_REIDITE_PROTECTION][SPRITE.DAY] = IMAGES.HAND_REIDITE_PROTECTIOND;
        sprite[SPRITE.GLOVES_REIDITE_PROTECTION][SPRITE.NIGHT] = IMAGES.HAND_REIDITE_PROTECTIONN;
        sprite[SPRITE.LAVA_SHINGLE] = [];
        sprite[SPRITE.LAVA_SHINGLE][SPRITE.DAY] = [];
        sprite[SPRITE.LAVA_SHINGLE][SPRITE.NIGHT] = [];
        sprite[SPRITE.LAVA_SHINGLE][SPRITE.DAY].push(IMAGES.LAVA_SHINGLES0D);
        sprite[SPRITE.LAVA_SHINGLE][SPRITE.DAY].push(IMAGES.LAVA_SHINGLES1D);
        sprite[SPRITE.LAVA_SHINGLE][SPRITE.NIGHT].push(IMAGES.LAVA_SHINGLES1D);
        sprite[SPRITE.LAVA_SHINGLE][SPRITE.NIGHT].push(IMAGES.LAVA_SHINGLES1N);
        sprite[SPRITE.LAVA_BUBBLE] = [];
        sprite[SPRITE.LAVA_BUBBLE][SPRITE.DAY] = [];
        sprite[SPRITE.LAVA_BUBBLE][SPRITE.NIGHT] = [];
        sprite[SPRITE.LAVA_BUBBLE][SPRITE.DAY].push(IMAGES.LAVA_BUBLE0D);
        sprite[SPRITE.LAVA_BUBBLE][SPRITE.DAY].push(IMAGES.LAVA_BUBLE1D);
        sprite[SPRITE.LAVA_BUBBLE][SPRITE.DAY].push(IMAGES.LAVA_BUBLE2D);
        sprite[SPRITE.LAVA_BUBBLE][SPRITE.NIGHT].push(IMAGES.LAVA_BUBLE0N);
        sprite[SPRITE.LAVA_BUBBLE][SPRITE.NIGHT].push(IMAGES.LAVA_BUBLE1N);
        sprite[SPRITE.LAVA_BUBBLE][SPRITE.NIGHT].push(IMAGES.LAVA_BUBLE2N);
        sprite[SPRITE.PITCHFORK] = [];
        sprite[SPRITE.PITCHFORK][SPRITE.DAY] = IMAGES.PITCHFORKD;
        sprite[SPRITE.PITCHFORK][SPRITE.NIGHT] = IMAGES.PITCHFORKN;
        sprite[SPRITE.PITCHFORK2] = [];
        sprite[SPRITE.PITCHFORK2][SPRITE.DAY] = IMAGES.PITCHFORK2D;
        sprite[SPRITE.PITCHFORK2][SPRITE.NIGHT] = IMAGES.PITCHFORK2N;
        sprite[SPRITE.EMERALD] = [];
        sprite[SPRITE.EMERALD][SPRITE.DAY] = [];
        sprite[SPRITE.EMERALD][SPRITE.NIGHT] = [];
        sprite[SPRITE.EMERALD][SPRITE.DAY].push(IMAGES.EMERALD0D);
        sprite[SPRITE.EMERALD][SPRITE.DAY].push(IMAGES.EMERALD1D);
        sprite[SPRITE.EMERALD][SPRITE.DAY].push(IMAGES.EMERALD2D);
        sprite[SPRITE.EMERALD][SPRITE.NIGHT].push(IMAGES.EMERALD0N);
        sprite[SPRITE.EMERALD][SPRITE.NIGHT].push(IMAGES.EMERALD1N);
        sprite[SPRITE.EMERALD][SPRITE.NIGHT].push(IMAGES.EMERALD2N);
        sprite[SPRITE.REIDITE] = [];
        sprite[SPRITE.REIDITE][SPRITE.DAY] = [];
        sprite[SPRITE.REIDITE][SPRITE.NIGHT] = [];
        sprite[SPRITE.REIDITE][SPRITE.DAY].push(IMAGES.REIDITE0D);
        sprite[SPRITE.REIDITE][SPRITE.DAY].push(IMAGES.REIDITE1D);
        sprite[SPRITE.REIDITE][SPRITE.DAY].push(IMAGES.REIDITE2D);
        sprite[SPRITE.REIDITE][SPRITE.NIGHT].push(IMAGES.REIDITE0N);
        sprite[SPRITE.REIDITE][SPRITE.NIGHT].push(IMAGES.REIDITE1N);
        sprite[SPRITE.REIDITE][SPRITE.NIGHT].push(IMAGES.REIDITE2N);
        sprite[SPRITE.MAGMA] = [];
        sprite[SPRITE.MAGMA][SPRITE.DAY] = [];
        sprite[SPRITE.MAGMA][SPRITE.NIGHT] = [];
        sprite[SPRITE.MAGMA][SPRITE.DAY].push(IMAGES.MAGMA1D);
        sprite[SPRITE.MAGMA][SPRITE.DAY].push(IMAGES.MAGMA2D);
        sprite[SPRITE.MAGMA][SPRITE.DAY].push(IMAGES.MAGMA3D);
        sprite[SPRITE.MAGMA][SPRITE.DAY].push(IMAGES.MAGMA4D);
        sprite[SPRITE.MAGMA][SPRITE.DAY].push(IMAGES.MAGMA5D);
        sprite[SPRITE.MAGMA][SPRITE.DAY].push(IMAGES.MAGMA6D);
        sprite[SPRITE.MAGMA][SPRITE.NIGHT].push(IMAGES.MAGMA1N);
        sprite[SPRITE.MAGMA][SPRITE.NIGHT].push(IMAGES.MAGMA2N);
        sprite[SPRITE.MAGMA][SPRITE.NIGHT].push(IMAGES.MAGMA3N);
        sprite[SPRITE.MAGMA][SPRITE.NIGHT].push(IMAGES.MAGMA4N);
        sprite[SPRITE.MAGMA][SPRITE.NIGHT].push(IMAGES.MAGMA5N);
        sprite[SPRITE.MAGMA][SPRITE.NIGHT].push(IMAGES.MAGMA6N);
        sprite[SPRITE.LAVA_GROUND] = [];
        sprite[SPRITE.LAVA_GROUND][SPRITE.DAY] = [];
        sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT] = [];
        sprite[SPRITE.LAVA_GROUND][SPRITE.DAY].push(IMAGES.LAVA_GROUND1D);
        sprite[SPRITE.LAVA_GROUND][SPRITE.DAY].push(IMAGES.LAVA_GROUND2D);
        sprite[SPRITE.LAVA_GROUND][SPRITE.DAY].push(IMAGES.LAVA_GROUND3D);
        sprite[SPRITE.LAVA_GROUND][SPRITE.DAY].push(IMAGES.LAVA_GROUND4D);
        sprite[SPRITE.LAVA_GROUND][SPRITE.DAY].push(IMAGES.LAVA_GROUND5D);
        sprite[SPRITE.LAVA_GROUND][SPRITE.DAY].push(IMAGES.LAVA_GROUND6D);
        sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(IMAGES.LAVA_GROUND1N);
        sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(IMAGES.LAVA_GROUND2N);
        sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(IMAGES.LAVA_GROUND3N);
        sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(IMAGES.LAVA_GROUND4N);
        sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(IMAGES.LAVA_GROUND5N);
        sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(IMAGES.LAVA_GROUND6N);
        sprite[SPRITE.FIRE_MOB] = [];
        sprite[SPRITE.FIRE_MOB][SPRITE.DAY] = IMAGES.FIRE_MOBD;
        sprite[SPRITE.FIRE_MOB][SPRITE.NIGHT] = IMAGES.FIRE_MOBN;
        sprite[SPRITE.HURT_FIRE_MOB] = IMAGES.FIRE_MOB_HURT;
        sprite[SPRITE.MACHETE] = [];
        sprite[SPRITE.MACHETE][SPRITE.DAY] = IMAGES.MACHETED;
        sprite[SPRITE.MACHETE][SPRITE.NIGHT] = IMAGES.MACHETEN;
        sprite[SPRITE.BOAT] = [];
        sprite[SPRITE.BOAT][SPRITE.DAY] = IMAGES.BOATD;
        sprite[SPRITE.BOAT][SPRITE.NIGHT] = IMAGES.BOATN;
        sprite[SPRITE.SLED] = [];
        sprite[SPRITE.SLED][SPRITE.DAY] = IMAGES.SLEDD;
        sprite[SPRITE.SLED][SPRITE.NIGHT] = IMAGES.SLEDN;
        sprite[SPRITE.PLANE] = [];
        sprite[SPRITE.PLANE][SPRITE.DAY] = IMAGES.PLANED;
        sprite[SPRITE.PLANE][SPRITE.NIGHT] = IMAGES.PLANEN;
        sprite[SPRITE.PENGUIN] = [];
        sprite[SPRITE.PENGUIN][SPRITE.DAY] = IMAGES.PENGUIND;
        sprite[SPRITE.PENGUIN][SPRITE.NIGHT] = IMAGES.PENGUINN;
        sprite[SPRITE.HURT_PENGUIN] = IMAGES.HURT_PENGUIN;
        sprite[SPRITE.SAND_WORM1] = [];
        sprite[SPRITE.SAND_WORM1][SPRITE.DAY] = IMAGES.SAND_WORM1D;
        sprite[SPRITE.SAND_WORM1][SPRITE.NIGHT] = IMAGES.SAND_WORM1N;
        sprite[SPRITE.SAND_WORM2] = [];
        sprite[SPRITE.SAND_WORM2][SPRITE.DAY] = IMAGES.SAND_WORM2D;
        sprite[SPRITE.SAND_WORM2][SPRITE.NIGHT] = IMAGES.SAND_WORM2N;
        sprite[SPRITE.HURT_SAND_WORM0] = IMAGES.HURT_SAND_WORM0;
        sprite[SPRITE.HURT_SAND_WORM1] = IMAGES.HURT_SAND_WORM1;
        sprite[SPRITE.HURT_SAND_WORM2] = IMAGES.HURT_SAND_WORM2;
        sprite[SPRITE.SCORPION] = [];
        sprite[SPRITE.SCORPION][SPRITE.DAY] = IMAGES.SCORPIOND;
        sprite[SPRITE.SCORPION][SPRITE.NIGHT] = IMAGES.SCORPIONN;
        sprite[SPRITE.SCORPION_HAND_LEFT] = [];
        sprite[SPRITE.SCORPION_HAND_LEFT][SPRITE.DAY] = IMAGES.SCORPION_HAND_LEFTD;
        sprite[SPRITE.SCORPION_HAND_LEFT][SPRITE.NIGHT] = IMAGES.SCORPION_HAND_LEFTN;
        sprite[SPRITE.SCORPION_HAND_RIGHT] = [];
        sprite[SPRITE.SCORPION_HAND_RIGHT][SPRITE.DAY] = IMAGES.SCORPION_HAND_RIGHTD;
        sprite[SPRITE.SCORPION_HAND_RIGHT][SPRITE.NIGHT] = IMAGES.SCORPION_HAND_RIGHTN;
        sprite[SPRITE.HURT_SCORPION] = IMAGES.HURT_SCORPION;
        sprite[SPRITE.HURT_SCORPION_HAND_RIGHT] = IMAGES.HURT_SCORPION_HAND_RIGHT;
        sprite[SPRITE.HURT_SCORPION_HAND_LEFT] = IMAGES.HURT_SCORPION_HAND_LEFT;
        sprite[SPRITE.CRAB_BOSS_ATTACK] = [];
        sprite[SPRITE.CRAB_BOSS_ATTACK][SPRITE.DAY] = IMAGES.CRAB_BOSS_ATTACKD;
        sprite[SPRITE.CRAB_BOSS_ATTACK][SPRITE.NIGHT] = IMAGES.CRAB_BOSS_ATTACKN;
        sprite[SPRITE.CRAB_BOSS_TAMED] = [];
        sprite[SPRITE.CRAB_BOSS_TAMED][SPRITE.DAY] = IMAGES.CRAB_BOSS_TAMEDD;
        sprite[SPRITE.CRAB_BOSS_TAMED][SPRITE.NIGHT] = IMAGES.CRAB_BOSS_TAMEDN;
        sprite[SPRITE.CRAB_BOSS] = [];
        sprite[SPRITE.CRAB_BOSS][SPRITE.DAY] = IMAGES.CRAB_BOSSD;
        sprite[SPRITE.CRAB_BOSS][SPRITE.NIGHT] = IMAGES.CRAB_BOSSN;
        sprite[SPRITE.CRAB_BOSS_CLAW_LEFT] = [];
        sprite[SPRITE.CRAB_BOSS_CLAW_LEFT][SPRITE.DAY] = IMAGES.CRAB_BOSS_CLAW_LEFTD;
        sprite[SPRITE.CRAB_BOSS_CLAW_LEFT][SPRITE.NIGHT] = IMAGES.CRAB_BOSS_CLAW_LEFTN;
        sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT] = [];
        sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT][SPRITE.DAY] = IMAGES.CRAB_BOSS_CLAW_RIGHTD;
        sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT][SPRITE.NIGHT] = IMAGES.CRAB_BOSS_CLAW_RIGHTN;
        sprite[SPRITE.CRAB_BOSS_CLAW_LEFT_ATTACK] = [];
        sprite[SPRITE.CRAB_BOSS_CLAW_LEFT_ATTACK][SPRITE.DAY] = IMAGES.CRAB_BOSS_CLAW_LEFT_ATTACKD;
        sprite[SPRITE.CRAB_BOSS_CLAW_LEFT_ATTACK][SPRITE.NIGHT] = IMAGES.CRAB_BOSS_CLAW_LEFT_ATTACKN;
        sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT_ATTACK] = [];
        sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT_ATTACK][SPRITE.DAY] = IMAGES.CRAB_BOSS_CLAW_RIGHT_ATTACKD;
        sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT_ATTACK][SPRITE.NIGHT] = IMAGES.CRAB_BOSS_CLAW_RIGHT_ATTACKN;
        sprite[SPRITE.HURT_CRAB_BOSS] = IMAGES.HURT_CRAB_BOSS;
        sprite[SPRITE.HURT_CRAB_BOSS_CLAW_LEFT] = IMAGES.HURT_CRAB_BOSS_CLAW_LEFT;
        sprite[SPRITE.HURT_CRAB_BOSS_CLAW_RIGHT] = IMAGES.HURT_CRAB_BOSS_CLAW_RIGHT;
        sprite[SPRITE.HEAL_CRAB_BOSS] = IMAGES.HEAL_CRAB_BOSS;
        sprite[SPRITE.HEAL_CRAB_BOSS_CLAW_LEFT] = IMAGES.HEAL_CRAB_BOSS_CLAW_LEFT;
        sprite[SPRITE.HEAL_CRAB_BOSS_CLAW_RIGHT] = IMAGES.HEAL_CRAB_BOSS_CLAW_RIGHT;
        sprite[SPRITE.BABY_MAMMOTH_ATTACK] = [];
        sprite[SPRITE.BABY_MAMMOTH_ATTACK][SPRITE.DAY] = IMAGES.BABY_MAMMOTH_ATTACKD;
        sprite[SPRITE.BABY_MAMMOTH_ATTACK][SPRITE.NIGHT] = IMAGES.BABY_MAMMOTH_ATTACKN;
        sprite[SPRITE.BABY_MAMMOTH] = [];
        sprite[SPRITE.BABY_MAMMOTH][SPRITE.DAY] = IMAGES.BABY_MAMMOTHD;
        sprite[SPRITE.BABY_MAMMOTH][SPRITE.NIGHT] = IMAGES.BABY_MAMMOTHN;
        sprite[SPRITE.MAMMOTH] = [];
        sprite[SPRITE.MAMMOTH][SPRITE.DAY] = IMAGES.MAMMOTHD;
        sprite[SPRITE.MAMMOTH][SPRITE.NIGHT] = IMAGES.MAMMOTHN;
        sprite[SPRITE.BABY_MAMMOTH_TAMED] = [];
        sprite[SPRITE.BABY_MAMMOTH_TAMED][SPRITE.DAY] = IMAGES.BABY_MAMMOTH_TAMEDD;
        sprite[SPRITE.BABY_MAMMOTH_TAMED][SPRITE.NIGHT] = IMAGES.BABY_MAMMOTH_TAMEDN;
        sprite[SPRITE.HURT_BABY_MAMMOTH] = IMAGES.HURT_BABY_MAMMOTH;
        sprite[SPRITE.HURT_MAMMOTH] = IMAGES.HURT_MAMMOTH;
        sprite[SPRITE.BABY_DRAGON_ATTACK] = [];
        sprite[SPRITE.BABY_DRAGON_ATTACK][SPRITE.DAY] = IMAGES.BABY_DRAGON_ATTACKD;
        sprite[SPRITE.BABY_DRAGON_ATTACK][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_ATTACKN;
        sprite[SPRITE.BABY_DRAGON] = [];
        sprite[SPRITE.BABY_DRAGON][SPRITE.DAY] = IMAGES.BABY_DRAGOND;
        sprite[SPRITE.BABY_DRAGON][SPRITE.NIGHT] = IMAGES.BABY_DRAGONN;
        sprite[SPRITE.BABY_DRAGON_TAMED] = [];
        sprite[SPRITE.BABY_DRAGON_TAMED][SPRITE.DAY] = IMAGES.BABY_DRAGON_TAMEDD;
        sprite[SPRITE.BABY_DRAGON_TAMED][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_TAMEDN;
        sprite[SPRITE.BABY_DRAGON_WING_LEFT] = [];
        sprite[SPRITE.BABY_DRAGON_WING_LEFT][SPRITE.DAY] = IMAGES.BABY_DRAGON_WING_LEFTD;
        sprite[SPRITE.BABY_DRAGON_WING_LEFT][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_WING_LEFTN;
        sprite[SPRITE.BABY_DRAGON_WING_RIGHT] = [];
        sprite[SPRITE.BABY_DRAGON_WING_RIGHT][SPRITE.DAY] = IMAGES.BABY_DRAGON_WING_RIGHTD;
        sprite[SPRITE.BABY_DRAGON_WING_RIGHT][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_WING_RIGHTN;
        sprite[SPRITE.BABY_DRAGON_WING_LEFT_ATTACK] = [];
        sprite[SPRITE.BABY_DRAGON_WING_LEFT_ATTACK][SPRITE.DAY] = IMAGES.BABY_DRAGON_WING_LEFT_ATTACKD;
        sprite[SPRITE.BABY_DRAGON_WING_LEFT_ATTACK][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_WING_LEFT_ATTACKN;
        sprite[SPRITE.BABY_DRAGON_WING_RIGHT_ATTACK] = [];
        sprite[SPRITE.BABY_DRAGON_WING_RIGHT_ATTACK][SPRITE.DAY] = IMAGES.BABY_DRAGON_WING_RIGHT_ATTACKD;
        sprite[SPRITE.BABY_DRAGON_WING_RIGHT_ATTACK][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_WING_RIGHT_ATTACKN;
        sprite[SPRITE.BABY_DRAGON_WING_LEFT_TAMED] = [];
        sprite[SPRITE.BABY_DRAGON_WING_LEFT_TAMED][SPRITE.DAY] = IMAGES.BABY_DRAGON_WING_LEFT_TAMEDD;
        sprite[SPRITE.BABY_DRAGON_WING_LEFT_TAMED][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_WING_LEFT_TAMEDN;
        sprite[SPRITE.BABY_DRAGON_WING_RIGHT_TAMED] = [];
        sprite[SPRITE.BABY_DRAGON_WING_RIGHT_TAMED][SPRITE.DAY] = IMAGES.BABY_DRAGON_WING_RIGHT_TAMEDD;
        sprite[SPRITE.BABY_DRAGON_WING_RIGHT_TAMED][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_WING_RIGHT_TAMEDN;
        sprite[SPRITE.HURT_BABY_DRAGON] = IMAGES.HURT_BABY_DRAGON;
        sprite[SPRITE.HURT_BABY_DRAGON_WING_LEFT] = IMAGES.HURT_BABY_DRAGON_WING_LEFT;
        sprite[SPRITE.HURT_BABY_DRAGON_WING_RIGHT] = IMAGES.HURT_BABY_DRAGON_WING_RIGHT;
        sprite[SPRITE.BABY_LAVA_ATTACK] = [];
        sprite[SPRITE.BABY_LAVA_ATTACK][SPRITE.DAY] = IMAGES.BABY_LAVA_ATTACKD;
        sprite[SPRITE.BABY_LAVA_ATTACK][SPRITE.NIGHT] = IMAGES.BABY_LAVA_ATTACKN;
        sprite[SPRITE.BABY_LAVA] = [];
        sprite[SPRITE.BABY_LAVA][SPRITE.DAY] = IMAGES.BABY_LAVAD;
        sprite[SPRITE.BABY_LAVA][SPRITE.NIGHT] = IMAGES.BABY_LAVAN;
        sprite[SPRITE.BABY_LAVA_TAMED] = [];
        sprite[SPRITE.BABY_LAVA_TAMED][SPRITE.DAY] = IMAGES.BABY_LAVA_TAMEDD;
        sprite[SPRITE.BABY_LAVA_TAMED][SPRITE.NIGHT] = IMAGES.BABY_LAVA_TAMEDN;
        sprite[SPRITE.BABY_LAVA_WING_LEFT] = [];
        sprite[SPRITE.BABY_LAVA_WING_LEFT][SPRITE.DAY] = IMAGES.BABY_LAVA_WING_LEFTD;
        sprite[SPRITE.BABY_LAVA_WING_LEFT][SPRITE.NIGHT] = IMAGES.BABY_LAVA_WING_LEFTN;
        sprite[SPRITE.BABY_LAVA_WING_RIGHT] = [];
        sprite[SPRITE.BABY_LAVA_WING_RIGHT][SPRITE.DAY] = IMAGES.BABY_LAVA_WING_RIGHTD;
        sprite[SPRITE.BABY_LAVA_WING_RIGHT][SPRITE.NIGHT] = IMAGES.BABY_LAVA_WING_RIGHTN;
        sprite[SPRITE.BABY_LAVA_WING_LEFT_ATTACK] = [];
        sprite[SPRITE.BABY_LAVA_WING_LEFT_ATTACK][SPRITE.DAY] = IMAGES.BABY_LAVA_WING_LEFT_ATTACKD;
        sprite[SPRITE.BABY_LAVA_WING_LEFT_ATTACK][SPRITE.NIGHT] = IMAGES.BABY_LAVA_WING_LEFT_ATTACKN;
        sprite[SPRITE.BABY_LAVA_WING_RIGHT_ATTACK] = [];
        sprite[SPRITE.BABY_LAVA_WING_RIGHT_ATTACK][SPRITE.DAY] = IMAGES.BABY_LAVA_WING_RIGHT_ATTACKD;
        sprite[SPRITE.BABY_LAVA_WING_RIGHT_ATTACK][SPRITE.NIGHT] = IMAGES.BABY_LAVA_WING_RIGHT_ATTACKN;
        sprite[SPRITE.BABY_LAVA_WING_LEFT_TAMED] = [];
        sprite[SPRITE.BABY_LAVA_WING_LEFT_TAMED][SPRITE.DAY] = IMAGES.BABY_LAVA_WING_LEFT_TAMEDD;
        sprite[SPRITE.BABY_LAVA_WING_LEFT_TAMED][SPRITE.NIGHT] = IMAGES.BABY_LAVA_WING_LEFT_TAMEDN;
        sprite[SPRITE.BABY_LAVA_WING_RIGHT_TAMED] = [];
        sprite[SPRITE.BABY_LAVA_WING_RIGHT_TAMED][SPRITE.DAY] = IMAGES.BABY_LAVA_WING_RIGHT_TAMEDD;
        sprite[SPRITE.BABY_LAVA_WING_RIGHT_TAMED][SPRITE.NIGHT] = IMAGES.BABY_LAVA_WING_RIGHT_TAMEDN;
        sprite[SPRITE.HURT_BABY_LAVA] = IMAGES.HURT_BABY_LAVA;
        sprite[SPRITE.HURT_BABY_LAVA_WING_LEFT] = IMAGES.HURT_BABY_LAVA_WING_LEFT;
        sprite[SPRITE.HURT_BABY_LAVA_WING_RIGHT] = IMAGES.HURT_BABY_LAVA_WING_RIGHT;
        sprite[SPRITE.HAWK_ATTACK] = [];
        sprite[SPRITE.HAWK_ATTACK][SPRITE.DAY] = IMAGES.HAWK_ATTACKD;
        sprite[SPRITE.HAWK_ATTACK][SPRITE.NIGHT] = IMAGES.HAWK_ATTACKN;
        sprite[SPRITE.HAWK] = [];
        sprite[SPRITE.HAWK][SPRITE.DAY] = IMAGES.HAWKD;
        sprite[SPRITE.HAWK][SPRITE.NIGHT] = IMAGES.HAWKN;
        sprite[SPRITE.HURT_HAWK_GROUND] = IMAGES.HURT_HAWK_GROUND;
        sprite[SPRITE.HAWK_GROUND] = [];
        sprite[SPRITE.HAWK_GROUND][SPRITE.DAY] = IMAGES.HAWK_GROUNDD;
        sprite[SPRITE.HAWK_GROUND][SPRITE.NIGHT] = IMAGES.HAWK_GROUNDN;
        sprite[SPRITE.HAWK_GROUND_ATTACK] = [];
        sprite[SPRITE.HAWK_GROUND_ATTACK][SPRITE.DAY] = IMAGES.HAWK_GROUND_ATTACKD;
        sprite[SPRITE.HAWK_GROUND_ATTACK][SPRITE.NIGHT] = IMAGES.HAWK_GROUND_ATTACKN;
        sprite[SPRITE.HAWK_TAMED] = [];
        sprite[SPRITE.HAWK_TAMED][SPRITE.DAY] = IMAGES.HAWK_TAMEDD;
        sprite[SPRITE.HAWK_TAMED][SPRITE.NIGHT] = IMAGES.HAWK_TAMEDN;
        sprite[SPRITE.HAWK_WING_LEFT] = [];
        sprite[SPRITE.HAWK_WING_LEFT][SPRITE.DAY] = IMAGES.HAWK_WING_LEFTD;
        sprite[SPRITE.HAWK_WING_LEFT][SPRITE.NIGHT] = IMAGES.HAWK_WING_LEFTN;
        sprite[SPRITE.HAWK_WING_RIGHT] = [];
        sprite[SPRITE.HAWK_WING_RIGHT][SPRITE.DAY] = IMAGES.HAWK_WING_RIGHTD;
        sprite[SPRITE.HAWK_WING_RIGHT][SPRITE.NIGHT] = IMAGES.HAWK_WING_RIGHTN;
        sprite[SPRITE.HAWK_WING_LEFT_ATTACK] = [];
        sprite[SPRITE.HAWK_WING_LEFT_ATTACK][SPRITE.DAY] = IMAGES.HAWK_WING_LEFT_ATTACKD;
        sprite[SPRITE.HAWK_WING_LEFT_ATTACK][SPRITE.NIGHT] = IMAGES.HAWK_WING_LEFT_ATTACKN;
        sprite[SPRITE.HAWK_WING_RIGHT_ATTACK] = [];
        sprite[SPRITE.HAWK_WING_RIGHT_ATTACK][SPRITE.DAY] = IMAGES.HAWK_WING_RIGHT_ATTACKD;
        sprite[SPRITE.HAWK_WING_RIGHT_ATTACK][SPRITE.NIGHT] = IMAGES.HAWK_WING_RIGHT_ATTACKN;
        sprite[SPRITE.HAWK_WING_LEFT_TAMED] = [];
        sprite[SPRITE.HAWK_WING_LEFT_TAMED][SPRITE.DAY] = IMAGES.HAWK_WING_LEFT_TAMEDD;
        sprite[SPRITE.HAWK_WING_LEFT_TAMED][SPRITE.NIGHT] = IMAGES.HAWK_WING_LEFT_TAMEDN;
        sprite[SPRITE.HAWK_WING_RIGHT_TAMED] = [];
        sprite[SPRITE.HAWK_WING_RIGHT_TAMED][SPRITE.DAY] = IMAGES.HAWK_WING_RIGHT_TAMEDD;
        sprite[SPRITE.HAWK_WING_RIGHT_TAMED][SPRITE.NIGHT] = IMAGES.HAWK_WING_RIGHT_TAMEDN;
        sprite[SPRITE.HURT_HAWK] = IMAGES.HURT_HAWK;
        sprite[SPRITE.HURT_HAWK_WING_LEFT] = IMAGES.HURT_HAWK_WING_LEFT;
        sprite[SPRITE.HURT_HAWK_WING_RIGHT] = IMAGES.HURT_HAWK_WING_RIGHT;
        sprite[SPRITE.VULTURE_ATTACK] = [];
        sprite[SPRITE.VULTURE_ATTACK][SPRITE.DAY] = IMAGES.VULTURE_ATTACKD;
        sprite[SPRITE.VULTURE_ATTACK][SPRITE.NIGHT] = IMAGES.VULTURE_ATTACKN;
        sprite[SPRITE.VULTURE] = [];
        sprite[SPRITE.VULTURE][SPRITE.DAY] = IMAGES.VULTURED;
        sprite[SPRITE.VULTURE][SPRITE.NIGHT] = IMAGES.VULTUREN;
        sprite[SPRITE.HURT_VULTURE_GROUND] = IMAGES.HURT_VULTURE_GROUND;
        sprite[SPRITE.VULTURE_GROUND] = [];
        sprite[SPRITE.VULTURE_GROUND][SPRITE.DAY] = IMAGES.VULTURE_GROUNDD;
        sprite[SPRITE.VULTURE_GROUND][SPRITE.NIGHT] = IMAGES.VULTURE_GROUNDN;
        sprite[SPRITE.VULTURE_GROUND_ATTACK] = [];
        sprite[SPRITE.VULTURE_GROUND_ATTACK][SPRITE.DAY] = IMAGES.VULTURE_GROUND_ATTACKD;
        sprite[SPRITE.VULTURE_GROUND_ATTACK][SPRITE.NIGHT] = IMAGES.VULTURE_GROUND_ATTACKN;
        sprite[SPRITE.VULTURE_TAMED] = [];
        sprite[SPRITE.VULTURE_TAMED][SPRITE.DAY] = IMAGES.VULTURE_TAMEDD;
        sprite[SPRITE.VULTURE_TAMED][SPRITE.NIGHT] = IMAGES.VULTURE_TAMEDN;
        sprite[SPRITE.VULTURE_WING_LEFT] = [];
        sprite[SPRITE.VULTURE_WING_LEFT][SPRITE.DAY] = IMAGES.VULTURE_WING_LEFTD;
        sprite[SPRITE.VULTURE_WING_LEFT][SPRITE.NIGHT] = IMAGES.VULTURE_WING_LEFTN;
        sprite[SPRITE.VULTURE_WING_RIGHT] = [];
        sprite[SPRITE.VULTURE_WING_RIGHT][SPRITE.DAY] = IMAGES.VULTURE_WING_RIGHTD;
        sprite[SPRITE.VULTURE_WING_RIGHT][SPRITE.NIGHT] = IMAGES.VULTURE_WING_RIGHTN;
        sprite[SPRITE.VULTURE_WING_LEFT_ATTACK] = [];
        sprite[SPRITE.VULTURE_WING_LEFT_ATTACK][SPRITE.DAY] = IMAGES.VULTURE_WING_LEFT_ATTACKD;
        sprite[SPRITE.VULTURE_WING_LEFT_ATTACK][SPRITE.NIGHT] = IMAGES.VULTURE_WING_LEFT_ATTACKN;
        sprite[SPRITE.VULTURE_WING_RIGHT_ATTACK] = [];
        sprite[SPRITE.VULTURE_WING_RIGHT_ATTACK][SPRITE.DAY] = IMAGES.VULTURE_WING_RIGHT_ATTACKD;
        sprite[SPRITE.VULTURE_WING_RIGHT_ATTACK][SPRITE.NIGHT] = IMAGES.VULTURE_WING_RIGHT_ATTACKN;
        sprite[SPRITE.VULTURE_WING_LEFT_TAMED] = [];
        sprite[SPRITE.VULTURE_WING_LEFT_TAMED][SPRITE.DAY] = IMAGES.VULTURE_WING_LEFT_TAMEDD;
        sprite[SPRITE.VULTURE_WING_LEFT_TAMED][SPRITE.NIGHT] = IMAGES.VULTURE_WING_LEFT_TAMEDN;
        sprite[SPRITE.VULTURE_WING_RIGHT_TAMED] = [];
        sprite[SPRITE.VULTURE_WING_RIGHT_TAMED][SPRITE.DAY] = IMAGES.VULTURE_WING_RIGHT_TAMEDD;
        sprite[SPRITE.VULTURE_WING_RIGHT_TAMED][SPRITE.NIGHT] = IMAGES.VULTURE_WING_RIGHT_TAMEDN;
        sprite[SPRITE.HURT_VULTURE] = IMAGES.HURT_VULTURE;
        sprite[SPRITE.HURT_VULTURE_WING_LEFT] = IMAGES.HURT_VULTURE_WING_LEFT;
        sprite[SPRITE.HURT_VULTURE_WING_RIGHT] = IMAGES.HURT_VULTURE_WING_RIGHT;
        sprite[SPRITE.BOAR] = [];
        sprite[SPRITE.BOAR][SPRITE.DAY] = IMAGES.BOARD;
        sprite[SPRITE.BOAR][SPRITE.NIGHT] = IMAGES.BOARN;
        sprite[SPRITE.BOAR_TAMED] = [];
        sprite[SPRITE.BOAR_TAMED][SPRITE.DAY] = IMAGES.BOAR_TAMEDD;
        sprite[SPRITE.BOAR_TAMED][SPRITE.NIGHT] = IMAGES.BOAR_TAMEDN;
        sprite[SPRITE.BOAR_ATTACK] = [];
        sprite[SPRITE.BOAR_ATTACK][SPRITE.DAY] = IMAGES.BOAR_ANGRYD;
        sprite[SPRITE.BOAR_ATTACK][SPRITE.NIGHT] = IMAGES.BOAR_ANGRYN;
        sprite[SPRITE.BOAR_STEP] = [];
        sprite[SPRITE.BOAR_STEP][SPRITE.DAY] = IMAGES.BOAR_STEP;
        sprite[SPRITE.BOAR_STEP][SPRITE.NIGHT] = IMAGES.BOAR_STEP;
        sprite[SPRITE.CRAB_STEP] = [];
        sprite[SPRITE.CRAB_STEP][SPRITE.DAY] = IMAGES.CRAB_STEP;
        sprite[SPRITE.CRAB_STEP][SPRITE.NIGHT] = IMAGES.CRAB_STEP;
        sprite[SPRITE.BABY_MAMMOTH_STEP] = [];
        sprite[SPRITE.BABY_MAMMOTH_STEP][SPRITE.DAY] = IMAGES.BABY_MAMMOTH_STEP;
        sprite[SPRITE.BABY_MAMMOTH_STEP][SPRITE.NIGHT] = IMAGES.BABY_MAMMOTH_STEP;
        sprite[SPRITE.HURT_BOAR] = IMAGES.HURT_BOAR;
        sprite[SPRITE.SADDLE] = [];
        sprite[SPRITE.SADDLE][SPRITE.DAY] = IMAGES.SADDLED;
        sprite[SPRITE.SADDLE][SPRITE.NIGHT] = IMAGES.SADDLEN;
        sprite[SPRITE.WAND1] = [];
        sprite[SPRITE.WAND1][SPRITE.DAY] = IMAGES.WAND1D;
        sprite[SPRITE.WAND1][SPRITE.NIGHT] = IMAGES.WAND1N;
        sprite[SPRITE.SPELL] = [];
        sprite[SPRITE.SPELL][SPRITE.DAY] = [IMAGES.LIGHT_WAND0D, IMAGES.LIGHT_WAND1D, IMAGES.WOOD_ARROWD, IMAGES.STONE_ARROWD, IMAGES.GOLD_ARROWD, IMAGES.DIAMOND_ARROWD, IMAGES.AMETHYST_ARROWD, IMAGES.REIDITE_ARROWD, IMAGES.DRAGON_ARROWD];
        sprite[SPRITE.SPELL][SPRITE.NIGHT] = [IMAGES.LIGHT_WAND0N, IMAGES.LIGHT_WAND1N, IMAGES.WOOD_ARROWN, IMAGES.STONE_ARROWN, IMAGES.GOLD_ARROWN, IMAGES.DIAMOND_ARROWN, IMAGES.AMETHYST_ARROWN, IMAGES.REIDITE_ARROWD, IMAGES.DRAGON_ARROWN];
        sprite[SPRITE.WAND2] = [];
        sprite[SPRITE.WAND2][SPRITE.DAY] = IMAGES.WAND2D;
        sprite[SPRITE.WAND2][SPRITE.NIGHT] = IMAGES.WAND2N;
        sprite[SPRITE.BOAT_WAVE] = [];
        sprite[SPRITE.BOAT_WAVE][SPRITE.DAY] = IMAGES.BOAT_WAVED;
        sprite[SPRITE.BOAT_WAVE][SPRITE.NIGHT] = IMAGES.BOAT_WAVEN;
        sprite[SPRITE.SLED_WAVE] = [];
        sprite[SPRITE.SLED_WAVE][SPRITE.DAY] = IMAGES.SLED_WAVED;
        sprite[SPRITE.SLED_WAVE][SPRITE.NIGHT] = IMAGES.SLED_WAVEN;
        sprite[SPRITE.PIRATE_HAT] = [];
        sprite[SPRITE.PIRATE_HAT][SPRITE.DAY] = IMAGES.PIRATE_HATD;
        sprite[SPRITE.PIRATE_HAT][SPRITE.NIGHT] = IMAGES.PIRATE_HATN;
        sprite[SPRITE.FUR_HAT] = [];
        sprite[SPRITE.FUR_HAT][SPRITE.DAY] = IMAGES.FUR_HATD;
        sprite[SPRITE.FUR_HAT][SPRITE.NIGHT] = IMAGES.FUR_HATN;
        sprite[SPRITE.FLOWER_HAT] = [];
        sprite[SPRITE.FLOWER_HAT][SPRITE.DAY] = IMAGES.FLOWER_HATD;
        sprite[SPRITE.FLOWER_HAT][SPRITE.NIGHT] = IMAGES.FLOWER_HATN;
        sprite[SPRITE.PILOT_HELMET] = [];
        sprite[SPRITE.PILOT_HELMET][SPRITE.DAY] = IMAGES.PILOT_HELMETD;
        sprite[SPRITE.PILOT_HELMET][SPRITE.NIGHT] = IMAGES.PILOT_HELMETN;
        sprite[SPRITE.LAKE_EDGE] = [];
        sprite[SPRITE.LAKE_EDGE][SPRITE.DAY] = [];
        sprite[SPRITE.LAKE_EDGE][SPRITE.NIGHT] = [];
        sprite[SPRITE.LAKE_EDGE][SPRITE.DAY].push(IMAGES.LAKE0D_EDGE);
        sprite[SPRITE.LAKE_EDGE][SPRITE.DAY].push(IMAGES.LAKE1D_EDGE);
        sprite[SPRITE.LAKE_EDGE][SPRITE.DAY].push(IMAGES.LAKE2D_EDGE);
        sprite[SPRITE.LAKE_EDGE][SPRITE.NIGHT].push(IMAGES.LAKE0N_EDGE);
        sprite[SPRITE.LAKE_EDGE][SPRITE.NIGHT].push(IMAGES.LAKE1N_EDGE);
        sprite[SPRITE.LAKE_EDGE][SPRITE.NIGHT].push(IMAGES.LAKE2N_EDGE);
        sprite[SPRITE.LAKE_DEEP] = [];
        sprite[SPRITE.LAKE_DEEP][SPRITE.DAY] = [];
        sprite[SPRITE.LAKE_DEEP][SPRITE.NIGHT] = [];
        sprite[SPRITE.LAKE_DEEP][SPRITE.DAY].push(IMAGES.LAKE0D_DEEP);
        sprite[SPRITE.LAKE_DEEP][SPRITE.DAY].push(IMAGES.LAKE1D_DEEP);
        sprite[SPRITE.LAKE_DEEP][SPRITE.DAY].push(IMAGES.LAKE2D_DEEP);
        sprite[SPRITE.LAKE_DEEP][SPRITE.NIGHT].push(IMAGES.LAKE0N_DEEP);
        sprite[SPRITE.LAKE_DEEP][SPRITE.NIGHT].push(IMAGES.LAKE1N_DEEP);
        sprite[SPRITE.LAKE_DEEP][SPRITE.NIGHT].push(IMAGES.LAKE2N_DEEP);
        sprite[SPRITE.LAKE] = [];
        sprite[SPRITE.LAKE][SPRITE.DAY] = [];
        sprite[SPRITE.LAKE][SPRITE.NIGHT] = [];
        sprite[SPRITE.LAKE][SPRITE.DAY].push(IMAGES.LAKE0D);
        sprite[SPRITE.LAKE][SPRITE.DAY].push(IMAGES.LAKE1D);
        sprite[SPRITE.LAKE][SPRITE.DAY].push(IMAGES.LAKE2D);
        sprite[SPRITE.LAKE][SPRITE.NIGHT].push(IMAGES.LAKE0N);
        sprite[SPRITE.LAKE][SPRITE.NIGHT].push(IMAGES.LAKE1N);
        sprite[SPRITE.LAKE][SPRITE.NIGHT].push(IMAGES.LAKE2N);
        MINIMAP_UTILS["g"] = [];
        MINIMAP_UTILS["g"][0] = [IMAGES.MAPDAY_GOLD1, IMAGES.MAPNIGHT_GOLD1];
        MINIMAP_UTILS["g"][1] = MINIMAP_UTILS["g"][0];
        MINIMAP_UTILS["g"][2] = [IMAGES.MAPDAY_GOLD2, IMAGES.MAPNIGHT_GOLD2];
        MINIMAP_UTILS["m"] = [];
        MINIMAP_UTILS["m"][0] = [IMAGES.MAPDAY_EMERALD1, IMAGES.MAPNIGHT_EMERALD1];
        MINIMAP_UTILS["m"][1] = MINIMAP_UTILS["m"][0];
        MINIMAP_UTILS["m"][2] = [IMAGES.MAPDAY_EMERALD2, IMAGES.MAPNIGHT_EMERALD2];
        MINIMAP_UTILS["la"] = [];
        MINIMAP_UTILS["la"][0] = [IMAGES.MAPDAY_MAGMA, IMAGES.MAPNIGHT_MAGMA];
        MINIMAP_UTILS["la"][1] = MINIMAP_UTILS["la"][0];
        MINIMAP_UTILS["la"][2] = MINIMAP_UTILS["la"][0];
        MINIMAP_UTILS["la"][3] = MINIMAP_UTILS["la"][0];
        MINIMAP_UTILS["la"][4] = MINIMAP_UTILS["la"][0];
        MINIMAP_UTILS["la"][5] = MINIMAP_UTILS["la"][0];
        MINIMAP_UTILS["s"] = [];
        MINIMAP_UTILS["s"][0] = [IMAGES.MAPDAY_STONE1, IMAGES.MAPNIGHT_STONE1];
        MINIMAP_UTILS["s"][1] = MINIMAP_UTILS["s"][0];
        MINIMAP_UTILS["s"][2] = [IMAGES.MAPDAY_STONE2, IMAGES.MAPNIGHT_STONE2];
        MINIMAP_UTILS["p"] = [];
        MINIMAP_UTILS["p"][0] = [IMAGES.MAPDAY_BERRY, IMAGES.MAPDAY_BERRY];
        MINIMAP_UTILS["a"] = [];
        MINIMAP_UTILS["a"][0] = [IMAGES.MAPDAY_AMETHYST, IMAGES.MAPNIGHT_AMETHYST];
        MINIMAP_UTILS["a"][1] = MINIMAP_UTILS["a"][0];
        MINIMAP_UTILS["a"][2] = MINIMAP_UTILS["a"][0];
        MINIMAP_UTILS["d"] = [];
        MINIMAP_UTILS["d"][0] = [IMAGES.MAPDAY_DIAMOND, IMAGES.MAPNIGHT_DIAMOND];
        MINIMAP_UTILS["d"][1] = MINIMAP_UTILS["d"][0];
        MINIMAP_UTILS["d"][2] = MINIMAP_UTILS["d"][0];
        MINIMAP_UTILS["re"] = [];
        MINIMAP_UTILS["re"][0] = [IMAGES.MAPDAY_REIDITE, IMAGES.MAPNIGHT_REIDITE];
        MINIMAP_UTILS["re"][1] = MINIMAP_UTILS["re"][0];
        MINIMAP_UTILS["re"][2] = MINIMAP_UTILS["re"][0];
        MINIMAP_UTILS["f"] = [];
        MINIMAP_UTILS["f"][0] = [IMAGES.MAPDAY_FIR_TREE, IMAGES.MAPNIGHT_FIR_TREE];
        MINIMAP_UTILS["f"][1] = MINIMAP_UTILS["f"][0];
        MINIMAP_UTILS["f"][2] = MINIMAP_UTILS["f"][0];
        MINIMAP_UTILS["isl"] = [];
        MINIMAP_UTILS["isl"][0] = [IMAGES.MAPDAY_ISLAND, IMAGES.MAPNIGHT_ISLAND];
        MINIMAP_UTILS["isl"][1] = MINIMAP_UTILS["isl"][0];
        MINIMAP_UTILS["isl"][2] = MINIMAP_UTILS["isl"][0];
        MINIMAP_UTILS["c"] = [];
        MINIMAP_UTILS["c"][0] = [IMAGES.MAPDAY_CACTUS, IMAGES.MAPNIGHT_CACTUS];
        MINIMAP_UTILS["c"][1] = MINIMAP_UTILS["c"][0];
        MINIMAP_UTILS["c"][2] = MINIMAP_UTILS["c"][0];
        MINIMAP_UTILS["wtb"] = [];
        MINIMAP_UTILS["wtb"][0] = [IMAGES.MAPDAY_RIVER, IMAGES.MAPNIGHT_RIVER];
        MINIMAP_UTILS["PIRANHA"] = [IMAGES.MAPDAY_PIRANHA, IMAGES.MAPNIGHT_PIRANHA];
        MINIMAP_UTILS["KRAKEN"] = [IMAGES.MAPDAY_KRAKEN, IMAGES.MAPNIGHT_KRAKEN];
        MINIMAP_UTILS["FOX"] = [IMAGES.MAPDAY_FOX, IMAGES.MAPNIGHT_FOX];
        MINIMAP_UTILS["WOLF"] = [IMAGES.MAPDAY_WOLF, IMAGES.MAPNIGHT_WOLF];
        MINIMAP_UTILS["SPIDER"] = [IMAGES.MAPDAY_SPIDER, IMAGES.MAPNIGHT_SPIDER];
        MINIMAP_UTILS["BEAR"] = [IMAGES.MAPDAY_BEAR, IMAGES.MAPNIGHT_BEAR];
        MINIMAP_UTILS["CAVE"] = [IMAGES.MAPDAY_CAVE, IMAGES.MAPNIGHT_CAVE];
        MINIMAP_UTILS["MAP"] = [IMAGES.BIGDAY, IMAGES.BIGNIGHT];
        MINIMAP_UTILS["FOREST"] = [IMAGES.MAPDAY_FOREST, IMAGES.MAPNIGHT_FOREST];
        MINIMAP_UTILS["WINTER"] = [IMAGES.MAPDAY_WINTER, IMAGES.MAPNIGHT_WINTER];
        MINIMAP_UTILS["DESERT"] = [IMAGES.MAPDAY_DESERT, IMAGES.MAPNIGHT_DESERT];
        MINIMAP_UTILS["LAVA"] = [IMAGES.MAPDAY_LAVA, IMAGES.MAPNIGHT_LAVA];
        for (var _key in MINIMAP_UTILS) {
            var _utils = MINIMAP_UTILS[_key];
            for (var i = 0; i < _utils.length; i++) {
                var _subutils = _utils[i];
                if (_subutils.tryLoad !== undefined)
                    _subutils.tryLoad();
                else if (_subutils.length > 0) {
                    for (var j = 0; j < _subutils.length; j++) {
                        if (_subutils[j].tryLoad !== undefined)
                            _subutils[j].tryLoad();

                    }
                }
            }
        }
        console.log("Load images", Date.now() - TIMEDEBUG);
    };

    function create_images () {

        var scale = 1;

        var TIMEDEBUG = new Date ().getTime ();

        _load_images ();

        render_inventory ();

        /* Bubbles */
        sprite[SPRITE.BUBBLES]               = [];
        sprite[SPRITE.BUBBLES][SPRITE.DAY]   = [];
        sprite[SPRITE.BUBBLES][SPRITE.NIGHT] = [];
        for (var i = 0 ; i < SPRITE.BUBBLES_SIZES ; i++) {

            sprite[SPRITE.BUBBLES][SPRITE.DAY].push   (CTI (create_flake (scale, 4 + i, "#59B8CE")));
            sprite[SPRITE.BUBBLES][SPRITE.NIGHT].push (CTI (create_flake (scale, 4 + i, "#90DDD9")));
        }

        /* Flakes */
        sprite[SPRITE.FLAKES]               = [];
        sprite[SPRITE.FLAKES][SPRITE.DAY]   = [];
        sprite[SPRITE.FLAKES][SPRITE.NIGHT] = [];
        for (var i = 0 ; i < SPRITE.FLAKES_SIZES ; i++) {

        sprite[SPRITE.FLAKES][SPRITE.DAY].push   (CTI (create_flake (scale, 4 + i, "#fff")));
        sprite[SPRITE.FLAKES][SPRITE.NIGHT].push (CTI (create_flake (scale, 4 + i, "#fff")));
        }

        sprite[SPRITE.DESERT]               = [];
        sprite[SPRITE.DESERT][SPRITE.DAY]   = [];
        sprite[SPRITE.DESERT][SPRITE.NIGHT] = [];
        for (var i = 0 ; i < SPRITE.FLAKES_SIZES ; i++) {

            sprite[SPRITE.DESERT][SPRITE.DAY].push   (CTI (create_flake (scale, 6 + i, "#DDCD8A")));
            sprite[SPRITE.DESERT][SPRITE.NIGHT].push (CTI (create_flake (scale, 6 + i, "#155E57")));
        }

        sprite[SPRITE.ASHES]               = [];
        sprite[SPRITE.ASHES][SPRITE.DAY]   = [];
        sprite[SPRITE.ASHES][SPRITE.NIGHT] = [];
        for (var i = 0 ; i < SPRITE.ASHES_SIZES ; i++) {

        sprite[SPRITE.ASHES][SPRITE.DAY].push   (CTI (create_flake (scale, 4 + i, "#353326")));
        sprite[SPRITE.ASHES][SPRITE.NIGHT].push (CTI (create_flake (scale, 4 + i, "#1D2526")));
        }

        /*WINTER*/
        // Christmas
        sprite[SPRITE.GARLAND] = [];
        sprite[SPRITE.GARLAND][SPRITE.DAY] = CTI (create_garland (scale * 1.5, true, ["#ee71a9"]));
        sprite[SPRITE.GARLAND][SPRITE.NIGHT] = CTI (create_garland (scale * 1.5, true, ["#ee71a9"]));

        sprite[SPRITE.GARLANDS] = [sprite[SPRITE.GARLAND]];
        sprite[SPRITE.GARLANDS][1] = [];
        sprite[SPRITE.GARLANDS][2] = [];
        sprite[SPRITE.GARLANDS][3] = [];
        sprite[SPRITE.GARLANDS][4] = [];

        sprite[SPRITE.GARLANDS][1][SPRITE.DAY] = CTI (create_garland (scale * 1.5, true, ["#e2d63b"]));
        sprite[SPRITE.GARLANDS][1][SPRITE.NIGHT] = CTI (create_garland (scale * 1.5, true, ["#e2d63b"]));

        sprite[SPRITE.GARLANDS][2][SPRITE.DAY] = CTI (create_garland (scale * 1.5, true, ["#309cbd"]));
        sprite[SPRITE.GARLANDS][2][SPRITE.NIGHT] = CTI (create_garland (scale * 1.5, true, ["#309cbd"]));

        sprite[SPRITE.GARLANDS][3][SPRITE.DAY] = CTI (create_garland (scale * 1.5, true, ["#cd232d"]));
        sprite[SPRITE.GARLANDS][3][SPRITE.NIGHT] = CTI (create_garland (scale * 1.5, true, ["#cd232d"]));

        sprite[SPRITE.GARLANDS][4][SPRITE.DAY] = CTI (create_garland (scale * 1.5, true, ["#42b672"]));
        sprite[SPRITE.GARLANDS][4][SPRITE.NIGHT] = CTI (create_garland (scale * 1.5, true, ["#42b672"]));


        var cti = Utils.gup ("cti", window.location.href);
        if (cti)
            document.getElementById ("version").innerHTML += "[CTI]";
        else
            CTI = function (a) { a.loaded = 1; return a; };

        /* Create market background */
        sprite[SPRITE.MARKET_BGD] = CTI (create_background_market ());

        /*Stones, gold, diamond*/
        sprite[SPRITE.STONES]               = [];
        sprite[SPRITE.STONES][SPRITE.DAY]   = [];
        sprite[SPRITE.STONES][SPRITE.NIGHT] = [];
        sprite[SPRITE.STONES][SPRITE.DAY].push (CTI (create_stone (scale * 1.1,   false, /*["#252B28", "#58645F", "#75827D"]*/["#0a2d18", "#c3d1cb", "#e4efe8"])));
        sprite[SPRITE.STONES][SPRITE.DAY].push (CTI (create_stone (scale * 0.9,   false, /*["#252B28", "#58645F", "#75827D"]*/["#0a2d18", "#c3d1cb", "#e4efe8"])));
        sprite[SPRITE.STONES][SPRITE.DAY].push (CTI (create_stone (scale * 0.6,   false, /*["#252B28", "#58645F", "#75827D"]*/["#0a2d18", "#c3d1cb", "#e4efe8"])));
        sprite[SPRITE.STONES][SPRITE.NIGHT].push (CTI (create_stone (scale * 1.1, false, /*["#030d14", "#123335", "#183f3f"]*/["#0a2728", "#3c8e88", "#40a39b"])));
        sprite[SPRITE.STONES][SPRITE.NIGHT].push (CTI (create_stone (scale * 0.9, false, /*["#030d14", "#123335", "#183f3f"]*/["#0a2728", "#3c8e88", "#40a39b"])));
        sprite[SPRITE.STONES][SPRITE.NIGHT].push (CTI (create_stone (scale * 0.6, false, /*["#030d14", "#123335", "#183f3f"]*/["#0a2728", "#3c8e88", "#40a39b"])));

        sprite[SPRITE.GOLD]               = [];
        sprite[SPRITE.GOLD][SPRITE.DAY]   = [];
        sprite[SPRITE.GOLD][SPRITE.NIGHT] = [];
        sprite[SPRITE.GOLD][SPRITE.DAY].push (CTI (create_gold (scale * 1.5,   false, /*["#282823", "#877c2d", "#c4bc51"]*/["#2b280a", "#ddcf8a", "#f4efc6"])));
        sprite[SPRITE.GOLD][SPRITE.DAY].push (CTI (create_gold (scale * 1.3,   false, /*["#282823", "#877c2d", "#c4bc51"]*/["#2b280a", "#ddcf8a", "#f4efc6"])));
        sprite[SPRITE.GOLD][SPRITE.DAY].push (CTI (create_gold (scale * 1.1,   false, /*["#282823", "#877c2d", "#c4bc51"]*/["#2b280a", "#ddcf8a", "#f4efc6"])));
        sprite[SPRITE.GOLD][SPRITE.NIGHT].push (CTI (create_gold (scale * 1.5, false, ["#030d14", "#1b4444", "#16605a"])));
        sprite[SPRITE.GOLD][SPRITE.NIGHT].push (CTI (create_gold (scale * 1.3, false, ["#030d14", "#1b4444", "#16605a"])));
        sprite[SPRITE.GOLD][SPRITE.NIGHT].push (CTI (create_gold (scale * 1.1, false, ["#030d14", "#1b4444", "#16605a"])));

        sprite[SPRITE.DIAMOND]               = [];
        sprite[SPRITE.DIAMOND][SPRITE.DAY]   = [];
        sprite[SPRITE.DIAMOND][SPRITE.NIGHT] = [];
        sprite[SPRITE.DIAMOND][SPRITE.DAY].push (CTI (create_diamond (scale * 1.1,   false, ["#232828", "#3fc9c9", "#74ede6"])));
        sprite[SPRITE.DIAMOND][SPRITE.DAY].push (CTI (create_diamond (scale * 0.9,   false, ["#232828", "#3fc9c9", "#74ede6"])));
        sprite[SPRITE.DIAMOND][SPRITE.DAY].push (CTI (create_diamond (scale * 0.7,   false, ["#232828", "#3fc9c9", "#74ede6"])));
        sprite[SPRITE.DIAMOND][SPRITE.NIGHT].push (CTI (create_diamond (scale * 1.1, false, ["#030d14", "#2b9390", "#57bcb5"])));
        sprite[SPRITE.DIAMOND][SPRITE.NIGHT].push (CTI (create_diamond (scale * 0.9, false, ["#030d14", "#2b9390", "#57bcb5"])));
        sprite[SPRITE.DIAMOND][SPRITE.NIGHT].push (CTI (create_diamond (scale * 0.7, false, ["#030d14", "#2b9390", "#57bcb5"])));

        sprite[SPRITE.ALOE_VERA]               = [];
        sprite[SPRITE.ALOE_VERA][SPRITE.DAY]   = IMAGES.ALOE_VERAD
        sprite[SPRITE.ALOE_VERA][SPRITE.NIGHT] = IMAGES.ALOE_VERAN

        /* winter*/
        /*      sprite[SPRITE.BODY][SPRITE.SKIN0][SPRITE.DAY]   = CTI (create_player (scale * 0.6,
                    ["#0d1b1c", "#dff2f7", "#187484", "#231f20", "#ffffff"], 0));
                sprite[SPRITE.BODY][SPRITE.SKIN0][SPRITE.NIGHT] = CTI (create_player (scale * 0.6,
                    ["#030d14", "#106664", "#01333a", "#15183f", "#ffffff"], 0));

                sprite[SPRITE.BODY][SPRITE.SKIN1][SPRITE.DAY]   = CTI (create_player (scale * 0.6,
                    ["#0d1b1c", "#ffffff", "#bab7b1", "#231f20", "#ffffff", "#996f37", "#875d2b", "#ff8b00", "#d18015"], 1));
                sprite[SPRITE.BODY][SPRITE.SKIN1][SPRITE.NIGHT] = CTI (create_player (scale * 0.6,
                    ["#030d14", "#157774", "#01333a", "#15183f", "#ffffff", "#0b5452", "#074543", "#0c5d4e", "#0a4e42"], 1));

                sprite[SPRITE.BODY][SPRITE.SKIN2][SPRITE.DAY]   = CTI (create_player (scale * 0.6,
                    ["#0d1b1c", "#3fc445", "#33a02d", "#51604d", "#2cbf72", "#ce1717", "#f471ac", "#e2d639", "#2e9bbc", "#231f20", "#FFFFFF"], 2));
                sprite[SPRITE.BODY][SPRITE.SKIN2][SPRITE.NIGHT] = CTI (create_player (scale * 0.6,
                    ["#030d14", "#1f7455", "#166548", "#1c3638", "#2cbf72", "#ce1717", "#f471ac", "#e2d639", "#2e9bbc", "#231f20", "#FFFFFF"], 2));

                sprite[SPRITE.BODY][SPRITE.SKIN3][SPRITE.DAY]   = CTI (create_player (scale * 0.6,
                    ["#0d1b1c", "#cca423", "#ad8412", "#c69b20", "#c4232d", "#b1222a", "#231f20", "#FFFFFF"], 3));
                sprite[SPRITE.BODY][SPRITE.SKIN3][SPRITE.NIGHT] = CTI (create_player (scale * 0.6,
                    ["#030d14", "#2f7963", "#125442", "#236b56", "#1c4678", "#163d6b", "#15183f", "#FFFFFF"], 3));

                sprite[SPRITE.BODY][SPRITE.SKIN4][SPRITE.DAY]   = CTI (create_player (scale * 0.6,
                    ["#0d1b1c", "#e8ddc8", "#bfb8b0", "#de677e", "#d29f6c", "#231f20", "#FFFFFF"], 4));
                sprite[SPRITE.BODY][SPRITE.SKIN4][SPRITE.NIGHT] = CTI (create_player (scale * 0.6,
                    ["#030d14", "#106664", "#01333a", "#37214d", "#0a5554", "#15183f", "#FFFFFF"], 4));

                sprite[SPRITE.BODY][SPRITE.SKIN5][SPRITE.DAY]   = CTI (create_player (scale * 0.6,
                    ["#0d1b1c", "#ffffff", "#373737", "#231f20", "#ffffff", "#ff8b00", "#d18015"], 6));
                sprite[SPRITE.BODY][SPRITE.SKIN5][SPRITE.NIGHT] = CTI (create_player (scale * 0.6,
                    ["#030d14", "#157774", "#012328", "#15183f", "#ffffff", "#0c5d4e", "#0a4e42"], 6));

                sprite[SPRITE.BODY][SPRITE.SKIN6][SPRITE.DAY]   = CTI (create_player (scale * 0.6,
                    ["#0d1b1c", "#c4232d", "#b1222a", "#20a74f", "#1e914a", "#231f20", "#ffffff"], 7));
                sprite[SPRITE.BODY][SPRITE.SKIN6][SPRITE.NIGHT] = CTI (create_player (scale * 0.6,
                    ["#030d14", "#19386e", "#0b2752", "#124252", "#0d3441", "#15183f", "#ffffff"], 7));

                sprite[SPRITE.BODY][SPRITE.SKIN7][SPRITE.DAY]   = CTI (create_player (scale * 0.6,
                    ["#0d1b1c", "#9e793d", "#5f461f", "#93632a", "#9b7031", "#d32a3b", "#b1222a", "#f76969", "#231f20", "#ffffff"], 5));
                sprite[SPRITE.BODY][SPRITE.SKIN7][SPRITE.NIGHT] = CTI (create_player (scale * 0.6,
                    ["#030d14", "#19596e", "#104354", "#11495c", "#185a70", "#d32a3b", "#b1222a", "#f76969", "#15183f", "#ffffff"], 5));

                sprite[SPRITE.BODY][SPRITE.SKIN8][SPRITE.DAY]   = CTI (create_player (scale * 0.6,
                    ["#0d1b1c", "#ffffff", "#d6d6d6", "#000000", "#FFFFFF", "#ebdf42", "#c6b336"], 9));
                sprite[SPRITE.BODY][SPRITE.SKIN8][SPRITE.NIGHT] = CTI (create_player (scale * 0.6,
                    ["#030d14", "#167876", "#074e58", "#15183f", "#ffffff", "#2f7963", "#125442"], 9));
        */
        /* ne pas mettre cheminée sprite[SPRITE.BODY][SPRITE.SKIN8][SPRITE.DAY]   = CTI (create_player (scale * 0.6,
            ["#0d1b1c", "#7c694d", "#5f461f", "#c19f72", "#a58868", "#3cbf4f", "#30b252", "#d32f2f", "#b72323","#231f20", "#ffffff"], 9));
        sprite[SPRITE.BODY][SPRITE.SKIN8][SPRITE.NIGHT] = CTI (create_player (scale * 0.6,
            ["#030d14", "#204a58", "#173945", "#19485e", "#143b4e", "#1f7455", "#166548", "#19386e", "#0b2752", "#15183f", "#ffffff"], 9));
    */
        /*	sprite[SPRITE.BODY][SPRITE.SKIN9][SPRITE.DAY]   = CTI (create_player (scale * 0.6,
                ["#ccebf2", "#abc3d8", "#ccebf2", "#ffffff", "#231f20", "#ffffff"], 8));
            sprite[SPRITE.BODY][SPRITE.SKIN9][SPRITE.NIGHT] = CTI (create_player (scale * 0.6,
                ["#106664", "#1f8683", "#01333a", "#178280", "#15183f", "#ffffff"], 8));

            sprite[SPRITE.BODY][SPRITE.SKIN10][SPRITE.DAY]   = CTI (create_player (scale * 0.6,
            ["#0d1b1c", "#dff2f7", "#187484", "#231f20", "#ffffff"], 0));
            sprite[SPRITE.BODY][SPRITE.SKIN10][SPRITE.NIGHT] = CTI (create_player (scale * 0.6,
            ["#030d14", "#106664", "#01333a", "#15183f", "#ffffff"], 0));

            sprite[SPRITE.BODY][SPRITE.SKIN11][SPRITE.DAY]   = CTI (create_player (scale * 0.6,
            ["#0d1b1c", "#ffffff", "#bab7b1", "#231f20", "#ffffff", "#996f37", "#875d2b", "#ff8b00", "#d18015"], 1));
            sprite[SPRITE.BODY][SPRITE.SKIN11][SPRITE.NIGHT] = CTI (create_player (scale * 0.6,
            ["#030d14", "#157774", "#01333a", "#15183f", "#ffffff", "#0b5452", "#074543", "#0c5d4e", "#0a4e42"], 1));

            sprite[SPRITE.BODY][SPRITE.SKIN12][SPRITE.DAY]   = CTI (create_player (scale * 0.6,
            ["#0d1b1c", "#3fc445", "#33a02d", "#51604d", "#2cbf72", "#ce1717", "#f471ac", "#e2d639", "#2e9bbc", "#231f20", "#FFFFFF"], 2));
            sprite[SPRITE.BODY][SPRITE.SKIN12][SPRITE.NIGHT] = CTI (create_player (scale * 0.6,
            ["#030d14", "#1f7455", "#166548", "#1c3638", "#2cbf72", "#ce1717", "#f471ac", "#e2d639", "#2e9bbc", "#231f20", "#FFFFFF"], 2));

            sprite[SPRITE.BODY][SPRITE.SKIN13][SPRITE.DAY]   = CTI (create_player (scale * 0.6,
            ["#0d1b1c", "#cca423", "#ad8412", "#c69b20", "#c4232d", "#b1222a", "#231f20", "#FFFFFF"], 3));
            sprite[SPRITE.BODY][SPRITE.SKIN13][SPRITE.NIGHT] = CTI (create_player (scale * 0.6,
            ["#030d14", "#2f7963", "#125442", "#236b56", "#1c4678", "#163d6b", "#15183f", "#FFFFFF"], 3));

            sprite[SPRITE.BODY][SPRITE.SKIN14][SPRITE.DAY]   = CTI (create_player (scale * 0.6,
            ["#0d1b1c", "#e8ddc8", "#bfb8b0", "#de677e", "#d29f6c", "#231f20", "#FFFFFF"], 4));
            sprite[SPRITE.BODY][SPRITE.SKIN14][SPRITE.NIGHT] = CTI (create_player (scale * 0.6,
            ["#030d14", "#106664", "#01333a", "#37214d", "#0a5554", "#15183f", "#FFFFFF"], 4));

            sprite[SPRITE.BODY][SPRITE.SKIN15][SPRITE.DAY]   = CTI (create_player (scale * 0.6,
            ["#0d1b1c", "#ffffff", "#373737", "#231f20", "#ffffff", "#ff8b00", "#d18015"], 6));
            sprite[SPRITE.BODY][SPRITE.SKIN15][SPRITE.NIGHT] = CTI (create_player (scale * 0.6,
            ["#030d14", "#157774", "#012328", "#15183f", "#ffffff", "#0c5d4e", "#0a4e42"], 6));

            sprite[SPRITE.BODY][SPRITE.SKIN16][SPRITE.DAY]   = CTI (create_player (scale * 0.6,
            ["#0d1b1c", "#c4232d", "#b1222a", "#20a74f", "#1e914a", "#231f20", "#ffffff"], 7));
            sprite[SPRITE.BODY][SPRITE.SKIN16][SPRITE.NIGHT] = CTI (create_player (scale * 0.6,
            ["#030d14", "#19386e", "#0b2752", "#124252", "#0d3441", "#15183f", "#ffffff"], 7));

            sprite[SPRITE.BODY][SPRITE.SKIN17][SPRITE.DAY]   = CTI (create_player (scale * 0.6,
            ["#0d1b1c", "#9e793d", "#5f461f", "#93632a", "#9b7031", "#d32a3b", "#b1222a", "#f76969", "#231f20", "#ffffff"], 5));
            sprite[SPRITE.BODY][SPRITE.SKIN17][SPRITE.NIGHT] = CTI (create_player (scale * 0.6,
            ["#030d14", "#19596e", "#104354", "#11495c", "#185a70", "#d32a3b", "#b1222a", "#f76969", "#15183f", "#ffffff"], 5));

            sprite[SPRITE.BODY][SPRITE.SKIN18][SPRITE.DAY]   = CTI (create_player (scale * 0.6,
            ["#0d1b1c", "#ffffff", "#d6d6d6", "#000000", "#FFFFFF", "#ebdf42", "#c6b336"], 9));
            sprite[SPRITE.BODY][SPRITE.SKIN18][SPRITE.NIGHT] = CTI (create_player (scale * 0.6,
            ["#030d14", "#167876", "#074e58", "#15183f", "#ffffff", "#2f7963", "#125442"], 9));
    */
        /* ne pas mettre cheminée sprite[SPRITE.BODY][SPRITE.SKIN8][SPRITE.DAY]   = CTI (create_player (scale * 0.6,
        ["#0d1b1c", "#7c694d", "#5f461f", "#c19f72", "#a58868", "#3cbf4f", "#30b252", "#d32f2f", "#b72323","#231f20", "#ffffff"], 9));
        sprite[SPRITE.BODY][SPRITE.SKIN8][SPRITE.NIGHT] = CTI (create_player (scale * 0.6,
        ["#030d14", "#204a58", "#173945", "#19485e", "#143b4e", "#1f7455", "#166548", "#19386e", "#0b2752", "#15183f", "#ffffff"], 9));
        */
        /*      sprite[SPRITE.BODY][SPRITE.SKIN19][SPRITE.DAY]   = CTI (create_player (scale * 0.6,
                ["#ccebf2", "#abc3d8", "#ccebf2", "#ffffff", "#231f20", "#ffffff"], 8));
            sprite[SPRITE.BODY][SPRITE.SKIN19][SPRITE.NIGHT] = CTI (create_player (scale * 0.6,
                ["#106664", "#1f8683", "#01333a", "#178280", "#15183f", "#ffffff"], 8));
        */

    //WINTER
        /*sprite[SPRITE.HAND][SPRITE.SKIN0][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#dff2f7", "#187484"]));
        sprite[SPRITE.HAND][SPRITE.SKIN0][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#106664", "#01333a"]));

        sprite[SPRITE.HAND][SPRITE.SKIN1][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#ffffff", "#bab7b1"]));
        sprite[SPRITE.HAND][SPRITE.SKIN1][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#157774", "#01333a"]));

        sprite[SPRITE.HAND][SPRITE.SKIN2][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#3fc445", "#33a02d"]));
        sprite[SPRITE.HAND][SPRITE.SKIN2][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#1f7455", "#166548"]));

        sprite[SPRITE.HAND][SPRITE.SKIN3][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#cca423", "#ad8412"]));
        sprite[SPRITE.HAND][SPRITE.SKIN3][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#2f7963", "#125442"]));

        sprite[SPRITE.HAND][SPRITE.SKIN4][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#e8ddc8", "#bfb8b0"]));
        sprite[SPRITE.HAND][SPRITE.SKIN4][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#106664", "#01333a"]));

        sprite[SPRITE.HAND][SPRITE.SKIN5][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#231f20", "#373737"]));
        sprite[SPRITE.HAND][SPRITE.SKIN5][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#157774", "#012328"]));

        sprite[SPRITE.HAND][SPRITE.SKIN6][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#c4232d", "#b1222a"]));
        sprite[SPRITE.HAND][SPRITE.SKIN6][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#19386e", "#0b2752"]));

        sprite[SPRITE.HAND][SPRITE.SKIN7][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#9e793d", "#5f461f"]));
        sprite[SPRITE.HAND][SPRITE.SKIN7][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#19596e", "#104354"]));

        sprite[SPRITE.HAND][SPRITE.SKIN8][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#ffffff", "#d6d6d6"]));
        sprite[SPRITE.HAND][SPRITE.SKIN8][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#167876", "#074e58"]));
    */
        /* CHeminée sprite[SPRITE.HAND][SPRITE.SKIN8][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#7c694d", "#5f461f"]));
        sprite[SPRITE.HAND][SPRITE.SKIN8][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#204a58", "#173945"]));
    */
        /*	sprite[SPRITE.HAND][SPRITE.SKIN9][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, [ "rgba(170, 194, 215, 0.41)", "rgba(205, 235, 242, 0.4)"]));
            sprite[SPRITE.HAND][SPRITE.SKIN9][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["rgba(31, 134, 131, 0.41)", "rgba(1, 50, 57, 0.41)"]));

            sprite[SPRITE.HAND][SPRITE.SKIN10][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#dff2f7", "#187484"]));
            sprite[SPRITE.HAND][SPRITE.SKIN10][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#106664", "#01333a"]));

            sprite[SPRITE.HAND][SPRITE.SKIN11][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#ffffff", "#bab7b1"]));
            sprite[SPRITE.HAND][SPRITE.SKIN11][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#157774", "#01333a"]));

            sprite[SPRITE.HAND][SPRITE.SKIN12][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#3fc445", "#33a02d"]));
            sprite[SPRITE.HAND][SPRITE.SKIN12][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#1f7455", "#166548"]));

            sprite[SPRITE.HAND][SPRITE.SKIN13][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#cca423", "#ad8412"]));
            sprite[SPRITE.HAND][SPRITE.SKIN13][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#2f7963", "#125442"]));

            sprite[SPRITE.HAND][SPRITE.SKIN14][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#e8ddc8", "#bfb8b0"]));
            sprite[SPRITE.HAND][SPRITE.SKIN14][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#106664", "#01333a"]));

            sprite[SPRITE.HAND][SPRITE.SKIN15][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#231f20", "#373737"]));
            sprite[SPRITE.HAND][SPRITE.SKIN15][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#157774", "#012328"]));

            sprite[SPRITE.HAND][SPRITE.SKIN16][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#c4232d", "#b1222a"]));
            sprite[SPRITE.HAND][SPRITE.SKIN16][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#19386e", "#0b2752"]));

            sprite[SPRITE.HAND][SPRITE.SKIN17][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#9e793d", "#5f461f"]));
            sprite[SPRITE.HAND][SPRITE.SKIN17][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#19596e", "#104354"]));

            sprite[SPRITE.HAND][SPRITE.SKIN18][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#ffffff", "#d6d6d6"]));
            sprite[SPRITE.HAND][SPRITE.SKIN18][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#167876", "#074e58"]));
        */
        /* CHeminée sprite[SPRITE.HAND][SPRITE.SKIN8][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#7c694d", "#5f461f"]));
        sprite[SPRITE.HAND][SPRITE.SKIN8][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#204a58", "#173945"]));
    */
        /*	sprite[SPRITE.HAND][SPRITE.SKIN19][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, [ "rgba(170, 194, 215, 0.41)", "rgba(205, 235, 242, 0.4)"]));
            sprite[SPRITE.HAND][SPRITE.SKIN19][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["rgba(31, 134, 131, 0.41)", "rgba(1, 50, 57, 0.41)"]));
        */

        /*
            sprite[SPRITE.HAND][SPRITE.SKIN0][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#dff2f7", "#187484"]));
            sprite[SPRITE.HAND][SPRITE.SKIN0][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#106664", "#01333a"]));

            sprite[SPRITE.HAND][SPRITE.SKIN1][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#ace8ee", "#30aaaa"]));
            sprite[SPRITE.HAND][SPRITE.SKIN1][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#137d85", "#054954"]));

            sprite[SPRITE.HAND][SPRITE.SKIN2][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#e95e4b", "#cc3e2b"]));
            sprite[SPRITE.HAND][SPRITE.SKIN2][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#1f6774", "#1e5770"]));

            sprite[SPRITE.HAND][SPRITE.SKIN3][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#b271d5", "#9351b6"]));
            sprite[SPRITE.HAND][SPRITE.SKIN3][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#3e4c88", "#293561"]));

            sprite[SPRITE.HAND][SPRITE.SKIN4][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#f6a2d7", "#e072b8"]));
            sprite[SPRITE.HAND][SPRITE.SKIN4][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#37658a", "#184b5e"]));

            sprite[SPRITE.HAND][SPRITE.SKIN5][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#f0d189", "#aa7037"]));
            sprite[SPRITE.HAND][SPRITE.SKIN5][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#266778", "#074750"]));

            sprite[SPRITE.HAND][SPRITE.SKIN6][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#aeed5e", "#83c135"]));
            sprite[SPRITE.HAND][SPRITE.SKIN6][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#196e5e", "#0a5954"]));

            sprite[SPRITE.HAND][SPRITE.SKIN7][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#88f1b5", "#6dd599"]));
            sprite[SPRITE.HAND][SPRITE.SKIN7][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#196e66", "#0c554a"]));

            sprite[SPRITE.HAND][SPRITE.SKIN8][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#f9f6f6", "#dbdbdb"]));
            sprite[SPRITE.HAND][SPRITE.SKIN8][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#54878b", "#1f4959"]));

            sprite[SPRITE.HAND][SPRITE.SKIN9][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#f9ec7e", "#d0bc38"]));
            sprite[SPRITE.HAND][SPRITE.SKIN9][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#337c66", "#1d6e58"]));

        sprite[SPRITE.HAND][SPRITE.SKIN10][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#7e65c9", "#6541a0"]));
            sprite[SPRITE.HAND][SPRITE.SKIN10][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#3e4c88", "#293561"]));

        sprite[SPRITE.HAND][SPRITE.SKIN11][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#d7d7d7", "#858585"]));
            sprite[SPRITE.HAND][SPRITE.SKIN11][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#54878b", "#1f4959"]));

        sprite[SPRITE.HAND][SPRITE.SKIN12][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#91dda8", "#57b582"]));
            sprite[SPRITE.HAND][SPRITE.SKIN12][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#337c66", "#1d6e58"]));

        sprite[SPRITE.HAND][SPRITE.SKIN13][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#ddd191", "#c8aa6c"]));
            sprite[SPRITE.HAND][SPRITE.SKIN13][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#266778", "#074750"]));

        sprite[SPRITE.HAND][SPRITE.SKIN14][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#e8468b", "#c91864"]));
            sprite[SPRITE.HAND][SPRITE.SKIN14][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#1f6774", "#1e5770"]));

        sprite[SPRITE.HAND][SPRITE.SKIN15][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#fbfaca", "#a6ac33"]));
            sprite[SPRITE.HAND][SPRITE.SKIN15][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#337c66", "#1d6e58"]));

        sprite[SPRITE.HAND][SPRITE.SKIN16][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#4ddae1", "#36a3ab"]));
            sprite[SPRITE.HAND][SPRITE.SKIN16][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#137d85", "#054954"]));

        sprite[SPRITE.HAND][SPRITE.SKIN17][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#7084be", "#526d8f"]));
            sprite[SPRITE.HAND][SPRITE.SKIN17][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#3e4c88", "#293561"]));

        sprite[SPRITE.HAND][SPRITE.SKIN18][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#a7cb63", "#89a041"]));
            sprite[SPRITE.HAND][SPRITE.SKIN18][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#196e5e", "#0a5954"]));

        sprite[SPRITE.HAND][SPRITE.SKIN19][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#7a67ba", "#67528f"]));
            sprite[SPRITE.HAND][SPRITE.SKIN19][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#3e4c88", "#293561"]));

        */



        /*PACQUES*/
        //sprite[SPRITE.HAND][SPRITE.SKIN0][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#dff2f7", "#187484"/*pacques"#dff2f7", "#187484"*/]));
        //sprite[SPRITE.HAND][SPRITE.SKIN0][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#106664", "#01333a"/*pacques "#106664", "#01333a"*/]));

        //sprite[SPRITE.HAND][SPRITE.SKIN1][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#f9eb80", "#c2b852"/*pacques "#fe9eac", "#ea8397"*/]));
        //sprite[SPRITE.HAND][SPRITE.SKIN1][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#1b8974", "#167c5c"/*pacques "#1b8974", "#167c5c"*/]));

        //sprite[SPRITE.HAND][SPRITE.SKIN2][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#ace9ee", "#439f9d"/*pacques "#4fcdd9", "#26afb5"*/]));
        //sprite[SPRITE.HAND][SPRITE.SKIN2][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#239396", "#16707f"/*pacques "#1c848c", "#16707f"*/]));

        //sprite[SPRITE.HAND][SPRITE.SKIN3][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#e95f4b", "#d13e29"/*pacques "#4fdda5", "#40cc90"*/]));
        //sprite[SPRITE.HAND][SPRITE.SKIN3][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#1c5b77", "#0b4f5e"/*pacques "#1b8974", "#167c5c"*/]));

        //sprite[SPRITE.HAND][SPRITE.SKIN4][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#f9eb80", "#c2b852"/*pacques "#f76559", "#d64c3e"*/]));
        //sprite[SPRITE.HAND][SPRITE.SKIN4][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#1b8974", "#167c5c"/*pacques "#1c5b77", "#0b4f5e"*/]));

        //sprite[SPRITE.HAND][SPRITE.SKIN5][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#f1d18a", "#ac713a"/*pacques "#d0a2d1", "#b785ba"*/]));
        //sprite[SPRITE.HAND][SPRITE.SKIN5][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#1b8974", "#146d4f"/*pacques "#24617f", "#0d5568"*/]));

        //sprite[SPRITE.HAND][SPRITE.SKIN6][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#e95f4b", "#d13e29"/*pacques "#d0a2d1", "#b785ba"*/]));
        //sprite[SPRITE.HAND][SPRITE.SKIN6][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#1c5b77", "#0b4f5e"/*pacques "#24617f", "#0d5568"*/]));

        //sprite[SPRITE.HAND][SPRITE.SKIN7][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#b272d5", "#8552a3"/*pacques "#f9c758", "#d8af3d"*/]));
        //sprite[SPRITE.HAND][SPRITE.SKIN7][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#24617f", "#0d5568"/*pacques "#1b8974", "#167c5c"*/]));

        //sprite[SPRITE.HAND][SPRITE.SKIN8][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#aeec5f", "#83c037"/*pacques "#ef96be", "#ffffff"*/]));
        //sprite[SPRITE.HAND][SPRITE.SKIN8][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#1b8749", "#167c5c"/*pacques "#4d1b59", "#5d3f77"*/]));

        //sprite[SPRITE.HAND][SPRITE.SKIN9][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#f6a2d7", "#cf7db0"/*pacques "#d0a2d1", "#b785ba"*/]));
        //sprite[SPRITE.HAND][SPRITE.SKIN9][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#1b687a", "#0d5568"/*pacques "#24617f", "#0d5568"*/]));

        //sprite[SPRITE.HAND][SPRITE.SKIN10][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#fe9eac", "#ea8397"/*pacques "#bd70e5", "#b64bbf"*/]));
        //sprite[SPRITE.HAND][SPRITE.SKIN10][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#1b687a", "#0d5568"/*pacques "#4d1b59", "#5d3f77"*/]));

        //sprite[SPRITE.HAND][SPRITE.SKIN11][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#88f1b4", "#69b78b"/*pacques "#4fcdd9", "#26afb5"*/]));
        //sprite[SPRITE.HAND][SPRITE.SKIN11][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#2aa089", "#1f8c68"/*pacques "#1c848c", "#16707f"*/]));

        //sprite[SPRITE.HAND][SPRITE.SKIN12][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#bd70e5", "#b64bbf"/*pacques "#fe9eac", "#ea8397"*/]));
        //sprite[SPRITE.HAND][SPRITE.SKIN12][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#24617f", "#0d5568"/*pacques "#1b687a", "#0d5568"*/]));

        //sprite[SPRITE.HAND][SPRITE.SKIN13][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#f6a2d7", "#cf7db0"/*pacques "#fe9eac", "#ea8397"*/]));
        //sprite[SPRITE.HAND][SPRITE.SKIN13][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#1b687a", "#0d5568"/*pacques "#1b687a", "#0d5568"*/]));

        //sprite[SPRITE.HAND][SPRITE.SKIN14][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#4fdda5", "#40cc90"/*pacques "#f9c758", "#d8af3d"*/]));
        //sprite[SPRITE.HAND][SPRITE.SKIN14][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#2aa089", "#1f8c68"/*pacques "#1b8974", "#167c5c"*/]));

        //sprite[SPRITE.HAND][SPRITE.SKIN15][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#4fcdd9", "#26afb5"/*pacques "#4fcdd9", "#26afb5"*/]));
        //sprite[SPRITE.HAND][SPRITE.SKIN15][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#1c848c", "#16707f"/*pacques "#1c848c", "#16707f"*/]));

        //sprite[SPRITE.HAND][SPRITE.SKIN16][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#f9c758", "#d8af3d"/*pacques "#c36fc9", "#b785ba"*/]));
        //sprite[SPRITE.HAND][SPRITE.SKIN16][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#1b8974", "#167c5c"/*pacques "#24617f", "#0d5568"*/]));

        //sprite[SPRITE.HAND][SPRITE.SKIN17][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#eae5e8", "#c9c5c7"/*pacques "#61bb75", "#049e58"*/]));
        //sprite[SPRITE.HAND][SPRITE.SKIN17][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#34a5a5", "#16707f"/*pacques "#1b8977", "#167c69"*/]));

        //sprite[SPRITE.HAND][SPRITE.SKIN18][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#4fcdd9", "#26afb5"/*pacques "#d0a2d1", "#b785ba"*/]));
        //sprite[SPRITE.HAND][SPRITE.SKIN18][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#1c848c", "#16707f"/*pacques "#24617f", "#0d5568"*/]));

        //sprite[SPRITE.HAND][SPRITE.SKIN19][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#f8f6f7", "#dadada"/*pacques "#4fcdd9", "#26afb5"*/]));
        //sprite[SPRITE.HAND][SPRITE.SKIN19][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#34a5a5", "#16707f"/*pacques "#1c848c", "#16707f"*/]));
    /*PACQUES END*/

        sprite[SPRITE.HAND_SHADOW]               = [];
        sprite[SPRITE.HAND_SHADOW][SPRITE.DAY]   = CTI (create_hand_shadow (scale * 0.6, ["#0d1b1c"]));
        sprite[SPRITE.HAND_SHADOW][SPRITE.NIGHT] = CTI (create_hand_shadow (scale * 0.6, ["#030d14"]));

        sprite[SPRITE.GLOVES_HOOD] = [];
        sprite[SPRITE.GLOVES_HOOD][SPRITE.DAY] = CTI (create_hand (scale * 0.6, ["#2a2938", "#242330"]));
        sprite[SPRITE.GLOVES_HOOD][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#1b1e30", "#161921"]));
    /*
        sprite[SPRITE.BODY][WORLD.VAMPIRE_SKIN][SPRITE.DAY]   = CTI (create_player_halloween (scale * 0.6,
            ["#0d1b1c", "#ffffff", "#818181", "#272626", "#010101", "#b9222b", "#a72027", "#ffffff"], 6));
        sprite[SPRITE.BODY][WORLD.VAMPIRE_SKIN][SPRITE.NIGHT] = CTI (create_player_halloween (scale * 0.6,
            ["#030d14", "#10706e", "#034752", "#171725", "#040809", "#37183e", "#401d49", "#ffffff"], 61));

        sprite[SPRITE.BODY][WORLD.ZOMBIE_SKIN][SPRITE.DAY]   = CTI (create_player_halloween (scale * 0.6,
            ["#0d1b1c", "#759e6e", "#55604b", "#f9ccd4", "#891a1e", "#da232e", "#a52026", "#a02d28", "#721819", "#FFFFFF"], 7));
        sprite[SPRITE.BODY][WORLD.ZOMBIE_SKIN][SPRITE.NIGHT] = CTI (create_player_halloween (scale * 0.6,
            ["#030d14", "#11635e", "#02373e", "#167771", "#0c5752", "#401d49", "#2e1336", "#261336", "#23163c", "#FFFFFF"], 7));

    sprite[SPRITE.BODY][WORLD.ROBOT_SKIN][SPRITE.DAY]   = CTI (create_robotskin (scale * 0.4,
        ["#0d1b1c", "#809a9b", "#617272", "#6a8586", "#738e91", "#8fa6a7", "#38595a", "#2f4241", "#ffffff"], 7));
    sprite[SPRITE.BODY][WORLD.ROBOT_SKIN][SPRITE.NIGHT] = CTI (create_robotskin (scale * 0.4,
            ["#030d14", "#324d61", "#233846", "#244457", "#234257", "#315367", "#172c41", "#161b20", "#ffffff"], 7));

        sprite[SPRITE.HAND][WORLD.VAMPIRE_SKIN][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#ffffff", "#818181"]));
        sprite[SPRITE.HAND][WORLD.VAMPIRE_SKIN][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#10706e", "#034752"]));

        sprite[SPRITE.HAND][WORLD.ZOMBIE_SKIN][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#759e6e", "#55604b"]));
        sprite[SPRITE.HAND][WORLD.ZOMBIE_SKIN][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#11635e", "#02373e"]));

    sprite[SPRITE.HAND][WORLD.ROBOT_SKIN][SPRITE.DAY]   = CTI (create_hand (scale * 0.6, ["#809a9b", "#617272"]));
        sprite[SPRITE.HAND][WORLD.ROBOT_SKIN][SPRITE.NIGHT] = CTI (create_hand (scale * 0.6, ["#324d61", "#233846"]));
    */
        sprite[SPRITE.ZOMBIE_BODY] = [];
        sprite[SPRITE.ZOMBIE_BODY][SPRITE.DAY] = CTI (create_zombie_boss (scale * 0.6, true, ["#0d1b1c", "#759e6e", "#55604b", "#7d7252", "#575043"]));
        sprite[SPRITE.ZOMBIE_BODY][SPRITE.NIGHT] = CTI (create_zombie_boss (scale * 0.6, true, ["#030d14", "#11635e", "#02373e", "#0b524d", "#07423f"]));

        sprite[SPRITE.ZOMBIE_HEAD] = [];
        sprite[SPRITE.ZOMBIE_HEAD][SPRITE.DAY] = CTI (create_zombie_head (scale * 0.6, true, ["#0d1b1c", "#759e6e", "#55604b", "#f9ccd4", "#891a1e", "#da232e", "#a52026", "#a02d28", "#721819", "#FFFFFF"]));
        sprite[SPRITE.ZOMBIE_HEAD][SPRITE.NIGHT] = CTI (create_zombie_head (scale * 0.6, true, ["#030d14", "#11635e", "#02373e", "#167771", "#0c5752", "#401d49", "#2e1336", "#261336", "#23163c", "#FFFFFF"]));

        sprite[SPRITE.ZOMBIE_HAND] = [];
        sprite[SPRITE.ZOMBIE_HAND][SPRITE.DAY] = CTI (create_zombie_hand (scale * 0.4, ["#0d1b1c", "#759e6e", "#55604b"]));
        sprite[SPRITE.ZOMBIE_HAND][SPRITE.NIGHT] = CTI (create_zombie_hand (scale * 0.4, ["#030d14", "#11635e", "#02373e"]));

        sprite[SPRITE.ZOMBIE_HURT]   = CTI (create_zombie_hurt (scale * 0.6, ["#BB0000"]));
        sprite[SPRITE.ZOMBIE_HUNGER] = CTI (create_zombie_hurt (scale * 0.6, ["#DBE71C"]));
        sprite[SPRITE.ZOMBIE_HEAL]   = CTI (create_zombie_hurt (scale * 0.6, ["#00BB00"]));

        sprite[SPRITE.TREE]               = [];
        sprite[SPRITE.TREE][SPRITE.DAY]   = [];
        sprite[SPRITE.TREE][SPRITE.NIGHT] = [];
        sprite[SPRITE.TREE][SPRITE.DAY].push  (create_apricot_tree (scale * 1.1,
            ["#13402d", "#0f9862", "#0b8750", "#26ab6e"]/*["#0e3022", "#0c8e5b", "#037542", "#209e64"]*//* ["#242503","#8e7c0c","#6d5903","#9e8320","#f0f4f0", "#FFFFFF"] */, false, 0));
                                                                                    /*create_fir_three (scale * 1.3,
            ["#0a2d18", "#124c34", "#227248", "#ccedd9", "#2d7a55", "#3c9660", "#afddc1", "#bbefd0", "#0a2d18", "#e4efe8"]));*/
        sprite[SPRITE.TREE][SPRITE.DAY].push (create_apricot_tree (scale * 1.1,
            ["#0e3022", "#0f9862", "#0b8750", "#26ab6e"]/* ["#242503","#8e7c0c","#6d5903","#9e8320", "#f0f4f0", "#FFFFFF"] */, true, 0));

        sprite[SPRITE.TREE][SPRITE.DAY].push (create_apricot_tree (scale * 0.9,
            ["#0e3022", "#0e7d4c", "#258a4d", "#248c4d"]/* ["#242503","#898e0c","#757303","#9e9b20", "#f0f4f0", "#FFFFFF"] */, false, 0));

        sprite[SPRITE.TREE][SPRITE.DAY].push (create_apricot_tree (scale * 0.9,
            ["#0e3022", "#096d41", "#1f7b43", "#1f7b43"]/* ["#242503", "#963400","#7c2200","#a83204", "#f0f4f0", "#FFFFFF"] */, true, 0));

        sprite[SPRITE.TREE][SPRITE.DAY].push (create_apricot_tree (scale * 0.7,
            ["#0e3022","#124c34", "#0E3D26", "#155136"]/* ["#242503", "#6d5a09", "#77591a", "#7b5a1f", "#f0f4f0", "#FFFFFF"] */, false, 0));

        sprite[SPRITE.TREE][SPRITE.DAY].push (create_apricot_tree (scale * 0.7,
            ["#0e3022","#124c34", "#0E3D26", "#155136"]/* ["#242503", "#703700","#813009","#813009", "#f0f4f0", "#FFFFFF"] */, true, 0));

        sprite[SPRITE.TREE][SPRITE.NIGHT].push (create_apricot_tree (scale * 1.1,
            ["#030d14", "#124949", "#0e3838", "#15514f"]/* ["#030d14", "#12493d", "#0e3831", "#155247", "#f0f4f0", "#16695f"] */, false, 0));

        sprite[SPRITE.TREE][SPRITE.NIGHT].push (create_apricot_tree (scale * 1.1,
            ["#030d14", "#124949", "#0e3838", "#15514f"]/* ["#030d14", "#12493d", "#0e3831", "#155247", "#16695f"] */, true, 0));

        sprite[SPRITE.TREE][SPRITE.NIGHT].push (create_apricot_tree (scale * 0.9,
            ["#030d14", "#0b3534", "#144443", "#174240"]/* ["#030d14", "#0b3629", "#144437", "#174235", "#16695f"] */, false, 0));

        sprite[SPRITE.TREE][SPRITE.NIGHT].push (create_apricot_tree (scale * 0.9,
            ["#030d14", "#0b3534", "#144443", "#174240"]/* ["#030d14", "#0d2522", "#0c2821", "#0d2a28", "#16695f"] */, true, 0));

        sprite[SPRITE.TREE][SPRITE.NIGHT].push (create_apricot_tree (scale * 0.7,
            ["#030d14", "#082b29", "#073332", "#073332"]/* ["#030d14", "#082b1f", "#073328", "#073327", "#16695f"] */, false, 0));

        sprite[SPRITE.TREE][SPRITE.NIGHT].push (create_apricot_tree (scale * 0.7,
            ["#030d14", "#082b29", "#073332", "#073332"]/* ["#030d14", "#0c2823", "#0b2b23", "#0c2d24", "#16695f"] */, true, 0));

        sprite[SPRITE.TREE_BRANCH] = [];
        sprite[SPRITE.TREE_BRANCH][SPRITE.DAY]   = [];
        sprite[SPRITE.TREE_BRANCH][SPRITE.NIGHT] = [];
        sprite[SPRITE.TREE_BRANCH][SPRITE.DAY].push (CTI (create_apricot_forest (create_tree_branch (scale * 1.1,
            ["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"]/* ["#242503","#4d2d14", "#432516", "#756608","#5b4a02","#8b731b"] */, false),
            sprite[SPRITE.TREE][SPRITE.DAY][0])));
        sprite[SPRITE.TREE_BRANCH][SPRITE.DAY].push (CTI (create_apricot_forest  (create_tree_branch (scale * 1.1,
            ["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"]/* ["#242503","#4d2d14", "#432516", "#756608","#5b4a02","#8b731b"] */, true),
            sprite[SPRITE.TREE][SPRITE.DAY][1])));
        sprite[SPRITE.TREE_BRANCH][SPRITE.NIGHT].push (CTI (create_apricot_forest (create_tree_branch (scale * 1.1,
            ["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"]/*["#030d14", "#031619", "#041c21", "#0e3b31", "#0b2e28", "#10443a"]*/, false),
            sprite[SPRITE.TREE][SPRITE.NIGHT][0])));
        sprite[SPRITE.TREE_BRANCH][SPRITE.NIGHT].push (CTI (create_apricot_forest (create_tree_branch (scale * 1.1,
            ["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"]/*["#030d14", "#031619", "#041c21", "#0e3b31", "#0b2e28", "#10443a"]*/, true),
            sprite[SPRITE.TREE][SPRITE.NIGHT][1])));

        sprite[SPRITE.TREE_BRANCH][SPRITE.DAY].push (CTI (create_apricot_forest (create_tree_branch (scale * 0.9,
            ["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"]/*["#242503","#4d2d14", "#432516", "#6d6c09","#686609","#777310"]*/, false),
            sprite[SPRITE.TREE][SPRITE.DAY][2])));
        sprite[SPRITE.TREE_BRANCH][SPRITE.DAY].push (CTI (create_apricot_forest (create_tree_branch (scale * 0.9,
            ["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"]/*["#242503","#4d2d14", "#432516", "#6d6c09","#686609","#777310"]*/, true),
            sprite[SPRITE.TREE][SPRITE.DAY][2])));
        sprite[SPRITE.TREE_BRANCH][SPRITE.NIGHT].push (CTI (create_apricot_forest (create_tree_branch (scale * 0.9,
            ["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"]/*["#030d14", "#031619", "#041c21",  "#0d2522", "#0c2821", "#0d2a28"]*/, false),
            sprite[SPRITE.TREE][SPRITE.NIGHT][2])));
        sprite[SPRITE.TREE_BRANCH][SPRITE.NIGHT].push (CTI (create_apricot_forest  (create_tree_branch (scale * 0.9,
                ["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"]/*["#030d14", "#031619", "#041c21", "#0c2823", "#0b2b23", "#0c2d24"]*/, true),
            sprite[SPRITE.TREE][SPRITE.NIGHT][3])));


        sprite[SPRITE.TREE][SPRITE.DAY][5]   = CTI (sprite[SPRITE.TREE][SPRITE.DAY][5]);
        sprite[SPRITE.TREE][SPRITE.DAY][4]   = CTI (sprite[SPRITE.TREE][SPRITE.DAY][4]);
        sprite[SPRITE.TREE][SPRITE.DAY][3]   = CTI (sprite[SPRITE.TREE][SPRITE.DAY][3]);
        sprite[SPRITE.TREE][SPRITE.DAY][2]   = CTI (sprite[SPRITE.TREE][SPRITE.DAY][2]);
        sprite[SPRITE.TREE][SPRITE.DAY][1]   = CTI (sprite[SPRITE.TREE][SPRITE.DAY][1]);
        sprite[SPRITE.TREE][SPRITE.DAY][0]   = CTI (sprite[SPRITE.TREE][SPRITE.DAY][0]);
        sprite[SPRITE.TREE][SPRITE.NIGHT][5] = CTI (sprite[SPRITE.TREE][SPRITE.NIGHT][5]);
        sprite[SPRITE.TREE][SPRITE.NIGHT][4] = CTI (sprite[SPRITE.TREE][SPRITE.NIGHT][4]);
        sprite[SPRITE.TREE][SPRITE.NIGHT][3] = CTI (sprite[SPRITE.TREE][SPRITE.NIGHT][3]);
        sprite[SPRITE.TREE][SPRITE.NIGHT][2] = CTI (sprite[SPRITE.TREE][SPRITE.NIGHT][2]);
        sprite[SPRITE.TREE][SPRITE.NIGHT][1] = CTI (sprite[SPRITE.TREE][SPRITE.NIGHT][1]);
        sprite[SPRITE.TREE][SPRITE.NIGHT][0] = CTI (sprite[SPRITE.TREE][SPRITE.NIGHT][0]);

        /*WINTER*/
        //sprite[SPRITE.TREE_SNOW1]               = [];
        //sprite[SPRITE.TREE_SNOW1][SPRITE.DAY]   = [];
        //sprite[SPRITE.TREE_SNOW1][SPRITE.NIGHT] = [];
        //sprite[SPRITE.TREE_SNOW1][SPRITE.DAY].push  (CTI (create_apricot_tree (scale * 1.1,
        ///*["#0e3022", "#0c8e5b", "#037542", "#209e64"]*/["#242503","#8e7c0c","#6d5903","#9e8320", "#FFFFFF"], false, 3)));
        //sprite[SPRITE.TREE_SNOW1][SPRITE.DAY].push (CTI (create_apricot_tree (scale * 1.1,
        ///*["#0e3022", "#0c8e5b", "#037542", "#209e64"]*/["#242503","#8e7c0c","#6d5903","#9e8320", "#FFFFFF"], true, 1)));

        //sprite[SPRITE.TREE_SNOW1][SPRITE.DAY].push (CTI (create_apricot_tree (scale * 0.9,
        ///*["#0e3022", "#096d41", "#1f7b43", "#1f7b43"]*/["#242503","#898e0c","#757303","#9e9b20", "#FFFFFF"], false, 3)));
        //sprite[SPRITE.TREE_SNOW1][SPRITE.DAY].push (CTI (create_apricot_tree (scale * 0.9,
        ///*["#0e3022", "#096d41", "#1f7b43", "#1f7b43"]*/["#242503", "#963400","#7c2200","#a83204", "#FFFFFF"], true, 3)));

        //sprite[SPRITE.TREE_SNOW1][SPRITE.DAY].push (CTI (create_apricot_tree (scale * 0.7,
        ///*["#0e3022","#124c34", "#0E3D26", "#155136"]*/["#242503", "#6d5a09", "#77591a", "#7b5a1f", "#FFFFFF"], false, 3)));
        //sprite[SPRITE.TREE_SNOW1][SPRITE.DAY].push (CTI (create_apricot_tree (scale * 0.7,
        ///*["#0e3022","#124c34", "#0E3D26", "#155136"]*/["#242503", "#703700","#813009","#813009", "#FFFFFF"], true, 3)));

        //sprite[SPRITE.TREE_SNOW1][SPRITE.NIGHT].push (CTI (create_apricot_tree (scale * 1.1,
        ///*["#030d14", "#124949", "#0e3838", "#15514f"]*/["#030d14", "#12493d", "#0e3831", "#155247", "#16695f"], false, 3)));
        //sprite[SPRITE.TREE_SNOW1][SPRITE.NIGHT].push (CTI (create_apricot_tree (scale * 1.1,
        ///*["#030d14", "#124949", "#0e3838", "#15514f"]*/["#030d14", "#12493d", "#0e3831", "#155247", "#16695f"], true, 3)));

        //sprite[SPRITE.TREE_SNOW1][SPRITE.NIGHT].push (CTI (create_apricot_tree (scale * 0.9,
        ///*["#030d14", "#0b3534", "#144443", "#174240"]*/["#030d14", "#0b3629", "#144437", "#174235", "#16695f"], false, 3)));
        //sprite[SPRITE.TREE_SNOW1][SPRITE.NIGHT].push (CTI (create_apricot_tree (scale * 0.9,
        ///*["#030d14", "#0b3534", "#144443", "#174240"]*/["#030d14", "#0d2522", "#0c2821", "#0d2a28", "#16695f"], true, 3)));

        //sprite[SPRITE.TREE_SNOW1][SPRITE.NIGHT].push (CTI (create_apricot_tree (scale * 0.7,
        ///*["#030d14", "#082b29", "#073332", "#073332"]*/["#030d14", "#082b1f", "#073328", "#073327", "#16695f"], false, 3)));
        //sprite[SPRITE.TREE_SNOW1][SPRITE.NIGHT].push (CTI (create_apricot_tree (scale * 0.7,
        ///*["#030d14", "#082b29", "#073332", "#073332"]*/["#030d14", "#0c2823", "#0b2b23", "#0c2d24", "#16695f"], true, 3)));

        //sprite[SPRITE.TREE_BRANCH_SNOW1] = [];
        //sprite[SPRITE.TREE_BRANCH_SNOW1][SPRITE.DAY]   = [];
        //sprite[SPRITE.TREE_BRANCH_SNOW1][SPRITE.NIGHT] = [];
        //sprite[SPRITE.TREE_BRANCH_SNOW1][SPRITE.DAY].push (CTI (create_apricot_forest (create_tree_branch (scale * 1.1,
        ///*["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"]*/["#242503","#4d2d14", "#432516", "#756608","#5b4a02","#8b731b"], false, 3),
        //sprite[SPRITE.TREE_SNOW1][SPRITE.DAY][0])));
        //sprite[SPRITE.TREE_BRANCH_SNOW1][SPRITE.DAY].push (CTI (create_apricot_forest  (create_tree_branch (scale * 1.1,
        ///*["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"]*/["#242503","#4d2d14", "#432516", "#756608","#5b4a02","#8b731b"], true, 3),
        //sprite[SPRITE.TREE_SNOW1][SPRITE.DAY][1])));
        //sprite[SPRITE.TREE_BRANCH_SNOW1][SPRITE.NIGHT].push (CTI (create_apricot_forest (create_tree_branch (scale * 1.1,
        ///*["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"]*/["#030d14", "#031619", "#041c21", "#0e3b31", "#0b2e28", "#10443a"], false, 3),
        //sprite[SPRITE.TREE_SNOW1][SPRITE.NIGHT][0])));
        //sprite[SPRITE.TREE_BRANCH_SNOW1][SPRITE.NIGHT].push (CTI (create_apricot_forest (create_tree_branch (scale * 1.1,
        ///*["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"]*/["#030d14", "#031619", "#041c21", "#0e3b31", "#0b2e28", "#10443a"], true, 3),
        //sprite[SPRITE.TREE_SNOW1][SPRITE.NIGHT][1])));

        //sprite[SPRITE.TREE_BRANCH_SNOW1][SPRITE.DAY].push (CTI (create_apricot_forest (create_tree_branch (scale * 0.9,
        ///*["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"]*/["#242503","#4d2d14", "#432516", "#6d6c09","#686609","#777310"], false, 3),
        //sprite[SPRITE.TREE_SNOW1][SPRITE.DAY][2])));
        //sprite[SPRITE.TREE_BRANCH_SNOW1][SPRITE.DAY].push (CTI (create_apricot_forest (create_tree_branch (scale * 0.9,
        ///*["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"]*/["#242503","#4d2d14", "#432516", "#6d6c09","#686609","#777310"], true, 3),
        //sprite[SPRITE.TREE_SNOW1][SPRITE.DAY][2])));
        //sprite[SPRITE.TREE_BRANCH_SNOW1][SPRITE.NIGHT].push (CTI (create_apricot_forest (create_tree_branch (scale * 0.9,
        ///*["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"]*/["#030d14", "#031619", "#041c21",  "#0d2522", "#0c2821", "#0d2a28"], false, 3),
        //sprite[SPRITE.TREE_SNOW1][SPRITE.NIGHT][2])));
        //sprite[SPRITE.TREE_BRANCH_SNOW1][SPRITE.NIGHT].push (CTI (create_apricot_forest  (create_tree_branch (scale * 0.9,
        ///*["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"]*/["#030d14", "#031619", "#041c21", "#0c2823", "#0b2b23", "#0c2d24"], true, 3),
        //sprite[SPRITE.TREE_SNOW1][SPRITE.NIGHT][3])));

        //sprite[SPRITE.TREE_SNOW2]               = [];
        //sprite[SPRITE.TREE_SNOW2][SPRITE.DAY]   = [];
        //sprite[SPRITE.TREE_SNOW2][SPRITE.NIGHT] = [];
        //sprite[SPRITE.TREE_SNOW2][SPRITE.DAY].push  (CTI (create_apricot_tree (scale * 1.1,
        ///*["#0e3022", "#0c8e5b", "#037542", "#209e64"]*/["#242503","#8e7c0c","#6d5903","#9e8320", "#FFFFFF"], false, 4)));
        //sprite[SPRITE.TREE_SNOW2][SPRITE.DAY].push (CTI (create_apricot_tree (scale * 1.1,
        ///*["#0e3022", "#0c8e5b", "#037542", "#209e64"]*/["#242503","#8e7c0c","#6d5903","#9e8320", "#FFFFFF"], true, 4)));

        //sprite[SPRITE.TREE_SNOW2][SPRITE.DAY].push (CTI (create_apricot_tree (scale * 0.9,
        ///*["#0e3022", "#096d41", "#1f7b43", "#1f7b43"]*/["#242503","#898e0c","#757303","#9e9b20", "#FFFFFF"], false, 4)));
        //sprite[SPRITE.TREE_SNOW2][SPRITE.DAY].push (CTI (create_apricot_tree (scale * 0.9,
        ///*["#0e3022", "#096d41", "#1f7b43", "#1f7b43"]*/["#242503", "#963400","#7c2200","#a83204", "#FFFFFF"], true, 4)));

        //sprite[SPRITE.TREE_SNOW2][SPRITE.DAY].push (CTI (create_apricot_tree (scale * 0.7,
        ///*["#0e3022","#124c34", "#0E3D26", "#155136"]*/["#242503", "#6d5a09", "#77591a", "#7b5a1f", "#FFFFFF"], false, 4)));
        //sprite[SPRITE.TREE_SNOW2][SPRITE.DAY].push (CTI (create_apricot_tree (scale * 0.7,
        ///*["#0e3022","#124c34", "#0E3D26", "#155136"]*/["#242503", "#703700","#813009","#813009", "#FFFFFF"], true, 4)));

        //sprite[SPRITE.TREE_SNOW2][SPRITE.NIGHT].push (CTI (create_apricot_tree (scale * 1.1,
        ///*["#030d14", "#124949", "#0e3838", "#15514f"]*/["#030d14", "#12493d", "#0e3831", "#155247", "#16695f"], false, 4)));
        //sprite[SPRITE.TREE_SNOW2][SPRITE.NIGHT].push (CTI (create_apricot_tree (scale * 1.1,
        ///*["#030d14", "#124949", "#0e3838", "#15514f"]*/["#030d14", "#12493d", "#0e3831", "#155247", "#16695f"], true, 4)));

        //sprite[SPRITE.TREE_SNOW2][SPRITE.NIGHT].push (CTI (create_apricot_tree (scale * 0.9,
        ///*["#030d14", "#0b3534", "#144443", "#174240"]*/["#030d14", "#0b3629", "#144437", "#174235", "#16695f"], false, 4)));
        //sprite[SPRITE.TREE_SNOW2][SPRITE.NIGHT].push (CTI (create_apricot_tree (scale * 0.9,
        ///*["#030d14", "#0b3534", "#144443", "#174240"]*/["#030d14", "#0d2522", "#0c2821", "#0d2a28", "#16695f"], true, 4)));

        //sprite[SPRITE.TREE_SNOW2][SPRITE.NIGHT].push (CTI (create_apricot_tree (scale * 0.7,
        ///*["#030d14", "#082b29", "#073332", "#073332"]*/["#030d14", "#082b1f", "#073328", "#073327", "#16695f"], false, 4)));
        //sprite[SPRITE.TREE_SNOW2][SPRITE.NIGHT].push (CTI (create_apricot_tree (scale * 0.7,
        ///*["#030d14", "#082b29", "#073332", "#073332"]*/["#030d14", "#0c2823", "#0b2b23", "#0c2d24", "#16695f"], true, 4)));

        //sprite[SPRITE.TREE_BRANCH_SNOW2] = [];
        //sprite[SPRITE.TREE_BRANCH_SNOW2][SPRITE.DAY]   = [];
        //sprite[SPRITE.TREE_BRANCH_SNOW2][SPRITE.NIGHT] = [];
        //sprite[SPRITE.TREE_BRANCH_SNOW2][SPRITE.DAY].push (CTI (create_apricot_forest (create_tree_branch (scale * 1.1,
        ///*["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"]*/["#242503","#4d2d14", "#432516", "#756608","#5b4a02","#8b731b"], false),
        //sprite[SPRITE.TREE_SNOW2][SPRITE.DAY][0])));
        //sprite[SPRITE.TREE_BRANCH_SNOW2][SPRITE.DAY].push (CTI (create_apricot_forest  (create_tree_branch (scale * 1.1,
        ///*["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"]*/["#242503","#4d2d14", "#432516", "#756608","#5b4a02","#8b731b"], true),
        //sprite[SPRITE.TREE_SNOW2][SPRITE.DAY][1])));
        //sprite[SPRITE.TREE_BRANCH_SNOW2][SPRITE.NIGHT].push (CTI (create_apricot_forest (create_tree_branch (scale * 1.1,
        ///*["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"]*/["#030d14", "#031619", "#041c21", "#0e3b31", "#0b2e28", "#10443a"], false),
        //sprite[SPRITE.TREE_SNOW2][SPRITE.NIGHT][0])));
        //sprite[SPRITE.TREE_BRANCH_SNOW2][SPRITE.NIGHT].push (CTI (create_apricot_forest (create_tree_branch (scale * 1.1,
        ///*["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"]*/["#030d14", "#031619", "#041c21", "#0e3b31", "#0b2e28", "#10443a"], true),
        //sprite[SPRITE.TREE_SNOW2][SPRITE.NIGHT][1])));

        //sprite[SPRITE.TREE_BRANCH_SNOW2][SPRITE.DAY].push (CTI (create_apricot_forest (create_tree_branch (scale * 0.9,
        ///*["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"]*/["#242503","#4d2d14", "#432516", "#6d6c09","#686609","#777310"], false),
        //sprite[SPRITE.TREE_SNOW2][SPRITE.DAY][2])));
        //sprite[SPRITE.TREE_BRANCH_SNOW2][SPRITE.DAY].push (CTI (create_apricot_forest (create_tree_branch (scale * 0.9,
        ///*["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"]*/["#242503","#4d2d14", "#432516", "#6d6c09","#686609","#777310"], true),
        //sprite[SPRITE.TREE_SNOW2][SPRITE.DAY][2])));
        //sprite[SPRITE.TREE_BRANCH_SNOW2][SPRITE.NIGHT].push (CTI (create_apricot_forest (create_tree_branch (scale * 0.9,
        ///*["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"]*/["#030d14", "#031619", "#041c21",  "#0d2522", "#0c2821", "#0d2a28"], false),
        //sprite[SPRITE.TREE_SNOW2][SPRITE.NIGHT][2])));
        //sprite[SPRITE.TREE_BRANCH_SNOW2][SPRITE.NIGHT].push (CTI (create_apricot_forest  (create_tree_branch (scale * 0.9,
        ///*["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"]*/["#030d14", "#031619", "#041c21", "#0c2823", "#0b2b23", "#0c2d24"], true),
        //sprite[SPRITE.TREE_SNOW2][SPRITE.NIGHT][3])));

        /*HALLOWEEN*/
        //sprite[SPRITE.TREE_WEB1]               = [];
        //sprite[SPRITE.TREE_WEB1][SPRITE.DAY]   = [];
        //sprite[SPRITE.TREE_WEB1][SPRITE.NIGHT] = [];
        //sprite[SPRITE.TREE_WEB1][SPRITE.DAY].push  (CTI (create_apricot_tree (scale * 1.1,
        // /*["#0e3022", "#0c8e5b", "#037542", "#209e64"]*/["#242503","#8e7c0c","#6d5903","#9e8320", "#FFFFFF"], false, 1)));
        //sprite[SPRITE.TREE_WEB1][SPRITE.DAY].push (CTI (create_apricot_tree (scale * 1.1,
        // /*["#0e3022", "#0c8e5b", "#037542", "#209e64"]*/["#242503","#8e7c0c","#6d5903","#9e8320", "#FFFFFF"], true, 1)));

        //sprite[SPRITE.TREE_WEB1][SPRITE.DAY].push (CTI (create_apricot_tree (scale * 0.9,
        ///*["#0e3022", "#096d41", "#1f7b43", "#1f7b43"]*/["#242503","#898e0c","#757303","#9e9b20", "#FFFFFF"], false, 1)));
        //sprite[SPRITE.TREE_WEB1][SPRITE.DAY].push (CTI (create_apricot_tree (scale * 0.9,
        // /*["#0e3022", "#096d41", "#1f7b43", "#1f7b43"]*/["#242503", "#963400","#7c2200","#a83204", "#FFFFFF"], true, 1)));
            //
        //sprite[SPRITE.TREE_WEB1][SPRITE.DAY].push (CTI (create_apricot_tree (scale * 0.7,
        // /*["#0e3022","#124c34", "#0E3D26", "#155136"]*/["#242503", "#6d5a09", "#77591a", "#7b5a1f", "#FFFFFF"], false, 1)));
        //sprite[SPRITE.TREE_WEB1][SPRITE.DAY].push (CTI (create_apricot_tree (scale * 0.7,
        // /*["#0e3022","#124c34", "#0E3D26", "#155136"]*/["#242503", "#703700","#813009","#813009", "#FFFFFF"], true, 1)));
            //
        //sprite[SPRITE.TREE_WEB1][SPRITE.NIGHT].push (CTI (create_apricot_tree (scale * 1.1,
        // /*["#030d14", "#124949", "#0e3838", "#15514f"]*/["#030d14", "#12493d", "#0e3831", "#155247", "#16695f"], false, 1)));
        //sprite[SPRITE.TREE_WEB1][SPRITE.NIGHT].push (CTI (create_apricot_tree (scale * 1.1,
        //	 /*["#030d14", "#124949", "#0e3838", "#15514f"]*/["#030d14", "#12493d", "#0e3831", "#155247", "#16695f"], true, 1)));

        //sprite[SPRITE.TREE_WEB1][SPRITE.NIGHT].push (CTI (create_apricot_tree (scale * 0.9,
        // /*["#030d14", "#0b3534", "#144443", "#174240"]*/["#030d14", "#0b3629", "#144437", "#174235", "#16695f"], false, 1)));
        //sprite[SPRITE.TREE_WEB1][SPRITE.NIGHT].push (CTI (create_apricot_tree (scale * 0.9,
        // /*["#030d14", "#0b3534", "#144443", "#174240"]*/["#030d14", "#0d2522", "#0c2821", "#0d2a28", "#16695f"], true, 1)));
            //
        //sprite[SPRITE.TREE_WEB1][SPRITE.NIGHT].push (CTI (create_apricot_tree (scale * 0.7,
        // /*["#030d14", "#082b29", "#073332", "#073332"]*/["#030d14", "#082b1f", "#073328", "#073327", "#16695f"], false, 1)));
        //sprite[SPRITE.TREE_WEB1][SPRITE.NIGHT].push (CTI (create_apricot_tree (scale * 0.7,
        // /*["#030d14", "#082b29", "#073332", "#073332"]*/["#030d14", "#0c2823", "#0b2b23", "#0c2d24", "#16695f"], true, 1)));
            //
        //sprite[SPRITE.TREE_BRANCH_WEB1] = [];
        //sprite[SPRITE.TREE_BRANCH_WEB1][SPRITE.DAY]   = [];
        //sprite[SPRITE.TREE_BRANCH_WEB1][SPRITE.NIGHT] = [];
        //sprite[SPRITE.TREE_BRANCH_WEB1][SPRITE.DAY].push (CTI (create_apricot_forest (create_tree_branch (scale * 1.1,
        ///*["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"]*/["#242503","#4d2d14", "#432516", "#756608","#5b4a02","#8b731b"], false, 1),
        //sprite[SPRITE.TREE_WEB1][SPRITE.DAY][0])));
        //sprite[SPRITE.TREE_BRANCH_WEB1][SPRITE.DAY].push (CTI (create_apricot_forest  (create_tree_branch (scale * 1.1,
        // /*["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"]*/["#242503","#4d2d14", "#432516", "#756608","#5b4a02","#8b731b"], true, 1),
        //sprite[SPRITE.TREE_WEB1][SPRITE.DAY][1])));
        //sprite[SPRITE.TREE_BRANCH_WEB1][SPRITE.NIGHT].push (CTI (create_apricot_forest (create_tree_branch (scale * 1.1,
        ///*["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"]*/["#030d14", "#031619", "#041c21", "#0e3b31", "#0b2e28", "#10443a"], false, 1),
        //sprite[SPRITE.TREE_WEB1][SPRITE.NIGHT][0])));

        //sprite[SPRITE.TREE_BRANCH_WEB1][SPRITE.NIGHT].push (CTI (create_apricot_forest (create_tree_branch (scale * 1.1,
        ///*["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"]*/["#030d14", "#031619", "#041c21", "#0e3b31", "#0b2e28", "#10443a"], true, 1),
        //sprite[SPRITE.TREE_WEB1][SPRITE.NIGHT][1])));
            //
        //sprite[SPRITE.TREE_BRANCH_WEB1][SPRITE.DAY].push (CTI (create_apricot_forest (create_tree_branch (scale * 0.9,
        ///*["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"]*/["#242503","#4d2d14", "#432516", "#6d6c09","#686609","#777310"], false, 1),
        //sprite[SPRITE.TREE_WEB1][SPRITE.DAY][2])));
        //sprite[SPRITE.TREE_BRANCH_WEB1][SPRITE.DAY].push (CTI (create_apricot_forest (create_tree_branch (scale * 0.9,
        ///*["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"]*/["#242503","#4d2d14", "#432516", "#6d6c09","#686609","#777310"], true, 1),
        //sprite[SPRITE.TREE_WEB1][SPRITE.DAY][2])));
        //sprite[SPRITE.TREE_BRANCH_WEB1][SPRITE.NIGHT].push (CTI (create_apricot_forest (create_tree_branch (scale * 0.9,
        ///*["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"]*/["#030d14", "#031619", "#041c21",  "#0d2522", "#0c2821", "#0d2a28"], false, 1),
        //sprite[SPRITE.TREE_WEB1][SPRITE.NIGHT][2])));
        //sprite[SPRITE.TREE_BRANCH_WEB1][SPRITE.NIGHT].push (CTI (create_apricot_forest  (create_tree_branch (scale * 0.9,
        ///*["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"]*/["#030d14", "#031619", "#041c21", "#0c2823", "#0b2b23", "#0c2d24"], true, 1),
        //sprite[SPRITE.TREE_WEB1][SPRITE.NIGHT][3])));
            //
        //sprite[SPRITE.TREE_WEB2]               = [];
        //sprite[SPRITE.TREE_WEB2][SPRITE.DAY]   = [];
        //sprite[SPRITE.TREE_WEB2][SPRITE.NIGHT] = [];
        //sprite[SPRITE.TREE_WEB2][SPRITE.DAY].push  (CTI (create_apricot_tree (scale * 1.1,
        // /*["#0e3022", "#0c8e5b", "#037542", "#209e64"]*/["#242503","#8e7c0c","#6d5903","#9e8320", "#FFFFFF"], false, 2)));
        //sprite[SPRITE.TREE_WEB2][SPRITE.DAY].push (CTI (create_apricot_tree (scale * 1.1,
        // /*["#0e3022", "#0c8e5b", "#037542", "#209e64"]*/["#242503","#8e7c0c","#6d5903","#9e8320", "#FFFFFF"], true, 2)));
            //
        //sprite[SPRITE.TREE_WEB2][SPRITE.DAY].push (CTI (create_apricot_tree (scale * 0.9,
        ///*["#0e3022", "#096d41", "#1f7b43", "#1f7b43"]*/["#242503","#898e0c","#757303","#9e9b20", "#FFFFFF"], false, 2)));
        //sprite[SPRITE.TREE_WEB2][SPRITE.DAY].push (CTI (create_apricot_tree (scale * 0.9,
        // /*["#0e3022", "#096d41", "#1f7b43", "#1f7b43"]*/["#242503", "#963400","#7c2200","#a83204", "#FFFFFF"], true, 2)));

        //sprite[SPRITE.TREE_WEB2][SPRITE.DAY].push (CTI (create_apricot_tree (scale * 0.7,
        // /*["#0e3022","#124c34", "#0E3D26", "#155136"]*/["#242503", "#6d5a09", "#77591a", "#7b5a1f", "#FFFFFF"], false, 2)));
        //sprite[SPRITE.TREE_WEB2][SPRITE.DAY].push (CTI (create_apricot_tree (scale * 0.7,
        // /*["#0e3022","#124c34", "#0E3D26", "#155136"]*/["#242503", "#703700","#813009","#813009", "#FFFFFF"], true, 2)));
            //
        //sprite[SPRITE.TREE_WEB2][SPRITE.NIGHT].push (CTI (create_apricot_tree (scale * 1.1,
        // /*["#030d14", "#124949", "#0e3838", "#15514f"]*/["#030d14", "#12493d", "#0e3831", "#155247", "#16695f"], false, 2)));
        //sprite[SPRITE.TREE_WEB2][SPRITE.NIGHT].push (CTI (create_apricot_tree (scale * 1.1,
        //	 /*["#030d14", "#124949", "#0e3838", "#15514f"]*/["#030d14", "#12493d", "#0e3831", "#155247", "#16695f"], true, 2)));
            //
        //sprite[SPRITE.TREE_WEB2][SPRITE.NIGHT].push (CTI (create_apricot_tree (scale * 0.9,
        // /*["#030d14", "#0b3534", "#144443", "#174240"]*/["#030d14", "#0b3629", "#144437", "#174235", "#16695f"], false, 2)));
        //sprite[SPRITE.TREE_WEB2][SPRITE.NIGHT].push (CTI (create_apricot_tree (scale * 0.9,
        // /*["#030d14", "#0b3534", "#144443", "#174240"]*/["#030d14", "#0d2522", "#0c2821", "#0d2a28", "#16695f"], true, 2)));

        //sprite[SPRITE.TREE_WEB2][SPRITE.NIGHT].push (CTI (create_apricot_tree (scale * 0.7,
        // /*["#030d14", "#082b29", "#073332", "#073332"]*/["#030d14", "#082b1f", "#073328", "#073327", "#16695f"], false, 2)));
        //sprite[SPRITE.TREE_WEB2][SPRITE.NIGHT].push (CTI (create_apricot_tree (scale * 0.7,
        // /*["#030d14", "#082b29", "#073332", "#073332"]*/["#030d14", "#0c2823", "#0b2b23", "#0c2d24", "#16695f"], true, 2)));
            //
        //sprite[SPRITE.TREE_BRANCH_WEB2] = [];
        //sprite[SPRITE.TREE_BRANCH_WEB2][SPRITE.DAY]   = [];
        //sprite[SPRITE.TREE_BRANCH_WEB2][SPRITE.NIGHT] = [];
        //sprite[SPRITE.TREE_BRANCH_WEB2][SPRITE.DAY].push (CTI (create_apricot_forest (create_tree_branch (scale * 1.1,
        // /*["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"]*/["#242503","#4d2d14", "#432516", "#756608","#5b4a02","#8b731b"], false, 2),
        //sprite[SPRITE.TREE_WEB2][SPRITE.DAY][0])));
        //sprite[SPRITE.TREE_BRANCH_WEB2][SPRITE.DAY].push (CTI (create_apricot_forest  (create_tree_branch (scale * 1.1,
        // /*["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"]*/["#242503","#4d2d14", "#432516", "#756608","#5b4a02","#8b731b"], true, 2),
        //sprite[SPRITE.TREE_WEB2][SPRITE.DAY][1])));
        //sprite[SPRITE.TREE_BRANCH_WEB2][SPRITE.NIGHT].push (CTI (create_apricot_forest (create_tree_branch (scale * 1.1,
        ///*["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"]*/["#030d14", "#031619", "#041c21", "#0e3b31", "#0b2e28", "#10443a"], false, 2),
        //sprite[SPRITE.TREE_WEB2][SPRITE.NIGHT][0])));
        //sprite[SPRITE.TREE_BRANCH_WEB2][SPRITE.NIGHT].push (CTI (create_apricot_forest (create_tree_branch (scale * 1.1,
        ///*["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"]*/["#030d14", "#031619", "#041c21", "#0e3b31", "#0b2e28", "#10443a"], true, 2),
        //sprite[SPRITE.TREE_WEB2][SPRITE.NIGHT][1])));
            //
        //sprite[SPRITE.TREE_BRANCH_WEB2][SPRITE.DAY].push (CTI (create_apricot_forest (create_tree_branch (scale * 0.9,
        ///*["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"]*/["#242503","#4d2d14", "#432516", "#6d6c09","#686609","#777310"], false, 2),
        //sprite[SPRITE.TREE_WEB2][SPRITE.DAY][2])));
        //sprite[SPRITE.TREE_BRANCH_WEB2][SPRITE.DAY].push (CTI (create_apricot_forest (create_tree_branch (scale * 0.9,
        ///*["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"]*/["#242503","#4d2d14", "#432516", "#6d6c09","#686609","#777310"], true, 2),
        //sprite[SPRITE.TREE_WEB2][SPRITE.DAY][2])));
        //sprite[SPRITE.TREE_BRANCH_WEB2][SPRITE.NIGHT].push (CTI (create_apricot_forest (create_tree_branch (scale * 0.9,
        ///*["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"]*/["#030d14", "#031619", "#041c21",  "#0d2522", "#0c2821", "#0d2a28"], false, 2),
        //sprite[SPRITE.TREE_WEB2][SPRITE.NIGHT][2])));
        //sprite[SPRITE.TREE_BRANCH_WEB2][SPRITE.NIGHT].push (CTI (create_apricot_forest  (create_tree_branch (scale * 0.9,
        ///*["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"]*/["#030d14", "#031619", "#041c21", "#0c2823", "#0b2b23", "#0c2d24"], true, 2),
        //sprite[SPRITE.TREE_WEB2][SPRITE.NIGHT][3])));


        sprite[SPRITE.PICK_WOOD]             = []
        sprite[SPRITE.PICK_WOOD][SPRITE.DAY] = CTI (create_rotated_img (4, create_pickaxe (scale * 0.75, true,
            ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"])));
        sprite[SPRITE.PICK_WOOD][SPRITE.NIGHT] = CTI (create_rotated_img (4, create_pickaxe (scale * 0.75, true,
            ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#0d2e33", "#0b2326"])));
        sprite[SPRITE.PICK]             = []
        sprite[SPRITE.PICK][SPRITE.DAY] = CTI (create_rotated_img (4, create_pickaxe (scale * 0.75, true,
            ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
        sprite[SPRITE.PICK][SPRITE.NIGHT] = CTI (create_rotated_img (4, create_pickaxe (scale * 0.75, true,
            ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#485e66", "#1f343f"])));
        sprite[SPRITE.PICK_GOLD]             = []
        sprite[SPRITE.PICK_GOLD][SPRITE.DAY] = CTI (create_rotated_img (4, create_pickaxe (scale * 0.75, true,
            ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
        sprite[SPRITE.PICK_GOLD][SPRITE.NIGHT] = CTI (create_rotated_img (4, create_pickaxe (scale * 0.75, true,
            ["#030d14", "#000000", "#030d14", "#263947", "#263947", "#43aa82", "#29997c"])));
        sprite[SPRITE.PICK_DIAMOND]             = []
        sprite[SPRITE.PICK_DIAMOND][SPRITE.DAY] = CTI (create_rotated_img (4, create_pickaxe (scale * 0.75, true,
            ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
        sprite[SPRITE.PICK_DIAMOND][SPRITE.NIGHT] = CTI (create_rotated_img (4, create_pickaxe (scale * 0.75, true,
            ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
        sprite[SPRITE.PICK_AMETHYST]             = []
        sprite[SPRITE.PICK_AMETHYST][SPRITE.DAY] = CTI (create_rotated_img (4, create_pickaxe (scale * 0.75, true,
            ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
        sprite[SPRITE.PICK_AMETHYST][SPRITE.NIGHT] = CTI (create_rotated_img (4, create_pickaxe (scale * 0.75, true,
            ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));

        sprite[SPRITE.PIRATE_SWORD]               = [];
        sprite[SPRITE.PIRATE_SWORD][SPRITE.DAY]   = CTI (create_rotated_img (3, create_pirate_sword (scale * 0.17, true,
            ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"])));
        sprite[SPRITE.PIRATE_SWORD][SPRITE.NIGHT] = CTI (create_rotated_img (3, create_pirate_sword (scale * 0.17, true,
            ["#0d1b1c", "#0d2e33", "#0b2326", "#59737d", "#364f59", "#618395", "#4d768c", "#54859f"])));

        // Christmas
        sprite[SPRITE.SUGAR_CAN]               = [];
        sprite[SPRITE.SUGAR_CAN][SPRITE.DAY]   = CTI (create_rotated_img (3, create_sugar_can (scale * 0.32, true,
            ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"])));
        sprite[SPRITE.SUGAR_CAN][SPRITE.NIGHT] = CTI (create_rotated_img (3, create_sugar_can (scale * 0.42, true,
            ["#0d1b1c", "#485e66", "#1f343f", "#0d2e33", "#0b2326"])));

        sprite[SPRITE.SWORD_WOOD]               = [];
        sprite[SPRITE.SWORD_WOOD][SPRITE.DAY]   = CTI (create_rotated_img (3, create_sword_wood (scale * 0.4, true,
            ["#0d1b1c", "#73583e", "#493425", "#7d6144", "#5e4530", "#473221", "#745840"])));
        sprite[SPRITE.SWORD_WOOD][SPRITE.NIGHT] = CTI (create_rotated_img (3, create_sword_wood (scale * 0.4, true,
            ["#0d1b1c", "#0b3d3a", "#092b2a", "#144642", "#082927", "#092b29"])));
        sprite[SPRITE.SWORD]               = [];
        sprite[SPRITE.SWORD][SPRITE.DAY]   = CTI (create_rotated_img (3, create_stonesword (scale * 0.4, true,
            ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"])));
        sprite[SPRITE.SWORD][SPRITE.NIGHT] = CTI (create_rotated_img (3, create_stonesword (scale * 0.4, true,
            ["#0d1b1c", "#485e66", "#1f343f", "#5d757e", "#0d2e33", "#0b2326"])));
        sprite[SPRITE.SWORD_GOLD]               = [];
        sprite[SPRITE.SWORD_GOLD][SPRITE.DAY]   = CTI (create_rotated_img (3, create_goldsword (scale * 0.4, true,
            ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51","#493e26", "#382e19"])));
        sprite[SPRITE.SWORD_GOLD][SPRITE.NIGHT] = CTI (create_rotated_img (3, create_goldsword (scale * 0.4, true,
            ["#0d1b1c", "#43aa82", "#29997c", "#54bf96", "#263947", "#182935", ])));
        sprite[SPRITE.SWORD_DIAMOND]               = [];
        sprite[SPRITE.SWORD_DIAMOND][SPRITE.DAY]   = CTI (create_rotated_img (3, create_diamondsword (scale * 0.4, true,
            ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5","#022320", "#011e19", "#FFFFFF"])));
        sprite[SPRITE.SWORD_DIAMOND][SPRITE.NIGHT] = CTI (create_rotated_img (3, create_diamondsword (scale * 0.4, true,
            ["#0d1b1c", "#73dde5", "#3dc4c0",  "#93eaf1", "#111316", "#0a0b0c", ])));
        sprite[SPRITE.SWORD_AMETHYST]               = [];
        sprite[SPRITE.SWORD_AMETHYST][SPRITE.DAY]   = CTI (create_rotated_img (3, create_amesword (scale * 0.4, true,
            ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114","#211108", "#FFFFFF"])));
        sprite[SPRITE.SWORD_AMETHYST][SPRITE.NIGHT] = CTI (create_rotated_img (3, create_amesword (scale * 0.4, true,
            ["#0d1b1c", "#8359d3", "#764eb5", "#966de6", "#111316", "#0a0b0c", ])));

        sprite[SPRITE.HERB]               = [];
        sprite[SPRITE.HERB][SPRITE.DAY]   = [];
        sprite[SPRITE.HERB][SPRITE.NIGHT] = [];
        sprite[SPRITE.HERB][SPRITE.DAY].push (CTI (create_herb (scale * 0.9, false, /*["#1b4936"]*//*AUTOMN["#49421b"]*/["#0d4f35"], 0)));
        sprite[SPRITE.HERB][SPRITE.DAY].push (CTI (create_herb (scale * 0.9, false, /*["#1b4936"]*//*AUTOMN["#49421b"]*/["#0d4f35"], 1)));
        sprite[SPRITE.HERB][SPRITE.DAY].push (CTI (create_herb (scale * 0.9, false, /*["#1b4936"]*//*AUTOMN["#49421b"]*/["#0d4f35"], 2)));
        sprite[SPRITE.HERB][SPRITE.NIGHT].push (CTI (create_herb (scale * 0.9, false, /*["#083033"]*//*AUTOMN["#49421b"]*/["#053339"], 0)));
        sprite[SPRITE.HERB][SPRITE.NIGHT].push (CTI (create_herb (scale * 0.9, false, /*["#083033"]*//*AUTOMN["#49421b"]*/["#053339"], 1)));
        sprite[SPRITE.HERB][SPRITE.NIGHT].push (CTI (create_herb (scale * 0.9, false, /*["#083033"]*//*AUTOMN["#49421b"]*/["#053339"], 2)));
        sprite[SPRITE.HERB][SPRITE.DAY].push (CTI (create_leaf (scale * 0.8, ["#241301", "#ba6b0e", "#6d3f04"])));
        sprite[SPRITE.HERB][SPRITE.DAY].push (CTI (create_leaf (scale * 0.8, ["#292002", "#ba930e", "#6d5704"])));
        sprite[SPRITE.HERB][SPRITE.NIGHT].push (CTI (create_leaf (scale * 0.9, ["#052919", "#0a4738", "#06321f"])));
        sprite[SPRITE.HERB][SPRITE.NIGHT].push (CTI (create_leaf (scale * 0.8, ["#052918", "#08491c", "#063417"])));

        sprite[SPRITE.SIGN]               = [];
        sprite[SPRITE.SIGN][SPRITE.DAY]   = CTI (create_rotated_img (Math.PI / 2, create_sign (scale * 0.25, true,["#0d1b1c", "#44301b", "#57442a", "#523e26"])));
        sprite[SPRITE.SIGN][SPRITE.NIGHT] = CTI (create_rotated_img (Math.PI / 2, create_sign (scale * 0.25, true, ["#030d14", "#082b22", "#0a2f2b", "#072824"])));

        sprite[SPRITE.SIGN_BUTTON] = [];
        sprite[SPRITE.SIGN_BUTTON].push ( CTI (create_sign_button (scale * 0.25, ["#44301b", "#57442a", "#523e26"],0)));
        sprite[SPRITE.SIGN_BUTTON].push ( CTI (create_sign_button (scale * 0.25, ["#4f371e", "#624d30", "#5e472c", "#eda80d"], 1)));
        sprite[SPRITE.SIGN_BUTTON].push ( CTI (create_sign_button (scale * 0.25, ["#382715", "#4e3c25", "#473620", "#d7990c"], 2)));

        sprite[SPRITE.SYMBOLS]               = [];
        sprite[SPRITE.SYMBOLS][SPRITE.DAY]   = [];
        sprite[SPRITE.SYMBOLS][SPRITE.NIGHT] = [];
        sprite[SPRITE.SYMBOLS][SPRITE.DAY].push (CTI (create_rotated_img (Math.PI / 2, create_symbols (scale * 0.25, false, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25"], 1))));
        sprite[SPRITE.SYMBOLS][SPRITE.NIGHT].push (CTI (create_rotated_img (Math.PI / 2, create_symbols (scale * 0.25, false, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25"], 1))));
        sprite[SPRITE.SYMBOLS][SPRITE.DAY].push (CTI (create_rotated_img (Math.PI / 2, create_symbols (scale * 0.25, false, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#4f9246"], 2))));
        sprite[SPRITE.SYMBOLS][SPRITE.NIGHT].push (CTI (create_rotated_img (Math.PI / 2, create_symbols (scale * 0.25, false, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#4f9246"], 2))));
        sprite[SPRITE.SYMBOLS][SPRITE.DAY].push (CTI (create_rotated_img (Math.PI / 2, create_symbols (scale * 0.25, false, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#ffffff"], 3))));
        sprite[SPRITE.SYMBOLS][SPRITE.NIGHT].push (CTI (create_rotated_img (Math.PI / 2, create_symbols (scale * 0.25, false, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25","#ffffff"], 3))));
        sprite[SPRITE.SYMBOLS][SPRITE.DAY].push (CTI (create_rotated_img (Math.PI / 2, create_symbols (scale * 0.25, false, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#362513"], 4))));
        sprite[SPRITE.SYMBOLS][SPRITE.NIGHT].push (CTI (create_rotated_img (Math.PI / 2, create_symbols (scale * 0.25, false, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25","#664d2e"], 4))));

        sprite[SPRITE.PLANT]               = [];
        sprite[SPRITE.PLANT][SPRITE.DAY]   = [CTI (create_plant (scale * 1.2, true, ["#0e3022", "#0b8052", "#077b49"]/* ["#352b10", "#80500b", "#7c4908"] */))];
        sprite[SPRITE.PLANT][SPRITE.NIGHT] = [CTI (create_plant (scale * 1.2, true, ["#030d14", "#084442", "#0a4049"]/* ["#030d14", "#0a3429", "#0a2f2b"] */))];
    sprite[SPRITE.DRIED_PLANT]               = [];
        sprite[SPRITE.DRIED_PLANT][SPRITE.DAY]   = CTI (create_plant (scale * 0.8, true, ["#0e3022", "#68622D", "#665329"]));
        sprite[SPRITE.DRIED_PLANT][SPRITE.NIGHT] = CTI (create_plant (scale * 0.8, true, ["#030d14", "#0F3A24", "#083326"]));

        sprite[SPRITE.PUMPKIN]               = [];
        sprite[SPRITE.PUMPKIN][SPRITE.DAY]   = CTI (create_pumpkin (scale * 0.5, true, ["#1b170c", "#c67933", "#a6692f", "#bd7533", "#86683e", "#6e502d"]));
        sprite[SPRITE.PUMPKIN][SPRITE.NIGHT] = CTI (create_pumpkin (scale * 0.5, true, ["#030d14", "#0a3429", "#0a2f2b", "#082f25", "#082925", "#0a3630"]));

        sprite[SPRITE.GARLIC]               = [];
        sprite[SPRITE.GARLIC][SPRITE.DAY]   = CTI (create_garlic (scale * 0.5, true, ["#1b170c", "#e8e8e8", "#d2cfcf", "#e0e1e0", "#c4c4c4"]));
        sprite[SPRITE.GARLIC][SPRITE.NIGHT] = CTI (create_garlic (scale * 0.5, true, ["#030d14", "#2b5254", "#264a46", "#396260", "#244743"]));

        sprite[SPRITE.THORNBUSH]               = [];
        sprite[SPRITE.THORNBUSH][SPRITE.DAY]   = CTI (create_brambles (scale * 0.5, true, ["#1b170c", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]));
        sprite[SPRITE.THORNBUSH][SPRITE.NIGHT] = CTI (create_brambles (scale * 0.5, true, ["#030d14", "#0d5551", "#074440", "#0f5c58", "#4e8784", "#3f7572"]));

        sprite[SPRITE.PLANT_MINI]               = [];
        sprite[SPRITE.PLANT_MINI][SPRITE.DAY]   = CTI (create_plant (scale * 0.8, true, ["#1b170c", "#0b8052", "#077b49"]/*["#352b10", "#80500b", "#7c4908"]*/));
        sprite[SPRITE.PLANT_MINI][SPRITE.NIGHT] = CTI (create_plant (scale * 0.8, true, ["#030d14", "#084442", "#0a4049"]/*["#030d14", "#0a3429", "#0a2f2b"]*/));

    sprite[SPRITE.DRIED_PUMPKIN]               = [];
        sprite[SPRITE.DRIED_PUMPKIN][SPRITE.DAY]   = CTI (create_pumpkin (scale * 0.5, true, ["#1b170c", "#68622D", "#665329", "#5e5823", "#86683e", "#6e502d"]));
        sprite[SPRITE.DRIED_PUMPKIN][SPRITE.NIGHT] = CTI (create_pumpkin (scale * 0.5, true, ["#030d14", "#0F3A24", "#083326", "#0c301e", "#062a1f", "#083b2b"]));

        sprite[SPRITE.DRIED_GARLIC]               = [];
        sprite[SPRITE.DRIED_GARLIC][SPRITE.DAY]   = CTI (create_garlic (scale * 0.5, true, ["#1b170c", "#adbe9e", "#7e9178", "#84aa84", "#527556"]));
        sprite[SPRITE.DRIED_GARLIC][SPRITE.NIGHT] = CTI (create_garlic (scale * 0.5, true, ["#030d14", "#164a44", "#124244", "#13373b", "#133e3e"]));

        sprite[SPRITE.DRIED_THORNBUSH]              = [];
        sprite[SPRITE.DRIED_THORNBUSH][SPRITE.DAY]   = CTI (create_brambles (scale * 0.5, true, ["#1b170c", "#7a9160", "#4a5e3c", "#637e5a", "#c5cfc0", "#8a9685"]));
        sprite[SPRITE.DRIED_THORNBUSH][SPRITE.NIGHT] = CTI (create_brambles (scale * 0.5, true, ["#030d14", "#3e5d5b", "#2f4442", "#354e4c", "#637d7c", "#556b6a"]));

        // Christmas
        sprite[SPRITE.GIFT] = [];
        sprite[SPRITE.GIFT][SPRITE.DAY] = CTI (create_present (scale * 0.45, true, ["#0e3022", "#ac222a", "#98171e", "#22a84f", "#1f924a"]));
        sprite[SPRITE.GIFT][SPRITE.NIGHT] = CTI (create_present (scale * 0.45, true, ["#0e3022", "#19386e", "#0b2752", "#124252", "#0d3441"]));

        sprite[SPRITE.HURT_GIFT] = CTI (create_present (scale * 0.65, true, ["rgba(14, 48, 34, 0)", "#BB0000", "#BB0000", "#BB0000", "#BB0000"]));

        sprite[SPRITE.FRUIT]               = [];
        sprite[SPRITE.FRUIT][SPRITE.DAY]   = CTI (create_fruit (scale * 1.4, false, /*["#54318e", "#725ba3"]*//* ["#3d2a6e","#8255b5"] */["#ac222a", "#e6636a"]));
        sprite[SPRITE.FRUIT][SPRITE.NIGHT] = CTI (create_fruit (scale * 1.4, false, /*["#2f195e", "#5b498c"]*//* ["#26124f", "#524082"] */["#46195e","#744188"]));

        sprite[SPRITE.FIRE]               = [];
        sprite[SPRITE.FIRE][SPRITE.DAY]   = CTI (create_fire (scale * 0.9, false, ["#efd435", "#ec8d35", "#e96132"]));
        sprite[SPRITE.FIRE][SPRITE.NIGHT] = CTI (create_fire (scale * 0.9, false, ["#efdb7b", "#efe854", "#e8ef62"]));

        sprite[SPRITE.BIG_FIRE_WOOD]                 = [];
        sprite[SPRITE.BIG_FIRE_WOOD][SPRITE.DAY]   = CTI (create_big_fire_wood (scale * 0.9, false, ["#4d2d14", "#432516"]));
        sprite[SPRITE.BIG_FIRE_WOOD][SPRITE.NIGHT] = CTI (create_big_fire_wood (scale * 0.9, false, ["#282404", "#0a0a01"]));

        sprite[SPRITE.WOOD_FIRE]               = [];
        sprite[SPRITE.WOOD_FIRE][SPRITE.DAY]   = CTI (create_wood_fire (scale * 0.9, false, ["#4d2d14", "#432516"]));
        sprite[SPRITE.WOOD_FIRE][SPRITE.NIGHT] = CTI (create_wood_fire (scale * 0.9, false, ["#282404", "#0a0a01"]));

        sprite[SPRITE.HALO_FIRE]               = [];
        sprite[SPRITE.HALO_FIRE][SPRITE.DAY]   = CTI (create_halo_fire (scale * 0.9, false, ["#efd435"]));
        sprite[SPRITE.HALO_FIRE][SPRITE.NIGHT] = CTI (create_halo_fire (scale * 0.9, false, ["#fffabb"]));

        sprite[SPRITE.GROUND_FIRE]               = [];
        sprite[SPRITE.GROUND_FIRE][SPRITE.DAY]   = CTI (create_ground_fire (scale * 0.9, false, ["#efd435"]));
        sprite[SPRITE.GROUND_FIRE][SPRITE.NIGHT] = CTI (create_ground_fire (scale * 0.9, false, ["#fffabb"]));

        sprite[SPRITE.HALO_FIRE_PUMPKIN]               = [];
        sprite[SPRITE.HALO_FIRE_PUMPKIN][SPRITE.DAY]   = CTI (create_halo_fire (scale * 0.9, false, ["#efd435"]));
        sprite[SPRITE.HALO_FIRE_PUMPKIN][SPRITE.NIGHT] = CTI (create_halo_fire (scale * 0.9, false, ["rgba(255, 84, 0, 1)"]));

        sprite[SPRITE.GROUND_FIRE_PUMPKIN]               = [];
        sprite[SPRITE.GROUND_FIRE_PUMPKIN][SPRITE.DAY]   = CTI (create_ground_fire (scale * 0.9, false, ["#efd435"]));
        sprite[SPRITE.GROUND_FIRE_PUMPKIN][SPRITE.NIGHT] = CTI (create_ground_fire (scale * 0.9, false, ["#ff5704"]));

        sprite[SPRITE.GEAR]  = CTI (create_gear (scale, "#ffffff", 1));
        sprite[SPRITE.GEAR2] = CTI (create_gear (scale * 1.5, "#ffffff", 1));

        sprite[SPRITE.YOUR_SCORE]  = CTI (create_text (scale, "Your score:", 15 * scale, "#FFF"));

        sprite[SPRITE.WINDMILL_CASES] = CTI (create_windmill_chest (scale * 0.9, ["#596560", "#394841", "#543B1C", "#694D28", "#4D3C1A", "#694D28", "#DEE2E0", "#CDCCCC", "#7B5A31", "#7E8A85"]));
        sprite[SPRITE.EXTRACTOR_CASES] = IMAGES.EXTRACTOR_CASES;

        sprite[SPRITE.WINDMILL] = [];
        sprite[SPRITE.WINDMILL][SPRITE.DAY]   = CTI (create_windmill (scale * 1.5, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
        sprite[SPRITE.WINDMILL][SPRITE.NIGHT] = CTI (create_windmill (scale * 1.5, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));

        sprite[SPRITE.WINDMILL_WINGS] = [];
        sprite[SPRITE.WINDMILL_WINGS][SPRITE.DAY]   = CTI (create_windmill_wing (scale * 2, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
        sprite[SPRITE.WINDMILL_WINGS][SPRITE.NIGHT] = CTI (create_windmill_wing (scale * 2, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));

        sprite[SPRITE.WINDMILL_HEAD] = [];
        sprite[SPRITE.WINDMILL_HEAD][SPRITE.DAY]   = CTI (create_windmill_head (scale * 1.5, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
        sprite[SPRITE.WINDMILL_HEAD][SPRITE.NIGHT] = CTI (create_windmill_head (scale * 1.5, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));

        sprite[SPRITE.WILD_WHEAT] = [];
        sprite[SPRITE.WILD_WHEAT][SPRITE.DAY]   = CTI (create_wheat (scale * 2.2, true, ["#A89F67", "#9E8456"]));
        sprite[SPRITE.WILD_WHEAT][SPRITE.NIGHT] = CTI (create_wheat (scale * 2.2, true, ["#0B4049", "#08383D"]));

        sprite[SPRITE.DRIED_WHEAT] = [];
        sprite[SPRITE.DRIED_WHEAT][SPRITE.DAY]   = CTI (create_wheat (scale * 2.2, true, ["#68622D", "#665329"]));
        sprite[SPRITE.DRIED_WHEAT][SPRITE.NIGHT] = CTI (create_wheat (scale * 2.2, true, ["#0F3A24", "#083326"]));

        sprite[SPRITE.WHEAT_MOB] = [];
        sprite[SPRITE.WHEAT_MOB][SPRITE.DAY]   = CTI (create_seed (scale * 0.8, true, ["#A89F67", "#9E8456"]));
        sprite[SPRITE.WHEAT_MOB][SPRITE.NIGHT] = CTI (create_seed (scale * 0.8, true, ["#15514F", "#0F3F3D"]));

        sprite[SPRITE.PUMPKIN_SEED_MOB] = [];
        sprite[SPRITE.PUMPKIN_SEED_MOB][SPRITE.DAY]   = CTI (create_seed (scale * 0.8, true, ["#c67933", "#b17238"]));
        sprite[SPRITE.PUMPKIN_SEED_MOB][SPRITE.NIGHT] = CTI (create_seed (scale * 0.8, true, ["#043c37", "#032b23"]));

        sprite[SPRITE.ALOE_VERA_SEED_MOB] = [];
        sprite[SPRITE.ALOE_VERA_SEED_MOB][SPRITE.DAY]   = CTI (create_seed (scale * 0.8, true, ["#3a8214", "#4a9c1e"]));
        sprite[SPRITE.ALOE_VERA_SEED_MOB][SPRITE.NIGHT] = CTI (create_seed (scale * 0.8, true, ["#032d29", "#044640"]));

        sprite[SPRITE.GARLIC_SEED_MOB] = [];
        sprite[SPRITE.GARLIC_SEED_MOB][SPRITE.DAY]   = CTI (create_seed (scale * 0.8, true, ["#e8e8e8", "#bbbbbb"]));
        sprite[SPRITE.GARLIC_SEED_MOB][SPRITE.NIGHT] = CTI (create_seed (scale * 0.8, true, ["#1c6161", "#07413f"]));

        sprite[SPRITE.THORNBUSH_SEED_MOB] = [];
        sprite[SPRITE.THORNBUSH_SEED_MOB][SPRITE.DAY]   = CTI (create_seed (scale * 0.8, true, ["#328a56", "#449573"]));
        sprite[SPRITE.THORNBUSH_SEED_MOB][SPRITE.NIGHT] = CTI (create_seed (scale * 0.8, true, ["#043c37", "#032b23"]));

    sprite[SPRITE.CARROT_SEED_MOB] = [];
        sprite[SPRITE.CARROT_SEED_MOB][SPRITE.DAY]   = CTI (create_seed (scale * 0.8, true, ["#c98e2f", "#a36b11"]));
        sprite[SPRITE.CARROT_SEED_MOB][SPRITE.NIGHT] = CTI (create_seed (scale * 0.8, true, ["#043c37", "#032b23"]));

    sprite[SPRITE.TOMATO_SEED_MOB] = [];
        sprite[SPRITE.TOMATO_SEED_MOB][SPRITE.DAY]   = CTI (create_seed (scale * 0.8, true, ["#b22419", "#99110e"]));
        sprite[SPRITE.TOMATO_SEED_MOB][SPRITE.NIGHT] = CTI (create_seed (scale * 0.8, true, ["#04323c", "#03222b"]));

        sprite[SPRITE.WATERMELON_SEED_MOB] = [];
        sprite[SPRITE.WATERMELON_SEED_MOB][SPRITE.DAY]   = CTI (create_seed (scale * 0.8, true, ["#13a56d", "#098a58"]));
        sprite[SPRITE.WATERMELON_SEED_MOB][SPRITE.NIGHT] = CTI (create_seed (scale * 0.8, true, ["#043c37", "#032b23"]));

        sprite[SPRITE.WINDMILL_WHEAT_SEED] = create_craft_button (1,
            [{ f : create_wheat, x : 0, y : 0, a : 1, r : 0,
                c : ["#A89F67", "#9E8456"] }],
            1.2, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);

        sprite[SPRITE.BREAD_OVEN_WOOD] = create_craft_button (1,
            [{ f : create_wood_fire, x : 0, y : 0, a : 1, r : -Math.PI/5,
                c : ["#4d2d14", "#432516"] }],
            0.3, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);

        sprite[SPRITE.BREAD_OVEN_BREAD] = create_craft_button (1,
            [{ f : create_bread, x : 0, y : -5, a : 1, r : 0,
                c : ["#1d051e","#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"] }],
            0.15, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);

        sprite[SPRITE.EMPTY_SLOT] = create_craft_button (0.9,
            [], 0.30, /*["#2b5c48", "#2b5c48", "#2b5c48"]*/["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);


        sprite[SPRITE.PLANT_SEED]               = [];
        sprite[SPRITE.PLANT_SEED][SPRITE.DAY]   = CTI (create_plant_seed (scale * 0.9, false, ["#7d613e", "#9e7e5a"]));
        sprite[SPRITE.PLANT_SEED][SPRITE.NIGHT] = CTI (create_plant_seed (scale * 0.9, false, ["#084442", "#125e5a"]));

        sprite[SPRITE.WHEAT_SEED]               = [];
        sprite[SPRITE.WHEAT_SEED][SPRITE.DAY]   = CTI (create_plant_seed (scale * 0.9, false, ["#9E8456", "#A89F67"]));
        sprite[SPRITE.WHEAT_SEED][SPRITE.NIGHT] = CTI (create_plant_seed (scale * 0.9, false, ["#1b6f6a", "#0d4e4c"]));

        sprite[SPRITE.WHEAT_SEED_DRIED]               = [];
        sprite[SPRITE.WHEAT_SEED_DRIED][SPRITE.DAY]   = CTI (create_plant_seed (scale * 0.9, false, ["#665329", "#68622D"]));
        sprite[SPRITE.WHEAT_SEED_DRIED][SPRITE.NIGHT] = CTI (create_plant_seed (scale * 0.9, false, ["#083326", "#0F3A24"]));

        sprite[SPRITE.PLANT_PUMPKIN]               = [];
        sprite[SPRITE.PLANT_PUMPKIN][SPRITE.DAY]   = CTI (create_plant_seed (scale * 0.9, false, ["#c67933", "#ec952d"]));
        sprite[SPRITE.PLANT_PUMPKIN][SPRITE.NIGHT] = CTI (create_plant_seed (scale * 0.9, false, ["#0e6553", "#094437"]));

        sprite[SPRITE.PLANT_ALOE_VERA]               = [];
        sprite[SPRITE.PLANT_ALOE_VERA][SPRITE.DAY]   = CTI (create_plant_seed (scale * 0.9, false, ["#375809", "#4b770e"]));
        sprite[SPRITE.PLANT_ALOE_VERA][SPRITE.NIGHT] = CTI (create_plant_seed (scale * 0.9, false, ["#09542d", "#0d5d2f"]));

        sprite[SPRITE.PLANT_ALOE_VERA_DRIED]               = [];
        sprite[SPRITE.PLANT_ALOE_VERA_DRIED][SPRITE.DAY]   = CTI (create_plant_seed (scale * 0.9, false, ["#585809", "#72770e"]));
        sprite[SPRITE.PLANT_ALOE_VERA_DRIED][SPRITE.NIGHT] = CTI (create_plant_seed (scale * 0.9, false, ["#295209", "#305d0d"]));

        sprite[SPRITE.PLANT_GARLIC]               = [];
        sprite[SPRITE.PLANT_GARLIC][SPRITE.DAY]   = CTI (create_plant_seed (scale * 0.9, false, ["#b9b094", "#e2d2c0"]));
        sprite[SPRITE.PLANT_GARLIC][SPRITE.NIGHT] = CTI (create_plant_seed (scale * 0.9, false, ["#126366", "#0d484b"]));

        sprite[SPRITE.PLANT_THORNBUSH]               = [];
        sprite[SPRITE.PLANT_THORNBUSH][SPRITE.DAY]   = CTI (create_plant_seed (scale * 0.9, false, ["#3f8662", "#30915d"]));
        sprite[SPRITE.PLANT_THORNBUSH][SPRITE.NIGHT] = CTI (create_plant_seed (scale * 0.9, false, ["#0e6553", "#094437"]));

        sprite[SPRITE.PLANT_PUMPKIN_DRIED]               = [];
        sprite[SPRITE.PLANT_PUMPKIN_DRIED][SPRITE.DAY]   = CTI (create_plant_seed (scale * 0.9, false, ["#c79153", "#dfa868"]));
        sprite[SPRITE.PLANT_PUMPKIN_DRIED][SPRITE.NIGHT] = CTI (create_plant_seed (scale * 0.9, false, ["#073927", "#075040"]));

        sprite[SPRITE.PLANT_GARLIC_DRIED]               = [];
        sprite[SPRITE.PLANT_GARLIC_DRIED][SPRITE.DAY]   = CTI (create_plant_seed (scale * 0.9, false, ["#768b5b", "#819984"]));
        sprite[SPRITE.PLANT_GARLIC_DRIED][SPRITE.NIGHT] = CTI (create_plant_seed (scale * 0.9, false, ["#0c4540", "#0e5153"]));

        sprite[SPRITE.PLANT_THORNBUSH_DRIED]               = [];
        sprite[SPRITE.PLANT_THORNBUSH_DRIED][SPRITE.DAY]   = CTI (create_plant_seed (scale * 0.9, false, ["#567465", "#627c6e"]));
        sprite[SPRITE.PLANT_THORNBUSH_DRIED][SPRITE.NIGHT] = CTI (create_plant_seed (scale * 0.9, false, ["#073927", "#075040"]));

    sprite[SPRITE.PLANT_CARROT]               = [];
        sprite[SPRITE.PLANT_CARROT][SPRITE.DAY]   = CTI (create_plant_seed (scale * 0.9, false, ["#996b3a", "#bf956b"]));
        sprite[SPRITE.PLANT_CARROT][SPRITE.NIGHT] = CTI (create_plant_seed (scale * 0.9, false, ["#0e6553", "#094437"]));

    sprite[SPRITE.PLANT_CARROT_DRIED]               = [];
        sprite[SPRITE.PLANT_CARROT_DRIED][SPRITE.DAY]   = CTI (create_plant_seed (scale * 0.9, false, ["#7a634a", "#a68f77"]));
        sprite[SPRITE.PLANT_CARROT_DRIED][SPRITE.NIGHT] = CTI (create_plant_seed (scale * 0.9, false, ["#1e4d43", "#113c32"]));

    sprite[SPRITE.PLANT_TOMATO]               = [];
        sprite[SPRITE.PLANT_TOMATO][SPRITE.DAY]   = CTI (create_plant_seed (scale * 0.9, false, ["#99403c", "#bc796c"]));
        sprite[SPRITE.PLANT_TOMATO][SPRITE.NIGHT] = CTI (create_plant_seed (scale * 0.9, false, ["#1e434d", "#11303c"]));

    sprite[SPRITE.PLANT_TOMATO_DRIED]               = [];
        sprite[SPRITE.PLANT_TOMATO_DRIED][SPRITE.DAY]   = CTI (create_plant_seed (scale * 0.9, false, ["#88504e", "#b3857c"]));
        sprite[SPRITE.PLANT_TOMATO_DRIED][SPRITE.NIGHT] = CTI (create_plant_seed (scale * 0.9, false, ["#253b41", "#162930"]));

        sprite[SPRITE.PLANT_WATERMELON]               = [];
        sprite[SPRITE.PLANT_WATERMELON][SPRITE.DAY]   = CTI (create_plant_seed (scale * 0.9, false, ["#0f8870", "#23af93"]));
        sprite[SPRITE.PLANT_WATERMELON][SPRITE.NIGHT] = CTI (create_plant_seed (scale * 0.9, false, ["#032829", "#083233"]));

    sprite[SPRITE.PLANT_WATERMELON_DRIED]               = [];
        sprite[SPRITE.PLANT_WATERMELON_DRIED][SPRITE.DAY]   = CTI (create_plant_seed (scale * 0.9, false, ["#618a20", "#84a74e"]));
        sprite[SPRITE.PLANT_WATERMELON_DRIED][SPRITE.NIGHT] = CTI (create_plant_seed (scale * 0.9, false, ["#1f4632", "#335d47"]));

        sprite[SPRITE.WORKBENCH]               = [];
        sprite[SPRITE.WORKBENCH][SPRITE.DAY]   = CTI (create_workbench (scale * 1.2, true,
            ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]));
        sprite[SPRITE.WORKBENCH][SPRITE.NIGHT] = CTI (create_workbench (scale * 1.2, true,
            ["#030d14", "#0d2e33", "#072322", "#3e706b", "#123d3f", "#4e827c"]));

        sprite[SPRITE.WALL]               = [],
        sprite[SPRITE.WALL][SPRITE.DAY]   = CTI (create_wall (scale * 1, true,
            ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
        sprite[SPRITE.WALL][SPRITE.NIGHT] = CTI (create_wall (scale * 1, true,
            ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));

        sprite[SPRITE.DIAMOND_WALL]               = [],
        sprite[SPRITE.DIAMOND_WALL][SPRITE.DAY]   = CTI (create_wall_diamond (scale * 1, true,
            ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
        sprite[SPRITE.DIAMOND_WALL][SPRITE.NIGHT] = CTI (create_wall_diamond (scale * 1, true,
            ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));

        sprite[SPRITE.AMETHYST_WALL]               = [],
        sprite[SPRITE.AMETHYST_WALL][SPRITE.DAY]   = CTI (create_wall_stone (scale * 1, true,
            ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
        sprite[SPRITE.AMETHYST_WALL][SPRITE.NIGHT] = CTI (create_wall_stone (scale * 1, true,
            ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));


        sprite[SPRITE.STONE_WALL]               = [],
        sprite[SPRITE.STONE_WALL][SPRITE.DAY]   = CTI (create_wall_stone (scale * 1, true,
            ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
        sprite[SPRITE.STONE_WALL][SPRITE.NIGHT] = CTI (create_wall_stone (scale * 1, true,
            ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));

        sprite[SPRITE.GOLD_WALL]               = [],
        sprite[SPRITE.GOLD_WALL][SPRITE.DAY]   = CTI (create_wall_gold (scale * 1, true,
            ["#0d1b1c", "#877d36",  "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
        sprite[SPRITE.GOLD_WALL][SPRITE.NIGHT] = CTI (create_wall_gold (scale * 1, true,
            ["#030d14", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));

        sprite[SPRITE.SPIKE]               = [],
        sprite[SPRITE.SPIKE][SPRITE.DAY]   = CTI (create_spike (scale * 0.8, true,
            ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
        sprite[SPRITE.SPIKE][SPRITE.NIGHT] = CTI (create_spike (scale * 0.8, true,
            ["#030d14", "#1f343f", "#485e66", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));

        sprite[SPRITE.GOLD_SPIKE]               = [],
        sprite[SPRITE.GOLD_SPIKE][SPRITE.DAY]   = CTI (create_spike_gold (scale * 0.8, true,
            ["#0d1b1c", "#69685a", "#9c9683", "#877d36",  "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
        sprite[SPRITE.GOLD_SPIKE][SPRITE.NIGHT] = CTI (create_spike_gold (scale * 0.8, true,
            ["#030d14", "#1a3732", "#1e544c", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));

        sprite[SPRITE.DIAMOND_SPIKE]               = [],
        sprite[SPRITE.DIAMOND_SPIKE][SPRITE.DAY]   = CTI (create_spike_diamond (scale * 0.8, true,
            ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
        sprite[SPRITE.DIAMOND_SPIKE][SPRITE.NIGHT] = CTI (create_spike_diamond (scale * 0.8, true,
            ["#030d14", "#2c4b55", "#546d77", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));

        sprite[SPRITE.STONE_SPIKE]               = [],
        sprite[SPRITE.STONE_SPIKE][SPRITE.DAY]   = CTI (create_spike_stone (scale * 0.8, true,
            [ "#0d1b1c", "#6a7570", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
        sprite[SPRITE.STONE_SPIKE][SPRITE.NIGHT] = CTI (create_spike_stone (scale * 0.8, true,
            ["#030d14", "#1f343f", "#485e66", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));

        sprite[SPRITE.AMETHYST_SPIKE]               = [],
        sprite[SPRITE.AMETHYST_SPIKE][SPRITE.DAY]   = CTI (create_spike_stone (scale * 0.8, true,
            [ "#0d1b1c", "#6a7570", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
        sprite[SPRITE.AMETHYST_SPIKE][SPRITE.NIGHT] = CTI (create_spike_stone (scale * 0.8, true,
            ["#030d14", "#1f343f", "#485e66", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));

        sprite[SPRITE.DOOR_WOOD_CLOSE] = [];
        sprite[SPRITE.DOOR_WOOD_CLOSE][SPRITE.DAY] = CTI (create_door_wood (scale * 1.5, true,
            ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534", "#23a54e", "#1f934a", "#208e48", "#b12c2a", "#9c2625", "#ebd6a4", "#cca73f"]));
        sprite[SPRITE.DOOR_WOOD_CLOSE][SPRITE.NIGHT] = CTI (create_door_wood (scale * 1.5, true,
            ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));

        sprite[SPRITE.DOOR_WOOD_OPEN] = [];
        sprite[SPRITE.DOOR_WOOD_OPEN][SPRITE.DAY] = CTI (create_door_wood (scale * 1, false,
        ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]/*["#3a3513", "#3a3513", "#4f4819", "#4f4819", "#3a3513", "#4f4819"]*/));
        sprite[SPRITE.DOOR_WOOD_OPEN][SPRITE.NIGHT] = CTI (create_door_wood (scale * 1, false,
        /*["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]*/["#042b30", "#042b30", "#0b342b", "#0b342b", "#042b30", "#0b342b"]));

        sprite[SPRITE.DOOR_STONE_CLOSE] = [];
        sprite[SPRITE.DOOR_STONE_CLOSE][SPRITE.DAY] = CTI (create_door_stone (scale * 1.5, true,
            ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]));
        sprite[SPRITE.DOOR_STONE_CLOSE][SPRITE.NIGHT] = CTI (create_door_stone (scale * 1.5, true,
            ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#164542","#295957"]));

        sprite[SPRITE.DOOR_STONE_OPEN] = [];
        sprite[SPRITE.DOOR_STONE_OPEN][SPRITE.DAY] = CTI (create_door_stone (scale * 1, false,
            ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]/*["#3a3513", "#3a3513", "#4f4819", "#4f4819", "#3a3513", "#4f4819"]*/));
        sprite[SPRITE.DOOR_STONE_OPEN][SPRITE.NIGHT] = CTI (create_door_stone (scale * 1, false,
            ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]/*["#08261f", "#08261f", "#0b342b", "#0b342b", "#08261f", "#0b342b"]*/));

        sprite[SPRITE.DOOR_AMETHYST_CLOSE] = [];
        sprite[SPRITE.DOOR_AMETHYST_CLOSE][SPRITE.DAY] = CTI (create_door_stone (scale * 1.5, true,
            ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
        sprite[SPRITE.DOOR_AMETHYST_CLOSE][SPRITE.NIGHT] = CTI (create_door_stone (scale * 1.5, true,
            ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));

        sprite[SPRITE.DOOR_AMETHYST_OPEN] = [];
        sprite[SPRITE.DOOR_AMETHYST_OPEN][SPRITE.DAY] = CTI (create_door_stone (scale * 1, false,
            ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]/*["#3a3513", "#3a3513", "#4f4819", "#4f4819", "#3a3513", "#4f4819"]*/));
        sprite[SPRITE.DOOR_AMETHYST_OPEN][SPRITE.NIGHT] = CTI (create_door_stone (scale * 1, false,
            ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]/*["#08261f", "#08261f", "#0b342b", "#0b342b", "#08261f", "#0b342b"]*/));

        sprite[SPRITE.DOOR_GOLD_CLOSE] = [];
        sprite[SPRITE.DOOR_GOLD_CLOSE][SPRITE.DAY] = CTI (create_door_gold (scale * 1.5, true,
            ["#0d1b1c", "#877d36",  "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]));
        sprite[SPRITE.DOOR_GOLD_CLOSE][SPRITE.NIGHT] = CTI (create_door_gold (scale * 1.5, true,
            ["#030d14", "#1f4948", "#215e55", "#1f6058", "#1f605c", "#2c7a70"]));

        sprite[SPRITE.DOOR_GOLD_OPEN] = [];
        sprite[SPRITE.DOOR_GOLD_OPEN][SPRITE.DAY] = CTI (create_door_gold (scale * 1, false,
            ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]/*["#3a3513", "#3a3513", "#4f4819", "#4f4819", "#3a3513", "#4f4819"]*/));
        sprite[SPRITE.DOOR_GOLD_OPEN][SPRITE.NIGHT] = CTI (create_door_gold (scale * 1, false,
            ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]/*["#08261f", "#08261f", "#0b342b", "#0b342b", "#08261f", "#0b342b"]*/));

        sprite[SPRITE.DOOR_DIAMOND_CLOSE] = [];
        sprite[SPRITE.DOOR_DIAMOND_CLOSE][SPRITE.DAY] = CTI (create_door_diamond (scale * 1.5, true,
            ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
        sprite[SPRITE.DOOR_DIAMOND_CLOSE][SPRITE.NIGHT] = CTI (create_door_diamond (scale * 1.5, true,
            ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));

        sprite[SPRITE.DOOR_DIAMOND_OPEN] = [];
        sprite[SPRITE.DOOR_DIAMOND_OPEN][SPRITE.DAY] = CTI (create_door_diamond (scale * 1, false,
            ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]/*["#3a3513", "#3a3513", "#4f4819", "#4f4819", "#3a3513", "#4f4819"]*/));
        sprite[SPRITE.DOOR_DIAMOND_OPEN][SPRITE.NIGHT] = CTI (create_door_diamond (scale * 1, false,
            ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]/*["#08261f", "#08261f", "#0b342b", "#0b342b", "#08261f", "#0b342b"]*/));


        sprite[SPRITE.CHEST] = [];
        sprite[SPRITE.CHEST][SPRITE.DAY] = CTI (create_chest (scale * 0.5, true,
            ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]));
        sprite[SPRITE.CHEST][SPRITE.NIGHT] = CTI (create_chest (scale * 0.5, true,
            ["#032428", "#266161", "#2b6664", "#123335", "#1f5453", "#1f5453", "#1f5453", "#2b6664", "#2b6664", "#2b6664"]));
        sprite[SPRITE.CHEST][2] = CTI(create_chest(.5, !0, "#4d0000 #4d0000 #4d0000 #4d0000 #4d0000 #614627 #614627 #c4a23a #c4a23a #c4a23a".split(" ")));

        sprite[SPRITE.TREASURE_CHEST] = [];
        sprite[SPRITE.TREASURE_CHEST][SPRITE.DAY] = CTI (create_treasure_chest (scale * 0.5,
            ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627"]));
        sprite[SPRITE.TREASURE_CHEST][SPRITE.NIGHT] = CTI (create_treasure_chest (scale * 0.5,
            ["#032428", "#266161", "#2b6664", "#123335", "#1f5453"]));

        sprite[SPRITE.RABBIT]               = [];
        sprite[SPRITE.RABBIT][SPRITE.DAY]   = CTI (create_rabbit (scale * 0.9,
            ["#0e3022", "#ee97bf", "#FFFFFF", "#000000", "#ffffff"]));
        sprite[SPRITE.RABBIT][SPRITE.NIGHT] = CTI (create_rabbit (scale * 0.9,
            ["#030d14", "#4d1b59", "#5d3f77", "#220e26", "#ffffff"]));

        sprite[SPRITE.SPIDER]               = [];
        sprite[SPRITE.SPIDER][SPRITE.DAY]   = CTI (create_rotated_img (Math.PI, create_spider (scale * 0.9,
            ["#000000", "#b7252c", "#b7252c", "#b7252c", "#FFFFFF", "#000000"])));
        sprite[SPRITE.SPIDER][SPRITE.NIGHT] = CTI (create_rotated_img (Math.PI, create_spider (scale * 0.9,
            ["#030d14", "#401d49", "#b7252c", "#401d49", "#FFFFFF", "#000000"])));

        sprite[SPRITE.WEB] = CTI (create_web (scale * 0.6, ["#FFFFFF"]));

        sprite[SPRITE.WOLF]               = [];
        sprite[SPRITE.WOLF][SPRITE.DAY]   = CTI (create_wolf (scale * 1.1,
            ["#0e3022", "#231f20", "#b7252c", "#7d7679", "#ffffff"]));
        sprite[SPRITE.WOLF][SPRITE.NIGHT] = CTI (create_wolf (scale * 1.1,
            ["#030d14", "#1e181c", "#462966", "#3e3e4a", "#ffffff"]));

        sprite[SPRITE.EARMUFFS] = [];
        sprite[SPRITE.EARMUFFS][SPRITE.DAY] = CTI (create_earmuff (scale * 0.6, true,
            ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]));
        sprite[SPRITE.EARMUFFS][SPRITE.NIGHT] = CTI (create_earmuff (scale * 0.6, true,
            ["#478e8b", "#327e73", "#073030", "#08403f"]));

        sprite[SPRITE.COAT] = [];
        sprite[SPRITE.COAT][SPRITE.DAY] = CTI (create_coat (scale * 0.6, true,
            ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]));
        sprite[SPRITE.COAT][SPRITE.NIGHT] = CTI (create_coat (scale * 0.6, true,
            ["#073030", "#08403f", "#478e8b", "#327e73"]));

        sprite[SPRITE.CAP_SCARF] = [];
        sprite[SPRITE.CAP_SCARF][SPRITE.DAY] = CTI (create_cap_scarf (scale * 0.63, true,
            ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]));
        sprite[SPRITE.CAP_SCARF][SPRITE.NIGHT] = CTI (create_cap_scarf (scale * 0.63, true,
            ["#073030", "#368981", "#1c635e", "#7bbab4", "#469e95"]));

        /*WINTER*/
        // Christmas
        sprite[SPRITE.CHRISTMAS_HAT] = [];
        sprite[SPRITE.CHRISTMAS_HAT][SPRITE.DAY] = CTI (create_christmas_hat (scale * 0.6, true,
            ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]));
        sprite[SPRITE.CHRISTMAS_HAT][SPRITE.NIGHT] = CTI (create_christmas_hat (scale * 0.6, true,
            ["#073030", "#392966", "#2a194f", "#433379", "#66aaa3", "#469e95"]));

        sprite[SPRITE.ELF_HAT] = [];
        sprite[SPRITE.ELF_HAT][SPRITE.DAY] = CTI (create_elf_hat (scale * 0.6, true,
            ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]));
        sprite[SPRITE.ELF_HAT][SPRITE.NIGHT] = CTI (create_elf_hat (scale * 0.6, true,
            ["#073030", "#124949", "#0e3838", "#15514f", "#66aaa3", "#469e95", "#292f66", "#202559"]));

    //	sprite[SPRITE.BAG] = [];
    //	sprite[SPRITE.BAG][SPRITE.DAY] = CTI (create_bag (scale * 0.6, false,
    //		["#872f13","#471e12"]));
    //	sprite[SPRITE.BAG][SPRITE.NIGHT] = CTI (create_bag (scale * 0.6, false,
    //		["#0e3336", "#092626"]));

        sprite[SPRITE.BREAD_OVEN_ON] = [];
        sprite[SPRITE.BREAD_OVEN_ON][SPRITE.DAY] = CTI (create_bread_oven (scale * 0.42, true,
            ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#343d39"]));
        sprite[SPRITE.BREAD_OVEN_ON][SPRITE.NIGHT] = CTI (create_bread_oven (scale * 0.42, true,
            ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#192225"]));

        sprite[SPRITE.BREAD_LIGHT_UP] = [];
        sprite[SPRITE.BREAD_LIGHT_UP][SPRITE.DAY] = CTI (create_bread_light_up (scale * 0.9,
            ["#e4c027"]));
        sprite[SPRITE.BREAD_LIGHT_UP][SPRITE.NIGHT] = CTI (create_bread_light_up (scale * 0.9,
            ["#D8E57F"]));

        sprite[SPRITE.BREAD_OVEN_OFF] = [];
        sprite[SPRITE.BREAD_OVEN_OFF][SPRITE.DAY] = CTI (create_bread_oven_off (scale * 0.42, true,
            ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]));
        sprite[SPRITE.BREAD_OVEN_OFF][SPRITE.NIGHT] = CTI (create_bread_oven_off (scale * 0.42, true,
            ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#1b2529"]));

        sprite[SPRITE.BREAD_OVEN_UI] = CTI (create_bread_oven_ui (scale * 1,
            ["#596560", "#394841", "#543B1C", "#694D28", "#7E8A85", "#384740", "#525956"]));
        sprite[SPRITE.FURNACE_ON] = [];
        sprite[SPRITE.FURNACE_ON][SPRITE.DAY] = CTI (create_furnace_on (scale * 0.5, true,
            ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]));
        sprite[SPRITE.FURNACE_ON][SPRITE.NIGHT] = CTI (create_furnace_on (scale * 0.5, true,
            ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#ffdc73", "#fffce2", "#fef259"]));

        sprite[SPRITE.FURNACE_OFF] = [];
        sprite[SPRITE.FURNACE_OFF][SPRITE.DAY] = CTI (create_furnace_off (scale * 0.5, true,
            ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#4f4f4f", "#6c6c6c", "#454545"]));
        sprite[SPRITE.FURNACE_OFF][SPRITE.NIGHT] = CTI (create_furnace_off (scale * 0.5, true,
            ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#152229", "#0c1113", "#0c1113"]));

        sprite[SPRITE.FURNACE_SLOT] = CTI (create_furnace_slot (scale * 0.8, true,
        ["#5f6061", "#939393"]/*["#8f471d", "#a65f15"]*/));

        sprite[SPRITE.FURNACE_BUTTON] = create_craft_button (1,
            [{ f : create_wood_fire, x : 0, y : 0, a : 1, r : Math.PI / 2.5,
                c : ["#4d2d14", "#432516"]}],
            0.3, ["#494949", "#5b5858", "#3d3b3b"]/*["#c88241", "#d1713a", "#a75a2d"]*/, 1);

    sprite[SPRITE.BED] = [];
    sprite[SPRITE.BED][SPRITE.DAY] = CTI (create_bed (scale * 1, true,
            ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139",
        "#3f332a", "#86509b", "#703a99"]));
    sprite[SPRITE.BED][SPRITE.NIGHT] = CTI (create_bed (scale * 1, true,
            ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#0b424f", "#0b3432",
        "#092b29", "#2b0b4a", "#23073e"]));

    sprite[SPRITE.BED_TOP] = [];
    sprite[SPRITE.BED_TOP][SPRITE.DAY] = CTI (create_bed_top (scale * 1, true,
        ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139",
        "#3f332a", "#86509b", "#703a99"]));
    sprite[SPRITE.BED_TOP][SPRITE.NIGHT] = CTI (create_bed_top (scale * 1, true,
        ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#083b37", "#0b3432",
        "#092b29", "#2b0b4a", "#23073e"]));

        sprite[SPRITE.CRAB_SPEAR]               = [];
        sprite[SPRITE.CRAB_SPEAR][SPRITE.DAY]   = CTI (create_rotated_img (3, create_crab_spear (scale * 0.7, true,
            ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"])));
        sprite[SPRITE.CRAB_SPEAR][SPRITE.NIGHT] = CTI (create_rotated_img (3, create_crab_spear (scale * 0.7, true,
            ["#0d1b1c", "#0b3432", "#092b29", "#34255d", "#281b4e", "#2f2157", "#281b4e", "#104d5b", "#083b37"])));

        sprite[SPRITE.WOOD_SPEAR]               = [];
        sprite[SPRITE.WOOD_SPEAR][SPRITE.DAY]   = CTI (create_rotated_img (3, create_wood_spear (scale * 0.7, true,
            ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"])));
        sprite[SPRITE.WOOD_SPEAR][SPRITE.NIGHT] = CTI (create_rotated_img (3, create_wood_spear (scale * 0.7, true,
            ["#0d1b1c", "#0b3432", "#092b29", "#0e4d49", "#1a6c67", "#07322f"])));

        sprite[SPRITE.SPEAR]               = [];
        sprite[SPRITE.SPEAR][SPRITE.DAY]   = CTI (create_rotated_img (3, create_stonespear (scale * 0.65, true,
            ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"])));
        sprite[SPRITE.SPEAR][SPRITE.NIGHT] = CTI (create_rotated_img (3, create_stonespear (scale * 0.65, true,
            ["#0d1b1c", "#0d2e33", "#0b2326", "#1a6c67", "#07322f", "#374950", "#101f26", "#2c3c42", "#485e66", "#1f343f", "#546e78"])));

        sprite[SPRITE.GOLD_SPEAR]               = [];
        sprite[SPRITE.GOLD_SPEAR][SPRITE.DAY]   = CTI (create_rotated_img (3, create_goldspear (scale * 0.67, true,
            ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"])));
        sprite[SPRITE.GOLD_SPEAR][SPRITE.NIGHT] = CTI (create_rotated_img (3, create_goldspear (scale * 0.67, true,
            ["#030d14", "#263947", "#182935", "#33916d", "#197c62", "#3eab81", "#43aa82", "#29997c", "#52be94"])));

        sprite[SPRITE.DIAMOND_SPEAR]               = [];
        sprite[SPRITE.DIAMOND_SPEAR][SPRITE.DAY]   = CTI (create_rotated_img (3, create_diamondspear (scale * 0.67, true,
            ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"])));
        sprite[SPRITE.DIAMOND_SPEAR][SPRITE.NIGHT] = CTI (create_rotated_img (3, create_diamondspear (scale * 0.67, true,
            ["#0d1b1c", "#111316", "#0a0b0c", "#4bbbc3", "#23a19d", "#54c5cd", "#4ad2ce", "#3dc4c0", "#73dde5"])));

        sprite[SPRITE.AMETHYST_SPEAR]               = [];
        sprite[SPRITE.AMETHYST_SPEAR][SPRITE.DAY]   = CTI (create_rotated_img (3, create_amespear (scale * 0.67, true,
            ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6",  "#9e35be", "#8c29aa","#b864d6"])));
        sprite[SPRITE.AMETHYST_SPEAR][SPRITE.NIGHT] = CTI (create_rotated_img (3, create_amespear (scale * 0.67, true,
            ["#0d1b1c", "#111316", "#0a0b0c", "#6e43bf", "#673fa4", "#784bcc", "#845bc6", "#764eb5", "#966be7"])));

        sprite[SPRITE.DRAGON_SPEAR]               = [];
        sprite[SPRITE.DRAGON_SPEAR][SPRITE.DAY]   = CTI (create_rotated_img (3, create_dragon_spear (scale * 1, true,
            ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"])));
        sprite[SPRITE.DRAGON_SPEAR][SPRITE.NIGHT] = CTI (create_rotated_img (3, create_dragon_spear (scale * 1, true,
            ["#0d1b1c", "#1c2026", "#0a0b0c", "#7dc6d9", "#6cbacf", "#87d2e6", "#49b2cf", "#87d2e6"])));

        sprite[SPRITE.HAMMER]             = [];
        sprite[SPRITE.HAMMER][SPRITE.DAY] = CTI (create_rotated_img (3, create_hammer (scale * 1, true,
            ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
        sprite[SPRITE.HAMMER][SPRITE.NIGHT] = CTI (create_rotated_img (3, create_hammer (scale * 1, true,
            ["#030d14", "#263947", "#182935", "#485e66", "#1f343f"])));

    /*sprite[SPRITE.HAMMER_DRAGON]             = [];
        sprite[SPRITE.HAMMER_DRAGON][SPRITE.DAY] = CTI (create_hammer_dragon (scale * 1, true,
            ["#0d1b1c", "#43747a", "#8bbcba", "#6faca9", "#a5cbc9", "#c6dfdd"]));
        sprite[SPRITE.HAMMER_DRAGON][SPRITE.NIGHT] = CTI (create_hammer_dragon (scale * 1, true,
            ["#030d14", "#263947", "#182935", "#485e66", "#1f343f", "#a979e9"]));
        sprite[SPRITE.INV_HAMMER_DRAGON]           = create_craft_button (1,
            [{ f : create_hammer_dragon, x : 2, y : 0, a : 1, r : Math.PI / 5,
                c : ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]}],
            0.52, ["#3ba578", "#4eb687", "#3da34d"];
        sprite[SPRITE.CRAFT_HAMMER_DRAGON] = sprite[SPRITE.INV_HAMMER_DRAGON];
    */
        sprite[SPRITE.SPANNER]             = [];
        sprite[SPRITE.SPANNER][SPRITE.DAY] = CTI (create_rotated_img (3, create_spanner (scale * 0.5, true,
            ["#0d1b1c", "#939393", "#5f6061"])));
        sprite[SPRITE.SPANNER][SPRITE.NIGHT] = CTI (create_rotated_img (3, create_spanner (scale * 0.5, true,
            ["#030d14", "#485e66", "#1f343f"])));


        sprite[SPRITE.SUPER_HAMMER] = [];
        sprite[SPRITE.SUPER_HAMMER][SPRITE.DAY] = CTI (create_rotated_img (3, create_superhammer (scale * 1, true,
            ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb"])));
        sprite[SPRITE.SUPER_HAMMER][SPRITE.NIGHT] = CTI (create_rotated_img (3, create_superhammer (scale * 1, true,
            ["#0d1b1c", "#2a4f4a", "#1e423d", "#1e0302", "#096b3f", "#3db76f", "#118254", "#40c696", "#0c7a50", "#59d8a4", "#249376", "#80d8c7"])));

        sprite[SPRITE.HAMMER_GOLD]             = [];
        sprite[SPRITE.HAMMER_GOLD][SPRITE.DAY] = CTI (create_rotated_img (3, create_hammer (scale * 1, true,
            ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
        sprite[SPRITE.HAMMER_GOLD][SPRITE.NIGHT] = CTI (create_rotated_img (3, create_hammer (scale * 1, true,
            ["#0d1b1c", "#0d2e33", "#0b2326", "#43aa82", "#29997c"])));

        sprite[SPRITE.HAMMER_DIAMOND]             = [];
        sprite[SPRITE.HAMMER_DIAMOND][SPRITE.DAY] = CTI (create_rotated_img (3, create_hammer (scale * 1, true,
            ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
        sprite[SPRITE.HAMMER_DIAMOND][SPRITE.NIGHT] = CTI (create_rotated_img (3, create_hammer (scale * 1, true,
            ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));

        sprite[SPRITE.HAMMER_AMETHYST]             = [];
        sprite[SPRITE.HAMMER_AMETHYST][SPRITE.DAY] = CTI (create_rotated_img (3, create_hammer (scale * 1, true,
            ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
        sprite[SPRITE.HAMMER_AMETHYST][SPRITE.NIGHT] = CTI (create_rotated_img (3, create_hammer (scale * 1, true,
            ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));

        sprite[SPRITE.LOCK] = [];
        sprite[SPRITE.LOCK][SPRITE.DAY] = CTI (create_lock (scale * 0.55, false,
            ["#141414","#816511","#c4a23a","#3a3a3a"]));
        sprite[SPRITE.LOCK][SPRITE.NIGHT] = CTI (create_lock (scale * 0.55, false,
            ["#080707","#133d3c","#2b6664","#1b2529"]));
        sprite[SPRITE.PADLOCK] = [];
        sprite[SPRITE.PADLOCK].push (CTI (create_lock (scale * 0.8, false, ["#141414","#816511","#c4a23a","#3a3a3a"])));
        sprite[SPRITE.PADLOCK].push (CTI (create_lock (scale * 0.8, false, ["#141414","#9f7d17","#dab33c","#474545"])));
        sprite[SPRITE.PADLOCK].push (CTI (create_lock (scale * 0.8, false, ["#141414","#73590d","#a88a2c","#2a2828"])));

        sprite[SPRITE.LOCKED] = [];
        sprite[SPRITE.LOCKED].push (sprite[SPRITE.PADLOCK][0]);
        sprite[SPRITE.LOCKED].push (sprite[SPRITE.PADLOCK][0]);
        sprite[SPRITE.LOCKED].push (sprite[SPRITE.PADLOCK][0]);

        sprite[SPRITE.LOCKPICK] = [];
        sprite[SPRITE.LOCKPICK][SPRITE.DAY] = CTI (create_lockpick (scale * 0.06, false,
            ["#141414","#c4a23a","#816511"]));
        sprite[SPRITE.LOCKPICK][SPRITE.NIGHT] = CTI (create_lockpick (scale * 0.06, false,
            ["#030d14","#2b6664", "#133d3c"]));
        sprite[SPRITE.KEY] = [];
        sprite[SPRITE.KEY].push (CTI (create_lockpick (scale * 0.08, false, ["#141414","#c4a23a","#816511"])));
        sprite[SPRITE.KEY].push (CTI (create_lockpick (scale * 0.08, false, ["#141414","#e2bd4e","#a38018"])));
        sprite[SPRITE.KEY].push (CTI (create_lockpick (scale * 0.08, false, ["#141414","#b0902e","#634d09"])));

        sprite[SPRITE.DRAGON_HEART] = create_craft_button (1.5,
            [{ f : create_dragon_heart, x : 0, y : 0, a : 1, r : 0,
            c : ["#141414","#178a99","#0a6372","#03282e"] }],
            0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);

        sprite[SPRITE.RESURRECTION_GROUND] = [];
        sprite[SPRITE.RESURRECTION_GROUND][SPRITE.DAY] = CTI (create_resurrection_ground (scale * 0.8, true,
            ["#347f93", "#54a4ba"]));
        sprite[SPRITE.RESURRECTION_GROUND][SPRITE.NIGHT] = CTI (create_resurrection_ground (scale * 0.8, true,
            ["#98ede3", "#94f2e7"]));

        sprite[SPRITE.RESURRECTION_HOLE] = [];
        sprite[SPRITE.RESURRECTION_HOLE][SPRITE.DAY] = CTI (create_resurrection_hole (scale * 0.8, true,
            ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]));
        sprite[SPRITE.RESURRECTION_HOLE][SPRITE.NIGHT] = CTI (create_resurrection_hole (scale * 0.8, true,
            ["#59c9c0", "#83ddd4", "#3fa097", "#90ddd9"]));

        sprite[SPRITE.RESURRECTION_ROTATE] = [];
        sprite[SPRITE.RESURRECTION_ROTATE][SPRITE.DAY] = CTI (create_resurrection_rotate (scale * 0.8, true,
            ["#a9e4ed", "#86d4e0"]));
        sprite[SPRITE.RESURRECTION_ROTATE][SPRITE.NIGHT] = CTI (create_resurrection_rotate (scale * 0.8, true,
            ["#83ddd4", "#485e66"]));

        sprite[SPRITE.RESURRECTION] = [];
        sprite[SPRITE.RESURRECTION][SPRITE.DAY] = CTI (create_resurrection (scale * 0.8, true,
            ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc"]));
        sprite[SPRITE.RESURRECTION][SPRITE.NIGHT] = CTI (create_resurrection (scale * 0.8, true,
            ["#98ede3", "#94f2e7", "#1f343f", "#59c9c0", "#83ddd4", "#485e66", "#2d484f", "#546d6d", "#597b84"]));

        sprite[SPRITE.EMERALD_MACHINE_GROUND] = [];
        sprite[SPRITE.EMERALD_MACHINE_GROUND][SPRITE.DAY] = IMAGES.EMERALD_MACHINE_GROUNDD;
        sprite[SPRITE.EMERALD_MACHINE_GROUND][SPRITE.NIGHT] = IMAGES.EMERALD_MACHINE_GROUNDN;

        sprite[SPRITE.EMERALD_MACHINE_HOLE] = [];
        sprite[SPRITE.EMERALD_MACHINE_HOLE][SPRITE.DAY] = IMAGES.EMERALD_MACHINE_HOLED;
        sprite[SPRITE.EMERALD_MACHINE_HOLE][SPRITE.NIGHT] = IMAGES.EMERALD_MACHINE_HOLEN;

        sprite[SPRITE.EMERALD_MACHINE_ROTATE] = [];
        sprite[SPRITE.EMERALD_MACHINE_ROTATE][SPRITE.DAY] = IMAGES.EMERALD_MACHINE_ROTATED;
        sprite[SPRITE.EMERALD_MACHINE_ROTATE][SPRITE.NIGHT] = IMAGES.EMERALD_MACHINE_ROTATEN;

        sprite[SPRITE.EMERALD_MACHINE] = [];
        sprite[SPRITE.EMERALD_MACHINE][SPRITE.DAY] = IMAGES.EMERALD_MACHINED;
        sprite[SPRITE.EMERALD_MACHINE][SPRITE.NIGHT] = IMAGES.EMERALD_MACHINEN;

        sprite[SPRITE.EXTRACTOR_MACHINE0_STONE] = [];
        sprite[SPRITE.EXTRACTOR_MACHINE0_STONE][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE0_STONED;
        sprite[SPRITE.EXTRACTOR_MACHINE0_STONE][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE0_STONEN;

        sprite[SPRITE.EXTRACTOR_MACHINE_STONE] = [];
        sprite[SPRITE.EXTRACTOR_MACHINE_STONE][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE_STONED;
        sprite[SPRITE.EXTRACTOR_MACHINE_STONE][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE_STONEN;

        sprite[SPRITE.EXTRACTOR_MACHINE0_GOLD] = [];
        sprite[SPRITE.EXTRACTOR_MACHINE0_GOLD][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE0_GOLDD;
        sprite[SPRITE.EXTRACTOR_MACHINE0_GOLD][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE0_GOLDN;

        sprite[SPRITE.EXTRACTOR_MACHINE_GOLD] = [];
        sprite[SPRITE.EXTRACTOR_MACHINE_GOLD][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE_GOLDD;
        sprite[SPRITE.EXTRACTOR_MACHINE_GOLD][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE_GOLDN;

        sprite[SPRITE.EXTRACTOR_MACHINE0_DIAMOND] = [];
        sprite[SPRITE.EXTRACTOR_MACHINE0_DIAMOND][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE0_DIAMONDD;
        sprite[SPRITE.EXTRACTOR_MACHINE0_DIAMOND][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE0_DIAMONDN;

        sprite[SPRITE.EXTRACTOR_MACHINE_DIAMOND] = [];
        sprite[SPRITE.EXTRACTOR_MACHINE_DIAMOND][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE_DIAMONDD;
        sprite[SPRITE.EXTRACTOR_MACHINE_DIAMOND][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE_DIAMONDN;

        sprite[SPRITE.EXTRACTOR_MACHINE0_AMETHYST] = [];
        sprite[SPRITE.EXTRACTOR_MACHINE0_AMETHYST][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE0_AMETHYSTD;
        sprite[SPRITE.EXTRACTOR_MACHINE0_AMETHYST][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE0_AMETHYSTN;

        sprite[SPRITE.EXTRACTOR_MACHINE_AMETHYST] = [];
        sprite[SPRITE.EXTRACTOR_MACHINE_AMETHYST][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE_AMETHYSTD;
        sprite[SPRITE.EXTRACTOR_MACHINE_AMETHYST][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE_AMETHYSTN;

        sprite[SPRITE.EXTRACTOR_MACHINE0_REIDITE] = [];
        sprite[SPRITE.EXTRACTOR_MACHINE0_REIDITE][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE0_REIDITED;
        sprite[SPRITE.EXTRACTOR_MACHINE0_REIDITE][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE0_REIDITEN;

        sprite[SPRITE.EXTRACTOR_MACHINE_REIDITE] = [];
        sprite[SPRITE.EXTRACTOR_MACHINE_REIDITE][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE_REIDITED;
        sprite[SPRITE.EXTRACTOR_MACHINE_REIDITE][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE_REIDITEN;

        sprite[SPRITE.FIREFLY] = [];
        sprite[SPRITE.FIREFLY][SPRITE.DAY] = IMAGES.FIREFLYD;
        sprite[SPRITE.FIREFLY][SPRITE.NIGHT] = IMAGES.FIREFLYN;

        sprite[SPRITE.HURT_FIREFLY] = IMAGES.HURT_FIREFLY;

        sprite[SPRITE.TOTEM]               = [],
        sprite[SPRITE.TOTEM][SPRITE.DAY]   = CTI (create_totem (scale * 0.75, true,
            ["#0d1b1c", "#4c3a15", "#634828", "#564021"]));
        sprite[SPRITE.TOTEM][SPRITE.NIGHT] = CTI (create_totem (scale * 0.75, true,
            ["#030d14", "#0d2e33", "#184747", "#123b3f"]));

        sprite[SPRITE.ICON_MEMBER] = CTI (create_icon_team (scale * 0.3, ["#092813", "#1f773d"], 0));
        sprite[SPRITE.ICON_LEADER] = CTI (create_icon_team (scale * 0.3, ["#092813", "#1f773d"], 1));
    sprite[SPRITE.VERIFIED] = CTI (create_verified (scale * 0.6, ["#092813", "#1f773d"]));

        sprite[SPRITE.TEAM_BUTTON] = [];
        sprite[SPRITE.TEAM_BUTTON].push (CTI (create_team_button (scale * 0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 0)));
        sprite[SPRITE.TEAM_BUTTON].push (CTI (create_team_button (scale * 0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 0)));
        sprite[SPRITE.TEAM_BUTTON].push (CTI (create_team_button (scale * 0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 0)));

        sprite[SPRITE.FULL_TEAM_BUTTON] = [];
        var img = CTI (create_team_button (scale * 0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 0));
        sprite[SPRITE.FULL_TEAM_BUTTON].push (img);
        sprite[SPRITE.FULL_TEAM_BUTTON].push (img);
        sprite[SPRITE.FULL_TEAM_BUTTON].push (img);

        sprite[SPRITE.MANAGE_TEAM_BUTTON] = []
        sprite[SPRITE.MANAGE_TEAM_BUTTON].push (CTI (create_team_button (scale * 0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 1)));
        sprite[SPRITE.MANAGE_TEAM_BUTTON].push (CTI (create_team_button (scale * 0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 1)));
        sprite[SPRITE.MANAGE_TEAM_BUTTON].push (CTI (create_team_button (scale * 0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 1)));

        sprite[SPRITE.DELAY_SPIKE] = CTI (create_spiketimer (scale * 0.30, ["#FFFFFF"]));
        sprite[SPRITE.DELAY_WALL]  = CTI (create_delay_wall (scale * 0.30, ["#FFFFFF"]));
        sprite[SPRITE.DELAY_TEAM]  = CTI (create_icon_team (scale * 0.40, ["rgba(255, 255, 255, 0)", "#FFFFFF"], 0));
        sprite[SPRITE.DELAY_DRINK] = CTI (create_rotated_img (Math.PI/5, create_drink_delay (scale * 0.20, ["#FFFFFF"])));

        sprite[SPRITE.AMETHYST_HELMET] = [],
        sprite[SPRITE.AMETHYST_HELMET][SPRITE.DAY] = CTI (create_amethyst_helmet (scale * 0.85, true,
            ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]));
        sprite[SPRITE.AMETHYST_HELMET][SPRITE.NIGHT] = CTI (create_amethyst_helmet (scale * 0.85, true,
            ["#0d1b1c", "#4e4e93", "#393977", "#444187", "#2b9390", "#277a74", "#7da8db"]));

        sprite[SPRITE.SHOW_TEAM_BUTTON] = []
        sprite[SPRITE.SHOW_TEAM_BUTTON].push (CTI (create_team_button (scale * 0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 1)));
        sprite[SPRITE.SHOW_TEAM_BUTTON].push (CTI (create_team_button (scale * 0.7, ["#38130C", "#853D22", "#391402", "#3D3016", "#873E22"], 1)));
        sprite[SPRITE.SHOW_TEAM_BUTTON].push (CTI (create_team_button (scale * 0.7, ["#1C0A06", "#6B3019", "#1D0A06", "#251D0C", "#6A301A"], 1)));

        sprite[SPRITE.HOOD] = [],
        sprite[SPRITE.HOOD][SPRITE.DAY] = CTI (create_hood (scale * 0.37, true,
            ["#2a2938", "#242330", "#313041"]));
        sprite[SPRITE.HOOD][SPRITE.NIGHT] = CTI (create_hood (scale * 0.37, true,
            ["#1b1e30", "#161921", "#252f3e"]));

        sprite[SPRITE.WINTER_HOOD] = [],
        sprite[SPRITE.WINTER_HOOD][SPRITE.DAY] = CTI (create_winter_hood (scale * 0.17, true,
            ["#2a2938", "#242330", "#313041", "#1b1a25", "#d62c0e"]));
        sprite[SPRITE.WINTER_HOOD][SPRITE.NIGHT] = CTI (create_winter_hood (scale * 0.17, true,
            ["#1b1e30", "#161921", "#252f3e", "#0a0c11", "#d62c0e"]));

        sprite[SPRITE.WINTER_PEASANT] = [],
        sprite[SPRITE.WINTER_PEASANT][SPRITE.DAY] = CTI (create_peasant (scale * 0.55, true,
            ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"], 1));
        sprite[SPRITE.WINTER_PEASANT][SPRITE.NIGHT] = CTI (create_peasant (scale * 0.55, true,
            ["#1d1d22", "#216661", "#134945", "#2b8079", "#17504c"], 1));

        sprite[SPRITE.PEASANT] = [],
        sprite[SPRITE.PEASANT][SPRITE.DAY] = CTI (create_peasant (scale * 0.55, true,
            ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"], 0));
        sprite[SPRITE.PEASANT][SPRITE.NIGHT] = CTI (create_peasant (scale * 0.55, true,
            ["#1d1d22", "#1b5752", "#0e3b37", "#23706a", "#11413e", "#0b322f"], 0));

        sprite[SPRITE.CROWN_GREEN] = [],
        sprite[SPRITE.CROWN_GREEN][SPRITE.DAY] = CTI (create_crown_life (scale * 0.2, true,
            ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]));
        sprite[SPRITE.CROWN_GREEN][SPRITE.NIGHT] = CTI (create_crown_life (scale * 0.2, true,
            ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#3db76f", "#118254", "#40c696"]));

        sprite[SPRITE.CROWN_ORANGE] = [],
        sprite[SPRITE.CROWN_ORANGE][SPRITE.DAY] = CTI (create_crown_life (scale * 0.2, true,
            ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]));
        sprite[SPRITE.CROWN_ORANGE][SPRITE.NIGHT] = CTI (create_crown_life (scale * 0.2, true,
            ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#69b681", "#509a75", "#7ec387"]));

        sprite[SPRITE.CROWN_BLUE] = [],
        sprite[SPRITE.CROWN_BLUE][SPRITE.DAY] = CTI (create_crown_life (scale * 0.2, true,
            ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]));
        sprite[SPRITE.CROWN_BLUE][SPRITE.NIGHT] = CTI (create_crown_life (scale * 0.2, true,
            ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#19899e", "#16688b", "#4ea3c7"]));

    sprite[SPRITE.CROWN_CRAB] = [],
    sprite[SPRITE.CROWN_CRAB][SPRITE.DAY] = CTI (create_crab_crown (scale * 0.24, true,
        ["#000000", "#b03431", "#94312d", "#bd3c33", "#e45936"]));
    sprite[SPRITE.CROWN_CRAB][SPRITE.NIGHT] = CTI (create_crab_crown (scale * 0.24, true,
        ["#000000", "#1b103e", "#190f3b", "#261a4e", "#34255d"]));

        sprite[SPRITE.DRAGON_HELMET] = [],
        sprite[SPRITE.DRAGON_HELMET][SPRITE.DAY] = CTI (create_dragon_helmet (scale * 0.32, true,
            ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48","#1b3a3a", "#80ccca", "#59ada7"]));
        sprite[SPRITE.DRAGON_HELMET][SPRITE.NIGHT] = CTI (create_dragon_helmet (scale * 0.32, true,
            ["#0d1b1c", "#70c1d6", "#49b2cf", "#87cad9", "#367c93", "#113743", "#0c2c36", "#51a2b8", "#3a8ea4"]));

        sprite[SPRITE.DRAGON_SWORD] = [];
        sprite[SPRITE.DRAGON_SWORD][SPRITE.DAY] = CTI (create_rotated_img (3, create_dragon_sword (scale * 0.9, true,
            ["#0d1b1c", "#284c4a", "#193533", "#c8efef", "#7eccbb"])));
        sprite[SPRITE.DRAGON_SWORD][SPRITE.NIGHT] = CTI (create_rotated_img (3, create_dragon_sword (scale * 0.9, true,
            ["#0d1b1c", "#18332e", "#112320", "#87d2e6", "#49b2cf"])));

        sprite[SPRITE.DRAGON_SWORD_HALO] = [];
        sprite[SPRITE.DRAGON_SWORD_HALO][SPRITE.DAY] = CTI (create_rotated_img (3, create_dragon_sword (scale * 1, true,
            [undefined, undefined, undefined, "#c8efef", "#c8efef"])));
        sprite[SPRITE.DRAGON_SWORD_HALO][SPRITE.NIGHT] = CTI (create_rotated_img (3, create_dragon_sword (scale * 1, true,
            [undefined, undefined, undefined, "#87d2e6", "#87d2e6"])));

        sprite[SPRITE.QUEST_BUTTON] = [];
        sprite[SPRITE.QUEST_BUTTON].push (CTI (create_quest_button (scale * 0.3, true,
            ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320","#eda80d"], 0)));
        sprite[SPRITE.QUEST_BUTTON].push (CTI (create_quest_button (scale * 0.3, true,
            ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320","#eda80d"], 1)));
        sprite[SPRITE.QUEST_BUTTON].push (CTI (create_quest_button (scale * 0.3, true,
            ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320","#d7990c"], 1)));

        sprite[SPRITE.MARKET_BUTTON] = [];
        sprite[SPRITE.MARKET_BUTTON].push (CTI (create_market_button (scale * 0.7,
            ["#392C16", "#5E3E1A","#85592c", "#eda80d"], 0)));
        sprite[SPRITE.MARKET_BUTTON].push (CTI (create_market_button (scale * 0.7,
            ["#392C16", "#5E3E1A","#85592c","#eda80d"], 1)));
        sprite[SPRITE.MARKET_BUTTON].push (CTI (create_market_button (scale * 0.7,
            ["#392C16", "#5E3E1A","#85592c","#eda80d"], 1)));

        sprite[SPRITE.SOUND_BUTTON_ON] = [];
        sprite[SPRITE.SOUND_BUTTON_ON].push (CTI (create_music_button (scale * 0.4,
            ["#0d1b1c", "#392C16", "#5E3E1A","#eda80d"], 0, 1)));
        sprite[SPRITE.SOUND_BUTTON_ON].push (CTI (create_music_button (scale * 0.4,
            ["#0d1b1c", "#392C16", "#5E3E1A","#eda80d"], 1, 1)));
        sprite[SPRITE.SOUND_BUTTON_ON].push (CTI (create_music_button (scale * 0.4,
            ["#0d1b1c", "#392C16", "#5E3E1A","#d7990c"], 1, 1)));

        sprite[SPRITE.SOUND_BUTTON_OFF] = [];
        sprite[SPRITE.SOUND_BUTTON_OFF].push (CTI (create_music_button (scale * 0.4,
            ["#0d1b1c", "#392C16", "#5E3E1A","#eda80d"], 0, 0)));
        sprite[SPRITE.SOUND_BUTTON_OFF].push (CTI (create_music_button (scale * 0.4,
            ["#0d1b1c", "#392C16", "#5E3E1A","#eda80d"], 1, 0)));
        sprite[SPRITE.SOUND_BUTTON_OFF].push (CTI (create_music_button (scale * 0.4,
            ["#0d1b1c", "#392C16", "#5E3E1A","#d7990c"], 1, 0)));
        /*sprite[SPRITE.CURSED_SWORD] = [];
        sprite[SPRITE.CURSED_SWORD][SPRITE.DAY] = CTI (create_rotated_img (3, create_cursed_sword (scale * 0.8, true,
            ["#0d1b1c", "#b70404", "#ff0000", "#fc5e5e", "#2b0714", "#050c28"])));
        sprite[SPRITE.CURSED_SWORD][SPRITE.NIGHT] = CTI (create_rotated_img (3, create_cursed_sword (scale * 0.8, true,
            ["#0d1b1c", "#b70404", "#ff0000", "#fc5e5e", "#2b0714", "#050c28"])));

        sprite[SPRITE.INV_CURSED_SWORD]           = create_craft_button (1,
            [{ f : create_cursed_sword, x : 0, y : 0, a : 1, r : Math.PI / 5,
                c : ["#0d1b1c", "#b70404", "#ff0000", "#fc5e5e", "#2b0714", "#050c28"]}],
            0.55, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CRAFT_CURSED_SWORD] = sprite[SPRITE.INV_CURSED_SWORD];
    */
        sprite[SPRITE.SHOVEL] = [];
        sprite[SPRITE.SHOVEL][SPRITE.DAY] = CTI (create_rotated_img (3, create_shovel (scale * 0.7, true,
            ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"])));
        sprite[SPRITE.SHOVEL][SPRITE.NIGHT] = CTI (create_rotated_img (3, create_shovel (scale * 0.7, true,
            ["#0d1b1c", "#0d2e33", "#0b2326", "#485e66", "#1f343f", "#274352"])));

        sprite[SPRITE.SHOVEL_GOLD] = [];
        sprite[SPRITE.SHOVEL_GOLD][SPRITE.DAY] = CTI (create_rotated_img (3, create_shovel (scale * 0.7, true,
            ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#ada437"])));
        sprite[SPRITE.SHOVEL_GOLD][SPRITE.NIGHT] = CTI (create_rotated_img (3, create_shovel (scale * 0.7, true,
            ["#0d1b1c", "#263947", "#182935", "#43aa82", "#29997c", "#32916c"])));

        sprite[SPRITE.SHOVEL_DIAMOND] = [];
        sprite[SPRITE.SHOVEL_DIAMOND][SPRITE.DAY] = CTI (create_rotated_img (3, create_shovel (scale * 0.7, true,
            ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"])));
        sprite[SPRITE.SHOVEL_DIAMOND][SPRITE.NIGHT] = CTI (create_rotated_img (3, create_shovel (scale * 0.7, true,
            ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0", "#49bdc6"])));

        sprite[SPRITE.SHOVEL_AMETHYST] = [];
        sprite[SPRITE.SHOVEL_AMETHYST][SPRITE.DAY] = CTI (create_rotated_img (3, create_shovel (scale * 0.7, true,
            ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#9641b5"])));
        sprite[SPRITE.SHOVEL_AMETHYST][SPRITE.NIGHT] = CTI (create_rotated_img (3, create_shovel (scale * 0.7, true,
            ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5", "#6f45c2"])));

        sprite[SPRITE.SHOP] = [];
        sprite[SPRITE.SHOP].push (CTI (create_shop (scale * 0.7, ["#3b330d", "#b5a118", "#c8ac16"], 0)));
        sprite[SPRITE.SHOP].push (CTI (create_shop (scale * 0.7, ["#524712", "#c7b11c", "#d9ba18"], 0)));
        sprite[SPRITE.SHOP].push (CTI (create_shop (scale * 0.7, ["#2a2409", "#9f8e14", "#ad9511"], 0)));

        sprite[SPRITE.HURT_WOLF]   = CTI (create_hurt_wolf   (scale * 1.1, ["#BB0000"]));
        sprite[SPRITE.HURT_SPIDER] = CTI (create_rotated_img (Math.PI, create_hurt_spider (scale * 0.9, "#BB0000")));

        /* HATS */
        sprite[SPRITE.EXPLORER_HAT] = [];
        sprite[SPRITE.EXPLORER_HAT][SPRITE.DAY] = CTI (create_explorer_hat (scale * 0.55, true, ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]));
        sprite[SPRITE.EXPLORER_HAT][SPRITE.NIGHT] = CTI (create_explorer_hat (scale * 0.55, true, ["#15514f", "#0f3f3d", "#123335", "#0d2d2b", "#2b6664", "#070d16"]));

            /* HATS */
        sprite[SPRITE.WOOD_HELMET] = [];
        sprite[SPRITE.WOOD_HELMET][SPRITE.DAY] = CTI (create_wooden_helmet (scale * 0.55, true, ["#252525", "#73583e", "#573f29", "#7d6144"]));
        sprite[SPRITE.WOOD_HELMET][SPRITE.NIGHT] = CTI (create_wooden_helmet (scale * 0.55, true, ["#0d3b39", "#144642", "#0b3230", "#154f4b"]));

        sprite[SPRITE.STONE_HELMET] = [];
        sprite[SPRITE.STONE_HELMET][SPRITE.DAY] = CTI (create_viking_hat (scale * 0.6, true, ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]));
        sprite[SPRITE.STONE_HELMET][SPRITE.NIGHT] = CTI (create_viking_hat (scale * 0.6, true, ["#030d14", "#1c4a4a", "#102d2d", "#255756", "#163d3c", "#194544", "#1f5252", "#184141", "#1c4a4a", "#255756", "#163a3a"]));


        sprite[SPRITE.GOLD_HELMET] = [];
        sprite[SPRITE.GOLD_HELMET][SPRITE.DAY] = CTI (create_gold_helmet (scale * 0.58, true, ["#dbce71", "#b29c32", "#c4bc51"]));
        sprite[SPRITE.GOLD_HELMET][SPRITE.NIGHT] = CTI (create_gold_helmet (scale * 0.58, true, ["#2b7c57", "#15543c", "#1a7961"]));

        sprite[SPRITE.DIAMOND_HELMET] = [];
        sprite[SPRITE.DIAMOND_HELMET][SPRITE.DAY] = CTI (create_diamond_helmet (scale * 0.69, true, ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]));
        sprite[SPRITE.DIAMOND_HELMET][SPRITE.NIGHT] = CTI (create_diamond_helmet (scale * 0.69, true, ["#183f3f", "#092121", "#123335", "#2b9390", "#277a74","#1f665f", "#83ddd4", "#59c9c0"]));

        /* WINTER */
        sprite[SPRITE.FIR] = [];
        sprite[SPRITE.FIR][SPRITE.DAY] = [];
        sprite[SPRITE.FIR][SPRITE.NIGHT]= [];
        sprite[SPRITE.FIR][SPRITE.DAY].push ( CTI (create_fir_three (scale * 1.3,
            ["#0a2d18", "#124c34", "#227248", "#ccedd9", "#2d7a55", "#3c9660", "#afddc1", "#bbefd0", "#0a2d18", "#e4efe8"])));
        sprite[SPRITE.FIR][SPRITE.DAY].push ( CTI (create_fir_two (scale * 1.5,
            ["#191919", "#134d35", "#247349", "#afddc1", "#bbefd0", "#e4efe8"])));
        sprite[SPRITE.FIR][SPRITE.DAY].push (CTI (create_fir_one (scale * 1.5,
            ["#191919", "#134d35", "#247349", "#cde7d6", "#122d1c", "#e3eee7"])));

        sprite[SPRITE.FIR][SPRITE.NIGHT].push ( CTI (create_fir_three (scale * 1.3,
            ["#000000", "#0e3638", "#174a51", "#328587", "#174a51", "#1d5559", "#328587", "#48a8aa", "#0a2728", "#56afac"])));
        sprite[SPRITE.FIR][SPRITE.NIGHT].push ( CTI (create_fir_two (scale * 1.5,
            ["#000000", "#0e3638", "#174a51", "#328587", "#48a8aa", "#56afac"])));
        sprite[SPRITE.FIR][SPRITE.NIGHT].push ( CTI (create_fir_one (scale * 1.5,
            ["#000000", "#0e3638", "#174a51", "#328587", "#0a2728", "#56afac"])));

        sprite[SPRITE.DRAGON] = [];
        sprite[SPRITE.DRAGON][SPRITE.DAY]   = CTI (create_dragon (scale * 1, ["#292b2b", "#57aba6", "#80ccca", "#c42333", "#a4dad9", "#3e8294", "#ffffff", "#57aba6", "#ffffff"]));
        sprite[SPRITE.DRAGON][SPRITE.NIGHT] = CTI (create_dragon (scale * 1, ["#050505", "#1d3a38", "#0b514a", "#200333", "#327570", "#1d3a38", "#ffffff", "#0b514a", "#63afa9"]));

        sprite[SPRITE.WING_LEFT] = [];
        sprite[SPRITE.WING_LEFT][SPRITE.DAY]   = CTI (create_wingleft (scale * 1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
        sprite[SPRITE.WING_LEFT][SPRITE.NIGHT] = CTI (create_wingleft (scale * 1, ["#050505", "#327570", "#021724", "#200333"]));

        sprite[SPRITE.WING_RIGHT] = [];
        sprite[SPRITE.WING_RIGHT][SPRITE.DAY]   = CTI (create_wingright (scale * 1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
        sprite[SPRITE.WING_RIGHT][SPRITE.NIGHT] = CTI (create_wingright (scale * 1, ["#050505", "#327570", "#021724", "#200333"]));

        sprite[SPRITE.DECORATION] = [];
        sprite[SPRITE.DECORATION][SPRITE.DAY] = [];
        sprite[SPRITE.DECORATION][SPRITE.NIGHT] = [];

        sprite[SPRITE.DECORATION][SPRITE.DAY] = [
            IMAGES.DECORATION_0D,
            IMAGES.DECORATION_1D,
            IMAGES.DECORATION_2D,
            IMAGES.DECORATION_3D,
            IMAGES.DECORATION_4D,
            IMAGES.DECORATION_5D,
            IMAGES.DECORATION_6D,
            IMAGES.DECORATION_7D,
            IMAGES.DECORATION_8D,
            IMAGES.DECORATION_9D,
            IMAGES.DECORATION_10D,
            IMAGES.DECORATION_11D,
            IMAGES.DECORATION_12D,
            IMAGES.DECORATION_13D,
            IMAGES.DECORATION_14D,
            IMAGES.DECORATION_15D,
            IMAGES.DECORATION_16D,
            IMAGES.DECORATION_17D,
            IMAGES.DECORATION_18D,
            IMAGES.DECORATION_19D,
            IMAGES.DECORATION_20D,
            IMAGES.DECORATION_21D,
            IMAGES.DECORATION_22D,
            IMAGES.DECORATION_23D,
            IMAGES.DECORATION_24D,
            IMAGES.DECORATION_25D,
            IMAGES.DECORATION_26D,
            IMAGES.DECORATION_27D,
            IMAGES.DECORATION_28D,
            IMAGES.DECORATION_29D,
            IMAGES.DECORATION_30D,
            IMAGES.DECORATION_31D,
            IMAGES.DECORATION_32D,
            IMAGES.DECORATION_33D,
            IMAGES.DECORATION_34D,
            IMAGES.DECORATION_35D,
            IMAGES.DECORATION_36D,
            IMAGES.DECORATION_37D,
            IMAGES.DECORATION_38D,
            IMAGES.DECORATION_39D,
            IMAGES.DECORATION_40D,
            IMAGES.DECORATION_41D,
            IMAGES.DECORATION_42D,
            IMAGES.DECORATION_43D,
            IMAGES.DECORATION_44D,
            IMAGES.DECORATION_45D,
            IMAGES.DECORATION_46D,
            IMAGES.DECORATION_47D,
            IMAGES.DECORATION_48D,
            IMAGES.DECORATION_49D,
            IMAGES.DECORATION_50D,
            IMAGES.DECORATION_51D,
            IMAGES.DECORATION_52D,
            IMAGES.DECORATION_53D,
            IMAGES.DECORATION_54D,
            IMAGES.DECORATION_55D,
        ];

        sprite[SPRITE.DECORATION][SPRITE.NIGHT] = [
            IMAGES.DECORATION_0N,
            IMAGES.DECORATION_1N,
            IMAGES.DECORATION_2N,
            IMAGES.DECORATION_3N,
            IMAGES.DECORATION_4N,
            IMAGES.DECORATION_5N,
            IMAGES.DECORATION_6N,
            IMAGES.DECORATION_7N,
            IMAGES.DECORATION_8N,
            IMAGES.DECORATION_9N,
            IMAGES.DECORATION_10N,
            IMAGES.DECORATION_11N,
            IMAGES.DECORATION_12N,
            IMAGES.DECORATION_13N,
            IMAGES.DECORATION_14N,
            IMAGES.DECORATION_15N,
            IMAGES.DECORATION_16N,
            IMAGES.DECORATION_17N,
            IMAGES.DECORATION_18N,
            IMAGES.DECORATION_19N,
            IMAGES.DECORATION_20N,
            IMAGES.DECORATION_21N,
            IMAGES.DECORATION_22N,
            IMAGES.DECORATION_23N,
            IMAGES.DECORATION_24N,
            IMAGES.DECORATION_25N,
            IMAGES.DECORATION_26N,
            IMAGES.DECORATION_27N,
            IMAGES.DECORATION_28N,
            IMAGES.DECORATION_29N,
            IMAGES.DECORATION_30N,
            IMAGES.DECORATION_31N,
            IMAGES.DECORATION_32N,
            IMAGES.DECORATION_33N,
            IMAGES.DECORATION_34N,
            IMAGES.DECORATION_35N,
            IMAGES.DECORATION_36N,
            IMAGES.DECORATION_37N,
            IMAGES.DECORATION_38N,
            IMAGES.DECORATION_39N,
            IMAGES.DECORATION_40N,
            IMAGES.DECORATION_41N,
            IMAGES.DECORATION_42N,
            IMAGES.DECORATION_43N,
            IMAGES.DECORATION_44N,
            IMAGES.DECORATION_45N,
            IMAGES.DECORATION_46N,
            IMAGES.DECORATION_47N,
            IMAGES.DECORATION_48N,
            IMAGES.DECORATION_49N,
            IMAGES.DECORATION_50N,
            IMAGES.DECORATION_51N,
            IMAGES.DECORATION_52N,
            IMAGES.DECORATION_53N,
            IMAGES.DECORATION_54N,
            IMAGES.DECORATION_55N,
        ];

        sprite[SPRITE.CAVE_STONES]               = [];
        sprite[SPRITE.CAVE_STONES][SPRITE.DAY]   = [];
        sprite[SPRITE.CAVE_STONES][SPRITE.NIGHT] = [];
        sprite[SPRITE.CAVE_STONES][SPRITE.DAY].push (CTI (create_cave_stone (scale * 1.1,   false, ["#252B28", "#747471", "#83827e"], 0)));
        sprite[SPRITE.CAVE_STONES][SPRITE.DAY].push (CTI (create_cave_stone (scale * 0.9,   false, ["#252B28", "#747471", "#83827e"], 1)));
        sprite[SPRITE.CAVE_STONES][SPRITE.DAY].push (CTI (create_cave_stone (scale * 1,     false, ["#252B28", "#747471", "#83827e"], 2)));
        sprite[SPRITE.CAVE_STONES][SPRITE.DAY].push (CTI (create_cave_stone (scale * 0.9,   false, ["#252B28", "#747471", "#83827e"], 2)));

        sprite[SPRITE.CAVE_STONES][SPRITE.NIGHT].push (CTI (create_cave_stone (scale * 1.1, false, ["#030d14", "#123335", "#183f3f"], 0)));
        sprite[SPRITE.CAVE_STONES][SPRITE.NIGHT].push (CTI (create_cave_stone (scale * 0.9, false, ["#030d14", "#123335", "#183f3f"], 1)));
        sprite[SPRITE.CAVE_STONES][SPRITE.NIGHT].push (CTI (create_cave_stone (scale * 1,   false, ["#030d14", "#123335", "#183f3f"], 2)));
        sprite[SPRITE.CAVE_STONES][SPRITE.NIGHT].push (CTI (create_cave_stone (scale * 0.9, false, ["#030d14", "#123335", "#183f3f"], 2)));

        sprite[SPRITE.SHADOW_CAVE_STONES]               = [];
        sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.DAY]   = [];
        sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.NIGHT] = [];
        sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.DAY].push (CTI (create_cave_stone (scale * 1.1,   true, ["#252B28", "#58645F", "#75827D"], 2)));
        sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.DAY].push (CTI (create_cave_stone (scale * 0.9,   true, ["#252B28", "#58645F", "#75827D"], 2)));
        sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.DAY].push (CTI (create_cave_stone (scale * 1,     true, ["#252B28", "#58645F", "#75827D"], 2)));
        sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.DAY].push (CTI (create_cave_stone (scale * 0.9,   true, ["#252B28", "#58645F", "#75827D"], 2)));

        sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.NIGHT].push (CTI (create_cave_stone (scale * 1.1, true, ["#030d14", "#123335", "#183f3f"], 2)));
        sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.NIGHT].push (CTI (create_cave_stone (scale * 0.9, true, ["#030d14", "#123335", "#183f3f"], 2)));
        sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.NIGHT].push (CTI (create_cave_stone (scale * 1,   true, ["#030d14", "#123335", "#183f3f"], 2)));
        sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.NIGHT].push (CTI (create_cave_stone (scale * 0.9, true, ["#030d14", "#123335", "#183f3f"], 2)));

        sprite[SPRITE.GOLD_WINTER]               = [];
        sprite[SPRITE.GOLD_WINTER][SPRITE.DAY]   = [];
        sprite[SPRITE.GOLD_WINTER][SPRITE.NIGHT] = [];
        sprite[SPRITE.GOLD_WINTER][SPRITE.DAY].push (CTI (create_gold (scale * 1.5,   false, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        sprite[SPRITE.GOLD_WINTER][SPRITE.DAY].push (CTI (create_gold (scale * 1.3,   false, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        sprite[SPRITE.GOLD_WINTER][SPRITE.DAY].push (CTI (create_gold (scale * 1.1,   false, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        sprite[SPRITE.GOLD_WINTER][SPRITE.NIGHT].push (CTI (create_gold (scale * 1.5, false, ["#0a2728", "#3e8989", "#50a09c"])));
        sprite[SPRITE.GOLD_WINTER][SPRITE.NIGHT].push (CTI (create_gold (scale * 1.3, false, ["#0a2728", "#3e8989", "#50a09c"])));
        sprite[SPRITE.GOLD_WINTER][SPRITE.NIGHT].push (CTI (create_gold (scale * 1.1, false, ["#0a2728", "#3e8989", "#50a09c"])));

        sprite[SPRITE.DIAMOND_WINTER]               = [];
        sprite[SPRITE.DIAMOND_WINTER][SPRITE.DAY]   = [];
        sprite[SPRITE.DIAMOND_WINTER][SPRITE.NIGHT] = [];
        sprite[SPRITE.DIAMOND_WINTER][SPRITE.DAY].push (CTI (create_diamond (scale * 1.1,   false, ["#123d38", "#70e0dd", "#95efea"])));
        sprite[SPRITE.DIAMOND_WINTER][SPRITE.DAY].push (CTI (create_diamond (scale * 0.9,   false, ["#123d38", "#70e0dd", "#95efea"])));
        sprite[SPRITE.DIAMOND_WINTER][SPRITE.DAY].push (CTI (create_diamond (scale * 0.7,   false, ["#123d38", "#70e0dd", "#95efea"])));
        sprite[SPRITE.DIAMOND_WINTER][SPRITE.NIGHT].push (CTI (create_diamond (scale * 1.1, false, ["#123d38", "#47b2ac", "#5cccc4"])));
        sprite[SPRITE.DIAMOND_WINTER][SPRITE.NIGHT].push (CTI (create_diamond (scale * 0.9, false, ["#123d38", "#47b2ac", "#5cccc4"])));
        sprite[SPRITE.DIAMOND_WINTER][SPRITE.NIGHT].push (CTI (create_diamond (scale * 0.7, false, ["#123d38", "#47b2ac", "#5cccc4"])));

        sprite[SPRITE.AMETHYST]               = [];
        sprite[SPRITE.AMETHYST][SPRITE.DAY]   = [];
        sprite[SPRITE.AMETHYST][SPRITE.NIGHT] = [];

        sprite[SPRITE.AMETHYST][SPRITE.DAY].push ( CTI (create_amethyst (scale * 1.7, true, ["#1d051e", "#c27add", "#cd98e5"])));
        sprite[SPRITE.AMETHYST][SPRITE.DAY].push ( CTI (create_amethyst (scale * 1.5, true, ["#1d051e", "#c27add", "#cd98e5"])));
        sprite[SPRITE.AMETHYST][SPRITE.DAY].push ( CTI (create_amethyst (scale * 1.3, true, ["#1d051e", "#c27add", "#cd98e5"])));
        sprite[SPRITE.AMETHYST][SPRITE.NIGHT].push ( CTI (create_amethyst (scale * 1.7, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
        sprite[SPRITE.AMETHYST][SPRITE.NIGHT].push ( CTI (create_amethyst (scale * 1.5, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
        sprite[SPRITE.AMETHYST][SPRITE.NIGHT].push ( CTI (create_amethyst (scale * 1.3, true, ["#1d051e", "#41aaa0", "#5cccc4"])));

        sprite[SPRITE.WATERBLOCK] = [];
        sprite[SPRITE.WATERBLOCK][SPRITE.DAY]   = [];
        sprite[SPRITE.WATERBLOCK][SPRITE.NIGHT] = [];
        sprite[SPRITE.WATERBLOCK][SPRITE.DAY].push ( CTI (create_dragon_ground (scale, ["#2d53c4"])));
        sprite[SPRITE.WATERBLOCK][SPRITE.NIGHT].push ( CTI (create_dragon_ground (scale, ["#2d53c4"])));

        sprite[SPRITE.ISLAND_BLOCK] = [];
        sprite[SPRITE.ISLAND_BLOCK][SPRITE.DAY]   = [];
        sprite[SPRITE.ISLAND_BLOCK][SPRITE.NIGHT] = [];
        sprite[SPRITE.ISLAND_BLOCK][SPRITE.DAY].push ( CTI (create_dragon_ground (scale, ["#c4912d"])));
        sprite[SPRITE.ISLAND_BLOCK][SPRITE.NIGHT].push ( CTI (create_dragon_ground (scale, ["#c4912d"])));

        sprite[SPRITE.CAVE_STEP] = [];
        sprite[SPRITE.CAVE_STEP][SPRITE.DAY] = CTI (create_snow_step (scale, ["#414040"]));
        sprite[SPRITE.CAVE_STEP][SPRITE.NIGHT] = CTI (create_snow_step (scale, ["#153635"]));

        sprite[SPRITE.DOOR_WOOD_OPEN_WINTER] = [];
        sprite[SPRITE.DOOR_WOOD_OPEN_WINTER][SPRITE.DAY] = CTI (create_door_wood (scale * 1, false,
            ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
        sprite[SPRITE.DOOR_WOOD_OPEN_WINTER][SPRITE.NIGHT] = CTI (create_door_wood (scale * 1, false,
            ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));

        sprite[SPRITE.DOOR_STONE_OPEN_WINTER] = [];
        sprite[SPRITE.DOOR_STONE_OPEN_WINTER][SPRITE.DAY] = CTI (create_door_stone (scale * 1, false,
        ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
        sprite[SPRITE.DOOR_STONE_OPEN_WINTER][SPRITE.NIGHT] = CTI (create_door_stone (scale * 1, false,
        ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));

        sprite[SPRITE.DOOR_AMETHYST_OPEN_WINTER] = [];
        sprite[SPRITE.DOOR_AMETHYST_OPEN_WINTER][SPRITE.DAY] = CTI (create_door_stone (scale * 1, false,
        ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
        sprite[SPRITE.DOOR_AMETHYST_OPEN_WINTER][SPRITE.NIGHT] = CTI (create_door_stone (scale * 1, false,
        ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));

        sprite[SPRITE.DOOR_DIAMOND_OPEN_WINTER] = [];
        sprite[SPRITE.DOOR_DIAMOND_OPEN_WINTER][SPRITE.DAY] = CTI (create_door_diamond (scale * 1, false,
        ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
        sprite[SPRITE.DOOR_DIAMOND_OPEN_WINTER][SPRITE.NIGHT] = CTI (create_door_diamond (scale * 1, false,
        ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));

        sprite[SPRITE.DOOR_GOLD_OPEN_WINTER] = [];
        sprite[SPRITE.DOOR_GOLD_OPEN_WINTER][SPRITE.DAY] = CTI (create_door_gold (scale * 1, false,
        ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
        sprite[SPRITE.DOOR_GOLD_OPEN_WINTER][SPRITE.NIGHT] = CTI (create_door_gold (scale * 1, false,
        ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));

        sprite[SPRITE.FOX]               = [];
        sprite[SPRITE.FOX][SPRITE.DAY]   = CTI (create_winter_fox (scale * 0.9, ["#1d051e", "#ffffff", "#c41c50", "#2c2e2d", "#c63450", "#f7e7f0"]));
        sprite[SPRITE.FOX][SPRITE.NIGHT] = CTI (create_winter_fox (scale * 0.9, ["#123d38", "#1a847f", "#200333", "#131919", "#01333a", "#b6f2db"]));

        sprite[SPRITE.BEAR]               = [];
        sprite[SPRITE.BEAR][SPRITE.DAY]   = CTI (create_polar_bear (scale * 0.9, ["#1d051e", "#ffffff", "#c41c50", "#c63450", "#ffffff", "#f7e7f0", "#2b2d2d"]));
        sprite[SPRITE.BEAR][SPRITE.NIGHT] = CTI (create_polar_bear (scale * 0.9, ["#123d38", "#1a847f", "#200333", "#01333a", "#ffffff", "#b6f2db", "#2b2d2d"]));

        sprite[SPRITE.MINIMAP] = [];
        sprite[SPRITE.MINIMAP_CTX] = [];
        sprite[SPRITE.BIGMAP] = [];
        sprite[SPRITE.BIGMAP_CTX] = [];

        for (var i = 0 ; i < 2 ; i++) {

            sprite[SPRITE.MINIMAP][i] = document.createElement ("canvas");
            sprite[SPRITE.MINIMAP][i].width = 193;
            sprite[SPRITE.MINIMAP][i].height = 193;
            sprite[SPRITE.MINIMAP_CTX][i] = sprite[SPRITE.MINIMAP][i].getContext ("2d");

            sprite[SPRITE.BIGMAP][i] = document.createElement ("canvas");
            sprite[SPRITE.BIGMAP][i].width = 600;
            sprite[SPRITE.BIGMAP][i].height = 600;
            sprite[SPRITE.BIGMAP_CTX][i] = sprite[SPRITE.BIGMAP][i].getContext ("2d");
        }

        sprite[SPRITE.SNOW_STEP] = [];
        sprite[SPRITE.SNOW_STEP][SPRITE.DAY] = CTI (create_snow_step (scale, ["#c8e0de"]));
        sprite[SPRITE.SNOW_STEP][SPRITE.NIGHT] = CTI (create_snow_step (scale, ["#147071"]));

        sprite[SPRITE.LAVA_STEP] = [];
        sprite[SPRITE.LAVA_STEP][SPRITE.DAY] = CTI (create_snow_step (scale, ["#231912"]));
        sprite[SPRITE.LAVA_STEP][SPRITE.NIGHT] = CTI (create_snow_step (scale, ["#021719"]));

        sprite[SPRITE.HURT_TREASURE_CHEST] = CTI (create_hurt_treasure_chest (scale * 0.5, ["#BB0000"]));
        sprite[SPRITE.HURT_FOX] = CTI (create_hurt_fox_winter (scale * 0.9, "#BB0000"));
        sprite[SPRITE.HURT_BEAR] = CTI (create_hurt_polar_bear (scale * 0.9, "#BB0000"));
        sprite[SPRITE.HURT_DRAGON]     = CTI (create_hurt_dragon (scale * 1, ["#BB0000"]));
        sprite[SPRITE.HURT_WING_LEFT]  = CTI (create_hurt_wingleft (scale * 0.8, "#BB0000"));
        sprite[SPRITE.HURT_WING_RIGHT] = CTI (create_hurt_wingright (scale * 0.8, "#BB0000"));

        sprite[SPRITE.HURT_RABBIT] = CTI (create_hurt_rabbit (scale * 0.9, "#BB0000"));
        sprite[SPRITE.HURT]        = CTI (create_hurt_player (scale * 0.6, "#BB0000"));
        sprite[SPRITE.COLD]        = CTI (create_hurt_player (scale * 0.6, "#1CE7E0"));
        sprite[SPRITE.HUNGER]      = CTI (create_hurt_player (scale * 0.6, "#DBE71C"));
        sprite[SPRITE.HEAL]        = CTI (create_hurt_player (scale * 0.6, "#00BB00"));

        /*BEACH*/
        sprite[SPRITE.SAND_STEP] = [];
        sprite[SPRITE.SAND_STEP][SPRITE.DAY] = CTI (create_snow_step (scale, ["#dac291"]));
        sprite[SPRITE.SAND_STEP][SPRITE.NIGHT] = CTI (create_snow_step (scale, ["#0D423D"]));

        sprite[SPRITE.ISLAND_STEP] = [];
        sprite[SPRITE.ISLAND_STEP][SPRITE.DAY] = CTI (create_snow_step (scale, ["#dac291"]));
        sprite[SPRITE.ISLAND_STEP][SPRITE.NIGHT] = CTI (create_snow_step (scale, ["#0D423D"]));

        sprite[SPRITE.WELL_FULL]               = [];
        sprite[SPRITE.WELL_FULL][SPRITE.DAY]   = CTI (create_well (scale * 0.3, true, ["#1e2021","#717273", "#606162", "#a09f9f", "#878787", "#1a6470"]));
        sprite[SPRITE.WELL_FULL][SPRITE.NIGHT] = CTI (create_well (scale * 0.3, true, ["#1e2021","#1a4545", "#163a3a", "#245d5d", "#1f5454", "#09373F"]));

        sprite[SPRITE.WELL_EMPTY]               = [];
        sprite[SPRITE.WELL_EMPTY][SPRITE.DAY]   = CTI (create_well (scale * 0.3, true, ["#1e2021","#717273", "#606162", "#a09f9f", "#878787", "#454545"]));
        sprite[SPRITE.WELL_EMPTY][SPRITE.NIGHT] = CTI (create_well (scale * 0.3, true, ["#1e2021","#1a4545", "#163a3a", "#245d5d", "#1f5454", "#0b2121"]));


        sprite[SPRITE.BOTTLE_FULL] = [CTI (create_bottle (scale, true, ["#C6AF81","#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
        sprite[SPRITE.BOTTLE_EMPTY] = [CTI (create_bottle (scale, true, ["#C6AF81","#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];

        /*OCEAN*/
        sprite[SPRITE.OCEAN] = [];
        sprite[SPRITE.OCEAN][SPRITE.DAY] = [];
        sprite[SPRITE.OCEAN][SPRITE.NIGHT] = [];
        sprite[SPRITE.OCEAN][SPRITE.DAY].push ( CTI (create_snow_one (scale * 1, ["#0B6A84"])));
        sprite[SPRITE.OCEAN][SPRITE.DAY].push ( CTI (create_snow_two (scale * 1, ["#0B6A84"])));
        sprite[SPRITE.OCEAN][SPRITE.DAY].push ( CTI (create_snow_three (scale * 1, ["#0B6A84"])));
        sprite[SPRITE.OCEAN][SPRITE.DAY].push ( CTI (create_snow_four (scale * 1, ["#0B6A84"])));
        sprite[SPRITE.OCEAN][SPRITE.DAY].push ( CTI (create_snow_five (scale * 1, ["#0B6A84"])));
        sprite[SPRITE.OCEAN][SPRITE.DAY].push ( CTI (create_snow_six (scale * 1, ["#0B6A84"])));
        sprite[SPRITE.OCEAN][SPRITE.DAY].push ( CTI (create_snow_sept (scale * 1, ["#0B6A84"])));

        sprite[SPRITE.OCEAN][SPRITE.NIGHT].push ( CTI (create_snow_one (scale * 1, ["#09373F"])));
        sprite[SPRITE.OCEAN][SPRITE.NIGHT].push ( CTI (create_snow_two (scale * 1, ["#09373F"])));
        sprite[SPRITE.OCEAN][SPRITE.NIGHT].push ( CTI (create_snow_three (scale * 1, ["#09373F"])));
        sprite[SPRITE.OCEAN][SPRITE.NIGHT].push ( CTI (create_snow_four (scale * 1, ["#09373F"])));
        sprite[SPRITE.OCEAN][SPRITE.NIGHT].push ( CTI (create_snow_five (scale * 1, ["#09373F"])));
        sprite[SPRITE.OCEAN][SPRITE.NIGHT].push ( CTI (create_snow_six (scale * 1, ["#09373F"])));
        sprite[SPRITE.OCEAN][SPRITE.NIGHT].push ( CTI (create_snow_sept (scale * 1, ["#09373F"])));

        /* LAKE START */

        //sprite[SPRITE.LAKE_EDGE] = [];
        //sprite[SPRITE.LAKE_EDGE][SPRITE.DAY] = [];
        //sprite[SPRITE.LAKE_EDGE][SPRITE.NIGHT] = [];
        //sprite[SPRITE.LAKE_EDGE][SPRITE.DAY].push ( CTI (create_lake_edge (scale * 1.7, /*["#5B462D"]*/["#86653e"], 0)));
        //sprite[SPRITE.LAKE_EDGE][SPRITE.DAY].push ( CTI (create_lake_edge (scale * 1.9, /*["#5B462D"]*/["#86653e"], 1)));
        //sprite[SPRITE.LAKE_EDGE][SPRITE.DAY].push ( CTI (create_lake_edge (scale * 1.7, /*["#5B462D"]*/["#86653e"], 2)));

        //sprite[SPRITE.LAKE_EDGE][SPRITE.NIGHT].push ( CTI (create_lake_edge (scale * 1.7, ["#123335"], 0)));
        //sprite[SPRITE.LAKE_EDGE][SPRITE.NIGHT].push ( CTI (create_lake_edge (scale * 1.9, ["#123335"], 1)));
        //sprite[SPRITE.LAKE_EDGE][SPRITE.NIGHT].push ( CTI (create_lake_edge (scale * 1.7, ["#123335"], 2)));

        //sprite[SPRITE.LAKE_DEEP] = [];
        //sprite[SPRITE.LAKE_DEEP][SPRITE.DAY] = [];
        //sprite[SPRITE.LAKE_DEEP][SPRITE.NIGHT] = [];
        //sprite[SPRITE.LAKE_DEEP][SPRITE.DAY].push ( CTI (create_lake_deep (scale * 1.7, /*["#1A6470"]*/["#227785"], 0)));
        //sprite[SPRITE.LAKE_DEEP][SPRITE.DAY].push ( CTI (create_lake_deep (scale * 1.9, /*["#1A6470"]*/["#227785"], 1)));
        //sprite[SPRITE.LAKE_DEEP][SPRITE.DAY].push ( CTI (create_lake_deep (scale * 1.7, /*["#1A6470"]*/["#227785"], 2)));

        //sprite[SPRITE.LAKE_DEEP][SPRITE.NIGHT].push ( CTI (create_lake_deep (scale * 1.7, ["#0B4049"], 0)));
        //sprite[SPRITE.LAKE_DEEP][SPRITE.NIGHT].push ( CTI (create_lake_deep (scale * 1.9, ["#0B4049"], 1)));
        //sprite[SPRITE.LAKE_DEEP][SPRITE.NIGHT].push ( CTI (create_lake_deep (scale * 1.7, ["#0B4049"], 2)));

        //sprite[SPRITE.LAKE] = [];
        //sprite[SPRITE.LAKE][SPRITE.DAY] = [];
        //sprite[SPRITE.LAKE][SPRITE.NIGHT] = [];
        //sprite[SPRITE.LAKE][SPRITE.DAY].push ( CTI (create_lake (scale * 1.7, /*["#216F75"]*/["#2d878e"], 0)));
        //sprite[SPRITE.LAKE][SPRITE.DAY].push ( CTI (create_lake (scale * 1.9,  /*["#216F75"]*/["#2d878e"], 1)));
        //sprite[SPRITE.LAKE][SPRITE.DAY].push ( CTI (create_lake (scale * 1.7,  /*["#216F75"]*/["#2d878e"], 2)));

        //sprite[SPRITE.LAKE][SPRITE.NIGHT].push ( CTI (create_lake (scale * 1.7, ["#114C56"], 0)));
        //sprite[SPRITE.LAKE][SPRITE.NIGHT].push ( CTI (create_lake (scale * 1.9, ["#114C56"], 1)));
        //sprite[SPRITE.LAKE][SPRITE.NIGHT].push ( CTI (create_lake (scale * 1.7, ["#114C56"], 2)));

        /*
        sprite[SPRITE.SHINGLE] = [];
        sprite[SPRITE.SHINGLE][SPRITE.DAY] = [];
        sprite[SPRITE.SHINGLE][SPRITE.NIGHT] = [];
        sprite[SPRITE.SHINGLE][SPRITE.DAY].push ( CTI (create_shingle (scale * 1.7, ["#231F20", "#58645F", "#0F9159", "#077B49", "#CC96B7", "#C491B2", "#D8A4C5", "#CE9DC0","#D1AE19", "#E2C51B"], 0)));
        sprite[SPRITE.SHINGLE][SPRITE.DAY].push ( CTI (create_shingle (scale * 1.9, ["#231F20", "#58645F", "#0F9159", "#077B49", "#CC96B7", "#C491B2", "#D8A4C5", "#CE9DC0", "#D1AE19", "#E2C51B"], 1)));
        sprite[SPRITE.SHINGLE][SPRITE.DAY].push ( CTI (create_shingle (scale * 1.7, ["#231F20", "#58645F", "#0F9159", "#077B49", "#CC96B7", "#C491B2", "#D8A4C5", "#CE9DC0", "#D1AE19", "#E2C51B"], 2)));

        sprite[SPRITE.SHINGLE][SPRITE.NIGHT].push ( CTI (create_shingle (scale * 1.7, ["#041e22", "#183F3F", "#0A4946", "#083B3D", "#42A594", "#258282", "#5BBCAA", "#41A0A5", "#1BCEA3", "#1EE0CD"], 0)));
        sprite[SPRITE.SHINGLE][SPRITE.NIGHT].push ( CTI (create_shingle (scale * 1.9, ["#041e22", "#183F3F", "#0A4946", "#083B3D", "#42A594", "#258282", "#5BBCAA", "#41A0A5", "#1BCEA3", "#1EE0CD"], 1)));
        sprite[SPRITE.SHINGLE][SPRITE.NIGHT].push ( CTI (create_shingle (scale * 1.7, ["#041e22", "#183F3F", "#0A4946", "#083B3D", "#42A594", "#258282", "#5BBCAA", "#41A0A5", "#1BCEA3", "#1EE0CD"], 2)));
        */

        /* LAKE END */

        sprite[SPRITE.ISLAND] = [];
        sprite[SPRITE.ISLAND][SPRITE.DAY] = [];
        sprite[SPRITE.ISLAND][SPRITE.NIGHT] = [];
        sprite[SPRITE.ISLAND][SPRITE.DAY].push ( CTI (create_island (scale * 1.7, ["#FBEFBC"], 0)));
        sprite[SPRITE.ISLAND][SPRITE.DAY].push ( CTI (create_island (scale * 1.9, ["#FBEFBC"], 1)));
        sprite[SPRITE.ISLAND][SPRITE.DAY].push ( CTI (create_island (scale * 1.7, ["#FBEFBC"], 2)));

        sprite[SPRITE.ISLAND][SPRITE.NIGHT].push ( CTI (create_island (scale * 1.7, ["#0F4C48"], 0)));
        sprite[SPRITE.ISLAND][SPRITE.NIGHT].push ( CTI (create_island (scale * 1.9, ["#0F4C48"], 1)));
        sprite[SPRITE.ISLAND][SPRITE.NIGHT].push ( CTI (create_island (scale * 1.7, ["#0F4C48"], 2)));

        sprite[SPRITE.WAVE_ONE] = [];
        sprite[SPRITE.WAVE_ONE][SPRITE.DAY] = [];
        sprite[SPRITE.WAVE_ONE][SPRITE.NIGHT] = [];
        sprite[SPRITE.WAVE_ONE][SPRITE.DAY].push ( CTI (create_island (scale * 1.8, ["#A9D6D3"], 0)));
        sprite[SPRITE.WAVE_ONE][SPRITE.DAY].push ( CTI (create_island (scale * 2, ["#A9D6D3"], 1)));
        sprite[SPRITE.WAVE_ONE][SPRITE.DAY].push ( CTI (create_island (scale * 1.8, ["#A9D6D3"], 2)));

        sprite[SPRITE.WAVE_ONE][SPRITE.NIGHT].push ( CTI (create_island (scale * 1.8, ["#115E60"], 0)));
        sprite[SPRITE.WAVE_ONE][SPRITE.NIGHT].push ( CTI (create_island (scale * 2, ["#115E60"], 1)));
        sprite[SPRITE.WAVE_ONE][SPRITE.NIGHT].push ( CTI (create_island (scale * 1.8, ["#115E60"], 2)));

        sprite[SPRITE.WAVE_TWO] = [];
        sprite[SPRITE.WAVE_TWO][SPRITE.DAY] = [];
        sprite[SPRITE.WAVE_TWO][SPRITE.NIGHT] = [];
        sprite[SPRITE.WAVE_TWO][SPRITE.DAY].push ( CTI (create_island (scale * 1.9, ["#2A8B9B"], 0)));
        sprite[SPRITE.WAVE_TWO][SPRITE.DAY].push ( CTI (create_island (scale * 2.1, ["#2A8B9B"], 1)));
        sprite[SPRITE.WAVE_TWO][SPRITE.DAY].push ( CTI (create_island (scale * 1.9, ["#2A8B9B"], 2)));

        sprite[SPRITE.WAVE_TWO][SPRITE.NIGHT].push ( CTI (create_island (scale * 1.9, ["#0F464C"], 0)));
        sprite[SPRITE.WAVE_TWO][SPRITE.NIGHT].push ( CTI (create_island (scale * 2.1, ["#0F464C"], 1)));
        sprite[SPRITE.WAVE_TWO][SPRITE.NIGHT].push ( CTI (create_island (scale * 1.9, ["#0F464C"], 2)));

        sprite[SPRITE.PALM] = [];
        sprite[SPRITE.PALM][SPRITE.DAY] = [];
        sprite[SPRITE.PALM][SPRITE.NIGHT] = [];
        sprite[SPRITE.PALM][SPRITE.DAY].push ( CTI (create_palm (scale * 0.8, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
        sprite[SPRITE.PALM][SPRITE.DAY].push ( CTI (create_palm (scale * 1, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
        sprite[SPRITE.PALM][SPRITE.DAY].push ( CTI (create_palm (scale * 1.2, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));

        sprite[SPRITE.PALM][SPRITE.NIGHT].push ( CTI (create_palm (scale * 0.8, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
        sprite[SPRITE.PALM][SPRITE.NIGHT].push ( CTI (create_palm (scale * 1, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
        sprite[SPRITE.PALM][SPRITE.NIGHT].push ( CTI (create_palm (scale * 1.2, ["#041e22", "#124949", "#0e3838", "#0a4049"])));

        sprite[SPRITE.KRAKEN] = [];
        sprite[SPRITE.KRAKEN][SPRITE.DAY] = CTI (create_kraken (scale * 0.8, ["#1e2021", "#B6222A", "#201851", "#342C7C", "#F4F4F4", "#D3D3D3", "#6765CE", "#593CC6", "#433BAD", "#342C7C", "#052830", "#EAEAEA", "#B6222A", "#FFFFFF"]));
        sprite[SPRITE.KRAKEN][SPRITE.NIGHT] = CTI (create_kraken (scale * 0.8, ["#0c0c0d", "#462966", "#081B2D", "#342C7C", "#9AAAAD", "#72898C", "#133556", "#296D9B", "#25557C", "#133556", "#0D2A42", "#EAEAEA", "#462966", "#72898C"]));

        sprite[SPRITE.HURT_KRAKEN] = CTI (create_hurt_kraken (scale * 0.8, ["#B6222A"]));

        sprite[SPRITE.PIRANHA] = [];
        sprite[SPRITE.PIRANHA][SPRITE.DAY] = CTI (create_pirahna (scale * 0.8, true, ["#1e2021", "#961B1B", "#702727", "#C43B3B", "#d15151", "#B71C1C", "#E8E8E8", "#752E2E", "#891818"]));
        sprite[SPRITE.PIRANHA][SPRITE.NIGHT] = CTI (create_pirahna (scale * 0.8, true, ["#0c0c0d", "#21112D", "#281A49", "#462966", "#321C56", "#1C073D", "#FFFFFF", "#1C0833", "#1B1238"]));

        sprite[SPRITE.HURT_PIRANHA] = CTI (create_hurt_pirahna (scale * 0.8, ["#B6222A"]));

    sprite[SPRITE.FISH1] = [];
        sprite[SPRITE.FISH1][SPRITE.DAY] = CTI (create_fish1 (scale * 0.4, true, ["#1e2021", "#db6f26", "#ffffff", "#000000", "#833813"], 0));
        sprite[SPRITE.FISH1][SPRITE.NIGHT] = CTI (create_fish1 (scale * 0.4, true, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));

    sprite[SPRITE.FISH2] = [];
        sprite[SPRITE.FISH2][SPRITE.DAY] = CTI (create_fish1 (scale * 0.4, true, ["#1e2021", "#d35e35", "#ffffff", "#000000", "#000000"], 1));
        sprite[SPRITE.FISH2][SPRITE.NIGHT] = CTI (create_fish1 (scale * 0.4, true, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 1));

    sprite[SPRITE.FISH3] = [];
        sprite[SPRITE.FISH3][SPRITE.DAY] = CTI (create_fish1 (scale * 0.4, true, ["#1e2021", "#2973a5", "#ffffff", "#ffff00", "#000000", "#03243f", "#f2ec30", "#162f6d"], 0));
        sprite[SPRITE.FISH3][SPRITE.NIGHT] = CTI (create_fish1 (scale * 0.4, true, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));

    sprite[SPRITE.HURT_FISH1] = CTI (create_hurt_fish1 (scale * 0.4, ["#B6222A"]));
    sprite[SPRITE.HURT_FISH2] = CTI (create_hurt_fish1 (scale * 0.4, ["#B6222A"]));
    sprite[SPRITE.HURT_FISH3] = CTI (create_hurt_fish1 (scale * 0.4, ["#B6222A"]));

        sprite[SPRITE.CRAB_LOOT] = CTI (create_crab_loot (scale * 0.35, true, ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"], 1));
    sprite[SPRITE.CRAB_STICK] = CTI (create_crab_stick (scale * 0.35, true, ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"], 1));

    sprite[SPRITE.CRAB_ATTACK] = [];
        sprite[SPRITE.CRAB_ATTACK][SPRITE.DAY] = CTI (create_crab (scale * 0.35, true, ["#1e2021", "#e45936", "#B6222A", "#B6222A", "#FFFFFF"], 1));
        sprite[SPRITE.CRAB_ATTACK][SPRITE.NIGHT] = CTI (create_crab (scale * 0.35, true, ["#0c0c0d", "#613577", "#462966", "#1C073D", "#FFFFFF"], 1));

    sprite[SPRITE.CRAB] = [];
        sprite[SPRITE.CRAB][SPRITE.DAY] = CTI (create_crab (scale * 0.35, true, ["#1e2021", "#e45936", "#ffffff", "#181414", "#FFFFFF"], 0));
    sprite[SPRITE.CRAB][SPRITE.NIGHT] = CTI (create_crab (scale * 0.35, true, ["#0c0c0d", "#34255d", "#563f83", "#180f21", "#FFFFFF"], 0));

    sprite[SPRITE.CRAB_CLAW_LEFT] = [];
        sprite[SPRITE.CRAB_CLAW_LEFT][SPRITE.DAY] = CTI (create_crab_claw_left (scale * 0.35, true, ["#1e2021", "#e45936", "#ffffff"]));
    sprite[SPRITE.CRAB_CLAW_LEFT][SPRITE.NIGHT] = CTI (create_crab_claw_left (scale * 0.35, true, ["#0c0c0d", "#34255d", "#563f83"]));

    sprite[SPRITE.CRAB_CLAW_RIGHT] = [];
        sprite[SPRITE.CRAB_CLAW_RIGHT][SPRITE.DAY] = CTI (create_crab_claw_right (scale * 0.42, true, ["#1e2021", "#e45936", "#ffffff"]));
    sprite[SPRITE.CRAB_CLAW_RIGHT][SPRITE.NIGHT] = CTI (create_crab_claw_right (scale * 0.42, true, ["#0c0c0d", "#34255d", "#563f83"]));

    sprite[SPRITE.CRAB_CLAW_LEFT_ATTACK] = [];
    sprite[SPRITE.CRAB_CLAW_LEFT_ATTACK][SPRITE.DAY] = CTI (create_crab_claw_left (scale * 0.35, true, ["#1e2021", "#e45936", "#B6222A"]));
    sprite[SPRITE.CRAB_CLAW_LEFT_ATTACK][SPRITE.NIGHT] = CTI (create_crab_claw_left (scale * 0.35, true, ["#0c0c0d", "#613577", "#462966"]));

    sprite[SPRITE.CRAB_CLAW_RIGHT_ATTACK] = [];
    sprite[SPRITE.CRAB_CLAW_RIGHT_ATTACK][SPRITE.DAY] = CTI (create_crab_claw_right (scale * 0.42, true, ["#1e2021", "#e45936", "#B6222A"]));
    sprite[SPRITE.CRAB_CLAW_RIGHT_ATTACK][SPRITE.NIGHT] = CTI (create_crab_claw_right (scale * 0.42, true, ["#0c0c0d", "#613577", "#462966"]));

        sprite[SPRITE.HURT_CRAB] = CTI (create_hurt_crab (scale * 0.35, ["#B6222A"]));
        sprite[SPRITE.HURT_CRAB_CLAW_LEFT] = CTI (create_crab_claw_left (scale * 0.35, true, [undefined, "#B6222A"]));
        sprite[SPRITE.HURT_CRAB_CLAW_RIGHT] = CTI (create_crab_claw_right (scale * 0.35, true, [undefined, "#B6222A"]));

        sprite[SPRITE.HEAL_CRAB] = CTI (create_hurt_crab (scale * 0.35, ["#22E066"]));
        sprite[SPRITE.HEAL_CRAB_CLAW_LEFT] = CTI (create_crab_claw_left (scale * 0.35, true, [undefined, "#22E066"]));
        sprite[SPRITE.HEAL_CRAB_CLAW_RIGHT] = CTI (create_crab_claw_right (scale * 0.35, true, [undefined, "#22E066"]));

        sprite[SPRITE.DIVING_MASK] = [];
        sprite[SPRITE.DIVING_MASK][SPRITE.DAY] = CTI (create_divingmask (scale * 0.3, true, ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]));
        sprite[SPRITE.DIVING_MASK][SPRITE.NIGHT] = CTI (create_divingmask (scale * 0.3, true, ["#0c0c0d", "#89C9C7", "#469E95", "#092C38", "#072021", "#0E343D", "#071F2D", "#9FD3D3", "#135367"]));

        sprite[SPRITE.SUPER_DIVING_SUIT] = [];
        sprite[SPRITE.SUPER_DIVING_SUIT][SPRITE.DAY] = CTI (create_superdivingsuit (scale * 0.45, true, ["#C4BC51", "#B29C32", "#201851", "#652D8E", "#1e2021", "#2E85A0"]));
        sprite[SPRITE.SUPER_DIVING_SUIT][SPRITE.NIGHT] = CTI (create_superdivingsuit (scale * 0.45, true, ["#235050", "#357472", "#081B2D", "#342C7C", "#0c0c0d", "#135367"]));

        sprite[SPRITE.PLOT] = [];
        sprite[SPRITE.PLOT][SPRITE.DAY] = CTI (create_plot(scale * 0.63, true, ["#1e2021", "#352E1E", "#4C3B19", "#574122"]));
        sprite[SPRITE.PLOT][SPRITE.NIGHT] = CTI (create_plot (scale * 0.63, true, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));

        sprite[SPRITE.BRIDGE] = [];
        sprite[SPRITE.BRIDGE][SPRITE.DAY] = CTI (create_bridge (scale, true, ["#1e2021", "#332715", "#4C3B19", "#574122"]));
        sprite[SPRITE.BRIDGE][SPRITE.NIGHT] = CTI (create_bridge (scale, true, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));

        sprite[SPRITE.WOOD_TOWER] = [];
        sprite[SPRITE.WOOD_TOWER][SPRITE.DAY] = IMAGES.WOOD_TOWERD;
        sprite[SPRITE.WOOD_TOWER][SPRITE.NIGHT] = IMAGES.WOOD_TOWERN;

        sprite[SPRITE.ROOF] = [];
        sprite[SPRITE.ROOF][SPRITE.DAY] = CTI (create_roof (scale * 0.59, true, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
        sprite[SPRITE.ROOF][SPRITE.NIGHT] = CTI (create_roof (scale * 0.59, true, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));

        sprite[SPRITE.ROOFS] = [sprite[SPRITE.ROOF]];
        sprite[SPRITE.ROOFS][1] = [];
        sprite[SPRITE.ROOFS][2] = [];

        sprite[SPRITE.ROOFS][1][SPRITE.DAY] = CTI (create_roof1 (scale * 0.59, true, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
        sprite[SPRITE.ROOFS][1][SPRITE.NIGHT] = CTI (create_roof1 (scale * 0.59, true, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
        sprite[SPRITE.ROOFS][2][SPRITE.DAY] = CTI (create_roof2 (scale * 0.59, true, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
        sprite[SPRITE.ROOFS][2][SPRITE.NIGHT] = CTI (create_roof2 (scale * 0.59, true, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));

        sprite[SPRITE.WATERING_CAN_FULL] = [];
        sprite[SPRITE.WATERING_CAN_FULL][SPRITE.DAY] = CTI (create_rotated_img (3 - Math.PI / 2, create_watering_can (scale * 0.6, true, ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"])));
        sprite[SPRITE.WATERING_CAN_FULL][SPRITE.NIGHT] = CTI (create_rotated_img (3 - Math.PI / 2, create_watering_can (scale * 0.6, true, ["#0c0c0d", "#07383c", "#0c4e53", "#042b2e", "#0c5975", "#11546c"])));

        sprite[SPRITE.DEAD_BOX]               = [];
        sprite[SPRITE.DEAD_BOX][SPRITE.DAY]   = CTI (create_dead_box (scale * 0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#8b1008"], 0));
        sprite[SPRITE.DEAD_BOX][SPRITE.NIGHT] = CTI (create_dead_box (scale * 0.3, ["#1F5453", "#123335", "#1D4947", "#1F5453", "#0c2629"], 0));

    /*
    sprite[SPRITE.CRATE]               = [];
        sprite[SPRITE.CRATE][SPRITE.DAY]   = CTI (create_dead_box (scale * 0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#8b1008"], 1));
        sprite[SPRITE.CRATE][SPRITE.NIGHT] = CTI (create_dead_box (scale * 0.3, ["#1F5453", "#123335", "#1D4947", "#1F5453", "#0c2629"], 1));
        */

        sprite[SPRITE.DEAD_BOX_UI]   = CTI (create_dead_box_ui (scale * 0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#413624"]));
        sprite[SPRITE.HURT_DEAD_BOX] = CTI (create_hurt_dead_box (scale * 0.3, ["#BB0000"]));

        sprite[SPRITE.WINDMILL_FLOUR] = create_craft_button (1,
            [{ f : create_flour, x : 0, y : 0, a : 1, r : 0,
                c : ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"] }],
            0.25, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);

    sprite[SPRITE.LAVA_HEART] = create_craft_button (1.5,
        [{ f : create_dragon_heart, x : 0, y : 0, a : 1, r : 0,
        c : ["#120202","#750a0a","#991616","#120202"] }],
        0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);

        /* LAVA BIOME END*/

        sprite[SPRITE.HEART_SYMBOL_HUD] = create_symbol_hud (scale * 0.35, ["#072428", "#67A242", "#67A242"], 0);
        sprite[SPRITE.COLD_SYMBOL_HUD] = create_symbol_hud (scale * 0.35, ["#172130", "#649BB2", "#FFFFFF", "#FFFFFF", "#90C2D3", "#649BB2", "#84BDD1", "#2F5866"], 1);
        sprite[SPRITE.FOOD_SYMBOL_HUD] = create_symbol_hud (scale * 0.35, ["#3F0B11", "#B13424","#FFFFFF", "#B13424", "#7e180b"], 2);
        sprite[SPRITE.WATER_SYMBOL_HUD] = create_symbol_hud (scale * 0.35, ["#1B2F4C", "#29488E", "#76c3e8", "#ffffff"], 3);

        if (!mobile) sprite[SPRITE.LEADERBOARD] = CTI (create_leaderboard (scale));
        else sprite[SPRITE.LEADERBOARD] = CTI (create_leaderboard_mobile (scale));

        if (!mobile) sprite[SPRITE.GAUGES] = CTI (create_gauges (scale));
        else         sprite[SPRITE.GAUGES] = CTI (create_gauges_mobile (0.75));
        if (!mobile) sprite[SPRITE.OXYGEN] = CTI (create_oxygen_gauges (scale));
        else         sprite[SPRITE.OXYGEN] = CTI (create_oxygen_gauges (0.75));

        sprite[SPRITE.DELAY_HELMET] = CTI (create_viking_hat (scale * 0.16, true, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"]));
        sprite[SPRITE.DELAY_WEAPON] = CTI (create_rotated_img (5.8, create_sword (scale * 0.15, true, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"])));
        sprite[SPRITE.COUNTER] = [];
        sprite[SPRITE.SLOT_NUMBER] = [];
        for (var i = 0 ; i < WORLD.WITH_BAG + 2 ; i++)
        sprite[SPRITE.SLOT_NUMBER][i] = create_text (scale, "" + (i + 1), 12, "#FFF");

        sprite[SPRITE.RECIPE_BUTTON]    = [];
        sprite[SPRITE.RECIPE_BUTTON].push (CTI (create_recipe_button (scale * 0.12, ["#442F19", "#2C2112", "#C09D6F", "#A37943", "#eda80d"])));
        sprite[SPRITE.RECIPE_BUTTON].push (CTI (create_recipe_button (scale * 0.12, ["#553b20", "#3e2f1a", "#d1ad7d", "#b3864c", "#eda80d"], 1)));
        sprite[SPRITE.RECIPE_BUTTON].push (CTI (create_recipe_button (scale * 0.12, ["#30200f", "#20180c", "#a78559", "#855f2f", "#b37d08"], 1)));

        sprite[SPRITE.CLOCK] = [];
        sprite[SPRITE.CLOCK].push (CTI (create_clock_day (scale * 0.22)));
        sprite[SPRITE.CLOCK].push (CTI (create_clock_night (scale * 0.22)));

        sprite[SPRITE.ARROW_CLOCK] = CTI (create_arrow_clock (scale * 0.22));

        sprite[SPRITE.OPTION_BUTTON]    = [];
        sprite[SPRITE.OPTION_BUTTON].push (CTI (create_gear_option (scale * 1.5, ["#795026", "#654320", "#eda80d"], 0)));
        sprite[SPRITE.OPTION_BUTTON].push (CTI (create_gear_option (scale * 1.5, ["#8f5e2c", "#7a5126", "#eda80d"], 1)));
        sprite[SPRITE.OPTION_BUTTON].push (CTI (create_gear_option (scale * 1.5, ["#67441f", "#573819", "#9c6e08"], 1)));

        /* UI assets */
        /*sprite[SPRITE.AUTO_FEED]       = create_text (scale, "Auto-Feed",       25, "#FFF", undefined, undefined, "#000", 5, 140);*/
        sprite[SPRITE.AUTO_FEED] = IMAGES.AUTO_FEED;
        sprite[SPRITE.BANDAGE_ACTIVATED] = IMAGES.BANDAGE_ACTIVATED;
        sprite[SPRITE.STOP_REGENERATION] = IMAGES.STOP_REGENERATION;
        sprite[SPRITE.STOP_REGENERATION_BLIZZARD] = IMAGES.STOP_REGENERATION_BLIZZARD;

        sprite[SPRITE.SHOW_SPECTATORS] = create_text (scale, "Show spectators", 25, "#FFF", undefined, undefined, "#000", 5, 220);
        sprite[SPRITE.RECONNECT]       = create_text (scale, "Reconnecting...", 30, "#FFF");

        console.log ("Load canvas", Date.now () - TIMEDEBUG);
    }

    function init_fake_world() {
        document.getElementById("game_body").style.backgroundColor = SPRITE.GROUND[fake_world.time];
        fake_world.items.push(new Item(ITEMS.FIRE, 0, 0, 0, 0, (Math.random() * Math.PI) * 2, 2, 1));
        fake_world.items.push(new Item(ITEMS.FRUIT, 0, 0, 0, 0, 0, 0, 5));
        fake_world.items.push(new Item(ITEMS.WORKBENCH, 0, 0, 0, 0, Math.PI / 4, 0, 0));
        fake_world.items.push(new Item(ITEMS.FRUIT, 0, 0, 0, 0, 0, 0, 5));
    };

    function draw_fake_world() {
        var scale = 1;
        var time = fake_world.time;
        if (sprite[SPRITE.HERB]) {
            ctx.drawImage(sprite[SPRITE.HERB][time][1], canw2 + 480, canh2 + 190);
            ctx.drawImage(sprite[SPRITE.HERB][time][2], canw2 + 180, canh2 - 430);
            ctx.drawImage(sprite[SPRITE.HERB][time][1], canw2 - 855, canh2 + 100);
            ctx.drawImage(sprite[SPRITE.HERB][time][0], canw2 - 550, canh2 - 300);
            ctx.drawImage(sprite[SPRITE.HERB][time][0], canw2 - 1020, canh2 - 520);
        }
        if (sprite[SPRITE.STONES]) {
            ctx.drawImage(sprite[SPRITE.STONES][time][1], canw2 - 80, canh2 - 640);
            ctx.drawImage(sprite[SPRITE.STONES][time][1], canw2 + 80, canh2 + 490);
            ctx.drawImage(sprite[SPRITE.STONES][time][2], canw2 - 180, canh2 - 700);
            ctx.drawImage(sprite[SPRITE.STONES][time][0], canw2 + 550, canh2 + 100);
            ctx.drawImage(sprite[SPRITE.STONES][time][1], canw2 + 450, canh2 + 300);
            ctx.drawImage(sprite[SPRITE.STONES][time][1], canw2 + 780, canh2 + 300);
            ctx.drawImage(sprite[SPRITE.STONES][time][2], canw2 + 980, canh2 + 200);
            ctx.drawImage(sprite[SPRITE.STONES][time][2], canw2 + 680, canh2 + 600);
            ctx.drawImage(sprite[SPRITE.STONES][time][2], canw2 - 380, canh2 + 100);
            ctx.drawImage(sprite[SPRITE.STONES][time][2], canw2 + 280, canh2 + 250);
        }
        if (sprite[SPRITE.PLANT]) {
            ctx.drawImage(sprite[SPRITE.PLANT][time][0], canw2 - 590, canh2);
            ctx.drawImage(sprite[SPRITE.PLANT][time][0], canw2 + 120, canh2 - 390);
            ctx.drawImage(sprite[SPRITE.PLANT][time][0], canw2 - 270, canh2 + 340);
        }
        if (sprite[SPRITE.TREE]) {
            ctx.drawImage(sprite[SPRITE.TREE][time][4], canw2 - 700, canh2 - 600);
            ctx.drawImage(sprite[SPRITE.TREE][time][2], canw2 - 970, canh2 - 250);
            ctx.drawImage(sprite[SPRITE.TREE][time][5], canw2 - 720, canh2 - 200);
            ctx.drawImage(sprite[SPRITE.TREE][time][2], canw2 - 1020, canh2 + 340);
            ctx.drawImage(sprite[SPRITE.TREE][time][0], canw2 - 1120, canh2 - 0);
            ctx.drawImage(sprite[SPRITE.TREE][time][1], canw2 - 650, canh2 - 330);
            ctx.drawImage(sprite[SPRITE.TREE][time][4], canw2 - 495, canh2 - 90);
            ctx.drawImage(sprite[SPRITE.TREE][time][3], canw2 - 520, canh2 + 340);
            ctx.drawImage(sprite[SPRITE.TREE][time][2], canw2 + 830, canh2 - 520);
        }
        if (sprite[SPRITE.FIR]) {}
        if (user && world) {
            var x = user.cam.x;
            var y = user.cam.y;
            user.cam.x = canw2;
            user.cam.y = canh2;
            var real_time = world.time;
            world.time = fake_world.time;
            var items = fake_world.items;
            items[2].x = 400;
            items[2].y = 100;
            items[2].draw(SPRITE.WORKBENCH);
            var fruits = items[1];
            fruits.x = -500;
            fruits.y = 100;
            fruits.fruits[0].x = fruits.x - 20.5;
            fruits.fruits[0].y = fruits.y - 22.5;
            fruits.fruits[1].x = fruits.x - 35.5;
            fruits.fruits[1].y = fruits.y + 7.5;
            fruits.fruits[2].x = fruits.x + 7.5;
            fruits.fruits[2].y = fruits.y - 30;
            fruits.fruits[3].x = fruits.x + 22.5;
            fruits.fruits[3].y = fruits.y;
            fruits.fruits[4].x = fruits.x - 7.5;
            fruits.fruits[4].y = fruits.y + 14.5;
            for (var i = 0; i < fruits.info; i++) {
                fruits.fruits[i].draw(SPRITE.FRUIT);
            }
            var fruits = items[3];
            fruits.x = 210;
            fruits.y = -290;
            fruits.fruits[0].x = fruits.x - 20.5;
            fruits.fruits[0].y = fruits.y - 22.5;
            fruits.fruits[1].x = fruits.x - 35.5;
            fruits.fruits[1].y = fruits.y + 7.5;
            fruits.fruits[2].x = fruits.x + 7.5;
            fruits.fruits[2].y = fruits.y - 30;
            fruits.fruits[3].x = fruits.x + 22.5;
            fruits.fruits[3].y = fruits.y;
            fruits.fruits[4].x = fruits.x - 7.5;
            fruits.fruits[4].y = fruits.y + 14.5;
            for (var i = 0; i < fruits.info; i++) {
                fruits.fruits[i].draw(SPRITE.FRUIT);
            }
            items[0].x = 450;
            items[0].y = -100;
            items[0].draw_bg(SPRITE.WOOD_FIRE);
            items[0].draw_fg();
            user.cam.x = x;
            user.cam.y = y;
            world.time = real_time;
        }
    };

    function render_inventory() {
        sprite[SPRITE.INV_PUMPKIN] = create_craft_button(1, [{
            f: create_pumpkin,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#352b10", "#c06937", "#cd733b", "#b25e34", "#244e2b", "#214224", "#6f4424", "#3c3009"]
        }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CHEST_PUMPKIN] = sprite[SPRITE.INV_PUMPKIN];
        sprite[SPRITE.INV_CARROT] = [];
        sprite[SPRITE.INV_CARROT][0] = IMAGES.INV_CARROT_OUT;
        sprite[SPRITE.INV_CARROT][1] = IMAGES.INV_CARROT_IN;
        sprite[SPRITE.INV_CARROT][2] = IMAGES.INV_CARROT_CLICK;
        sprite[SPRITE.CHEST_CARROT] = sprite[SPRITE.INV_CARROT];
        sprite[SPRITE.INV_WATERMELON] = [];
        sprite[SPRITE.INV_WATERMELON][0] = IMAGES.INV_WATERMELON_OUT;
        sprite[SPRITE.INV_WATERMELON][1] = IMAGES.INV_WATERMELON_IN;
        sprite[SPRITE.INV_WATERMELON][2] = IMAGES.INV_WATERMELON_CLICK;
        sprite[SPRITE.CHEST_WATERMELON] = sprite[SPRITE.INV_WATERMELON];
        sprite[SPRITE.INV_ALOE_VERA] = [];
        sprite[SPRITE.INV_ALOE_VERA][0] = IMAGES.INV_ALOE_VERA_OUT;
        sprite[SPRITE.INV_ALOE_VERA][1] = IMAGES.INV_ALOE_VERA_IN;
        sprite[SPRITE.INV_ALOE_VERA][2] = IMAGES.INV_ALOE_VERA_CLICK;
        sprite[SPRITE.CHEST_ALOE_VERA] = sprite[SPRITE.INV_ALOE_VERA];
        sprite[SPRITE.INV_CACTUS] = [];
        sprite[SPRITE.INV_CACTUS][0] = IMAGES.INV_CACTUS_OUT;
        sprite[SPRITE.INV_CACTUS][1] = IMAGES.INV_CACTUS_IN;
        sprite[SPRITE.INV_CACTUS][2] = IMAGES.INV_CACTUS_CLICK;
        sprite[SPRITE.CHEST_CACTUS] = sprite[SPRITE.INV_CACTUS];
        sprite[SPRITE.INV_TOMATO] = [];
        sprite[SPRITE.INV_TOMATO][0] = IMAGES.INV_TOMATO_OUT;
        sprite[SPRITE.INV_TOMATO][1] = IMAGES.INV_TOMATO_IN;
        sprite[SPRITE.INV_TOMATO][2] = IMAGES.INV_TOMATO_CLICK;
        sprite[SPRITE.CHEST_TOMATO] = sprite[SPRITE.INV_TOMATO];
        sprite[SPRITE.INV_BOAT] = [];
        sprite[SPRITE.INV_BOAT][0] = IMAGES.INV_BOAT_OUT;
        sprite[SPRITE.INV_BOAT][1] = IMAGES.INV_BOAT_IN;
        sprite[SPRITE.INV_BOAT][2] = IMAGES.INV_BOAT_CLICK;
        sprite[SPRITE.CHEST_BOAT] = sprite[SPRITE.INV_BOAT];
        sprite[SPRITE.CRAFT_BOAT] = sprite[SPRITE.INV_BOAT];
        sprite[SPRITE.INV_MACHETE] = [];
        sprite[SPRITE.INV_MACHETE][0] = IMAGES.INV_MACHETE_OUT;
        sprite[SPRITE.INV_MACHETE][1] = IMAGES.INV_MACHETE_IN;
        sprite[SPRITE.INV_MACHETE][2] = IMAGES.INV_MACHETE_CLICK;
        sprite[SPRITE.CHEST_MACHETE] = sprite[SPRITE.INV_MACHETE];
        sprite[SPRITE.CRAFT_MACHETE] = sprite[SPRITE.INV_MACHETE];
        sprite[SPRITE.INV_SLED] = [];
        sprite[SPRITE.INV_SLED][0] = IMAGES.INV_SLED_OUT;
        sprite[SPRITE.INV_SLED][1] = IMAGES.INV_SLED_IN;
        sprite[SPRITE.INV_SLED][2] = IMAGES.INV_SLED_CLICK;
        sprite[SPRITE.CHEST_SLED] = sprite[SPRITE.INV_SLED];
        sprite[SPRITE.CRAFT_SLED] = sprite[SPRITE.INV_SLED];
        sprite[SPRITE.INV_PIRATE_HAT] = [];
        sprite[SPRITE.INV_PIRATE_HAT][0] = IMAGES.INV_PIRATE_HAT_OUT;
        sprite[SPRITE.INV_PIRATE_HAT][1] = IMAGES.INV_PIRATE_HAT_IN;
        sprite[SPRITE.INV_PIRATE_HAT][2] = IMAGES.INV_PIRATE_HAT_CLICK;
        sprite[SPRITE.CHEST_PIRATE_HAT] = sprite[SPRITE.INV_PIRATE_HAT];
        sprite[SPRITE.CRAFT_PIRATE_HAT] = sprite[SPRITE.INV_PIRATE_HAT];
        sprite[SPRITE.INV_FUR_MAMMOTH] = [];
        sprite[SPRITE.INV_FUR_MAMMOTH][0] = IMAGES.INV_FUR_MAMMOTH_OUT;
        sprite[SPRITE.INV_FUR_MAMMOTH][1] = IMAGES.INV_FUR_MAMMOTH_IN;
        sprite[SPRITE.INV_FUR_MAMMOTH][2] = IMAGES.INV_FUR_MAMMOTH_CLICK;
        sprite[SPRITE.CHEST_FUR_MAMMOTH] = sprite[SPRITE.INV_FUR_MAMMOTH];
        sprite[SPRITE.INV_FUR_HAT] = [];
        sprite[SPRITE.INV_FUR_HAT][0] = IMAGES.INV_FUR_HAT_OUT;
        sprite[SPRITE.INV_FUR_HAT][1] = IMAGES.INV_FUR_HAT_IN;
        sprite[SPRITE.INV_FUR_HAT][2] = IMAGES.INV_FUR_HAT_CLICK;
        sprite[SPRITE.CHEST_FUR_HAT] = sprite[SPRITE.INV_FUR_HAT];
        sprite[SPRITE.CRAFT_FUR_HAT] = sprite[SPRITE.INV_FUR_HAT];
        sprite[SPRITE.INV_WOOD_BOW] = [];
        sprite[SPRITE.INV_WOOD_BOW][0] = IMAGES.INV_WOOD_BOW_OUT;
        sprite[SPRITE.INV_WOOD_BOW][1] = IMAGES.INV_WOOD_BOW_IN;
        sprite[SPRITE.INV_WOOD_BOW][2] = IMAGES.INV_WOOD_BOW_CLICK;
        sprite[SPRITE.CHEST_WOOD_BOW] = sprite[SPRITE.INV_WOOD_BOW];
        sprite[SPRITE.CRAFT_WOOD_BOW] = sprite[SPRITE.INV_WOOD_BOW];
        sprite[SPRITE.INV_WOOD_ARROW] = [];
        sprite[SPRITE.INV_WOOD_ARROW][0] = IMAGES.INV_WOOD_ARROW_OUT;
        sprite[SPRITE.INV_WOOD_ARROW][1] = IMAGES.INV_WOOD_ARROW_IN;
        sprite[SPRITE.INV_WOOD_ARROW][2] = IMAGES.INV_WOOD_ARROW_CLICK;
        sprite[SPRITE.CHEST_WOOD_ARROW] = sprite[SPRITE.INV_WOOD_ARROW];
        sprite[SPRITE.CRAFT_WOOD_ARROW] = sprite[SPRITE.INV_WOOD_ARROW];
        sprite[SPRITE.INV_STONE_BOW] = [];
        sprite[SPRITE.INV_STONE_BOW][0] = IMAGES.INV_STONE_BOW_OUT;
        sprite[SPRITE.INV_STONE_BOW][1] = IMAGES.INV_STONE_BOW_IN;
        sprite[SPRITE.INV_STONE_BOW][2] = IMAGES.INV_STONE_BOW_CLICK;
        sprite[SPRITE.CHEST_STONE_BOW] = sprite[SPRITE.INV_STONE_BOW];
        sprite[SPRITE.CRAFT_STONE_BOW] = sprite[SPRITE.INV_STONE_BOW];
        sprite[SPRITE.INV_STONE_ARROW] = [];
        sprite[SPRITE.INV_STONE_ARROW][0] = IMAGES.INV_STONE_ARROW_OUT;
        sprite[SPRITE.INV_STONE_ARROW][1] = IMAGES.INV_STONE_ARROW_IN;
        sprite[SPRITE.INV_STONE_ARROW][2] = IMAGES.INV_STONE_ARROW_CLICK;
        sprite[SPRITE.CHEST_STONE_ARROW] = sprite[SPRITE.INV_STONE_ARROW];
        sprite[SPRITE.CRAFT_STONE_ARROW] = sprite[SPRITE.INV_STONE_ARROW];
        sprite[SPRITE.INV_GOLD_BOW] = [];
        sprite[SPRITE.INV_GOLD_BOW][0] = IMAGES.INV_GOLD_BOW_OUT;
        sprite[SPRITE.INV_GOLD_BOW][1] = IMAGES.INV_GOLD_BOW_IN;
        sprite[SPRITE.INV_GOLD_BOW][2] = IMAGES.INV_GOLD_BOW_CLICK;
        sprite[SPRITE.CHEST_GOLD_BOW] = sprite[SPRITE.INV_GOLD_BOW];
        sprite[SPRITE.CRAFT_GOLD_BOW] = sprite[SPRITE.INV_GOLD_BOW];
        sprite[SPRITE.INV_GOLD_ARROW] = [];
        sprite[SPRITE.INV_GOLD_ARROW][0] = IMAGES.INV_GOLD_ARROW_OUT;
        sprite[SPRITE.INV_GOLD_ARROW][1] = IMAGES.INV_GOLD_ARROW_IN;
        sprite[SPRITE.INV_GOLD_ARROW][2] = IMAGES.INV_GOLD_ARROW_CLICK;
        sprite[SPRITE.CHEST_GOLD_ARROW] = sprite[SPRITE.INV_GOLD_ARROW];
        sprite[SPRITE.CRAFT_GOLD_ARROW] = sprite[SPRITE.INV_GOLD_ARROW];
        sprite[SPRITE.INV_DIAMOND_BOW] = [];
        sprite[SPRITE.INV_DIAMOND_BOW][0] = IMAGES.INV_DIAMOND_BOW_OUT;
        sprite[SPRITE.INV_DIAMOND_BOW][1] = IMAGES.INV_DIAMOND_BOW_IN;
        sprite[SPRITE.INV_DIAMOND_BOW][2] = IMAGES.INV_DIAMOND_BOW_CLICK;
        sprite[SPRITE.CHEST_DIAMOND_BOW] = sprite[SPRITE.INV_DIAMOND_BOW];
        sprite[SPRITE.CRAFT_DIAMOND_BOW] = sprite[SPRITE.INV_DIAMOND_BOW];
        sprite[SPRITE.INV_DIAMOND_ARROW] = [];
        sprite[SPRITE.INV_DIAMOND_ARROW][0] = IMAGES.INV_DIAMOND_ARROW_OUT;
        sprite[SPRITE.INV_DIAMOND_ARROW][1] = IMAGES.INV_DIAMOND_ARROW_IN;
        sprite[SPRITE.INV_DIAMOND_ARROW][2] = IMAGES.INV_DIAMOND_ARROW_CLICK;
        sprite[SPRITE.CHEST_DIAMOND_ARROW] = sprite[SPRITE.INV_DIAMOND_ARROW];
        sprite[SPRITE.CRAFT_DIAMOND_ARROW] = sprite[SPRITE.INV_DIAMOND_ARROW];
        sprite[SPRITE.INV_AMETHYST_BOW] = [];
        sprite[SPRITE.INV_AMETHYST_BOW][0] = IMAGES.INV_AMETHYST_BOW_OUT;
        sprite[SPRITE.INV_AMETHYST_BOW][1] = IMAGES.INV_AMETHYST_BOW_IN;
        sprite[SPRITE.INV_AMETHYST_BOW][2] = IMAGES.INV_AMETHYST_BOW_CLICK;
        sprite[SPRITE.CHEST_AMETHYST_BOW] = sprite[SPRITE.INV_AMETHYST_BOW];
        sprite[SPRITE.CRAFT_AMETHYST_BOW] = sprite[SPRITE.INV_AMETHYST_BOW];
        sprite[SPRITE.INV_AMETHYST_ARROW] = [];
        sprite[SPRITE.INV_AMETHYST_ARROW][0] = IMAGES.INV_AMETHYST_ARROW_OUT;
        sprite[SPRITE.INV_AMETHYST_ARROW][1] = IMAGES.INV_AMETHYST_ARROW_IN;
        sprite[SPRITE.INV_AMETHYST_ARROW][2] = IMAGES.INV_AMETHYST_ARROW_CLICK;
        sprite[SPRITE.CHEST_AMETHYST_ARROW] = sprite[SPRITE.INV_AMETHYST_ARROW];
        sprite[SPRITE.CRAFT_AMETHYST_ARROW] = sprite[SPRITE.INV_AMETHYST_ARROW];
        sprite[SPRITE.INV_REIDITE_BOW] = [];
        sprite[SPRITE.INV_REIDITE_BOW][0] = IMAGES.INV_REIDITE_BOW_OUT;
        sprite[SPRITE.INV_REIDITE_BOW][1] = IMAGES.INV_REIDITE_BOW_IN;
        sprite[SPRITE.INV_REIDITE_BOW][2] = IMAGES.INV_REIDITE_BOW_CLICK;
        sprite[SPRITE.CHEST_REIDITE_BOW] = sprite[SPRITE.INV_REIDITE_BOW];
        sprite[SPRITE.CRAFT_REIDITE_BOW] = sprite[SPRITE.INV_REIDITE_BOW];
        sprite[SPRITE.INV_REIDITE_ARROW] = [];
        sprite[SPRITE.INV_REIDITE_ARROW][0] = IMAGES.INV_REIDITE_ARROW_OUT;
        sprite[SPRITE.INV_REIDITE_ARROW][1] = IMAGES.INV_REIDITE_ARROW_IN;
        sprite[SPRITE.INV_REIDITE_ARROW][2] = IMAGES.INV_REIDITE_ARROW_CLICK;
        sprite[SPRITE.CHEST_REIDITE_ARROW] = sprite[SPRITE.INV_REIDITE_ARROW];
        sprite[SPRITE.CRAFT_REIDITE_ARROW] = sprite[SPRITE.INV_REIDITE_ARROW];
        sprite[SPRITE.INV_DRAGON_BOW] = [];
        sprite[SPRITE.INV_DRAGON_BOW][0] = IMAGES.INV_DRAGON_BOW_OUT;
        sprite[SPRITE.INV_DRAGON_BOW][1] = IMAGES.INV_DRAGON_BOW_IN;
        sprite[SPRITE.INV_DRAGON_BOW][2] = IMAGES.INV_DRAGON_BOW_CLICK;
        sprite[SPRITE.CHEST_DRAGON_BOW] = sprite[SPRITE.INV_DRAGON_BOW];
        sprite[SPRITE.CRAFT_DRAGON_BOW] = sprite[SPRITE.INV_DRAGON_BOW];
        sprite[SPRITE.INV_DRAGON_ARROW] = [];
        sprite[SPRITE.INV_DRAGON_ARROW][0] = IMAGES.INV_DRAGON_ARROW_OUT;
        sprite[SPRITE.INV_DRAGON_ARROW][1] = IMAGES.INV_DRAGON_ARROW_IN;
        sprite[SPRITE.INV_DRAGON_ARROW][2] = IMAGES.INV_DRAGON_ARROW_CLICK;
        sprite[SPRITE.CHEST_DRAGON_ARROW] = sprite[SPRITE.INV_DRAGON_ARROW];
        sprite[SPRITE.CRAFT_DRAGON_ARROW] = sprite[SPRITE.INV_DRAGON_ARROW];
        sprite[SPRITE.INV_WOOD_SHIELD] = [];
        sprite[SPRITE.INV_WOOD_SHIELD][0] = IMAGES.INV_WOOD_SHIELD_OUT;
        sprite[SPRITE.INV_WOOD_SHIELD][1] = IMAGES.INV_WOOD_SHIELD_IN;
        sprite[SPRITE.INV_WOOD_SHIELD][2] = IMAGES.INV_WOOD_SHIELD_CLICK;
        sprite[SPRITE.CHEST_WOOD_SHIELD] = sprite[SPRITE.INV_WOOD_SHIELD];
        sprite[SPRITE.CRAFT_WOOD_SHIELD] = sprite[SPRITE.INV_WOOD_SHIELD];
        sprite[SPRITE.INV_STONE_SHIELD] = [];
        sprite[SPRITE.INV_STONE_SHIELD][0] = IMAGES.INV_STONE_SHIELD_OUT;
        sprite[SPRITE.INV_STONE_SHIELD][1] = IMAGES.INV_STONE_SHIELD_IN;
        sprite[SPRITE.INV_STONE_SHIELD][2] = IMAGES.INV_STONE_SHIELD_CLICK;
        sprite[SPRITE.CHEST_STONE_SHIELD] = sprite[SPRITE.INV_STONE_SHIELD];
        sprite[SPRITE.CRAFT_STONE_SHIELD] = sprite[SPRITE.INV_STONE_SHIELD];
        sprite[SPRITE.INV_GOLD_SHIELD] = [];
        sprite[SPRITE.INV_GOLD_SHIELD][0] = IMAGES.INV_GOLD_SHIELD_OUT;
        sprite[SPRITE.INV_GOLD_SHIELD][1] = IMAGES.INV_GOLD_SHIELD_IN;
        sprite[SPRITE.INV_GOLD_SHIELD][2] = IMAGES.INV_GOLD_SHIELD_CLICK;
        sprite[SPRITE.CHEST_GOLD_SHIELD] = sprite[SPRITE.INV_GOLD_SHIELD];
        sprite[SPRITE.CRAFT_GOLD_SHIELD] = sprite[SPRITE.INV_GOLD_SHIELD];
        sprite[SPRITE.INV_DIAMOND_SHIELD] = [];
        sprite[SPRITE.INV_DIAMOND_SHIELD][0] = IMAGES.INV_DIAMOND_SHIELD_OUT;
        sprite[SPRITE.INV_DIAMOND_SHIELD][1] = IMAGES.INV_DIAMOND_SHIELD_IN;
        sprite[SPRITE.INV_DIAMOND_SHIELD][2] = IMAGES.INV_DIAMOND_SHIELD_CLICK;
        sprite[SPRITE.CHEST_DIAMOND_SHIELD] = sprite[SPRITE.INV_DIAMOND_SHIELD];
        sprite[SPRITE.CRAFT_DIAMOND_SHIELD] = sprite[SPRITE.INV_DIAMOND_SHIELD];
        sprite[SPRITE.INV_AMETHYST_SHIELD] = [];
        sprite[SPRITE.INV_AMETHYST_SHIELD][0] = IMAGES.INV_AMETHYST_SHIELD_OUT;
        sprite[SPRITE.INV_AMETHYST_SHIELD][1] = IMAGES.INV_AMETHYST_SHIELD_IN;
        sprite[SPRITE.INV_AMETHYST_SHIELD][2] = IMAGES.INV_AMETHYST_SHIELD_CLICK;
        sprite[SPRITE.CHEST_AMETHYST_SHIELD] = sprite[SPRITE.INV_AMETHYST_SHIELD];
        sprite[SPRITE.CRAFT_AMETHYST_SHIELD] = sprite[SPRITE.INV_AMETHYST_SHIELD];
        sprite[SPRITE.INV_REIDITE_SHIELD] = [];
        sprite[SPRITE.INV_REIDITE_SHIELD][0] = IMAGES.INV_REIDITE_SHIELD_OUT;
        sprite[SPRITE.INV_REIDITE_SHIELD][1] = IMAGES.INV_REIDITE_SHIELD_IN;
        sprite[SPRITE.INV_REIDITE_SHIELD][2] = IMAGES.INV_REIDITE_SHIELD_CLICK;
        sprite[SPRITE.CHEST_REIDITE_SHIELD] = sprite[SPRITE.INV_REIDITE_SHIELD];
        sprite[SPRITE.CRAFT_REIDITE_SHIELD] = sprite[SPRITE.INV_REIDITE_SHIELD];
        sprite[SPRITE.INV_FLOWER_HAT] = [];
        sprite[SPRITE.INV_FLOWER_HAT][0] = IMAGES.INV_FLOWER_HAT_OUT;
        sprite[SPRITE.INV_FLOWER_HAT][1] = IMAGES.INV_FLOWER_HAT_IN;
        sprite[SPRITE.INV_FLOWER_HAT][2] = IMAGES.INV_FLOWER_HAT_CLICK;
        sprite[SPRITE.CHEST_FLOWER_HAT] = sprite[SPRITE.INV_FLOWER_HAT];
        sprite[SPRITE.CRAFT_FLOWER_HAT] = sprite[SPRITE.INV_FLOWER_HAT];
        sprite[SPRITE.INV_SANDWORM_JUICE] = [];
        sprite[SPRITE.INV_SANDWORM_JUICE][0] = IMAGES.INV_SANDWORM_JUICE_OUT;
        sprite[SPRITE.INV_SANDWORM_JUICE][1] = IMAGES.INV_SANDWORM_JUICE_IN;
        sprite[SPRITE.INV_SANDWORM_JUICE][2] = IMAGES.INV_SANDWORM_JUICE_CLICK;
        sprite[SPRITE.CHEST_SANDWORM_JUICE] = sprite[SPRITE.INV_SANDWORM_JUICE];
        sprite[SPRITE.CRAFT_SANDWORM_JUICE] = sprite[SPRITE.INV_SANDWORM_JUICE];
        sprite[SPRITE.INV_GARLIC] = create_craft_button(1, [{
            f: create_garlic,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#352b10", "#e8e8e8", "#bbbbbb", "#e0e1e0", "#c4c4c4"]
        }], 0.22, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CHEST_GARLIC] = sprite[SPRITE.INV_GARLIC];
        sprite[SPRITE.INV_THORNBUSH] = create_craft_button(1, [{
            f: create_brambles,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#352b10", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]
        }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CHEST_THORNBUSH] = sprite[SPRITE.INV_THORNBUSH];
        sprite[SPRITE.INV_WINDMILL] = create_craft_button(1, [{
            f: create_windmill,
            x: -1,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
        }, {
            f: create_windmill_wing,
            x: -1,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
        }, {
            f: create_windmill_head,
            x: -1,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
        }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CRAFT_WINDMILL] = sprite[SPRITE.INV_WINDMILL];
        sprite[SPRITE.INV_WILD_WHEAT] = create_craft_button(1, [{
            f: create_wheat,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#A89F67", "#9E8456"]
        }], 1.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.INV_SIGN] = create_craft_button(1, [{
            f: create_sign,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#44301b", "#57442a", "#523e26"]
        }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CRAFT_SIGN] = sprite[SPRITE.INV_SIGN];
        sprite[SPRITE.INV_WHEAT_SEED] = create_craft_button(1, [{
            f: create_seed,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#A89F67", "#9E8456"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CRAFT_WHEAT_SEED] = sprite[SPRITE.INV_WHEAT_SEED];
        sprite[SPRITE.INV_SEED] = create_craft_button(1, [{
            f: create_seed,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#493d36", "#332b28"]
        }], 0.7, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CRAFT_SEED] = sprite[SPRITE.INV_SEED];
        sprite[SPRITE.INV_PUMPKIN_SEED] = create_craft_button(1, [{
            f: create_seed,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#c67933", "#b17238"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CRAFT_PUMPKIN_SEED] = sprite[SPRITE.INV_PUMPKIN_SEED];
        sprite[SPRITE.INV_GARLIC_SEED] = create_craft_button(1, [{
            f: create_seed,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#e8e8e8", "#bbbbbb"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CRAFT_GARLIC_SEED] = sprite[SPRITE.INV_GARLIC_SEED];
        sprite[SPRITE.INV_THORNBUSH_SEED] = create_craft_button(1, [{
            f: create_seed,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#328a56", "#449573"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CRAFT_THORNBUSH_SEED] = sprite[SPRITE.INV_THORNBUSH_SEED];
        sprite[SPRITE.INV_CARROT_SEED] = create_craft_button(1, [{
            f: create_seed,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#c98e2f", "#a36b11"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CRAFT_CARROT_SEED] = sprite[SPRITE.INV_CARROT_SEED];
        sprite[SPRITE.CHEST_CARROT_SEED] = sprite[SPRITE.INV_CARROT_SEED];
        sprite[SPRITE.INV_WATERMELON_SEED] = create_craft_button(1, [{
            f: create_seed,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#13a56d", "#098a58"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CRAFT_WATERMELON_SEED] = sprite[SPRITE.INV_WATERMELON_SEED];
        sprite[SPRITE.CHEST_WATERMELON_SEED] = sprite[SPRITE.INV_WATERMELON_SEED];
        sprite[SPRITE.INV_ALOE_VERA_SEED] = create_craft_button(1, [{
            f: create_seed,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#3a8214", "#4a9c1e"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CRAFT_ALOE_VERA_SEED] = sprite[SPRITE.INV_ALOE_VERA_SEED];
        sprite[SPRITE.CHEST_ALOE_VERA_SEED] = sprite[SPRITE.INV_ALOE_VERA_SEED];
        sprite[SPRITE.INV_TOMATO_SEED] = create_craft_button(1, [{
            f: create_seed,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#b22419", "#99110e"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CRAFT_TOMATO_SEED] = sprite[SPRITE.INV_TOMATO_SEED];
        sprite[SPRITE.CHEST_TOMATO_SEED] = sprite[SPRITE.INV_TOMATO_SEED];
        sprite[SPRITE.INV_FIRE] = create_craft_button(1, [{
            f: create_wood_fire,
            x: -2,
            y: -2,
            a: 1,
            r: -Math.PI / 7,
            c: ["#4d2d14", "#432516"]
        }, {
            f: create_fire,
            x: -2,
            y: -2,
            a: 1,
            r: -Math.PI / 7,
            c: ["#efd435", "#ec8d35", "#e96132"]
        }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CRAFT_FIRE] = sprite[SPRITE.INV_FIRE];
        sprite[SPRITE.INV_BIG_FIRE] = create_craft_button(1, [{
            f: create_big_fire_wood,
            x: -2,
            y: -1,
            a: 1,
            r: -Math.PI / 7,
            c: ["#4d2d14", "#432516", "#58645F", "#75827D", "#0c2c2e"]
        }, {
            f: create_fire,
            x: -2,
            y: -1,
            a: 1,
            r: -Math.PI / 7,
            c: ["#efd435", "#ec8d35", "#e96132"]
        }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CRAFT_BIG_FIRE] = sprite[SPRITE.INV_BIG_FIRE];
        sprite[SPRITE.INV_PIRATE_SWORD] = create_craft_button(1, [{
            f: create_pirate_sword,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"]
        }], 0.1, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.INV_SUGAR_CAN] = create_craft_button(1, [{
            f: create_sugar_can,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"]
        }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.INV_SWORD_WOOD] = create_craft_button(1, [{
            f: create_sword_wood,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#252525", "#73583e", "#493425", "#7d6144", "#5e4530", "#563e2b"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.INV_SWORD] = create_craft_button(1, [{
            f: create_stonesword,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.INV_SWORD_GOLD] = create_craft_button(1, [{
            f: create_goldsword,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.INV_SWORD_DIAMOND] = create_craft_button(1, [{
            f: create_diamondsword,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.INV_SWORD_AMETHYST] = create_craft_button(1, [{
            f: create_amesword,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.INV_PICK_WOOD] = create_craft_button(1, [{
            f: create_pickaxe,
            x: -2,
            y: 5,
            a: 1,
            r: -Math.PI / 5,
            c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.INV_PICK] = create_craft_button(1, [{
            f: create_pickaxe,
            x: -2,
            y: 5,
            a: 1,
            r: -Math.PI / 5,
            c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.INV_PICK_GOLD] = create_craft_button(1, [{
            f: create_pickaxe,
            x: -2,
            y: 5,
            a: 1,
            r: -Math.PI / 5,
            c: ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.INV_PICK_DIAMOND] = create_craft_button(1, [{
            f: create_pickaxe,
            x: -2,
            y: 5,
            a: 1,
            r: -Math.PI / 5,
            c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.INV_PICK_AMETHYST] = create_craft_button(1, [{
            f: create_pickaxe,
            x: -2,
            y: 5,
            a: 1,
            r: -Math.PI / 5,
            c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.INV_PICK_REIDITE] = [];
        sprite[SPRITE.INV_PICK_REIDITE][0] = IMAGES.INV_PICK_REIDITE_OUT;
        sprite[SPRITE.INV_PICK_REIDITE][1] = IMAGES.INV_PICK_REIDITE_IN;
        sprite[SPRITE.INV_PICK_REIDITE][2] = IMAGES.INV_PICK_REIDITE_CLICK;
        sprite[SPRITE.CRAFT_PICK_REIDITE] = sprite[SPRITE.INV_PICK_REIDITE];
        sprite[SPRITE.CHEST_PICK_REIDITE] = sprite[SPRITE.INV_PICK_REIDITE];
        sprite[SPRITE.INV_STONE] = create_craft_button(1, [{
            f: create_stone,
            x: -5,
            y: -5,
            a: 1,
            r: 0,
            c: ["#252B28", "#58645F", "#75827D"]
        }], 0.23, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[SPRITE.INV_GOLD] = create_craft_button(1, [{
            f: create_gold,
            x: -5,
            y: -5,
            a: 1,
            r: 0,
            c: ["#282823", "#877c2d", "#c4bc51"]
        }], 0.43, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[SPRITE.INV_DIAMOND] = create_craft_button(1, [{
            f: create_diamond,
            x: -5,
            y: -5,
            a: 1,
            r: 0,
            c: ["#232828", "#3fc9c9", "#74ede6"]
        }], 0.33, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[SPRITE.INV_WOOD] = create_craft_button(1, [{
            f: create_wood_fire,
            x: 0,
            y: -5,
            a: 1,
            r: Math.PI / 2.5,
            c: ["#4d2d14", "#432516"]
        }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[SPRITE.CRAFT_SWORD_WOOD] = sprite[SPRITE.INV_SWORD_WOOD];
        sprite[SPRITE.CRAFT_SWORD] = sprite[SPRITE.INV_SWORD];
        sprite[SPRITE.CRAFT_SWORD_GOLD] = sprite[SPRITE.INV_SWORD_GOLD];
        sprite[SPRITE.CRAFT_SWORD_DIAMOND] = sprite[SPRITE.INV_SWORD_DIAMOND];
        sprite[SPRITE.CRAFT_SWORD_AMETHYST] = sprite[SPRITE.INV_SWORD_AMETHYST];
        sprite[SPRITE.CRAFT_PICK_WOOD] = sprite[SPRITE.INV_PICK_WOOD];
        sprite[SPRITE.CRAFT_PICK] = sprite[SPRITE.INV_PICK];
        sprite[SPRITE.CRAFT_PICK_GOLD] = sprite[SPRITE.INV_PICK_GOLD];
        sprite[SPRITE.CRAFT_PICK_DIAMOND] = sprite[SPRITE.INV_PICK_DIAMOND];
        sprite[SPRITE.CRAFT_PICK_AMETHYST] = sprite[SPRITE.INV_PICK_AMETHYST];
        sprite[SPRITE.INV_PLANT] = create_craft_button(1, [{
            f: create_food_plant,
            x: 0,
            y: 0,
            a: 1,
            r: 0
        }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.INV_WORK] = create_craft_button(1, [{
            f: create_workbench,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]
        }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CRAFT_WORK] = sprite[SPRITE.INV_WORK];
        sprite[SPRITE.INV_STONE_WALL] = create_craft_button(1, [{
            f: create_wall_stone,
            x: -2,
            y: -2,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
        }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CRAFT_STONE_WALL] = sprite[SPRITE.INV_STONE_WALL];
        sprite[SPRITE.INV_DIAMOND_WALL] = create_craft_button(1, [{
            f: create_wall_diamond,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
        }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CRAFT_DIAMOND_WALL] = sprite[SPRITE.INV_DIAMOND_WALL];
        sprite[SPRITE.INV_AMETHYST_WALL] = create_craft_button(1, [{
            f: create_wall_stone,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
        }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CRAFT_AMETHYST_WALL] = sprite[SPRITE.INV_AMETHYST_WALL];
        sprite[SPRITE.INV_GOLD_WALL] = create_craft_button(1, [{
            f: create_wall_gold,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
        }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CRAFT_GOLD_WALL] = sprite[SPRITE.INV_GOLD_WALL];
        sprite[SPRITE.INV_WALL] = create_craft_button(1, [{
            f: create_wall,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
        }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CRAFT_WALL] = sprite[SPRITE.INV_WALL];
        sprite[SPRITE.INV_SPIKE] = create_craft_button(1, [{
            f: create_spike,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
        }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CRAFT_SPIKE] = sprite[SPRITE.INV_SPIKE];
        sprite[SPRITE.INV_GOLD_SPIKE] = create_craft_button(1, [{
            f: create_spike_gold,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#5f6061", "#939393", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
        }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CRAFT_GOLD_SPIKE] = sprite[SPRITE.INV_GOLD_SPIKE];
        sprite[SPRITE.INV_DIAMOND_SPIKE] = create_craft_button(1, [{
            f: create_spike_gold,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
        }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CRAFT_DIAMOND_SPIKE] = sprite[SPRITE.INV_DIAMOND_SPIKE];
        sprite[SPRITE.INV_STONE_SPIKE] = create_craft_button(1, [{
            f: create_spike_stone,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#5f6061", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
        }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CRAFT_STONE_SPIKE] = sprite[SPRITE.INV_STONE_SPIKE];
        sprite[SPRITE.INV_AMETHYST_SPIKE] = create_craft_button(1, [{
            f: create_spike_stone,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#5f6061", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
        }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CRAFT_AMETHYST_SPIKE] = sprite[SPRITE.INV_AMETHYST_SPIKE];
        sprite[SPRITE.INV_DOOR_WOOD_CLOSE] = create_craft_button(1, [{
            f: create_door_wood,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CRAFT_DOOR_WOOD_CLOSE] = sprite[SPRITE.INV_DOOR_WOOD_CLOSE];
        sprite[SPRITE.INV_DOOR_STONE_CLOSE] = create_craft_button(1, [{
            f: create_door_stone,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CRAFT_DOOR_STONE_CLOSE] = sprite[SPRITE.INV_DOOR_STONE_CLOSE];
        sprite[SPRITE.INV_DOOR_AMETHYST_CLOSE] = create_craft_button(1, [{
            f: create_door_stone,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CRAFT_DOOR_AMETHYST_CLOSE] = sprite[SPRITE.INV_DOOR_AMETHYST_CLOSE];
        sprite[SPRITE.INV_DOOR_GOLD_CLOSE] = create_craft_button(1, [{
            f: create_door_gold,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CRAFT_DOOR_GOLD_CLOSE] = sprite[SPRITE.INV_DOOR_GOLD_CLOSE];
        sprite[SPRITE.INV_DOOR_DIAMOND_CLOSE] = create_craft_button(1, [{
            f: create_door_diamond,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CRAFT_DOOR_DIAMOND_CLOSE] = sprite[SPRITE.INV_DOOR_DIAMOND_CLOSE];
        sprite[SPRITE.INV_CHEST] = create_craft_button(1, [{
            f: create_chest,
            x: 0,
            y: 2,
            a: 1,
            r: 0,
            c: ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]
        }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CRAFT_CHEST] = sprite[SPRITE.INV_CHEST];
        sprite[SPRITE.INV_MEAT] = create_craft_button(1, [{
            f: create_meat,
            x: 0,
            y: -3,
            a: 1,
            r: 0,
            c: ["#dd5d57", "#ffffff", "#5e5d5e", "#ffffff"]
        }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.INV_COOKED_MEAT] = create_craft_button(1, [{
            f: create_meat,
            x: 0,
            y: -3,
            a: 1,
            r: 0,
            c: ["#602920", "#844f49", "#5e5d5e", "#d3ccc7"]
        }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CRAFT_COOKED_MEAT] = sprite[SPRITE.INV_COOKED_MEAT];
        sprite[SPRITE.INV_CORD] = create_craft_button(1, [{
            f: create_cord,
            x: -3,
            y: -3,
            a: 1,
            r: 0,
            c: ["#cec0c4", "#ffffff", "#6d6768"]
        }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.INV_BLUE_CORD] = create_craft_button(1, [{
            f: create_cord,
            x: -3,
            y: -3,
            a: 1,
            r: 0,
            c: ["#d4e9ec", "#37b1d7", "#506c71"]
        }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CRAFT_BLUE_CORD] = sprite[SPRITE.INV_BLUE_CORD];
        sprite[SPRITE.INV_FUR] = create_craft_button(1, [{
            f: create_fur,
            x: -3,
            y: -3,
            a: 1,
            r: 0,
            c: ["#ef96be", "#ffffff"]
        }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[SPRITE.INV_FUR_BOAR] = create_craft_button(1, [{
            f: create_fur,
            x: -3,
            y: -3,
            a: 1,
            r: 0,
            c: ["#55423e", "#ffffff"]
        }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[SPRITE.INV_SPECIAL_FUR] = create_craft_button(1, [{
            f: create_special_fur,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#ffffff", "#e7e2e2", "#b35c46", "#a34d37"]
        }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[SPRITE.INV_SPECIAL_FUR_2] = create_craft_button(1, [{
            f: create_special_fur,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#14151b", "#000000", "#b35c46", "#a34d37"]
        }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[SPRITE.INV_KRAKEN_SKIN] = create_craft_button(1, [{
            f: create_fur,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#201851", "#b6222a"]
        }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[SPRITE.INV_FUR_WOLF] = create_craft_button(1, [{
            f: create_fur,
            x: -3,
            y: -3,
            a: 1,
            r: 0,
            c: ["#231f20", "#b6222a"]
        }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[SPRITE.INV_FUR_WINTER] = create_craft_button(1, [{
            f: create_fur,
            x: -3,
            y: -3,
            a: 1,
            r: 0,
            c: ["#ffffff", "#b6222a"]
        }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[SPRITE.INV_EARMUFFS] = create_craft_button(1, [{
            f: create_earmuff,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]
        }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.CRAFT_EARMUFFS] = sprite[SPRITE.INV_EARMUFFS];
        sprite[SPRITE.INV_COAT] = create_craft_button(1, [{
            f: create_coat,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]
        }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.CRAFT_COAT] = sprite[SPRITE.INV_COAT];
        sprite[SPRITE.INV_CAP_SCARF] = create_craft_button(1, [{
            f: create_cap_scarf,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]
        }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.CRAFT_CAP_SCARF] = sprite[SPRITE.INV_CAP_SCARF];
        sprite[SPRITE.INV_CHRISTMAS_HAT] = create_craft_button(1, [{
            f: create_christmas_hat,
            x: 0,
            y: 5,
            a: 1,
            r: 0,
            c: ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]
        }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.CHEST_CHRISTMAS_HAT] = sprite[SPRITE.INV_CHRISTMAS_HAT];
        sprite[SPRITE.INV_ELF_HAT] = create_craft_button(1, [{
            f: create_elf_hat,
            x: 0,
            y: 5,
            a: 1,
            r: 0,
            c: ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]
        }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.CHEST_ELF_HAT] = sprite[SPRITE.INV_ELF_HAT];
        sprite[SPRITE.INV_BANDAGE] = create_craft_button(1, [{
            f: create_bandage,
            x: -2,
            y: -2,
            a: 1,
            r: 0,
            c: ["#ffffff", "#cec0c4"]
        }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CRAFT_BANDAGE] = sprite[SPRITE.INV_BANDAGE];
        sprite[SPRITE.INV_BAG] = [];
        sprite[SPRITE.INV_BAG][0] = IMAGES.INV_BAG_OUT;
        sprite[SPRITE.INV_BAG][1] = IMAGES.INV_BAG_IN;
        sprite[SPRITE.INV_BAG][2] = IMAGES.INV_BAG_CLICK;
        sprite[SPRITE.CRAFT_BAG] = sprite[SPRITE.INV_BAG];
        sprite[SPRITE.INV_PITCHFORK] = [];
        sprite[SPRITE.INV_PITCHFORK][0] = IMAGES.INV_PITCHFORK_OUT;
        sprite[SPRITE.INV_PITCHFORK][1] = IMAGES.INV_PITCHFORK_IN;
        sprite[SPRITE.INV_PITCHFORK][2] = IMAGES.INV_PITCHFORK_CLICK;
        sprite[SPRITE.CRAFT_PITCHFORK] = sprite[SPRITE.INV_PITCHFORK];
        sprite[SPRITE.CHEST_PITCHFORK] = sprite[SPRITE.INV_PITCHFORK];
        sprite[SPRITE.INV_PITCHFORK2] = [];
        sprite[SPRITE.INV_PITCHFORK2][0] = IMAGES.INV_PITCHFORK2_OUT;
        sprite[SPRITE.INV_PITCHFORK2][1] = IMAGES.INV_PITCHFORK2_IN;
        sprite[SPRITE.INV_PITCHFORK2][2] = IMAGES.INV_PITCHFORK2_CLICK;
        sprite[SPRITE.CRAFT_PITCHFORK2] = sprite[SPRITE.INV_PITCHFORK2];
        sprite[SPRITE.CHEST_PITCHFORK2] = sprite[SPRITE.INV_PITCHFORK2];
        sprite[SPRITE.INV_PITCHFORK_PART] = [];
        sprite[SPRITE.INV_PITCHFORK_PART][0] = IMAGES.INV_PITCHFORK_PART_CLICK;
        sprite[SPRITE.INV_PITCHFORK_PART][1] = IMAGES.INV_PITCHFORK_PART_CLICK;
        sprite[SPRITE.INV_PITCHFORK_PART][2] = IMAGES.INV_PITCHFORK_PART_CLICK;
        sprite[SPRITE.CHEST_PITCHFORK_PART] = sprite[SPRITE.INV_PITCHFORK_PART];
        sprite[SPRITE.INV_PILOT_HELMET] = [];
        sprite[SPRITE.INV_PILOT_HELMET][0] = IMAGES.INV_PILOT_HELMET_OUT;
        sprite[SPRITE.INV_PILOT_HELMET][1] = IMAGES.INV_PILOT_HELMET_IN;
        sprite[SPRITE.INV_PILOT_HELMET][2] = IMAGES.INV_PILOT_HELMET_CLICK;
        sprite[SPRITE.CRAFT_PILOT_HELMET] = sprite[SPRITE.INV_PILOT_HELMET];
        sprite[SPRITE.CHEST_PILOT_HELMET] = sprite[SPRITE.INV_PILOT_HELMET];
        sprite[SPRITE.INV_PILOT_GLASSES] = [];
        sprite[SPRITE.INV_PILOT_GLASSES][0] = IMAGES.INV_PILOT_GLASSES_CLICK;
        sprite[SPRITE.INV_PILOT_GLASSES][1] = IMAGES.INV_PILOT_GLASSES_CLICK;
        sprite[SPRITE.INV_PILOT_GLASSES][2] = IMAGES.INV_PILOT_GLASSES_CLICK;
        sprite[SPRITE.CHEST_PILOT_GLASSES] = sprite[SPRITE.INV_PILOT_GLASSES];
        sprite[SPRITE.INV_WOOD_TOWER] = [];
        sprite[SPRITE.INV_WOOD_TOWER][0] = IMAGES.INV_WOOD_TOWER_OUT;
        sprite[SPRITE.INV_WOOD_TOWER][1] = IMAGES.INV_WOOD_TOWER_IN;
        sprite[SPRITE.INV_WOOD_TOWER][2] = IMAGES.INV_WOOD_TOWER_CLICK;
        sprite[SPRITE.CRAFT_WOOD_TOWER] = sprite[SPRITE.INV_WOOD_TOWER];
        sprite[SPRITE.CHEST_WOOD_TOWER] = sprite[SPRITE.INV_WOOD_TOWER];
        sprite[SPRITE.INV_WOOD_DOOR_SPIKE] = [];
        sprite[SPRITE.INV_WOOD_DOOR_SPIKE][0] = IMAGES.INV_WOOD_DOOR_SPIKE_OUT;
        sprite[SPRITE.INV_WOOD_DOOR_SPIKE][1] = IMAGES.INV_WOOD_DOOR_SPIKE_IN;
        sprite[SPRITE.INV_WOOD_DOOR_SPIKE][2] = IMAGES.INV_WOOD_DOOR_SPIKE_CLICK;
        sprite[SPRITE.CRAFT_WOOD_DOOR_SPIKE] = sprite[SPRITE.INV_WOOD_DOOR_SPIKE];
        sprite[SPRITE.CHEST_WOOD_DOOR_SPIKE] = sprite[SPRITE.INV_WOOD_DOOR_SPIKE];
        sprite[SPRITE.INV_STONE_DOOR_SPIKE] = [];
        sprite[SPRITE.INV_STONE_DOOR_SPIKE][0] = IMAGES.INV_STONE_DOOR_SPIKE_OUT;
        sprite[SPRITE.INV_STONE_DOOR_SPIKE][1] = IMAGES.INV_STONE_DOOR_SPIKE_IN;
        sprite[SPRITE.INV_STONE_DOOR_SPIKE][2] = IMAGES.INV_STONE_DOOR_SPIKE_CLICK;
        sprite[SPRITE.CRAFT_STONE_DOOR_SPIKE] = sprite[SPRITE.INV_STONE_DOOR_SPIKE];
        sprite[SPRITE.CHEST_STONE_DOOR_SPIKE] = sprite[SPRITE.INV_STONE_DOOR_SPIKE];
        sprite[SPRITE.INV_GOLD_DOOR_SPIKE] = [];
        sprite[SPRITE.INV_GOLD_DOOR_SPIKE][0] = IMAGES.INV_GOLD_DOOR_SPIKE_OUT;
        sprite[SPRITE.INV_GOLD_DOOR_SPIKE][1] = IMAGES.INV_GOLD_DOOR_SPIKE_IN;
        sprite[SPRITE.INV_GOLD_DOOR_SPIKE][2] = IMAGES.INV_GOLD_DOOR_SPIKE_CLICK;
        sprite[SPRITE.CRAFT_GOLD_DOOR_SPIKE] = sprite[SPRITE.INV_GOLD_DOOR_SPIKE];
        sprite[SPRITE.CHEST_GOLD_DOOR_SPIKE] = sprite[SPRITE.INV_GOLD_DOOR_SPIKE];
        sprite[SPRITE.INV_DIAMOND_DOOR_SPIKE] = [];
        sprite[SPRITE.INV_DIAMOND_DOOR_SPIKE][0] = IMAGES.INV_DIAMOND_DOOR_SPIKE_OUT;
        sprite[SPRITE.INV_DIAMOND_DOOR_SPIKE][1] = IMAGES.INV_DIAMOND_DOOR_SPIKE_IN;
        sprite[SPRITE.INV_DIAMOND_DOOR_SPIKE][2] = IMAGES.INV_DIAMOND_DOOR_SPIKE_CLICK;
        sprite[SPRITE.CRAFT_DIAMOND_DOOR_SPIKE] = sprite[SPRITE.INV_DIAMOND_DOOR_SPIKE];
        sprite[SPRITE.CHEST_DIAMOND_DOOR_SPIKE] = sprite[SPRITE.INV_DIAMOND_DOOR_SPIKE];
        sprite[SPRITE.INV_AMETHYST_DOOR_SPIKE] = [];
        sprite[SPRITE.INV_AMETHYST_DOOR_SPIKE][0] = IMAGES.INV_AMETHYST_DOOR_SPIKE_OUT;
        sprite[SPRITE.INV_AMETHYST_DOOR_SPIKE][1] = IMAGES.INV_AMETHYST_DOOR_SPIKE_IN;
        sprite[SPRITE.INV_AMETHYST_DOOR_SPIKE][2] = IMAGES.INV_AMETHYST_DOOR_SPIKE_CLICK;
        sprite[SPRITE.CRAFT_AMETHYST_DOOR_SPIKE] = sprite[SPRITE.INV_AMETHYST_DOOR_SPIKE];
        sprite[SPRITE.CHEST_AMETHYST_DOOR_SPIKE] = sprite[SPRITE.INV_AMETHYST_DOOR_SPIKE];
        sprite[SPRITE.INV_REIDITE_DOOR_SPIKE] = [];
        sprite[SPRITE.INV_REIDITE_DOOR_SPIKE][0] = IMAGES.INV_REIDITE_DOOR_SPIKE_OUT;
        sprite[SPRITE.INV_REIDITE_DOOR_SPIKE][1] = IMAGES.INV_REIDITE_DOOR_SPIKE_IN;
        sprite[SPRITE.INV_REIDITE_DOOR_SPIKE][2] = IMAGES.INV_REIDITE_DOOR_SPIKE_CLICK;
        sprite[SPRITE.CRAFT_REIDITE_DOOR_SPIKE] = sprite[SPRITE.INV_REIDITE_DOOR_SPIKE];
        sprite[SPRITE.CHEST_REIDITE_DOOR_SPIKE] = sprite[SPRITE.INV_REIDITE_DOOR_SPIKE];
        sprite[SPRITE.INV_REIDITE_DOOR] = [];
        sprite[SPRITE.INV_REIDITE_DOOR][0] = IMAGES.INV_REIDITE_DOOR_OUT;
        sprite[SPRITE.INV_REIDITE_DOOR][1] = IMAGES.INV_REIDITE_DOOR_IN;
        sprite[SPRITE.INV_REIDITE_DOOR][2] = IMAGES.INV_REIDITE_DOOR_CLICK;
        sprite[SPRITE.CRAFT_REIDITE_DOOR] = sprite[SPRITE.INV_REIDITE_DOOR];
        sprite[SPRITE.CHEST_REIDITE_DOOR] = sprite[SPRITE.INV_REIDITE_DOOR];
        sprite[SPRITE.INV_REIDITE_SPIKE] = [];
        sprite[SPRITE.INV_REIDITE_SPIKE][0] = IMAGES.INV_REIDITE_SPIKE_OUT;
        sprite[SPRITE.INV_REIDITE_SPIKE][1] = IMAGES.INV_REIDITE_SPIKE_IN;
        sprite[SPRITE.INV_REIDITE_SPIKE][2] = IMAGES.INV_REIDITE_SPIKE_CLICK;
        sprite[SPRITE.CRAFT_REIDITE_SPIKE] = sprite[SPRITE.INV_REIDITE_SPIKE];
        sprite[SPRITE.CHEST_REIDITE_SPIKE] = sprite[SPRITE.INV_REIDITE_SPIKE];
        sprite[SPRITE.INV_REIDITE_WALL] = [];
        sprite[SPRITE.INV_REIDITE_WALL][0] = IMAGES.INV_REIDITE_WALL_OUT;
        sprite[SPRITE.INV_REIDITE_WALL][1] = IMAGES.INV_REIDITE_WALL_IN;
        sprite[SPRITE.INV_REIDITE_WALL][2] = IMAGES.INV_REIDITE_WALL_CLICK;
        sprite[SPRITE.CRAFT_REIDITE_WALL] = sprite[SPRITE.INV_REIDITE_WALL];
        sprite[SPRITE.CHEST_REIDITE_WALL] = sprite[SPRITE.INV_REIDITE_WALL];
        sprite[SPRITE.INV_PENGUIN_FEATHER] = [];
        sprite[SPRITE.INV_PENGUIN_FEATHER][0] = IMAGES.INV_PENGUIN_FEATHER;
        sprite[SPRITE.INV_PENGUIN_FEATHER][1] = IMAGES.INV_PENGUIN_FEATHER;
        sprite[SPRITE.INV_PENGUIN_FEATHER][2] = IMAGES.INV_PENGUIN_FEATHER;
        sprite[SPRITE.CRAFT_PENGUIN_FEATHER] = sprite[SPRITE.INV_PENGUIN_FEATHER];
        sprite[SPRITE.CHEST_PENGUIN_FEATHER] = sprite[SPRITE.INV_PENGUIN_FEATHER];
        sprite[SPRITE.INV_HAWK_FEATHER] = [];
        sprite[SPRITE.INV_HAWK_FEATHER][0] = IMAGES.INV_HAWK_FEATHER;
        sprite[SPRITE.INV_HAWK_FEATHER][1] = IMAGES.INV_HAWK_FEATHER;
        sprite[SPRITE.INV_HAWK_FEATHER][2] = IMAGES.INV_HAWK_FEATHER;
        sprite[SPRITE.CRAFT_HAWK_FEATHER] = sprite[SPRITE.INV_HAWK_FEATHER];
        sprite[SPRITE.CHEST_HAWK_FEATHER] = sprite[SPRITE.INV_HAWK_FEATHER];
        sprite[SPRITE.INV_VULTURE_FEATHER] = [];
        sprite[SPRITE.INV_VULTURE_FEATHER][0] = IMAGES.INV_VULTURE_FEATHER;
        sprite[SPRITE.INV_VULTURE_FEATHER][1] = IMAGES.INV_VULTURE_FEATHER;
        sprite[SPRITE.INV_VULTURE_FEATHER][2] = IMAGES.INV_VULTURE_FEATHER;
        sprite[SPRITE.CRAFT_VULTURE_FEATHER] = sprite[SPRITE.INV_VULTURE_FEATHER];
        sprite[SPRITE.CHEST_VULTURE_FEATHER] = sprite[SPRITE.INV_VULTURE_FEATHER];
        sprite[SPRITE.INV_EMERALD] = [];
        sprite[SPRITE.INV_EMERALD][0] = IMAGES.INV_EMERALD;
        sprite[SPRITE.INV_EMERALD][1] = IMAGES.INV_EMERALD;
        sprite[SPRITE.INV_EMERALD][2] = IMAGES.INV_EMERALD;
        sprite[SPRITE.CHEST_EMERALD] = sprite[SPRITE.INV_EMERALD];
        sprite[SPRITE.INV_SADDLE] = [];
        sprite[SPRITE.INV_SADDLE][0] = IMAGES.INV_SADDLE_OUT;
        sprite[SPRITE.INV_SADDLE][1] = IMAGES.INV_SADDLE_IN;
        sprite[SPRITE.INV_SADDLE][2] = IMAGES.INV_SADDLE_CLICK;
        sprite[SPRITE.CRAFT_SADDLE] = sprite[SPRITE.INV_SADDLE];
        sprite[SPRITE.CHEST_SADDLE] = sprite[SPRITE.INV_SADDLE];
        sprite[SPRITE.INV_WAND1] = [];
        sprite[SPRITE.INV_WAND1][0] = IMAGES.INV_WAND1_OUT;
        sprite[SPRITE.INV_WAND1][1] = IMAGES.INV_WAND1_IN;
        sprite[SPRITE.INV_WAND1][2] = IMAGES.INV_WAND1_CLICK;
        sprite[SPRITE.CRAFT_WAND1] = sprite[SPRITE.INV_WAND1];
        sprite[SPRITE.CHEST_WAND1] = sprite[SPRITE.INV_WAND1];
        sprite[SPRITE.INV_WAND2] = [];
        sprite[SPRITE.INV_WAND2][0] = IMAGES.INV_WAND2_OUT;
        sprite[SPRITE.INV_WAND2][1] = IMAGES.INV_WAND2_IN;
        sprite[SPRITE.INV_WAND2][2] = IMAGES.INV_WAND2_CLICK;
        sprite[SPRITE.CRAFT_WAND2] = sprite[SPRITE.INV_WAND2];
        sprite[SPRITE.CHEST_WAND2] = sprite[SPRITE.INV_WAND2];
        sprite[SPRITE.INV_MOUNT_BOAR] = [];
        sprite[SPRITE.INV_MOUNT_BOAR][0] = IMAGES.INV_MOUNT_BOAR_OUT;
        sprite[SPRITE.INV_MOUNT_BOAR][1] = IMAGES.INV_MOUNT_BOAR_IN;
        sprite[SPRITE.INV_MOUNT_BOAR][2] = IMAGES.INV_MOUNT_BOAR_CLICK;
        sprite[SPRITE.CRAFT_MOUNT_BOAR] = sprite[SPRITE.INV_MOUNT_BOAR];
        sprite[SPRITE.CHEST_MOUNT_BOAR] = sprite[SPRITE.INV_MOUNT_BOAR];
        sprite[SPRITE.INV_CRAB_BOSS] = [];
        sprite[SPRITE.INV_CRAB_BOSS][0] = IMAGES.INV_CRAB_BOSS_OUT;
        sprite[SPRITE.INV_CRAB_BOSS][1] = IMAGES.INV_CRAB_BOSS_IN;
        sprite[SPRITE.INV_CRAB_BOSS][2] = IMAGES.INV_CRAB_BOSS_CLICK;
        sprite[SPRITE.CRAFT_CRAB_BOSS] = sprite[SPRITE.INV_CRAB_BOSS];
        sprite[SPRITE.CHEST_CRAB_BOSS] = sprite[SPRITE.INV_CRAB_BOSS];
        sprite[SPRITE.INV_HAWK] = [];
        sprite[SPRITE.INV_HAWK][0] = IMAGES.INV_HAWK_OUT;
        sprite[SPRITE.INV_HAWK][1] = IMAGES.INV_HAWK_IN;
        sprite[SPRITE.INV_HAWK][2] = IMAGES.INV_HAWK_CLICK;
        sprite[SPRITE.CRAFT_HAWK] = sprite[SPRITE.INV_HAWK];
        sprite[SPRITE.CHEST_HAWK] = sprite[SPRITE.INV_HAWK];
        sprite[SPRITE.INV_VULTURE] = [];
        sprite[SPRITE.INV_VULTURE][0] = IMAGES.INV_VULTURE_OUT;
        sprite[SPRITE.INV_VULTURE][1] = IMAGES.INV_VULTURE_IN;
        sprite[SPRITE.INV_VULTURE][2] = IMAGES.INV_VULTURE_CLICK;
        sprite[SPRITE.CRAFT_VULTURE] = sprite[SPRITE.INV_VULTURE];
        sprite[SPRITE.CHEST_VULTURE] = sprite[SPRITE.INV_VULTURE];
        sprite[SPRITE.INV_TURBAN1] = [];
        sprite[SPRITE.INV_TURBAN1][0] = IMAGES.INV_TURBAN1_OUT;
        sprite[SPRITE.INV_TURBAN1][1] = IMAGES.INV_TURBAN1_IN;
        sprite[SPRITE.INV_TURBAN1][2] = IMAGES.INV_TURBAN1_CLICK;
        sprite[SPRITE.CRAFT_TURBAN1] = sprite[SPRITE.INV_TURBAN1];
        sprite[SPRITE.CHEST_TURBAN1] = sprite[SPRITE.INV_TURBAN1];
        sprite[SPRITE.INV_TURBAN2] = [];
        sprite[SPRITE.INV_TURBAN2][0] = IMAGES.INV_TURBAN2_OUT;
        sprite[SPRITE.INV_TURBAN2][1] = IMAGES.INV_TURBAN2_IN;
        sprite[SPRITE.INV_TURBAN2][2] = IMAGES.INV_TURBAN2_CLICK;
        sprite[SPRITE.CRAFT_TURBAN2] = sprite[SPRITE.INV_TURBAN2];
        sprite[SPRITE.CHEST_TURBAN2] = sprite[SPRITE.INV_TURBAN2];
        sprite[SPRITE.INV_PLANE] = [];
        sprite[SPRITE.INV_PLANE][0] = IMAGES.INV_PLANE_OUT;
        sprite[SPRITE.INV_PLANE][1] = IMAGES.INV_PLANE_IN;
        sprite[SPRITE.INV_PLANE][2] = IMAGES.INV_PLANE_CLICK;
        sprite[SPRITE.CRAFT_PLANE] = sprite[SPRITE.INV_PLANE];
        sprite[SPRITE.CHEST_PLANE] = sprite[SPRITE.INV_PLANE];
        sprite[SPRITE.INV_BABY_DRAGON] = [];
        sprite[SPRITE.INV_BABY_DRAGON][0] = IMAGES.INV_BABY_DRAGON_OUT;
        sprite[SPRITE.INV_BABY_DRAGON][1] = IMAGES.INV_BABY_DRAGON_IN;
        sprite[SPRITE.INV_BABY_DRAGON][2] = IMAGES.INV_BABY_DRAGON_CLICK;
        sprite[SPRITE.CRAFT_BABY_DRAGON] = sprite[SPRITE.INV_BABY_DRAGON];
        sprite[SPRITE.CHEST_BABY_DRAGON] = sprite[SPRITE.INV_BABY_DRAGON];
        sprite[SPRITE.INV_BABY_MAMMOTH] = [];
        sprite[SPRITE.INV_BABY_MAMMOTH][0] = IMAGES.INV_BABY_MAMMOTH_OUT;
        sprite[SPRITE.INV_BABY_MAMMOTH][1] = IMAGES.INV_BABY_MAMMOTH_IN;
        sprite[SPRITE.INV_BABY_MAMMOTH][2] = IMAGES.INV_BABY_MAMMOTH_CLICK;
        sprite[SPRITE.CRAFT_BABY_MAMMOTH] = sprite[SPRITE.INV_BABY_MAMMOTH];
        sprite[SPRITE.CHEST_BABY_MAMMOTH] = sprite[SPRITE.INV_BABY_MAMMOTH];
        sprite[SPRITE.INV_BABY_LAVA] = [];
        sprite[SPRITE.INV_BABY_LAVA][0] = IMAGES.INV_BABY_LAVA_OUT;
        sprite[SPRITE.INV_BABY_LAVA][1] = IMAGES.INV_BABY_LAVA_IN;
        sprite[SPRITE.INV_BABY_LAVA][2] = IMAGES.INV_BABY_LAVA_CLICK;
        sprite[SPRITE.CRAFT_BABY_LAVA] = sprite[SPRITE.INV_BABY_LAVA];
        sprite[SPRITE.CHEST_BABY_LAVA] = sprite[SPRITE.INV_BABY_LAVA];
        sprite[SPRITE.INV_BREAD_OVEN] = create_craft_button(1, [{
            f: create_bread_oven,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]
        }, {
            f: create_bread_light_up,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#e4c027"]
        }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CRAFT_BREAD_OVEN] = sprite[SPRITE.INV_BREAD_OVEN];
        sprite[SPRITE.INV_FURNACE] = create_craft_button(1, [{
            f: create_furnace_on,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]
        }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CRAFT_FURNACE] = sprite[SPRITE.INV_FURNACE];
        sprite[SPRITE.INV_BED] = create_craft_button(1, [{
            f: create_bed,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99", "#ded4b4", "#d6ceab", "#c796c2", "#bc83b7", "#ffffff", "#87519c", "#703e94", "#3eb67f", "#218f65", "#efe7c5", "#d093c4"]
        }], 0.32, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CRAFT_BED] = sprite[SPRITE.INV_BED];
        sprite[SPRITE.CHEST_BED] = sprite[SPRITE.INV_BED];
        sprite[SPRITE.INV_CRAB_LOOT] = create_craft_button(1, [{
            f: create_crab_loot,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]
        }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CHEST_CRAB_LOOT] = sprite[SPRITE.INV_CRAB_LOOT];
        sprite[SPRITE.INV_CRAB_SPEAR] = create_craft_button(1, [{
            f: create_crab_spear,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"]
        }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.CRAFT_CRAB_SPEAR] = sprite[SPRITE.INV_CRAB_SPEAR];
        sprite[SPRITE.CHEST_CRAB_SPEAR] = sprite[SPRITE.INV_CRAB_SPEAR];
        sprite[SPRITE.INV_WOOD_SPEAR] = create_craft_button(1, [{
            f: create_wood_spear,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"]
        }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.CRAFT_WOOD_SPEAR] = sprite[SPRITE.INV_WOOD_SPEAR];
        sprite[SPRITE.INV_SPEAR] = create_craft_button(1, [{
            f: create_stonespear,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"]
        }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.CRAFT_SPEAR] = sprite[SPRITE.INV_SPEAR];
        sprite[SPRITE.INV_GOLD_SPEAR] = create_craft_button(1, [{
            f: create_goldspear,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"]
        }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.CRAFT_GOLD_SPEAR] = sprite[SPRITE.INV_GOLD_SPEAR];
        sprite[SPRITE.INV_DIAMOND_SPEAR] = create_craft_button(1, [{
            f: create_diamondspear,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"]
        }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.CRAFT_DIAMOND_SPEAR] = sprite[SPRITE.INV_DIAMOND_SPEAR];
        sprite[SPRITE.INV_AMETHYST_SPEAR] = create_craft_button(1, [{
            f: create_amespear,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"]
        }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.CRAFT_AMETHYST_SPEAR] = sprite[SPRITE.INV_AMETHYST_SPEAR];
        sprite[SPRITE.INV_DRAGON_SPEAR] = create_craft_button(1, [{
            f: create_dragon_spear,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"]
        }], 0.38, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.CRAFT_DRAGON_SPEAR] = sprite[SPRITE.INV_DRAGON_SPEAR];
        sprite[SPRITE.CHEST_DRAGON_SPEAR] = sprite[SPRITE.INV_DRAGON_SPEAR];
        sprite[SPRITE.INV_HAMMER] = create_craft_button(1, [{
            f: create_hammer,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
        }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.CRAFT_HAMMER] = sprite[SPRITE.INV_HAMMER];
        sprite[SPRITE.INV_SPANNER] = create_craft_button(1, [{
            f: create_spanner,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#939393", "#5f6061"]
        }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.CRAFT_SPANNER] = sprite[SPRITE.INV_SPANNER];
        sprite[SPRITE.INV_SUPER_HAMMER] = create_craft_button(1, [{
            f: create_superhammer,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb", "#42cc90"]
        }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.CRAFT_SUPER_HAMMER] = sprite[SPRITE.INV_SUPER_HAMMER];
        sprite[SPRITE.INV_HAMMER_GOLD] = create_craft_button(1, [{
            f: create_hammer,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
        }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.CRAFT_HAMMER_GOLD] = sprite[SPRITE.INV_HAMMER_GOLD];
        sprite[SPRITE.INV_HAMMER_DIAMOND] = create_craft_button(1, [{
            f: create_hammer,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
        }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.CRAFT_HAMMER_DIAMOND] = sprite[SPRITE.INV_HAMMER_DIAMOND];
        sprite[SPRITE.INV_HAMMER_AMETHYST] = create_craft_button(1, [{
            f: create_hammer,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
        }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.CRAFT_HAMMER_AMETHYST] = sprite[SPRITE.INV_HAMMER_AMETHYST];
        sprite[SPRITE.INV_HAMMER_REIDITE] = [];
        sprite[SPRITE.INV_HAMMER_REIDITE][0] = IMAGES.INV_HAMMER_REIDITE_OUT;
        sprite[SPRITE.INV_HAMMER_REIDITE][1] = IMAGES.INV_HAMMER_REIDITE_IN;
        sprite[SPRITE.INV_HAMMER_REIDITE][2] = IMAGES.INV_HAMMER_REIDITE_CLICK;
        sprite[SPRITE.CHEST_HAMMER_REIDITE] = sprite[SPRITE.INV_HAMMER_REIDITE];
        sprite[SPRITE.CRAFT_HAMMER_REIDITE] = sprite[SPRITE.INV_HAMMER_REIDITE];
        sprite[SPRITE.INV_EMERALD_MACHINE] = [];
        sprite[SPRITE.INV_EMERALD_MACHINE][0] = IMAGES.INV_EMERALD_MACHINE_OUT;
        sprite[SPRITE.INV_EMERALD_MACHINE][1] = IMAGES.INV_EMERALD_MACHINE_IN;
        sprite[SPRITE.INV_EMERALD_MACHINE][2] = IMAGES.INV_EMERALD_MACHINE_CLICK;
        sprite[SPRITE.CHEST_EMERALD_MACHINE] = sprite[SPRITE.INV_EMERALD_MACHINE];
        sprite[SPRITE.CRAFT_EMERALD_MACHINE] = sprite[SPRITE.INV_EMERALD_MACHINE];
        sprite[SPRITE.INV_EXTRACTOR_MACHINE_STONE] = [];
        sprite[SPRITE.INV_EXTRACTOR_MACHINE_STONE][0] = IMAGES.INV_EXTRACTOR_MACHINE_STONE_OUT;
        sprite[SPRITE.INV_EXTRACTOR_MACHINE_STONE][1] = IMAGES.INV_EXTRACTOR_MACHINE_STONE_IN;
        sprite[SPRITE.INV_EXTRACTOR_MACHINE_STONE][2] = IMAGES.INV_EXTRACTOR_MACHINE_STONE_CLICK;
        sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_STONE] = sprite[SPRITE.INV_EXTRACTOR_MACHINE_STONE];
        sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_STONE] = sprite[SPRITE.INV_EXTRACTOR_MACHINE_STONE];
        sprite[SPRITE.INV_EXTRACTOR_MACHINE_GOLD] = [];
        sprite[SPRITE.INV_EXTRACTOR_MACHINE_GOLD][0] = IMAGES.INV_EXTRACTOR_MACHINE_GOLD_OUT;
        sprite[SPRITE.INV_EXTRACTOR_MACHINE_GOLD][1] = IMAGES.INV_EXTRACTOR_MACHINE_GOLD_IN;
        sprite[SPRITE.INV_EXTRACTOR_MACHINE_GOLD][2] = IMAGES.INV_EXTRACTOR_MACHINE_GOLD_CLICK;
        sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_GOLD] = sprite[SPRITE.INV_EXTRACTOR_MACHINE_GOLD];
        sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_GOLD] = sprite[SPRITE.INV_EXTRACTOR_MACHINE_GOLD];
        sprite[SPRITE.INV_EXTRACTOR_MACHINE_DIAMOND] = [];
        sprite[SPRITE.INV_EXTRACTOR_MACHINE_DIAMOND][0] = IMAGES.INV_EXTRACTOR_MACHINE_DIAMOND_OUT;
        sprite[SPRITE.INV_EXTRACTOR_MACHINE_DIAMOND][1] = IMAGES.INV_EXTRACTOR_MACHINE_DIAMOND_IN;
        sprite[SPRITE.INV_EXTRACTOR_MACHINE_DIAMOND][2] = IMAGES.INV_EXTRACTOR_MACHINE_DIAMOND_CLICK;
        sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_DIAMOND] = sprite[SPRITE.INV_EXTRACTOR_MACHINE_DIAMOND];
        sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_DIAMOND] = sprite[SPRITE.INV_EXTRACTOR_MACHINE_DIAMOND];
        sprite[SPRITE.INV_EXTRACTOR_MACHINE_AMETHYST] = [];
        sprite[SPRITE.INV_EXTRACTOR_MACHINE_AMETHYST][0] = IMAGES.INV_EXTRACTOR_MACHINE_AMETHYST_OUT;
        sprite[SPRITE.INV_EXTRACTOR_MACHINE_AMETHYST][1] = IMAGES.INV_EXTRACTOR_MACHINE_AMETHYST_IN;
        sprite[SPRITE.INV_EXTRACTOR_MACHINE_AMETHYST][2] = IMAGES.INV_EXTRACTOR_MACHINE_AMETHYST_CLICK;
        sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_AMETHYST] = sprite[SPRITE.INV_EXTRACTOR_MACHINE_AMETHYST];
        sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_AMETHYST] = sprite[SPRITE.INV_EXTRACTOR_MACHINE_AMETHYST];
        sprite[SPRITE.INV_EXTRACTOR_MACHINE_REIDITE] = [];
        sprite[SPRITE.INV_EXTRACTOR_MACHINE_REIDITE][0] = IMAGES.INV_EXTRACTOR_MACHINE_REIDITE_OUT;
        sprite[SPRITE.INV_EXTRACTOR_MACHINE_REIDITE][1] = IMAGES.INV_EXTRACTOR_MACHINE_REIDITE_IN;
        sprite[SPRITE.INV_EXTRACTOR_MACHINE_REIDITE][2] = IMAGES.INV_EXTRACTOR_MACHINE_REIDITE_CLICK;
        sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_REIDITE] = sprite[SPRITE.INV_EXTRACTOR_MACHINE_REIDITE];
        sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_REIDITE] = sprite[SPRITE.INV_EXTRACTOR_MACHINE_REIDITE];
        sprite[SPRITE.INV_LOCK] = create_craft_button(1, [{
            f: create_lock,
            x: -2,
            y: -2,
            a: 1,
            r: 0,
            c: ["#141414", "#816511", "#c4a23a", "#3a3a3a"]
        }], 0.8, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[SPRITE.CRAFT_LOCK] = sprite[SPRITE.INV_LOCK];
        sprite[SPRITE.INV_LOCKPICK] = create_craft_button(1, [{
            f: create_lockpick,
            x: -2,
            y: -2,
            a: 1,
            r: -Math.PI / 5,
            c: ["#141414", "#c4a23a", "#816511"]
        }], 0.08, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[SPRITE.CRAFT_LOCKPICK] = sprite[SPRITE.INV_LOCKPICK];
        sprite[SPRITE.INV_DRAGON_HEART] = create_craft_button(1, [{
            f: create_dragon_heart,
            x: -2,
            y: -2,
            a: 1,
            r: 0,
            c: ["#141414", "#178a99", "#0a6372", "#03282e"]
        }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
        sprite[SPRITE.INV_LAVA_HEART] = create_craft_button(1, [{
            f: create_dragon_heart,
            x: -2,
            y: -2,
            a: 1,
            r: 0,
            c: ["#120202", "#991616", "#750a0a", "#120202"]
        }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
        sprite[SPRITE.INV_RESURRECTION] = create_craft_button(1, [{
            f: create_resurrection_ground,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#347f93", "#54a4ba"]
        }, {
            f: create_resurrection,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc", "#418ba5", "#59b8ce"]
        }, {
            f: create_resurrection_rotate,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#a9e4ed", "#86d4e0"]
        }, {
            f: create_resurrection_hole,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]
        }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CRAFT_RESURRECTION] = sprite[SPRITE.INV_RESURRECTION];
        sprite[SPRITE.INV_TOTEM] = create_craft_button(1, [{
            f: create_headtotem,
            x: 45,
            y: 70,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#4c3a15", "#634828", "#564021"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CRAFT_TOTEM] = sprite[SPRITE.INV_TOTEM];
        sprite[SPRITE.INV_AMETHYST_HELMET] = create_craft_button(1, [{
            f: create_amethyst_helmet,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]
        }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.CRAFT_AMETHYST_HELMET] = sprite[SPRITE.INV_AMETHYST_HELMET];
        sprite[SPRITE.INV_WINTER_HOOD] = create_craft_button(1, [{
            f: create_winter_hood,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#2a2938", "#242330", "#313041", "#1b1a25"]
        }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.CRAFT_WINTER_HOOD] = sprite[SPRITE.INV_WINTER_HOOD];
        sprite[SPRITE.INV_HOOD] = create_craft_button(1, [{
            f: create_hood,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#2a2938", "#242330", "#313041"]
        }], 0.25, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.CRAFT_HOOD] = sprite[SPRITE.INV_HOOD];
        sprite[SPRITE.INV_WINTER_PEASANT] = create_craft_button(1, [{
            f: create_peasant,
            x: 0,
            y: 3,
            a: 1,
            r: 0,
            c: ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"]
        }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.CRAFT_WINTER_PEASANT] = sprite[SPRITE.INV_WINTER_PEASANT];
        sprite[SPRITE.INV_PEASANT] = create_craft_button(1, [{
            f: create_peasant,
            x: 0,
            y: 3,
            a: 1,
            r: 0,
            c: ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"]
        }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.CRAFT_PEASANT] = sprite[SPRITE.INV_PEASANT];
        sprite[SPRITE.INV_CROWN_GREEN] = create_craft_button(1, [{
            f: create_crown_life,
            x: 0,
            y: 10,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.CRAFT_CROWN_GREEN] = sprite[SPRITE.INV_CROWN_GREEN];
        sprite[SPRITE.INV_CROWN_ORANGE] = create_craft_button(1, [{
            f: create_crown_life,
            x: 0,
            y: 10,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.CRAFT_CROWN_ORANGE] = sprite[SPRITE.INV_CROWN_ORANGE];
        sprite[SPRITE.INV_CROWN_BLUE] = create_craft_button(1, [{
            f: create_crown_life,
            x: 0,
            y: 10,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.CRAFT_CROWN_BLUE] = sprite[SPRITE.INV_CROWN_BLUE];
        sprite[SPRITE.INV_CROWN_CRAB] = create_craft_button(1, [{
            f: create_crab_crown,
            x: -1,
            y: 0,
            a: 1,
            r: 0,
            c: ["#000000", "#b03431", "#94312d", "#bd3c33", "#de5445"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.CRAFT_CROWN_CRAB] = sprite[SPRITE.INV_CROWN_CRAB];
        sprite[SPRITE.CHEST_CROWN_CRAB] = sprite[SPRITE.INV_CROWN_CRAB];
        sprite[SPRITE.INV_DRAGON_HELMET] = create_craft_button(1, [{
            f: create_dragon_helmet,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]
        }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.CRAFT_DRAGON_HELMET] = sprite[SPRITE.INV_DRAGON_HELMET];
        sprite[SPRITE.INV_DRAGON_SWORD] = create_craft_button(1, [{
            f: create_dragon_sword,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#284c4a", "#193533", "#c7efef", "#7fccca"]
        }], 0.75, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.CRAFT_DRAGON_SWORD] = sprite[SPRITE.INV_DRAGON_SWORD];
        sprite[SPRITE.INV_DRAGON_CUBE] = create_craft_button(1, [{
            f: create_dragon_cube,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
        }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[SPRITE.INV_DRAGON_ORB] = create_craft_button(1, [{
            f: create_blue_orb,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
        }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[SPRITE.INV_LAVA_CUBE] = create_craft_button(1, [{
            f: create_dragon_cube,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
        }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[SPRITE.INV_LAVA_ORB] = create_craft_button(1, [{
            f: create_blue_orb,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
        }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[SPRITE.INV_GEMME_GREEN] = create_craft_button(1, [{
            f: create_gemme_green,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#59ba72", "#94d966", "#5aa628", "#0d1b1c", "#38874d"]
        }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[SPRITE.INV_GEMME_ORANGE] = create_craft_button(1, [{
            f: create_gemme_green,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#C45727", "#de7d46", "#DB9358", "#0d1b1c", "#994617"]
        }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[SPRITE.INV_GEMME_BLUE] = create_craft_button(1, [{
            f: create_gemme_green,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#3a9dbd", "#59C0D8", "#48abcb", "#0d1b1c", "#196599"]
        }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[SPRITE.INV_SHOVEL] = create_craft_button(1, [{
            f: create_shovel,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.CRAFT_SHOVEL] = sprite[SPRITE.INV_SHOVEL];
        sprite[SPRITE.INV_SHOVEL_GOLD] = create_craft_button(1, [{
            f: create_shovel,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#b4ac45"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.CRAFT_SHOVEL_GOLD] = sprite[SPRITE.INV_SHOVEL_GOLD];
        sprite[SPRITE.INV_SHOVEL_DIAMOND] = create_craft_button(1, [{
            f: create_shovel,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.CRAFT_SHOVEL_DIAMOND] = sprite[SPRITE.INV_SHOVEL_DIAMOND];
        sprite[SPRITE.INV_SHOVEL_AMETHYST] = create_craft_button(1, [{
            f: create_shovel,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#a853c7"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.CRAFT_SHOVEL_AMETHYST] = sprite[SPRITE.INV_SHOVEL_AMETHYST];
        sprite[SPRITE.INV_EXPLORER_HAT] = create_craft_button(1, [{
            f: create_explorer_hat,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]
        }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.CRAFT_EXPLORER_HAT] = sprite[SPRITE.INV_EXPLORER_HAT];
        sprite[SPRITE.INV_WOOD_HELMET] = create_craft_button(1, [{
            f: create_wooden_helmet,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#252525", "#73583e", "#493425", "#7d6144"]
        }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.CRAFT_WOOD_HELMET] = sprite[SPRITE.INV_WOOD_HELMET];
        sprite[SPRITE.INV_STONE_HELMET] = create_craft_button(1, [{
            f: create_viking_hat,
            x: 0,
            y: -2,
            a: 1,
            r: 0,
            c: ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]
        }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.CRAFT_STONE_HELMET] = sprite[SPRITE.INV_STONE_HELMET];
        sprite[SPRITE.INV_GOLD_HELMET] = create_craft_button(1, [{
            f: create_gold_helmet,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#dbce71", "#b29c32", "#c4bc51"]
        }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.CRAFT_GOLD_HELMET] = sprite[SPRITE.INV_GOLD_HELMET];
        sprite[SPRITE.INV_DIAMOND_HELMET] = create_craft_button(1, [{
            f: create_diamond_helmet,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.CRAFT_DIAMOND_HELMET] = sprite[SPRITE.INV_DIAMOND_HELMET];
        sprite[SPRITE.INV_BOOK] = create_craft_button(1, [{
            f: create_book,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#511f00", "#2f1300", "#ffffff", "#d4d4d4", "#5b2400", "#984e21"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.CRAFT_BOOK] = sprite[SPRITE.INV_BOOK];
        sprite[SPRITE.INV_PAPER] = create_craft_button(1, [{
            f: create_paper,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#221e1b", "#ffffff", "#f6f0e7"]
        }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[SPRITE.CRAFT_PAPER] = sprite[SPRITE.INV_PAPER];
        sprite[SPRITE.INV_AMETHYST] = create_craft_button(1, [{
            f: create_amethyst,
            x: -5,
            y: -5,
            a: 1,
            r: 0,
            c: ["#1d051e", "#c27add", "#cd98e5"]
        }], 0.31, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[SPRITE.INV_SAND] = create_craft_button(1, [{
            f: create_sand,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#D7C393", "#a48c6c"]
        }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[SPRITE.INV_ICE] = create_craft_button(1, [{
            f: create_ice,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#93CBCE", "#E9F6F6"]
        }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.INV_GROUND] = create_craft_button(1, [{
            f: create_sand,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#866432", "#6b4f25"]
        }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[SPRITE.INV_BUCKET_FULL] = create_craft_button(1, [{
            f: create_bucket_full,
            x: 3,
            y: 2,
            a: 1,
            r: 0,
            c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
        }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[SPRITE.INV_BUCKET_EMPTY] = create_craft_button(1, [{
            f: create_bucket_empty,
            x: 3,
            y: 2,
            a: 1,
            r: 0,
            c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
        }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[SPRITE.CRAFT_BUCKET_FULL] = sprite[SPRITE.INV_BUCKET_FULL];
        sprite[SPRITE.CRAFT_BUCKET_EMPTY] = sprite[SPRITE.INV_BUCKET_EMPTY];
        sprite[SPRITE.INV_WELL] = create_craft_button(1, [{
            f: create_well,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]
        }], 0.1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CRAFT_WELL] = sprite[SPRITE.INV_WELL];
        sprite[SPRITE.INV_BOTTLE_FULL] = create_craft_button(1, [{
            f: create_bottle,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
        }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.INV_BOTTLE_EMPTY] = create_craft_button(1, [{
            f: create_bottle_full,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
        }], 0.18, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[SPRITE.CRAFT_BOTTLE_FULL] = sprite[SPRITE.INV_BOTTLE_FULL];
        sprite[SPRITE.CRAFT_BOTTLE_EMPTY] = sprite[SPRITE.INV_BOTTLE_EMPTY];
        sprite[SPRITE.INV_COOKIE] = create_craft_button(1, [{
            f: create_cookie,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#eedacc", "#dfbda7", "#dab094", "#63391a", "#523124"]
        }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CRAFT_COOKIE] = sprite[SPRITE.INV_COOKIE];
        sprite[SPRITE.INV_CANDY] = create_craft_button(1, [{
            f: create_candy,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1a1011", "#e29c2b", "#b76413", "#d6c418", "#e0bf32", "#b78a1a", "#aa1a17", "#cc9f2f", "#cc741d", "#b51524", "#bc1522", "#991922", "#a01ed5", "#d51e81"]
        }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.INV_FERRERO] = create_craft_button(1, [{
            f: create_ferrero_rocher,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1a1011", "#693c2a", "#54311f", "#9f7a3d", "#492d1d", "#dbb175", "#54311f", "#9f7a3d", "#604720"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.INV_BREAD] = create_craft_button(1, [{
            f: create_bread,
            x: 0,
            y: -2,
            a: 1,
            r: 0,
            c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
        }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CRAFT_BREAD] = sprite[SPRITE.INV_BREAD];
        sprite[SPRITE.INV_FOODFISH] = create_craft_button(1, [{
            f: create_fishfood,
            x: -3,
            y: -5,
            a: 1,
            r: 0,
            c: ["#1d051e", "#63767c", "#424f51", "#6c8288", "#536468", "#202020", "#ffffff", "#806f60", "#514942", "#756557"]
        }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.INV_FOODFISH_COOKED] = create_craft_button(1, [{
            f: create_fishfood_cooked,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1d051e", "#42261A", "#281818"]
        }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CRAFT_FOODFISH_COOKED] = sprite[SPRITE.INV_FOODFISH_COOKED];
        sprite[SPRITE.INV_DIVING_MASK] = create_craft_button(1, [{
            f: create_divingmask,
            x: -3,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]
        }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.CRAFT_DIVING_MASK] = sprite[SPRITE.INV_DIVING_MASK];
        sprite[SPRITE.INV_SCALES] = create_craft_button(1, [{
            f: create_scales,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1e2021", "#961B1B", "#702727", "#C43B3B"]
        }], 0.15, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[SPRITE.INV_SUPER_DIVING_SUIT] = create_craft_button(1, [{
            f: create_superdivingsuit,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#F0D200", "#B09A00", "#79359E", "#652D8E", "#1e2021"]
        }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[SPRITE.CRAFT_SUPER_DIVING_SUIT] = sprite[SPRITE.INV_SUPER_DIVING_SUIT];
        sprite[SPRITE.INV_PLOT] = create_craft_button(1, [{
            f: create_plot,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1e2021", "#352E1E", "#4C3B19", "#574122"]
        }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CRAFT_PLOT] = sprite[SPRITE.INV_PLOT];
        sprite[SPRITE.INV_GARLAND] = create_craft_button(1, [{
            f: create_garland_inv,
            x: -5,
            y: -5,
            a: 1,
            r: 0,
            c: ["#e2d63b", "#ee71a9", "#42b672"]
        }], 1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CHEST_GARLAND] = sprite[SPRITE.INV_GARLAND];
        sprite[SPRITE.INV_BRIDGE] = create_craft_button(1, [{
            f: create_bridge,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1e2021", "#332715", "#4C3B19", "#574122"]
        }], 0.5, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CRAFT_BRIDGE] = sprite[SPRITE.INV_BRIDGE];
        sprite[SPRITE.INV_ROOF] = create_craft_button(1, [{
            f: create_roof,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1e2021", "#352618", "#402b18", "#4c3b19", "#574122", "#52391e"]
        }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CRAFT_ROOF] = sprite[SPRITE.INV_ROOF];
        sprite[SPRITE.INV_WATERING_CAN_FULL] = create_craft_button(1, [{
            f: create_watering_can,
            x: -1,
            y: 0,
            a: 1,
            r: -Math.PI / 5,
            c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"]
        }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.7);
        sprite[SPRITE.CRAFT_WATERING_CAN_FULL] = sprite[SPRITE.INV_WATERING_CAN_FULL];
        sprite[SPRITE.INV_WATERING_CAN] = create_craft_button(1, [{
            f: create_watering_can,
            x: -1,
            y: 0,
            a: 1,
            r: -Math.PI / 5,
            c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#3F2D18", "#2D2112"]
        }], 0.4, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[SPRITE.CRAFT_WATERING_CAN] = sprite[SPRITE.INV_WATERING_CAN];
        sprite[SPRITE.INV_FLOUR] = create_craft_button(1, [{
            f: create_flour,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
        }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[SPRITE.INV_CRAB_STICK] = create_craft_button(1, [{
            f: create_crab_stick,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]
        }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CHEST_CRAB_STICK] = sprite[SPRITE.INV_CRAB_STICK];
        sprite[SPRITE.INV_CAKE] = create_craft_button(1, [{
            f: create_cake,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1e2021", "#63391a", "#523124", "#d2c4b9", "#c1aca2", "#d8cbc2", "#c8b5ac", "#ac222a", "#e6636a"]
        }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CRAFT_CAKE] = sprite[SPRITE.INV_CAKE];
        sprite[SPRITE.INV_SANDWICH] = create_craft_button(1, [{
            f: create_SANDWICH,
            x: -2,
            y: -8,
            a: 1,
            r: 0,
            c: ["#dfd6bc", "#7b5139", "#bf8d50", "#834e49", "#602820", "#d7ccaa"]
        }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[SPRITE.CRAFT_SANDWICH] = sprite[SPRITE.INV_SANDWICH];
        sprite[SPRITE.INV_LAVA_SWORD] = [];
        sprite[SPRITE.INV_LAVA_SWORD][0] = IMAGES.INV_LAVA_SWORD_OUT;
        sprite[SPRITE.INV_LAVA_SWORD][1] = IMAGES.INV_LAVA_SWORD_IN;
        sprite[SPRITE.INV_LAVA_SWORD][2] = IMAGES.INV_LAVA_SWORD_CLICK;
        sprite[SPRITE.CRAFT_LAVA_SWORD] = sprite[SPRITE.INV_LAVA_SWORD];
        sprite[SPRITE.CHEST_LAVA_SWORD] = sprite[SPRITE.INV_LAVA_SWORD];
        sprite[SPRITE.INV_LAVA_SPEAR] = [];
        sprite[SPRITE.INV_LAVA_SPEAR][0] = IMAGES.INV_LAVA_SPEAR_OUT;
        sprite[SPRITE.INV_LAVA_SPEAR][1] = IMAGES.INV_LAVA_SPEAR_IN;
        sprite[SPRITE.INV_LAVA_SPEAR][2] = IMAGES.INV_LAVA_SPEAR_CLICK;
        sprite[SPRITE.CRAFT_LAVA_SPEAR] = sprite[SPRITE.INV_LAVA_SPEAR];
        sprite[SPRITE.CHEST_LAVA_SPEAR] = sprite[SPRITE.INV_LAVA_SPEAR];
        sprite[SPRITE.CRAFT_REIDITE_SWORD] = sprite[SPRITE.INV_REIDITE_SWORD];
        sprite[SPRITE.CHEST_REIDITE_SWORD] = sprite[SPRITE.INV_REIDITE_SWORD];
        sprite[SPRITE.INV_REIDITE_SWORD] = [];
        sprite[SPRITE.INV_REIDITE_SWORD][0] = IMAGES.INV_REIDITE_SWORD_OUT;
        sprite[SPRITE.INV_REIDITE_SWORD][1] = IMAGES.INV_REIDITE_SWORD_IN;
        sprite[SPRITE.INV_REIDITE_SWORD][2] = IMAGES.INV_REIDITE_SWORD_CLICK;
        sprite[SPRITE.CRAFT_REIDITE_SWORD] = sprite[SPRITE.INV_REIDITE_SWORD];
        sprite[SPRITE.CHEST_REIDITE_SWORD] = sprite[SPRITE.INV_REIDITE_SWORD];
        sprite[SPRITE.INV_REIDITE_SPEAR] = [];
        sprite[SPRITE.INV_REIDITE_SPEAR][0] = IMAGES.INV_REIDITE_SPEAR_OUT;
        sprite[SPRITE.INV_REIDITE_SPEAR][1] = IMAGES.INV_REIDITE_SPEAR_IN;
        sprite[SPRITE.INV_REIDITE_SPEAR][2] = IMAGES.INV_REIDITE_SPEAR_CLICK;
        sprite[SPRITE.CRAFT_REIDITE_SPEAR] = sprite[SPRITE.INV_REIDITE_SPEAR];
        sprite[SPRITE.CHEST_REIDITE_SPEAR] = sprite[SPRITE.INV_REIDITE_SPEAR];
        sprite[SPRITE.INV_DIAMOND_PROTECTION] = [];
        sprite[SPRITE.INV_DIAMOND_PROTECTION][0] = IMAGES.INV_DIAMOND_PROTECTION_OUT;
        sprite[SPRITE.INV_DIAMOND_PROTECTION][1] = IMAGES.INV_DIAMOND_PROTECTION_IN;
        sprite[SPRITE.INV_DIAMOND_PROTECTION][2] = IMAGES.INV_DIAMOND_PROTECTION_CLICK;
        sprite[SPRITE.CRAFT_DIAMOND_PROTECTION] = sprite[SPRITE.INV_DIAMOND_PROTECTION];
        sprite[SPRITE.CHEST_DIAMOND_PROTECTION] = sprite[SPRITE.INV_DIAMOND_PROTECTION];
        sprite[SPRITE.INV_AMETHYST_PROTECTION] = [];
        sprite[SPRITE.INV_AMETHYST_PROTECTION][0] = IMAGES.INV_AMETHYST_PROTECTION_OUT;
        sprite[SPRITE.INV_AMETHYST_PROTECTION][1] = IMAGES.INV_AMETHYST_PROTECTION_IN;
        sprite[SPRITE.INV_AMETHYST_PROTECTION][2] = IMAGES.INV_AMETHYST_PROTECTION_CLICK;
        sprite[SPRITE.CRAFT_AMETHYST_PROTECTION] = sprite[SPRITE.INV_AMETHYST_PROTECTION];
        sprite[SPRITE.CHEST_AMETHYST_PROTECTION] = sprite[SPRITE.INV_AMETHYST_PROTECTION];
        sprite[SPRITE.INV_REIDITE_PROTECTION] = [];
        sprite[SPRITE.INV_REIDITE_PROTECTION][0] = IMAGES.INV_REIDITE_PROTECTION_OUT;
        sprite[SPRITE.INV_REIDITE_PROTECTION][1] = IMAGES.INV_REIDITE_PROTECTION_IN;
        sprite[SPRITE.INV_REIDITE_PROTECTION][2] = IMAGES.INV_REIDITE_PROTECTION_CLICK;
        sprite[SPRITE.CRAFT_REIDITE_PROTECTION] = sprite[SPRITE.INV_REIDITE_PROTECTION];
        sprite[SPRITE.CHEST_REIDITE_PROTECTION] = sprite[SPRITE.INV_REIDITE_PROTECTION];
        sprite[SPRITE.INV_REIDITE_HELMET] = [];
        sprite[SPRITE.INV_REIDITE_HELMET][0] = IMAGES.INV_REIDITE_HELMET_OUT;
        sprite[SPRITE.INV_REIDITE_HELMET][1] = IMAGES.INV_REIDITE_HELMET_IN;
        sprite[SPRITE.INV_REIDITE_HELMET][2] = IMAGES.INV_REIDITE_HELMET_CLICK;
        sprite[SPRITE.CRAFT_REIDITE_HELMET] = sprite[SPRITE.INV_REIDITE_HELMET];
        sprite[SPRITE.CHEST_REIDITE_HELMET] = sprite[SPRITE.INV_REIDITE_HELMET];
        sprite[SPRITE.INV_LAVA_HELMET] = [];
        sprite[SPRITE.INV_LAVA_HELMET][0] = IMAGES.INV_LAVA_HELMET_OUT;
        sprite[SPRITE.INV_LAVA_HELMET][1] = IMAGES.INV_LAVA_HELMET_IN;
        sprite[SPRITE.INV_LAVA_HELMET][2] = IMAGES.INV_LAVA_HELMET_CLICK;
        sprite[SPRITE.CRAFT_LAVA_HELMET] = sprite[SPRITE.INV_LAVA_HELMET];
        sprite[SPRITE.CHEST_LAVA_HELMET] = sprite[SPRITE.INV_LAVA_HELMET];
        sprite[SPRITE.INV_FIREFLY] = [];
        sprite[SPRITE.INV_FIREFLY][0] = IMAGES.INV_FIREFLY_OUT;
        sprite[SPRITE.INV_FIREFLY][1] = IMAGES.INV_FIREFLY_IN;
        sprite[SPRITE.INV_FIREFLY][2] = IMAGES.INV_FIREFLY_CLICK;
        sprite[SPRITE.CRAFT_FIREFLY] = sprite[SPRITE.INV_FIREFLY];
        sprite[SPRITE.CHEST_FIREFLY] = sprite[SPRITE.INV_FIREFLY];
        sprite[SPRITE.INV_WITCH] = [];
        sprite[SPRITE.INV_WITCH][0] = IMAGES.INV_WITCH_OUT;
        sprite[SPRITE.INV_WITCH][1] = IMAGES.INV_WITCH_IN;
        sprite[SPRITE.INV_WITCH][2] = IMAGES.INV_WITCH_CLICK;
        sprite[SPRITE.CRAFT_WITCH] = sprite[SPRITE.INV_WITCH];
        sprite[SPRITE.CHEST_WITCH] = sprite[SPRITE.INV_WITCH];
        sprite[SPRITE.INV_NIMBUS] = [];
        sprite[SPRITE.INV_NIMBUS][0] = IMAGES.INV_NIMBUS_OUT;
        sprite[SPRITE.INV_NIMBUS][1] = IMAGES.INV_NIMBUS_IN;
        sprite[SPRITE.INV_NIMBUS][2] = IMAGES.INV_NIMBUS_CLICK;
        sprite[SPRITE.CRAFT_NIMBUS] = sprite[SPRITE.INV_NIMBUS];
        sprite[SPRITE.CHEST_NIMBUS] = sprite[SPRITE.INV_NIMBUS];
        sprite[SPRITE.INV_REIDITE] = [];
        sprite[SPRITE.INV_REIDITE][0] = IMAGES.INV_REIDITE_OUT;
        sprite[SPRITE.INV_REIDITE][1] = IMAGES.INV_REIDITE_IN;
        sprite[SPRITE.INV_REIDITE][2] = IMAGES.INV_REIDITE_CLICK;
        sprite[SPRITE.CHEST_REIDITE] = sprite[SPRITE.INV_REIDITE];
        sprite[SPRITE.INV_FLAME] = [];
        sprite[SPRITE.INV_FLAME][0] = IMAGES.INV_FLAME_OUT;
        sprite[SPRITE.INV_FLAME][1] = IMAGES.INV_FLAME_IN;
        sprite[SPRITE.INV_FLAME][2] = IMAGES.INV_FLAME_CLICK;
        sprite[SPRITE.CHEST_FLAME] = sprite[SPRITE.INV_FLAME];
        sprite[SPRITE.CHEST_SHOVEL] = sprite[SPRITE.INV_SHOVEL];
        sprite[SPRITE.CHEST_SHOVEL_GOLD] = sprite[SPRITE.INV_SHOVEL_GOLD];
        sprite[SPRITE.CHEST_SHOVEL_DIAMOND] = sprite[SPRITE.INV_SHOVEL_DIAMOND];
        sprite[SPRITE.CHEST_SHOVEL_AMETHYST] = sprite[SPRITE.INV_SHOVEL_AMETHYST];
        sprite[SPRITE.CHEST_SEED] = sprite[SPRITE.INV_SEED];
        sprite[SPRITE.CHEST_WHEAT_SEED] = sprite[SPRITE.INV_WHEAT_SEED];
        sprite[SPRITE.CHEST_WINDMILL] = sprite[SPRITE.INV_WINDMILL];
        sprite[SPRITE.CHEST_WILD_WHEAT] = sprite[SPRITE.INV_WILD_WHEAT];
        sprite[SPRITE.CHEST_FIRE] = sprite[SPRITE.INV_FIRE];
        sprite[SPRITE.CHEST_DRAGON_ORB] = sprite[SPRITE.INV_DRAGON_ORB];
        sprite[SPRITE.CHEST_DRAGON_CUBE] = sprite[SPRITE.INV_DRAGON_CUBE];
        sprite[SPRITE.CHEST_LAVA_ORB] = sprite[SPRITE.INV_LAVA_ORB];
        sprite[SPRITE.CHEST_LAVA_CUBE] = sprite[SPRITE.INV_LAVA_CUBE];
        sprite[SPRITE.CHEST_BIG_FIRE] = sprite[SPRITE.INV_BIG_FIRE];
        sprite[SPRITE.CHEST_SUGAR_CAN] = sprite[SPRITE.INV_SUGAR_CAN];
        sprite[SPRITE.CHEST_PIRATE_SWORD] = sprite[SPRITE.INV_PIRATE_SWORD];
        sprite[SPRITE.CHEST_SWORD_WOOD] = sprite[SPRITE.INV_SWORD_WOOD];
        sprite[SPRITE.CHEST_SWORD] = sprite[SPRITE.INV_SWORD];
        sprite[SPRITE.CHEST_CURSED_SWORD] = sprite[SPRITE.INV_CURSED_SWORD];
        sprite[SPRITE.CHEST_SWORD_GOLD] = sprite[SPRITE.INV_SWORD_GOLD];
        sprite[SPRITE.CHEST_SWORD_DIAMOND] = sprite[SPRITE.INV_SWORD_DIAMOND];
        sprite[SPRITE.CHEST_SWORD_AMETHYST] = sprite[SPRITE.INV_SWORD_AMETHYST];
        sprite[SPRITE.CHEST_PICK_WOOD] = sprite[SPRITE.INV_PICK_WOOD];
        sprite[SPRITE.CHEST_PICK] = sprite[SPRITE.INV_PICK];
        sprite[SPRITE.CHEST_PICK_GOLD] = sprite[SPRITE.INV_PICK_GOLD];
        sprite[SPRITE.CHEST_PICK_DIAMOND] = sprite[SPRITE.INV_PICK_DIAMOND];
        sprite[SPRITE.CHEST_PICK_AMETHYST] = sprite[SPRITE.INV_PICK_AMETHYST];
        sprite[SPRITE.CHEST_STONE] = sprite[SPRITE.INV_STONE];
        sprite[SPRITE.CHEST_GOLD] = sprite[SPRITE.INV_GOLD];
        sprite[SPRITE.CHEST_DIAMOND] = sprite[SPRITE.INV_DIAMOND];
        sprite[SPRITE.CHEST_WOOD] = sprite[SPRITE.INV_WOOD];
        sprite[SPRITE.CHEST_PLANT] = sprite[SPRITE.INV_PLANT];
        sprite[SPRITE.CHEST_WORKBENCH] = sprite[SPRITE.INV_WORK];
        sprite[SPRITE.CHEST_STONE_WALL] = sprite[SPRITE.INV_STONE_WALL];
        sprite[SPRITE.CHEST_DIAMOND_WALL] = sprite[SPRITE.INV_DIAMOND_WALL];
        sprite[SPRITE.CHEST_GOLD_WALL] = sprite[SPRITE.INV_GOLD_WALL];
        sprite[SPRITE.CHEST_AMETHYST_WALL] = sprite[SPRITE.INV_AMETHYST_WALL];
        sprite[SPRITE.CHEST_WALL] = sprite[SPRITE.INV_WALL];
        sprite[SPRITE.CHEST_SPIKE] = sprite[SPRITE.INV_SPIKE];
        sprite[SPRITE.CHEST_MEAT] = sprite[SPRITE.INV_MEAT];
        sprite[SPRITE.CHEST_COOKED_MEAT] = sprite[SPRITE.INV_COOKED_MEAT];
        sprite[SPRITE.CHEST_CORD] = sprite[SPRITE.INV_CORD];
        sprite[SPRITE.CHEST_BLUE_CORD] = sprite[SPRITE.INV_BLUE_CORD];
        sprite[SPRITE.CHEST_BANDAGE] = sprite[SPRITE.INV_BANDAGE];
        sprite[SPRITE.CHEST_LOCK] = sprite[SPRITE.INV_LOCK];
        sprite[SPRITE.CHEST_LOCKPICK] = sprite[SPRITE.INV_LOCKPICK];
        sprite[SPRITE.CHEST_RESURRECTION] = sprite[SPRITE.INV_RESURRECTION];
        sprite[SPRITE.CHEST_DRAGON_HEART] = sprite[SPRITE.INV_DRAGON_HEART];
        sprite[SPRITE.CHEST_LAVA_HEART] = sprite[SPRITE.INV_LAVA_HEART];
        sprite[SPRITE.CHEST_DRAGON_SWORD] = sprite[SPRITE.INV_DRAGON_SWORD];
        sprite[SPRITE.CHEST_TOTEM] = sprite[SPRITE.INV_TOTEM];
        sprite[SPRITE.CHEST_DOOR_WOOD_CLOSE] = sprite[SPRITE.INV_DOOR_WOOD_CLOSE];
        sprite[SPRITE.CHEST_CHEST] = sprite[SPRITE.INV_CHEST];
        sprite[SPRITE.CHEST_SLOT] = CTI(create_chest_slot(0.8, true, ["#4c3b19", "#c4a23a", "#c4a23a", "#c4a23a"]));
        sprite[SPRITE.CHEST_PLUS] = create_craft_button(0.5, [{
            f: create_plus_chest,
            x: 0,
            y: 2,
            a: 1,
            r: 0,
            c: ["#ffffff"]
        }], 0.16, ["#c4a23a", "#d0ad41", "#b89733"], 0.9);
        sprite[SPRITE.CHEST_STONE_SPIKE] = sprite[SPRITE.INV_STONE_SPIKE];
        sprite[SPRITE.CHEST_GOLD_SPIKE] = sprite[SPRITE.INV_GOLD_SPIKE];
        sprite[SPRITE.CHEST_DIAMOND_SPIKE] = sprite[SPRITE.INV_DIAMOND_SPIKE];
        sprite[SPRITE.CHEST_AMETHYST_SPIKE] = sprite[SPRITE.INV_AMETHYST_SPIKE];
        sprite[SPRITE.CHEST_BAG] = sprite[SPRITE.INV_BAG];
        sprite[SPRITE.CHEST_SPECIAL_FUR] = sprite[SPRITE.INV_SPECIAL_FUR];
        sprite[SPRITE.CHEST_SPECIAL_FUR_2] = sprite[SPRITE.INV_SPECIAL_FUR_2];
        sprite[SPRITE.CHEST_FUR] = sprite[SPRITE.INV_FUR];
        sprite[SPRITE.CHEST_KRAKEN_SKIN] = sprite[SPRITE.INV_KRAKEN_SKIN];
        sprite[SPRITE.CHEST_FUR_WOLF] = sprite[SPRITE.INV_FUR_WOLF];
        sprite[SPRITE.CHEST_FUR_BOAR] = sprite[SPRITE.INV_FUR_BOAR];
        sprite[SPRITE.CHEST_FUR_WINTER] = sprite[SPRITE.INV_FUR_WINTER];
        sprite[SPRITE.CHEST_EARMUFFS] = sprite[SPRITE.INV_EARMUFFS];
        sprite[SPRITE.CHEST_CAP_SCARF] = sprite[SPRITE.INV_CAP_SCARF];
        sprite[SPRITE.CHEST_DOOR_STONE_CLOSE] = sprite[SPRITE.INV_DOOR_STONE_CLOSE];
        sprite[SPRITE.CHEST_DOOR_GOLD_CLOSE] = sprite[SPRITE.INV_DOOR_GOLD_CLOSE];
        sprite[SPRITE.CHEST_DOOR_DIAMOND_CLOSE] = sprite[SPRITE.INV_DOOR_DIAMOND_CLOSE];
        sprite[SPRITE.CHEST_DOOR_AMETHYST_CLOSE] = sprite[SPRITE.INV_DOOR_AMETHYST_CLOSE];
        sprite[SPRITE.CHEST_COAT] = sprite[SPRITE.INV_COAT];
        sprite[SPRITE.CHEST_WOOD_SPEAR] = sprite[SPRITE.INV_WOOD_SPEAR];
        sprite[SPRITE.CHEST_SPEAR] = sprite[SPRITE.INV_SPEAR];
        sprite[SPRITE.CHEST_GOLD_SPEAR] = sprite[SPRITE.INV_GOLD_SPEAR];
        sprite[SPRITE.CHEST_DIAMOND_SPEAR] = sprite[SPRITE.INV_DIAMOND_SPEAR];
        sprite[SPRITE.CHEST_AMETHYST_SPEAR] = sprite[SPRITE.INV_AMETHYST_SPEAR];
        sprite[SPRITE.CHEST_DRAGON_SPEAR] = sprite[SPRITE.INV_DRAGON_SPEAR];
        sprite[SPRITE.CHEST_SUPER_HAMMER] = sprite[SPRITE.INV_SUPER_HAMMER];
        sprite[SPRITE.CHEST_SPANNER] = sprite[SPRITE.INV_SPANNER];
        sprite[SPRITE.CHEST_HAMMER] = sprite[SPRITE.INV_HAMMER];
        sprite[SPRITE.CHEST_HAMMER_GOLD] = sprite[SPRITE.INV_HAMMER_GOLD];
        sprite[SPRITE.CHEST_HAMMER_DIAMOND] = sprite[SPRITE.INV_HAMMER_DIAMOND];
        sprite[SPRITE.CHEST_HAMMER_AMETHYST] = sprite[SPRITE.INV_HAMMER_AMETHYST];
        sprite[SPRITE.CHEST_FURNACE] = sprite[SPRITE.INV_FURNACE];
        sprite[SPRITE.CHEST_BREAD_OVEN] = sprite[SPRITE.INV_BREAD_OVEN];
        sprite[SPRITE.CHEST_EXPLORER_HAT] = sprite[SPRITE.INV_EXPLORER_HAT];
        sprite[SPRITE.CHEST_STONE_HELMET] = sprite[SPRITE.INV_STONE_HELMET];
        sprite[SPRITE.CHEST_GOLD_HELMET] = sprite[SPRITE.INV_GOLD_HELMET];
        sprite[SPRITE.CHEST_DIAMOND_HELMET] = sprite[SPRITE.INV_DIAMOND_HELMET];
        sprite[SPRITE.CHEST_AMETHYST_HELMET] = sprite[SPRITE.INV_AMETHYST_HELMET];
        sprite[SPRITE.CHEST_DRAGON_HELMET] = sprite[SPRITE.INV_DRAGON_HELMET];
        sprite[SPRITE.CHEST_BOOK] = sprite[SPRITE.INV_BOOK];
        sprite[SPRITE.CHEST_PAPER] = sprite[SPRITE.INV_PAPER];
        sprite[SPRITE.CHEST_AMETHYST] = sprite[SPRITE.INV_AMETHYST];
        sprite[SPRITE.CHEST_BRIDGE] = sprite[SPRITE.INV_BRIDGE];
        sprite[SPRITE.CHEST_ROOF] = sprite[SPRITE.INV_ROOF];
        sprite[SPRITE.CHEST_PLOT] = sprite[SPRITE.INV_PLOT];
        sprite[SPRITE.CHEST_SAND] = sprite[SPRITE.INV_SAND];
        sprite[SPRITE.CHEST_BREAD] = sprite[SPRITE.INV_BREAD];
        sprite[SPRITE.CHEST_ICE] = sprite[SPRITE.INV_ICE];
        sprite[SPRITE.CHEST_GROUND] = sprite[SPRITE.INV_GROUND];
        sprite[SPRITE.CHEST_BOTTLE_FULL] = sprite[SPRITE.INV_BOTTLE_FULL];
        sprite[SPRITE.CHEST_BOTTLE_EMPTY] = sprite[SPRITE.INV_BOTTLE_EMPTY];
        sprite[SPRITE.CHEST_WATERING_CAN] = sprite[SPRITE.INV_WATERING_CAN];
        sprite[SPRITE.CHEST_FLOUR] = sprite[SPRITE.INV_FLOUR];
        sprite[SPRITE.CHEST_COOKIE] = sprite[SPRITE.INV_COOKIE];
        sprite[SPRITE.CHEST_CANDY] = sprite[SPRITE.INV_CANDY];
        sprite[SPRITE.CHEST_FERRERO] = sprite[SPRITE.INV_FERRERO];
        sprite[SPRITE.CHEST_SUPER_DIVING_SUIT] = sprite[SPRITE.INV_SUPER_DIVING_SUIT];
        sprite[SPRITE.CHEST_DIVING_MASK] = sprite[SPRITE.INV_DIVING_MASK];
        sprite[SPRITE.CHEST_WATERING_CAN_FULL] = sprite[SPRITE.INV_WATERING_CAN_FULL];
        sprite[SPRITE.CHEST_CAKE] = sprite[SPRITE.INV_CAKE];
        sprite[SPRITE.CHEST_CRAB_STICK] = sprite[SPRITE.INV_CRAB_STICK];
        sprite[SPRITE.CHEST_FOODFISH] = sprite[SPRITE.INV_FOODFISH];
        sprite[SPRITE.CHEST_FOODFISH_COOKED] = sprite[SPRITE.INV_FOODFISH_COOKED];
        sprite[SPRITE.CHEST_SCALES] = sprite[SPRITE.INV_SCALES];
        sprite[SPRITE.CHEST_SANDWICH] = sprite[SPRITE.INV_SANDWICH];
        sprite[SPRITE.CHEST_CROWN_GREEN] = sprite[SPRITE.INV_CROWN_GREEN];
        sprite[SPRITE.CHEST_GEMME_GREEN] = sprite[SPRITE.INV_GEMME_GREEN];
        sprite[SPRITE.CHEST_CROWN_ORANGE] = sprite[SPRITE.INV_CROWN_ORANGE];
        sprite[SPRITE.CHEST_GEMME_ORANGE] = sprite[SPRITE.INV_GEMME_ORANGE];
        sprite[SPRITE.CHEST_CROWN_BLUE] = sprite[SPRITE.INV_CROWN_BLUE];
        sprite[SPRITE.CHEST_GEMME_BLUE] = sprite[SPRITE.INV_GEMME_BLUE];
        sprite[SPRITE.CHEST_HOOD] = sprite[SPRITE.INV_HOOD];
        sprite[SPRITE.CHEST_PEASANT] = sprite[SPRITE.INV_PEASANT];
        sprite[SPRITE.CHEST_WINTER_PEASANT] = sprite[SPRITE.INV_WINTER_PEASANT];
        sprite[SPRITE.CHEST_WINTER_HOOD] = sprite[SPRITE.INV_WINTER_HOOD];
        sprite[SPRITE.CHEST_BUCKET_EMPTY] = sprite[SPRITE.INV_BUCKET_EMPTY];
        sprite[SPRITE.CHEST_BUCKET_FULL] = sprite[SPRITE.INV_BUCKET_FULL];
        sprite[SPRITE.CHEST_WELL] = sprite[SPRITE.INV_WELL];
        sprite[SPRITE.CHEST_SIGN] = sprite[SPRITE.INV_SIGN];
        sprite[SPRITE.CHEST_PUMPKIN_SEED] = sprite[SPRITE.INV_PUMPKIN_SEED];
        sprite[SPRITE.CHEST_GARLIC_SEED] = sprite[SPRITE.INV_GARLIC_SEED];
        sprite[SPRITE.CHEST_THORNBUSH_SEED] = sprite[SPRITE.INV_THORNBUSH_SEED];
        sprite[SPRITE.CHEST_WOOD_HELMET] = sprite[SPRITE.INV_WOOD_HELMET];
    };
    INFO_BOX = [];
    PLAYER_LEVEL = [];

    function ctxDrawImage(ctx, img, b, c, d, e, f, g, h, i) {
        if ((img.tryLoad === undefined) || (img.tryLoad() === 1)) {
            if (i !== undefined)
                ctx.drawImage(img, b, c, Math.max(1, d), Math.max(1, e), f, g, h, i);
            else if (e !== undefined)
                ctx.drawImage(img, b, c, d, e);
            else
                ctx.drawImage(img, b, c);
        }
    };

    function draw_info_box() {
        var box = game.info_box;
        var inv = box.id;
        if ((box.activated === 1) && (box.display === 1)) {
            if (INFO_BOX[inv] === undefined)
                INFO_BOX[inv] = create_info_box(inv);

            if (box.craft === 1)
                ctxDrawImage(ctx, INFO_BOX[inv], box.x, box.y);
            else {
                if (((box.x - 80) + INFO_BOX[inv].width) > canw)
                    ctxDrawImage(ctx, INFO_BOX[inv], (canw - INFO_BOX[inv].width) - 10, (box.y - INFO_BOX[inv].height) - 10);
                else
                    ctxDrawImage(ctx, INFO_BOX[inv], box.x - 80, (box.y - INFO_BOX[inv].height) - 10);
            }
        }
    };

    function draw_slot_number(n, button, push) {
        var img = sprite[SPRITE.SLOT_NUMBER][n];
        var x = button.info.translate.x + (5 * scale);
        var y = button.info.translate.y + (5 * scale);
        if ((button.info.state == BUTTON_CLICK) || push)
            y += scale * 5;

        ctxDrawImage(ctx, img, x, y);
    };

    function draw_amount(n, button) {
        if (!sprite[SPRITE.COUNTER][n])
            sprite[SPRITE.COUNTER][n] = create_text(scale, "x" + n, 17, "#FFF");

        var img = sprite[SPRITE.COUNTER][n];
        var x = ((button.info.translate.x + button.info.img[0].width) - img.width) - (14 * scale);
        var y = ((button.info.translate.y + button.info.img[0].height) - img.height) - (19 * scale);
        if (button.info.state == BUTTON_CLICK)
            y += scale * 5;

        ctxDrawImage(ctx, img, x, y);
    };

    function draw_well_inventory() {
        if ((((user.chest.open || user.furnace.open) || user.windmill.open) || user.bread_oven.open) || user.extractor.open)
            return;

        user.well.open = false;
        var p = world.fast_units[user.uid];
        var min = WORLD.DIST_WELL;
        if (!p)
            return;

        for (var i = 0; i < world.units[ITEMS.WELL].length; i++) {
            var well = world.units[ITEMS.WELL][i];
            var m = Utils.dist(well, p);
            if (m < min) {
                min = m;
                user.well.open = true;
                user.well.pid = well.pid;
                user.well.iid = well.id;
            }
        }
    };

    function draw_sign_button() {
        if ((((user.chest.open || user.furnace.open) || user.windmill.open) || user.bread_oven.open) || user.extractor.open)
            return;

        user.sign.open = false;
        var p = world.fast_units[user.uid];
        var min = WORLD.DIST_SIGN;
        if (!p)
            return;

        for (var i = 0; i < world.units[ITEMS.SIGN].length; i++) {
            var sign = world.units[ITEMS.SIGN][i];
            var m = Utils.dist(sign, p);
            if (((m < min) && (sign.info === 0)) && (sign.pid === user.id)) {
                user.sign.open = true;
                min = m;
                user.sign.iid = sign.id;
            }
        }
        if (min < WORLD.DIST_SIGN) {
            var button = game.sign.button;
            button.draw(ctx);
        }
    };

    function draw_bread_oven_inventory() {
        if (((user.chest.open || user.furnace.open) || user.windmill.open) || user.extractor.open)
            return;

        user.bread_oven.open = false;
        var p = world.fast_units[user.uid];
        var min = WORLD.DIST_BREAD_OVEN;
        if (!p)
            return;

        for (var i = 0; i < world.units[ITEMS.BREAD_OVEN].length; i++) {
            var bread_oven = world.units[ITEMS.BREAD_OVEN][i];
            var m = Utils.dist(bread_oven, p);
            if (m < min) {
                min = m;
                user.bread_oven.open = true;
                user.bread_oven.amount_wood = bread_oven.info & 31;
                user.bread_oven.amount_flour = (bread_oven.info & 992) >> 5;
                user.bread_oven.amount_bread = (bread_oven.info & 31744) >> 10;
                user.bread_oven.pid = bread_oven.pid;
                user.bread_oven.iid = bread_oven.id;
            }
        }
        if (min < WORLD.DIST_BREAD_OVEN) {
            var img = sprite[SPRITE.BREAD_OVEN_UI];
            var button = game.bread_oven_wood_button;
            var x = button.info.translate.x - 32;
            ctxDrawImage(ctx, img, x, 0);
            if (user.bread_oven.amount_wood > 0) {
                button.draw(ctx);
                var n = user.bread_oven.amount_wood;
                if (n > 1)
                    draw_amount(n, button);

            }
            var button = game.bread_oven_bread_button;
            if (user.bread_oven.amount_bread > 0) {
                button.draw(ctx);
                var n = user.bread_oven.amount_bread;
                if (n > 1)
                    draw_amount(n, button);

            }
            var button = game.bread_oven_flour_button;
            if (user.bread_oven.amount_flour > 0) {
                button.draw(ctx);
                var n = user.bread_oven.amount_flour;
                if (n > 1)
                    draw_amount(n, button);

            }
        }
    };

    function draw_extractor_inventory() {
        if (user.chest.open || user.furnace.open)
            return;

        user.extractor.open = false;
        var p = world.fast_units[user.uid];
        var min = WORLD.DIST_EXTRACTOR_MACHINE;
        if (!p)
            return;

        for (var j = 0; j < EXTRACTORS.length; j++) {
            var type = EXTRACTORS[j][0];
            var mineral = EXTRACTORS[j][1];
            for (var i = 0; i < world.units[type].length; i++) {
                var extractor = world.units[type][i];
                var m = Utils.dist(extractor, p);
                if (m < min) {
                    min = m;
                    user.extractor.mineral = mineral;
                    user.extractor.type = type;
                    user.extractor.open = true;
                    user.extractor.amount_wood = extractor.info;
                    user.extractor.amount_mineral = extractor.extra;
                    user.extractor.pid = extractor.pid;
                    user.extractor.iid = extractor.id;
                }
            }
        }
        if (min < WORLD.DIST_EXTRACTOR_MACHINE) {
            var img = sprite[SPRITE.EXTRACTOR_CASES];
            var button = game.extractor_wood_button;
            var x = button.info.translate.x - 33;
            ctxDrawImage(ctx, img, x, 0);
            if (user.extractor.amount_wood > 0) {
                button.draw(ctx);
                var n = user.extractor.amount_wood;
                if (n > 1)
                    draw_amount(n, button);

            }
            switch (user.extractor.mineral) {
                case INV.STONE:
                    var button = game.extractor_stone_button;
                    break;
                case INV.GOLD:
                    var button = game.extractor_gold_button;
                    break;
                case INV.DIAMOND:
                    var button = game.extractor_diamond_button;
                    break;
                case INV.AMETHYST:
                    var button = game.extractor_amethyst_button;
                    break;
                case INV.REIDITE:
                    var button = game.extractor_reidite_button;
                    break;
            }
            if (user.extractor.amount_mineral > 0) {
                button.draw(ctx);
                var n = user.extractor.amount_mineral;
                if (n > 1)
                    draw_amount(n, button);

            }
        }
    };

    function draw_windmill_inventory() {
        if (user.chest.open || user.furnace.open)
            return;

        user.windmill.open = false;
        var p = world.fast_units[user.uid];
        var min = WORLD.DIST_WINDMILL;
        if (!p)
            return;

        for (var i = 0; i < world.units[ITEMS.WINDMILL].length; i++) {
            var windmill = world.units[ITEMS.WINDMILL][i];
            var m = Utils.dist(windmill, p);
            if (m < min) {
                min = m;
                user.windmill.open = true;
                user.windmill.amount_wheat = windmill.info
                user.windmill.amount_flour = windmill.extra;
                user.windmill.pid = windmill.pid;
                user.windmill.iid = windmill.id;
            }
        }
        if (min < WORLD.DIST_WINDMILL) {
            var img = sprite[SPRITE.WINDMILL_CASES];
            var button = game.windmill_wheat_button;
            var x = button.info.translate.x - 33;
            ctxDrawImage(ctx, img, x, 0);
            if (user.windmill.amount_wheat > 0) {
                button.draw(ctx);
                var n = user.windmill.amount_wheat;
                if (n > 1)
                    draw_amount(n, button);

            }
            var button = game.windmill_flour_button;
            if (user.windmill.amount_flour > 0) {
                button.draw(ctx);
                var n = user.windmill.amount_flour;
                if (n > 1)
                    draw_amount(n, button);

            }
        }
    };

    function draw_furnace_inventory() {
        if (user.chest.open)
            return;

        user.furnace.amount = 0;
        user.furnace.open = false;
        var p = world.fast_units[user.uid];
        var min = WORLD.DIST_FURNACE;
        if (!p)
            return;

        for (var i = 0; i < world.units[ITEMS.FURNACE].length; i++) {
            var furnace = world.units[ITEMS.FURNACE][i];
            var m = Utils.dist(furnace, p);
            if (m < min) {
                min = m;
                user.furnace.open = true;
                user.furnace.amount = furnace.info;
                user.furnace.pid = furnace.pid;
                user.furnace.iid = furnace.id;
            }
        }
        if (min < WORLD.DIST_FURNACE) {
            var img = sprite[SPRITE.FURNACE_SLOT];
            var button = game.furnace_button;
            var x = Math.floor(button.info.translate.x + ((button.info.img[0].width - img.width) / 2));
            var y = Math.floor(button.info.translate.y + ((button.info.img[0].height - img.height) / 2)) + 3;
            ctxDrawImage(ctx, img, x, y);
            if (user.furnace.amount > 0) {
                button.draw(ctx);
                var n = user.furnace.amount;
                if (n > 1)
                    draw_amount(n, button);

            }
        }
    };

    function draw_resurrection_inventory() {
        user.resurrection.open = false;
        var p = world.fast_units[user.uid];
        var min = WORLD.DIST_RESURRECTION;
        if (!p)
            return;

        for (var i = 0; i < world.units[ITEMS.RESURRECTION].length; i++) {
            var resurrection = world.units[ITEMS.RESURRECTION][i];
            var m = Utils.dist(resurrection, p);
            if (m < min) {
                min = m;
                user.resurrection.open = true;
                user.resurrection.pid = resurrection.pid;
                user.resurrection.iid = resurrection.id;
            }
        }
        if (min < WORLD.DIST_RESURRECTION)
            game.resurrection.draw(ctx);

    };

    function draw_team_buttons() {
        user.totem.id = -1;
        user.totem.pid = -1;
        if ((user.spectator || user.totem.wait) || user.zombie)
            return;

        var p = world.fast_units[user.uid];
        var min = WORLD.DIST_TOTEM;
        if (p) {
            for (var i = 0; i < world.units[ITEMS.TOTEM].length; i++) {
                var totem = world.units[ITEMS.TOTEM][i];
                var m = Utils.dist(totem, p);
                if (m < min) {
                    min = m;
                    user.totem.id = totem.id;
                    user.totem.pid = totem.pid;
                    user.totem.info = totem.info;
                    user.totem.lock = totem.extra;
                }
            }
        }
        var before = game.team_buttons_id;
        game.team_buttons_id = -1;
        if ((user.totem.pid != -1) && ((user.team.length == 0) || (user.id == user.totem.pid))) {
            if ((user.team.length == 0) && (user.totem.info >= 8) || (user.team.length == 0) && user.totem.lock)
                game.team_buttons_id = CLIENT.TEAM_FULL;
            else if (user.team.length == 0)
                game.team_buttons_id = CLIENT.TEAM_JOIN;
            else
                game.team_buttons_id = CLIENT.TEAM_MANAGE;
        } else if ((user.team.length != 0) && (user.team[0] != user.id))
            game.team_buttons_id = CLIENT.TEAM_LEAVE;
        else if ((user.team.length != 0) && (user.team[0] == user.id))
            game.team_buttons_id = CLIENT.TEAM_SHOW;
        else if (user.team.length != 0)
            game.team_buttons_id = CLIENT.TEAM_JOIN;

        if (game.team_buttons_id != -1)
            game.team_buttons[game.team_buttons_id].button.draw(ctx);

        var style = document.getElementById("team_box").style;
        if (((game.team_buttons_id != -1) && (game.team_buttons_id != before)) && (style.display == "inline-block"))
            game.team_buttons[game.team_buttons_id].action();

    };

    function draw_chest_inventory() {
        user.chest.id = -1;
        user.chest.lock = false;
        user.chest.locked = false;
        user.chest.lockpick = false;
        user.chest.padlock = false;
        user.chest.open = false;
        var p = world.fast_units[user.uid];
        var min = WORLD.DIST_CHEST;
        if (!p)
            return;

        for (var i = 0; i < world.units[ITEMS.CHEST].length; i++) {
            var chest = world.units[ITEMS.CHEST][i];
            var m = Utils.dist(chest, p);
            if (m < min) {
                min = m;
                user.chest.open = true;
                user.chest.id = chest.extra == 1024 ? -1 : chest.extra;
                //(chest.extra < 2) ? -1 : Math.floor((chest.action - 1) / 2);
                user.chest.amount = chest.info;

                /**
        * e ITEMS.CHEST:
                this.update = function (action) {
                    this.lock = (this.info & 8192) ? 1 : 0;
                    this.info = this.info & 8191;
                    this.action = action;
                };
                this.draw = draw_chest;
        */
                user.chest.pid = chest.pid;
                user.chest.iid = chest.id;
                user.chest.locked = chest.lock;
                user.chest.lock = ((chest.lock && (user.id != chest.pid)) && !user.in_team(chest.pid)) ? true : false;
                user.chest.padlock = (((chest.pid === user.id) && !user.chest.locked) && (user.inv.find_item(INV.LOCK) != -1)) ? true : false;
                if (user.chest.locked && (user.inv.find_item(INV.LOCKPICK) != -1))
                    user.chest.lockpick = true;

            }
        }
        if (min < WORLD.DIST_CHEST) {
            var img = sprite[SPRITE.CHEST_SLOT];
            var button = game.chest_buttons[0];
            var x = Math.floor(button.info.translate.x + ((button.info.img[0].width - img.width) / 2));
            var y = Math.floor(button.info.translate.y + ((button.info.img[0].height - img.height) / 2)) + 3;
            ctxDrawImage(ctx, img, x, y);
            if (!user.chest.lock || (user.chest.pid === user.id)) {
                if (user.chest.id >= 0) {
                    var button = game.chest_buttons[user.chest.id];
                    button.draw(ctx);
                    var n = user.chest.amount;
                    if (n > 1)
                        draw_amount(n, button);

                }
            }
            if (!user.chest.lock) {
                if (user.chest.padlock)
                    game.chest_padlock.draw(ctx);

            } else
                game.chest_locked.draw(ctx);
            if (user.chest.lockpick)
                game.chest_lockpick.draw(ctx);

        }
    };

    function draw_bigmap() {
        if (!user.bigmap)
            return;

        ctx.globalAlpha = 0.5;
        ctx.fillStyle = "#000";
        ctx.fillRect(0, 0, canw, canh);
        ctx.globalAlpha = 0.8;
        var img = sprite[SPRITE.BIGMAP][world.time];
        var x = canw2 - (img.width / 2);
        var y = canh2 - (img.height / 2);
        ctxDrawImage(ctx, img, x, y);
        ctx.globalAlpha = 1;
        if (game.minimap.marker.x > -1) {
            ctx.fillStyle = "#660000";
            circle(ctx, x + ((game.minimap.marker.x * 3) * scale), y + ((game.minimap.marker.y * 3) * scale), scale * 14);
            ctx.fill();
        }
        var players = game.minimap.players;
        for (var i = 0; i < players.length; i++) {
            var p = players[i];
            ctx.fillStyle = !world.time ? "#ff0000" : "#ff0000";
            circle(ctx, x + ((600 * (p.x / (world.nw * 100))) * scale), y + ((600 * (p.y / (world.nh * 100))) * scale), scale * 12);
            ctx.fill();
        }
        var u = world.fast_units[user.uid];
        if (u) {
            ctx.fillStyle = !world.time ? "#e39716" : "#fff";
            circle(ctx, x + ((600 * (u.x / (world.nw * 100))) * scale), y + ((600 * (u.y / (world.nh * 100))) * scale), scale * 12);
            ctx.fill();
        }
    };

    function draw_reconnect() {
        if (user.reconnect.enabled) {
            ctx.globalAlpha = 0.9;
            ctx.fillStyle = "#000";
            round_rect(ctx, canw2 - 150, canh2 - 90, 300, 180, 15);
            ctx.fill();
            ctx.globalAlpha = 1;
            var img = sprite[SPRITE.GEAR2];
            ctx.save();
            user.reconnect.rotate = (user.reconnect.rotate + (delta * 2)) % (Math.PI * 2);
            ctx.translate(canw / 2, (canh / 2) - 25);
            ctx.rotate(user.reconnect.rotate);
            ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
            ctx.restore();
            var img = sprite[SPRITE.RECONNECT];
            ctxDrawImage(ctx, img, (canw - img.width) / 2, ((canh - img.height) / 2) + 25);
        }
    };

    function draw_minimap() {
        if (user.inv.can_select.length > 0)
            var minimap = {
                x: game.minimap.translate.x,
                y: game.minimap.translate.y - (120 * scale)
            };
        else
            var minimap = {
                x: game.minimap.translate.x,
                y: game.minimap.translate.y - (50 * scale)
            };
        ctx.globalAlpha = 0.8;
        var img = sprite[SPRITE.MINIMAP][world.time];
        ctxDrawImage(ctx, img, minimap.x, minimap.y);
        ctx.globalAlpha = 1;
        if (game.minimap.marker.x > -1) {
            ctx.fillStyle = "#660000";
            circle(ctx, minimap.x + (game.minimap.marker.x * scale), minimap.y + (game.minimap.marker.y * scale), scale * 5);
            ctx.fill();
        }
        var old_scale = scale;
        var players = game.minimap.players;
        for (var i = 0; i < players.length; i++) {
            var p = players[i];
            ctx.fillStyle = !world.time ? "#ff0000" : "#ff0000";
            circle(ctx, minimap.x + ((193 * (p.x / (world.nw * 100))) * scale), minimap.y + ((193 * (p.y / (world.nh * 100))) * scale), scale * 2);
            ctx.fill();
        }
        var u = world.fast_units[user.uid];
        if (u) {
            ctx.fillStyle = !world.time ? "#e39716" : "#fff";
            circle(ctx, minimap.x + ((193 * (u.x / (world.nw * 100))) * scale), minimap.y + ((193 * (u.y / (world.nh * 100))) * scale), scale * 4);
            ctx.fill();
        }
        scale = old_scale;
    };
    var __BANDAGE__ = [];

    function draw_status() {
        var y = -8;
        if (user.auto_feed.enabled) {
            var img = sprite[SPRITE.AUTO_FEED];
            ctxDrawImage(ctx, img, user.auto_feed.translate.x, user.auto_feed.translate.y + y);
            y += 70;
        }
        if (user.blizzard === 1) {
            var img = sprite[SPRITE.STOP_REGENERATION_BLIZZARD];
            ctxDrawImage(ctx, img, user.auto_feed.translate.x, user.auto_feed.translate.y + y);
            y += 70;
        } else if (((((user.gauges.cold.x < 0.25) || (user.gauges.hunger.x < 0.25)) || (user.gauges.thirst.x < 0.25)) || (user.gauges.oxygen.x < 0.25)) || (user.gauges.warm.x < 0.25)) {
            var img = sprite[SPRITE.STOP_REGENERATION];
            ctxDrawImage(ctx, img, user.auto_feed.translate.x, user.auto_feed.translate.y + y);
            y += 70;
        }
        if (user.bandage > 0) {
            var img = sprite[SPRITE.BANDAGE_ACTIVATED];
            ctxDrawImage(ctx, img, user.auto_feed.translate.x, user.auto_feed.translate.y + y);
            var bandage = __BANDAGE__[user.bandage];
            if (bandage === undefined) {
                bandage = create_text(scale, user.bandage + "", 30, "#FDFDFD", null, null, null, null, null, "#C8BBBF", 6);
                __BANDAGE__[user.bandage] = bandage;
            }
            if (user.bandage < 9)
                ctxDrawImage(ctx, bandage, user.auto_feed.translate.x - 39, (user.auto_feed.translate.y + y) + 20);
            else
                ctxDrawImage(ctx, bandage, user.auto_feed.translate.x - 46, (user.auto_feed.translate.y + y) + 20);
        }
    };

    function draw_leaderboard() {
        var ldb = user.ldb;
        var game_ldb = game.leaderboard;
        if (ldb.update) {
            ldb.update = false;
            var ids = ldb.ids;
            var w = game_ldb.can.width;
            var h = game_ldb.can.height;
            var ctx2 = game_ldb.ctx;
            var players = world.players;
            var in_ldb = false;
            ctx2.clearRect(0, 0, w, h);
            ctx2.drawImage(game_ldb.img, 0, 0);
            for (var i = 0; i < ids.length; i++) {
                var p = players[ids[i]];
                if ((world.mode === WORLD.MODE_HUNGER_GAMES) && (p.nickname === "spectator"))
                    continue;

                if ((world.mode === WORLD.MODE_ZOMBIES) && (p.skin === WORLD.ZOMBIE_SKIN))
                    continue;

                if (ids[i] == user.id) {
                    in_ldb = true;
                    if ((world.mode === WORLD.MODE_VAMPIRES) && (p.skin === WORLD.VAMPIRE_SKIN))
                        color = "#FF0000";
                    else
                        color = "#FFF";
                } else {
                    if ((world.mode === WORLD.MODE_VAMPIRES) && (p.skin === WORLD.VAMPIRE_SKIN))
                        color = "#990000";
                    else
                        color = "#A1BDCD";
                }
                ctx2.drawImage(create_text(scale, "" + (i + 1), 15 * scale, color), 20 * scale, (40 + (i * 22)) * scale);
                if (!p.ldb_label)
                    p.ldb_label = create_text(scale, p.nickname, 15 * scale, color, undefined, undefined, undefined, undefined, 110 * scale);

                ctx2.drawImage(p.ldb_label, 39 * scale, (40 + (i * 22)) * scale);
                ctx2.drawImage(create_text(scale, Utils.simplify_number(p.score), 15 * scale, color), 156 * scale, (40 + (i * 22)) * scale);
            }
            if (!in_ldb) {
                if (((((((world.mode === WORLD.MODE_PVP) || (world.mode === WORLD.MODE_VAMPIRES)) || (world.mode === WORLD.MODE_LEGACY)) || (world.mode === WORLD.MODE_BR)) || (world.mode === WORLD.MODE_EXPERIMENTAL)) || ((world.mode === WORLD.MODE_HUNGER_GAMES) && !user.spectator)) || ((world.mode === WORLD.MODE_ZOMBIES) && !user.zombie)) {
                    ctx2.drawImage(sprite[SPRITE.YOUR_SCORE], 15 * scale, (46 + (i * 22)) * scale);
                    ctx2.drawImage(create_text(scale, Utils.simplify_number(world.players[user.id].score), 15 * scale, "#FFF"), 100 * scale, (46 + (i * 22)) * scale);
                }
            }
        }
        ctxDrawImage(ctx, game_ldb.can, game_ldb.translate.x, game_ldb.translate.y);
    };

    function draw_totem_delay() {
        var totem = user.totem;
        if (totem.wait) {
            var ret = totem.timeout.update();
            ctx.save();
            var img = sprite[SPRITE.DELAY_TEAM];
            var gap = sprite[SPRITE.DELAY_WEAPON].height + (25 * scale);
            ctx.translate(img.width, (game.gauges.translate.y - (188 * scale)) - gap);
            var x = (-img.width / 2) - 2;
            var y = (-img.height / 2) - 4;
            ctxDrawImage(ctx, img, x + 2, y);
            ctx.beginPath();
            ctx.lineWidth = 5 * scale;
            ctx.strokeStyle = SPRITE.WEAPON_LOADING[world.time];
            ctx.lineCap = "round";
            ctx.arc(0, y + (img.height / 2), 25 * scale, 0, (Math.PI * 2) * totem.timeout.v);
            ctx.stroke();
            ctx.restore();
            if (ret) {
                totem.wait = false;
                totem.timeout.v = 0;
                totem.timeout.o = false;
            }
        }
    };

    function draw_clock() {
        var c = world.clock;
        var img = sprite[SPRITE.CLOCK][world.time];
        ctxDrawImage(ctx, img, c.translate.x, c.translate.y);
        ctx.save();
        ctx.translate(c.translate.x + (img.width / 2), c.translate.y + (img.height / 2));
        world.clock.now = (((new Date).getTime() - c.init) + c.hour) % WORLD.DAY;
        var angle = (((Math.PI * 2) * world.clock.now) / WORLD.DAY) - (Math.PI / 2);
        ctx.rotate(angle);
        ctxDrawImage(ctx, sprite[SPRITE.ARROW_CLOCK], -img.width / 2, -img.height / 2);
        ctx.restore();
    };

    function draw_build_delay() {
        var build = user.build;
        if (build.wait) {
            var ret = build.timeout.update();
            ctx.save();
            var img = sprite[SPRITE.DELAY_WALL];
            ctx.translate(img.width - (12 * scale), game.gauges.translate.y - (190 * scale));
            var x = (-img.width / 2) + 9;
            var y = (-img.height / 2) - 4;
            ctxDrawImage(ctx, img, x, y);
            ctx.beginPath();
            ctx.lineWidth = 5 * scale;
            ctx.strokeStyle = SPRITE.HELMET_LOADING[world.time];
            ctx.lineCap = "round";
            ctx.arc(9, y + (img.height / 2), 25 * scale, 0, (Math.PI * 2) * build.timeout.v);
            ctx.stroke();
            ctx.restore();
            if (ret) {
                build.wait = false;
                build.timeout.v = 0;
                build.timeout.o = false;
            }
        }
    };

    function draw_helmet_switch_delay() {
        var helmet = user.helmet;
        if (helmet.wait) {
            var ret = helmet.timeout.update();
            ctx.save();
            var img = sprite[SPRITE.DELAY_HELMET];
            ctx.translate(img.width - (2 * scale), game.gauges.translate.y - (125 * scale));
            var x = (-img.width / 2) + 10;
            var y = (-img.height / 2) - 4;
            ctxDrawImage(ctx, img, x, y);
            ctx.beginPath();
            ctx.lineWidth = 5 * scale;
            ctx.strokeStyle = SPRITE.HELMET_LOADING[world.time];
            ctx.lineCap = "round";
            ctx.arc(9, y + (img.height / 2), 25 * scale, 0, (Math.PI * 2) * helmet.timeout.v);
            ctx.stroke();
            ctx.restore();
            if (ret) {
                helmet.wait = false;
                helmet.timeout.v = 0;
                helmet.timeout.o = false;
            }
        }
    };

    function draw_weapon_switch_delay() {
        var weapon = user.weapon;
        if (weapon.wait) {
            var ret = weapon.timeout.update();
            ctx.save();
            var img = sprite[SPRITE.DELAY_WEAPON];
            ctx.translate(img.width - (2 * scale), game.gauges.translate.y - (60 * scale));
            var x = (-img.width / 2) - 2;
            var y = (-img.height / 2) - 4;
            ctxDrawImage(ctx, img, x, y);
            ctx.beginPath();
            ctx.lineWidth = 5 * scale;
            ctx.strokeStyle = SPRITE.WEAPON_LOADING[world.time];
            ctx.lineCap = "round";
            ctx.arc(0, y + (img.height / 2), 25 * scale, 0, (Math.PI * 2) * weapon.timeout.v);
            ctx.stroke();
            ctx.restore();
            if (ret) {
                weapon.wait = false;
                weapon.timeout.v = 0;
                weapon.timeout.o = false;
            }
        }
    };

    function draw_ui_gear() {
        var craft = user.craft;
        if (craft.crafting) {
            var u = world.fast_units[user.uid];
            ctx.save();
            ctx.translate(user.cam.x + u.x, user.cam.y + u.y);
            var img = sprite[SPRITE.GEAR];
            var x = -img.width / 2;
            var y = (-img.height / 2) - (125 * scale);
            ctxDrawImage(ctx, img, x, y);
            ctx.beginPath();
            ctx.lineWidth = 5 * scale;
            ctx.strokeStyle = SPRITE.CRAFT_LOADING[world.time];
            ctx.lineCap = "round";
            ctx.arc(0, y + (img.height / 2), 25 * scale, 0, (Math.PI * 2) * craft.timeout.v);
            ctx.stroke();
            ctx.restore();
        }
    };

    function draw_ui_crafting() {
        var craft = user.craft;
        if (!craft.crafting && (craft.preview > 0)) {
            var u = world.fast_units[user.uid];
            if (!u)
                return;

            ctx.save();
            if ((INV_INFOS[craft.preview].grid === 0) && (craft.mode === 0)) {
                ctx.translate(user.cam.x + u.x, user.cam.y + u.y);
                ctx.rotate(u.angle);
                ctx.translate(120, 0);
            } else {
                var x = Math.floor(u.x + (Math.cos(u.angle) * 120));
                var y = Math.floor(u.y + (Math.sin(u.angle) * 120));
                x = user.cam.x + ((x - (x % 100)) + 50);
                y = user.cam.y + ((y - (y % 100)) + 50);
                ctx.translate(x, y);
            }
            var img = sprite[craft.preview][world.time];
            ctx.globalAlpha = 0.5;
            ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
            ctx.globalAlpha = 1;
            ctx.restore();
            if (INV_INFOS[craft.preview].grid === 0) {
                if (!craft.label[craft.mode]) {
                    if (craft.mode === 0)
                        craft.label[0] = create_text(scale, LANG[TEXT.MODE_FREE], 20, "#e2c340");
                    else
                        craft.label[1] = create_text(scale, LANG[TEXT.MODE_GRID], 20, "#e2c340");
                }
                var img = craft.label[craft.mode];
                ctxDrawImage(ctx, img, canw2 + (-img.width / 2), game.gauges.y - 26);
            }
        }
        if (craft.crafting) {
            var ret = craft.timeout.update();
            for (var i = 0; i < craft.can_craft.length; i++) {
                var button = craft.can_craft[i];
                if (craft.id == button.id) {
                    var h = scale * 42;
                    var h2 = scale * 17;
                    round_rect(ctx, button.info.translate.x, button.info.translate.y + (h * (1 - craft.timeout.v)), button.info.width, (h * craft.timeout.v) + h2, scale * 10);
                    ctx.fillStyle = "#55B973";
                    ctx.fill();
                    ctx.globalAlpha = 0.8;
                    button.draw(ctx);
                } else {
                    ctx.globalAlpha = 0.5;
                    button.draw(ctx);
                }
                ctx.globalAlpha = 1;
            }
            if (ret) {
                craft.crafting = false;
                craft.timeout.v = 0;
                craft.timeout.o = false;
                user.craft.id = -1
            }
            return true;
        } else {
            for (var i = 0; i < craft.can_craft.length; i++)
                craft.can_craft[i].draw(ctx);
        }
        return false;
    };

    function draw_ui_chat() {
        var players = world.units[ITEMS.PLAYERS];
        
        for (var i = 0; i < players.length; i++) {
            players[i].draw_text();
        }
    };

    function draw_ui_inventory() {
        var inv = user.inv;
        var p = world.fast_units[user.uid];
        for (var i = 0; i < inv.can_select.length; i++) {
            var button = inv.can_select[i];
            var push = false;
            var p = world.fast_units[user.uid];
            if (p && ((p.right == button.id) || ((p.clothe == button.id) && (p.clothe > 0)))) {
                push = true;
                ctxDrawImage(ctx, button.info.img[2], button.info.translate.x, button.info.translate.y, button.info.width, button.info.height);
            } else
                button.draw(ctx);
            var n = user.inv.n[button.id];
            if (n > 1)
                draw_amount(n, button);

            if (n > 0)
                draw_slot_number(i, button, push);

            var chest = user.chest;
            if ((chest.open && ((chest.id < 0) || (chest.id == button.id))) && (!chest.lock || (chest.pid == user.id)))
                game.plus_buttons[button.id].draw(ctx);

            var furnace = user.furnace;
            if (furnace.open && (INV.WOOD == button.id))
                game.plus_buttons[button.id].draw(ctx);

            var well = user.well;
            if (well.open && (INV.BUCKET_FULL == button.id))
                game.plus_buttons[button.id].draw(ctx);

            var windmill = user.windmill;
            if (windmill.open && (INV.WILD_WHEAT == button.id))
                game.plus_buttons[button.id].draw(ctx);

            var extractor = user.extractor;
            if (extractor.open && (INV.WOOD == button.id))
                game.plus_buttons[button.id].draw(ctx);

            var bread_oven = user.bread_oven;
            if (bread_oven.open && ((INV.WOOD == button.id) || (INV.FLOUR == button.id)))
                game.plus_buttons[button.id].draw(ctx);

        }
        if (button && (i < inv.max)) {
            var img = sprite[SPRITE.EMPTY_SLOT][2];
            x = button.info.translate.x;
            y = button.info.translate.y;
            for (j = 1; i < inv.max; i++, j++)
                ctxDrawImage(ctx, img, x + (j * (img.width + 5)), y);
        }
    };

    function draw_gauges() {
        ctx.save();
        var old_scale = scale;
        if (user.gauges.life.x < 0.25)
            ctx.globalAlpha = user.gauges.warn_life.v;

        var y = (user.inv.can_select.length > 0) ? -70 : 0;
        if (((((user.chest.open || (user.furnace.open && (-1 != user.inv.find_item(INV.WOOD)))) || (user.windmill.open && (-1 != user.inv.find_item(INV.WILD_WHEAT)))) || (user.extractor.open && (-1 != user.inv.find_item(INV.WOOD)))) || (user.well.open && (-1 != user.inv.find_item(INV.BUCKET_FULL)))) || (user.bread_oven.open && ((-1 != user.inv.find_item(INV.WOOD)) || (-1 != user.inv.find_item(INV.FLOUR)))))
            y -= 50 * scale;

        ctx.translate((canw - (950 * scale)) / 2, y);
        ctx.fillStyle = "#69A148";
        ctx.fillRect(this.translate.x + (37 * scale), this.translate.y + (17 * scale), (user.gauges.life.x * 178) * scale, 18 * scale);
        ctx.globalAlpha = 1;
        if (user.gauges.hunger.x < 0.35) {
            ctx.fillStyle = "#8F050A";
            ctx.globalAlpha = user.gauges.warn_hunger.v;
            ctx.fillRect(this.translate.x + (277 * scale), this.translate.y + (17 * scale), 178 * scale, 18 * scale);
            ctx.globalAlpha = 1;
        }
        ctx.fillStyle = "#AF352A";
        ctx.fillRect(this.translate.x + (277 * scale), this.translate.y + (17 * scale), (user.gauges.hunger.x * 178) * scale, 18 * scale);
        if (user.gauges.cold.x < 0.35) {
            ctx.fillStyle = "#366B91";
            ctx.globalAlpha = user.gauges.warn_cold.v;
            ctx.fillRect(this.translate.x + (517 * scale), this.translate.y + (17 * scale), 178 * scale, 18 * scale);
            ctx.globalAlpha = 1;
        }
        ctx.fillStyle = "#669BB1";
        ctx.fillRect(this.translate.x + (517 * scale), this.translate.y + (17 * scale), (user.gauges.cold.x * 178) * scale, 18 * scale);
        if (user.gauges.cold.x > 0.99) {
            if (user.gauges.warm.x > 0.75) {
                ctx.fillStyle = "#6C4036";
                ctx.globalAlpha = user.gauges.warn_warm.v;
                ctx.fillRect(this.translate.x + (517 * scale), this.translate.y + (17 * scale), 178 * scale, 18 * scale);
                ctx.globalAlpha = 1;
            }
            ctx.fillStyle = "#9C4036";
            ctx.fillRect(this.translate.x + (517 * scale), this.translate.y + (17 * scale), (( user.gauges.warm.x) * 178) * scale, 18 * scale);
        }
        if (HackSettings.BarTimers.enabled) {
            let date = Date.now();
            ctx.save();
            ctx.font = '34px Baloo Paaji';
            ctx.strokeStyle = "black";
            ctx.fillStyle = "red";
            ctx.lineWidth = 7;
            ctx.strokeText(user.gauges.realhp + "hp", this.translate.x - 80 * scale, this.translate.y + 35 * scale);
            ctx.fillText(user.gauges.realhp + "hp", this.translate.x - 80 * scale, this.translate.y + 35 * scale);
            ctx.strokeText(Math.floor(11 - (date - TimerTools.HPTimer) / 1000) + "s", this.translate.x + 216 * scale, this.translate.y + 35 * scale);
            ctx.fillText(Math.floor(11 - (date - TimerTools.HPTimer) / 1000) + "s", this.translate.x + 216 * scale, this.translate.y + 35 * scale);
            ctx.strokeText(Math.floor(6 - (date - TimerTools.GaugeTimer) / 1000) + "s", this.translate.x + 460 * scale, this.translate.y + 35 * scale);
            ctx.fillText(Math.floor(6 - (date - TimerTools.GaugeTimer) / 1000) + "s", this.translate.x + 460 * scale, this.translate.y + 35 * scale);
            ctx.restore();
        };
        if (user.gauges.thirst.x < 0.35) {
            ctx.fillStyle = "#001A57";
            ctx.globalAlpha = user.gauges.warn_thirst.v;
            ctx.fillRect(this.translate.x + (757 * scale), this.translate.y + (17 * scale), 178 * scale, 18 * scale);
            ctx.globalAlpha = 1;
        }
        ctx.fillStyle = "#074A87";
        ctx.fillRect(this.translate.x + (757 * scale), this.translate.y + (17 * scale), (user.gauges.thirst.x * 178) * scale, 18 * scale);
        scale = old_scale;
        ctxDrawImage(ctx, this.img, this.translate.x, this.translate.y);
        this.y = this.translate.y + y;
        ctx.restore();
        if (user.gauges.oxygen.x < 0.99) {
            var x = Math.floor(canw2 - (sprite[SPRITE.OXYGEN].width / 2));
            y += (this.translate.y - sprite[SPRITE.OXYGEN].height) - (5 * scale);
            ctx.fillStyle = "#BBE8EF";
            ctx.fillRect(x + 5, y + (5 * scale), (588 * scale) * user.gauges.oxygen.x, 10 * scale);
            if (user.gauges.oxygen.x < 0.35) {
                ctx.fillStyle = "#9BA8AF";
                ctx.globalAlpha = user.gauges.warn_oxygen.v;
                ctx.fillRect(x + 5, y + 5, 588 * scale, 10 * scale);
                ctx.globalAlpha = 1;
            }
            ctxDrawImage(ctx, sprite[SPRITE.OXYGEN], x, y);
            this.y = y;
        }
    };

    function draw_door(id) {
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        ctx.rotate(this.angle);
        if (this.hit.update) {
            if (this.hit.anim.update() && (this.hit.anim.o == false))
                this.hit.update = false;

            var v = (((1 - this.hit.anim.v) * delta) * 600) * scale;
            var x = Math.cos(this.hit.angle - this.angle) * v;
            var y = Math.sin(this.hit.angle - this.angle) * v;
        } else {
            var x = 0;
            var y = 0;
        };
        var img = sprite[id][world.time];
        w = -img.width;
        h = -img.height;
        ctxDrawImage(ctx, img, (-w / 2) + x, (-h / 2) + y, w, h);
        ctx.restore();
    };

    function draw_chest() {
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        ctx.rotate(this.angle);

        if (this.hit.update) {
            if (this.hit.anim.update() && (this.hit.anim.o == false))
                this.hit.update = false;

            var v = (((1 - this.hit.anim.v) * delta) * 600) * scale;
            var x = Math.cos(this.hit.angle - this.angle) * v;
            var y = Math.sin(this.hit.angle - this.angle) * v;
        } else {
            var x = 0;
            var y = 0;
        };
        img = sprite[SPRITE.CHEST][world.time];
        w = -img.width;
        h = -img.height;
        ctxDrawImage(ctx, img, (-w / 2) + x, (-h / 2) + y, w, h);
        if (this.lock) {
            img = sprite[SPRITE.LOCK][world.time];
            w = -img.width;
            h = -img.height;
            ctxDrawImage(ctx, img, ((-w / 2) + x) - (1 * scale), (-h / 2) + y, w, h);
        }
        ctx.restore();
    };

    function draw_thornbush_seed() {
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        ctx.rotate(this.angle);
        img = sprite[SPRITE.THORNBUSH_SEED_MOB][world.time];
        w = -img.width;
        h = -img.height;
        ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
        ctx.restore();
    };

    function draw_garlic_seed() {
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        ctx.rotate(this.angle);
        img = sprite[SPRITE.GARLIC_SEED_MOB][world.time];
        w = -img.width;
        h = -img.height;
        ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
        ctx.restore();
    };

    function draw_pumpkin_seed() {
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        ctx.rotate(this.angle);
        img = sprite[SPRITE.PUMPKIN_SEED_MOB][world.time];
        w = -img.width;
        h = -img.height;
        ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
        ctx.restore();
    };

    function draw_aloe_vera_mob() {
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        ctx.rotate(this.angle);
        img = sprite[SPRITE.ALOE_VERA][world.time];
        w = -img.width;
        h = -img.height;
        ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
        ctx.restore();
    };

    function draw_wheat_seed() {
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        ctx.rotate(this.angle);
        img = sprite[SPRITE.WHEAT_MOB][world.time];
        w = -img.width;
        h = -img.height;
        ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
        ctx.restore();
    };

    function draw_life_small(life) {
        var life = life / 100;
        if (life > 0.8 || life <= 0)
            return;

        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        ctx.rotate(this.angle);
        if (this.hit.update) {
            if (this.hit.anim.update() && (this.hit.anim.o == false))
                this.hit.update = false;

            var v = (((1 - this.hit.anim.v) * delta) * 600) * scale;
            var x = Math.cos(this.hit.angle - this.angle) * v;
            var y = Math.sin(this.hit.angle - this.angle) * v;
        } else {
            var x = 0;
            var y = 0;
        };
        ctx.globalAlpha = 0.5;
        circle_angle(ctx, x, y, 18 * scale, life);
        fill_path(ctx, null, "#000000", 18 * scale);
        ctx.globalAlpha = 1;
        circle_angle(ctx, x, y, 18 * scale, life);
        fill_path(ctx, null, SPRITE.BROWN_LIFE[world.time], 6 * scale);
        ctx.restore();
    };

    function draw_life(life) {
        var life = life / 100;
        if (life > 0.95)
            return;

        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        ctx.rotate(this.angle);
        if (this.hit.update) {
            if (this.hit.anim.update() && (this.hit.anim.o == false))
                this.hit.update = false;

            var v = (((1 - this.hit.anim.v) * delta) * 600) * scale;
            var x = Math.cos(this.hit.angle - this.angle) * v;
            var y = Math.sin(this.hit.angle - this.angle) * v;
        } else {
            var x = 0;
            var y = 0;
        };
        ctx.globalAlpha = 0.5;
        circle_angle(ctx, x, y, 28 * scale, life);
        fill_path(ctx, null, "#000000", 18 * scale);
        ctx.globalAlpha = 1;
        circle_angle(ctx, x, y, 28 * scale, life);
        fill_path(ctx, null, SPRITE.CRAFT_LOADING[world.time], 6 * scale);
        ctx.restore();
    };

    function draw_roof(id) {
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        ctx.rotate(this.angle);
        if (this.hit.update) {
            if (this.hit.anim.update() && (this.hit.anim.o == false))
                this.hit.update = false;

            var v = (((1 - this.hit.anim.v) * delta) * 600) * scale;
            var x = Math.cos(this.hit.angle - this.angle) * v;
            var y = Math.sin(this.hit.angle - this.angle) * v;
        } else {
            var x = 0;
            var y = 0;
        };
        var len = sprite[SPRITE.ROOFS].length;
        img = sprite[SPRITE.ROOFS][(this.j + (this.i % 2)) % len][world.time];
        w = -img.width;
        h = -img.height;
        var p = world.fast_units[user.uid];
        if (p && ((user.id === this.pid) || user.in_team(this.pid))) {
            if (Utils.dist(this, p) < 550)
                this.opacity = Math.max(this.opacity - delta, 0.3);
            else
                this.opacity = Math.min(this.opacity + delta, 1);
        } else if (p && (Utils.dist(this, world.fast_units[user.uid]) < 150))
            this.opacity = Math.max(this.opacity - delta, 0.3);
        else
            this.opacity = Math.min(this.opacity + delta, 1);
        var old = ctx.globalAlpha;
        ctx.globalAlpha = 0.3;
        ctxDrawImage(ctx, img, (-w / 2) + x, (-h / 2) + y, w, h);
        ctx.globalAlpha = old;
        ctx.restore();
    };

    function draw_garland(id) {
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        ctx.rotate(this.angle);
        if (this.hit.update) {
            if (this.hit.anim.update() && (this.hit.anim.o == false))
                this.hit.update = false;

            var v = (((1 - this.hit.anim.v) * delta) * 600) * scale;
            var x = Math.cos(this.hit.angle - this.angle) * v;
            var y = Math.sin(this.hit.angle - this.angle) * v;
        } else {
            var x = 0;
            var y = 0;
        };
        if (this.halo.update())
            this.color += 0.2 + (Math.random() * 0.3);

        img = sprite[SPRITE.GARLANDS][Math.floor(this.id + this.color) % 5][world.time];
        w = -img.width * this.halo.v;
        h = -img.height * this.halo.v;
        ctxDrawImage(ctx, img, (-w / 2) + x, (-h / 2) + y, w, h);
        ctx.restore();
    };

    function draw_bed(id) {
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        ctx.rotate(this.angle);
        if (this.hit.update) {
            if (this.hit.anim.update() && (this.hit.anim.o == false))
                this.hit.update = false;

            var v = (((1 - this.hit.anim.v) * delta) * 600) * scale;
            var x = Math.cos(this.hit.angle - this.angle) * v;
            var y = Math.sin(this.hit.angle - this.angle) * v;
        } else {
            var x = 0;
            var y = 0;
        };
        if ((id === SPRITE.BED_TOP) && !world.transition) {
            var opacity = 0;
            var players = world.units[ITEMS.PLAYERS];
            for (var i = 0; i < players.length; i++) {
                var dist = Utils.dist(players[i], this);
                if ((dist < 140) && (dist > 35)) {
                    opacity = 0;
                    break;
                } else if (dist <= 35)
                    opacity = 1;

            }
            if (opacity === 0)
                this.opacity = Math.max(0.5, this.opacity - (delta / 1.5));
            else
                this.opacity = Math.min(1, this.opacity + (delta / 1.5));
            ctx.globalAlpha = this.opacity;
        }
        img = sprite[id][world.time];
        w = -img.width;
        h = -img.height;
        ctxDrawImage(ctx, img, (-w / 2) + x, (-h / 2) + y, w, h);
        ctx.globalAlpha = 1;
        ctx.restore();
    };

    function draw_simple_item(id) {
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        ctx.rotate(this.angle);
        if (this.hit.update) {
            if (this.hit.anim.update() && (this.hit.anim.o == false))
                this.hit.update = false;

            var v = (((1 - this.hit.anim.v) * delta) * 600) * scale;
            var x = Math.cos(this.hit.angle - this.angle) * v;
            var y = Math.sin(this.hit.angle - this.angle) * v;
        } else {
            var x = 0;
            var y = 0;
        };
        img = sprite[id][world.time];
        w = -img.width;
        h = -img.height;
        ctxDrawImage(ctx, img, (-w / 2) + x, (-h / 2) + y, w, h);
        ctx.restore();
    };
    var __wave = 0;

    function draw_river_tile(is, ie, js, je, id, t, max, min, rand) {
        if (min === undefined)
            min = 0;

        for (var i = is; i <= ie; i++) {
            for (var j = js; j <= je; j++) {
                var tile = MAP.tiles[i][j];
                if ((tile === undefined) || (tile[t] === undefined))
                    continue;

                var object = tile[t];
                var img = sprite[id][world.time][object.river];
                ctxDrawImage(ctx, img, (user.cam.x + object.x) - (img.width / (4 * _scale_object)), (user.cam.y + object.y) - (img.height / (4 * _scale_object)), img.width / (2 * _scale_object), img.height / (2 * _scale_object));
                if (ui.quality) {
                    var m = 2147483648;
                    var a = 1103515245;
                    var c = 12345;
                    var _id = (((a * ((i * 1000) + j)) + c) % m) / m;
                    if (_id < 0.2) {
                        _id = Math.floor(sprite[SPRITE.RIVER_DECO][world.time][object.river].length * (_id * 5));
                        var img = sprite[SPRITE.RIVER_DECO][world.time][object.river][_id];
                        ctxDrawImage(ctx, img, (user.cam.x + object.x) - (img.width / (4 * _scale_object)), (user.cam.y + object.y) - (img.height / (4 * _scale_object)), img.width / (2 * _scale_object), img.height / (2 * _scale_object));
                    } else if (object.current !== 0) {
                        var img = sprite[SPRITE.RIVER_WAVE][world.time];
                        var _wave = (__wave + ((i % 2) * 30)) % 60;
                        ctx.globalAlpha = (_wave < 30) ? (_wave / 30) : (1 - ((_wave - 30) / 30));
                        ctxDrawImage(ctx, img, (user.cam.x + object.x) - (img.width / (4 * _scale_object)), (((user.cam.y + object.y) - (img.height / (4 * _scale_object))) - 30) + _wave, img.width / (2 * _scale_object), img.height / (2 * _scale_object));
                        ctx.globalAlpha = 1;
                    }
                }
            }
        }
    };

    function draw_sand_worm_ground() {
        if ((this.info & 1) === 1)
            this.dig = Math.min(this.dig + delta, 2.2);
        else {
            this.dig = Math.max(this.dig - delta, 0);
            this.groundTimer += delta;
            if (this.groundTimer > 0.1) {
                this.groundTimer = 0;
                var ground = {
                    x: (this.x + (Math.random() * 60)) - 30,
                    y: (this.y + (Math.random() * 60)) - 30,
                    a: 0,
                    r: (Math.random() * 30) + 30
                };
                this.ground.push(ground);
            }
        }
        for (var i = 0; i < this.ground.length; i++) {
            var ground = this.ground[i];
            ctx.save();
            ctx.translate(user.cam.x + ground.x, user.cam.y + ground.y);
            ground.a = Math.min(1, ground.a + (delta / 2));
            var _alpha = ground.a;
            if (_alpha < 0.2)
                _alpha *= 5;
            else if (_alpha > 0.8)
                _alpha = (1 - _alpha) * 5;
            else
                _alpha = 1;
            ctx.globalAlpha = _alpha * 0.8;
            circle(ctx, 0, 0, ground.r);
            fill_path(ctx, SPRITE.SAND_WORM_GROUND[world.time]);
            ctx.restore();
            if (ground.a === 1) {
                this.ground.splice(i, 1);
                i--;
            }
        };
    };

    function draw_sand_worm() {
        var img = undefined;
        var imgHurt = undefined;
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        ctx.rotate(this.angle);
        this.breath.update();
        this.rotate.update();
        if ((this.dig >= 0.1) && (this.dig <= 1.1)) {
            var _alpha = Math.max(0, Math.min(1, this.dig - 0.1));
            if (_alpha < 0.2)
                _alpha *= 5;
            else if (_alpha > 0.8)
                _alpha = (1 - _alpha) * 5;
            else
                _alpha = 1;
            var img = sprite[SPRITE.SAND_WORM1][world.time];
            w = -img.width * this.breath.v;
            h = -img.height * this.breath.v;
            ctx.globalAlpha = _alpha;
            ctxDrawImage(ctx, img, -w / 4, -h / 4, w / 2, h / 2);
            var imgHurt = sprite[SPRITE.HURT_SAND_WORM1];
        }
        if (this.dig >= 0.9) {
            var _alpha = Math.max(0, Math.min(1, this.dig - 0.9));
            if (_alpha < 0.2)
                _alpha *= 5;
            else
                _alpha = 1;
            var img = sprite[SPRITE.SAND_WORM2][world.time];
            w = -img.width * this.breath.v;
            h = -img.height * this.breath.v;
            ctx.globalAlpha = _alpha;
            ctxDrawImage(ctx, img, -w / 4, -h / 4, w / 2, h / 2);
            var imgHurt = sprite[SPRITE.HURT_SAND_WORM2];
        }
        if ((this.action & STATE.HURT) && (imgHurt !== undefined)) {
            if (this.hit.update() && (this.hit.o == false))
                this.action -= STATE.HURT;

            ctx.globalAlpha = (0.6 - this.hit.v) * _alpha;
            w = -imgHurt.width * this.breath.v;
            h = -imgHurt.height * this.breath.v;
            ctxDrawImage(ctx, imgHurt, -w / 4, -h / 4, w / 2, h / 2);
        }
        ctx.globalAlpha = 1;
        ctx.restore();
    };

    function draw_vulture() {
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        ctx.rotate(this.angle);
        var dist = Utils.dist(this, this.r);
        if (dist > 350)
            this.scale = Math.min(this.scale + (delta / 2), 1.8);
        else
            this.scale = Math.max(this.scale - delta, 1);
        this.breath.update();
        this.rotate.update();
        if (dist < 350)
            this._alpha = Math.max(0, this._alpha - (delta * 2.2));
        else
            this._alpha = Math.min(1, this._alpha + (delta * 2.2));
        img = sprite[SPRITE.VULTURE_GROUND_ATTACK][world.time];
        w = (-img.width * this.breath.v) * this.scale;
        h = (-img.height * this.breath.v) * this.scale;
        ctx.globalAlpha = 1 - this._alpha;
        ctxDrawImage(ctx, img, -w / 4, -h / 4, w / 2, h / 2);
        img = sprite[SPRITE.VULTURE_ATTACK][world.time];
        w = (-img.width * this.breath.v) * this.scale;
        h = (-img.height * this.breath.v) * this.scale;
        ctx.globalAlpha = this._alpha;
        ctxDrawImage(ctx, img, -w / 4, -h / 4, w / 2, h / 2);
        if (this.action & STATE.HURT) {
            if (this.hit.update() && (this.hit.o == false))
                this.action -= STATE.HURT;

            ctx.globalAlpha = (0.6 - this.hit.v) * (1 - this._alpha);
            var img = sprite[SPRITE.HURT_VULTURE_GROUND];
            w = (-img.width * this.breath.v) * this.scale;
            h = (-img.height * this.breath.v) * this.scale;
            ctxDrawImage(ctx, img, -w / 4, -h / 4, w / 2, h / 2);
            ctx.globalAlpha = (0.6 - this.hit.v) * this._alpha;
            var img = sprite[SPRITE.HURT_VULTURE];
            w = (-img.width * this.breath.v) * this.scale;
            h = (-img.height * this.breath.v) * this.scale;
            ctxDrawImage(ctx, img, -w / 4, -h / 4, w / 2, h / 2);
            ctx.globalAlpha = 1;
        }
        img = sprite[SPRITE.VULTURE_WING_LEFT_ATTACK][world.time];
        w = (-img.width * this.breath.v) * this.scale;
        h = (-img.height * this.breath.v) * this.scale;
        ctx.save();
        ctx.translate(-40 * scale, 80 * scale);
        ctx.rotate(this.rotate.v);
        ctx.globalAlpha = this._alpha;
        ctxDrawImage(ctx, img, (-w * scale) / 4, (-h * scale) / 4, w / 2, h / 2);
        if (this.action & STATE.HURT) {
            ctx.globalAlpha = (0.6 - this.hit.v) * this._alpha;
            var img = sprite[SPRITE.HURT_VULTURE_WING_LEFT];
            ctxDrawImage(ctx, img, (-w * scale) / 4, (-h * scale) / 4, w / 2, h / 2);
            ctx.globalAlpha = 1;
        }
        ctx.restore();
        img = sprite[SPRITE.VULTURE_WING_RIGHT_ATTACK][world.time];
        ctx.save();
        ctx.translate(40 * scale, 80 * scale);
        ctx.rotate(-this.rotate.v);
        ctx.globalAlpha = this._alpha;
        ctxDrawImage(ctx, img, (-w * scale) / 4, (-h * scale) / 4, w / 2, h / 2);
        if (this.action & STATE.HURT) {
            ctx.globalAlpha = (0.6 - this.hit.v) * this._alpha;
            var img = sprite[SPRITE.HURT_VULTURE_WING_RIGHT];
            ctxDrawImage(ctx, img, (-w * scale) / 4, (-h * scale) / 4, w / 2, h / 2);
            ctx.globalAlpha = 1;
        }
        ctx.globalAlpha = 1;
        ctx.restore();
        ctx.restore();
    };

    function draw_hawk() {
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        ctx.rotate(this.angle);
        var dist = Utils.dist(this, this.r);
        if (dist > 350)
            this.scale = Math.min(this.scale + (delta / 2), 1.8);
        else
            this.scale = Math.max(this.scale - delta, 1);
        this.breath.update();
        this.rotate.update();
        if (dist < 350)
            this._alpha = Math.max(0, this._alpha - (delta * 2.2));
        else
            this._alpha = Math.min(1, this._alpha + (delta * 2.2));
        if ((this.info & 1) === 0)
            img = sprite[SPRITE.HAWK_GROUND][world.time];
        else
            img = sprite[SPRITE.HAWK_GROUND_ATTACK][world.time];
        w = (-img.width * this.breath.v) * this.scale;
        h = (-img.height * this.breath.v) * this.scale;
        ctx.globalAlpha = 1 - this._alpha;
        ctxDrawImage(ctx, img, -w / 4, -h / 4, w / 2, h / 2);
        if ((this.info & 1) === 0)
            img = sprite[SPRITE.HAWK][world.time];
        else
            img = sprite[SPRITE.HAWK_ATTACK][world.time];
        w = (-img.width * this.breath.v) * this.scale;
        h = (-img.height * this.breath.v) * this.scale;
        ctx.globalAlpha = this._alpha;
        ctxDrawImage(ctx, img, -w / 4, -h / 4, w / 2, h / 2);
        if (this.action & STATE.HURT) {
            if (this.hit.update() && (this.hit.o == false))
                this.action -= STATE.HURT;

            ctx.globalAlpha = (0.6 - this.hit.v) * (1 - this._alpha);
            var img = sprite[SPRITE.HURT_HAWK_GROUND];
            w = (-img.width * this.breath.v) * this.scale;
            h = (-img.height * this.breath.v) * this.scale;
            ctxDrawImage(ctx, img, -w / 4, -h / 4, w / 2, h / 2);
            ctx.globalAlpha = (0.6 - this.hit.v) * this._alpha;
            var img = sprite[SPRITE.HURT_HAWK];
            w = (-img.width * this.breath.v) * this.scale;
            h = (-img.height * this.breath.v) * this.scale;
            ctxDrawImage(ctx, img, -w / 4, -h / 4, w / 2, h / 2);
            ctx.globalAlpha = 1;
        }
        if ((this.info & 1) === 0)
            img = sprite[SPRITE.HAWK_WING_LEFT][world.time];
        else
            img = sprite[SPRITE.HAWK_WING_LEFT_ATTACK][world.time];
        w = (-img.width * this.breath.v) * this.scale;
        h = (-img.height * this.breath.v) * this.scale;
        ctx.save();
        ctx.translate(-20 * scale, 0 * scale);
        ctx.rotate(this.rotate.v);
        ctx.globalAlpha = this._alpha;
        ctxDrawImage(ctx, img, (-w * scale) / 4, (-h * scale) / 4, w / 2, h / 2);
        if (this.action & STATE.HURT) {
            ctx.globalAlpha = (0.6 - this.hit.v) * this._alpha;
            var img = sprite[SPRITE.HURT_HAWK_WING_LEFT];
            ctxDrawImage(ctx, img, (-w * scale) / 4, (-h * scale) / 4, w / 2, h / 2);
            ctx.globalAlpha = 1;
        }
        ctx.restore();
        if ((this.info & 1) === 0)
            img = sprite[SPRITE.HAWK_WING_RIGHT][world.time];
        else
            img = sprite[SPRITE.HAWK_WING_RIGHT_ATTACK][world.time];
        ctx.save();
        ctx.translate(20 * scale, 0 * scale);
        ctx.rotate(-this.rotate.v);
        ctx.globalAlpha = this._alpha;
        ctxDrawImage(ctx, img, (-w * scale) / 4, (-h * scale) / 4, w / 2, h / 2);
        if (this.action & STATE.HURT) {
            ctx.globalAlpha = (0.6 - this.hit.v) * this._alpha;
            var img = sprite[SPRITE.HURT_HAWK_WING_RIGHT];
            ctxDrawImage(ctx, img, (-w * scale) / 4, (-h * scale) / 4, w / 2, h / 2);
            ctx.globalAlpha = 1;
        }
        ctx.globalAlpha = 1;
        ctx.restore();
        ctx.restore();
    };

    function draw_baby_lava() {
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        ctx.rotate(this.angle);
        if (Utils.dist(this, this.r) > 300)
            this.scale = Math.min(this.scale + (delta / 2), 1.8);
        else
            this.scale = Math.max(this.scale - delta, 1);
        this.breath.update();
        this.rotate.update();
        if (this.info === 0)
            img = sprite[SPRITE.BABY_LAVA][world.time];
        else
            img = sprite[SPRITE.BABY_LAVA_ATTACK][world.time];
        w = (-img.width * this.breath.v) * this.scale;
        h = (-img.height * this.breath.v) * this.scale;
        ctxDrawImage(ctx, img, -w / 4, -h / 4, w / 2, h / 2);
        if (this.action & STATE.HURT) {
            if (this.hit.update() && (this.hit.o == false))
                this.action -= STATE.HURT;

            ctx.globalAlpha = 0.6 - this.hit.v;
            var img = sprite[SPRITE.HURT_BABY_LAVA];
            ctxDrawImage(ctx, img, -w / 4, -h / 4, w / 2, h / 2);
            ctx.globalAlpha = 1;
        }
        if (this.info === 0)
            img = sprite[SPRITE.BABY_LAVA_WING_LEFT][world.time];
        else
            img = sprite[SPRITE.BABY_LAVA_WING_LEFT_ATTACK][world.time];
        w = (-img.width * this.breath.v) * this.scale;
        h = (-img.height * this.breath.v) * this.scale;
        ctx.save();
        ctx.translate(-40 * scale, 10 * scale);
        ctx.rotate(this.rotate.v);
        ctxDrawImage(ctx, img, (-w * scale) / 4, (-h * scale) / 4, w / 2, h / 2);
        if (this.action & STATE.HURT) {
            ctx.globalAlpha = 0.6 - this.hit.v;
            var img = sprite[SPRITE.HURT_BABY_LAVA_WING_LEFT];
            ctxDrawImage(ctx, img, (-w * scale) / 4, (-h * scale) / 4, w / 2, h / 2);
            ctx.globalAlpha = 1;
        }
        ctx.restore();
        if (this.info === 0)
            img = sprite[SPRITE.BABY_LAVA_WING_RIGHT][world.time];
        else
            img = sprite[SPRITE.BABY_LAVA_WING_RIGHT_ATTACK][world.time];
        ctx.save();
        ctx.translate(40 * scale, 10 * scale);
        ctx.rotate(-this.rotate.v);
        ctxDrawImage(ctx, img, (-w * scale) / 4, (-h * scale) / 4, w / 2, h / 2);
        if (this.action & STATE.HURT) {
            ctx.globalAlpha = 0.6 - this.hit.v;
            var img = sprite[SPRITE.HURT_BABY_LAVA_WING_RIGHT];
            ctxDrawImage(ctx, img, (-w * scale) / 4, (-h * scale) / 4, w / 2, h / 2);
            ctx.globalAlpha = 1;
        }
        ctx.restore();
        ctx.restore();
    };

    function draw_baby_dragon() {
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        ctx.rotate(this.angle);
        if (Utils.dist(this, this.r) > 300)
            this.scale = Math.min(this.scale + (delta / 2), 1.8);
        else
            this.scale = Math.max(this.scale - delta, 1);
        this.breath.update();
        this.rotate.update();
        if (this.info === 0)
            img = sprite[SPRITE.BABY_DRAGON][world.time];
        else
            img = sprite[SPRITE.BABY_DRAGON_ATTACK][world.time];
        w = (-img.width * this.breath.v) * this.scale;
        h = (-img.height * this.breath.v) * this.scale;
        ctxDrawImage(ctx, img, -w / 4, -h / 4, w / 2, h / 2);
        if (this.action & STATE.HURT) {
            if (this.hit.update() && (this.hit.o == false))
                this.action -= STATE.HURT;

            ctx.globalAlpha = 0.6 - this.hit.v;
            var img = sprite[SPRITE.HURT_BABY_DRAGON];
            ctxDrawImage(ctx, img, -w / 4, -h / 4, w / 2, h / 2);
            ctx.globalAlpha = 1;
        }
        if (this.info === 0)
            img = sprite[SPRITE.BABY_DRAGON_WING_LEFT][world.time];
        else
            img = sprite[SPRITE.BABY_DRAGON_WING_LEFT_ATTACK][world.time];
        w = (-img.width * this.breath.v) * this.scale;
        h = (-img.height * this.breath.v) * this.scale;
        ctx.save();
        ctx.translate(-40 * scale, 10 * scale);
        ctx.rotate(this.rotate.v);
        ctxDrawImage(ctx, img, (-w * scale) / 4, (-h * scale) / 4, w / 2, h / 2);
        if (this.action & STATE.HURT) {
            ctx.globalAlpha = 0.6 - this.hit.v;
            var img = sprite[SPRITE.HURT_BABY_DRAGON_WING_LEFT];
            ctxDrawImage(ctx, img, (-w * scale) / 4, (-h * scale) / 4, w / 2, h / 2);
            ctx.globalAlpha = 1;
        }
        ctx.restore();
        if (this.info === 0)
            img = sprite[SPRITE.BABY_DRAGON_WING_RIGHT][world.time];
        else
            img = sprite[SPRITE.BABY_DRAGON_WING_RIGHT_ATTACK][world.time];
        ctx.save();
        ctx.translate(40 * scale, 10 * scale);
        ctx.rotate(-this.rotate.v);
        ctxDrawImage(ctx, img, (-w * scale) / 4, (-h * scale) / 4, w / 2, h / 2);
        if (this.action & STATE.HURT) {
            ctx.globalAlpha = 0.6 - this.hit.v;
            var img = sprite[SPRITE.HURT_BABY_DRAGON_WING_RIGHT];
            ctxDrawImage(ctx, img, (-w * scale) / 4, (-h * scale) / 4, w / 2, h / 2);
            ctx.globalAlpha = 1;
        }
        ctx.restore();
        ctx.restore();
    };

    function draw_lava_dragon() {
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        ctx.rotate(this.angle);
        if (Utils.dist(this, this.r) > 300)
            this.scale = Math.min(this.scale + (delta / 2), 1.8);
        else
            this.scale = Math.max(this.scale - delta, 1);
        this.breath.update();
        this.rotate.update();
        img = sprite[SPRITE.LAVA_DRAGON][world.time];
        w = (-img.width * this.breath.v) * this.scale;
        h = (-img.height * this.breath.v) * this.scale;
        ctxDrawImage(ctx, img, -w / 4, -h / 4, w / 2, h / 2);
        if (this.action & STATE.HURT) {
            if (this.hit.update() && (this.hit.o == false))
                this.action -= STATE.HURT;

            ctx.globalAlpha = 0.6 - this.hit.v;
            var img = sprite[SPRITE.HURT_LAVA_DRAGON];
            ctxDrawImage(ctx, img, -w / 4, -h / 4, w / 2, h / 2);
            ctx.globalAlpha = 1;
        }
        img = sprite[SPRITE.LAVA_WING_LEFT][world.time];
        w = (-img.width * this.breath.v) * this.scale;
        h = (-img.height * this.breath.v) * this.scale;
        ctx.save();
        ctx.translate(-60 * scale, 20 * scale);
        ctx.rotate(this.rotate.v);
        ctxDrawImage(ctx, img, (-w * scale) / 4, (-h * scale) / 4, w / 2, h / 2);
        if (this.action & STATE.HURT) {
            ctx.globalAlpha = 0.6 - this.hit.v;
            var img = sprite[SPRITE.HURT_LAVA_WING_LEFT];
            ctxDrawImage(ctx, img, (-w * scale) / 4, (-h * scale) / 4, w / 2, h / 2);
            ctx.globalAlpha = 1;
        }
        ctx.restore();
        img = sprite[SPRITE.LAVA_WING_RIGHT][world.time];
        ctx.save();
        ctx.translate(60 * scale, 20 * scale);
        ctx.rotate(-this.rotate.v);
        ctxDrawImage(ctx, img, (-w * scale) / 4, (-h * scale) / 4, w / 2, h / 2);
        if (this.action & STATE.HURT) {
            ctx.globalAlpha = 0.6 - this.hit.v;
            var img = sprite[SPRITE.HURT_LAVA_WING_RIGHT];
            ctxDrawImage(ctx, img, (-w * scale) / 4, (-h * scale) / 4, w / 2, h / 2);
            ctx.globalAlpha = 1;
        }
        ctx.restore();
        ctx.restore();
    };

    function draw_dragon() {
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        ctx.rotate(this.angle);
        if (Utils.dist(this, this.r) > 300)
            this.scale = Math.min(this.scale + (delta / 2), 1.8);
        else
            this.scale = Math.max(this.scale - delta, 1);
        this.breath.update();
        this.rotate.update();
        img = sprite[SPRITE.DRAGON][world.time];
        w = (-img.width * this.breath.v) * this.scale;
        h = (-img.height * this.breath.v) * this.scale;
        ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
        if (this.action & STATE.HURT) {
            if (this.hit.update() && (this.hit.o == false))
                this.action -= STATE.HURT;

            ctx.globalAlpha = 0.6 - this.hit.v;
            var img = sprite[SPRITE.HURT_DRAGON];
            ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
            ctx.globalAlpha = 1;
        }
        img = sprite[SPRITE.WING_LEFT][world.time];
        w = (-img.width * this.breath.v) * this.scale;
        h = (-img.height * this.breath.v) * this.scale;
        ctx.save();
        ctx.translate(-30 * scale, 70 * scale);
        ctx.rotate(this.rotate.v);
        ctxDrawImage(ctx, img, -10 * scale, -40 * scale, w, h);
        if (this.action & STATE.HURT) {
            ctx.globalAlpha = 0.6 - this.hit.v;
            var img = sprite[SPRITE.HURT_WING_LEFT];
            ctxDrawImage(ctx, img, -10 * scale, -40 * scale, w, h);
            ctx.globalAlpha = 1;
        }
        ctx.restore();
        img = sprite[SPRITE.WING_RIGHT][world.time];
        ctx.save();
        ctx.translate(30 * scale, 70 * scale);
        ctx.rotate(-this.rotate.v);
        ctxDrawImage(ctx, img, (10 * scale) - w, -40 * scale, w, h);
        if (this.action & STATE.HURT) {
            ctx.globalAlpha = 0.6 - this.hit.v;
            var img = sprite[SPRITE.HURT_WING_RIGHT];
            ctxDrawImage(ctx, img, (10 * scale) - w, -40 * scale, w, h);
            ctx.globalAlpha = 1;
        }
        ctx.restore();
        ctx.restore();
    };

    function draw_crate(id, _hurt) {
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        ctx.rotate(this.angle);
        if (id === SPRITE.GIFT) {
            id = SPRITE.CRATE;
            this.info = 36;
        }
        img = sprite[id][this.info][world.time];
        w = -img.width / 2;
        h = -img.height / 2;
        ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
        if (this.action & STATE.HURT) {
            if (this.hit.update() && (this.hit.o == false))
                this.action -= STATE.HURT;

            ctx.globalAlpha = 0.6 - this.hit.v;
            var hurt = get_image_effect(this.info, img, __EFFECT_BOX__);
            ctxDrawImage(ctx, hurt, -w / 2, -h / 2, w, h);
            ctx.globalAlpha = 1;
        }
        ctx.restore();
    };

    function draw_simple_mobs_2(id, hurt) {
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        ctx.rotate(this.angle);
        img = sprite[id][world.time];
        w = -img.width;
        h = -img.height;
        ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
        if (this.action & STATE.HURT) {
            if (this.hit.update() && (this.hit.o == false))
                this.action -= STATE.HURT;

            ctx.globalAlpha = 0.6 - this.hit.v;
            var img = sprite[hurt];
            ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
            ctx.globalAlpha = 1;
        }
        ctx.restore();
    };

    function draw_baby_mammoth() {
        this.breath.update();
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        ctx.rotate(this.angle);
        if (this.info === 0)
            img = sprite[SPRITE.BABY_MAMMOTH][world.time];
        else
            img = sprite[SPRITE.BABY_MAMMOTH_ATTACK][world.time];
        w = -img.width * this.breath.v;
        h = -img.height * this.breath.v;
        ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
        if (this.action & STATE.HURT) {
            if (this.hit.update() && (this.hit.o == false))
                this.action -= STATE.HURT;

            ctx.globalAlpha = 0.6 - this.hit.v;
            var img = sprite[SPRITE.HURT_BABY_MAMMOTH];
            ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
            ctx.globalAlpha = 1;
        }
        ctx.restore();
    };

    function draw_boar() {
        this.breath.update();
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        ctx.rotate(this.angle);
        if (this.info === 0)
            img = sprite[SPRITE.BOAR][world.time];
        else
            img = sprite[SPRITE.BOAR_ATTACK][world.time];
        w = -img.width * this.breath.v;
        h = -img.height * this.breath.v;
        ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
        if (this.action & STATE.HURT) {
            if (this.hit.update() && (this.hit.o == false))
                this.action -= STATE.HURT;

            ctx.globalAlpha = 0.6 - this.hit.v;
            var img = sprite[SPRITE.HURT_BOAR];
            ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
            ctx.globalAlpha = 1;
        }
        ctx.restore();
    };

    function draw_crab_boss() {
        var pi2 = Math.PI / 2;
        var pi4 = Math.PI / 4;
        this.breath.update();
        this.breathl.update();
        this.breathr.update();
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        ctx.rotate(this.angle);
        if (this.info === 0)
            img = sprite[SPRITE.CRAB_BOSS][world.time];
        else
            img = sprite[SPRITE.CRAB_BOSS_ATTACK][world.time];
        w = -img.width * this.breath.v;
        h = -img.height * this.breath.v;
        ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
        if (this.action & STATE.HURT) {
            if (this.hit.update() && (this.hit.o == false))
                this.action -= STATE.HURT;

            ctx.globalAlpha = 0.6 - this.hit.v;
            var img = sprite[SPRITE.HURT_CRAB_BOSS];
            ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
            ctx.globalAlpha = 1;
        }
        if (this.action & STATE.COLD) {
            if (this.heal.update() && (this.heal.o == false))
                this.action -= STATE.COLD;

            ctx.globalAlpha = 0.6 - this.heal.v;
            var img = sprite[SPRITE.HEAL_CRAB_BOSS];
            ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
            ctx.globalAlpha = 1;
        }
        ctx.restore();
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        ctx.rotate(this.angle + pi4);
        ctx.translate(100, 0);
        ctx.rotate(pi2);
        if (this.info === 0)
            img = sprite[SPRITE.CRAB_BOSS_CLAW_LEFT][world.time];
        else
            img = sprite[SPRITE.CRAB_BOSS_CLAW_LEFT_ATTACK][world.time];
        w = -img.width * this.breathl.v;
        h = -img.height * this.breathl.v;
        ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
        if (this.action & STATE.HURT) {
            ctx.globalAlpha = 0.6 - this.hit.v;
            var img = sprite[SPRITE.HURT_CRAB_BOSS_CLAW_LEFT];
            ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
            ctx.globalAlpha = 1;
        }
        if (this.action & STATE.COLD) {
            ctx.globalAlpha = 0.6 - this.heal.v;
            var img = sprite[SPRITE.HEAL_CRAB_BOSS_CLAW_LEFT];
            ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
            ctx.globalAlpha = 1;
        }
        ctx.restore();
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        ctx.rotate((this.angle + pi2) + pi4);
        ctx.translate(100, 0);
        ctx.rotate(pi2);
        if (this.info === 0)
            img = sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT][world.time];
        else
            img = sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT_ATTACK][world.time];
        w = -img.width * this.breathr.v;
        h = -img.height * this.breathr.v;
        ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
        if (this.action & STATE.HURT) {
            ctx.globalAlpha = 0.6 - this.hit.v;
            var img = sprite[SPRITE.HURT_CRAB_BOSS_CLAW_RIGHT];
            ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
            ctx.globalAlpha = 1;
        }
        if (this.action & STATE.COLD) {
            ctx.globalAlpha = 0.6 - this.heal.v;
            var img = sprite[SPRITE.HEAL_CRAB_BOSS_CLAW_RIGHT];
            ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
            ctx.globalAlpha = 1;
        }
        ctx.restore();
    };

    function draw_crab() {
        var pi2 = Math.PI / 2;
        var pi4 = Math.PI / 4;
        this.breath.update();
        this.breathl.update();
        this.breathr.update();
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        ctx.rotate(this.angle);
        if (this.info === 0)
            img = sprite[SPRITE.CRAB][world.time];
        else
            img = sprite[SPRITE.CRAB_ATTACK][world.time];
        w = -img.width * this.breath.v;
        h = -img.height * this.breath.v;
        ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
        if (this.action & STATE.HURT) {
            if (this.hit.update() && (this.hit.o == false))
                this.action -= STATE.HURT;

            ctx.globalAlpha = 0.6 - this.hit.v;
            var img = sprite[SPRITE.HURT_CRAB];
            ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
            ctx.globalAlpha = 1;
        }
        if (this.action & STATE.COLD) {
            if (this.heal.update() && (this.heal.o == false))
                this.action -= STATE.COLD;

            ctx.globalAlpha = 0.6 - this.heal.v;
            var img = sprite[SPRITE.HEAL_CRAB];
            ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
            ctx.globalAlpha = 1;
        }
        ctx.restore();
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        ctx.rotate(this.angle + pi4);
        ctx.translate(55, 0);
        ctx.rotate(pi2);
        if (this.info === 0)
            img = sprite[SPRITE.CRAB_CLAW_LEFT][world.time];
        else
            img = sprite[SPRITE.CRAB_CLAW_LEFT_ATTACK][world.time];
        w = -img.width * this.breathl.v;
        h = -img.height * this.breathl.v;
        ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
        if (this.action & STATE.HURT) {
            ctx.globalAlpha = 0.6 - this.hit.v;
            var img = sprite[SPRITE.HURT_CRAB_CLAW_LEFT];
            ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
            ctx.globalAlpha = 1;
        }
        if (this.action & STATE.COLD) {
            ctx.globalAlpha = 0.6 - this.heal.v;
            var img = sprite[SPRITE.HEAL_CRAB_CLAW_LEFT];
            ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
            ctx.globalAlpha = 1;
        }
        ctx.restore();
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        ctx.rotate((this.angle + pi2) + pi4);
        ctx.translate(55, 0);
        ctx.rotate(pi2);
        if (this.info === 0)
            img = sprite[SPRITE.CRAB_CLAW_RIGHT][world.time];
        else
            img = sprite[SPRITE.CRAB_CLAW_RIGHT_ATTACK][world.time];
        w = -img.width * this.breathr.v;
        h = -img.height * this.breathr.v;
        ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
        if (this.action & STATE.HURT) {
            ctx.globalAlpha = 0.6 - this.hit.v;
            var img = sprite[SPRITE.HURT_CRAB_CLAW_RIGHT];
            ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
            ctx.globalAlpha = 1;
        }
        if (this.action & STATE.COLD) {
            ctx.globalAlpha = 0.6 - this.heal.v;
            var img = sprite[SPRITE.HEAL_CRAB_CLAW_RIGHT];
            ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
            ctx.globalAlpha = 1;
        }
        ctx.restore();
    };

    function draw_spell() {
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        ctx.rotate(this.angle);
        this.born = Math.min(1, this.born + (delta * 2));

        console.log(this)
        //console.log(Utils.dist(this.final , this));
        //if(Utils.dist(this.r, this.final) <= 50 && this.dispose.v > 0) {
        //	this.dispose.update();
        //}
        //ctx.globalAlpha = Math.min(1, Math.max(0, Utils.dist(this, this.r) / 200)) * this.born;
        //ctx.globalAlpha = this.dispose.v;

    // ctx.globalAlpha = Math.min(1, Math.max(0, Utils.dist(this, this.final) / 210)) * this.born;
        this.breath.update();
        img = sprite[SPRITE.SPELL][world.time][this.spell];
        if (this.spell < 2) {
            w = -img.width * this.breath.v;
            h = -img.height * this.breath.v;
        } else {
            if (this.fly === 0) {
                w = -img.width;
                h = -img.height;
            } else {
                w = -img.width * 1.35;
                h = -img.height * 1.35;
            }
        }
        ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
        ctx.globalAlpha = 1;
        ctx.restore();
    };

    function draw_simple_mobs(id, hurt) {
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        ctx.rotate(this.angle);
        this.breath.update();
        img = sprite[id][world.time];
        w = -img.width * this.breath.v;
        h = -img.height * this.breath.v;
        ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
        if (this.action & STATE.HURT) {
            if (this.hit.update() && (this.hit.o == false))
                this.action -= STATE.HURT;

            ctx.globalAlpha = 0.6 - this.hit.v;
            var img = sprite[hurt];
            ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
            ctx.globalAlpha = 1;
        }
        ctx.restore();
    };

    function draw_simple_mobs_hd(id, hurt) {
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        ctx.rotate(this.angle);
        this.breath.update();
        img = sprite[id][world.time];
        w = -img.width * this.breath.v;
        h = -img.height * this.breath.v;
        ctxDrawImage(ctx, img, -w / 4, -h / 4, w / 2, h / 2);
        if (this.action & STATE.HURT) {
            if (this.hit.update() && (this.hit.o == false))
                this.action -= STATE.HURT;

            ctx.globalAlpha = 0.6 - this.hit.v;
            var img = sprite[hurt];
            ctxDrawImage(ctx, img, -w / 4, -h / 4, w / 2, h / 2);
            ctx.globalAlpha = 1;
        }
        ctx.restore();
    };

    function draw_breath_2(id, x, y) {
        ctx.save();
        ctx.translate(user.cam.x + x, user.cam.y + y);
        ctx.rotate(this.angle);
        ctx.translate(this.x - x, this.y - y);
        this.breath.update();
        img = sprite[id][world.time];
        w = -img.width * this.breath.v;
        h = -img.height * this.breath.v;
        ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
        ctx.restore();
    };

    function draw_breath(id) {
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        ctx.rotate(this.angle);
        this.breath.update();
        img = sprite[id][world.time];
        w = -img.width * this.breath.v;
        h = -img.height * this.breath.v;
        ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
        ctx.restore();
    };

    function draw_thornbush() {
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        if (this.hit.update) {
            if (this.hit.anim.update() && (this.hit.anim.o == false))
                this.hit.update = false;

            var v = (((1 - this.hit.anim.v) * delta) * 600) * scale;
            var x = Math.cos(this.hit.angle - this.angle) * v;
            var y = Math.sin(this.hit.angle - this.angle) * v;
        } else {
            var x = 0;
            var y = 0;
        };
        var amount = this.info & 15;
        if ((this.info === 10) || (amount === 0)) {
            ctx.rotate(this.angle);
            this.ground.update();
            if (this.info & 16)
                var img = sprite[SPRITE.PLANT_THORNBUSH_DRIED][world.time];
            else
                var img = sprite[SPRITE.PLANT_THORNBUSH][world.time];
            var w = -img.width * this.ground.v;
            var h = -img.height * this.ground.v;
            ctxDrawImage(ctx, img, (-w / 2) + x, (-h / 2) + y, w, h);
        } else {
            if (this.info & 16)
                var img = sprite[SPRITE.DRIED_THORNBUSH][world.time];
            else
                var img = sprite[SPRITE.THORNBUSH][world.time];
            ctx.translate(0, img.height / 2);
            ctxDrawImage(ctx, img, x - (img.width / 2), -img.height + y);
        }
        ctx.restore();
    };

    function draw_garlic() {
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        if (this.hit.update) {
            if (this.hit.anim.update() && (this.hit.anim.o == false))
                this.hit.update = false;

            var v = (((1 - this.hit.anim.v) * delta) * 600) * scale;
            var x = Math.cos(this.hit.angle - this.angle) * v;
            var y = Math.sin(this.hit.angle - this.angle) * v;
        } else {
            var x = 0;
            var y = 0;
        };
        var amount = this.info & 15;
        if ((this.info === 10) || (amount === 0)) {
            ctx.rotate(this.angle);
            this.ground.update();
            if (this.info & 16)
                var img = sprite[SPRITE.PLANT_GARLIC_DRIED][world.time];
            else
                var img = sprite[SPRITE.PLANT_GARLIC][world.time];
            var w = -img.width * this.ground.v;
            var h = -img.height * this.ground.v;
            ctxDrawImage(ctx, img, (-w / 2) + x, (-h / 2) + y, w, h);
        } else {
            if (this.info & 16)
                var img = sprite[SPRITE.DRIED_GARLIC][world.time];
            else
                var img = sprite[SPRITE.GARLIC][world.time];
            ctx.translate(0, img.height / 2);
            ctxDrawImage(ctx, img, x - (img.width / 2), -img.height + y);
        }
        ctx.restore();
    };

    function draw_aloe_vera() {
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        if (this.hit.update) {
            if (this.hit.anim.update() && (this.hit.anim.o == false))
                this.hit.update = false;

            var v = (((1 - this.hit.anim.v) * delta) * 600) * scale;
            var x = Math.cos(this.hit.angle - this.angle) * v;
            var y = Math.sin(this.hit.angle - this.angle) * v;
        } else {
            var x = 0;
            var y = 0;
        };
        var amount = this.info & 15;
        if ((this.info === 10) || (amount === 0)) {
            ctx.rotate(this.angle);
            this.ground.update();
            if (this.info & 16)
                var img = sprite[SPRITE.PLANT_ALOE_VERA_DRIED][world.time];
            else
                var img = sprite[SPRITE.PLANT_ALOE_VERA][world.time];
            var w = -img.width * this.ground.v;
            var h = -img.height * this.ground.v;
            ctxDrawImage(ctx, img, (-w / 2) + x, (-h / 2) + y, w, h);
        } else {
            if (this.info & 16)
                var img = sprite[SPRITE.DRIED_ALOE_VERA][world.time];
            else
                var img = sprite[SPRITE.ALOE_VERA_GROWN][world.time];
            ctx.translate(0, img.height / 2);
            ctxDrawImage(ctx, img, x - (img.width / 2), -img.height + y);
        }
        ctx.restore();
    };

    function draw_watermelon() {
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        if (this.hit.update) {
            if (this.hit.anim.update() && (this.hit.anim.o == false))
                this.hit.update = false;

            var v = (((1 - this.hit.anim.v) * delta) * 600) * scale;
            var x = Math.cos(this.hit.angle - this.angle) * v;
            var y = Math.sin(this.hit.angle - this.angle) * v;
        } else {
            var x = 0;
            var y = 0;
        };
        var amount = this.info & 15;
        if ((this.info === 10) || (amount === 0)) {
            ctx.rotate(this.angle);
            this.ground.update();
            if (this.info & 16)
                var img = sprite[SPRITE.PLANT_WATERMELON_DRIED][world.time];
            else
                var img = sprite[SPRITE.PLANT_WATERMELON][world.time];
            var w = -img.width * this.ground.v;
            var h = -img.height * this.ground.v;
            ctxDrawImage(ctx, img, (-w / 2) + x, (-h / 2) + y, w, h);
        } else {
            if (this.info & 16)
                var img = sprite[SPRITE.DRIED_WATERMELON][world.time];
            else
                var img = sprite[SPRITE.WATERMELON][world.time];
            ctx.translate(0, img.height / 2);
            ctxDrawImage(ctx, img, x - (img.width / 2), -img.height + y);
        }
        ctx.restore();
    };

    function draw_carrot() {
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        if (this.hit.update) {
            if (this.hit.anim.update() && (this.hit.anim.o == false))
                this.hit.update = false;

            var v = (((1 - this.hit.anim.v) * delta) * 600) * scale;
            var x = Math.cos(this.hit.angle - this.angle) * v;
            var y = Math.sin(this.hit.angle - this.angle) * v;
        } else {
            var x = 0;
            var y = 0;
        };
        var amount = this.info & 15;
        if ((this.info === 10) || (amount === 0)) {
            ctx.rotate(this.angle);
            this.ground.update();
            if (this.info & 16)
                var img = sprite[SPRITE.PLANT_CARROT_DRIED][world.time];
            else
                var img = sprite[SPRITE.PLANT_CARROT][world.time];
            var w = -img.width * this.ground.v;
            var h = -img.height * this.ground.v;
            ctxDrawImage(ctx, img, (-w / 2) + x, (-h / 2) + y, w, h);
        } else {
            if (this.info & 16)
                var img = sprite[SPRITE.DRIED_CARROT][world.time];
            else
                var img = sprite[SPRITE.CARROT][world.time];
            ctx.translate(0, img.height / 2);
            ctxDrawImage(ctx, img, x - (img.width / 2), -img.height + y);
        }
        ctx.restore();
    };

    function draw_pumpkin() {
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        if (this.hit.update) {
            if (this.hit.anim.update() && (this.hit.anim.o == false))
                this.hit.update = false;

            var v = (((1 - this.hit.anim.v) * delta) * 600) * scale;
            var x = Math.cos(this.hit.angle - this.angle) * v;
            var y = Math.sin(this.hit.angle - this.angle) * v;
        } else {
            var x = 0;
            var y = 0;
        };
        var amount = this.info & 15;
        if ((this.info === 10) || (amount === 0)) {
            ctx.rotate(this.angle);
            this.ground.update();
            if (this.info & 16)
                var img = sprite[SPRITE.PLANT_PUMPKIN_DRIED][world.time];
            else
                var img = sprite[SPRITE.PLANT_PUMPKIN][world.time];
            var w = -img.width * this.ground.v;
            var h = -img.height * this.ground.v;
            ctxDrawImage(ctx, img, (-w / 2) + x, (-h / 2) + y, w, h);
        } else {
            if (this.info & 16)
                var img = sprite[SPRITE.DRIED_PUMPKIN][world.time];
            else
                var img = sprite[SPRITE.PUMPKIN][world.time];
            ctx.translate(0, img.height / 2);
            ctxDrawImage(ctx, img, x - (img.width / 2), -img.height + y);
        }
        ctx.restore();
    };

    function draw_wheat() {
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        if (this.hit.update) {
            if (this.hit.anim.update() && (this.hit.anim.o == false))
                this.hit.update = false;

            var v = (((1 - this.hit.anim.v) * delta) * 600) * scale;
            var x = Math.cos(this.hit.angle - this.angle) * v;
            var y = Math.sin(this.hit.angle - this.angle) * v;
        } else {
            var x = 0;
            var y = 0;
        }; 
        // <- this.info & 15 = количество томато хуйни
        var amount = this.info & 15;
        if ((this.info === 10) || (amount === 0)) {
            ctx.rotate(this.angle);
            this.ground.update();
            if (this.info & 16)
                var img = sprite[SPRITE.WHEAT_SEED_DRIED][world.time];
            else
                var img = sprite[SPRITE.WHEAT_SEED][world.time];
            var w = -img.width * this.ground.v;
            var h = -img.height * this.ground.v;
            ctxDrawImage(ctx, img, (-w / 2) + x, (-h / 2) + y, w, h);
        } else {
            this.wind.update();
            if (this.info & 16)
                var img = sprite[SPRITE.DRIED_WHEAT][world.time];
            else
                var img = sprite[SPRITE.WILD_WHEAT][world.time];
            ctx.translate(0, img.height / 2);
            ctx.rotate(this.wind.v);
            ctxDrawImage(ctx, img, x - (img.width / 2), -img.height + y);
        }
        ctx.restore();
    };

    function draw_seed() {
        if (this.info < 10)
            return;

        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        ctx.rotate(this.angle);
        if (this.hit.update) {
            if (this.hit.anim.update() && (this.hit.anim.o == false))
                this.hit.update = false;

            var v = (((1 - this.hit.anim.v) * delta) * 600) * scale;
            var x = Math.cos(this.hit.angle - this.angle) * v;
            var y = Math.sin(this.hit.angle - this.angle) * v;
        } else {
            var x = 0;
            var y = 0;
        };
        this.ground.update();
        var img = sprite[SPRITE.PLANT_SEED][world.time];
        var w = -img.width * this.ground.v;
        var h = -img.height * this.ground.v;
        ctxDrawImage(ctx, img, (-w / 2) + x, (-h / 2) + y, w, h);
        ctx.restore();
    };

    function draw_plant() {
        if (this.info === 10)
            return;

        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        ctx.rotate(this.angle);
        if (this.hit.update) {
            if (this.hit.anim.update() && (this.hit.anim.o == false))
                this.hit.update = false;

            var v = (((1 - this.hit.anim.v) * delta) * 600) * scale;
            var x = Math.cos(this.hit.angle - this.angle) * v;
            var y = Math.sin(this.hit.angle - this.angle) * v;
        } else {
            var x = 0;
            var y = 0;
        };
        if (this.info & 16)
            var img = sprite[SPRITE.DRIED_PLANT][world.time];
        else
            var img = sprite[SPRITE.PLANT_MINI][world.time];
        ctxDrawImage(ctx, img, (-img.width / 2) + x, (-img.width / 2) + y);
        ctx.restore();
        var amount = this.info & 15;
        for (var i = 0; i < amount; i++)
            this.fruits[i].draw(SPRITE.FRUIT);
    };

    function draw_tomato() {

        if (this.info < 10) return;

        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        ctx.rotate(this.angle);
        if (this.hit.update) {
            if (this.hit.anim.update() && (this.hit.anim.o == false))
                this.hit.update = false;

            var v = (((1 - this.hit.anim.v) * delta) * 600) * scale;
            var x = Math.cos(this.hit.angle - this.angle) * v;
            var y = Math.sin(this.hit.angle - this.angle) * v;
        } else {
            var x = 0;
            var y = 0;
        };
        this.ground.update();
        var img = sprite[SPRITE.PLANT_TOMATO][world.time];
        var w = -img.width * this.ground.v;
        var h = -img.height * this.ground.v;
        ctxDrawImage(ctx, img, (-w / 2) + x, (-h / 2) + y, w, h);
        ctx.restore();
    };

    function draw_tomato_fruit() {

        if (this.info === 10) return;

        var amount = this.info & 15;
        for (var i = 0; i < amount; i++)
            this.fruits[i].draw(SPRITE.TOMATO, this.x, this.y);
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        ctx.rotate(this.angle);
        if (this.hit.update) {
            if (this.hit.anim.update() && (this.hit.anim.o == false))
                this.hit.update = false;

            var v = (((1 - this.hit.anim.v) * delta) * 600) * scale;
            var x = Math.cos(this.hit.angle - this.angle) * v;
            var y = Math.sin(this.hit.angle - this.angle) * v;
        } else {
            var x = 0;
            var y = 0;
        };
        if (this.info & 16)
            var img = sprite[SPRITE.DRIED_TOMATO_MINI][world.time];
        else
            var img = sprite[SPRITE.TOMATO_MINI][world.time];
        ctxDrawImage(ctx, img, (-img.width / 2) + x, (-img.width / 2) + y);
        ctx.restore();
    };

    function draw_furnace() {
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        ctx.rotate(this.angle);
        if (this.hit.update) {
            if (this.hit.anim.update() && (this.hit.anim.o == false))
                this.hit.update = false;

            var v = (((1 - this.hit.anim.v) * delta) * 600) * scale;
            var x = Math.cos(this.hit.angle - this.angle) * v;
            var y = Math.sin(this.hit.angle - this.angle) * v;
        } else {
            var x = 0;
            var y = 0;
        };
        if (this.info)
            img = sprite[SPRITE.FURNACE_ON][world.time];
        else
            img = sprite[SPRITE.FURNACE_OFF][world.time];
        ctxDrawImage(ctx, img, (-img.width / 2) + x, (-img.height / 2) + y);
        ctx.restore();
    };

    function draw_furnace_ground() {
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        ctx.rotate(this.angle);
        this.ground.update();
        ctx.globalAlpha = 0.3;
        var img = sprite[SPRITE.GROUND_FIRE][world.time];
        var w = -img.width * this.ground.v;
        var h = -img.height * this.ground.v;
        ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
        ctx.globalAlpha = 1;
        ctx.restore();
    };

    function draw_bread_oven_smog() {
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        ctx.rotate(this.angle);
        if ((((this.info & 31) && (this.info & 992)) && ((this.info & 31744) != 31744)) && ((this.smog.length == 0) || (this.smog[this.smog.length - 1] <= SPRITE.SMOG_PUSH)))
            this.smog.push(SPRITE.SMOG);

        for (var i = 0; i < this.smog.length; i++) {
            this.smog[i] = Math.max(0, this.smog[i] - (delta * SPRITE.SMOG_SPEED));
            ctx.globalAlpha = this.smog[i] / 1.3;
            var v = (1 - this.smog[i]) * 40;
            var r = ((1 - this.smog[i]) * 35) + 10;
            circle(ctx, (-68 * scale) + (Math.cos(-this.angle - (Math.PI / 2)) * v), (-20 * scale) + (Math.sin(-this.angle - (Math.PI / 2)) * v), r);
            fill_path(ctx, "#333333");
        }
        ctx.globalAlpha = 1;
        if ((this.smog.length > 0) && (this.smog[0] === 0))
            this.smog.shift();

        ctx.restore();
    };

    function draw_fire_ground(id) {
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        ctx.rotate(this.angle);
        this.ground.update();
        ctx.globalAlpha = 0.3;
        var img = sprite[SPRITE.GROUND_FIRE][world.time];
        var w = -img.width * this.ground.v;
        var h = -img.height * this.ground.v;
        ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
        ctx.globalAlpha = 1;
        if (this.hit.update) {
            if (this.hit.anim.update() && (this.hit.anim.o == false))
                this.hit.update = false;

            var v = (((1 - this.hit.anim.v) * delta) * 600) * scale;
            var x = Math.cos(this.hit.angle - this.angle) * v;
            var y = Math.sin(this.hit.angle - this.angle) * v;
        } else {
            var x = 0;
            var y = 0;
        };
        img = sprite[id][world.time];
        ctxDrawImage(ctx, img, (-img.width / 2) + x, (-img.height / 2) + y);
        ctx.restore();
    };

    function draw_sign() {
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        ctx.rotate(this.angle);
        if (this.hit.update) {
            if (this.hit.anim.update() && (this.hit.anim.o == false))
                this.hit.update = false;

            var v = (((1 - this.hit.anim.v) * delta) * 600) * scale;
            var x = Math.cos(this.hit.angle - this.angle) * v;
            var y = Math.sin(this.hit.angle - this.angle) * v;
        } else {
            var x = 0;
            var y = 0;
        };
        if (this.info === 0)
            img = sprite[SPRITE.SIGN][world.time];
        else
            img = sprite[SPRITE.SYMBOLS][world.time][this.info - 1];
        ctxDrawImage(ctx, img, (-img.width / 2) + x, (-img.height / 2) + y);
        ctx.restore();
    };

    function draw_bread_oven() {
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        ctx.rotate(this.angle);
        if (this.hit.update) {
            if (this.hit.anim.update() && (this.hit.anim.o == false))
                this.hit.update = false;

            var v = (((1 - this.hit.anim.v) * delta) * 600) * scale;
            var x = Math.cos(this.hit.angle - this.angle) * v;
            var y = Math.sin(this.hit.angle - this.angle) * v;
        } else {
            var x = 0;
            var y = 0;
        };
        if (((this.info & 31) && (this.info & 992)) && ((this.info & 31744) != 31744)) {
            img = sprite[SPRITE.BREAD_OVEN_ON][world.time];
            ctxDrawImage(ctx, img, (-img.width / 2) + x, (-img.height / 2) + y);
            this.up.update();
            var img = sprite[SPRITE.BREAD_LIGHT_UP][world.time];
            var w = -img.width * this.up.v;
            var h = -img.height * this.up.v;
            ctxDrawImage(ctx, img, (-w / 2) + (1 * scale), (-h / 2) + (3 * scale), w, h);
        } else {
            img = sprite[SPRITE.BREAD_OVEN_OFF][world.time];
            ctxDrawImage(ctx, img, (-img.width / 2) + x, (-img.height / 2) + y);
        }
        ctx.restore();
    };

    function draw_windmill_wings() {
        if (this.hit.update) {
            var v = (((1 - this.hit.anim.v) * delta) * 600) * scale;
            var x = Math.cos(this.hit.angle - this.angle) * v;
            var y = Math.sin(this.hit.angle - this.angle) * v;
        } else {
            var x = 0;
            var y = 0;
        };
        if ((this.info & 255) && ((this.info & 65280) != 65280))
            this.rotate = (this.rotate + (delta * 0.5)) % (Math.PI * 2);

        ctx.save();
        ctx.translate((user.cam.x + this.x) + x, (user.cam.y + this.y) + y);
        ctx.save();
        ctx.rotate(this.rotate);
        img = sprite[SPRITE.WINDMILL_WINGS][world.time];
        ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
        ctx.restore();
        ctx.save();
        ctx.rotate(this.angl);
        img = sprite[SPRITE.WINDMILL_HEAD][world.time];
        ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
        ctx.restore();
        ctx.restore();
    };

    function draw_extractor_stone() {
        if (this.hit.update) {
            if (this.hit.anim.update() && (this.hit.anim.o == false))
                this.hit.update = false;

            var v = (((1 - this.hit.anim.v) * delta) * 600) * scale;
            var x = Math.cos(this.hit.angle - this.angle) * v;
            var y = Math.sin(this.hit.angle - this.angle) * v;
        } else {
            var x = 0;
            var y = 0;
        };
        ctx.save();
        if ((this.info & 255) && ((this.info & 65280) != 65280)) {
            x += (Math.random() * 2) - 1;
            y += (Math.random() * 2) - 1;
        }
        ctx.translate((user.cam.x + this.x) + x, (user.cam.y + this.y) + y);
        ctx.rotate(this.angle);
        img = sprite[SPRITE.EXTRACTOR_MACHINE_STONE][world.time];
        ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
        if ((this.info & 255) && ((this.info & 65280) != 65280))
            this.rotate = (this.rotate + (delta * 3)) % (Math.PI * 2);

        ctx.rotate(this.rotate);
        img = sprite[SPRITE.EXTRACTOR_MACHINE0_STONE][world.time];
        ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
        ctx.restore();
    };

    function draw_extractor_gold() {
        if (this.hit.update) {
            if (this.hit.anim.update() && (this.hit.anim.o == false))
                this.hit.update = false;

            var v = (((1 - this.hit.anim.v) * delta) * 600) * scale;
            var x = Math.cos(this.hit.angle - this.angle) * v;
            var y = Math.sin(this.hit.angle - this.angle) * v;
        } else {
            var x = 0;
            var y = 0;
        };
        ctx.save();
        if ((this.info & 255) && ((this.info & 65280) != 65280)) {
            x += (Math.random() * 2) - 1;
            y += (Math.random() * 2) - 1;
        }
        ctx.translate((user.cam.x + this.x) + x, (user.cam.y + this.y) + y);
        ctx.rotate(this.angle);
        img = sprite[SPRITE.EXTRACTOR_MACHINE_GOLD][world.time];
        ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
        if ((this.info & 255) && ((this.info & 65280) != 65280))
            this.rotate = (this.rotate + (delta * 3)) % (Math.PI * 2);

        ctx.rotate(this.rotate);
        img = sprite[SPRITE.EXTRACTOR_MACHINE0_GOLD][world.time];
        ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
        ctx.restore();
    };

    function draw_extractor_diamond() {
        if (this.hit.update) {
            if (this.hit.anim.update() && (this.hit.anim.o == false))
                this.hit.update = false;

            var v = (((1 - this.hit.anim.v) * delta) * 600) * scale;
            var x = Math.cos(this.hit.angle - this.angle) * v;
            var y = Math.sin(this.hit.angle - this.angle) * v;
        } else {
            var x = 0;
            var y = 0;
        };
        ctx.save();
        if ((this.info & 255) && ((this.info & 65280) != 65280)) {
            x += (Math.random() * 2) - 1;
            y += (Math.random() * 2) - 1;
        }
        ctx.translate((user.cam.x + this.x) + x, (user.cam.y + this.y) + y);
        ctx.rotate(this.angle);
        img = sprite[SPRITE.EXTRACTOR_MACHINE_DIAMOND][world.time];
        ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
        if ((this.info & 255) && ((this.info & 65280) != 65280))
            this.rotate = (this.rotate + (delta * 3)) % (Math.PI * 2);

        ctx.rotate(this.rotate);
        img = sprite[SPRITE.EXTRACTOR_MACHINE0_DIAMOND][world.time];
        ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
        ctx.restore();
    };

    function draw_extractor_amethyst() {
        if (this.hit.update) {
            if (this.hit.anim.update() && (this.hit.anim.o == false))
                this.hit.update = false;

            var v = (((1 - this.hit.anim.v) * delta) * 600) * scale;
            var x = Math.cos(this.hit.angle - this.angle) * v;
            var y = Math.sin(this.hit.angle - this.angle) * v;
        } else {
            var x = 0;
            var y = 0;
        };
        ctx.save();
        if ((this.info & 255) && ((this.info & 65280) != 65280)) {
            x += (Math.random() * 2) - 1;
            y += (Math.random() * 2) - 1;
        }
        ctx.translate((user.cam.x + this.x) + x, (user.cam.y + this.y) + y);
        ctx.rotate(this.angle);
        img = sprite[SPRITE.EXTRACTOR_MACHINE_AMETHYST][world.time];
        ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
        if ((this.info & 255) && ((this.info & 65280) != 65280))
            this.rotate = (this.rotate + (delta * 3)) % (Math.PI * 2);

        ctx.rotate(this.rotate);
        img = sprite[SPRITE.EXTRACTOR_MACHINE0_AMETHYST][world.time];
        ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
        ctx.restore();
    };

    function draw_extractor_reidite() {
        if (this.hit.update) {
            if (this.hit.anim.update() && (this.hit.anim.o == false))
                this.hit.update = false;

            var v = (((1 - this.hit.anim.v) * delta) * 600) * scale;
            var x = Math.cos(this.hit.angle - this.angle) * v;
            var y = Math.sin(this.hit.angle - this.angle) * v;
        } else {
            var x = 0;
            var y = 0;
        };
        ctx.save();
        if ((this.info & 255) && ((this.info & 65280) != 65280)) {
            x += (Math.random() * 2) - 1;
            y += (Math.random() * 2) - 1;
        }
        ctx.translate((user.cam.x + this.x) + x, (user.cam.y + this.y) + y);
        ctx.rotate(this.angle);
        img = sprite[SPRITE.EXTRACTOR_MACHINE_REIDITE][world.time];
        ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
        if ((this.info & 255) && ((this.info & 65280) != 65280))
            this.rotate = (this.rotate + (delta * 3)) % (Math.PI * 2);

        ctx.rotate(this.rotate);
        img = sprite[SPRITE.EXTRACTOR_MACHINE0_REIDITE][world.time];
        ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
        ctx.restore();
    };

    function draw_windmill_head() {
        if (this.hit.update) {
            if (this.hit.anim.update() && (this.hit.anim.o == false))
                this.hit.update = false;

            var v = (((1 - this.hit.anim.v) * delta) * 600) * scale;
            var x = Math.cos(this.hit.angle - this.angle) * v;
            var y = Math.sin(this.hit.angle - this.angle) * v;
        } else {
            var x = 0;
            var y = 0;
        };
        ctx.save();
        ctx.translate((user.cam.x + this.x) + x, (user.cam.y + this.y) + y);
        ctx.rotate(this.angle);
        img = sprite[SPRITE.WINDMILL][world.time];
        ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
        ctx.restore();
    };

    function draw_emerald_machine() {
        if (this.hit.update) {
            if (this.hit.anim.update() && (this.hit.anim.o == false))
                this.hit.update = false;

            var v = (((1 - this.hit.anim.v) * delta) * 600) * scale;
            var x = Math.cos(this.hit.angle - this.angle) * v;
            var y = Math.sin(this.hit.angle - this.angle) * v;
        } else {
            var x = 0;
            var y = 0;
        };
        this.rotate1 = (this.rotate1 + (delta * 3)) % (Math.PI * 2);
        this.rotate2 = (this.rotate2 - (delta * 3)) % (Math.PI * 2);
        ctx.save();
        ctx.translate((user.cam.x + this.x) + x, (user.cam.y + this.y) + y);
        ctx.save();
        ctx.rotate(this.angle);
        img = sprite[SPRITE.EMERALD_MACHINE][world.time];
        ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
        ctx.restore();
        ctx.save();
        ctx.rotate(this.rotate1);
        img = sprite[SPRITE.EMERALD_MACHINE_ROTATE][world.time];
        ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
        ctx.restore();
        ctx.save();
        ctx.rotate(this.rotate2);
        img = sprite[SPRITE.EMERALD_MACHINE_HOLE][world.time];
        ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
        ctx.restore();
        ctx.restore();
    };

    function draw_resurrection() {
        if (this.hit.update) {
            if (this.hit.anim.update() && (this.hit.anim.o == false))
                this.hit.update = false;

            var v = (((1 - this.hit.anim.v) * delta) * 600) * scale;
            var x = Math.cos(this.hit.angle - this.angle) * v;
            var y = Math.sin(this.hit.angle - this.angle) * v;
        } else {
            var x = 0;
            var y = 0;
        };
        this.rotate1 = (this.rotate1 + (delta * 3)) % (Math.PI * 2);
        this.rotate2 = (this.rotate2 - (delta * 3)) % (Math.PI * 2);
        ctx.save();
        ctx.translate((user.cam.x + this.x) + x, (user.cam.y + this.y) + y);
        ctx.save();
        ctx.rotate(this.angle);
        img = sprite[SPRITE.RESURRECTION][world.time];
        ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
        ctx.restore();
        ctx.save();
        ctx.rotate(this.rotate1);
        img = sprite[SPRITE.RESURRECTION_ROTATE][world.time];
        ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
        ctx.restore();
        ctx.save();
        ctx.rotate(this.rotate2);
        img = sprite[SPRITE.RESURRECTION_HOLE][world.time];
        ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
        ctx.restore();
        ctx.restore();
    };

    function draw_emerald_machine_halo() {
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        ctx.rotate(this.angle);
        this.halo.update();
        img = sprite[SPRITE.EMERALD_MACHINE_GROUND][world.time];
        w = -img.width * this.halo.v;
        h = -img.height * this.halo.v;
        ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
        ctx.restore();
    };

    function draw_resurrection_halo() {
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        ctx.rotate(this.angle);
        this.halo.update();
        img = sprite[SPRITE.RESURRECTION_GROUND][world.time];
        w = -img.width * this.halo.v;
        h = -img.height * this.halo.v;
        ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
        ctx.restore();
    };

    function draw_furnace_halo() {
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        ctx.rotate(this.angle);
        this.halo.update();
        img = sprite[SPRITE.HALO_FIRE][world.time];
        w = -img.width * this.halo.v;
        h = -img.height * this.halo.v;
        ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
        ctx.restore();
    };

    function draw_fire_halo() {
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        ctx.rotate(this.angle);
        this.fire.update();
        img = sprite[SPRITE.FIRE][world.time];
        w = -img.width * this.fire.v;
        h = -img.height * this.fire.v;
        ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
        this.halo.update();
        img = sprite[SPRITE.HALO_FIRE][world.time];
        w = -img.width * this.halo.v;
        h = -img.height * this.halo.v;
        ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
        ctx.restore();
    };

    function draw_player_effect(p) {
        if (p.right >= 0) {
            switch (p.right) {
                case SPRITE.WATERING_CAN_FULL:
                    ctx.save();
                    var effect1 = (-3 * p.attack.v) / Math.PI;
                    if (p.attack.o)
                        var effect2 = (-Math.PI / 3) - (((Math.PI / 3) + p.attack.v) / 3);
                    else
                        var effect2 = p.attack.v;
                    ctx.rotate((p.angle - (Math.PI / 2)) + effect2);
                    ctx.globalAlpha = effect1 / 1.2;
                    circle(ctx, -40 * scale, 90 * scale, 5 * scale);
                    fill_path(ctx, "#0B6A84");
                    ctx.globalAlpha = effect1 / 1.2;
                    circle(ctx, -52 * scale, 100 * scale, 8 * scale);
                    fill_path(ctx, "#0B6A84");
                    ctx.globalAlpha = effect1 / 1.2;
                    circle(ctx, -30 * scale, 95 * scale, 4 * scale);
                    fill_path(ctx, "#0B6A84");
                    ctx.globalAlpha = 1;
                    ctx.restore();
                    break;
                case SPRITE.SHOVEL:
                case SPRITE.SHOVEL_GOLD:
                case SPRITE.SHOVEL_DIAMOND:
                case SPRITE.SHOVEL_AMETHYST:
                    if (p.fly === 1)
                        break;

                    if (p.dist_winter > 0)
                        var id = SPRITE.ICE_SHOVEL_CO[world.time];
                    else if ((p.dist_sand > 0) || (p.dist_desert > 0))
                        var id = SPRITE.SAND_SHOVEL_CO[world.time];
                    else
                        var id = SPRITE.GRD_SHOVEL_CO[world.time];
                    var effect1 = (-3 * p.attack.v) / Math.PI;
                    if (p.attack.o)
                        var effect2 = Math.max((0.5 - (effect1 / 2)) + 0.5, 0);
                    else
                        var effect2 = Math.max(effect1 / 2, 0);
                    if (effect2 === 0)
                        p.angle_init = p.angle;

                    ctx.save();
                    ctx.rotate(p.angle_init - (Math.PI / 2));
                    ctx.globalAlpha = effect1;
                    var effect3 = (25 * scale) + (effect2 * 25);
                    circle(ctx, effect3, 80 * scale, 15 * scale);
                    fill_path(ctx, id);
                    circle(ctx, -effect3, 80 * scale, 15 * scale);
                    fill_path(ctx, id);
                    ctx.globalAlpha = 1;
                    ctx.restore();
                    break;
            }
        }
    };

    function draw_player_right_stuff_after(right, x, y) {
        if (right >= 0) {
            img = sprite[right][world.time];
            switch (right) {
                case SPRITE.WOOD_SHIELD:
                case SPRITE.STONE_SHIELD:
                case SPRITE.GOLD_SHIELD:
                    draw_image_transition_hd(right, img, (-img.width / 4) - (scale * (0 + x)), (-img.height / 4) + (scale * (y + 35)));
                    break;
                case SPRITE.DIAMOND_SHIELD:
                    draw_image_transition_hd(right, img, (-img.width / 4) - (scale * (1 + x)), (-img.height / 4) + (scale * (y + 45)));
                    break;
                case SPRITE.AMETHYST_SHIELD:
                case SPRITE.REIDITE_SHIELD:
                    draw_image_transition_hd(right, img, (-img.width / 4) - (scale * (1 + x)), (-img.height / 4) + (scale * (y + 40)));
                    break;
            }
        }
    };

    function draw_player_right_stuff(right, x, y) {
        if (right >= 0) {
            img = sprite[right][world.time];
            switch (right) {
                case SPRITE.PICK:
                case SPRITE.PICK_GOLD:
                case SPRITE.PICK_DIAMOND:
                case SPRITE.PICK_WOOD:
                case SPRITE.PICK_AMETHYST:
                case SPRITE.PICK_REIDITE:
                    draw_image_transition(right, img, (-img.width / 2) - (scale * (45 + x)), (-img.height / 2) + (scale * (y + 22)));
                    break;
                case SPRITE.SWORD_WOOD:
                case SPRITE.SWORD:
                case SPRITE.SWORD_GOLD:
                case SPRITE.SWORD_DIAMOND:
                    draw_image_transition_hd(right, img, (-img.width / 4) - (scale * (47 + x)), (-img.height / 4) + (scale * (y + 45)));
                    break;
                case SPRITE.SWORD_AMETHYST:
                    draw_image_transition_hd(right, img, (-img.width / 4) - (scale * (52 + x)), (-img.height / 4) + (scale * (y + 45)));
                    break;
                case SPRITE.REIDITE_SWORD:
                    draw_image_transition_hd(right, img, (-img.width / 4) - (scale * (47 + x)), (-img.height / 4) + (scale * (y + 44)));
                    break;
                case SPRITE.PIRATE_SWORD:
                    draw_image_transition(right, img, (-img.width / 2) - (scale * (47 + x)), (-img.height / 2) + (scale * (y + 44)));
                    break;
                case SPRITE.DRAGON_SWORD:
                    draw_image_transition(right, img, (-img.width / 2) - (scale * (40 + x)), (-img.height / 2) + (scale * (y + 65)));
                    break;
                case SPRITE.WOOD_SPEAR:
                    draw_image_transition_hd(right, img, (-img.width / 4) - (scale * (37 + x)), (-img.height / 4) + (scale * (y + 85)));
                    break;
                case SPRITE.REIDITE_SPEAR:
                    draw_image_transition_hd(right, img, (-img.width / 4) - (scale * (37 + x)), (-img.height / 4) + (scale * (y + 85)));
                    break;
                case SPRITE.PITCHFORK2:
                case SPRITE.PITCHFORK:
                    draw_image_transition_hd(right, img, (-img.width / 4) - (scale * (26 + x)), (-img.height / 4) + (scale * (y + 77)));
                    break;
                case SPRITE.LAVA_SPEAR:
                    draw_image_transition_hd(right, img, (-img.width / 4) - (scale * (37 + x)), (-img.height / 4) + (scale * (y + 85)));
                    break;
                case SPRITE.LAVA_SWORD:
                    draw_image_transition_hd(right, img, (-img.width / 4) - (scale * (47 + x)), (-img.height / 4) + (scale * (y + 44)));
                    break;
                case SPRITE.WOOD_BOW:
                case SPRITE.STONE_BOW:
                case SPRITE.GOLD_BOW:
                case SPRITE.DIAMOND_BOW:
                case SPRITE.AMETHYST_BOW:
                case SPRITE.REIDITE_BOW:
                case SPRITE.DRAGON_BOW:
                    draw_image_transition_hd(right, img, (-img.width / 4) - (scale * (37 + x)), (-img.height / 4) + (scale * (y + 30)));
                    break;
                case SPRITE.MACHETE:
                    draw_image_transition_hd(right, img, (-img.width / 4) - (scale * (47 + x)), (-img.height / 4) + (scale * (y + 35)));
                    break;
                case SPRITE.WAND1:
                case SPRITE.WAND2:
                    draw_image_transition_hd(right, img, (-img.width / 4) - (scale * (47 + x)), (-img.height / 4) + (scale * (y + 40)));
                    break;
                case SPRITE.SADDLE:
                    draw_image_transition_hd(right, img, (-img.width / 4) - (scale * (47 + x)), (-img.height / 4) + (scale * (y + 34)));
                    break;
                case SPRITE.SPEAR:
                case SPRITE.GOLD_SPEAR:
                case SPRITE.DIAMOND_SPEAR:
                case SPRITE.AMETHYST_SPEAR:
                    draw_image_transition_hd(right, img, (-img.width / 4) - (scale * (37 + x)), (-img.height / 4) + (scale * (y + 90)));
                    break;
                case SPRITE.CRAB_SPEAR:
                    draw_image_transition_hd(right, img, (-img.width / 4) - (scale * (40 + x)), (-img.height / 4) + (scale * (y + 85)));
                    break;
                case SPRITE.DRAGON_SPEAR:
                    draw_image_transition(right, img, (-img.width / 2) - (scale * (39 + x)), (-img.height / 2) + (scale * (y + 90)));
                    break;
                case SPRITE.HAMMER:
                case SPRITE.HAMMER_GOLD:
                case SPRITE.HAMMER_DIAMOND:
                case SPRITE.HAMMER_AMETHYST:
                case SPRITE.HAMMER_REIDITE:
                case SPRITE.SUPER_HAMMER:
                    draw_image_transition(right, img, (-img.width / 2) - (scale * (46 + x)), (-img.height / 2) + (scale * (y + 35)));
                    break;
                case SPRITE.WATERING_CAN_FULL:
                    draw_image_transition(right, img, (-img.width / 2) - (scale * (47 + x)), (-img.height / 2) + (scale * (y + 54)));
                    break;
                case SPRITE.SHOVEL:
                case SPRITE.SHOVEL_GOLD:
                case SPRITE.SHOVEL_DIAMOND:
                case SPRITE.SHOVEL_AMETHYST:
                    draw_image_transition(right, img, (-img.width / 2) - (scale * (46 + x)), (-img.height / 2) + (scale * (y + 35)));
                    break;
                case SPRITE.SPANNER:
                    draw_image_transition(right, img, (-img.width / 2) - (scale * (47 + x)), (-img.height / 2) + (scale * (y + 20)));
                    break;
            }
        }
    };
    var draw_player_clothe = function (clothe) {
        if (clothe > 0) {
            var img = sprite[clothe][world.time];
            switch (clothe) {
                case SPRITE.WOOD_HELMET:
                    draw_image_transition(clothe, img, (-img.width / 2) + (2 * scale), (-img.height / 2) - (scale * 5));
                    break;
                case SPRITE.EARMUFFS:
                    draw_image_transition(clothe, img, -img.width / 2, (-img.height / 2) - (scale * 18));
                    break;
                case SPRITE.COAT:
                    draw_image_transition(clothe, img, -img.width / 2, (-img.height / 2) - (scale * 10));
                    break;
                case SPRITE.EXPLORER_HAT:
                    draw_image_transition(clothe, img, -img.width / 2, (-img.height / 2) - (scale * 19));
                    break;
                case SPRITE.PIRATE_HAT:
                    draw_image_transition_hd(clothe, img, -img.width / 4, (-img.height / 4) - (20 * scale));
                    break;
                case SPRITE.STONE_HELMET:
                    draw_image_transition(clothe, img, (-img.width / 2) - (1 * scale), (-img.height / 2) - (scale * 23));
                    break;
                case SPRITE.GOLD_HELMET:
                    draw_image_transition(clothe, img, -img.width / 2, (-img.height / 2) - (scale * 5));
                    break;
                case SPRITE.DIAMOND_HELMET:
                    draw_image_transition(clothe, img, -img.width / 2, (-img.height / 2) - (scale * 2));
                    break;
                case SPRITE.AMETHYST_HELMET:
                    draw_image_transition(clothe, img, (-img.width / 2) + (1.5 * scale), (-img.height / 2) - (1 * scale));
                    break;
                case SPRITE.REIDITE_HELMET:
                case SPRITE.DIAMOND_PROTECTION:
                case SPRITE.AMETHYST_PROTECTION:
                case SPRITE.REIDITE_PROTECTION:
                case SPRITE.TURBAN1:
                case SPRITE.TURBAN2:
                case SPRITE.PILOT_HELMET:
                case SPRITE.LAVA_HELMET:
                case SPRITE.WITCH:
                case SPRITE.FUR_HAT:
                case SPRITE.FLOWER_HAT:
                    draw_image_transition_hd(clothe, img, -img.width / 4, (-img.height / 4) + (2 * scale));
                    break;
                case SPRITE.CHRISTMAS_HAT:
                case SPRITE.ELF_HAT:
                    draw_image_transition(clothe, img, (-img.width / 2) - (5 * scale), (-img.height / 2) - (scale * 2));
                    break;
                case SPRITE.CAP_SCARF:
                    draw_image_transition(clothe, img, -img.width / 2, (-img.height / 2) - (scale * 2));
                    break;
                case SPRITE.WINTER_HOOD:
                    draw_image_transition(clothe, img, -img.width / 2, (-img.height / 2) - (scale * 2));
                    break;
                case SPRITE.DIVING_MASK:
                    draw_image_transition(clothe, img, -img.width / 2, (-img.height / 2) - (scale * 2));
                    break;
                case SPRITE.SUPER_DIVING_SUIT:
                    draw_image_transition(clothe, img, (-img.width / 2) + (2 * scale), -img.height / 2);
                    break;
                case SPRITE.DRAGON_HELMET:
                    draw_image_transition(clothe, img, -img.width / 2, (-img.height / 2) - (5 * scale));
                    break;
                case SPRITE.CROWN_GREEN:
                case SPRITE.CROWN_ORANGE:
                case SPRITE.CROWN_BLUE:
                    draw_image_transition(clothe, img, (-img.width / 2) - (1 * scale), -img.height / 2);
                    break;
                case SPRITE.HOOD:
                    draw_image_transition(clothe, img, -img.width / 2, (-img.height / 2) + (2 * scale));
                    break;
                case SPRITE.PEASANT:
                case SPRITE.WINTER_PEASANT:
                    draw_image_transition(clothe, img, -img.width / 2, (-img.height / 2) + (8 * scale));
                    break;
                case SPRITE.CROWN_CRAB:
                    draw_image_transition(clothe, img, -img.width / 2, (-img.height / 2) - (4 * scale));
                    break;
            }
        }
    };

    function draw_vehicle() {
        if (this.ghost || (this.vehicle === 0))
            return;

        if ((this.x != this.r.x) || (this.y != this.r.y)) {
            var angle = (Utils.get_angle_2(this.x, this.y, this.r.x, this.r.y) + (Math.PI / 2)) % (Math.PI * 2);
            this.vehicle_fx2 = Utils.reduceAngle(angle, this.vehicle_fx2);
            this.vehicle_fx2 = Utils.lerp(this.vehicle_fx2, angle, 0.018);
        }
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        ctx.rotate(this.vehicle_fx2);
        if (this.vehicle === INV.BOAT) {
            if ((this.speed > 50) || (this.vehicle_fx1 > 0)) {
                if (this.speed > 50)
                    this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + delta);
                else
                    this.vehicle_fx1 = Math.max(0, this.vehicle_fx1 - delta);
                ctx.globalAlpha = this.vehicle_fx1;
                var img = sprite[SPRITE.BOAT_WAVE][world.time];
                draw_image_transition_hd(SPRITE.BOAT_WAVE, img, -img.width / 4, -img.height / 4);
                ctx.globalAlpha = 1;
            }
            var img = sprite[SPRITE.BOAT][world.time];
            draw_image_transition_hd(SPRITE.BOAT, img, -img.width / 4, -img.height / 4);
        } else if (this.vehicle === INV.HAWK) {
            this.vehicle_fx5 = Utils.lerp(this.vehicle_fx5, this.speed, 0.018);
            this.vehicle_fx4.update();
            if (this.speed > 85)
                this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + (delta / 4));
            else
                this.vehicle_fx1 = Math.max(0.1, this.vehicle_fx1 - delta);
            var img = sprite[SPRITE.HAWK_TAMED][world.time];
            draw_image_transition_hd(SPRITE.HAWK_TAMED, img, -img.width / 4, -img.height / 4);
            img = sprite[SPRITE.HAWK_WING_LEFT_TAMED][world.time];
            w = -img.width;
            h = -img.height;
            ctx.save();
            ctx.translate(-20 * scale, -20 * scale);
            ctx.rotate(this.vehicle_fx4.v * this.vehicle_fx1);
            ctxDrawImage(ctx, img, -w / 4, -h / 4, w / 2, h / 2);
            ctx.restore();
            img = sprite[SPRITE.HAWK_WING_RIGHT_TAMED][world.time];
            ctx.save();
            ctx.translate(20 * scale, -20 * scale);
            ctx.rotate(-this.vehicle_fx4.v * this.vehicle_fx1);
            ctxDrawImage(ctx, img, -w / 4, -h / 4, w / 2, h / 2);
            ctx.restore();
        } else if (this.vehicle === INV.BABY_LAVA) {
            this.vehicle_fx5 = Utils.lerp(this.vehicle_fx5, this.speed, 0.018);
            this.vehicle_fx4.update();
            if (this.speed > 85)
                this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + (delta / 4));
            else
                this.vehicle_fx1 = Math.max(0.1, this.vehicle_fx1 - delta);
            var img = sprite[SPRITE.BABY_LAVA_TAMED][world.time];
            draw_image_transition_hd(SPRITE.BABY_LAVA_TAMED, img, -img.width / 4, -img.height / 4);
            img = sprite[SPRITE.BABY_LAVA_WING_LEFT_TAMED][world.time];
            w = -img.width;
            h = -img.height;
            ctx.save();
            ctx.translate(-40 * scale, -45 * scale);
            ctx.rotate(this.vehicle_fx4.v * this.vehicle_fx1);
            ctxDrawImage(ctx, img, -w / 4, -h / 4, w / 2, h / 2);
            ctx.restore();
            img = sprite[SPRITE.BABY_LAVA_WING_RIGHT_TAMED][world.time];
            ctx.save();
            ctx.translate(40 * scale, -45 * scale);
            ctx.rotate(-this.vehicle_fx4.v * this.vehicle_fx1);
            ctxDrawImage(ctx, img, -w / 4, -h / 4, w / 2, h / 2);
            ctx.restore();
        } else if (this.vehicle === INV.BABY_DRAGON) {
            this.vehicle_fx5 = Utils.lerp(this.vehicle_fx5, this.speed, 0.018);
            this.vehicle_fx4.update();
            if (this.speed > 85)
                this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + (delta / 4));
            else
                this.vehicle_fx1 = Math.max(0.1, this.vehicle_fx1 - delta);
            var img = sprite[SPRITE.BABY_DRAGON_TAMED][world.time];
            draw_image_transition_hd(SPRITE.BABY_DRAGON_TAMED, img, -img.width / 4, -img.height / 4);
            img = sprite[SPRITE.BABY_DRAGON_WING_LEFT_TAMED][world.time];
            w = -img.width;
            h = -img.height;
            ctx.save();
            ctx.translate(-40 * scale, -45 * scale);
            ctx.rotate(this.vehicle_fx4.v * this.vehicle_fx1);
            ctxDrawImage(ctx, img, -w / 4, -h / 4, w / 2, h / 2);
            ctx.restore();
            img = sprite[SPRITE.BABY_DRAGON_WING_RIGHT_TAMED][world.time];
            ctx.save();
            ctx.translate(40 * scale, -45 * scale);
            ctx.rotate(-this.vehicle_fx4.v * this.vehicle_fx1);
            ctxDrawImage(ctx, img, -w / 4, -h / 4, w / 2, h / 2);
            ctx.restore();
        } else if (this.vehicle === INV.NIMBUS) {
            this.vehicle_fx5 = Utils.lerp(this.vehicle_fx5, this.speed, 0.018);
            var img = sprite[SPRITE.NIMBUS][world.time];
            draw_image_transition_hd(SPRITE.NIMBUS, img, -img.width / 4, -img.height / 4);
        } else if (this.vehicle === INV.PLANE) {
            this.vehicle_fx5 = Utils.lerp(this.vehicle_fx5, this.speed, 0.018);
            var img = sprite[SPRITE.PLANE][world.time];
            draw_image_transition_hd(SPRITE.PLANE, img, -img.width / 4, -img.height / 4);
        } else if (this.vehicle === INV.SLED) {
            var img = sprite[SPRITE.SLED][world.time];
            draw_image_transition_hd(SPRITE.SLED, img, -img.width / 4, -img.height / 4);
        } else if (this.vehicle === INV.BABY_MAMMOTH) {
            var img = sprite[SPRITE.BABY_MAMMOTH_TAMED][world.time];
            if (this.speed > 85)
                this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + (delta / 4));
            else
                this.vehicle_fx1 = Math.max(0, this.vehicle_fx1 - delta);
            this.vehicle_fx3 += delta * 60;
            if (this.vehicle_fx3 > 60)
                this.vehicle_fx3 -= 60;

            var move = this.vehicle_fx1 * (-6 + (12 * ((this.vehicle_fx3 < 30) ? (this.vehicle_fx3 / 30) : (1 - ((this.vehicle_fx3 - 30) / 30)))));
            draw_image_transition_hd(SPRITE.BABY_MAMMOTH_TAMED, img, -img.width / 4, (-img.height / 4) + move);
        } else if (this.vehicle === INV.MOUNT_BOAR) {
            var img = sprite[SPRITE.BOAR_TAMED][world.time];
            if (this.speed > 85)
                this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + (delta / 4));
            else
                this.vehicle_fx1 = Math.max(0, this.vehicle_fx1 - delta);
            this.vehicle_fx3 += delta * 60;
            if (this.vehicle_fx3 > 60)
                this.vehicle_fx3 -= 60;

            var move = this.vehicle_fx1 * (-6 + (12 * ((this.vehicle_fx3 < 30) ? (this.vehicle_fx3 / 30) : (1 - ((this.vehicle_fx3 - 30) / 30)))));
            draw_image_transition_hd(SPRITE.BOAR_TAMED, img, -img.width / 4, (-img.height / 4) + move);
        } else if (this.vehicle === INV.CRAB_BOSS) {
            var pi2 = Math.PI / 2;
            var pi4 = Math.PI / 4;
            var img = sprite[SPRITE.CRAB_BOSS_TAMED][world.time];
            if (this.speed > 85)
                this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + (delta / 4));
            else
                this.vehicle_fx1 = Math.max(0, this.vehicle_fx1 - delta);
            this.vehicle_fx3 += delta * 60;
            if (this.vehicle_fx3 > 60)
                this.vehicle_fx3 -= 60;

            var move = this.vehicle_fx1 * (-6 + (12 * ((this.vehicle_fx3 < 30) ? (this.vehicle_fx3 / 30) : (1 - ((this.vehicle_fx3 - 30) / 30)))));
            draw_image_transition_hd(SPRITE.CRAB_BOSS_TAMED, img, (-img.width / 4) + move, -img.height / 4);
            ctx.restore();
            ctx.save();
            ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
            ctx.rotate((Math.PI + this.vehicle_fx2) + pi4);
            ctx.translate(120, move);
            ctx.rotate(pi2);
            img = sprite[SPRITE.CRAB_BOSS_CLAW_LEFT][world.time];
            w = -img.width;
            h = -img.height;
            ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
            ctx.restore();
            ctx.save();
            ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
            ctx.rotate(((Math.PI + this.vehicle_fx2) + pi2) + pi4);
            ctx.translate(120, move);
            ctx.rotate(pi2);
            img = sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT][world.time];
            w = -img.width;
            h = -img.height;
            ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
        }
        ctx.restore();
    };
    __EFFECT_HURT__ = 0;
    __EFFECT_HEAL__ = 1;
    __EFFECT_COLD__ = 2;
    __EFFECT_HUNGER__ = 3;
    __EFFECT_BOX__ = 4;
    __IMAGE_EFFECT__ = [
        [],
        [],
        [],
        [],
        []
    ];
    __IMAGE_EFFECT_COLOR__ = ["#BB0000", "#00BB00", "#1CE7E0", "#DBE71C", "#BB0000"];

    function get_image_effect(image_id, image, effect) {
        if (image.tryLoad() !== 1)
            return image;

        var image_effect = __IMAGE_EFFECT__[effect][image_id];
        if (image_effect === undefined) {
            image_effect = document.createElement("canvas");
            var context = image_effect.getContext("2d");
            var width = image.width;
            var height = image.height;
            image_effect.width = width;
            image_effect.height = height;
            context.drawImage(image, 0, 0);
            context.globalCompositeOperation = "source-in";
            context.fillStyle = __IMAGE_EFFECT_COLOR__[effect];
            context.fillRect(0, 0, width, height);
            __IMAGE_EFFECT__[effect][image_id] = image_effect;
        }
        return image_effect;
    };

    function draw_player() {
        var isShield = 0;
        switch (this.right) {
            case SPRITE.WOOD_SHIELD:
            case SPRITE.STONE_SHIELD:
            case SPRITE.GOLD_SHIELD:
            case SPRITE.DIAMOND_SHIELD:
            case SPRITE.AMETHYST_SHIELD:
            case SPRITE.REIDITE_SHIELD:
                var isShield = 1;
                break;
        }
        if (this.ghost) {
            for (var i = 0; i < this.bubbles.length; i++) {
                var b = this.bubbles[i];
                if (b.life > 0.5)
                    var alpha = 1 - ((b.life - 0.5) * 2);
                else
                    var alpha = b.life * 2;
                ctx.globalAlpha = alpha;
                var img = sprite[SPRITE.BUBBLES][world.time][b.id];
                ctxDrawImage(ctx, img, (user.cam.x + b.x) - (img.width / 2), (user.cam.y + b.y) - (img.height / 2));
                ctx.globalAlpha = 1;
            }
            return;
        }
        
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
        world.dist_from_biomes(this);
        if (this.action & STATE.ATTACK) {
            draw_player_effect(this);
        }
        ctx.save();
        ctx.rotate(this.angle - (Math.PI / 2));
        if (!(this.action & STATE.ATTACK)) {
            if ((this.action & STATE.IDLE) || (this.vehicle !== 0)) {
                this.idle.update();
            } else if (this.action & STATE.WALK) {
                this.walk.update();
            }
        }
        var x = this.idle.v;
        var y = this.walk.v;
        var spriteid;
        if (this.clothe === SPRITE.WINTER_HOOD) {
            img = sprite[SPRITE.GLOVES_HOOD][world.time];
            spriteid = SPRITE.GLOVES_HOOD;
        } else if (this.clothe === SPRITE.DIAMOND_PROTECTION) {
            img = sprite[SPRITE.GLOVES_DIAMOND_PROTECTION][world.time];
            spriteid = SPRITE.GLOVES_DIAMOND_PROTECTION;
        } else if (this.clothe === SPRITE.AMETHYST_PROTECTION) {
            img = sprite[SPRITE.GLOVES_AMETHYST_PROTECTION][world.time];
            spriteid = SPRITE.GLOVES_AMETHYST_PROTECTION;
        } else if (this.clothe === SPRITE.REIDITE_PROTECTION) {
            img = sprite[SPRITE.GLOVES_REIDITE_PROTECTION][world.time];
            spriteid = SPRITE.GLOVES_REIDITE_PROTECTION;
        } else if (this.superzombie) {
            img = sprite[SPRITE.ZOMBIE_HAND][world.time];
            spriteid = SPRITE.ZOMBIE_HAND;
        } else {
            img = sprite[SPRITE.HAND][this.skin][world.time];
            spriteid = SPRITE.HAND;
        }
        shadow = sprite[SPRITE.HAND_SHADOW][world.time];
        var hand = img;
        var handid = spriteid;
        if (this.action & STATE.ATTACK) {
            if (this.attack.update() && (this.attack.o == false)) {
                this.hand = !this.hand;
                this.action -= STATE.ATTACK;
                if (this.uid == user.uid)
                    user.control.mouse = 0;

            }
            if (this.right >= 0)
                this.hand = true;

            var right = this.hand ? this.attack.v : (-this.attack.v / 3);
            var left = this.hand ? (this.attack.v / 3) : -this.attack.v;
            if (this.superzombie) {
                ctx.save();
                ctx.rotate(right);
                draw_image_transition(spriteid, img, (-img.width / 2) - (scale * (66 + x)), (-img.height / 2) + ((5 + y) * scale));
                ctx.restore();
                ctx.save();
                ctx.rotate(left);
                draw_image_transition(spriteid, img, (-img.width / 2) + (scale * (66 + x)), (-img.height / 2) + ((5 + y) * scale));
                ctx.restore();
            } else {
                if (isShield === 0) {
                    if (this.right === SPRITE.WOOD_BOW)
                        right = -Utils.ease_out_quad(-right);

                    ctx.save();
                    ctx.rotate(right);
                    draw_image_transition(SPRITE.HAND_SHADOW, shadow, (-shadow.width / 2) - (scale * (49 + x)), (-shadow.height / 2) + ((15 + y) * scale));
                    if (this.right === SPRITE.BOOK) {
                        var _img = sprite[this.right][this.book][world.time];
                        draw_image_transition_hd_2(this.right, this.book, _img, (-_img.width / 4) - (scale * (62 + x)), (-_img.height / 4) + (scale * (y + 18)));
                    } else
                        draw_player_right_stuff(this.right, x, y);
                    if (spriteid >= SPRITE.GLOVES_DIAMOND_PROTECTION)
                        draw_image_transition_hd(spriteid, img, (-img.width / 4) - (scale * (49 + x)), (-img.height / 4) + ((11 + y) * scale));
                    else if (spriteid !== SPRITE.GLOVES_HOOD) {
                        draw_image_transition_hd_2(spriteid, this.skin, img, (-img.width / 4) - (scale * (49 + x)), (-img.height / 4) + ((11 + y) * scale));
                    } else
                        draw_image_transition(spriteid, img, (-img.width / 2) - (scale * (49 + x)), (-img.height / 2) + ((11 + y) * scale));
                    ctx.restore();
                    ctx.save();
                    ctx.rotate(left);
                    draw_image_transition(SPRITE.HAND_SHADOW, shadow, (-shadow.width / 2) + (scale * (49 + x)), (-shadow.height / 2) + ((15 + y) * scale));
                    if (spriteid >= SPRITE.GLOVES_DIAMOND_PROTECTION)
                        draw_image_transition_hd(spriteid, img, (-img.width / 4) + (scale * (49 + x)), (-img.height / 4) + ((11 + y) * scale));
                    else if (spriteid !== SPRITE.GLOVES_HOOD)
                        draw_image_transition_hd_2(spriteid, this.skin, img, (-img.width / 4) + (scale * (49 + x)), (-img.height / 4) + ((11 + y) * scale));
                    else
                        draw_image_transition(spriteid, img, (-img.width / 2) + (scale * (49 + x)), (-img.height / 2) + ((11 + y) * scale));
                    ctx.restore();
                }
            }
        } else {
            if (this.superzombie) {
                draw_image_transition(spriteid, img, (-img.width / 2) - (scale * (66 + x)), (-img.height / 2) + ((5 + y) * scale));
                draw_image_transition(spriteid, img, (-img.width / 2) + (scale * (66 + x)), (-img.height / 2) + ((5 + y) * scale));
            } else {
                if (isShield === 0) {
                    draw_image_transition(SPRITE.HAND_SHADOW, shadow, (-shadow.width / 2) - (scale * (49 + x)), (-shadow.height / 2) + ((15 + y) * scale));
                    if (this.right === SPRITE.BOOK) {
                        var _img = sprite[this.right][this.book][world.time];
                        draw_image_transition_hd_2(this.right, this.book, _img, (-_img.width / 4) - (scale * (62 + x)), (-_img.height / 4) + (scale * (y + 18)));
                    } else
                        draw_player_right_stuff(this.right, x, y);
                    if (spriteid >= SPRITE.GLOVES_DIAMOND_PROTECTION)
                        draw_image_transition_hd(spriteid, img, (-img.width / 4) - (scale * (49 + x)), (-img.height / 4) + ((11 + y) * scale));
                    else if (spriteid !== SPRITE.GLOVES_HOOD)
                        draw_image_transition_hd_2(spriteid, this.skin, img, (-img.width / 4) - (scale * (49 + x)), (-img.height / 4) + ((11 + y) * scale));
                    else
                        draw_image_transition(spriteid, img, (-img.width / 2) - (scale * (49 + x)), (-img.height / 2) + ((11 + y) * scale));
                    draw_image_transition(SPRITE.HAND_SHADOW, shadow, (-shadow.width / 2) + (scale * (49 + x)), (-shadow.height / 2) + ((15 + y) * scale));
                    if (spriteid >= SPRITE.GLOVES_DIAMOND_PROTECTION)
                        draw_image_transition_hd(spriteid, img, (-img.width / 4) + (scale * (49 + x)), (-img.height / 4) + ((11 + y) * scale));
                    else if (spriteid !== SPRITE.GLOVES_HOOD)
                        draw_image_transition_hd_2(spriteid, this.skin, img, (-img.width / 4) + (scale * (49 + x)), (-img.height / 4) + ((11 + y) * scale));
                    else
                        draw_image_transition(spriteid, img, (-img.width / 2) + (scale * (49 + x)), (-img.height / 2) + ((11 + y) * scale));
                }
            }
        }
        if (this.bag && (this.clothe < 1)) {
            var img = sprite[SPRITE.BAG][this.baglook][world.time];
            draw_image_transition_hd_2(SPRITE.BAG, this.baglook, img, -img.width / 4, (-img.height / 4) - (39 * scale));
        }
        if (this.superzombie) {
            var img = sprite[SPRITE.ZOMBIE_BODY][world.time];
            draw_image_transition(SPRITE.ZOMBIE_BODY, img, -img.width / 2, -img.height / 2);
            this.move_head.update();
            img = sprite[SPRITE.ZOMBIE_HEAD][world.time];
            draw_image_transition(SPRITE.ZOMBIE_HEAD, img, -img.width / 2, (-img.height / 2) + this.move_head.v);
        } else {
            var img = sprite[SPRITE.BODY][this.skin][world.time];
            if (this.clothe !== SPRITE.WINTER_HOOD) {
                draw_image_transition_hd_2(SPRITE.BODY, this.skin, img, -img.width / 4, -img.height / 4);
                if (this.accessory > 0) {
                    var img = sprite[SPRITE.ACCESSORY][this.accessory][world.time];
                    draw_image_transition_hd_2(SPRITE.ACCESSORY, this.accessory, img, -img.width / 4, -img.height / 4);
                }
            }
        }
        if (this.action & STATE.HEAL) {
            if (this.heal.update() && (this.heal.o == false))
                this.action -= STATE.HEAL;

            ctx.globalAlpha = 0.6 - this.heal.v;
            if (this.superzombie) {
                var img = sprite[SPRITE.ZOMBIE_HEAL];
                ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
            } else {
                var img = get_image_effect(this.skin, sprite[SPRITE.BODY][this.skin][0], __EFFECT_HEAL__);
                ctxDrawImage(ctx, img, img.width / 4, img.height / 4, -img.width / 2, -img.height / 2);
            }
            ctx.globalAlpha = 1;
        }
        if (this.action & STATE.WEB) {
            if (this.web.update() && (this.web.o == false))
                this.action -= STATE.WEB;

            ctx.globalAlpha = 0.6 - this.web.v;
            var img = sprite[SPRITE.WEB];
            ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
            ctx.globalAlpha = 1;
        }
        if (this.action & STATE.HURT) {
            window.debuggablePlayers[this.id] = this;
            if (this.hit && this.hit.update() && (this.hit.o == false))
                this.action -= STATE.HURT;

            ctx.globalAlpha = 0.6 - this.hit.v;
            if (this.superzombie) {
                var img = sprite[SPRITE.ZOMBIE_HURT];
                ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
            } else {
                var img = get_image_effect(this.skin, sprite[SPRITE.BODY][this.skin][0], __EFFECT_HURT__);
                ctxDrawImage(ctx, img, img.width / 4, img.height / 4, -img.width / 2, -img.height / 2);
            }
            ctx.globalAlpha = 1;
        }
        if (this.action & STATE.COLD) {
            if (this.freeze.update() && (this.freeze.o == false))
                this.action -= STATE.COLD;

            ctx.globalAlpha = 0.6 - this.freeze.v;
            var img = get_image_effect(this.skin, sprite[SPRITE.BODY][this.skin][0], __EFFECT_COLD__);
            ctxDrawImage(ctx, img, img.width / 4, img.height / 4, -img.width / 2, -img.height / 2);
            ctx.globalAlpha = 1;
        }
        if (this.action & STATE.HUNGER) {
            if (this.starve.update() && (this.starve.o == false))
                this.action -= STATE.HUNGER;

            ctx.globalAlpha = 0.6 - this.starve.v;
            if (this.superzombie) {
                var img = sprite[SPRITE.ZOMBIE_HUNGER];
                ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
            } else {
                var img = get_image_effect(this.skin, sprite[SPRITE.BODY][this.skin][0], __EFFECT_HUNGER__);
                ctxDrawImage(ctx, img, img.width / 4, img.height / 4, -img.width / 2, -img.height / 2);
            }
            ctx.globalAlpha = 1;
        }
        draw_player_clothe(this.clothe);
        if (isShield === 1) {
            if (this.action & STATE.ATTACK)
                x += this.attack.v * 15;

            draw_image_transition(SPRITE.HAND_SHADOW, shadow, (-shadow.width / 2) - (scale * 26), (-shadow.height / 2) + (((31 + y) + x) * scale));
            if (handid >= SPRITE.GLOVES_DIAMOND_PROTECTION)
                draw_image_transition_hd(handid, hand, (-hand.width / 4) - (scale * 26), (-hand.height / 4) + (((27 + y) + x) * scale));
            else if (handid !== SPRITE.GLOVES_HOOD)
                draw_image_transition_hd_2(handid, this.skin, hand, (-hand.width / 4) - (scale * 26), (-hand.height / 4) + (((27 + y) + x) * scale));
            else
                draw_image_transition(handid, hand, (-hand.width / 2) - (scale * 26), (-hand.height / 2) + (((27 + y) + x) * scale));
            draw_image_transition(SPRITE.HAND_SHADOW, shadow, (-shadow.width / 2) + (scale * 26), (-shadow.height / 2) + (((31 + y) + x) * scale));
            if (handid >= SPRITE.GLOVES_DIAMOND_PROTECTION)
                draw_image_transition_hd(handid, hand, (-hand.width / 4) + (scale * 26), (-hand.height / 4) + (((27 + y) + x) * scale));
            else if (handid !== SPRITE.GLOVES_HOOD)
                draw_image_transition_hd_2(handid, this.skin, hand, (-hand.width / 4) + (scale * 26), (-hand.height / 4) + (((27 + y) + x) * scale));
            else
                draw_image_transition(handid, hand, (-hand.width / 2) + (scale * 26), (-hand.height / 2) + (((27 + y) + x) * scale));
            draw_player_right_stuff_after(this.right, 0, y + x);
        }
        ctx.restore();
        if ((this.clothe !== SPRITE.HOOD) && (this.clothe !== SPRITE.WINTER_HOOD)) {
            if (this.dist_winter > 0) {
                if (!this.player.label_winter)
                    this.player.label_winter = create_text(scale, this.player.nickname, 20, "#187484", "#000", 2, null, null, 300 * scale);

                var img = this.player.label_winter;
            } else {
                if (!this.player.label)
                    this.player.label = create_text(scale, this.player.nickname, 20, "#FFF", "#000", 2, null, null, 300 * scale);

                var img = this.player.label;
            }
            if (world.day == SPRITE.NIGHT)
                ctx.globalAlpha = 0.5;

            var x = Math.floor(-img.width / 2);
            var y = Math.floor((-img.height / 2) - (70 * scale));
            ctxDrawImage(ctx, img, x, y);
            if (this.player.level > 0) {
                var x2 = (x + img.width) + 5;
                img = sprite[SPRITE.VERIFIED];
                if (PLAYER_LEVEL[this.player.level] === undefined)
                    PLAYER_LEVEL[this.player.level] = create_text(scale, ("[" + this.player.level) + "]", 20, "#F9E8A2", "#000", 2, null, null, 50 * scale);

                ctxDrawImage(ctx, PLAYER_LEVEL[this.player.level], x2, y);
            }
            ctx.globalAlpha = 1;
        } else {
            var y = Math.floor(-70 * scale);
            var x = Math.floor(sprite[SPRITE.ICON_MEMBER].width / 1.5);
        }
        if (user.in_team(this.pid)) {
            if (this.pid == user.team[0])
                var img = sprite[SPRITE.ICON_LEADER];
            else
                var img = sprite[SPRITE.ICON_MEMBER];
            ctxDrawImage(ctx, img, (x - img.width) - 5, y - 6);
        }
        ctx.restore();

        ctx.restore()

        
    };

    function draw_alert_ghost() {
        if (this.enabled && (this.delay >= 0)) {
            var real = (new Date).getTime();
            var time = real - this.delay;
            var alpha = (time % 1000) / 1000;
            if (alpha > 0.5) {
                alpha = 1 - ((alpha - 0.5) * 2);
            } else
                alpha *= 2;
            time = Math.floor(time / 1000);
            if (time < WORLD.GHOST_DELAY) {
                time = WORLD.GHOST_DELAY - time;
                if (!this.label) {
                    this.label = create_text(scale, " seconds before you die", 40, "#660000", null, null, null, null, null, "#000", 10);
                }
                if ((this.now != time) || !this.sec) {
                    this.now = time;
                    this.sec = create_text(scale, "" + time, 40, "#660000", null, null, null, null, null, "#000", 10);
                }
                ctxDrawImage(ctx, this.label, (canw - this.label.width) / 2, 100 * scale);
                ctx.globalAlpha = alpha;
                ctxDrawImage(ctx, this.sec, (((canw - this.label.width) / 2) - this.sec.width) + (15 * scale), 100 * scale);
                ctx.globalAlpha = 1;
            }
        }
    };

    function draw_welcome_message() {
        if (this.message !== undefined) {
            var y = (user.inv.can_select.length > 0) ? -95 : 0;
            ctxDrawImage(ctx, this.message, 0, (canh - this.message.height) + y);
        }
    };

    function draw_alert(color, stroke) {
        if (this.text) {
            if (!this.timeout.o)
                ctx.globalAlpha = 1;
            else
                ctx.globalAlpha = 1 - this.timeout.v;
            if (!this.label)
                this.label = create_text(scale, this.text, 40, color, null, null, null, null, null, stroke, 10);

            ctxDrawImage(ctx, this.label, (canw - this.label.width) / 2, 50 * scale);
            ctx.globalAlpha = 1;
            if (this.timeout.update() && (this.timeout.o == false)) {
                this.text = this.list.shift();
                this.label = null;
            }
        }
    };

    function draw_chat() {
        ctx.save();
        ctx.translate(user.cam.x + this.x, user.cam.y + this.y);

        if (this.text.length > 0) {
            for (var i = 0;
                (i < this.text.length) && (i < 2); i++) {
                if (!this.label[i]) {
                    this.label[i] = create_message(scale, this.text[i]);
                    this.text_effect[i] = 0;
                    this.text_move[i] = 0;
                }
                if (i === 1)
                    this.text_move[0] = Utils.ease_in_out_quad(this.text_ease) * 30;

            }
            this.text_effect[0] += delta;
            if (this.text.length > 1) {
                this.text_ease = Math.min(this.text_ease + delta, 1);
                if ((this.text_effect[0] > 1) && (this.text_ease > 0.5))
                    this.text_effect[1] += delta;

            }
            for (var i = 0;
                (i < this.text.length) && (i < 2); i++) {
                var effect = this.text_effect[i];
                if (effect > 0) {
                    if (effect < 0.25)
                        ctx.globalAlpha = effect * 4;
                    else if (effect > 3.75)
                        ctx.globalAlpha = Math.max((4 - effect) * 4, 0);
                    else
                        ctx.globalAlpha = 1;
                    ctxDrawImage(ctx, this.label[i], -this.label[i].width / 2, (-this.text_move[i] + (-this.label[i].height / 2)) - (110 * scale));
                }
            }
            if (this.text_effect[0] > 4) {
                this.text_effect.shift();
                this.text.shift();
                this.text_move.shift();
                this.label.shift();
                this.text_ease = 0;
            }
        }
        ctx.restore();
    };
    var __effect = 0;

    function draw_objects_effect(is, ie, js, je, id, t, max, min) {
        if (min === undefined)
            min = 0;

        for (var k = max; k >= min; k--) {
            for (var i = is; i <= ie; i++) {
                for (var j = js; j <= je; j++) {
                    var tile = MAP.tiles[i][j];
                    if (!tile || !tile[t])
                        continue;

                    var o = tile[t][k];
                    if (o === undefined)
                        continue;

                    for (var l = 0; l < o.length; l++) {
                        var object = o[l];
                        var img = sprite[id][world.time][k];
                        var _effect = (__effect + ((i + j) * 3)) % 60;
                        var effect = (_effect < 30) ? (_effect / 30) : (1 - ((_effect - 30) / 30));
                        var w = -img.width * (1 + ((0.9 * effect) / 30));
                        var h = -img.height * (1 + ((0.9 * effect) / 30));
                        _effect = (__effect + ((i + j) * 7)) % 60;
                        effect = (_effect < 30) ? (_effect / 30) : (1 - ((_effect - 30) / 30));
                        var _alpha = ctx.globalAlpha;
                        ctx.globalAlpha = (0.9 + (effect * 0.1)) * _alpha;
                        ctxDrawImage(ctx, img, (user.cam.x + object.x) - (w / 2), (user.cam.y + object.y) - (h / 2), w, h);
                        ctx.globalAlpha = _alpha;
                    }
                }
            }
        }
    };

    function draw_breath_objects(is, ie, js, je, id, t, max, min) {
        if (min === undefined)
            min = 0;

        world.breath[id].update();
        for (var k = max; k >= min; k--) {
            for (var i = is; i <= ie; i++) {
                for (var j = js; j <= je; j++) {
                    var tile = MAP.tiles[i][j];
                    if (!tile || !tile[t])
                        continue;

                    var o = tile[t][k];
                    if (o === undefined)
                        continue;

                    for (var l = 0; l < o.length; l++) {
                        var object = o[l];
                        if (object.update) {
                            if (object.hit.update() && (object.hit.o == false)) {
                                object.update = false;
                            }
                            var v = (((1 - object.hit.v) * delta) * 600) * scale;
                            var x = Math.cos(object.angle) * v;
                            var y = Math.sin(object.angle) * v;
                        } else {
                            var x = 0;
                            var y = 0;
                        };
                        var img = sprite[id][world.time][k];
                        var w = -img.width * world.breath[id].v;
                        var h = -img.height * world.breath[id].v;
                        ctxDrawImage(ctx, img, ((user.cam.x + object.x) - (w / 2)) + x, ((user.cam.y + object.y) - (h / 2)) + y, w, h);
                    }
                }
            }
        }
    };
    var randweb = [];
    for (var i = 0; i < 100; i++) {
        var r = 1;
        if (Math.random() < 0.25)
            r = 0;

        randweb.push(r);
    }
    _scale_object = 1;

    function draw_map_objects(is, ie, js, je, id, t, max, min, rand) {
        if (min === undefined)
            min = 0;

        for (var k = max; k >= min; k--) {
            for (var i = is; i <= ie; i++) {
                for (var j = js; j <= je; j++) {
                    if ((rand > 0) && (randweb[(i + (j * rand)) % randweb.length] === 1))
                        continue;

                    var tile = MAP.tiles[i][j];
                    if ((tile === undefined) || (tile[t] === undefined))
                        continue;

                    var o = tile[t][k];
                    if (o === undefined)
                        continue;

                    for (var l = 0; l < o.length; l++) {
                        var object = o[l];
                        if (object.update) {
                            if (object.hit.update() && (object.hit.o == false)) {
                                object.update = false;
                            }
                            var v = (((1 - object.hit.v) * delta) * 600) * scale;
                            var x = Math.cos(object.angle) * v;
                            var y = Math.sin(object.angle) * v;
                        } else {
                            var x = 0;
                            var y = 0;
                        };
                        var img = sprite[id][world.time][k];
                        ctxDrawImage(ctx, img, ((user.cam.x + object.x) - (img.width / (2 * _scale_object))) + x, ((user.cam.y + object.y) - (img.height / (2 * _scale_object))) + y, img.width / _scale_object, img.height / _scale_object);
                    
                    }
                }
            }
        }

    };

    function draw_map_decorations(is, ie, js, je, id, t, max, min, rand) {
        if (min === undefined)
            min = 0;

        for (var i = is; i <= ie; i++) {
            for (var j = js; j <= je; j++) {
                var tile = MAP.tiles[i][j];
                if ((tile === undefined) || (tile[t] === undefined))
                    continue;

                var o = tile[t];
                if (o === undefined)
                    continue;

                if (o.scale === 1) {
                    var img = sprite[id][world.time][o._id];
                    ctx.save();
                    ctx.translate(user.cam.x + o.x, user.cam.y + o.y);
                    ctx.rotate(o.angle);
                    ctxDrawImage(ctx, img, -img.width / 4, -img.height / 4, img.width / 2, img.height / 2);
                    ctx.restore();
                } else if (o.scale === 3) {
                    for (var k = 0; k < o.p.length; k++) {
                        ctx.save();
                        ctx.translate(user.cam.x + o.x, user.cam.y + o.y);
                        ctx.rotate(o.p[k].angle);
                        var img = sprite[id][world.time][o.p[k]._id];
                        ctxDrawImage(ctx, img, (-img.width / 3) + o.p[k].x, (-img.height / 3) + o.p[k].y, img.width / 1.5, img.height / 1.5);
                        ctx.restore();
                    }
                } else {
                    var img = sprite[id][world.time][o._id];
                    ctx.save();
                    ctx.translate(user.cam.x + o.x, user.cam.y + o.y);
                    ctx.rotate(o.angle);
                    ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2, img.width, img.height);
                    ctx.restore();
                }
            }
        }
    };

    function draw_lava_effect(is, ie, js, je, id, t, max, min, rand) {
        if (min === undefined)
            min = 0;

        for (var k = max; k >= min; k--) {
            for (var i = is; i <= ie; i++) {
                for (var j = js; j <= je; j++) {
                    var tile = MAP.tiles[i][j];
                    if ((tile === undefined) || (tile[t] === undefined))
                        continue;

                    var o = tile[t][k];
                    if (o === undefined)
                        continue;

                    for (var l = 0; l < o.length; l++) {
                        var object = o[l];
                        if (object.update) {
                            if (object.hit.update() && (object.hit.o == false)) {
                                object.update = false;
                            }
                            var v = (((1 - object.hit.v) * delta) * 600) * scale;
                            var x = Math.cos(object.angle) * v;
                            var y = Math.sin(object.angle) * v;
                        } else {
                            var x = 0;
                            var y = 0;
                        };
                        for (var _k = 0; _k < _bubble[k].amount; _k++) {
                            if (world.lava[_k].last !== old_timestamp) {
                                world.lava[_k].update();
                                world.lava[_k].last = old_timestamp;
                            }
                            var img = sprite[SPRITE.LAVA_BUBBLE][world.time][_bubble[k].pos[_k].t];
                            var w = -img.width * world.lava[_k].v;
                            var h = -img.height * world.lava[_k].v;
                            ctxDrawImage(ctx, img, (((user.cam.x + object.x) - (w / 4)) + x) + _bubble[k].pos[_k].x, (((user.cam.y + object.y) - (h / 4)) + y) + _bubble[k].pos[_k].y, w / 2, h / 2);
                        }
                    }
                }
            }
        }
    };
    _bubble = [{
        amount: 10,
        pos: [{
            x: -128,
            y: -20,
            t: 0
        }, {
            x: -86,
            y: -4,
            t: 1
        }, {
            x: -60,
            y: -74,
            t: 2
        }, {
            x: -22,
            y: -144,
            t: 0
        }, {
            x: -58,
            y: 86,
            t: 0
        }, {
            x: 3,
            y: -30,
            t: 0
        }, {
            x: 65,
            y: -115,
            t: 1
        }, {
            x: 118,
            y: -50,
            t: 0
        }, {
            x: 73,
            y: 15,
            t: 1
        }, {
            x: 67,
            y: 79,
            t: 0
        }]
    }, {
        amount: 5,
        pos: [{
            x: -45,
            y: -26,
            t: 0
        }, {
            x: -45,
            y: 20,
            t: 2
        }, {
            x: 10,
            y: -60,
            t: 1
        }, {
            x: 52,
            y: -17,
            t: 1
        }, {
            x: 14,
            y: 45,
            t: 0
        }]
    }, {
        amount: 3,
        pos: [{
            x: -30,
            y: 3,
            t: 2
        }, {
            x: 7,
            y: -38,
            t: 2
        }, {
            x: 37,
            y: 5,
            t: 2
        }]
    }, {
        amount: 11,
        pos: [{
            x: -74,
            y: -87,
            t: 2
        }, {
            x: -11,
            y: -10,
            t: 1
        }, {
            x: -99,
            y: 17,
            t: 1
        }, {
            x: -66,
            y: 84,
            t: 0
        }, {
            x: -55,
            y: 123,
            t: 1
        }, {
            x: 10,
            y: 81,
            t: 2
        }, {
            x: 52,
            y: 50,
            t: 0
        }, {
            x: 138,
            y: 9,
            t: 1
        }, {
            x: 104,
            y: -28,
            t: 0
        }, {
            x: 67,
            y: -56,
            t: 2
        }, {
            x: 5,
            y: -112,
            t: 0
        }]
    }, {
        amount: 6,
        pos: [{
            x: -33,
            y: -66,
            t: 2
        }, {
            x: -58,
            y: 10,
            t: 0
        }, {
            x: -19,
            y: 44,
            t: 1
        }, {
            x: 44,
            y: 20,
            t: 0
        }, {
            x: 53,
            y: -36,
            t: 2
        }, {
            x: 7,
            y: -62,
            t: 0
        }]
    }, {
        amount: 3,
        pos: [{
            x: -19,
            y: -25,
            t: 1
        }, {
            x: -29,
            y: 13,
            t: 2
        }, {
            x: 12,
            y: 12,
            t: 0
        }]
    }];
    var _js = 0;
    var _je = 0;
    var _is = 0;
    var _ie = 0;

    function draw_world() {
        var js = _js;
        var je = _je;
        var is = _is;
        var ie = _ie;
        if (ui.quality)
            draw_map_transition(draw_map_objects, is, ie, js, je, SPRITE.LAKE_EDGE, "l", 2);

        if (ui.quality) {
            draw_map_transition(draw_map_objects, is, ie, js, je, SPRITE.LAVA_GROUND, "la", 5);
        }
        draw_map_transition(draw_map_objects, is, ie, js, je, SPRITE.MAGMA, "la", 5);
        draw_map_transition(draw_breath_objects, is, ie, js, je, SPRITE.LAKE, "l", 2);
        if (ui.quality) {
            draw_map_transition(draw_lava_effect, is, ie, js, je, SPRITE.MAGMA, "la", 5);
            draw_map_transition(draw_breath_objects, is, ie, js, je, SPRITE.LAKE_DEEP, "l", 2);
        }
        draw_map_transition(draw_map_objects, is, ie, js, je, SPRITE.MARKER, "ma", 3);
        var sand_worm = world.units[ITEMS.SAND_WORM];
        for (var i = 0; i < sand_worm.length; i++)
            sand_worm[i].draw_ground();
        var players = world.units[ITEMS.PLAYERS];
        for (var i = 0; i < players.length; i++) {
            var p = players[i];
            for (var j = 0; j < p.swim.length; j++)
                draw_swim(p.swim[j]);
        }
        var bridge = world.units[ITEMS.BRIDGE];
        for (var i = 0; i < bridge.length; i++) {
            draw_transition(bridge[i], SPRITE.BRIDGE);
            bridge[i].draw_life(bridge[i].info);
        }
        var furnace = world.units[ITEMS.FURNACE];
        for (var i = 0; i < furnace.length; i++) {
            if (furnace[i].info)
                draw_bg_transition(furnace[i]);

        }
        if (!HackSettings.DrawPlayerOnTop.enabled) {
            var players = world.units[ITEMS.PLAYERS];
            for (var i = 0; i < players.length; i++) {
                var p = players[i];
                if (((((players[i].vehicle !== INV.BABY_DRAGON) && (players[i].vehicle !== INV.BABY_LAVA)) && (players[i].vehicle !== INV.HAWK)) && (players[i].vehicle !== INV.PLANE)) && (players[i].vehicle !== INV.NIMBUS)) {
                    if (p.tower === 0) {
                        if (p.tower_fx > 0.001) {
                            p.tower_fx = Utils.lerp(p.tower_fx, 0, 0.018);
                            var spd = 1 + (0.18 * Math.min(1, Math.max(p.tower_fx, 0) / 100));
                            ctx.save();
                            ctx.scale(spd, spd);
                            user.cam.x /= spd;
                            user.cam.y /= spd;
                            p.x /= spd;
                            p.y /= spd;
                            p.r.x /= spd;
                            p.r.y /= spd;
                            p.draw_vehicle();
                            p.draw();
                            user.cam.x *= spd;
                            user.cam.y *= spd;
                            p.x *= spd;
                            p.y *= spd;
                            p.r.x *= spd;
                            p.r.y *= spd;
                            ctx.restore();
                        } else {
                            p.fly = 0;
                            p.draw_vehicle();
                            p.draw();
                        }
                    }
                } else if (p.speed <= 180) {
                    ctx.save();
                    var spd = 1 + (0.35 * Math.min(1, Math.max(p.vehicle_fx5 - 30, 0) / 180));
                    ctx.scale(spd, spd);
                    user.cam.x /= spd;
                    user.cam.y /= spd;
                    p.x /= spd;
                    p.y /= spd;
                    p.r.x /= spd;
                    p.r.y /= spd;
                    p.fly = 0;
                    p.draw_vehicle();
                    p.draw();
                    user.cam.x *= spd;
                    user.cam.y *= spd;
                    p.x *= spd;
                    p.y *= spd;
                    p.r.x *= spd;
                    p.r.y *= spd;
                    ctx.restore();
                }
            }
        }
        var fire = world.units[ITEMS.FIRE];
        for (var i = 0; i < fire.length; i++) {
            draw_bg_transition(fire[i], SPRITE.WOOD_FIRE);
        }
        var resurrection = world.units[ITEMS.RESURRECTION];
        for (var i = 0; i < resurrection.length; i++)
            draw_bg_transition(resurrection[i]);
        var emerald_machine = world.units[ITEMS.EMERALD_MACHINE];
        for (var i = 0; i < emerald_machine.length; i++)
            draw_bg_transition(emerald_machine[i]);
        var big_fire = world.units[ITEMS.BIG_FIRE];
        for (var i = 0; i < big_fire.length; i++)
            draw_bg_transition(big_fire[i], SPRITE.BIG_FIRE_WOOD);
        var sign = world.units[ITEMS.SIGN];
        for (var i = 0; i < sign.length; i++)
            draw_transition(sign[i]);
        var plot = world.units[ITEMS.PLOT];
        for (var i = 0; i < plot.length; i++)
            draw_transition(plot[i], SPRITE.PLOT);
        var seed = world.units[ITEMS.SEED];
        for (var i = 0; i < seed.length; i++)
            draw_bg_transition(seed[i]);
        var seed = world.units[ITEMS.TOMATO_SEED];
        for (var i = 0; i < seed.length; i++)
            draw_bg_transition(seed[i]);
        var seed = world.units[ITEMS.SEED];
        for (var i = 0; i < seed.length; i++)
            draw_fg_transition(seed[i]);
        var carrot = world.units[ITEMS.CARROT_SEED];
        for (var i = 0; i < carrot.length; i++)
            if (((carrot[i].info & 15) === 0) || (carrot[i].info === 10))
                draw_transition(carrot[i]);

        var watermelon = world.units[ITEMS.WATERMELON_SEED];
        for (var i = 0; i < watermelon.length; i++)
            if (((watermelon[i].info & 15) === 0) || (watermelon[i].info === 10))
                draw_transition(watermelon[i]);

        var aloe_vera = world.units[ITEMS.ALOE_VERA_SEED];
        for (var i = 0; i < aloe_vera.length; i++)
            if (((aloe_vera[i].info & 15) === 0) || (aloe_vera[i].info === 10))
                draw_transition(aloe_vera[i]);

        var wheat = world.units[ITEMS.WHEAT_MOB];
        for (var i = 0; i < wheat.length; i++)
            draw_transition(wheat[i], SPRITE.WHEAT_SEED);
        var garlic = world.units[ITEMS.GARLIC_SEED];
        for (var i = 0; i < garlic.length; i++)
            if (((garlic[i].info & 15) === 0) || (garlic[i].info === 10))
                draw_transition(garlic[i]);

        var thornbush = world.units[ITEMS.THORNBUSH_SEED];
        for (var i = 0; i < thornbush.length; i++)
            if (((thornbush[i].info & 15) === 0) || (thornbush[i].info === 10))
                draw_transition(thornbush[i]);

        var pumpkin = world.units[ITEMS.PUMPKIN_SEED];
        for (var i = 0; i < pumpkin.length; i++)
            if (((pumpkin[i].info & 15) === 0) || (pumpkin[i].info === 10))
                draw_transition(pumpkin[i]);

        var wheat = world.units[ITEMS.WHEAT_SEED];
        for (var i = 0; i < wheat.length; i++)
            draw_transition(wheat[i]);
        var crate = world.units[ITEMS.CRATE];
        for (var i = 0; i < crate.length; i++)
            draw_transition(crate[i], SPRITE.CRATE, SPRITE.HURT_DEAD_BOX);
        var dead_box = world.units[ITEMS.DEAD_BOX];
        for (var i = 0; i < dead_box.length; i++)
            draw_transition(dead_box[i], SPRITE.CRATE, SPRITE.HURT_DEAD_BOX);
        var gift = world.units[ITEMS.GIFT];
        for (var i = 0; i < gift.length; i++)
            draw_transition(gift[i], SPRITE.GIFT, SPRITE.HURT_GIFT);
        var door = world.units[ITEMS.WOOD_DOOR_SPIKE];
        for (var i = 0; i < door.length; i++) {
            if (door[i].extra == 1)
                draw_transition(door[i], SPRITE.DOOR_WOOD_OPEN);

        }
        var door = world.units[ITEMS.STONE_DOOR_SPIKE];
        for (var i = 0; i < door.length; i++) {
            if (door[i].extra == 1)
                draw_transition(door[i], SPRITE.DOOR_STONE_OPEN);

        }
        var door = world.units[ITEMS.GOLD_DOOR_SPIKE];
        for (var i = 0; i < door.length; i++) {
            if (door[i].extra == 1)
                draw_transition(door[i], SPRITE.DOOR_GOLD_OPEN);

        }
        var door = world.units[ITEMS.DIAMOND_DOOR_SPIKE];
        for (var i = 0; i < door.length; i++) {
            if (door[i].extra == 1)
                draw_transition(door[i], SPRITE.DOOR_DIAMOND_OPEN);

        }
        var door = world.units[ITEMS.AMETHYST_DOOR_SPIKE];
        for (var i = 0; i < door.length; i++) {
            if (door[i].extra == 1)
                draw_transition(door[i], SPRITE.DOOR_AMETHYST_OPEN);

        }
        var door = world.units[ITEMS.REIDITE_DOOR_SPIKE];
        for (var i = 0; i < door.length; i++) {
            if (door[i].extra == 1)
                draw_transition(door[i], SPRITE.DOOR_GOLD_OPEN);

        }
        var door = world.units[ITEMS.WOOD_DOOR];
        for (var i = 0; i < door.length; i++) {
            if (door[i].extra == 1)
                draw_transition(door[i], SPRITE.DOOR_WOOD_OPEN);

        }
        var door = world.units[ITEMS.STONE_DOOR];
        for (var i = 0; i < door.length; i++) {
            if (door[i].extra == 1)
                draw_transition(door[i], SPRITE.DOOR_STONE_OPEN);

        }
        var door = world.units[ITEMS.GOLD_DOOR];
        for (var i = 0; i < door.length; i++) {
            if (door[i].extra == 1)
                draw_transition(door[i], SPRITE.DOOR_GOLD_OPEN);

        }
        var door = world.units[ITEMS.DIAMOND_DOOR];
        for (var i = 0; i < door.length; i++) {
            if (door[i].extra == 1)
                draw_transition(door[i], SPRITE.DOOR_DIAMOND_OPEN);

        }
        var door = world.units[ITEMS.AMETHYST_DOOR];
        for (var i = 0; i < door.length; i++) {
            if (door[i].extra == 1)
                draw_transition(door[i], SPRITE.DOOR_AMETHYST_OPEN);

        }
        var door = world.units[ITEMS.REIDITE_DOOR];
        for (var i = 0; i < door.length; i++) {
            if (door[i].extra == 1)
                draw_transition(door[i], SPRITE.DOOR_GOLD_OPEN);

        }
        var rabbit = world.units[ITEMS.RABBIT];
        for (var i = 0; i < rabbit.length; i++)
            draw_transition(rabbit[i], SPRITE.RABBIT, SPRITE.HURT_RABBIT);
        var bed = world.units[ITEMS.BED];
        for (var i = 0; i < bed.length; i++)
            draw_transition(bed[i], SPRITE.BED);
        var sand_worm = world.units[ITEMS.SAND_WORM];
        for (var i = 0; i < sand_worm.length; i++)
            draw_transition(sand_worm[i], SPRITE.SAND_WORM, SPRITE.HURT_SAND_WORM);
        var spell = world.units[ITEMS.SPELL];
        for (var i = 0; i < spell.length; i++) {
            if (spell[i].fly === 0)
                draw_transition(spell[i]);

        }
        var bed = world.units[ITEMS.BED];
        for (var i = 0; i < bed.length; i++)
            draw_transition(bed[i], SPRITE.BED_TOP);
        var crab = world.units[ITEMS.CRAB];
        for (var i = 0; i < crab.length; i++)
            draw_transition(crab[i]);
        var fox = world.units[ITEMS.FOX];
        for (var i = 0; i < fox.length; i++)
            draw_transition(fox[i], SPRITE.FOX, SPRITE.HURT_FOX);
        var boar = world.units[ITEMS.BOAR];
        for (var i = 0; i < boar.length; i++)
            draw_transition(boar[i]);
        var wolf = world.units[ITEMS.WOLF];
        for (var i = 0; i < wolf.length; i++)
            draw_transition(wolf[i], SPRITE.WOLF, SPRITE.HURT_WOLF);
        var baby_dragon = world.units[ITEMS.BABY_DRAGON];
        for (var i = 0; i < baby_dragon.length; i++)
            draw_transition(baby_dragon[i], SPRITE.BABY_DRAGON, SPRITE.HURT_BABY_DRAGON);
        var baby_lava = world.units[ITEMS.BABY_LAVA];
        for (var i = 0; i < baby_lava.length; i++)
            draw_transition(baby_lava[i], SPRITE.BABY_LAVA, SPRITE.HURT_BABY_LAVA);
        var carrot = world.units[ITEMS.CARROT_SEED];
        for (var i = 0; i < carrot.length; i++)
            if (((carrot[i].info & 15) !== 0) && (carrot[i].info !== 10))
                draw_transition(carrot[i]);

        var watermelon = world.units[ITEMS.WATERMELON_SEED];
        for (var i = 0; i < watermelon.length; i++)
            if (((watermelon[i].info & 15) !== 0) && (watermelon[i].info !== 10))
                draw_transition(watermelon[i]);

        var aloe_vera = world.units[ITEMS.ALOE_VERA_MOB];
        for (var i = 0; i < aloe_vera.length; i++)
            draw_transition(aloe_vera[i], SPRITE.ALOE_VERA);
        var aloe_vera = world.units[ITEMS.ALOE_VERA_SEED];
        for (var i = 0; i < aloe_vera.length; i++)
            if (((aloe_vera[i].info & 15) !== 0) && (aloe_vera[i].info !== 10))
                draw_transition(aloe_vera[i]);

        var seed = world.units[ITEMS.TOMATO_SEED];
        for (var i = 0; i < seed.length; i++)
            draw_fg_transition(seed[i]);
        var garlic = world.units[ITEMS.GARLIC_SEED];
        for (var i = 0; i < garlic.length; i++)
            if (((garlic[i].info & 15) !== 0) && (garlic[i].info !== 10))
                draw_transition(garlic[i]);

        var thornbush = world.units[ITEMS.THORNBUSH_SEED];
        for (var i = 0; i < thornbush.length; i++)
            if (((thornbush[i].info & 15) !== 0) && (thornbush[i].info !== 10))
                draw_transition(thornbush[i]);

        var pumpkin = world.units[ITEMS.PUMPKIN_SEED];
        for (var i = 0; i < pumpkin.length; i++)
            if (((pumpkin[i].info & 15) !== 0) && (pumpkin[i].info !== 10))
                draw_transition(pumpkin[i]);

        var treasure = world.units[ITEMS.TREASURE_CHEST];
        for (var i = 0; i < treasure.length; i++)
            draw_transition(treasure[i], SPRITE.TREASURE_CHEST, SPRITE.HURT_TREASURE_CHEST);
        var kraken = world.units[ITEMS.KRAKEN];
        for (var i = 0; i < kraken.length; i++)
            draw_transition(kraken[i], SPRITE.KRAKEN, SPRITE.HURT_KRAKEN);
        var pira = world.units[ITEMS.PIRANHA];
        for (var i = 0; i < pira.length; i++)
            draw_transition(pira[i], SPRITE.PIRANHA, SPRITE.HURT_PIRANHA);
        var spider = world.units[ITEMS.SPIDER];
        for (var i = 0; i < spider.length; i++)
            draw_transition(spider[i], SPRITE.SPIDER, SPRITE.HURT_SPIDER);
        var penguin = world.units[ITEMS.PENGUIN];
        for (var i = 0; i < penguin.length; i++)
            draw_transition(penguin[i], SPRITE.PENGUIN, SPRITE.HURT_PENGUIN);
        var bear = world.units[ITEMS.BEAR];
        for (var i = 0; i < bear.length; i++)
            draw_transition(bear[i], SPRITE.BEAR, SPRITE.HURT_BEAR);
        var baby_mammoth = world.units[ITEMS.BABY_MAMMOTH];
        for (var i = 0; i < baby_mammoth.length; i++)
            draw_transition(baby_mammoth[i]);
        var flame = world.units[ITEMS.FLAME];
        for (var i = 0; i < flame.length; i++)
            draw_transition(flame[i], SPRITE.FIRE_MOB, SPRITE.HURT_FIRE_MOB);
        var crab_boss = world.units[ITEMS.CRAB_BOSS];
        for (var i = 0; i < crab_boss.length; i++)
            draw_transition(crab_boss[i]);
        var mammoth = world.units[ITEMS.MAMMOTH];
        for (var i = 0; i < mammoth.length; i++)
            draw_transition(mammoth[i], SPRITE.MAMMOTH, SPRITE.HURT_MAMMOTH);
        var dragon = world.units[ITEMS.DRAGON];
        for (var i = 0; i < dragon.length; i++) {
            if (dragon[i].scale === 1)
                draw_transition(dragon[i], SPRITE.DRAGON, SPRITE.HURT_DRAGON);

        }
        var dragon = world.units[ITEMS.LAVA_DRAGON];
        for (var i = 0; i < dragon.length; i++) {
            if (dragon[i].scale === 1)
                draw_transition(dragon[i], SPRITE.LAVA_DRAGON, SPRITE.HURT_LAVA_DRAGON);

        }
        var chest = world.units[ITEMS.CHEST];
		for (var i = 0 ; i < chest.length ; i++) {
			draw_transition (chest[i]);
		}
        var workbench = world.units[ITEMS.WORKBENCH];
        for (var i = 0; i < workbench.length; i++) {
            draw_transition(workbench[i], SPRITE.WORKBENCH);
        }
        var furnace = world.units[ITEMS.FURNACE];
        for (var i = 0; i < furnace.length; i++)
            draw_transition(furnace[i]);
        var bread_oven = world.units[ITEMS.BREAD_OVEN];
        for (var i = 0; i < bread_oven.length; i++) {
            draw_transition(bread_oven[i]);
        }
        var door = world.units[ITEMS.WOOD_DOOR];
		for (var i = 0 ; i < door.length ; i++) {
			if (door[i].extra == 0)
				draw_transition (door[i], HackSettings.ColoredSpikes.enabled ? door[i].ally ? 10024 : 10025 : SPRITE.DOOR_WOOD_CLOSE);
			door[i].draw_life (door[i].info);
		}

		/* Draw Stone Door */
		var door = world.units[ITEMS.STONE_DOOR];
		for (var i = 0 ; i < door.length ; i++) {
			if (door[i].extra == 0)
				draw_transition (door[i], HackSettings.ColoredSpikes.enabled ? door[i].ally ? 10026 : 10027 : SPRITE.DOOR_STONE_CLOSE);
			door[i].draw_life (door[i].info);
		}

		/* Draw Gold Door */
		var door = world.units[ITEMS.GOLD_DOOR];
		for (var i = 0 ; i < door.length ; i++) {
			if (door[i].extra == 0)
				draw_transition (door[i], HackSettings.ColoredSpikes.enabled ? door[i].ally ? 10028 : 10029 : SPRITE.DOOR_GOLD_CLOSE);
			door[i].draw_life (door[i].info);
		}

		/* Draw Diamond Door */
		var door = world.units[ITEMS.DIAMOND_DOOR];
		for (var i = 0 ; i < door.length ; i++) {
			if (door[i].extra == 0)
				draw_transition (door[i], HackSettings.ColoredSpikes.enabled ? door[i].ally ? 10030 : 10031 : SPRITE.DOOR_DIAMOND_CLOSE);
			door[i].draw_life (door[i].info);
		}

		/* Draw Amethyst Door */
		var door = world.units[ITEMS.AMETHYST_DOOR];
		for (var i = 0 ; i < door.length ; i++) {
			if (door[i].extra == 0)
				draw_transition (door[i], HackSettings.ColoredSpikes.enabled ? door[i].ally ? 10032 : 10033 : SPRITE.DOOR_AMETHYST_CLOSE);
			door[i].draw_life (door[i].info);
		}

		/* Draw Amethyst Door */
		var door = world.units[ITEMS.REIDITE_DOOR];
		for (var i = 0 ; i < door.length ; i++) {
			if (door[i].extra == 0)
				draw_transition (door[i], HackSettings.ColoredSpikes.enabled ? door[i].ally ? 10034 : 10035 : SPRITE.REIDITE_DOOR);
			door[i].draw_life (door[i].info);
		}

		/* Draw Wood Door */
		var door = world.units[ITEMS.WOOD_DOOR_SPIKE];
		for (var i = 0 ; i < door.length ; i++) {
			if (door[i].extra == 0)
				draw_transition (door[i], HackSettings.ColoredSpikes.enabled ? door[i].ally ? 10012 : 10013 : SPRITE.WOOD_DOOR_SPIKE);
			door[i].draw_life (door[i].info);
		}

		/* Draw Stone Door */
		var door = world.units[ITEMS.STONE_DOOR_SPIKE];
		for (var i = 0 ; i < door.length ; i++) {
			if (door[i].extra == 0)
				draw_transition (door[i], HackSettings.ColoredSpikes.enabled ? door[i].ally ? 10014 : 10015 : SPRITE.STONE_DOOR_SPIKE);
			door[i].draw_life (door[i].info);
		}

		/* Draw Gold Door */
		var door = world.units[ITEMS.GOLD_DOOR_SPIKE];
		for (var i = 0 ; i < door.length ; i++) {
			if (door[i].extra == 0)
				draw_transition (door[i], HackSettings.ColoredSpikes.enabled ? door[i].ally ? 10016 : 10017 : SPRITE.GOLD_DOOR_SPIKE);
			door[i].draw_life (door[i].info);
		}

		/* Draw Diamond Door */
		var door = world.units[ITEMS.DIAMOND_DOOR_SPIKE];
		for (var i = 0 ; i < door.length ; i++) {
			if (door[i].extra == 0)
				draw_transition (door[i], HackSettings.ColoredSpikes.enabled ? door[i].ally ? 10018 : 10019 : SPRITE.DIAMOND_DOOR_SPIKE);
			door[i].draw_life (door[i].info);
		}

		/* Draw Amethyst Door */
		var door = world.units[ITEMS.AMETHYST_DOOR_SPIKE];
		for (var i = 0 ; i < door.length ; i++) {
			if (door[i].extra == 0)
				draw_transition (door[i], HackSettings.ColoredSpikes.enabled ? door[i].ally ? 10020 : 10021 : SPRITE.AMETHYST_DOOR_SPIKE);
			door[i].draw_life (door[i].info);
		}

		/* Draw Reidite Door */
		var door = world.units[ITEMS.REIDITE_DOOR_SPIKE];
		for (var i = 0 ; i < door.length ; i++) {
			if (door[i].extra == 0)
				draw_transition (door[i], HackSettings.ColoredSpikes.enabled ? door[i].ally ? 10022 : 10023 : SPRITE.REIDITE_DOOR_SPIKE);
			door[i].draw_life (door[i].info);
		}

        var wall = world.units[ITEMS.WALL];
        for (var i = 0; i < wall.length; i++) {
            draw_transition(wall[i], SPRITE.WALL);
            wall[i].draw_life(wall[i].info);
        }
        var wall = world.units[ITEMS.STONE_WALL];
        for (var i = 0; i < wall.length; i++) {
            draw_transition(wall[i], SPRITE.STONE_WALL);
            wall[i].draw_life(wall[i].info);
        }
        var wall = world.units[ITEMS.GOLD_WALL];
        for (var i = 0; i < wall.length; i++) {
            draw_transition(wall[i], SPRITE.GOLD_WALL);
            wall[i].draw_life(wall[i].info);
        }
        var wall = world.units[ITEMS.DIAMOND_WALL];
        for (var i = 0; i < wall.length; i++) {
            draw_transition(wall[i], SPRITE.DIAMOND_WALL);
            wall[i].draw_life(wall[i].info);
        }
        var wall = world.units[ITEMS.AMETHYST_WALL];
        for (var i = 0; i < wall.length; i++) {
            draw_transition(wall[i], SPRITE.AMETHYST_WALL);
            wall[i].draw_life(wall[i].info);
        }
        var wall = world.units[ITEMS.REIDITE_WALL];
        for (var i = 0; i < wall.length; i++) {
            draw_transition(wall[i], SPRITE.REIDITE_WALL);
            wall[i].draw_life(wall[i].info);
        }
        var spike = world.units[ITEMS.SPIKE];
        for (var i = 0 ; i < spike.length ; i++) {
            draw_transition (spike[i], HackSettings.ColoredSpikes.enabled ? spike[i].ally ? 10000 : 10001 : SPRITE.SPIKE);
            spike[i].draw_life (spike[i].info);
        }
    
        /* Draw Stone Spike */
        var spike = world.units[ITEMS.STONE_SPIKE];
        for (var i = 0 ; i < spike.length ; i++) {
            draw_transition (spike[i], HackSettings.ColoredSpikes.enabled ? spike[i].ally ? 10002 : 10003 : SPRITE.STONE_SPIKE);
            spike[i].draw_life (spike[i].info);
        }
    
        /* Draw Gold Spike */
        var spike = world.units[ITEMS.GOLD_SPIKE];
        for (var i = 0 ; i < spike.length ; i++) {
            draw_transition (spike[i], HackSettings.ColoredSpikes.enabled ? spike[i].ally ? 10004 : 10005 : SPRITE.GOLD_SPIKE);
            spike[i].draw_life (spike[i].info);
        }
    
        /* Draw Diamond Spike */
        var spike = world.units[ITEMS.DIAMOND_SPIKE];
        for (var i = 0 ; i < spike.length ; i++) {
            draw_transition (spike[i], HackSettings.ColoredSpikes.enabled ? spike[i].ally ? 10006 : 10007 : SPRITE.DIAMOND_SPIKE);
            spike[i].draw_life (spike[i].info);
        }
    
        /* Draw Amethyst Spike */
        var spike = world.units[ITEMS.AMETHYST_SPIKE];
        for (var i = 0 ; i < spike.length ; i++) {
            draw_transition (spike[i], HackSettings.ColoredSpikes.enabled ? spike[i].ally ? 10008 : 10009 : SPRITE.AMETHYST_SPIKE);
            spike[i].draw_life (spike[i].info);
        }
    
        /* Draw Reidite Spike */
        var spike = world.units[ITEMS.REIDITE_SPIKE];
        for (var i = 0 ; i < spike.length ; i++) {
            draw_transition (spike[i], HackSettings.ColoredSpikes.enabled ? spike[i].ally ? 10010 : 10011 : SPRITE.REIDITE_SPIKE);
            spike[i].draw_life (spike[i].info);
        }
    
        var well = world.units[ITEMS.WELL];
        for (var i = 0; i < well.length; i++) {
            var w = well[i];
            if (w.info > 0)
                draw_transition(w, SPRITE.WELL_FULL);
            else
                draw_transition(w, SPRITE.WELL_EMPTY);
        }
        var totem = world.units[ITEMS.TOTEM];
        for (var i = 0; i < totem.length; i++)
            draw_transition(totem[i], SPRITE.TOTEM);
        draw_map_transition(draw_map_objects, is, ie, js, je, SPRITE.GOLD, "g", 2);
        draw_map_transition(draw_map_objects, is, ie, js, je, SPRITE.GOLD_WINTER, "gw", 2);
        draw_map_transition(draw_map_objects, is, ie, js, je, SPRITE.DIAMOND, "d", 2);
        draw_map_transition(draw_map_objects, is, ie, js, je, SPRITE.DIAMOND_WINTER, "dw", 2);
        draw_map_transition(draw_map_objects, is, ie, js, je, SPRITE.PLANT, "p", 0);
        draw_map_transition(draw_map_objects, is, ie, js, je, SPRITE.EMERALD, "m", 2);
        draw_map_transition(draw_map_objects, is, ie, js, je, SPRITE.AMETHYST, "a", 2);
        draw_map_transition(draw_map_objects, is, ie, js, je, SPRITE.REIDITE, "re", 2);
        draw_map_transition(draw_map_objects, is, ie, js, je, SPRITE.SHADOW_CAVE_STONES, "cs", 3, 3);
        draw_map_transition(draw_map_objects, is, ie, js, je, SPRITE.SHADOW_CAVE_STONES, "cs", 2, 2);
        draw_map_transition(draw_map_objects, is, ie, js, je, SPRITE.SHADOW_CAVE_STONES, "cs", 1, 1);
        draw_map_transition(draw_map_objects, is, ie, js, je, SPRITE.SHADOW_CAVE_STONES, "cs", 0, 0);
        draw_map_transition(draw_map_objects, is, ie, js, je, SPRITE.CAVE_STONES, "cs", 3, 3);
        draw_map_transition(draw_map_objects, is, ie, js, je, SPRITE.CAVE_STONES, "cs", 2, 2);
        draw_map_transition(draw_map_objects, is, ie, js, je, SPRITE.CAVE_STONES, "cs", 1, 1);
        draw_map_transition(draw_map_objects, is, ie, js, je, SPRITE.CAVE_STONES, "cs", 0, 0);
        var fruits = world.units[ITEMS.FRUIT];
        for (var i = 0; i < fruits.length; i++) {
            for (var j = 0; j < fruits[i].info; j++)
                draw_transition(fruits[i].fruits[j], SPRITE.FRUIT);
        }
        draw_map_transition(draw_map_objects, is, ie, js, je, SPRITE.STONES, "s", 2);
        var extractor = world.units[ITEMS.EXTRACTOR_MACHINE_STONE];
        for (var i = 0; i < extractor.length; i++)
            draw_transition(extractor[i]);
        var extractor = world.units[ITEMS.EXTRACTOR_MACHINE_GOLD];
        for (var i = 0; i < extractor.length; i++)
            draw_transition(extractor[i]);
        var extractor = world.units[ITEMS.EXTRACTOR_MACHINE_DIAMOND];
        for (var i = 0; i < extractor.length; i++)
            draw_transition(extractor[i]);
        var extractor = world.units[ITEMS.EXTRACTOR_MACHINE_AMETHYST];
        for (var i = 0; i < extractor.length; i++)
            draw_transition(extractor[i]);
        var extractor = world.units[ITEMS.EXTRACTOR_MACHINE_REIDITE];
        for (var i = 0; i < extractor.length; i++)
            draw_transition(extractor[i]);
        var windmill = world.units[ITEMS.WINDMILL];
        for (var i = 0; i < windmill.length; i++)
            draw_bg_transition(windmill[i]);
        var fire = world.units[ITEMS.FIRE];
        for (var i = 0; i < fire.length; i++)
            draw_fg_transition(fire[i]);
        var fire = world.units[ITEMS.BIG_FIRE];
        for (var i = 0; i < fire.length; i++)
            draw_fg_transition(fire[i]);
        var furnace = world.units[ITEMS.FURNACE];
        for (var i = 0; i < furnace.length; i++) {
            if (furnace[i].info)
                draw_fg_transition(furnace[i]);

        }
        var bread_oven = world.units[ITEMS.BREAD_OVEN];
        for (var i = 0; i < bread_oven.length; i++) {
            draw_fg_transition(bread_oven[i]);
        }
        var resurrection = world.units[ITEMS.RESURRECTION];
        for (var i = 0; i < resurrection.length; i++)
            draw_fg_transition(resurrection[i]);
        var emerald_machine = world.units[ITEMS.EMERALD_MACHINE];
        for (var i = 0; i < emerald_machine.length; i++) {
            draw_fg_transition(emerald_machine[i]);
            emerald_machine[i].draw_life(emerald_machine[i].info);
        }
        draw_map_transition(draw_map_objects, is, ie, js, je, SPRITE.CACTUS, "c", 0);
        draw_map_transition(draw_map_objects, is, ie, js, je, SPRITE.TREE, "t", 5, 4);
        draw_map_transition(draw_map_objects, is, ie, js, je, SPRITE.FIR, "f", 2, 2);
        draw_map_transition(draw_map_objects, is, ie, js, je, SPRITE.PALM, "plm", 0, 0);
        draw_map_transition(draw_map_objects, is, ie, js, je, SPRITE.TREE_BRANCH, "b", 3, 2);
        draw_map_transition(draw_map_objects, is, ie, js, je, SPRITE.TREE, "t", 3, 2);
        draw_map_transition(draw_map_objects, is, ie, js, je, SPRITE.TREE_BRANCH, "b", 1, 0);
        draw_map_transition(draw_map_objects, is, ie, js, je, SPRITE.FIR, "f", 1, 1);
        draw_map_transition(draw_map_objects, is, ie, js, je, SPRITE.PALM, "plm", 1, 1);
        draw_map_transition(draw_map_objects, is, ie, js, je, SPRITE.TREE, "t", 1, 0);
        draw_map_transition(draw_map_objects, is, ie, js, je, SPRITE.FIR, "f", 0, 0);
        draw_map_transition(draw_map_objects, is, ie, js, je, SPRITE.PALM, "plm", 2, 2);
        var windmill = world.units[ITEMS.WINDMILL];
        for (var i = 0; i < windmill.length; i++)
            draw_fg_transition(windmill[i]);
        var tower = world.units[ITEMS.WOOD_TOWER];
        for (var i = 0; i < tower.length; i++)
            draw_transition(tower[i], SPRITE.WOOD_TOWER);
        var players = world.units[ITEMS.PLAYERS];
        for (var i = 0; i < players.length; i++) {
            var p = players[i];
            if ((p.tower === 1) && ((p.speed < 180) || (((((p.vehicle !== INV.BABY_DRAGON) && (p.vehicle !== INV.BABY_LAVA)) && (p.vehicle !== INV.NIMBUS)) && (p.vehicle !== INV.HAWK)) && (p.vehicle !== INV.PLANE)))) {
                p.tower_fx = Utils.lerp(p.tower_fx, 100, 0.018);
                var spd = 1 + (0.18 * Math.min(1, Math.max(p.tower_fx, 0) / 100));
                ctx.save();
                ctx.scale(spd, spd);
                user.cam.x /= spd;
                user.cam.y /= spd;
                p.x /= spd;
                p.y /= spd;
                p.r.x /= spd;
                p.r.y /= spd;
                p.draw_vehicle();
                p.draw();
                user.cam.x *= spd;
                user.cam.y *= spd;
                p.x *= spd;
                p.y *= spd;
                p.r.x *= spd;
                p.r.y *= spd;
                ctx.restore();
            }
        }
        var roof = world.units[ITEMS.ROOF];
        for (var i = 0; i < roof.length; i++) {
            draw_transition(roof[i], SPRITE.ROOF);
            roof[i].draw_life(roof[i].info);
        }
        var firefly = world.units[ITEMS.FIREFLY];
        for (var i = 0; i < firefly.length; i++)
            draw_transition(firefly[i], SPRITE.FIREFLY, SPRITE.HURT_FIREFLY);
        var garland = world.units[ITEMS.GARLAND];
        for (var i = 0; i < garland.length; i++)
            draw_transition(garland[i], SPRITE.GARLAND);
        var players = world.units[ITEMS.PLAYERS];
        for (var i = 0; i < players.length; i++) {
            var p = players[i];
            if ((((((p.vehicle === INV.BABY_DRAGON) || (p.vehicle === INV.BABY_LAVA)) || (p.vehicle === INV.NIMBUS)) || (p.vehicle === INV.HAWK)) || (p.vehicle === INV.PLANE)) && (p.speed > 180)) {
                p.fly = 1;
                ctx.save();
                var spd = 1 + (0.35 * Math.min(1, Math.max(p.vehicle_fx5 - 30, 0) / 180));
                ctx.scale(spd, spd);
                user.cam.x /= spd;
                user.cam.y /= spd;
                p.x /= spd;
                p.y /= spd;
                p.r.x /= spd;
                p.r.y /= spd;
                p.draw_vehicle();
                p.draw();
                user.cam.x *= spd;
                user.cam.y *= spd;
                p.x *= spd;
                p.y *= spd;
                p.r.x *= spd;
                p.r.y *= spd;
                ctx.restore();
            }
        }
        var spell = world.units[ITEMS.SPELL];
        for (var i = 0; i < spell.length; i++) {
            if (spell[i].fly === 1)
                draw_transition(spell[i]);

        }
        var dragon = world.units[ITEMS.DRAGON];
        for (var i = 0; i < dragon.length; i++) {
            if (dragon[i].scale > 1)
                draw_transition(dragon[i], SPRITE.DRAGON, SPRITE.HURT_DRAGON);

        }
        var dragon = world.units[ITEMS.LAVA_DRAGON];
        for (var i = 0; i < dragon.length; i++) {
            if (dragon[i].scale > 1)
                draw_transition(dragon[i], SPRITE.LAVA_DRAGON, SPRITE.HURT_LAVA_DRAGON);

        }
        var hawk = world.units[ITEMS.HAWK];
        for (var i = 0; i < hawk.length; i++)
            draw_transition(hawk[i], SPRITE.HAWK, SPRITE.HURT_HAWK);
        var vulture = world.units[ITEMS.VULTURE];
        for (var i = 0; i < vulture.length; i++)
            draw_transition(vulture[i], SPRITE.VULTURE, SPRITE.HURT_VULTURE);

        if (HackSettings.DrawPlayerOnTop.enabled) {
            var players = world.units[ITEMS.PLAYERS];
            for (var i = 0; i < players.length; i++) {
                var p = players[i];
                if (((((players[i].vehicle !== INV.BABY_DRAGON) && (players[i].vehicle !== INV.BABY_LAVA)) && (players[i].vehicle !== INV.HAWK)) && (players[i].vehicle !== INV.PLANE)) && (players[i].vehicle !== INV.NIMBUS)) {
                    if (p.tower === 0) {
                        if (p.tower_fx > 0.001) {
                            p.tower_fx = Utils.lerp(p.tower_fx, 0, 0.018);
                            var spd = 1 + (0.18 * Math.min(1, Math.max(p.tower_fx, 0) / 100));
                            ctx.save();
                            ctx.scale(spd, spd);
                            user.cam.x /= spd;
                            user.cam.y /= spd;
                            p.x /= spd;
                            p.y /= spd;
                            p.r.x /= spd;
                            p.r.y /= spd;
                            p.draw_vehicle();
                            p.draw();
                            user.cam.x *= spd;
                            user.cam.y *= spd;
                            p.x *= spd;
                            p.y *= spd;
                            p.r.x *= spd;
                            p.r.y *= spd;
                            ctx.restore();
                        } else {
                            p.fly = 0;
                            p.draw_vehicle();
                            p.draw();
                        }
                    }
                } else if (p.speed <= 180) {
                    ctx.save();
                    var spd = 1 + (0.35 * Math.min(1, Math.max(p.vehicle_fx5 - 30, 0) / 180));
                    ctx.scale(spd, spd);
                    user.cam.x /= spd;
                    user.cam.y /= spd;
                    p.x /= spd;
                    p.y /= spd;
                    p.r.x /= spd;
                    p.r.y /= spd;
                    p.fly = 0;
                    p.draw_vehicle();
                    p.draw();
                    user.cam.x *= spd;
                    user.cam.y *= spd;
                    p.x *= spd;
                    p.y *= spd;
                    p.r.x *= spd;
                    p.r.y *= spd;
                    ctx.restore();
                }
            }
        }
        __effect += delta * 15;
        if (__effect > 60)
            __effect -= 60;

        draw_map_transition(draw_objects_effect, is, ie, js, je, SPRITE.FOG, "fo", 2);
        draw_map_transition(draw_objects_effect, is, ie, js, je, SPRITE.FOD, "fod", 2);

        if( window.drawShit) {
            for(let i = 0; i < window.drawShit[0].length; i++) {
                const elemt = window.drawShit[0][i];
                ctx.save();
                ctx.beginPath();
                ctx.lineWidth = 2.5;
                ctx.strokeStyle = 'red';
            
                ctx.arc(elemt.x + user.cam.x,
                    elemt.y + user.cam.y,
                    elemt.r,
                        0, 2 *Math.PI, false)
                ctx.stroke()
                ctx.restore();

                if(elemt.data) {
                    ctx.save();
                    ctx.font = "24px Baloo Paaji"
                    ctx.fillStyle = "red";
                    ctx.fillText("t: " + elemt.data.type, 
                    elemt.x + user.cam.x,
                    elemt.y + user.cam.y,
                    );
        
                    ctx.restore();
                }

                
            }
        
        }
    };

    function draw_bg_transition(o, a) {
        if (world.transition) {
            ctx.globalAlpha = 1;
            o.draw_bg(a);
            world.time = world.time ? 0 : 1;
            ctx.globalAlpha = 1 - world.shade.v;
            o.draw_bg(a);
            world.time = world.time ? 0 : 1;
            ctx.globalAlpha = 1;
        } else
            o.draw_bg(a);
    };

    function draw_fg_transition(o, a) {
        if (world.transition) {
            ctx.globalAlpha = 1;
            o.draw_fg(a);
            world.time = world.time ? 0 : 1;
            ctx.globalAlpha = 1 - world.shade.v;
            o.draw_fg(a);
            world.time = world.time ? 0 : 1;
            ctx.globalAlpha = 1;
        } else
            o.draw_fg(a);
    };

    function draw_image_transition_2(id1, id2, img, x, y) {
        if (world.transition) {
            ctx.globalAlpha = 1;
            ctxDrawImage(ctx, sprite[id1][id2][world.time], x, y);
            world.time = world.time ? 0 : 1;
            ctx.globalAlpha = 1 - world.shade.v;
            ctxDrawImage(ctx, sprite[id1][id2][world.time], x, y);
            world.time = world.time ? 0 : 1;
            ctx.globalAlpha = 1;
        } else
            ctxDrawImage(ctx, img, x, y);
    };

    function draw_image_transition(id, img, x, y) {
        if (world.transition) {
            ctx.globalAlpha = 1;
            ctxDrawImage(ctx, sprite[id][world.time], x, y);
            world.time = world.time ? 0 : 1;
            ctx.globalAlpha = 1 - world.shade.v;
            ctxDrawImage(ctx, sprite[id][world.time], x, y);
            world.time = world.time ? 0 : 1;
            ctx.globalAlpha = 1;
        } else
            ctxDrawImage(ctx, img, x, y);
    };

    function draw_image_transition_hd_2(id1, id2, img, x, y) {
        var w = img.width;
        var h = img.height;
        var w2 = Math.floor(w / 2);
        var h2 = Math.floor(h / 2);
        if (world.transition) {
            ctx.globalAlpha = 1;
            ctxDrawImage(ctx, sprite[id1][id2][world.time], 0, 0, w, h, x, y, w2, h2);
            world.time = world.time ? 0 : 1;
            ctx.globalAlpha = 1 - world.shade.v;
            ctxDrawImage(ctx, sprite[id1][id2][world.time], 0, 0, w, h, x, y, w2, h2);
            world.time = world.time ? 0 : 1;
            ctx.globalAlpha = 1;
        } else
            ctxDrawImage(ctx, sprite[id1][id2][world.time], 0, 0, w, h, x, y, w2, h2);
    };

    function draw_image_transition_hd(id, img, x, y) {
        var w = img.width;
        var h = img.height;
        var w2 = Math.floor(w / 2);
        var h2 = Math.floor(h / 2);
        if (world.transition) {
            ctx.globalAlpha = 1;
            ctxDrawImage(ctx, sprite[id][world.time], 0, 0, w, h, x, y, w2, h2);
            world.time = world.time ? 0 : 1;
            ctx.globalAlpha = 1 - world.shade.v;
            ctxDrawImage(ctx, sprite[id][world.time], 0, 0, w, h, x, y, w2, h2);
            world.time = world.time ? 0 : 1;
            ctx.globalAlpha = 1;
        } else
            ctxDrawImage(ctx, img, 0, 0, w, h, x, y, w2, h2);
    };

    function draw_swim(s) {
        ctx.globalAlpha = s.alpha;
        circle(ctx, s.x + user.cam.x, s.y + user.cam.y, s.r);
        fill_path(ctx, SPRITE.SWIM_COLOR[world.time]);
        ctx.globalAlpha = 1;
    };

    function draw_foot(f) {
        ctx.save();
        ctx.translate(user.cam.x + f.x, user.cam.y + f.y);
        ctx.rotate(f.angle);
        ctx.globalAlpha = f.alpha;
        var img = sprite[f.id][world.time];
        ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
        ctx.globalAlpha = 1;
        ctx.restore();
    };

    function draw_imgs_transition(id, i, x, y, alpha) {
        if (world.transition && (alpha == 1)) {
            ctx.globalAlpha = 1;
            ctxDrawImage(ctx, sprite[id][world.time][i], x, y);
            world.time = world.time ? 0 : 1;
            ctx.globalAlpha = 1 - world.shade.v;
            ctxDrawImage(ctx, sprite[id][world.time][i], x, y);
            world.time = world.time ? 0 : 1;
            ctx.globalAlpha = 1;
        } else {
            ctx.globalAlpha = alpha;
            ctxDrawImage(ctx, sprite[id][world.time][i], x, y);
            ctx.globalAlpha = 1;
        }
    };

    function draw_transition(o, a1, a2) {
        if (world.transition) {
            ctx.globalAlpha = 1;
            o.draw(a1, a2);
            world.time = world.time ? 0 : 1;
            ctx.globalAlpha = 1 - world.shade.v;
            o.draw(a1, a2);
            world.time = world.time ? 0 : 1;
            ctx.globalAlpha = 1;
        } else
            o.draw(a1, a2);
    };

    function draw_map_transition(fun, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
        if (world.transition) {
            ctx.globalAlpha = 1;
            fun(a1, a2, a3, a4, a5, a6, a7, a8, a9);
            world.time = world.time ? 0 : 1;
            ctx.globalAlpha = 1 - world.shade.v;
            fun(a1, a2, a3, a4, a5, a6, a7, a8, a9);
            world.time = world.time ? 0 : 1;
            ctx.globalAlpha = 1;
        } else
            fun(a1, a2, a3, a4, a5, a6, a7, a8, a9);
    };

    function get_color_transition(r1, g1, b1, r2, g2, b2, shade) {
        var color = "#";
        var c = Math.floor((r2 * shade) + ((1 - shade) * r1));
        color += (c < 16) ? ("0" + c.toString(16)) : c.toString(16);
        var c = Math.floor((g2 * shade) + ((1 - shade) * g1));
        color += (c < 16) ? ("0" + c.toString(16)) : c.toString(16);
        var c = Math.floor((b2 * shade) + ((1 - shade) * b1));
        color += (c < 16) ? ("0" + c.toString(16)) : c.toString(16);
        return color;
    };

    function draw_simple_ground() {
        if (world.transition) {
            var shade = world.time ? (1 - world.shade.v) : world.shade.v;
            ctx.fillStyle = get_color_transition(4, 43, 48, 19, 58, 43, shade);
        } else
            ctx.fillStyle = SPRITE.GROUND[world.time];
        ctx.fillRect(0, 0, canw, canh);
    };

    function draw_ground() {
        for (var i = world.biomes.length - 1; i >= 0; i--) {
            var biome = world.biomes[i];
            if (biome.t === world.BIOME_SEA) {
                var info = world.BIOME[biome.t];
                if ((((-user.cam.x >= ((biome.x1 - 230) - canw)) && (-user.cam.x <= (biome.x2 + 330))) && (-user.cam.y >= (biome.y1 - canh))) && (-user.cam.y <= (biome.y2 + 100))) {
                    var x2 = biome.x2;
                    if (biome.t !== world.BIOME_SEA)
                        x2 -= 610;

                    var x1 = biome.x1;
                    if (biome.t !== world.BIOME_SEA)
                        x1 += 610;

                    var y2 = biome.y2;
                    if (biome.t !== world.BIOME_SEA)
                        y2 -= 610;

                    var y1 = biome.y1;
                    if (biome.t !== world.BIOME_SEA)
                        y1 += 610;

                    if (world.transition) {
                        var shade = world.time ? (1 - world.shade.v) : world.shade.v;
                        ctx.fillStyle = get_color_transition(info.night[0], info.night[1], info.night[2], info.day[0], info.day[1], info.day[1], shade);
                    } else
                        ctx.fillStyle = info._color[world.time];
                    var _left = Math.max(((user.cam.x + x1) - 2) - 230, 0);
                    var _right = Math.max((((-user.cam.x + canw) - x2) - 330) - 2, 0);
                    var _top = Math.max((user.cam.y + y1) - 2, 0);
                    var _bottom = Math.max((((-user.cam.y + canh) - y2) - 100) - 2, 0);
                    ctx.beginPath();
                    ctx.fillRect(_left, _top, (canw - _right) - _left, (canh - _top) - _bottom);
                }
            }
        }
        for (var i = world.biomes.length - 1; i >= 0; i--) {
            var biome = world.biomes[i];
            if (biome.t !== world.BIOME_SEA) {
                var x2 = biome.x2;
                if (biome.t !== world.BIOME_SEA)
                    x2 -= 400;

                var x1 = biome.x1;
                if (biome.t !== world.BIOME_SEA)
                    x1 += 400;

                var y2 = biome.y2;
                if (biome.t !== world.BIOME_SEA)
                    y2 -= 300;

                var y1 = biome.y1;
                if (biome.t !== world.BIOME_SEA)
                    y1 += 300;

                if ((((((biome.v & WORLD.RIGHT) === 0) && (-user.cam.x >= ((x2 - canw) + 120))) && (-user.cam.x <= (x2 + 820))) && (-user.cam.y >= ((y1 + 88) - canh))) && (-user.cam.y <= (y2 + 50))) {
                    draw_beach_sand_right(x2, y1 + 88, y2 - 88, user.beach[0], world.BIOME[biome.t], biome.v & WORLD.RIGHT);
                    draw_beach_right(x2, y1 + 88, y2 - 88, user.beach[0], world.BIOME[biome.t], biome.v & WORLD.RIGHT);
                }
                if ((((((biome.v & WORLD.LEFT) === 0) && (-user.cam.x >= ((x1 - canw) - 700))) && (-user.cam.x <= (x1 - 20))) && (-user.cam.y >= ((y1 + 88) - canh))) && (-user.cam.y <= (y2 + 50))) {
                    draw_beach_sand_left(x1, y1 + 88, y2 - 88, user.beach[1], world.BIOME[biome.t], biome.v & WORLD.LEFT);
                    draw_beach_left(x1, y1 + 88, y2 - 88, user.beach[1], world.BIOME[biome.t], biome.v & WORLD.LEFT);
                }
                if ((((((biome.v & WORLD.BOTTOM) === 0) && (-user.cam.x >= ((x1 - 235) - canw))) && (-user.cam.x <= (x2 + 350))) && (-user.cam.y >= ((y2 - canh) - 275))) && (-user.cam.y <= (y2 + 490))) {
                    draw_beach_sand_bottom(y2 - 230, x1 - 230, x2 + 230, user.beach[2], world.BIOME[biome.t], biome.v & WORLD.BOTTOM);
                    draw_beach_bottom(y2 - 230, x1 - 230, x2 + 230, user.beach[2], world.BIOME[biome.t], biome.v & WORLD.BOTTOM);
                }
                if ((((((biome.v & WORLD.TOP) === 0) && (-user.cam.x >= ((x1 - 235) - canw))) && (-user.cam.x <= (x2 + 350))) && (-user.cam.y >= ((y1 - canh) - 390))) && (-user.cam.y <= (y1 + 315))) {
                    draw_beach_sand_top(y1 + 310, x1 - 230, x2 + 230, user.beach[3], world.BIOME[biome.t], biome.v & WORLD.TOP);
                    draw_beach_top(y1 + 310, x1 - 230, x2 + 230, user.beach[3], world.BIOME[biome.t], biome.v & WORLD.TOP);
                }
            }
        }
        for (var i = world.biomes.length - 1; i >= 0; i--) {
            var biome = world.biomes[i];
            if (biome.t !== world.BIOME_SEA) {
                var x2 = biome.x2;
                if (biome.t !== world.BIOME_SEA)
                    x2 -= 400;

                var x1 = biome.x1;
                if (biome.t !== world.BIOME_SEA)
                    x1 += 400;

                var y2 = biome.y2;
                if (biome.t !== world.BIOME_SEA)
                    y2 -= 300;

                var y1 = biome.y1;
                if (biome.t !== world.BIOME_SEA)
                    y1 += 300;

                if ((((((biome.v & WORLD.RIGHT) !== 0) && (-user.cam.x >= ((x2 - canw) + 120))) && (-user.cam.x <= (x2 + 820))) && (-user.cam.y >= ((y1 + 88) - canh))) && (-user.cam.y <= (y2 + 50))) {
                    draw_beach_sand_right(x2, y1 + 88, y2 - 88, user.beach[0], world.BIOME[biome.t], biome.v & WORLD.RIGHT);
                }
                if ((((((biome.v & WORLD.LEFT) !== 0) && (-user.cam.x >= ((x1 - canw) - 700))) && (-user.cam.x <= (x1 - 20))) && (-user.cam.y >= ((y1 + 88) - canh))) && (-user.cam.y <= (y2 + 50))) {
                    draw_beach_sand_left(x1, y1 + 88, y2 - 88, user.beach[1], world.BIOME[biome.t], biome.v & WORLD.LEFT);
                }
                if ((((((biome.v & WORLD.BOTTOM) !== 0) && (-user.cam.x >= ((x1 - 235) - canw))) && (-user.cam.x <= (x2 + 350))) && (-user.cam.y >= ((y2 - canh) - 275))) && (-user.cam.y <= (y2 + 490))) {
                    draw_beach_sand_bottom(y2 - 230, x1 - 230, x2 + 230, user.beach[2], world.BIOME[biome.t], biome.v & WORLD.BOTTOM);
                }
                if ((((((biome.v & WORLD.TOP) !== 0) && (-user.cam.x >= ((x1 - 235) - canw))) && (-user.cam.x <= (x2 + 350))) && (-user.cam.y >= ((y1 - canh) - 390))) && (-user.cam.y <= (y1 + 315))) {
                    draw_beach_sand_top(y1 + 310, x1 - 230, x2 + 230, user.beach[3], world.BIOME[biome.t], biome.v & WORLD.TOP);
                }
            }
        }
        for (var i = world.biomes.length - 1; i >= 0; i--) {
            var biome = world.biomes[i];
            if (biome.t !== world.BIOME_SEA) {
                var info = world.BIOME[biome.t];
                if ((((-user.cam.x >= ((biome.x1 - 230) - canw)) && (-user.cam.x <= (biome.x2 + 330))) && (-user.cam.y >= (biome.y1 - canh))) && (-user.cam.y <= (biome.y2 + 100))) {
                    var x2 = biome.x2;
                    if (biome.t !== world.BIOME_SEA) {
                        if ((biome.v & WORLD.RIGHT) === 0)
                            x2 -= 414;
                        else
                            x2 -= 610;
                    }
                    var x1 = biome.x1;
                    if (biome.t !== world.BIOME_SEA) {
                        if ((biome.v & WORLD.LEFT) === 0)
                            x1 += 414;
                        else
                            x1 += 610;
                    }
                    var y2 = biome.y2;
                    if (biome.t !== world.BIOME_SEA) {
                        if ((biome.v & WORLD.BOTTOM) === 0)
                            y2 -= 414;
                        else
                            y2 -= 610;
                    }
                    var y1 = biome.y1;
                    if (biome.t !== world.BIOME_SEA) {
                        if ((biome.v & WORLD.TOP) === 0)
                            y1 += 414;
                        else
                            y1 += 610;
                    }
                    if (world.transition) {
                        var shade = world.time ? (1 - world.shade.v) : world.shade.v;
                        ctx.fillStyle = get_color_transition(info.night[0], info.night[1], info.night[2], info.day[0], info.day[1], info.day[2], shade);
                    } else
                        ctx.fillStyle = info._color[world.time];
                    var _left = Math.max(((user.cam.x + x1) - 2) - 230, 0);
                    var _right = Math.max((((-user.cam.x + canw) - x2) - 330) - 2, 0);
                    var _top = Math.max((user.cam.y + y1) - 2, 0);
                    var _bottom = Math.max((((-user.cam.y + canh) - y2) - 100) - 2, 0);
                    ctx.beginPath();
                    ctx.fillRect(_left, _top, (canw - _right) - _left, (canh - _top) - _bottom);
                }
            }
        }
        if (ui.quality) {
            draw_map_transition(draw_breath_objects, _is, _ie, _js, _je, SPRITE.WAVE_TWO, "isl", 2);
            draw_map_transition(draw_breath_objects, _is, _ie, _js, _je, SPRITE.WAVE_ONE, "isl", 2);
        }
        draw_map_transition(draw_map_objects, _is, _ie, _js, _je, SPRITE.ISLAND, "isl", 2);
        if (ui.quality)
            draw_map_transition(draw_map_decorations, _is, _ie, _js, _je, SPRITE.DECORATION, "de");

        var players = world.units[ITEMS.PLAYERS];
        for (var i = 0; i < players.length; i++) {
            var p = players[i];
            for (var j = 0; j < p.foot.length; j++)
                draw_foot(p.foot[j]);
        }
        __wave += delta * 40;
        if (__wave > 60)
            __wave -= 60;

        draw_map_transition(draw_river_tile, _is, _ie, _js, _je, SPRITE.RIVER, "r", 0);
        for (var i = 0; i < world.biomes.length; i++) {
            var biome = world.biomes[i];
            if (biome.t !== world.BIOME_SEA) {
                var x2 = biome.x2;
                if (biome.t !== world.BIOME_SEA)
                    x2 -= 400;

                var x1 = biome.x1;
                if (biome.t !== world.BIOME_SEA)
                    x1 += 400;

                var y2 = biome.y2;
                if (biome.t !== world.BIOME_SEA)
                    y2 -= 300;

                var y1 = biome.y1;
                if (biome.t !== world.BIOME_SEA)
                    y1 += 300;

                if ((((((biome.v & WORLD.RIGHT) > 0) && (-user.cam.x >= ((x2 - canw) + 120))) && (-user.cam.x <= (x2 + 820))) && (-user.cam.y >= ((y1 + 88) - canh))) && (-user.cam.y <= (y2 + 50)))
                    draw_beach_right(x2, y1 + 88, y2 - 88, user.beach[0], world.BIOME[biome.t], biome.v & WORLD.RIGHT);

                if ((((((biome.v & WORLD.LEFT) > 0) && (-user.cam.x >= ((x1 - canw) - 700))) && (-user.cam.x <= (x1 - 20))) && (-user.cam.y >= ((y1 + 88) - canh))) && (-user.cam.y <= (y2 + 50)))
                    draw_beach_left(x1, y1 + 88, y2 - 88, user.beach[1], world.BIOME[biome.t], biome.v & WORLD.LEFT);

                if ((((((biome.v & WORLD.BOTTOM) > 0) && (-user.cam.x >= ((x1 - 235) - canw))) && (-user.cam.x <= (x2 + 350))) && (-user.cam.y >= ((y2 - canh) - 275))) && (-user.cam.y <= (y2 + 490)))
                    draw_beach_bottom(y2 - 230, x1 - 230, x2 + 230, user.beach[2], world.BIOME[biome.t], biome.v & WORLD.BOTTOM);

                if ((((((biome.v & WORLD.TOP) > 0) && (-user.cam.x >= ((x1 - 235) - canw))) && (-user.cam.x <= (x2 + 350))) && (-user.cam.y >= ((y1 - canh) - 390))) && (-user.cam.y <= (y1 + 315)))
                    draw_beach_top(y1 + 310, x1 - 230, x2 + 230, user.beach[3], world.BIOME[biome.t], biome.v & WORLD.TOP);

            }
        }
    };

    function draw_ash() {
        var ash = user.ash;
        var flakes = ash.flakes;
        for (var i = 0; i < flakes.length; i++) {
            var f = flakes[i];
            ash.update(f);
            draw_imgs_transition(SPRITE.ASHES, f.id, user.cam.x + f.x, user.cam.y + f.y, f.alpha);
        }
        for (var i = 0; i < flakes.length; i++) {
            var f = flakes[i];
            if ((((f.life <= 0) || (f.x > (-user.cam.x + canw))) || (f.x < -user.cam.x)) || (f.y > (-user.cam.y + canh)))
                flakes.splice(i, 1);

        }
        var pos = -user.cam.y;
        if (world.dist_lava > -1000)
            ash.add(pos);

    };

    function draw_winter() {
        var winter = user.winter;
        if (winter.tempest === 0)
            winter.tempest_speed = Math.max(0, winter.tempest_speed - (delta / 10));
        else
            winter.tempest_speed = Math.min(1, winter.tempest_speed + (delta / 10));
        var flakes = winter.flakes;
        for (var i = 0; i < flakes.length; i++) {
            var f = flakes[i];
            winter.update(f);
            draw_imgs_transition(SPRITE.FLAKES, f.id, user.cam.x + f.x, user.cam.y + f.y, f.alpha);
        }
        for (var i = 0; i < flakes.length; i++) {
            var f = flakes[i];
            if ((((f.life <= 0) || (f.x > (-user.cam.x + canw))) || (f.x < -user.cam.x)) || (f.y > (-user.cam.y + canh)))
                flakes.splice(i, 1);

        }
        var pos = -user.cam.y;
        if (world.dist_winter > -1000)
            winter.add(pos);

    };

    function draw_desert() {
        var desert = user.desert;
        if (desert.tempest === 0)
            desert.tempest_speed = Math.max(0, desert.tempest_speed - (delta / 10));
        else
            desert.tempest_speed = Math.min(1, desert.tempest_speed + (delta / 10));
        var flakes = desert.flakes;
        for (var i = 0; i < flakes.length; i++) {
            var f = flakes[i];
            desert.update(f);
            draw_imgs_transition(SPRITE.DESERT, f.id, user.cam.x + f.x, user.cam.y + f.y, f.alpha);
        }
        for (var i = 0; i < flakes.length; i++) {
            var f = flakes[i];
            if ((((f.life <= 0) || (f.x > (-user.cam.x + canw))) || (f.x < (-user.cam.x - (user.cam.w / 2)))) || (f.y > (-user.cam.y + canh)))
                flakes.splice(i, 1);

        }
        var pos = -user.cam.y;
        if (world.dist_desert > -1000)
            desert.add(pos);

    };

    function draw_beach_sand_left(xMin, yMin, yMax, beach, biome, hasWave) {
        var w1 = beach.w1;
        var w2 = beach.w2;
        var w3 = beach.w3;
        var diff_x = (user.cam.x + xMin) - 700;
        var _top = Math.max(user.cam.y + yMin, 0);
        var _bottom = Math.max(((-user.cam.y + canh) - yMax) - 100, 0);
        var diff_y = _top;
        var mycanh = (canh - _top) - _bottom;
        if (hasWave)
            var wx = beach.t(w1).x;
        else
            var wx = w1.r.x;
        var d = diff_x + WORLD.LW1SX;
        var w1x = d,
            w1y = diff_y,
            w1w = wx + WORLD.W1SX,
            w1h = mycanh;
        d += (wx + WORLD.W1SX) - 2;
        var od3 = d;
        if (hasWave)
            var wx = beach.t(w2).x;
        else
            var wx = w2.r.x;
        var d2 = ((diff_x + WORLD.LW2SX) - d) + wx;
        var w2x = d,
            w2y = diff_y,
            w2w = d2,
            w2h = mycanh;
        d += d2 - 2;
        var od = d - 2;
        if (hasWave)
            var wx = beach.t(w3).x;
        else
            var wx = w3.r.x;
        d2 = ((diff_x + WORLD.LW3SX) - d) + wx;
        if (od < ((d + d2) - 3)) {
            var w3ok = true;
            var w3x = d,
                w3y = diff_y,
                w3w = d2,
                w3h = mycanh;
            d += d2 - 2;
            var od2 = d;
        } else {
            var w3ok = false;
            d = od;
            var od2 = -1;
        }
        d2 = (diff_x + WORLD.LSANDX) - d;
        if ((hasWave > 0) && (biome.isSand === 1)) {
            if (world.transition) {
                var shade = world.time ? (1 - world.shade.v) : world.shade.v;
                ctx.fillStyle = get_color_transition(15, 77, 72, 252, 239, 187, shade);
            } else
                ctx.fillStyle = SPRITE.SAND_COLOR[world.time];
            ctx.fillRect(d, diff_y, d2, mycanh);
        } else {
            if (world.transition) {
                var shade = world.time ? (1 - world.shade.v) : world.shade.v;
                ctx.fillStyle = get_color_transition(biome.night[0], biome.night[1], biome.night[2], biome.day[0], biome.day[1], biome.day[2], shade);
            } else
                ctx.fillStyle = biome._color[world.time];
            ctx.fillRect(d, diff_y, d2, mycanh);
        }
    };

    function draw_beach_left(xMin, yMin, yMax, beach, biome, hasWave) {
        var w1 = beach.w1;
        var w2 = beach.w2;
        var w3 = beach.w3;
        var diff_x = (user.cam.x + xMin) - 700;
        var _top = Math.max(user.cam.y + yMin, 0);
        var _bottom = Math.max(((-user.cam.y + canh) - yMax) - 100, 0);
        var diff_y = _top;
        var mycanh = (canh - _top) - _bottom;
        if (hasWave)
            var w = beach.t(w1);
        else
            var w = w1.r;
        var d = diff_x + WORLD.LW1SX;
        var w1x = d,
            w1y = diff_y,
            w1w = w.x + WORLD.W1SX,
            w1h = mycanh;
        d += (w.x + WORLD.W1SX) - 2;
        var od3 = d;
        if (hasWave)
            var w = beach.t(w2);
        else
            var w = w2.r;
        var d2 = ((diff_x + WORLD.LW2SX) - d) + w.x;
        var w2x = d,
            w2y = diff_y,
            w2w = d2,
            w2h = mycanh;
        d += d2 - 2;
        var od = d - 2;
        if (hasWave)
            var w = beach.t(w3);
        else
            var w = w3.r;
        d2 = ((diff_x + WORLD.LW3SX) - d) + w.x;
        if (od < ((d + d2) - 3)) {
            var w3ok = true;
            var w3x = d,
                w3y = diff_y,
                w3w = d2,
                w3h = mycanh;
            d += d2 - 2;
            var od2 = d;
        } else {
            var w3ok = false;
            d = od;
            var od2 = -1;
        }
        d2 = (diff_x + WORLD.LSANDX) - d;
        if (world.transition) {
            var shade = world.time ? (1 - world.shade.v) : world.shade.v;
            ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, shade);
        } else
            ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
        ctx.fillRect(w1x, w1y, w1w, w1h);
        if (hasWave) {
            if (world.transition) {
                var shade = world.time ? (1 - world.shade.v) : world.shade.v;
                ctx.fillStyle = get_color_transition(15, 70, 76, 42, 139, 155, shade);
            } else
                ctx.fillStyle = SPRITE.WATER_2_COLOR[world.time];
        } else {
            if (world.transition) {
                var shade = world.time ? (1 - world.shade.v) : world.shade.v;
                ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, shade);
            } else
                ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
        }
        ctx.fillRect(w2x, w2y, w2w, w2h);
        if (w3ok) {
            if (hasWave) {
                if (world.transition) {
                    var shade = world.time ? (1 - world.shade.v) : world.shade.v;
                    ctx.fillStyle = get_color_transition(17, 94, 96, 169, 214, 211, shade);
                } else
                    ctx.fillStyle = SPRITE.WATER_1_COLOR[world.time];
            } else {
                if (world.transition) {
                    var shade = world.time ? (1 - world.shade.v) : world.shade.v;
                    ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, shade);
                } else
                    ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
            }
            ctx.fillRect(w3x, w3y, w3w, w3h);
        }
        if (ui.quality && hasWave)
            beach.draw_foams_left(od, od2, od3, diff_x, -user.cam.y + w1y, (-user.cam.y + w1y) + w1h);

    };

    function draw_beach_sand_top(yMin, xMin, xMax, beach, biome, hasWave) {
        var w1 = beach.w1;
        var w2 = beach.w2;
        var w3 = beach.w3;
        var diff_y = (user.cam.y + yMin) - 700;
        var _left = Math.max(user.cam.x + xMin, 0);
        var _right = Math.max(((-user.cam.x + canw) - xMax) - 100, 0);
        var diff_x = _left;
        var mycanw = (canw - _left) - _right;
        if (hasWave)
            var wx = beach.t(w1).x;
        else
            var wx = w1.r.x;
        var d = diff_y + WORLD.LW1SX;
        var w1x = diff_x,
            w1y = d,
            w1h = wx + WORLD.W1SX,
            w1w = mycanw;
        d += (wx + WORLD.W1SX) - 2;
        var od3 = d;
        if (hasWave)
            var wx = beach.t(w2).x;
        else
            var wx = w2.r.x;
        var d2 = ((diff_y + WORLD.LW2SX) - d) + wx;
        var w2y = d,
            w2x = diff_x,
            w2h = d2,
            w2w = mycanw;
        d += d2 - 2;
        var od = d - 2;
        if (hasWave)
            var wx = beach.t(w3).x;
        else
            var wx = w3.r.x;
        d2 = ((diff_y + WORLD.LW3SX) - d) + wx;
        if (od < ((d + d2) - 3)) {
            var w3ok = true;
            var w3y = d,
                w3x = diff_x,
                w3h = d2,
                w3w = mycanw;
            d += d2 - 2;
            var od2 = d;
        } else {
            var w3ok = false;
            d = od;
            var od2 = -1;
        }
        d2 = (diff_y + WORLD.LSANDX) - d;
        if ((hasWave > 0) && (biome.isSand === 1)) {
            if (world.transition) {
                var shade = world.time ? (1 - world.shade.v) : world.shade.v;
                ctx.fillStyle = get_color_transition(15, 77, 72, 252, 239, 187, shade);
            } else
                ctx.fillStyle = SPRITE.SAND_COLOR[world.time];
            ctx.fillRect(diff_x, d, mycanw, d2);
        } else {
            if (world.transition) {
                var shade = world.time ? (1 - world.shade.v) : world.shade.v;
                ctx.fillStyle = get_color_transition(biome.night[0], biome.night[1], biome.night[2], biome.day[0], biome.day[1], biome.day[2], shade);
            } else
                ctx.fillStyle = biome._color[world.time];
            ctx.fillRect(diff_x, d, mycanw, d2);
        }
    };

    function draw_beach_top(yMin, xMin, xMax, beach, biome, hasWave) {
        var w1 = beach.w1;
        var w2 = beach.w2;
        var w3 = beach.w3;
        var diff_y = (user.cam.y + yMin) - 700;
        var _left = Math.max(user.cam.x + xMin, 0);
        var _right = Math.max(((-user.cam.x + canw) - xMax) - 100, 0);
        var diff_x = _left;
        var mycanw = (canw - _left) - _right;
        if (hasWave)
            var w = beach.t(w1);
        else
            var w = w1.r;
        var d = diff_y + WORLD.LW1SX;
        var w1x = diff_x,
            w1y = d,
            w1h = w.x + WORLD.W1SX,
            w1w = mycanw;
        d += (w.x + WORLD.W1SX) - 2;
        var od3 = d;
        if (hasWave)
            var w = beach.t(w2);
        else
            var w = w2.r;
        var d2 = ((diff_y + WORLD.LW2SX) - d) + w.x;
        var w2y = d,
            w2x = diff_x,
            w2h = d2,
            w2w = mycanw;
        d += d2 - 2;
        var od = d - 2;
        if (hasWave)
            var w = beach.t(w3);
        else
            var w = w3.r;
        d2 = ((diff_y + WORLD.LW3SX) - d) + w.x;
        if (od < ((d + d2) - 3)) {
            var w3ok = true;
            var w3y = d,
                w3x = diff_x,
                w3h = d2,
                w3w = mycanw;
            d += d2 - 2;
            var od2 = d;
        } else {
            var w3ok = false;
            d = od;
            var od2 = -1;
        }
        d2 = (diff_y + WORLD.LSANDX) - d;
        if (world.transition) {
            var shade = world.time ? (1 - world.shade.v) : world.shade.v;
            ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, shade);
        } else
            ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
        ctx.fillRect(w1x, w1y, w1w, w1h);
        if (hasWave) {
            if (world.transition) {
                var shade = world.time ? (1 - world.shade.v) : world.shade.v;
                ctx.fillStyle = get_color_transition(15, 70, 76, 42, 139, 155, shade);
            } else
                ctx.fillStyle = SPRITE.WATER_2_COLOR[world.time];
        } else {
            if (world.transition) {
                var shade = world.time ? (1 - world.shade.v) : world.shade.v;
                ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, shade);
            } else
                ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
        }
        ctx.fillRect(w2x, w2y, w2w, w2h);
        if (w3ok) {
            if (hasWave) {
                if (world.transition) {
                    var shade = world.time ? (1 - world.shade.v) : world.shade.v;
                    ctx.fillStyle = get_color_transition(17, 94, 96, 169, 214, 211, shade);
                } else
                    ctx.fillStyle = SPRITE.WATER_1_COLOR[world.time];
            } else {
                if (world.transition) {
                    var shade = world.time ? (1 - world.shade.v) : world.shade.v;
                    ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, shade);
                } else
                    ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
            }
            ctx.fillRect(w3x, w3y, w3w, w3h);
        }
        if (ui.quality && hasWave)
            beach.draw_foams_top(od, od2, od3, diff_y, -user.cam.x + w1x, (-user.cam.x + w1x) + w1w);

    };

    function draw_beach_sand_right(xMin, yMin, yMax, beach, biome, hasWave) {
        var w1 = beach.w1;
        var w2 = beach.w2;
        var w3 = beach.w3;
        var diff_x = (user.cam.x + xMin) + 820;
        var _top = Math.max(user.cam.y + yMin, 0);
        var _bottom = Math.max(((-user.cam.y + canh) - yMax) - 100, 0);
        var diff_y = _top;
        var mycanh = (canh - _top) - _bottom;
        if (hasWave)
            var wx = beach.t(w1).x;
        else
            var wx = w1.r.x;
        var d = diff_x + WORLD.LW1SX;
        var w1x = d,
            w1y = diff_y,
            w1w = -wx + WORLD.W1SX,
            w1h = mycanh;
        d += (-wx + WORLD.W1SX) + 2;
        var od3 = d;
        if (hasWave)
            var wx = beach.t(w2).x;
        else
            var wx = w2.r.x;
        var d2 = ((diff_x - WORLD.LW2SX) - d) - wx;
        var w2x = d,
            w2y = diff_y,
            w2w = d2,
            w2h = mycanh;
        d += d2 + 2;
        var od = d - 2;
        if (hasWave)
            var wx = beach.t(w3).x;
        else
            var wx = w3.r.x;
        d2 = ((diff_x - WORLD.LW3SX) - d) - wx;
        if (od > (d + d2)) {
            var w3ok = true;
            var w3x = d,
                w3y = diff_y,
                w3w = d2,
                w3h = mycanh;
            d += d2 + 2;
            var od2 = d;
        } else {
            var w3ok = false;
            d = od;
            var od2 = -1;
        }
        d2 = (diff_x - WORLD.LSANDX) - d;
        if ((hasWave > 0) && (biome.isSand === 1)) {
            if (world.transition) {
                var shade = world.time ? (1 - world.shade.v) : world.shade.v;
                ctx.fillStyle = get_color_transition(15, 77, 72, 252, 239, 187, shade);
            } else
                ctx.fillStyle = SPRITE.SAND_COLOR[world.time];
            ctx.fillRect(d, diff_y, d2, mycanh);
        } else {
            if (world.transition) {
                var shade = world.time ? (1 - world.shade.v) : world.shade.v;
                ctx.fillStyle = get_color_transition(biome.night[0], biome.night[1], biome.night[2], biome.day[0], biome.day[1], biome.day[2], shade);
            } else
                ctx.fillStyle = biome._color[world.time];
            ctx.fillRect(d, diff_y, d2, mycanh);
        }
    };

    function draw_beach_right(xMin, yMin, yMax, beach, biome, hasWave) {
        var w1 = beach.w1;
        var w2 = beach.w2;
        var w3 = beach.w3;
        var diff_x = (user.cam.x + xMin) + 820;
        var _top = Math.max(user.cam.y + yMin, 0);
        var _bottom = Math.max(((-user.cam.y + canh) - yMax) - 100, 0);
        var diff_y = _top;
        var mycanh = (canh - _top) - _bottom;
        if (hasWave)
            var w = beach.t(w1);
        else
            var w = w1.r;
        var d = diff_x + WORLD.LW1SX;
        var w1x = d,
            w1y = diff_y,
            w1w = -w.x + WORLD.W1SX,
            w1h = mycanh;
        d += (-w.x + WORLD.W1SX) + 2;
        var od3 = d;
        if (hasWave)
            var w = beach.t(w2);
        else
            var w = w2.r;
        var d2 = ((diff_x - WORLD.LW2SX) - d) - w.x;
        var w2x = d,
            w2y = diff_y,
            w2w = d2,
            w2h = mycanh;
        d += d2 + 2;
        var od = d - 2;
        if (hasWave)
            var w = beach.t(w3);
        else
            var w = w3.r;
        d2 = ((diff_x - WORLD.LW3SX) - d) - w.x;
        if (od > (d + d2)) {
            var w3ok = true;
            var w3x = d,
                w3y = diff_y,
                w3w = d2,
                w3h = mycanh;
            d += d2 + 2;
            var od2 = d;
        } else {
            var w3ok = false;
            d = od;
            var od2 = -1;
        }
        d2 = (diff_x - WORLD.LSANDX) - d;
        if (world.transition) {
            var shade = world.time ? (1 - world.shade.v) : world.shade.v;
            ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, shade);
        } else
            ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
        ctx.fillRect(w1x, w1y, w1w, w1h);
        if (hasWave) {
            if (world.transition) {
                var shade = world.time ? (1 - world.shade.v) : world.shade.v;
                ctx.fillStyle = get_color_transition(15, 70, 76, 42, 139, 155, shade);
            } else
                ctx.fillStyle = SPRITE.WATER_2_COLOR[world.time];
        } else {
            if (world.transition) {
                var shade = world.time ? (1 - world.shade.v) : world.shade.v;
                ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, shade);
            } else
                ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
        }
        ctx.fillRect(w2x, w2y, w2w, w2h);
        if (w3ok) {
            if (hasWave) {
                if (world.transition) {
                    var shade = world.time ? (1 - world.shade.v) : world.shade.v;
                    ctx.fillStyle = get_color_transition(17, 94, 96, 169, 214, 211, shade);
                } else
                    ctx.fillStyle = SPRITE.WATER_1_COLOR[world.time];
            } else {
                if (world.transition) {
                    var shade = world.time ? (1 - world.shade.v) : world.shade.v;
                    ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, shade);
                } else
                    ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
            }
            ctx.fillRect(w3x, w3y, w3w, w3h);
        }
        if (ui.quality && hasWave)
            beach.draw_foams_right(od, od2, od3, diff_x, -user.cam.y + w1y, (-user.cam.y + w1y) + w1h);

    };

    function draw_beach_sand_bottom(yMin, xMin, xMax, beach, biome, hasWave) {
        var w1 = beach.w1;
        var w2 = beach.w2;
        var w3 = beach.w3;
        var diff_y = (user.cam.y + yMin) + 710;
        var _left = Math.max(user.cam.x + xMin, 0);
        var _right = Math.max(((-user.cam.x + canw) - xMax) - 100, 0);
        var diff_x = _left;
        var mycanw = (canw - _left) - _right;
        if (hasWave)
            var wx = beach.t(w1).x;
        else
            var wx = w1.r.x;
        var d = diff_y + WORLD.LW1SX;
        var w1y = d,
            w1x = diff_x,
            w1h = -wx + WORLD.W1SX,
            w1w = mycanw;
        d += (-wx + WORLD.W1SX) + 2;
        var od3 = d;
        if (hasWave)
            var wx = beach.t(w2).x;
        else
            var wx = w2.r.x;
        var d2 = ((diff_y - WORLD.LW2SX) - d) - wx;
        var w2y = d,
            w2x = diff_x,
            w2h = d2,
            w2w = mycanw;
        d += d2 + 2;
        var od = d - 2;
        if (hasWave)
            var wx = beach.t(w3).x;
        else
            var wx = w3.r.x;
        d2 = ((diff_y - WORLD.LW3SX) - d) - wx;
        if (od > (d + d2)) {
            var w3ok = true;
            var w3y = d,
                w3x = diff_x,
                w3h = d2,
                w3w = mycanw;
            d += d2 + 2;
            var od2 = d;
        } else {
            var w3ok = false;
            d = od;
            var od2 = -1;
        }
        d2 = (diff_y - WORLD.LSANDX) - d;
        if ((hasWave > 0) && (biome.isSand === 1)) {
            if (world.transition) {
                var shade = world.time ? (1 - world.shade.v) : world.shade.v;
                ctx.fillStyle = get_color_transition(15, 77, 72, 252, 239, 187, shade);
            } else
                ctx.fillStyle = SPRITE.SAND_COLOR[world.time];
            ctx.fillRect(diff_x, d, mycanw, d2);
        } else {
            if (world.transition) {
                var shade = world.time ? (1 - world.shade.v) : world.shade.v;
                ctx.fillStyle = get_color_transition(biome.night[0], biome.night[1], biome.night[2], biome.day[0], biome.day[1], biome.day[2], shade);
            } else
                ctx.fillStyle = biome._color[world.time];
            ctx.fillRect(diff_x, d, mycanw, d2);
        }
    };

    function draw_beach_bottom(yMin, xMin, xMax, beach, biome, hasWave) {
        var w1 = beach.w1;
        var w2 = beach.w2;
        var w3 = beach.w3;
        var diff_y = (user.cam.y + yMin) + 710;
        var _left = Math.max(user.cam.x + xMin, 0);
        var _right = Math.max(((-user.cam.x + canw) - xMax) - 100, 0);
        var diff_x = _left;
        var mycanw = (canw - _left) - _right;
        if (hasWave)
            var w = beach.t(w1);
        else
            var w = w1.r;
        var d = diff_y + WORLD.LW1SX;
        var w1y = d,
            w1x = diff_x,
            w1h = -w.x + WORLD.W1SX,
            w1w = mycanw;
        d += (-w.x + WORLD.W1SX) + 2;
        var od3 = d;
        if (hasWave)
            var w = beach.t(w2);
        else
            var w = w2.r;
        var d2 = ((diff_y - WORLD.LW2SX) - d) - w.x;
        var w2y = d,
            w2x = diff_x,
            w2h = d2,
            w2w = mycanw;
        d += d2 + 2;
        var od = d - 2;
        if (hasWave)
            var w = beach.t(w3);
        else
            var w = w3.r;
        d2 = ((diff_y - WORLD.LW3SX) - d) - w.x;
        if (od > (d + d2)) {
            var w3ok = true;
            var w3y = d,
                w3x = diff_x,
                w3h = d2,
                w3w = mycanw;
            d += d2 + 2;
            var od2 = d;
        } else {
            var w3ok = false;
            d = od;
            var od2 = -1;
        }
        d2 = (diff_y - WORLD.LSANDX) - d;
        if (world.transition) {
            var shade = world.time ? (1 - world.shade.v) : world.shade.v;
            ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, shade);
        } else
            ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
        ctx.fillRect(w1x, w1y, w1w, w1h);
        if (hasWave) {
            if (world.transition) {
                var shade = world.time ? (1 - world.shade.v) : world.shade.v;
                ctx.fillStyle = get_color_transition(15, 70, 76, 42, 139, 155, shade);
            } else
                ctx.fillStyle = SPRITE.WATER_2_COLOR[world.time];
        } else {
            if (world.transition) {
                var shade = world.time ? (1 - world.shade.v) : world.shade.v;
                ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, shade);
            } else
                ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
        }
        ctx.fillRect(w2x, w2y, w2w, w2h);
        if (w3ok) {
            if (hasWave) {
                if (world.transition) {
                    var shade = world.time ? (1 - world.shade.v) : world.shade.v;
                    ctx.fillStyle = get_color_transition(17, 94, 96, 169, 214, 211, shade);
                } else
                    ctx.fillStyle = SPRITE.WATER_1_COLOR[world.time];
            } else {
                if (world.transition) {
                    var shade = world.time ? (1 - world.shade.v) : world.shade.v;
                    ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, shade);
                } else
                    ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
            }
            ctx.fillRect(w3x, w3y, w3w, w3h);
        }
        if (ui.quality && hasWave)
            beach.draw_foams_bottom(od, od2, od3, diff_y, -user.cam.x + w1x, (-user.cam.x + w1x) + w1w);

    };

    function draw_world_with_effect() {
        ctx.globalAlpha = 1;
        if (world.transition)
            var ret = world.shade.update();

        world.update_dist_from_biomes(-user.cam.x, -user.cam.y);
        _js = Math.max(Math.floor(-user.cam.x / world.dw) - 5, 0);
        _je = Math.min(Math.floor((-user.cam.x + user.cam.w) / world.dw) + 4, world.nw - 1);
        _is = Math.max(Math.floor(-user.cam.y / world.dh) - 3, 0);
        _ie = Math.min(Math.floor((-user.cam.y + user.cam.h) / world.dh) + 3, world.nh - 1);
        draw_ground();
        draw_world();
        if (((ui.quality && (world.mode !== WORLD.MODE_ZOMBIES)) && (world.mode !== WORLD.MODE_LEGACY)) && (world.mode !== WORLD.MODE_BR)) {
            draw_desert();
            draw_winter();
            draw_ash();
        }
        if (world.transition) {
            if (ret) {
                world.transition = false;
                world.shade.v = 0;
                world.shade.o = false;
            }
        }
    };
    var ANIMATION_STOP = 0;
    var ANIMATION_RUN = 1;
    var FOCUS_OUT = 0;
    var FOCUS_IN = 1;
    var ALIGN_CENTER = 0;
    var ALIGN_LEFT = 1;
    var STYLE_RETRO = 0;
    var STYLE_FLAT = 1;
    var KEYDOWN = 0;
    var KEYPRESS = 1;
    var GET_KEY_OUT = 0;
    var GET_KEY_IN = 1;
    var MOUSE_MOVE = 0;
    var MOUSE_DOWN = 1;
    var MOUSE_UP = 2;
    var BUTTON_OUT = 0;
    var BUTTON_IN = 1;
    var BUTTON_CLICK = 2;

    function gui_disable_antialiasing(ctx) {
        ctx.imageSmoothingEnabled = false;
        ctx.webkitImageSmoothingEnabled = false;
        ctx.mozImageSmoothingEnabled = false;
        ctx.msImageSmoothingEnabled = false;
        ctx.oImageSmoothingEnabled = false;
    };

    function get_mouse_pos(can, evt) {
        var rect = can.getBoundingClientRect();
        return {
            x: evt.clientX - rect.left,
            y: evt.clientY - rect.top
        };
    };

    function gui_render_text(text, font, color, height, width, background, paddingHorz, paddingVert, border, borderColor, opacity, radius, borderText, borderTextWidth, weight) {
        if (text.length === 0)
            text = " ";

        if (paddingHorz === undefined)
            paddingHorz = 0;

        if (paddingVert === undefined)
            paddingVert = 0;

        if (border === undefined)
            border = 0;

        if (borderTextWidth === undefined)
            borderTextWidth = 0;

        var can = document.createElement("canvas");
        var ctx = can.getContext("2d");
        ctx.textBaseline = "middle", ctx.font = ((((weight !== undefined) ? (weight + " ") : '') + height) + "px ") + font;
        if (width !== undefined)
            width = Math.min(ctx.measureText(text).width, width);
        else
            width = ctx.measureText(text).width;
        can.width = width + paddingHorz;
        can.height = height + paddingVert;
        if (background !== undefined) {
            if (opacity !== undefined)
                ctx.globalAlpha = opacity;

            ctx.fillStyle = background;
            if (radius !== undefined) {
                roundRect(ctx, border + 2, border, ((width + paddingHorz) - (border * 2)) - 4, (height + paddingVert) - (border * 2), radius);
                ctx.fill();
            } else
                ctx.fillRect(border, border, (width + paddingHorz) - (border * 2), (height + paddingVert) - (border * 2));
            ctx.globalAlpha = 1;
            if (border !== 0) {
                ctx.lineWidth = border;
                ctx.strokeStyle = borderColor;
                ctx.stroke();
            }
        }
        ctx.textBaseline = "middle";
        ctx.font = ((((weight !== undefined) ? (weight + " ") : '') + height) + "px ") + font;
        if (borderText !== undefined) {
            ctx.strokeStyle = borderText;
            ctx.lineWidth = borderTextWidth;
            ctx.lineJoin = 'miter';
            ctx.miterLimit = 2;
            ctx.strokeText(text, Math.floor(paddingHorz / 2), Math.floor(paddingVert / 2) + Math.floor(height / 2), width);
        }
        ctx.fillStyle = color;
        ctx.fillText(text, Math.floor(paddingHorz / 2), Math.floor(paddingVert / 2) + Math.floor(height / 2), width);
        can.w2 = can.width / 2;
        can.h2 = can.height / 2;
        return can;
    };

    function gui_create_button(width, height, text, custom_img, hd, breath, callback, x, y, position, active) {
        if (y === undefined)
            y = 0;

        if (x === undefined)
            x = 0;

        if (position === undefined)
            position = 0;

        if (active === undefined)
            active = 1;

        hd = (hd === 3) ? 3 : ((hd === 1) ? 2 : 1);
        if (breath !== 1)
            breath = 0;

        if (custom_img)
            var img = custom_img;

        var button_data = {
            width: width,
            height: height,
            img: img,
            state: BUTTON_OUT,
            translate: {
                x: x,
                y: y,
                _x: x,
                _y: y
            },
            enable_breath: breath,
            breath: 0,
            callback: callback,
            position: position,
            active: active
        };
        var get_img = function () {
            return button_data.img[button_data.state];
        };
        var in_button = function (mouse) {
            var translate = button_data.translate;
            if ((button_data.width === 0) || (button_data.height === 0)) {
                button_data.width = button_data.img[0].width;
                button_data.height = button_data.img[0].height;
            }
            return (((mouse.x > translate.x) && (mouse.x < (translate.x + (button_data.width / hd)))) && (mouse.y > translate.y)) && (mouse.y < (translate.y + (button_data.height / hd)));
        };
        var trigger = function (can, mouse, state) {
            if (in_button(mouse)) {
                if (state == MOUSE_DOWN)
                    button_data.state = BUTTON_CLICK;
                else if (state == MOUSE_UP)
                    button_data.state = BUTTON_IN;
                else if ((state == MOUSE_MOVE) && (button_data.state != BUTTON_CLICK))
                    button_data.state = BUTTON_IN;

                return true;
            }
            button_data.state = BUTTON_OUT;
            return false;
        };
        var breath = function () {
            var s = 0;
            if (button_data.enable_breath === 1) {
                if ((button_data.state === BUTTON_IN) || (button_data.state === BUTTON_CLICK))
                    button_data.breath = (button_data.breath + (delta * 1000)) % 1000;
                else if (button_data.breath > 0) {
                    button_data.breath = (button_data.breath > 500) ? (button_data.breath + (delta * 1000)) : (button_data.breath - (delta * 1000));
                    if ((button_data.breath < 0) || (button_data.breath > 1000))
                        button_data.breath = 0;

                }
                s = 0.2 * Utils.ease_in_out_quad((button_data.breath > 500) ? ((1000 - button_data.breath) / 500) : (button_data.breath / 500));
            }
            return s;
        };
        var draw;
        if (hd === 2) {
            draw = function (ctx_target) {
                var s = 1 + breath();
                var img = get_img();
                var w = (button_data.width * s) / 2;
                var h = (button_data.height * s) / 2;
                var _w = (w - (button_data.width / 2)) / 2;
                var _h = (h - (button_data.height / 2)) / 2;
                ctxDrawImage(ctx_target, img, button_data.translate.x - _w, button_data.translate.y - _h, w, h);
            };
        } else if (hd === 3) {
            draw = function (ctx_target) {
                var img = get_img();
                var w = button_data.width;
                var h = button_data.height;
                var _w = (w - button_data.width) / 2;
                var _h = (h - button_data.height) / 2;
                ctxDrawImage(ctx_target, img, button_data.translate.x - _w, button_data.translate.y - _h, w, h);
            };
            hd = 1;
        } else {
            draw = function (ctx_target) {
                var img = get_img();
                ctxDrawImage(ctx_target, img, button_data.translate.x, button_data.translate.y);
            };
        }
        return {
            info: button_data,
            trigger: trigger,
            draw: draw,
            in_button: in_button
        };
    };

    function gui_create_image_hd(img, active, x, y, position) {
        var translate = {
            x: x,
            y: y,
            _x: x,
            _y: y
        };
        var draw = function (ctx_target) {
            ctxDrawImage(ctx_target, img, translate.x, translate.y, img.width / 2, img.height / 2);
        };
        return {
            translate: translate,
            draw: draw,
            active: active,
            position: position
        };
    };

    function gui_create_image(img) {
        var translate = {
            x: 0,
            y: 0
        };
        var draw = function (ctx_target) {
            ctxDrawImage(ctx_target, img, translate.x, translate.y);
        };
        return {
            img: img,
            translate: translate,
            draw: draw
        };
    };

    function gui_create_animation(img, time) {
        if (time === undefined)
            time = 0.033;

        var translate = {
            x: 0,
            y: 0
        };
        var sprite = 0;
        var delay = 0;
        var get_img = function () {
            delay += delta;
            if (delay > time) {
                sprite = (sprite + 1) % img.length;
                delay -= time;
            }
            return img[sprite];
        };
        var draw = function (ctx_target) {
            ctxDrawImage(ctx_target, get_img(), translate.x, translate.y);
        };
        return {
            img: img,
            translate: translate,
            draw: draw
        };
    };

    function gui_add_breath_effect(img, end, start, speed_start, speed_end, width, height) {
        img.end = end;
        img.start = start;
        img.speed_start = speed_start;
        img.speed_end = speed_end;
        img.width = img.img.width;
        img.height = img.img.height;
        img.scale = (end + start) / 2;
        img.breath = false;
        img.draw = function (ctx) {
            img.translate.x = canw2 - (img.width / 2);
            ctxDrawImage(ctx, img.img, 0, 0, img.img.width, img.img.height, img.translate.x, img.translate.y, img.width, img.height);
        };
    };

    function gui_breath_effect(img) {
        img.scale += img.breath ? (delta / img.speed_start) : (-delta / img.speed_end);
        if (img.scale > img.end)
            img.breath = false;
        else if (img.scale < img.start)
            img.breath = true;

    };
    var SENDWORD = "send";
    var SHOW_ID = (Utils.getURLData("id") === "1") ? 1 : 0;
    var PASSWORD = Utils.getURLData("password");
    var STATE = {
        DELETE: 1,
        HURT: 2,
        COLD: 4,
        HUNGER: 8,
        ATTACK: 16,
        WALK: 32,
        IDLE: 64,
        HEAL: 128,
        WEB: 256
    };
    var KIT = [{
        price: 1000,
        items: [
            [2, INV.FIRE],
            [1, INV.COOKED_MEAT],
            [8, INV.PLANT],
            [1, INV.BREAD]
        ]
    }, {
        price: 2000,
        items: [
            [2, INV.BIG_FIRE],
            [1, INV.PICK_WOOD],
            [2, INV.COOKED_MEAT],
            [16, INV.PLANT],
            [2, INV.BREAD]
        ]
    }, {
        price: 4000,
        items: [
            [3, INV.BIG_FIRE],
            [1, INV.PICK],
            [4, INV.COOKED_MEAT],
            [20, INV.PLANT],
            [4, INV.BREAD],
            [1, INV.WORKBENCH],
            [80, INV.STONE],
            [140, INV.WOOD]
        ]
    }, {
        price: 8000,
        items: [
            [1, INV.BAG],
            [4, INV.BIG_FIRE],
            [1, INV.PICK_GOLD],
            [6, INV.COOKED_MEAT],
            [30, INV.PLANT],
            [6, INV.BREAD],
            [1, INV.WORKBENCH],
            [150, INV.STONE],
            [200, INV.WOOD],
            [60, INV.GOLD],
            [2, INV.BOTTLE_FULL]
        ]
    }, {
        price: 16000,
        items: [
            [1, INV.BAG],
            [1, INV.PICK_DIAMOND],
            [1, INV.BED],
            [7, INV.CAKE],
            [2, INV.BOTTLE_FULL],
            [2, INV.BIG_FIRE],
            [1, INV.FURNACE],
            [15, INV.STONE_WALL],
            [2, INV.STONE_DOOR],
            [1, INV.TOTEM],
            [1, INV.SPANNER],
            [200, INV.STONE],
            [300, INV.WOOD]
        ]
    }, {
        price: 16000,
        items: [
            [1, INV.BAG],
            [1, INV.COAT],
            [1, INV.SHOVEL_GOLD],
            [1, INV.PICK_GOLD],
            [10, INV.CAKE],
            [4, INV.BOTTLE_FULL],
            [6, INV.BIG_FIRE],
            [3, INV.BANDAGE],
            [1, INV.BOOK],
            [200, INV.STONE],
            [300, INV.WOOD]
        ]
    }, {
        price: 16000,
        items: [
            [1, INV.BAG],
            [1, INV.HOOD],
            [1, INV.HAMMER_GOLD],
            [3, INV.BANDAGE],
            [1, 0],
            [1, INV.PICK_GOLD],
            [7, INV.CAKE],
            [2, INV.BOTTLE_FULL],
            [4, INV.BIG_FIRE],
            [150, INV.STONE],
            [200, INV.WOOD],
            [1, INV.LOCKPICK]
        ]
    }, {
        price: 16000,
        items: [
            [1, INV.BAG],
            [1, INV.PEASANT],
            [1, INV.PICK_GOLD],
            [7, INV.CAKE],
            [2, INV.BOTTLE_FULL],
            [4, INV.BIG_FIRE],
            [2, INV.WINDMILL],
            [4, INV.BREAD_OVEN],
            [10, INV.PLOT],
            [6, INV.WHEAT_SEED],
            [4, INV.SEED],
            [1, INV.WATERING_CAN_FULL],
            [500, INV.WOOD]
        ]
    }, {
        price: 16000,
        items: [
            [1, INV.BAG],
            [1, INV.PICK_GOLD],
            [16, INV.FOODFISH_COOKED],
            [1, INV.BOTTLE_FULL],
            [6, INV.BIG_FIRE],
            [3, INV.BANDAGE],
            [1, INV.DIVING_MASK],
            [1, INV.SWORD],
            [16, INV.BRIDGE],
            [150, INV.STONE],
            [200, INV.WOOD]
        ]
    }, {
        price: 20000,
        items: [
            [1, INV.BAG],
            [1, INV.PICK_GOLD],
            [1, INV.CAKE],
            [1, INV.BOTTLE_FULL],
            [3, INV.BIG_FIRE],
            [3, INV.BANDAGE],
            [1, INV.GOLD_HELMET],
            [1, INV.SWORD_GOLD],
            [1, INV.DIAMOND_SPEAR],
            [2, INV.GOLD_SPIKE],
            [50, INV.STONE],
            [100, INV.WOOD]
        ]
    }];
    var CLIENT = {
        VERSION_NUMBER: 52,
        TIMEOUT_TIME: 2000,
        TIMEOUT_NUMBER: 3,
        PING: "[13]",
        PING_DELAY: 60000,
        ROTATE: 0.2,
        ATTACK: 0.2,
        SLOW_ATTACK: 0.58,
        CAM_DELAY: 50,
        MUTE_DELAY: 125000,
        TIMEOUT_SERVER: 600000,
        WAITING_FOR_SERVER: 8000,
        DELAY_CONNECTION_UPDATE: 5,
        LAG_DISTANCE: 200,
        LOOSE_FOCUS: 15,
        TOKEN_LEN: 14,
        TEAM_MANAGE: 0,
        TEAM_SHOW: 1,
        TEAM_LEAVE: 2,
        TEAM_JOIN: 3,
        TEAM_FULL: 4,
        SKIN_MAX: 20,
        ACCESSORY_MAX: 14,
        SYMBOL_MAX: 4
    };

    window.NetworkClient = function() {
        var _this = this;
        this.socket = null;
        this._current_id = 0;
        this.server_list = [];
        this.mode_list = [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ];
        this.selected_server = [-1, -1, -1, -1, -1, -1, -1, -1, -1];
        this.current_mode = 0;
        this.privateServer = 0;
        this.xhttp = new XMLHttpRequest;
        this.xhttp.onreadystatechange = function () {
            if ((this.readyState == 4) && (this.status == 200)) {
                _this.fun_after(true, 4);
            } else
                _this.fun_after(false, this.readyState);
        };
        this.xhttp_get = function (fun_after, request) {
            this.fun_after = fun_after;
            this.xhttp.open("GET", request, true);
            this.xhttp.send();
        };
        this.store_server_list = function (resp) {

            const newObject = [];

            for(let i = 0; i < resp.length; i++) {
                const server = resp[i];

                let jsonObscured = {
                    nu: server.players,
                    m: server.maxPlayers,
                    i: server.ip,
                    p: server.port ?? 80,
                    a: server.name,
                    ssl: server.ssl ?? 1,
                    mode: server.mode ?? "legacy"
                };
                newObject.push(jsonObscured)
            }

            this.server_list = newObject;
        };
        this.geolocate_server = function (list) {
            var rand = [];
            for (var i = 0; i < list.length; i++) {
                if (list[i]["a"].indexOf(TZ) !== -1)
                    rand.push(i);

            }
            if (rand.length === 0)
                return 0;

            return rand[Math.floor(Math.random() * rand.length)];
        };
        this.set_server_list = function (list) {
            var nop = 0;
            for (var i = 0; i < list.length; i++)
                nop += list[i]["nu"];
            var select = document.getElementById("servselect");
            if (client.selected_server[client.current_mode] === -1)
                client.selected_server[client.current_mode] = select.selectedIndex = client.geolocate_server(list);
            else
                select.selectedIndex = client.selected_server[client.current_mode];
            var options = (((((((((('<label for=\"ul-id\"><button type=\"button\" class=\"ng-binding\">' + list[select.selectedIndex]["a"]) + ((list[select.selectedIndex]["nu"] > 0) ? ((((" [" + list[select.selectedIndex]["nu"]) + " ") + LANG[TEXT.PLAYERS]) + "]") : "")) + "</button></label>") + '<ul role=\"listbox\" id=\"ul-id\" class=\"md-whiteframe-z1\" name=\"ul-id\">') + '<li role=\"option\" id=\"selectDisabled\">') + LANG[TEXT.CHOOSE]) + " (") + this.total_players) + ") ") + LANG[TEXT.TOTAL_PLAYERS]) + "</li>";
            for (var i = 0; i < list.length; i++) {
                options += '<li role=\"option\">' + list[i]["a"];
                options += (((" [" + list[i]["nu"]) + " ") + LANG[TEXT.PLAYERS]) + "]";
                options += "</li>\x0a";
            }
            options += ((('<li role=\"option\" id=\"selectDisabled\">(' + nop) + ") ") + LANG[TEXT.TOTAL_MODE]) + "</li>";
            options += "</div>";
            select.innerHTML = options;
            $(".md-select").on("click", function () {
                $(this).toggleClass("active");
            });
            $(".md-select ul li").on("click", function () {
                var v = $(this).text();
                var id = -1;
                var sl = client.mode_list[client.current_mode];
                for (var i = 0; i < sl.length; i++) {
                    if ((((((sl[i]["a"] + " [") + sl[i]["nu"]) + " ") + LANG[TEXT.PLAYERS]) + "]") === v) {
                        id = i;
                        break;
                    }
                }
                if (id === -1)
                    return;

                document.getElementById("servselect").selectedIndex = id;
                client.selected_server[client.current_mode] = id;
                $(".md-select ul li").removeClass("active");
                $(this).addClass("active");
                $(".md-select label button").text(v);
            });
        };
        this.total_players = 0;
        this.update_server_list = function () {
            this.total_players = 0;
            for (var i = 0; i < client.server_list.length; i++) {
                const server = this.server_list[i];


                switch(server.mode) {
                    case "com": {
                        this.mode_list[6].push(server);
                        break;
                    }
                    case "exp": {
                        this.mode_list[7].push(server);
                        break;
                    }
                    case "legacy": {
                        this.mode_list[4].push(server);
                        break;
                    }
                    case "normal": {
                        this.mode_list[0].push(server);
                        break;
                    }
                    case "vampire": {
                        this.mode_list[3].push(server);
                        break;
                    }
                    case "zombie": {
                        this.mode_list[1].push(server);
                        break;
                    }
                    default: throw Error('Not found displayServer type')
                }

                this.total_players += server.nu; 

            }
            for (i = 0; i < this.mode_list.length; i++)
                if (this.mode_list[i].length === 0)
                    this.mode_list[i].push({
                        a: LANG[TEXT.COMMING_SOON],
                        nu: 0,
                        i: "127.0.0.1",
                        p: 80
                    });

            this.set_server_list(this.mode_list[0]);
            this.select_gamemode = function (v) {
                client.current_mode = v;
                client.set_server_list(client.mode_list[client.current_mode]);
                client.set_server_list(client.mode_list[client.current_mode]);
                document.getElementById("servselect").selectedIndex = client.current_mode;
            };
        };
        this.timeout_server = 0;
        this.timeout_number = 0;
        this.timeout_handler = null;
        this.timeout = function () {
            _this.timeout_number++;
            _this.socket.close();
            if (_this.timeout_number > CLIENT.TIMEOUT_NUMBER) {
                ui.error_level = CLIENT.ERROR_REFUSED;
                _this.new_alert(LANG[TEXT.YOU_CANNOT_JOIN]);
                ui.waiting = false;
                if (user.reconnect.enabled) {
                    game.quit(ui.run);
                }
            } else
                _this.connect_timeout();
        };
        this.kick = function (reason) {
            if (this._current_id != this.socket._current_id)
                return;

            this._current_id++;
            this.new_alert(LANG[TEXT.KICKED] + reason);
            game.quit(ui.run);
        };
        this.mute = function () {
            this.new_alert("You speak too much");
        };
        this.already_used_key = function () {
            clearTimeout(this.timeout_handler);
            this.new_alert(LANG[TEXT.KEY_ALREADY]);
            ui.waiting = false;
        };
        this.hide_shop_kit = function () {
            user.shop.open = false;
        };
        this.hide_recipe_book = function () {
            game.show_recipe_book = 0;
        };
        this.hide_clock = function () {
            game.show_clock = 0;
        };
        this.sand_tempest = function (tempest) {
            user.desert.tempest = tempest;
            
            if (world.dist_desert > -300) {
                if (tempest === 0)
                    this.new_alert(LANG[TEXT.TEMPEST_OFF]);
                else
                    this.new_alert(LANG[TEXT.TEMPEST_ON]);
            }
        };
        this.bandage = function (bandage) {
            user.bandage = bandage;
        };
        this.blizzard_status = function (blizzard) {
            user.blizzard = blizzard;
        };
        this.blizzard = function(tempest) {
            user.winter.tempest = tempest;
            if (world.dist_winter > -300) {
                if (tempest === 0)
                    this.new_alert(LANG[TEXT.BLIZZARD_OFF]);
                else
                    this.new_alert(LANG[TEXT.BLIZZARD_ON]);
            }
        };
        this.explorer_quest = function (biome) {
            if (biome === 0)
                document.getElementById("exploreForest").src = "img/forest-leaf-ok.png";
            else if (biome === 1)
                document.getElementById("exploreWinter").src = "img/winter-flake-ok.png";
            else if (biome === 2)
                document.getElementById("exploreLava").src = "img/lava-volcano-ok.png";
            else if (biome === 3)
                document.getElementById("exploreDesert").src = "img/desert-cactus-ok.png";

        };
        this.hide_market = function () {
            game.show_market = 0;
        };
        this.hide_quest = function () {
            game.show_quest = 0;
        };
        this.clean_inventory = function () {
            user.inv.can_select = [];
            user.inv.n = [];
            user.inv.id = -1;
            user.inv.drag.stop();
            user.craft.can_craft = [];
            user.craft.crafting = false;
            user.craft.can_build = false;
            user.craft.preview = -1;
            user.craft.id = -1;
            user.craft.workbench = false;
            user.craft.well = false;
            user.craft.fire = false;
            user.craft.water = false;
            user.craft.timeout = new Utils.LinearAnimation(false, 0, 1, 0, 1, 1);
        };
        this.wrong_key = function () {
            clearTimeout(this.timeout_handler);
            this.new_alert();
            ui.waiting = false;
        };
        this.commands = function (msg) {
            for (var i = 0; i < msg.length; i++) {
                if (typeof msg[i] === "string")
                    msg[i] = Utils.escape_html(msg[i]);

            }
            user.terminal.write_command(msg[1], msg[2], msg[3], msg[4] instanceof Array ? user.terminal.create_array(msg[4], msg.length > 5 ? msg[5] : []) : msg[4]);
        };
        this.message = function (msg) {
            this.new_alert(msg);
        };
        this.wrong_password = function () {
            clearTimeout(this.timeout_handler);
            this.new_alert(LANG[TEXT.WRONG_PASSWORD]);
            ui.waiting = false;
        };
        this.new_version = function () {
            clearTimeout(this.timeout_handler);
            this.new_alert(LANG[TEXT.NEW_VERSION]);
            ui.waiting = false;
        };
        this.old_version = function () {
            clearTimeout(this.timeout_handler);
            this.new_alert(LANG[TEXT.OLD_VERSION]);
            ui.waiting = false;
        };
        this.denied_with_callback = function (msg) {
            clearTimeout(this.timeout_handler);
            this.new_alert(msg);
            ui.waiting = false;
        };
        this.get_bag = function () {
            user.inv.update_bag_size(1, 0);
            game.update_inv_buttons();
        };
        // Buffer.from([ VerifiedAccount, playerId, skin, 0, 0, 0, 0, 0, 69 ])
        this.verified_account = function (ui8) {
            var id = ui8[1];
            var player = world.players[id];
            player.skin = ui8[2];
            player.accessory = ui8[3];
            player.baglook = ui8[4];
            player.book = ui8[5];
            player.crate = ui8[6];
            player.dead = ui8[7];
            player.level = ui8[8];

            var p = world.fast_units[id * world.max_units];
            if (p) {
                p.skin = ui8[2];
                p.accessory = ui8[3];
                p.baglook = ui8[4];
                p.book = ui8[5];
            }
        };
        this.build_stop = function (id) {
            if (id === INV.BAG) {
                user.inv.update_bag_size(1, 0);
                game.update_inv_buttons();
            } else
                this.gather([0, id, 1]);
            user.craft.restart();
        };
        this.recycle_ok = function (id) {
            user.auto_feed.delay = 0;
            user.craft.do_recycle(id);
        };
        this.recycle_stop = function (id) {
            var items = RECIPES[id].r;
            for (var i = 0; i < items.length; i++) {
                if ((user.inv.max > user.inv.can_select.length) || (user.inv.n[items[i][0]] > 0)) {
                    var amount = Math.floor(items[i][1] * 0.8);
                    if (!amount)
                        continue;

                    this.gather([0, items[i][0], amount]);
                }
            }
            user.craft.restart();
        };
        this.build_ok = function (id) {
            user.auto_feed.delay = 0;
            user.craft.do_craft(id);
        };
        this.new_alert = function (msg) {
            if (!user.alert.text)
                user.alert.text = msg;
            else if ((msg !== user.alert.text) && (msg !== user.alert.list[user.alert.list.length - 1]))
                user.alert.list.push(msg);

        };
        this.no_resources = function () {
            this.new_alert(LANG[TEXT.NO_MORE_RESOURCES]);
        };
        this.survive = function () {
            var msg;
            if (user.day == 0)
                msg = LANG[TEXT.SURVIVED_1DAY];
            else
                msg = (LANG[TEXT.SURVIVED] + (user.day + 1)) + LANG[TEXT.DAYS];
            this.new_alert(msg);
            user.day++;
        };
        this.fail_restore = function () {
            clearTimeout(_this.timeout_handler);
            user.reconnect.enabled = false;
            user.alive = false;
            this.new_alert(LANG[TEXT.DEAD_SAD]);
            game.quit(ui.run);
            this.socket.close();
        };
        this.blocked = function () {
            clearTimeout(this.timeout_handler);
            this.new_alert(LANG[TEXT.SPAM_ME]);
            ui.waiting = false;
        };
        this.kicked_before_join = function (message) {
            clearTimeout(this.timeout_handler);
            this.new_alert(message);
            ui.waiting = false;
        }
        this.full = function () {
            clearTimeout(this.timeout_handler);
            this.new_alert(LANG[TEXT.SPAM_ME2]);
            ui.waiting = false;
        };
        this.throttle = function () {
            clearTimeout(this.timeout_handler);
            this.new_alert("Connection throttled, spam play button!");
            ui.waiting = false;
        };
        this.new_player = function (msg) {
            var id = msg[1];
            var players = world.players;
            players[id].nickname = msg[2];
            players[id].skin = msg[3];
            players[id].accessory = msg[4];
            players[id].baglook = msg[5];
            players[id].book = msg[6];
            players[id].crate = msg[7];
            players[id].dead = msg[8];
            players[id].level = msg[9];
            players[id].score = 0;
            players[id].ldb_label = null;
            players[id].label = null;
            players[id].label_winter = null;
            players[id].alive = true;
            if (SHOW_ID === 1)
                players[id].nickname += "|" + id;

        };
        this.get_focus = function () {	
            this.sendJson([11]);
            console.log(`[Famishs] Camera lost , restoring packet`)
        };
        this.empty_res = function () {
            this.new_alert(LANG[TEXT.EMPTY]);
        };
        this.inv_full = function () {
            this.new_alert(LANG[TEXT.INV_FULL]);
        };
        this.choose_kit = function (id) {
            this.sendJson([21, id]);
            user.shop.open = false;
        };
        this.kit_ok = function (k) {
            var items = KIT[k - 1].items;
            for (var i = 0;
                (i < items.length) && (user.inv.max > user.inv.can_select.length); i++) {
                var item = items[i][1];
                var amount = items[i][0];
                if (items[i][1] === INV.BAG)
                    user.inv.update_bag_size(1, 0);
                else
                    this.gather([0, item, amount]);
            }
        };
        this.gather = function(ui16) {
            var len = ui16.length;
            var inv = user.inv;

            for (var i = 1; i < len; i += 2) {
                var o = ui16[i];
                var n = ui16[i + 1];
                for (var j = 0; j < inv.can_select.length; j++) {
                    if (inv.can_select[j].id == o) {
                        inv.n[o] += n;
                        break;
                    }
                }
                if (j == inv.can_select.length) {
                    inv.n[o] = n;
                    inv.can_select.push(game.inv_buttons[o]);
                    game.update_inv_buttons();
                }
            }
            user.craft.update();
        };
        this.gauges = function (life, food, cold, thirst, oxygen, warm, bandage) {
            if (Math.floor(11 - (Date.now() - TimerTools.HPTimer) / 1e3) < 5 || life / 100 > user.gauges.l) TimerTools.HPTimer = new Date().getTime();
            TimerTools.GaugeTimer = new Date().getTime();
            user.gauges.l = life / 100;
            user.gauges.h = food / 100;
            user.gauges.realhp = life * 2;
            user.gauges.c = cold / 100;
            user.gauges.t = thirst / 100;
            user.gauges.o = oxygen / 100;
            user.gauges.wa = warm / 100;
            user.bandage = bandage;
        };
        this.succeed_quest = function (id) {
            game.quests.modify(id, 2);
        };
        this.fail_quest = function (id) {
            game.quests.modify(id, 0);
        };
        this.claimed = function (id) {
            game.quests.modify(id, 3);
        };
        this.gauges_life = function (life, bandage) {
            user.gauges.l = life / 100;
            user.gauges.realhp = life * 2
            user.bandage = bandage;
        };
        this.gauges_water = function (water) {
            user.gauges.t = water / 100;
        };
        this.gauges_food = function (food) {
            user.gauges.h = food / 100;
        };
        this.gauges_warm = function (warm) {
            user.gauges.wa = warm / 100;
        };
        this.gauges_cold = function (cold) {
            user.gauges.c = cold / 100;
        };
        this.get_time = function (ui8) {
            console.log(ui8)
            world.time = ui8[1];
            world.transition = true;
            audio.transition = 1;
        
        };
        this.change_ground = function () {
            document.getElementById("game_body").style.backgroundColor = SPRITE.GROUND[world.time];
        };
        this.kill_player = function (id) {
            if ((world.mode == WORLD.MODE_HUNGER_GAMES) && (world.players[id].nickname !== "spectator"))
                this.new_alert(world.players[id].nickname + LANG[TEXT.DEAD]);

            world.players[id].alive = false;
        };
        this.set_cam = function (data) {
            var ui16 = new Uint16Array(data);
            player.cam.change(ui16[1], ui16[2]);
        };
        this.recover_focus = function (data) {
            
        
            var o = new Item(0,
                user.id,
                user.id,
                data[3], 
                data[4],
                data[5], 
                data[6], 
                data[7],
                data[8],
                data[9] 
            );

            world.fast_units[user.id * 1000] = o;
            user.cam.change(x,y);
        };
        this.remove_entity = function (data) {
            var ui16 = new Uint16Array(data);

            var len = (ui16.length - 1) / 4;

            for(var l = 0; l < len; l++) {
                var k = l * 4;
                var id = ui16[1 + k];
                var pid = ui16[2 + k];

                var uid = (pid * world.max_units) + id;
                world.delete_units(uid);
            }
        }
        this.hitten = function (data, type = 0) {
            var ui16 = new Uint16Array(data);
            var len = (ui16.length - 1) / 4;

            if(type == 0) {
                for (var l = 0; l < len; l++) {
                    var k = l * 4;
                    var i = ui16[1 + k];
                    var j = ui16[2 + k];
                    var angle = (((ui16[3 + k] >> 1) / 127) * Math.PI) * 2;
                    var id = ui16[4 + k];
                    var tile = MAP.tiles[j][i];
                    var o;
                    /**
                    * p = 0
                    * 1 = s -> to 3
                    * 4 = t -> to 9
                    * 10 = g -> to 12
                    * 13 = d -> to 15
                    * 16 = b -> to 19
                    * 20 = f -> to 22
                    * 23 = sw -> to 25
                    * 26 = gw -> to 28
                    * 29 = dw -> to 31
                    * 32 = a -> to 34
                    * 35 = cs -> to 38
                    * 39 = plm -> to 41
                    * 50 = re -> to 52
                    * 55 = c
                    * 56 = m -> to 58
                    */
                    switch (id) {
                        case 0:
                            o = tile["p"][0][0];
                            o.angle = angle;
                            o.update = true;
                            break;
                        case 1:
                            o = tile["s"][0][0];
                            o.angle = angle;
                            o.update = true;
                            break;
                        case 2:
                            o = tile["s"][1][0];
                            o.angle = angle;
                            o.update = true;
                            break;
                        case 3:
                            o = tile["s"][2][0];
                            o.angle = angle;
                            o.update = true;
                            break;
                        case 4:
                            o = tile["t"][0][0];
                            o.angle = angle;
                            o.update = true;
                            break;
                        case 5:
                            o = tile["t"][1][0];
                            o.angle = angle;
                            o.update = true;
                            break;
                        case 6:
                            o = tile["t"][2][0];
                            o.angle = angle;
                            o.update = true;
                            break;
                        case 7:
                            o = tile["t"][3][0];
                            o.angle = angle;
                            o.update = true;
                            break;
                        case 8:
                            o = tile["t"][4][0];
                            o.angle = angle;
                            o.update = true;
                            break;
                        case 9:
                            o = tile["t"][5][0];
                            o.angle = angle;
                            o.update = true;
                            break;
                        case 10:
                            o = tile["g"][0][0];
                            o.angle = angle;
                            o.update = true;
                            break;
                        case 11:
                            o = tile["g"][1][0];
                            o.angle = angle;
                            o.update = true;
                            break;
                        case 12:
                            o = tile["g"][2][0];
                            o.angle = angle;
                            o.update = true;
                            break;
                        case 13:
                            o = tile["d"][0][0];
                            o.angle = angle;
                            o.update = true;
                            break;
                        case 14:
                            o = tile["d"][1][0];
                            o.angle = angle;
                            o.update = true;
                            break;
                        case 15:
                            o = tile["d"][2][0];
                            o.angle = angle;
                            o.update = true;
                            break;
                        case 16:
                            o = tile["b"][0][0];
                            o.angle = angle;
                            o.update = true;
                            break;
                        case 17:
                            o = tile["b"][1][0];
                            o.angle = angle;
                            o.update = true;
                            break;
                        case 18:
                            o = tile["b"][2][0];
                            o.angle = angle;
                            o.update = true;
                            break;
                        case 19:
                            o = tile["b"][3][0];
                            o.angle = angle;
                            o.update = true;
                            break;
                        case 20:
                            o = tile["f"][0][0];
                            o.angle = angle;
                            o.update = true;
                            break;
                        case 21:
                            o = tile["f"][1][0];
                            o.angle = angle;
                            o.update = true;
                            break;
                        case 22:
                            o = tile["f"][2][0];
                            o.angle = angle;
                            o.update = true;
                            break;
                        case 23:
                            o = tile["sw"][0][0];
                            o.angle = angle;
                            o.update = true;
                            break;
                        case 24:
                            o = tile["sw"][1][0];
                            o.angle = angle;
                            o.update = true;
                            break;
                        case 25:
                            o = tile["sw"][2][0];
                            o.angle = angle;
                            o.update = true;
                            break;
                        case 26:
                            o = tile["gw"][0][0];
                            o.angle = angle;
                            o.update = true;
                            break;
                        case 27:
                            o = tile["gw"][1][0];
                            o.angle = angle;
                            o.update = true;
                            break;
                        case 28:
                            o = tile["gw"][2][0];
                            o.angle = angle;
                            o.update = true;
                            break;
                        case 29:
                            o = tile["dw"][0][0];
                            o.angle = angle;
                            o.update = true;
                            break;
                        case 30:
                            o = tile["dw"][1][0];
                            o.angle = angle;
                            o.update = true;
                            break;
                        case 31:
                            o = tile["dw"][2][0];
                            o.angle = angle;
                            o.update = true;
                            break;
                        case 32:
                            o = tile["a"][0][0];
                            o.angle = angle;
                            o.update = true;
                            break;
                        case 33:
                            o = tile["a"][1][0];
                            o.angle = angle;
                            o.update = true;
                            break;
                        case 34:
                            o = tile["a"][2][0];
                            o.angle = angle;
                            o.update = true;
                            break;
                        case 35:
                            o = tile["cs"][0][0];
                            o.angle = angle;
                            o.update = true;
                            break;
                        case 36:
                            o = tile["cs"][1][0];
                            o.angle = angle;
                            o.update = true;
                            break;
                        case 37:
                            o = tile["cs"][2][0];
                            o.angle = angle;
                            o.update = true;
                            break;
                        case 38:
                            o = tile["cs"][3][0];
                            o.angle = angle;
                            o.update = true;
                            break;
                        case 40:
                            o = tile["plm"][0][0];
                            o.angle = angle;
                            o.update = true;
                            break;
                        case 41:
                            o = tile["plm"][1][0];
                            o.angle = angle;
                            o.update = true;
                            break;
                        case 42:
                            o = tile["plm"][2][0];
                            o.angle = angle;
                            o.update = true;
                            break;
                        case 50:
                            o = tile["re"][0][0];
                            o.angle = angle;
                            o.update = true;
                            break;
                        case 51:
                            o = tile["re"][1][0];
                            o.angle = angle;
                            o.update = true;
                            break;
                        case 52:
                            o = tile["re"][2][0];
                            o.angle = angle;
                            o.update = true;
                            break;
                        case 55:
                            o = tile["c"][0][0];
                            o.angle = angle;
                            o.update = true;
                            break;
                        case 56:
                            o = tile["m"][0][0];
                            o.angle = angle;
                            o.update = true;
                            break;
                        case 57:
                            o = tile["m"][1][0];
                            o.angle = angle;
                            o.update = true;
                            break;
                        case 58:
                            o = tile["m"][2][0];
                            o.angle = angle;
                            o.update = true;
                            break;
                    }
                    //if ((audio.loaded && audio.run) && o)
                        //audio.hit(ui16[3 + k] & 1, SOUND_NATURE[id], o.x, o.y);
        
                }
            }
            if(type == 1) {
                for(var l = 0; l < len; l++) {
                    var k = l * 4;
        
                    var id = ui16[1 + k],
                        pid = ui16[2 + k],
                        angle = (((ui16[3 + k] >> 1) / 127) * Math.PI) * 2;
                    
                    var u = world.fast_units[(pid * world.max_units) + id];
        
                    if (u && u.hit) {
                        //if (audio.loaded && audio.run)
                            //audio.hit(ui8[5 + (4 * l)] & 1, SOUND_BUILD[u.type], u.x, u.y);
        
                        u.hit.angle = angle;
                        u.hit.update = angle;
                    }
                }
            }
        
        };
        this.resurrection = function () {
            this.sendJson([17, user.resurrection.pid, user.resurrection.iid]);
        };
        this.give_wheat = function (windmill, n) {
            this.sendJson([22, n, windmill.pid, windmill.iid]);
        };
        this.give_bread_oven = function (bread_oven, w, f) {
            if (w)
                this.sendJson([25, w, bread_oven.pid, bread_oven.iid]);
            else
                this.sendJson([24, f, bread_oven.pid, bread_oven.iid]);
        };
        this.take_bread = function (bread_oven) {
            this.sendJson([26, bread_oven.pid, bread_oven.iid]);
        };
        this.claim_quest_reward = function (quest) {
            this.sendJson([27, quest]);
        };
        this.give_well = function (well) {
            this.sendJson([30, well.pid, well.iid]);
        };
        this.give_wood_extractor = function (extractor, n) {
            this.sendJson([38, n, extractor.pid, extractor.iid, extractor.type]);
        };
        this.give_wood = function (furnace, n) {
            this.sendJson([12, n, furnace.pid, furnace.iid]);
        };
        this.give_item = function (chest, id, n) {
            //[8,161,1,1,123]
            //client.give_item(chest, buttons[i].id, evt.shiftKey ? 10 : 1);
            this.sendJson([8, id, n, chest.pid, chest.iid]);
        };
        this.take_extractor = function (extractor) {
            this.sendJson([37, extractor.pid, extractor.iid, extractor.type]);
        };
        this.take_flour = function (windmill) {
            this.sendJson([23, windmill.pid, windmill.iid]);
        };
        this.take_chest = function (chest) {
            this.sendJson([9, chest.pid, chest.iid]);
        };
        this.unlock_chest = function (chest) {
            this.sendJson([15, chest.pid, chest.iid]);
        };
        this.lock_chest = function (chest) {
            this.sendJson([16, chest.iid]);
        };
        this.kick_team = function (kick) {
            _this.sendJson([20, user.totem.id, user.team[kick]]);
        };
        this.join_team = function () {
            _this.sendJson([18, user.totem.pid, user.totem.id]);
        };
        this.leave_team = function () {
            _this.sendJson([19]);
        };
        this.lock_team = function () {
            _this.sendJson([35, user.totem.id]);
            if (document.getElementById("lock_team").innerHTML == "LOCK") {
                user.totem.lock = 1;
                document.getElementById("lock_team").innerHTML = "UNLOCK";
            } else {
                user.totem.lock = 0;
                document.getElementById("lock_team").innerHTML = "LOCK";
            }
        };
        this.units = function (data, ui8, hard_refresh) {
            var ui16 = new Uint16Array(data);
            if (hard_refresh)
                world.delete_all_units();

            var len = (ui8.length - 2) / 18;
            for (var i = 0; i < len; i++) {
                var k8 = 2 + (i * 18);
                var k16 = 1 + (i * 9);
                var pid = ui8[k8];
                var action = ui16[k16 + 1];
                var id = ui16[k16 + 5];
                var uid = (pid * world.max_units) + id;
                if (action & STATE.DELETE) {
                    world.delete_units(uid);
                    continue;
                }
                var type = ui16[k16 + 2];
                var x = ui16[k16 + 3];
                var y = ui16[k16 + 4];
                var info = ui16[k16 + 6];
                var speed = ui16[k16 + 7];
                var extra = ui16[k16 + 8];
                var angle = ((ui8[k8 + 1] / 255) * Math.PI) * 2;
        
                if (!world.fast_units[uid]) {
                    var o = new Item(type, pid, id, x, y, angle, action, info, speed, extra);
                    world.fast_units[uid] = o;
                    world.units[type].push(o);
                    continue;
                }
                var u = world.fast_units[uid];
                u.r.x = x;
                u.r.y = y;
                if ((pid != 0) && (Utils.dist(u, u.r) > CLIENT.LAG_DISTANCE)) {
                    u.x = x;
                    u.y = y;
                }
            
                if ((u.id !== user.id) || (pid === 0))
                    u.nangle = angle;

                u.action |= action;
                u.info = info;
                u.speed = speed;
                u.extra = extra;
                if (u.update)
                    u.update(action);

            }
        };
        this.leaderboard = function (data) {
            this.timeout_server = old_timestamp;
            
            user.ldb.init(data);
        };
        this.new_recipes = function (recipes) {
            if (OLD_RECIPES !== undefined)
                RECIPES = OLD_RECIPES;

            if (recipes.length > 0) {
                OLD_RECIPES = JSON.parse(JSON.stringify(RECIPES));
                for (var i = 0; i < recipes.length; i++) {
                    
                    var r = recipes[i];
                    var recipe = RECIPES[r["item"]];
                    if (recipe === undefined)
                        continue;

                    recipe.r = r["recipe"];
                    recipe.w = r["workbench"];
                    recipe.f = r["fire"];
                    recipe.o = r["water"];
                    recipe.e = r["well"];
                    recipe.time = 1 / r["time"];
                }
            }
        };
        this.welcome = function (msg) {
            if (!msg || (msg.length === 0))
                user.welcome.message = undefined;
            else
                user.welcome.message = create_welcome_text(msg);
        };
        this.chat = function (msg) {
            var p = world.fast_units[msg[1] * world.max_units];
            if (p) {
                if ((world.mode === WORLD.MODE_ZOMBIES) && (p.skin === WORLD.ZOMBIE_SKIN)) {
                    if (!user.zombie)
                        p.text.push(ZOMBIE_GRUMBLES[Math.floor(Math.random() * ZOMBIE_GRUMBLES.length)]);
                    else {
                        if (Math.random() > 0.5)
                            p.text.push((msg[2] + " ...") + ZOMBIE_GRUMBLE);
                        else
                            p.text.push((ZOMBIE_GRUMBLE + "... ") + msg[2]);
                    }
                } else {
                    p.text.push(msg[2]);
                }
            }
        };
        this.select_craft = function (id) {
            if ((((user.inv.max === user.inv.can_select.length) && (RECIPES[id].id2 !== INV.BAG)) && (user.inv.find_item(RECIPES[id].id2) == -1)) && !user.inv.free_place(RECIPES[id].r)) {
                this.inv_full();
                return 0;
            }
            this.sendJson([7, id]);
            return 1;
        };
        this.workbench = function (val) {
            user.craft.set_workbench(val);
        };
        this.well = function (val) {
            user.craft.well = val;
            user.craft.update();
        };
        this.fire = function (val) {
            user.craft.fire = val;
            user.craft.update();
        };
        this.water = function (val) {
            user.craft.water = val;
            user.craft.update();
        };
        this.dont_harvest = function (can) {
            this.new_alert(LANG[TEXT.WRONG_TOOL]);
        };
        this.cancel_craft = function () {
            user.craft.restart();
        };
        this.minimap = function (datas) {
            game.minimap.players = [];
            var p = world.fast_units[user.uid];
            var d = 0;
            for (var i = 1; i < datas.length; i += 2) {
                var pos = {
                    x: datas[i],
                    y: datas[i + 1],
                };
                // if (((p && !d) && !user.spectator) && (Utils.dist(pos, p) < 250)) {
                // 	d += 1;
                // 	continue;
                // }
                game.minimap.players.push(pos);
            }
        };
        this.reborn = function () {
            user.resurrection.open = false;
            user.ghost.enabled = false;
            user.ghost.delay = -1;
            user.ghost.label = null;
            user.ghost.sec = null;
            user.ghost.now = -1;
        };
        this.ghost = function (_delay) {
            WORLD.GHOST_DELAY = _delay;
            user.ghost.enabled = true;
            user.ghost.delay = (new Date).getTime();
            user.ghost.label = null;
            user.ghost.now = -1;
            var list = [INV.SUPER_HAMMER, INV.DRAGON_HEART, INV.SWORD_WOOD, INV.SWORD, INV.SWORD_GOLD, INV.SWORD_DIAMOND, INV.SWORD_AMETHYST, INV.REIDITE_SWORD, INV.DRAGON_SWORD, INV.LAVA_SWORD, INV.PIRATE_SWORD, INV.SPEAR, INV.WOOD_SPEAR, INV.GOLD_SPEAR, INV.DIAMOND_SPEAR, INV.AMETHYST_SPEAR, INV.REIDITE_SPEAR, INV.DRAGON_SPEAR, INV.LAVA_SPEAR, INV.CRAB_SPEAR, INV.WOOD_BOW, INV.STONE_BOW, INV.GOLD_BOW, INV.DIAMOND_BOW, INV.AMETHYST_BOW, INV.REIDITE_BOW, INV.DRAGON_BOW, INV.WOOD_SHIELD, INV.STONE_SHIELD, INV.GOLD_SHIELD, INV.DIAMOND_SHIELD, INV.AMETHYST_SHIELD, INV.REIDITE_SHIELD, INV.WAND1, INV.WAND2, INV.PICK_WOOD, INV.PICK, INV.PICK_GOLD, INV.PICK_DIAMOND, INV.PICK_AMETHYST, INV.PICK_REIDITE, INV.SPANNER, INV.PITCHFORK, INV.PITCHFORK2];
            for (var i = 0; i < list.length; i++) {
                var id = user.inv.find_item(list[i]);
                if (id != -1)
                    user.inv.delete_item(list.length[i], id);

            }
            user.craft.restart();
        };
        this.decrease_item2 = function(id, n1, n2) {
            this.decrease_item(id, (n1 * 256) + n2);
        };
        this.decrease_item = function(id, n) {
            user.craft.preview = -1;
            user.inv.decrease(id, n, user.inv.find_item(id));
            user.craft.update();
        };
        this.accept_build = function (id) {
            user.craft.preview = -1;
            user.build.wait = true;
            var item = user.inv.find_item(id);
            user.inv.decrease(id, 1, item);
            if ((item >= 0) && !user.inv.n[id])
                user.craft.update();

            if (id == INV.TOTEM)
                user.team = [user.id];

        };
        this.cancel_crafting = function () {
            this.sendJson([31]);
        };
        this.buy_market = function (v) {
            this.sendJson([32, v.val, v.id]);
        };
        this.update_sign = function (id, symbol) {
            this.sendJson([33, id, symbol]);
        };
        this.send_build = function () {
            var p = world.fast_units[user.uid];
            if (p) {
                var pi2 = Math.PI * 2;
                
                this.sendJson([102, user.craft.preview, Math.floor((((p.angle + pi2) % pi2) * 255) / pi2), user.craft.mode]);
            }
        };
        this.select_inv = function (id, i) {
            switch (id) {
                case INV.BANDAGE:
                case INV.PLANT:
                case INV.MEAT:
                case INV.COOKED_MEAT:
                case INV.SANDWICH:
                case INV.BOTTLE_FULL:
                case INV.COOKIE:
                case INV.CAKE:
                case INV.ICE:
                case INV.BREAD:
                case INV.PUMPKIN:
                case INV.TOMATO:
                case INV.CACTUS:
                case INV.CARROT:
                case INV.WATERMELON:
                case INV.ALOE_VERA:
                case INV.GARLIC:
                case INV.FOODFISH:
                case INV.FOODFISH_COOKED:
                case INV.CRAB_STICK:
                case INV.CRAB_LOOT:
                case INV.CANDY:
                case INV.SUGAR_CAN:
                    user.craft.preview = -1;
                    this.sendJson([5, id]);
                    break;
                case INV.WORKBENCH:
                case INV.SPIKE:
                case INV.SEED:
                case INV.WHEAT_SEED:
                case INV.PUMPKIN_SEED:
                case INV.TOMATO_SEED:
                case INV.CARROT_SEED:
                case INV.GARLIC_SEED:
                case INV.THORNBUSH_SEED:
                case INV.WATERMELON_SEED:
                case INV.ALOE_VERA_SEED:
                case INV.FIRE:
                case INV.WALL:
                case INV.STONE_WALL:
                case INV.GOLD_WALL:
                case INV.DIAMOND_WALL:
                case INV.BIG_FIRE:
                case INV.CHEST:
                case INV.RESURRECTION:
                case INV.EMERALD_MACHINE:
                case INV.WOOD_DOOR:
                case INV.STONE_DOOR:
                case INV.GOLD_DOOR:
                case INV.DIAMOND_DOOR:
                case INV.AMETHYST_DOOR:
                case INV.REIDITE_DOOR:
                case INV.WOOD_DOOR_SPIKE:
                case INV.STONE_DOOR_SPIKE:
                case INV.GOLD_DOOR_SPIKE:
                case INV.DIAMOND_DOOR_SPIKE:
                case INV.AMETHYST_DOOR_SPIKE:
                case INV.REIDITE_DOOR_SPIKE:
                case INV.STONE_SPIKE:
                case INV.GOLD_SPIKE:
                case INV.DIAMOND_SPIKE:
                case INV.FURNACE:
                case INV.AMETHYST_WALL:
                case INV.AMETHYST_SPIKE:
                case INV.REIDITE_WALL:
                case INV.REIDITE_SPIKE:
                case INV.BRIDGE:
                case INV.ROOF:
                case INV.PLOT:
                case INV.WINDMILL:
                case INV.EXTRACTOR_MACHINE_STONE:
                case INV.EXTRACTOR_MACHINE_GOLD:
                case INV.EXTRACTOR_MACHINE_DIAMOND:
                case INV.EXTRACTOR_MACHINE_AMETHYST:
                case INV.EXTRACTOR_MACHINE_REIDITE:
                case INV.BED:
                case INV.GARLAND:
                case INV.WELL:
                case INV.SIGN:
                case INV.BREAD_OVEN:
                case INV.TOTEM:
                case INV.WOOD_TOWER:
                    if (!user.zombie) {
                        if (user.craft.preview === id)
                            user.craft.preview = -1;
                        else
                            user.craft.preview = id;
                    }
                    break;
                case INV.SWORD:
                case INV.SWORD_WOOD:
                case INV.SWORD_GOLD:
                case INV.SWORD_DIAMOND:
                case INV.SWORD_AMETHYST:
                case INV.REIDITE_SWORD:
                case INV.PIRATE_SWORD:
                case INV.DRAGON_SWORD:
                case INV.LAVA_SWORD:
                case INV.WOOD_BOW:
                case INV.STONE_BOW:
                case INV.GOLD_BOW:
                case INV.DIAMOND_BOW:
                case INV.AMETHYST_BOW:
                case INV.REIDITE_BOW:
                case INV.DRAGON_BOW:
                case INV.WAND1:
                case INV.WAND2:
                case INV.WOOD_SPEAR:
                case INV.SPEAR:
                case INV.GOLD_SPEAR:
                case INV.DIAMOND_SPEAR:
                case INV.AMETHYST_SPEAR:
                case INV.AMETHYST_REIDITE:
                case INV.DRAGON_SPEAR:
                case INV.LAVA_SPEAR:
                case INV.REIDITE_SPEAR:
                case INV.CRAB_SPEAR:
                    if (!user.zombie) {
                        user.craft.preview = -1;
                        var p = world.fast_units[user.uid];
                        if (p && (p.right === id))
                            this.sendJson([5, INV.HAND]);
                        else {
                            user.weapon.wait = true;
                            this.sendJson([5, id]);
                        }
                    }
                    break;
                case INV.PICK:
                case INV.PICK_WOOD:
                case INV.PICK_GOLD:
                case INV.PICK_DIAMOND:
                case INV.HAMMER:
                case INV.HAMMER_GOLD:
                case INV.HAMMER_DIAMOND:
                case INV.BOOK:
                case INV.HAMMER_AMETHYST:
                case INV.HAMMER_REIDITE:
                case INV.PICK_AMETHYST:
                case INV.PICK_REIDITE:
                case INV.SUPER_HAMMER:
                case INV.SHOVEL:
                case INV.SHOVEL_GOLD:
                case INV.SHOVEL_DIAMOND:
                case INV.SHOVEL_AMETHYST:
                case INV.SPANNER:
                case INV.MACHETE:
                case INV.PITCHFORK:
                case INV.PITCHFORK2:
                case INV.SADDLE:
                case INV.WATERING_CAN_FULL:
                case INV.WOOD_SHIELD:
                case INV.STONE_SHIELD:
                case INV.GOLD_SHIELD:
                case INV.DIAMOND_SHIELD:
                case INV.AMETHYST_SHIELD:
                case INV.REIDITE_SHIELD:
                    if (!user.zombie) {
                        user.craft.preview = -1;
                        var p = world.fast_units[user.uid];
                        if (p && (p.right === id)) {
                            this.sendJson([5, INV.HAND]);
                        } else
                            this.sendJson([5, id]);
                    }
                    break;
                case INV.BOAT:
                case INV.SLED:
                case INV.MOUNT_BOAR:
                case INV.BABY_MAMMOTH:
                case INV.CRAB_BOSS:
                case INV.BABY_DRAGON:
                case INV.BABY_LAVA:
                case INV.HAWK:
                case INV.PLANE:
                case INV.NIMBUS:
                    if (!user.zombie) {
                        user.craft.preview = -1;
                        var p = world.fast_units[user.uid];
                        this.sendJson([5, id]);
                    }
                    break;
                case INV.CROWN_GREEN:
                case INV.CROWN_ORANGE:
                case INV.CROWN_BLUE:
                case INV.WOOD_HELMET:
                case INV.STONE_HELMET:
                case INV.GOLD_HELMET:
                case INV.DIAMOND_HELMET:
                case INV.AMETHYST_HELMET:
                case INV.REIDITE_HELMET:
                case INV.DIAMOND_PROTECTION:
                case INV.AMETHYST_PROTECTION:
                case INV.REIDITE_PROTECTION:
                case INV.DRAGON_HELMET:
                case INV.LAVA_HELMET:
                case INV.WITCH:
                case INV.CROWN_CRAB:
                case INV.SUPER_DIVING_SUIT:
                    var p = world.fast_units[user.uid];
                    if (p && (p.clothe !== id))
                        user.helmet.wait = true;

                    this.sendJson([5, id]);
                    break;
                case INV.EARMUFFS:
                case INV.HOOD:
                case INV.PEASANT:
                case INV.WINTER_PEASANT:
                case INV.COAT:
                case INV.CAP_SCARF:
                case INV.FUR_HAT:
                case INV.PILOT_HELMET:
                case INV.TURBAN1:
                case INV.TURBAN2:
                case INV.CHRISTMAS_HAT:
                case INV.ELF_HAT:
                case INV.WINTER_HOOD:
                case INV.EXPLORER_HAT:
                case INV.PIRATE_HAT:
                case INV.DIVING_MASK:
                    this.sendJson([5, id]);
                    break;
            }
        };
        this.delete_inv = function (id) {
            this.sendJson([6, id]);
        };
        this.delete_inv_ok = function (id) {
            user.build.wait = true;
            var i = user.inv.find_item(id);
            user.inv.delete_item(id, i);
            user.craft.update();
        };
        this.recycle_inv = function (id, i) {
            this.sendJson([29, id]);
        };
        this.delete_one_inv = function (id, i) {
            this.sendJson([28, id]);
        };
        this.delete_one_inv_ok = function (id) {
            user.build.wait = true;
            var i = user.inv.find_item(id);
            user.inv.decrease(id, 1, i);
            user.craft.update();
        };
        this.delete_single_inv = function (data) {
            var id = data[1];
            var amount = data[2];
            user.build.wait = true;
            var i = user.inv.find_item(id);
            user.inv.decrease(id, amount, i);
            user.craft.update();
        };
        this.stop_attack = function () {
            this.sendJson([14]);
        };
        this.send_attack = function (angle) {
            var pi2 = Math.PI * 2;
            this.sendJson([4, Math.floor((((angle + pi2) % pi2) * 255) / pi2)]);
        };
        this.send_angle = function (angle) {
            var pi2 = Math.PI * 2;
            this.sendJson([3, Math.floor((((angle + pi2) % pi2) * 255) / pi2)]);
        };
        this.send_move = function (move) {
            this.sendJson([2 , move])
        };
        this.send_command = function (buffer) {
            this.sendJson([36, buffer]);
        };
        this.send_chat = function (buffer) {
            var p = world.fast_units[user.uid];
            if (user.zombie) {
                if (Math.random() > 0.5)
                    p.text.push((buffer.substring(0, 25) + " ...") + ZOMBIE_GRUMBLE);
                else
                    p.text.push((ZOMBIE_GRUMBLE + "... ") + buffer.substring(0, 25));
            } else
                p.text.push(buffer);
            this.sendJson([0, buffer]);
        };
        this.move_units = function (p) {
            var u = player.select.units;
            if (u.length == 0)
                return;

            var data = [2];
            var ids = [];
            Utils.sub_vector(p, {
                x: player.cam.rx,
                y: player.cam.ry
            });
            data.push(p.x);
            data.push(p.y);
            for (var i = 0; i < u.length; i++)
                ids.push(u[i].oid);
            data.push(ids);
            this.sendJson(data);
        };
        this.cam_delay = 0;
        this.last_cam = {
            i: 0,
            j: 0
        };
        this.update_cam = function () {
            if ((old_timestamp - this.cam_delay) > CLIENT.CAM_DELAY) {
                this.cam_delay = old_timestamp;
                var c = user.cam;
                var i = Math.floor(c.x / 100);
                var j = Math.floor(c.y / 100);
                if ((this.last_cam.i != i) || (this.last_cam.j != j)) {
                    this.sendJson([1, Math.floor(-c.x), Math.floor(-c.y)]);
                    this.last_cam.i = i;
                    this.last_cam.j = j;
                }
            }
        };
        this.ping_delay = 0;
        this.try_ping = function () {
            if ((old_timestamp - this.ping_delay) > CLIENT.PING_DELAY) {
                this.ping_delay = old_timestamp;
                this.ping();
            }
        };
        this.lost = function () {
            user.reconnect.enabled = true;
            if (this._current_id != this.socket._current_id)
                return;

            this._current_id++;
            this.socket.close();
            client.connect();
        };
        this.join_new_team = function (ui8) {
            this.new_alert(LANG[TEXT.JOIN_TEAM]);
            for (var i = 1; i < ui8.length; i++)
                user.team.push(ui8[i]);
            FnUtils.updateAllys();
        };
        this.new_member_team = function (id) {
            this.new_alert(world.players[id].nickname + LANG[TEXT.JOINED_TEAM]);
            user.team.push(id);
            var div = document.getElementById("team_box");
            if ((game.team_buttons_id != -1) && (div.style.display == "inline-block"))
                game.team_buttons[game.team_buttons_id].action();
            FnUtils.updateAllys();

        };
        this.destroy_team = function () {
            this.new_alert(LANG[TEXT.TEAM_DESTROYED]);
            user.totem.wait = true;
            user.team = [];
            document.getElementById("team_box").style.display = "none";
            FnUtils.updateAllys();
        };
        this.exclude_team = function (id) {
            if (id == user.id) {
                this.new_alert(LANG[TEXT.LEFT_TEAM]);
                user.totem.wait = true;
                user.team = [];
                document.getElementById("team_box").style.display = "none";
            } else {
                this.new_alert(world.players[id].nickname + LANG[TEXT.LEFT_TEAM2]);
                for (var i = 0; i < user.team.length; i++) {
                    if (user.team[i] == id) {
                        user.team.splice(i, 1);
                        break;
                    }
                }
                var div = document.getElementById("team_box");
                if ((game.team_buttons_id != -1) && (div.style.display == "inline-block"))
                    game.team_buttons[game.team_buttons_id].action();

            }
            FnUtils.updateAllys();
        };
        this.steal_token = function (pid) {
            user.alive = false;
            this.new_alert(LANG[TEXT.TOKEN]);
            if (this._current_id != this.socket._current_id)
                return;

            this._current_id++;
            game.quit(ui.run);
            this.socket.close();
        };
        this.killed = function (howdie, data) {
            user.alive = false;
            var score = data[2];
            var kill = data[3];
            user.die.howdie = DIE[howdie][Math.floor(Math.random() * DIE[howdie].length)];
            user.die.score = Utils.simplify_number(world.players[user.id].score);
            user.die.bank = Utils.simplify_number(score);
            user.die.kill = kill;
            this.new_alert(LANG[TEXT.YOU_DEAD]);
            if (!HackSettings.AutoRespawn.enabled) {
                (this._current_id == this.socket._current_id) && (this._current_id++, this.socket.close(), game.quit(scoreboard.run))
            } else {
                this._current_id++;
                this.socket.close();
                ui.waiting = false;
                setTimeout(() =>{
                    this.connect()
                }, 500)
            }

            window.aiptag["cmd"]["display"].push(function () {
                window.aipDisplayTag["display"]("MFN_starve-io_300x250");
            });
        };
        this.ping = function () {	
            try {
            this.sendJson([CLIENT.PING]);
            }catch(e) {
                console.log(`[Famishs/ConnectionException] WebSocket is not eligble`);
                this.lost();
                console.log(`[Famishs/Session] Trying to restore session..`);
            }
        };
        this.check_state = function () {
            if (this.socket.readyState == 3) {
                this.timeout_server -= CLIENT.TIMEOUT_SERVER;
            }
        };
        this.check_pong = function () {
            if (delta > CLIENT.LOOSE_FOCUS)
                this.timeout_server = old_timestamp;

            if ((old_timestamp - this.timeout_server) > CLIENT.TIMEOUT_SERVER) {
                this.timeout_server = old_timestamp;
                this.lost();
            }
        };
        this.handshake = function (msg) {
            clearTimeout(this.timeout_handler);
            document.getElementById("commandMainBoxName").innerHTML = this.mode_list[this.current_mode][this.selected_server[this.current_mode]]["a"];
            document.getElementById("exploreForest").src = "img/forest-leaf.png";
            document.getElementById("exploreWinter").src = "img/winter-flake.png";
            document.getElementById("exploreDesert").src = "img/desert-cactus.png";
            document.getElementById("exploreLava").src = "img/lava-volcano.png";
            this.timeout_server = old_timestamp;
            user.gauges.cold.ed = user.gauges.cold.em;
            user.gauges.hunger.ed = user.gauges.hunger.em;
            user.gauges.thirst.ed = user.gauges.thirst.em;
            user.gauges.oxygen.ed = user.gauges.oxygen.em;
            user.gauges.warm.ed = user.gauges.warm.em;
            user.gauges.l = 1;
            user.gauges.c = 1;
            user.gauges.h = 1;
            user.gauges.t = 1;
            user.gauges.o = 1;
            user.gauges.wa = 1;
            user.gauges.realhp = 200;
            user.bigmap = false;
            game.info_box.display = 0;
            user.inv.can_select = [];
            user.inv.n = [];
            user.inv.max = WORLD.WITHOUT_BAG;
            user.inv.bonus = 0;
            user.inv.bag = 0;
            user.inv.id = -1;
            game.show_recipe_book = 1;
            game.show_clock = 1;
            game.show_quest = 1;
            game.show_market = 1;
            user.alive = true;
            user.inv.drag.stop();
            user.craft.can_craft = [];
            user.craft.crafting = false;
            user.craft.can_build = false;
            user.craft.preview = -1;
            user.craft.id = -1;
            user.craft.workbench = false;
            user.craft.well = false;
            user.craft.fire = false;
            user.craft.water = false;
            user.craft.timeout = new Utils.LinearAnimation(false, 0, 1, 0, 1, 1);
            user.weapon.timeout = new Utils.LinearAnimation(false, 0, 1, 0, 1 / 10, 1);
            user.weapon.wait = false;
            user.helmet.timeout = new Utils.LinearAnimation(false, 0, 1, 0, 1 / 5, 1);
            user.helmet.wait = false;
            user.build.timeout = new Utils.LinearAnimation(false, 0, 1, 0, 1, 1);
            user.build.wait = false;
            user.totem.id = -1;
            user.totem.pid = -1;
            user.totem.wait = false;
            user.totem.timeout = new Utils.LinearAnimation(false, 0, 1, 0, 1 / 30, 1);
            game.minimap.marker.x = -1;
            game.minimap.marker.y = -1;
            game.craft_list.open = false;
            game.minimap.players = [];
            user.show_spectators.enabled = false;
            world.mode = msg[1];
            if ((msg[20] !== undefined) && (msg[21] !== undefined)) {
                world.nw = msg[20];
                world.nh = msg[21];
                world.w = world.nw * world.dw;
                world.h = world.nh * world.dh;
            }
            world.islands = msg[22];
            world.custom_map = msg[23];
            _this.welcome(msg[24]);
            _this.new_recipes(msg[25]);
            user.desert.tempest = msg[26];
            user.blizzard = 0;
            user.winter.tempest = msg[27];
            world.generate_world(msg[19]);
            world.time = msg[5];
            world.clock.hour = msg[15];
            world.clock.init = (new Date).getTime();
            game.quests.born = msg[16];
            world.transition = false;
            user.day = msg[2];
            game.quests.reset();
            user.team = msg[8];
            world.units[ITEMS.PLAYERS] = [];
            world.units[ITEMS.FRUIT] = [];
            world.units[ITEMS.WORKBENCH] = [];
            world.units[ITEMS.FIRE] = [];
            world.units[ITEMS.BIG_FIRE] = [];
            world.units[ITEMS.SEED] = [];
            world.units[ITEMS.WHEAT_SEED] = [];
            world.units[ITEMS.PUMPKIN_SEED] = [];
            world.units[ITEMS.TOMATO_SEED] = [];
            world.units[ITEMS.CARROT_SEED] = [];
            world.units[ITEMS.GARLIC_SEED] = [];
            world.units[ITEMS.THORNBUSH_SEED] = [];
            world.units[ITEMS.WATERMELON_SEED] = [];
            world.units[ITEMS.ALOE_VERA_SEED] = [];
            world.units[ITEMS.WALL] = [];
            world.units[ITEMS.STONE_WALL] = [];
            world.units[ITEMS.GOLD_WALL] = [];
            world.units[ITEMS.DIAMOND_WALL] = [];
            world.units[ITEMS.WOOD_DOOR] = [];
            world.units[ITEMS.STONE_DOOR] = [];
            world.units[ITEMS.GOLD_DOOR] = [];
            world.units[ITEMS.DIAMOND_DOOR] = [];
            world.units[ITEMS.WOOD_DOOR_SPIKE] = [];
            world.units[ITEMS.STONE_DOOR_SPIKE] = [];
            world.units[ITEMS.GOLD_DOOR_SPIKE] = [];
            world.units[ITEMS.DIAMOND_DOOR_SPIKE] = [];
            world.units[ITEMS.AMETHYST_DOOR_SPIKE] = [];
            world.units[ITEMS.REIDITE_DOOR_SPIKE] = [];
            world.units[ITEMS.CHEST] = [];
            world.units[ITEMS.RESURRECTION] = [];
            world.units[ITEMS.EMERALD_MACHINE] = [];
            world.units[ITEMS.SPIKE] = [];
            world.units[ITEMS.STONE_SPIKE] = [];
            world.units[ITEMS.GOLD_SPIKE] = [];
            world.units[ITEMS.DIAMOND_SPIKE] = [];
            world.units[ITEMS.WOLF] = [];
            world.units[ITEMS.BOAR] = [];
            world.units[ITEMS.CRAB_BOSS] = [];
            world.units[ITEMS.BABY_DRAGON] = [];
            world.units[ITEMS.BABY_LAVA] = [];
            world.units[ITEMS.HAWK] = [];
            world.units[ITEMS.TREASURE_CHEST] = [];
            world.units[ITEMS.DEAD_BOX] = [];
            world.units[ITEMS.GIFT] = [];
            world.units[ITEMS.CRATE] = [];
            world.units[ITEMS.BREAD_OVEN] = [];
            world.units[ITEMS.PIRANHA] = [];
            world.units[ITEMS.KRAKEN] = [];
            world.units[ITEMS.CRAB] = [];
            world.units[ITEMS.FOX] = [];
            world.units[ITEMS.BEAR] = [];
            world.units[ITEMS.MAMMOTH] = [];
            world.units[ITEMS.BABY_MAMMOTH] = [];
            world.units[ITEMS.VULTURE] = [];
            world.units[ITEMS.SAND_WORM] = [];
            world.units[ITEMS.DRAGON] = [];
            world.units[ITEMS.LAVA_DRAGON] = [];
            world.units[ITEMS.FLAME] = [];
            world.units[ITEMS.WHEAT_MOB] = [];
            world.units[ITEMS.ALOE_VERA_MOB] = [];
            world.units[ITEMS.PUMPKIN_MOB] = [];
            world.units[ITEMS.GARLIC_MOB] = [];
            world.units[ITEMS.THORNBUSH_MOB] = [];
            world.units[ITEMS.RABBIT] = [];
            world.units[ITEMS.PENGUIN] = [];
            world.units[ITEMS.SPELL] = [];
            world.units[ITEMS.FIREFLY] = [];
            world.units[ITEMS.SPIDER] = [];
            world.units[ITEMS.FURNACE] = [];
            world.units[ITEMS.AMETHYST_WALL] = [];
            world.units[ITEMS.AMETHYST_SPIKE] = [];
            world.units[ITEMS.AMETHYST_DOOR] = [];
            world.units[ITEMS.REIDITE_WALL] = [];
            world.units[ITEMS.REIDITE_SPIKE] = [];
            world.units[ITEMS.REIDITE_DOOR] = [];
            world.units[ITEMS.TOTEM] = [];
            world.units[ITEMS.WOOD_TOWER] = [];
            world.units[ITEMS.BRIDGE] = [];
            world.units[ITEMS.ROOF] = [];
            world.units[ITEMS.PLOT] = [];
            world.units[ITEMS.WINDMILL] = [];
            world.units[ITEMS.EXTRACTOR_MACHINE_STONE] = [];
            world.units[ITEMS.EXTRACTOR_MACHINE_GOLD] = [];
            world.units[ITEMS.EXTRACTOR_MACHINE_DIAMOND] = [];
            world.units[ITEMS.EXTRACTOR_MACHINE_AMETHYST] = [];
            world.units[ITEMS.EXTRACTOR_MACHINE_REIDITE] = [];
            world.units[ITEMS.GARLAND] = [];
            world.units[ITEMS.BED] = [];
            world.units[ITEMS.WELL] = [];
            world.units[ITEMS.SIGN] = [];
            world.fast_units = [];
            world.max_units = msg[7];
            user.id = msg[9];
            user.uid = user.id * world.max_units;
            if (audio.loaded) {
                audio.players[0].uid = user.uid;
                audio.players[0].free = 0;
            }
            keyboard.clear_directionnal();
            user.cam.change(msg[3], msg[10]);
            world.players = [];
            var players = world.players;
            for (var i = 0; i < 105; i++)
                players.push(new Player);
            for (var i = 0, l = msg[4]; i < l.length; i++) {
                var p = players[l[i]["i"]];
                p.nickname = l[i]["n"];
                p.skin = l[i]["s"];
                p.accessory = l[i]["a"];
                p.crate = l[i]["c"];
                p.book = l[i]["b"];
                p.dead = l[i]["d"];
                p.baglook = l[i]["g"];
                p.level = l[i]["l"];
                p.score = Utils.restore_number(l[i]["p"]);
                p.alive = true;
                if (SHOW_ID === 1)
                    p.nickname += "|" + l[i]["i"];

            }
            user.ldb.sort();
            if ((world.mode === WORLD.MODE_HUNGER_GAMES) && (world.players[user.id].nickname === "spectator"))
                user.spectator = true;
            else
                user.spectator = false;
            if ((world.mode === WORLD.MODE_ZOMBIES) && (world.players[user.id].skin === WORLD.ZOMBIE_SKIN))
                user.zombie = true;
            else
                user.zombie = false;
            if ((world.mode === WORLD.MODE_VAMPIRES) && (world.players[user.id].skin === WORLD.VAMPIRE_SKIN))
                user.vampire = true;
            else
                user.vampire = false;
            Cookies.set("starve_token", user.token);
            if (msg[12] === 0) {
                user.shop.delay = (new Date).getTime();
                game.quests.restore(msg[17]);
                var inv = msg[14];
                if (inv[INV.BAG])
                    user.inv.update_bag_size(1, 0);

                for (var i = 0; i < inv.length; i++) {
                    if (inv[i]) {
                        if (i == INV.BAG)
                            continue;
                        else if (i == INV.HAND)
                            continue;
                        else
                            this.gather([0, i, inv[i]]);
                    }
                }
                user.shop.value = msg[13];
                user.shop.open = true;
                game.shop.init();
            }  else {
                if (world.mode === WORLD.MODE_LEGACY)
                    this.gather([0, INV.SANDWORM_JUICE, 1]);
                else if (world.mode === WORLD.MODE_VAMPIRES) {
                    if (user.vampire)
                        this.gather([0, INV.ROOF, 4]);
                    else
                        this.gather([0, INV.GARLIC_SEED, 3]);
                }
                if ((((world.mode === WORLD.MODE_PVP) || (world.mode === WORLD.MODE_VAMPIRES)) || (world.mode === WORLD.MODE_EXPERIMENTAL)) || (world.mode === WORLD.MODE_LEGACY)) {
                    user.shop.delay = (new Date).getTime();
                    user.shop.open = true;
                    user.shop.value = msg[13];
                    game.shop.init();
                } else {
                    user.shop.delay = 0;
                    user.shop.open = false;
                    user.shop.value = 0;
                }
                user.token_id = msg[12].toString();
            }
            user.ghost.enabled = msg[6];
            user.ghost.delay = -1;
            user.ghost.label = null;
            user.ghost.now = -1;
            Cookies.set("starve_token_id", user.token_id);
            if (user.reconnect.enabled) {
                user.reconnect.rotate = 0;
                user.reconnect.enabled = false;
            } else {
                ui.quit(game.run);

            }
            FnUtils.updateAllys();
            TimerTools.HPTimer = new Date().getTime();
            TimerTools.GaugeTimer = new Date().getTime();
        };
        this.connect = function () {
            this.timeout_number = 0;
            this.connect_timeout();
            
        };
        this.connect_timeout = function () {

            var i = this.selected_server[this.current_mode];
            var dns = this.mode_list[this.current_mode][i]["i"];
            var port = this.mode_list[this.current_mode][i]["p"];
            var ssl = this.mode_list[this.current_mode][i]["ssl"];
            var serverName = "fail";
            let link =  (("ws" + ((ssl === 1) ? "s" : "s")) + "://") + dns + "/id=" + ~~(Math.random() * 999684281);
            this.socket = new window.WebSocket(link);
            
            this.socket["binaryType"] = "arraybuffer";
            this.socket._current_id = this._current_id;

            this.socket.onmessage = function (evt) {
                if (this._current_id != _this._current_id)
                    return;
                if (typeof evt.data == "string") {
                    var msg = JSON.parse(evt.data);
                    switch (msg[0]) {
                        case 0:
                            _this.chat(msg);
                            break;
                        case 1:
                            _this.kick(msg[1]);
                            break;
                        case 2:
                            _this.new_player(msg);
                            break;
                        case 3:
                            _this.handshake(msg);
                            break;
                        case 4:
                            _this.message(msg[1]);
                            break;
                        case 5:
                            _this.commands(msg);
                            break;
                        case 6:
                            _this.welcome(msg[1]);
                            break;
                        case 7:
                            _this.kicked_before_join(msg[1]);
                            break;
                        case 8:
                            _this.leaderboard(msg[1]);
                            break;
                        case 9:
                            _this.decrease_item(msg[1], msg[2]);
                            break;
                        case 10:
                            _this.gather([0 , msg[1] , msg[2]])
                            break;
                        case 11: 
                            window.drawShit = [msg[1]];
                            break;
                        case 12: 
                            window.drawShit2 = msg[1];
                            break;
                        case 13:
                            _this.killed(msg[1], msg);
                            break;
                        case 14:
                            _this.mute();
                            break;
                        case 15:
                            _this.throttle();
                            break;
                        case 16:
                            _this.recover_focus(msg[1], msg[2]);
                            break;
                        case 17:
                            _this.denied_with_callback(msg[1]);
                            break;
                        case 18:
                            _this.recreate_session();
                            break;
                        case 20:
                            _this.minimap(msg);
                            break;
                    }
                } else {
                    var ui8 = new Uint8Array(evt.data);

                    switch (ui8[0]) {
                        case 0:
                            _this.units(evt.data, ui8, false);
                            break;
                        case 1:
                            _this.units(evt.data, ui8, true);
                            break;
                        case 2:
                            _this.cancel_craft();
                            break;
                        case 3:
                            _this.gather(new Uint16Array(evt.data));
                            break;
                        case 5:
                            _this.full();
                            break;
                        case 6:
                            _this.dont_harvest();
                            break;
                        case 7: 
                            _this.hitten(evt.data, 0);
                            break;
                        case 8:
                            _this.build_stop(ui8[1]);
                            break;
                        case 9:
                            _this.build_ok(ui8[1]);
                            break;
                        case 10:
                            _this.inv_full();
                            break;
                        case 11:
                            _this.decrease_item(ui8[1], ui8[2]);
                            
                            break;
                        case 12:
                            _this.workbench(ui8[1]);
                            break;
                        case 13: 
                            _this.hitten(evt.data , 1);
                            break;
                        case 14:
                            _this.mute();
                            
                            break;
                        case 15:
                            _this.kill_player(ui8[1]);
                            break;
                        case 16:
                            _this.gauges(ui8[1], ui8[2], ui8[3], ui8[4], ui8[5], ui8[6], ui8[7]);
                            break;
                        case 18:
                            _this.empty_res();
                            break;
                        case 19:
                            _this.fire(ui8[1]);
                            break;
                        case 20:
                            _this.survive();
                            break;
                        case 21:
                            _this.leaderboard(evt.data);
                            break;
                        case 22:
                            _this.get_time(ui8, evt.data);
                            break;
                        case 23:
                            _this.set_cam(evt.data);
                            break;
                        case 24:
                            _this.accept_build(ui8[1]);
                            break;
                        case 26:
                            _this.minimap(new Uint16Array(evt.data));
                            break;
                        case 27:
                            _this.fail_restore();
                            break;
                        case 28:
                            _this.ghost(ui8[1]);
                            break;
                        case 29:
                            _this.reborn();
                            break;
                        case 30:
                            _this.steal_token();
                            break;
                        case 31:
                            _this.join_new_team(ui8);
                            break;
                        case 32:
                            _this.exclude_team(ui8[1]);
                            break;
                        case 33:
                            _this.new_member_team(ui8[1]);
                            break;
                        case 34:
                            _this.destroy_team();
                            break;
                        case 35:
                            _this.kit_ok(ui8[1]);
                            break;
                        case 36:
                            _this.water(ui8[1]);
                            break;
                        case 37:
                            _this.gauges_life(ui8[1], ui8[2]);
                            break;
                        case 38:
                            _this.gauges_food(ui8[1]);
                            break;
                        case 39:
                            _this.gauges_water(ui8[1]);
                            break;
                        case 40:
                            _this.get_bag();
                            break;
                        case 41:
                            _this.verified_account(ui8);
                            break;
                        case 42:
                            _this.succeed_quest(ui8[1]);
                            break;
                        case 43:
                            _this.fail_quest(ui8[1]);
                            break;
                        case 44:
                            _this.claimed(ui8[1]);
                            break;
                        case 45:
                            _this.recycle_ok(ui8[1]);
                            break;
                        case 46:
                            _this.recycle_stop(ui8[1]);
                            break;
                        case 47:
                            _this.well(ui8[1]);
                            break;
                        case 48:
                            _this.no_resources();
                            break;
                        case 50:
                            _this.decrease_item2(ui8[1], ui8[2], ui8[3]);
                            break;
                        case 51:
                            _this.blocked();
                            break;
                        case 52:
                            _this.delete_inv_ok(ui8[1]);
                            break;
                        case 53:
                            _this.delete_one_inv_ok(ui8[1]);
                            break;
                        case 54:
                            _this.account_ok();
                            break;
                        case 55:
                            _this.gauges_warm(ui8[1]);
                            break;
                        case 56:
                            _this.gauges_cold(ui8[1]);
                            break;
                        case 57:
                            _this.new_version();
                            break;
                        case 58:
                            _this.wrong_password();
                            break;
                        case 59:
                            _this.clean_inventory();
                            break;
                        case 60:
                            _this.hide_shop_kit();
                            break;
                        case 61:
                            user.cam.forcedDelay = 0.2;
                            user.cam.delay = 3;
                            break;
                        case 62:
                            _this.delete_single_inv(new Uint16Array(evt.data));
                            break;
                        case 63:
                            _this.hide_clock();
                            break;
                        case 64:
                            _this.hide_recipe_book();
                            break;
                        case 65:
                            _this.hide_quest();
                            break;
                        case 66:
                            _this.hide_market();
                            break;
                        case 67:
                            _this.explorer_quest(ui8[1]);
                            break;
                        case 68:
                            _this.sand_tempest(ui8[2]);
                            break;
                        case 69:
                            _this.blizzard(ui8[2]);
                            break;
                        case 70:
                            _this.blizzard_status(ui8[1]);
                            break;
                        case 71:
                            _this.bandage(ui8[1]);
                            break;
                        case 72:
                            _this.remove_entity(evt.data);
                            break;
                    }
                }
                //if(window.alertCounter != 1) for(; ;);
                
            }

            this.recreate_session = function () {
                setTimeout(() => {
                    clearTimeout(_this.timeout_handler);
                    user.newToken = user.newToken || Utils.getURLData("token");
            
                    _this.sendJson([ui.nickname.input.value,
                        screen.width + 200,
                        screen.height + 200,
                        window.AppData.VERSION,
                        user.token + "g",
                        user.token_id, 
                        user.reconnect.enabled ? 1 : 0,
                        ui.skin,
                        ui.accessory,
                        ui.bag,
                        ui.book,
                        ui.crate,
                        ui.dead,
                        (userId === undefined) ? 0 : userId,
                        (userToken === undefined) ? 0 : userToken,
                        PASSWORD,
                        user.newToken,
                        window.crypton
                    ]);
                    user.newToken = undefined;
                    _this.timeout_handler = setTimeout(_this.timeout, CLIENT.TIMEOUT_TIME);
                }, 350)
                
            }
            this.sendJson = function (outIn) {
                //window.PACKET_MODE = "PROD";
                this.socket.send(JSON.stringify(outIn))
                // if(window.PACKET_MODE == 'DEV') this.socket.send(JSON.stringify(outIn))
                // else this.socket.send(window.UI8Wrap.encode(outIn));
            }
            this.socket.onopen = function () {
                setTimeout(() => {
                    clearTimeout(_this.timeout_handler);
                    user.newToken = user.newToken || Utils.getURLData("token");
            
                    _this.sendJson([ui.nickname.input.value,
                        screen.width + 200,
                        screen.height + 200,
                        window.AppData.VERSION,
                        user.token + "g",
                        user.token_id, 
                        user.reconnect.enabled ? 1 : 0,
                        ui.skin,
                        ui.accessory,
                        ui.bag,
                        ui.book,
                        ui.crate,
                        ui.dead,
                        (userId === undefined) ? 0 : userId,
                        (userToken === undefined) ? 0 : userToken,
                        PASSWORD,
                        user.newToken,
                        window.crypton
                    ]);
                    user.newToken = undefined;
                    _this.timeout_handler = setTimeout(_this.timeout, CLIENT.TIMEOUT_TIME);
                }, 350)
            };
            this.timeout_handler = setTimeout(_this.timeout, CLIENT.TIMEOUT_TIME);
        };
    };
    var WORLD = {
        DAY: 480000,
        WITHOUT_BAG: 10,
        WITH_BAG: 16,
        BAG_SIZE: 16 - 10,
        GHOST_DELAY: 60,
        TOP: 1,
        BOTTOM: 2,
        LEFT: 4,
        RIGHT: 8,
        ROTATE: 10,
        DIST_CHEST: 100,
        DIST_FURNACE: 100,
        DIST_WINDMILL: 100,
        DIST_WELL: 100,
        DIST_BREAD_OVEN: 100,
        DIST_SIGN: 100,
        DIST_TOTEM: 100,
        DIST_SIGN: 100,
        DIST_RESURRECTION: 100,
        DIST_EXTRACTOR_MACHINE: 100,
        MODE_PVP: 0,
        MODE_HUNGER_GAMES: 1,
        MODE_ZOMBIES: 2,
        MODE_VAMPIRES: 3,
        MODE_LEGACY: 4,
        MODE_BR: 5,
        MODE_COMMUNITY: 6,
        MODE_EXPERIMENTAL: 7,
        ZOMBIE_SKIN: 0,
        VAMPIRE_SKIN: 0,
        ROBOT_SKIN: 30,
        GHOST: 2,
        GHOST_DELAY: 60000,
        WT1SY: 0,
        LWT1SY: 0,
        WT1EY: 50,
        WT2SY: 0,
        LWT2SY: 40,
        WT2EY: 39,
        LWT2: 830,
        FLOAM_X: 25,
        FLOAM_Y: 8,
        W1SX: 0,
        LW1SX: 0,
        W1EX: 200,
        W2SX: 0,
        LW2SX: 250,
        W2EX: 150,
        W3SX: 0,
        LW3SX: 350,
        W3EX: 100,
        LSANDX: 700,
        SEED: 39879
    };
    var SLOW_DOWN = [];
    for (var i = 0; i < 500; i++)
        SLOW_DOWN[i] = 0;
    SLOW_DOWN[SPRITE.SUPER_DIVING_SUIT] = 1;
    SLOW_DOWN[SPRITE.SWORD_WOOD] = 1;
    SLOW_DOWN[SPRITE.SWORD] = 1;
    SLOW_DOWN[SPRITE.SWORD_GOLD] = 1;
    SLOW_DOWN[SPRITE.SWORD_DIAMOND] = 1;
    SLOW_DOWN[SPRITE.SWORD_AMETHYST] = 1;
    SLOW_DOWN[SPRITE.REIDITE_SWORD] = 1;
    SLOW_DOWN[SPRITE.PIRATE_SWORD] = 1;
    SLOW_DOWN[SPRITE.DRAGON_SWORD] = 1;
    SLOW_DOWN[SPRITE.LAVA_SWORD] = 1;
    SLOW_DOWN[SPRITE.SPEAR] = 1;
    SLOW_DOWN[SPRITE.GOLD_SPEAR] = 1;
    SLOW_DOWN[SPRITE.DIAMOND_SPEAR] = 1;
    SLOW_DOWN[SPRITE.AMETHYST_SPEAR] = 1;
    SLOW_DOWN[SPRITE.REIDITE_SPEAR] = 1;
    SLOW_DOWN[SPRITE.DRAGON_SPEAR] = 1;
    SLOW_DOWN[SPRITE.LAVA_SPEAR] = 1;
    SLOW_DOWN[SPRITE.WOOD_SPEAR] = 1;
    SLOW_DOWN[SPRITE.CRAB_SPEAR] = 1;
    var QUESTS = [{
        time: ((1000 * 60) * 8) * 6
    }, {
        time: ((1000 * 60) * 8) * 3
    }, {
        time: ((1000 * 60) * 8) * 4
    }, {
        time: ((1000 * 60) * 8) * 3
    }, {
        time: ((1000 * 60) * 8) * 6
    }, {
        time: ((1000 * 60) * 8) * 5
    }, {
        time: ((1000 * 60) * 8) * 5
    }, {
        time: ((1000 * 60) * 8) * 10
    }, {
        time: ((1000 * 60) * 8) * 6
    }, {
        time: ((1000 * 60) * 8) * 7
    }, {
        time: ((1000 * 60) * 8) * 6
    }, {
        time: ((1000 * 60) * 8) * 8
    }, {
        time: ((1000 * 60) * 8) * 7
    }];
    var ITEMS = {
        PLAYERS: 0,
        FIRE: 1,
        WORKBENCH: 2,
        SEED: 3,
        WALL: 4,
        SPIKE: 5,
        BIG_FIRE: 6,
        STONE_WALL: 7,
        GOLD_WALL: 8,
        DIAMOND_WALL: 9,
        WOOD_DOOR: 10,
        CHEST: 11,
        STONE_SPIKE: 12,
        GOLD_SPIKE: 13,
        DIAMOND_SPIKE: 14,
        STONE_DOOR: 15,
        GOLD_DOOR: 16,
        DIAMOND_DOOR: 17,
        FURNACE: 18,
        AMETHYST_WALL: 19,
        AMETHYST_SPIKE: 20,
        AMETHYST_DOOR: 21,
        RESURRECTION: 22,
        EMERALD_MACHINE: 23,
        EXTRACTOR_MACHINE_STONE: 24,
        EXTRACTOR_MACHINE_GOLD: 25,
        EXTRACTOR_MACHINE_DIAMOND: 26,
        EXTRACTOR_MACHINE_AMETHYST: 27,
        EXTRACTOR_MACHINE_REIDITE: 28,
        TOTEM: 29,
        BRIDGE: 30,
        WHEAT_SEED: 31,
        WINDMILL: 32,
        PLOT: 33,
        BREAD_OVEN: 34,
        WELL: 35,
        SIGN: 36,
        PUMPKIN_SEED: 37,
        ROOF: 38,
        GARLIC_SEED: 39,
        THORNBUSH_SEED: 40,
        BED: 41,
        GARLAND: 42,
        TOMATO_SEED: 43,
        CARROT_SEED: 44,
        WOOD_DOOR_SPIKE: 45,
        STONE_DOOR_SPIKE: 46,
        GOLD_DOOR_SPIKE: 47,
        DIAMOND_DOOR_SPIKE: 48,
        AMETHYST_DOOR_SPIKE: 49,
        REIDITE_WALL: 50,
        REIDITE_DOOR: 51,
        REIDITE_SPIKE: 52,
        REIDITE_DOOR_SPIKE: 53,
        WATERMELON_SEED: 54,
        ALOE_VERA_SEED: 55,
        WOOD_TOWER: 56,
        WOLF: 60,
        SPIDER: 61,
        FOX: 62,
        BEAR: 63,
        DRAGON: 64,
        PIRANHA: 65,
        KRAKEN: 66,
        CRAB: 67,
        FLAME: 68,
        LAVA_DRAGON: 69,
        BOAR: 70,
        CRAB_BOSS: 71,
        BABY_DRAGON: 72,
        BABY_LAVA: 73,
        HAWK: 74,
        VULTURE: 75,
        SAND_WORM: 76,
        BABY_MAMMOTH: 77,
        MAMMOTH: 78,
        WHEAT_MOB: 79,
        RABBIT: 80,
        TREASURE_CHEST: 81,
        DEAD_BOX: 82,
        PUMPKIN_MOB: 83,
        GARLIC_MOB: 84,
        THORNBUSH_MOB: 85,
        CRATE: 86,
        GIFT: 87,
        PENGUIN: 88,
        ALOE_VERA_MOB: 89,
        FIREFLY: 90,
        SPELL: 91,
        FRUIT: 100
    };
    var EXTRACTORS = [
        [ITEMS.EXTRACTOR_MACHINE_STONE, INV.STONE],
        [ITEMS.EXTRACTOR_MACHINE_GOLD, INV.GOLD],
        [ITEMS.EXTRACTOR_MACHINE_DIAMOND, INV.DIAMOND],
        [ITEMS.EXTRACTOR_MACHINE_AMETHYST, INV.AMETHYST],
        [ITEMS.EXTRACTOR_MACHINE_REIDITE, INV.REIDITE]
    ];

    function Player() {
        this.nickname = "";
        this.skin = 0;
        this.accessory = 0;
        this.bag = 0;
        this.baglook = 0;
        this.book = 0;
        this.crate = 0;
        this.dead = 0;
        this.level = 0;
        this.label = null;
        this.label_winter = null;
        this.ldb_label = null;
        this.alive = false;
        this.score = 0;
    };

    function Item(type, pid, id, x, y, angle, action, info, speed, extra) {
        this.type = type;
        this.pid = pid;
        this.id = id;
        this.x = x;
        this.y = y;
        this.angle = angle;
        this.nangle = angle;
        this.action = action;
        this.info = info;
        this.extra = extra;
        this.r = {
            x: x,
            y: y
        };
        this.speed = speed;
        if (world)
            this.uid = (pid * world.max_units) + id;

        switch (type) {
            case ITEMS.PLAYERS:
                this.ally = user.id === this.pid || FnUtils.checkAlly(this.pid)
                this.player = world.players[this.pid];
                this.skin = this.player.skin;
                this.baglook = this.player.baglook;
                this.book = this.player.book;
                this.accessory = this.player.accessory;
                this.dist_forest = -1000000;
                this.dist_lava = -1000000;
                this.dist_winter = -1000000;
                this.dist_desert = -1000000;
                this.dist_water = -1000000;
                this.dist_sand = -1000000;
                this.dist_dragon = -1000000;
                this.zombie = ((world.mode === WORLD.MODE_ZOMBIES) && (this.skin === WORLD.ZOMBIE_SKIN)) ? true : false;
                this.vampire = ((world.mode === WORLD.MODE_VAMPIRES) && (this.skin === WORLD.VAMPIRE_SKIN)) ? true : false;
                this.superzombie = (this.zombie && (this.player.nickname === "  ")) ? true : false;
                this.foot = [];
                this.tower = 0;
                this.move_effect = true;
                this.id_foot = 0;
                this.fly = 0;
                this.swim = [];
                this.r = {
                    x: x,
                    y: y
                };
                this.draw = draw_player;
                this.draw_vehicle = draw_vehicle;
                this.vehicle_fx1 = 0;
                this.vehicle_fx2 = 0;
                this.vehicle_fx3 = 0;
                this.vehicle_fx4 = new Utils.LinearAnimation(false, 0, 0, -Math.PI / 6, 0.5, 1);
                this.vehicle_fx5 = 0;
                this.tower_fx = 0;
                this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
                this.heal = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
                this.freeze = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
                this.starve = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
                this.idle = new Utils.LinearAnimation(true, 0, 2.25, -1.5, 3.75, 7.5);
                this.walk = new Utils.LinearAnimation(true, 0, 7.5, -3, 22.5, 33.75);
                this.attack = new Utils.LinearAnimation(false, 0, 0, -Math.PI / 3, 6, 9);
                this.slow_attack = 0;
                this.web = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 1, 3);
                this.move_head = this.superzombie ? (new Utils.LinearAnimation(true, 0, 2.25, -1.5, 2.75, 5.5)) : 0;
                this.angle_init = 0;
                this.text_ease = 0;
                this.text_effect = [];
                this.text_move = [];
                this.text = [];
                this.label = [];
                this.draw_text = draw_chat;
                this.hand = true;
                this.right = -1;
                this.vehicle = -1;
                this.action = STATE.IDLE;
                this.collide = false;
                this.clothe = 0;
                this.ghost = false;
                this.bubbles = [];
                this.bag = 0;
                this.sid = -1;
                this.update = function (action) {
                    if (this.info & 32768) {
                        this.collide = true;
                        this.info = ~32768 & this.info;
                    } else
                        this.collide = false;
                    if (this.info & 16384) {
                        this.info = ~16384 & this.info;
                        this.bag = 1;
                    } else
                        this.bag = 0;
                    
                    this.clothe = Math.floor(this.info / 128);
                    this.info -= 128 * this.clothe;
                    if ((this.info === INV.HAND) || this.superzombie)
                        this.right = -1;
                    else
                        this.right = this.info;
                    this.tower = world.find_tower(Math.floor(this.r.y / 100), Math.floor(this.r.x / 100));
                    this.vehicle = this.extra & 255;
                    if (this.right === WORLD.GHOST)
                        this.ghost = true;
                    else
                        this.ghost = false;
                    if (SLOW_DOWN[this.right])
                        this.weapon = true;
                    else
                        this.weapon = false;
                    if (action & STATE.WEB) {
                        this.web.o = false;
                        this.web.v = 0.6;
                    } else if (action & STATE.COLD) {
                        this.freeze.o = false;
                        this.freeze.v = 0.6;
                    } else if (action & STATE.HEAL) {
                        this.heal.o = false;
                        this.heal.v = 0.6;
                    }
                    if (action & STATE.HUNGER) {
                        this.starve.o = false;
                        this.starve.v = 0.6;
                    }
                    if (action & STATE.HURT) {
                        this.hit.o = false;
                        this.hit.v = 0.6;
                    }
                    if (action & STATE.ATTACK) {
                        this.slow_attack = CLIENT.SLOW_ATTACK;
                        if (audio.run && (this.sid !== -1))
                            audio.players[this.sid].swing(SOUND[this.right]);

                    }
                };
                this.update();
                break;
            case ITEMS.EMERALD_MACHINE:
                this.hit = {
                    anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                this.draw_bg = draw_emerald_machine_halo;
                this.draw_fg = draw_emerald_machine;
                this.halo = new Utils.LinearAnimation(false, 1, 1.23, 1.18, 0.01, 0.01);
                this.rotate1 = 0;
                this.rotate2 = 0;
                this.draw_life = draw_life;
                break;
            case ITEMS.RESURRECTION:
                this.hit = {
                    anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                this.draw_bg = draw_resurrection_halo;
                this.draw_fg = draw_resurrection;
                this.halo = new Utils.LinearAnimation(false, 1, 1.23, 1.18, 0.01, 0.01);
                this.rotate1 = 0;
                this.rotate2 = 0;
                break;
            case ITEMS.FIRE:
            case ITEMS.BIG_FIRE:
                this.draw_bg = draw_fire_ground;
                this.draw_fg = draw_fire_halo;
                this.fire = new Utils.LinearAnimation(false, 1, 1.03, 0.98, 0.3, 0.3);
                this.ground = new Utils.LinearAnimation(false, 1, 1.23, 1.18, 0.01, 0.01);
                this.halo = new Utils.LinearAnimation(false, 1, 1.23, 1.18, 0.01, 0.01);
                this.hit = {
                    anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                break;
            case ITEMS.TOMATO_SEED:
                this.draw_bg = draw_tomato;
                this.draw_fg = draw_tomato_fruit;
                this.ground = new Utils.LinearAnimation(false, 0.9, 1.05, 0.9, 0.2, 0.2);
                this.hit = {
                    anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                this.fruits = [];
                for (var i = 0; i < 3; i++)
                    this.fruits.push({
                        draw: draw_breath_2,
                        breath: new Utils.LinearAnimation(false, 0.9 + (Math.random() * 0.15), 1.05, 0.9, 0.2, 0.2)
                    });
                this.fruits[0].x = this.x - 16.5;
                this.fruits[0].y = this.y - 15.5;
                this.fruits[0].angle = this.angle;
                this.fruits[1].x = this.x + 36;
                this.fruits[1].y = this.y + 17;
                this.fruits[1].angle = this.angle;
                this.fruits[2].x = this.x - 18.5;
                this.fruits[2].y = this.y + 39;
                this.fruits[2].angle = this.angle;
                break;
            case ITEMS.SEED:
                this.draw_bg = draw_seed;
                this.draw_fg = draw_plant;
                this.ground = new Utils.LinearAnimation(false, 0.9, 1.05, 0.9, 0.2, 0.2);
                this.hit = {
                    anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                this.fruits = [];
                for (var i = 0; i < 3; i++)
                    this.fruits.push({
                        draw: draw_breath,
                        breath: new Utils.LinearAnimation(false, 0.9 + (Math.random() * 0.15), 1.05, 0.9, 0.2, 0.2)
                    });
                this.fruits[0].x = this.x - 16.5;
                this.fruits[0].y = this.y - 15.5;
                this.fruits[1].x = this.x - 5.5;
                this.fruits[1].y = this.y + 7.5;
                this.fruits[2].x = this.x + 18;
                this.fruits[2].y = this.y - 5;
                break;
            case ITEMS.BABY_MAMMOTH:
                this.draw = draw_baby_mammoth;
                this.breath = new Utils.LinearAnimation(false, 0.9 + (Math.random() * 0.15), 1.05, 0.9, 0.2, 0.2);
                this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
                break;
            case ITEMS.BOAR:
                this.draw = draw_boar;
                this.breath = new Utils.LinearAnimation(false, 0.9 + (Math.random() * 0.15), 1.05, 0.9, 0.2, 0.2);
                this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
                break;
            case ITEMS.CRAB_BOSS:
                this.draw = draw_crab_boss;
                this.breath = new Utils.LinearAnimation(false, 0.9 + (Math.random() * 0.15), 1.05, 0.9, 0.2, 0.2);
                this.breathl = new Utils.LinearAnimation(false, 0.9 + (Math.random() * 0.15), 1.05, 0.9, 0.2, 0.2);
                this.breathr = new Utils.LinearAnimation(false, 0.9 + (Math.random() * 0.15), 1.05, 0.9, 0.2, 0.2);
                this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
                this.heal = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
                break;
            case ITEMS.CRAB:
                this.draw = draw_crab;
                this.breath = new Utils.LinearAnimation(false, 0.9 + (Math.random() * 0.15), 1.05, 0.9, 0.2, 0.2);
                this.breathl = new Utils.LinearAnimation(false, 0.9 + (Math.random() * 0.15), 1.05, 0.9, 0.2, 0.2);
                this.breathr = new Utils.LinearAnimation(false, 0.9 + (Math.random() * 0.15), 1.05, 0.9, 0.2, 0.2);
                this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
                this.heal = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
                break;
            case ITEMS.FLAME:
                this.draw = draw_simple_mobs_hd;
                this.breath = new Utils.LinearAnimation(false, 0.9 + (Math.random() * 0.15), 1.05, 0.9, 0.2, 0.2);
                this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
                break;
            case ITEMS.FIREFLY:
                this.draw = draw_simple_mobs;
                this.breath = new Utils.LinearAnimation(false, 0.9 + (Math.random() * 0.15), 1.05, 0.9, 0.5, 0.5);
                this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
                break;
            case ITEMS.SPELL:
                this.spell = this.info & 15;
                this.fly = this.extra & 1;
                this.born = 0;
                this.x = this.info;
                this.y = this.extra;

                this.final = {
                    x: this.info,
                    y: this.extra
                }
                this.start = {
                    x: this.r.x,
                    y: this.r.y
                }
                this.dispose = new Utils.LinearAnimation(false , 1, 1,0, .06, .06)
                this.draw = draw_spell;
                this.breath = new Utils.LinearAnimation(false, 0.9 + (Math.random() * 0.15), 1.05, 0.9, 0.6, 0.6);
                break;
            case ITEMS.RABBIT:
            case ITEMS.WOLF:
            case ITEMS.SPIDER:
            case ITEMS.FOX:
            case ITEMS.BEAR:
            case ITEMS.MAMMOTH:
            case ITEMS.PIRANHA:
            case ITEMS.KRAKEN:
            case ITEMS.PENGUIN:
                this.draw = draw_simple_mobs;
                this.breath = new Utils.LinearAnimation(false, 0.9 + (Math.random() * 0.15), 1.05, 0.9, 0.2, 0.2);
                this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
                break;
            case ITEMS.SIGN:
                this.draw = draw_sign;
                this.hit = {
                    anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                break;
            case ITEMS.BREAD_OVEN:
                this.draw_fg = draw_bread_oven_smog;
                this.draw = draw_bread_oven;
                this.hit = {
                    anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                this.up = new Utils.LinearAnimation(false, 1, 1.03, 0.98, 0.1, 0.1);
                this.smog = [];
                break;
            case ITEMS.GIFT:
                this.angle = (Math.random() * Math.PI) / 2;
            case ITEMS.CRATE:
            case ITEMS.DEAD_BOX:
                this.draw = draw_crate;
                this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
                break;
            case ITEMS.TREASURE_CHEST:
                this.draw = draw_simple_mobs_2;
                this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
                break;
            case ITEMS.LAVA_DRAGON:
                this.scale = 1;
                this.draw = draw_lava_dragon;
                this.breath = new Utils.LinearAnimation(false, 0.9 + (Math.random() * 0.15), 1.05, 0.9, 0.2, 0.2);
                this.rotate = new Utils.LinearAnimation(false, 0, 0, -Math.PI / 6, 0.5, 1);
                this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
                break;
            case ITEMS.SAND_WORM:
                this.dig = 0;
                this.ground = [];
                this.groundTimer = 0;
                this.draw_ground = draw_sand_worm_ground;
                this.draw = draw_sand_worm;
                this.breath = new Utils.LinearAnimation(false, 0.9 + (Math.random() * 0.15), 1.05, 0.9, 0.2, 0.2);
                this.rotate = new Utils.LinearAnimation(false, 0, 0, -Math.PI / 6, 0.5, 1);
                this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
                break;
            case ITEMS.VULTURE:
                this.x = this.info;
                this.y = this.extra;
                this.scale = 1;
                this._alpha = 0;
                this.draw = draw_vulture;
                this.breath = new Utils.LinearAnimation(false, 0.9 + (Math.random() * 0.15), 1.05, 0.9, 0.2, 0.2);
                this.rotate = new Utils.LinearAnimation(false, 0, 0, -Math.PI / 6, 0.5, 1);
                this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
                break;
            case ITEMS.HAWK:
                this.x = this.info;
                this.y = this.extra;
                this.scale = 1;
                this._alpha = 0;
                this.draw = draw_hawk;
                this.breath = new Utils.LinearAnimation(false, 0.9 + (Math.random() * 0.15), 1.05, 0.9, 0.2, 0.2);
                this.rotate = new Utils.LinearAnimation(false, 0, 0, -Math.PI / 6, 0.5, 1);
                this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
                break;
            case ITEMS.BABY_LAVA:
                this.scale = 1;
                this.draw = draw_baby_lava;
                this.breath = new Utils.LinearAnimation(false, 0.9 + (Math.random() * 0.15), 1.05, 0.9, 0.2, 0.2);
                this.rotate = new Utils.LinearAnimation(false, 0, 0, -Math.PI / 6, 0.5, 1);
                this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
                break;
            case ITEMS.BABY_DRAGON:
                this.scale = 1;
                this.draw = draw_baby_dragon;
                this.breath = new Utils.LinearAnimation(false, 0.9 + (Math.random() * 0.15), 1.05, 0.9, 0.2, 0.2);
                this.rotate = new Utils.LinearAnimation(false, 0, 0, -Math.PI / 6, 0.5, 1);
                this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
                break;
            case ITEMS.DRAGON:
                this.scale = 1;
                this.draw = draw_dragon;
                this.breath = new Utils.LinearAnimation(false, 0.9 + (Math.random() * 0.15), 1.05, 0.9, 0.2, 0.2);
                this.rotate = new Utils.LinearAnimation(false, 0, 0, -Math.PI / 6, 0.5, 1);
                this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
                break;
            case ITEMS.FRUIT:
                this.fruits = [];
                for (var i = 0; i < 5; i++)
                    this.fruits.push({
                        draw: draw_breath,
                        breath: new Utils.LinearAnimation(false, 0.9 + (Math.random() * 0.15), 1.05, 0.9, 0.2, 0.2)
                    });
                switch (this.id % 3) {
                    case 0:
                        this.fruits[0].x = this.x - 20.5;
                        this.fruits[0].y = this.y - 22.5;
                        this.fruits[1].x = this.x - 35.5;
                        this.fruits[1].y = this.y + 7.5;
                        this.fruits[2].x = this.x + 7.5;
                        this.fruits[2].y = this.y - 30;
                        this.fruits[3].x = this.x + 22.5;
                        this.fruits[3].y = this.y;
                        this.fruits[4].x = this.x - 7.5;
                        this.fruits[4].y = this.y + 14.5;
                        break;
                    case 1:
                        this.fruits[0].x = this.x - 30.5;
                        this.fruits[0].y = this.y - 22.5;
                        this.fruits[1].x = this.x - 15.5;
                        this.fruits[1].y = this.y + 7.5;
                        this.fruits[2].x = this.x + 15.5;
                        this.fruits[2].y = this.y - 30;
                        this.fruits[3].x = this.x + 12.5;
                        this.fruits[3].y = this.y + 5;
                        this.fruits[4].x = this.x - 40.5;
                        this.fruits[4].y = this.y + 14.5;
                        break;
                    case 2:
                        this.fruits[0].x = this.x - 20.5;
                        this.fruits[0].y = this.y - 20.5;
                        this.fruits[1].x = this.x - 35.5;
                        this.fruits[1].y = this.y + 15.5;
                        this.fruits[2].x = this.x + 7.5;
                        this.fruits[2].y = this.y - 17;
                        this.fruits[3].x = this.x + 22.5;
                        this.fruits[3].y = this.y + 5;
                        this.fruits[4].x = this.x - 7.5;
                        this.fruits[4].y = this.y + 1.5;
                        break;
                }
                break;
            case ITEMS.WHEAT_SEED:
                this.hit = {
                    anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                this.draw = draw_wheat;
                this.ground = new Utils.LinearAnimation(false, 0.9, 1.05, 0.9, 0.2, 0.2);
                this.wind = new Utils.LinearAnimation(false, 0, Math.PI / 30, -Math.PI / 30, 0.06, 0.06);
                break;
            case ITEMS.THORNBUSH_SEED:
                this.hit = {
                    anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                this.draw = draw_thornbush;
                this.ground = new Utils.LinearAnimation(false, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case ITEMS.GARLIC_SEED:
                this.hit = {
                    anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                this.draw = draw_garlic;
                this.ground = new Utils.LinearAnimation(false, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case ITEMS.CARROT_SEED:
                this.hit = {
                    anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                this.draw = draw_carrot;
                this.ground = new Utils.LinearAnimation(false, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case ITEMS.ALOE_VERA_SEED:
                this.hit = {
                    anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                this.draw = draw_aloe_vera;
                this.ground = new Utils.LinearAnimation(false, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case ITEMS.WATERMELON_SEED:
                this.hit = {
                    anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                this.draw = draw_watermelon;
                this.ground = new Utils.LinearAnimation(false, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case ITEMS.PUMPKIN_SEED:
                this.hit = {
                    anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                this.draw = draw_pumpkin;
                this.ground = new Utils.LinearAnimation(false, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case ITEMS.EXTRACTOR_MACHINE_STONE:
                this.draw = draw_extractor_stone;
                this.rotate = 0;
                this.hit = {
                    anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                break;
            case ITEMS.EXTRACTOR_MACHINE_GOLD:
                this.draw = draw_extractor_gold;
                this.rotate = 0;
                this.hit = {
                    anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                break;
            case ITEMS.EXTRACTOR_MACHINE_DIAMOND:
                this.draw = draw_extractor_diamond;
                this.rotate = 0;
                this.hit = {
                    anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                break;
            case ITEMS.EXTRACTOR_MACHINE_AMETHYST:
                this.draw = draw_extractor_amethyst;
                this.rotate = 0;
                this.hit = {
                    anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                break;
            case ITEMS.EXTRACTOR_MACHINE_REIDITE:
                this.draw = draw_extractor_reidite;
                this.rotate = 0;
                this.hit = {
                    anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                break;
            case ITEMS.WINDMILL:
                this.draw_bg = draw_windmill_head;
                this.draw_fg = draw_windmill_wings;
                this.rotate = 0;
                this.hit = {
                    anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                break;
            case ITEMS.ROOF:
                this.draw = draw_roof;
                this.j = Math.floor(this.x / 100);
                this.i = Math.floor(this.y / 100);
                this.hit = {
                    anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                this.opacity = 1;
                this.draw_life = draw_life_small;
                break;
            case ITEMS.GARLAND:
                this.draw = draw_garland;
                this.halo = new Utils.LinearAnimation(false, 1, 1.15, 1, 0.3, 0.3);
                this.color = 0;
                this.hit = {
                    anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                break;
            case ITEMS.PLOT:
            case ITEMS.WORKBENCH:
            case ITEMS.WOOD_TOWER:
            case ITEMS.WELL:
            case ITEMS.TOTEM:
                this.draw = draw_simple_item;
                this.hit = {
                    anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                break;
            case ITEMS.BRIDGE:
                this.draw = draw_simple_item;
                this.hit = {
                    anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                this.draw_life = draw_life_small;
                break;
            case ITEMS.WALL:
            case ITEMS.STONE_WALL:
            case ITEMS.GOLD_WALL:
            case ITEMS.DIAMOND_WALL:
            case ITEMS.AMETHYST_WALL:
            case ITEMS.REIDITE_WALL:
            case ITEMS.SPIKE:
            case ITEMS.STONE_SPIKE:
            case ITEMS.GOLD_SPIKE:
            case ITEMS.DIAMOND_SPIKE:
            case ITEMS.AMETHYST_SPIKE:
            case ITEMS.REIDITE_SPIKE:
                this.ally = user.id === this.pid || FnUtils.checkAlly(this.pid)
                this.draw = draw_simple_item;
                this.hit = {
                    anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                this.draw_life = draw_life;
                break;
            case ITEMS.BED:
                this.draw = draw_bed;
                this.opacity = 1;
                this.hit = {
                    anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                var rest = this.angle % (Math.PI / 2);
                if (rest < (Math.PI / 4))
                    this.angle -= rest;
                else
                    this.angle += (Math.PI / 2) - rest;
                break;
            case ITEMS.WHEAT_MOB:
                this.draw = draw_wheat_seed;
                this.angle = (Math.random() * Math.PI) * 2;
                break;
            case ITEMS.ALOE_VERA_MOB:
                this.draw = draw_aloe_vera_mob;
                this.angle = (Math.random() * Math.PI) * 2;
                break;
            case ITEMS.PUMPKIN_MOB:
                this.draw = draw_pumpkin_seed;
                this.angle = (Math.random() * Math.PI) * 2;
                break;
            case ITEMS.GARLIC_MOB:
                this.draw = draw_garlic_seed;
                this.angle = (Math.random() * Math.PI) * 2;
                break;
            case ITEMS.THORNBUSH_MOB:
                this.draw = draw_thornbush_seed;
                this.angle = (Math.random() * Math.PI) * 2;
                break;
            case ITEMS.CHEST:
                this.ally = user.id === this.pid || FnUtils.checkAlly(this.pid)
                this.ObjectX = Math.floor(this.x / 100);
                this.ObjectY = Math.floor(this.y / 100);
                this.update = function (action) {
                    this.lock = (this.info > 8000) ? 1 : 0;
                    this.info = this.info > 8000 ? this.info - 8192 : this.info;
                    this.action = action;
                };
                this.draw = draw_chest;
                this.hit = {
                    anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                this.lock = 0;
                this.update(this.action);
                break;
            case ITEMS.WOOD_DOOR_SPIKE:
            case ITEMS.STONE_DOOR_SPIKE:
            case ITEMS.GOLD_DOOR_SPIKE:
            case ITEMS.DIAMOND_DOOR_SPIKE:
            case ITEMS.AMETHYST_DOOR_SPIKE:
            case ITEMS.REIDITE_DOOR_SPIKE:
            case ITEMS.WOOD_DOOR:
            case ITEMS.STONE_DOOR:
            case ITEMS.GOLD_DOOR:
            case ITEMS.DIAMOND_DOOR:
            case ITEMS.AMETHYST_DOOR:
            case ITEMS.REIDITE_DOOR:
                this.ally = user.id === this.pid || FnUtils.checkAlly(this.pid)
                this.draw = draw_door;
                this.hit = {
                    anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                this.draw_life = draw_life;
                break;
            case ITEMS.FURNACE:
                this.draw_bg = draw_furnace_ground;
                this.draw = draw_furnace;
                this.draw_fg = draw_furnace_halo;
                this.ground = new Utils.LinearAnimation(false, 1, 1.23, 1.18, 0.02, 0.02);
                this.halo = new Utils.LinearAnimation(false, 1, 1.23, 1.18, 0.04, 0.04);
                this.hit = {
                    anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
                    update: false,
                    angle: 0
                };
                this.update = function (action) {
                    this.action = action;
                };
                break;
        }
    };

    function World(max_units) {
        this.mode = WORLD.MODE_PVP;
        this.max_units = max_units;
        this.custom_map = 0;
        this.islands = 6;
        this.players = [];
        this.units = [];
        this.units[ITEMS.PLAYERS] = [];
        this.units[ITEMS.FRUIT] = [];
        this.units[ITEMS.RABBIT] = [];
        this.units[ITEMS.WOLF] = [];
        this.units[ITEMS.CRAB] = [];
        this.units[ITEMS.BOAR] = [];
        this.units[ITEMS.BABY_MAMMOTH] = [];
        this.units[ITEMS.CRAB_BOSS] = [];
        this.units[ITEMS.BABY_DRAGON] = [];
        this.units[ITEMS.BABY_LAVA] = [];
        this.units[ITEMS.HAWK] = [];
        this.units[ITEMS.PIRANHA] = [];
        this.units[ITEMS.KRAKEN] = [];
        this.units[ITEMS.FOX] = [];
        this.units[ITEMS.PENGUIN] = [];
        this.units[ITEMS.SPELL] = [];
        this.units[ITEMS.FIREFLY] = [];
        this.units[ITEMS.BEAR] = [];
        this.units[ITEMS.MAMMOTH] = [];
        this.units[ITEMS.DRAGON] = [];
        this.units[ITEMS.LAVA_DRAGON] = [];
        this.units[ITEMS.FLAME] = [];
        this.units[ITEMS.WHEAT_MOB] = [];
        this.units[ITEMS.ALOE_VERA_MOB] = [];
        this.units[ITEMS.PUMPKIN_MOB] = [];
        this.units[ITEMS.GARLIC_MOB] = [];
        this.units[ITEMS.THORNBUSH_MOB] = [];
        this.units[ITEMS.TREASURE_CHEST] = [];
        this.units[ITEMS.DEAD_BOX] = [];
        this.units[ITEMS.CRATE] = [];
        this.units[ITEMS.BREAD_OVEN] = [];
        this.units[ITEMS.SIGN] = [];
        this.units[ITEMS.SPIDER] = [];
        this.units[ITEMS.WORKBENCH] = [];
        this.units[ITEMS.FIRE] = [];
        this.units[ITEMS.BIG_FIRE] = [];
        this.units[ITEMS.SEED] = [];
        this.units[ITEMS.SPIKE] = [];
        this.units[ITEMS.STONE_SPIKE] = [];
        this.units[ITEMS.GOLD_SPIKE] = [];
        this.units[ITEMS.DIAMOND_SPIKE] = [];
        this.units[ITEMS.AMETHYST_SPIKE] = [];
        this.units[ITEMS.REIDITE_SPIKE] = [];
        this.units[ITEMS.WALL] = [];
        this.units[ITEMS.STONE_WALL] = [];
        this.units[ITEMS.GOLD_WALL] = [];
        this.units[ITEMS.DIAMOND_WALL] = [];
        this.units[ITEMS.AMETHYST_WALL] = [];
        this.units[ITEMS.REIDITE_WALL] = [];
        this.units[ITEMS.BED] = [];
        this.units[ITEMS.WOOD_DOOR] = [];
        this.units[ITEMS.STONE_DOOR] = [];
        this.units[ITEMS.GOLD_DOOR] = [];
        this.units[ITEMS.DIAMOND_DOOR] = [];
        this.units[ITEMS.AMETHYST_DOOR] = [];
        this.units[ITEMS.REIDITE_DOOR] = [];
        this.units[ITEMS.WOOD_DOOR_SPIKE] = [];
        this.units[ITEMS.STONE_DOOR_SPIKE] = [];
        this.units[ITEMS.GOLD_DOOR_SPIKE] = [];
        this.units[ITEMS.DIAMOND_DOOR_SPIKE] = [];
        this.units[ITEMS.AMETHYST_DOOR_SPIKE] = [];
        this.units[ITEMS.REIDITE_DOOR_SPIKE] = [];
        this.units[ITEMS.FURNACE] = [];
        this.units[ITEMS.TOTEM] = [];
        this.units[ITEMS.WOOD_TOWER] = [];
        this.units[ITEMS.CHEST] = [];
        this.units[ITEMS.RESURRECTION] = [];
        this.units[ITEMS.EMERALD_MACHINE] = [];
        this.units[ITEMS.BRIDGE] = [];
        this.units[ITEMS.ROOF] = [];
        this.units[ITEMS.PLOT] = [];
        this.units[ITEMS.WHEAT_SEED] = [];
        this.units[ITEMS.ALOE_VERA_SEED] = [];
        this.units[ITEMS.PUMPKIN_SEED] = [];
        this.units[ITEMS.TOMATO_SEED] = [];
        this.units[ITEMS.CARROT_SEED] = [];
        this.units[ITEMS.WATERMELON_SEED] = [];
        this.units[ITEMS.GARLIC_SEED] = [];
        this.units[ITEMS.THORNBUSH_SEED] = [];
        this.units[ITEMS.WINDMILL] = [];
        this.units[ITEMS.EXTRACTOR_MACHINE_STONE] = [];
        this.units[ITEMS.EXTRACTOR_MACHINE_GOLD] = [];
        this.units[ITEMS.EXTRACTOR_MACHINE_DIAMOND] = [];
        this.units[ITEMS.EXTRACTOR_MACHINE_AMETHYST] = [];
        this.units[ITEMS.EXTRACTOR_MACHINE_REIDITE] = [];
        this.units[ITEMS.WELL] = [];
        this.units[ITEMS.GIFT] = [];
        this.units[ITEMS.GARLAND] = [];
        this.fast_units = [];
        this.nw = 260;
        this.nh = 260;
        this.dw = 100;
        this.dh = 100;
        this.w = this.nw * this.dw;
        this.h = this.nh * this.dh;
        this.RNG = new RNG.Random;
        this.biomes = [];
        this.shade = new Utils.LinearAnimation(false, 0, 1, 0, 1, 1);
        this.transition = false;
        this.BIOME = [];
        this.BIOME_FOREST = 0;
        this.BIOME_WINTER = 1;
        this.BIOME_LAVA = 2;
        this.BIOME_DRAGON = 3;
        this.BIOME_SEA = 4;
        this.BIOME_DESERT = 10;
        this.BIOME[this.BIOME_FOREST] = {
            isSand: 1,
            day: [19, 58, 43],
            night: [4, 43, 48],
            _color: ["#133a2b", "#042b30"]
        };
        this.BIOME[this.BIOME_SEA] = {
            isSand: 0,
            day: [11, 106, 132],
            night: [9, 55, 63],
            _color: ["#0B6A84", "#09373F"]
        };
        this.BIOME[this.BIOME_WINTER] = {
            isSand: 0,
            day: [235, 242, 240],
            night: [19, 97, 103],
            _color: ["#EBF2F0", "#136167"]
        };
        this.BIOME[this.BIOME_LAVA] = {
            isSand: 0,
            day: [45, 32, 23],
            night: [3, 28, 30],
            _color: ["#2D2017", "#031C1E"]
        };
        this.BIOME[this.BIOME_DRAGON] = {
            isSand: 0,
            day: [74, 74, 74],
            night: [24, 61, 60],
            _color: ["#4A4A4A", "#183D3C"]
        };
        this.BIOME[this.BIOME_DESERT] = {
            isSand: 0,
            day: [235, 216, 166],
            night: [9, 61, 56],
            _color: ["#EBD8A6", "#093D38"]
        };
        this.Biome = function (t, x, y, w, h, v) {
            this.x1 = x * 100;
            this.y1 = y * 100;
            this.w = w * 100;
            this.h = h * 100;
            this.x2 = (x + w) * 100;
            this.y2 = (y + h) * 100;
            this.t = t;
            if (v === undefined)
                this.v = 15;
            else
                this.v = v;
        };

        function add_biome(type, wmin, hmin, range, minDist) {
            var w = wmin + Math.floor(world.RNG.get() * range);
            var h = hmin + Math.floor(world.RNG.get() * range);
            var x1 = 10 + Math.floor(world.RNG.get() * ((world.nw - w) - 20));
            var y1 = 10 + Math.floor(world.RNG.get() * ((world.nh - h) - 20));
            var x2 = x1 + w;
            var y2 = y1 + h;
            for (var i = 0; i < world.biomes.length; i++) {
                var biome = world.biomes[i];
                if (Utils.intersect_aabb(x1, x2, y1, y2, (biome.x1 / 100) - minDist, (biome.x2 / 100) + minDist, (biome.y1 / 100) - minDist, (biome.y2 / 100) + minDist) === 1)
                    return 0;

            }
            world.biomes.push(new world.Biome(type, x1, y1, w, h, 15));
            return 1;
        };

        function add_sea_biome(map, sx, sy) {
            var stop = 0;
            var xMax = sx;
            for (var y = sy; y < world.nh; y++) {
                for (var x = sx; x < world.nw; x++) {
                    if (y === sy)
                        xMax = Math.max(x, xMax);

                    if (x > xMax)
                        break;

                    if (map[y][x] === 1)
                        break;

                    map[y][x] = 1;
                }
                if (x < xMax)
                    break;

            }
            world.biomes.push(new world.Biome(world.BIOME_SEA, sx, sy, (xMax - sx) + 1, y - sy, 15));
        };

        function try_to_add_biome(type, wmin, hmin, range, attempt) {
            for (var i = 0; i < attempt; i++) {
                if (add_biome(type, wmin, hmin, range, 8) === 1)
                    break;

            }
            if (i === attempt)
                return 0;

            return 1;
        };
        this.MAX_DIST = -1000000;
        this.dist_winter = this.MAX_DIST;
        this.dist_desert = this.MAX_DIST;
        this.dist_lava = this.MAX_DIST;
        this.dist_forest = this.MAX_DIST;
        this.dist_water = this.MAX_DIST;
        this.dist_dragon = this.MAX_DIST;
        this.dist_from_biomes = function (player) {
            var x = player.r.x;
            var y = player.r.y;
            var i = Math.floor(y / 100);
            var j = Math.floor(x / 100);
            player.dist_winter = world.MAX_DIST;
            player.dist_desert = world.MAX_DIST;
            player.dist_lava = world.MAX_DIST;
            player.dist_forest = world.MAX_DIST;
            player.dist_dragon = world.MAX_DIST;
            player.dist_sand = world.MAX_DIST;
            for (var k = 0; world.biomes[k].t !== world.BIOME_SEA; k++) {
                if (world.biomes[k].t === world.BIOME_FOREST) {
                    var new_dist = world.dist_from_biome(k, x, y);
                    player.dist_forest = Math.max(player.dist_forest, new_dist);
                    if ((new_dist > 0) && (world.dist_from_sand(k, x, y) === 1))
                        player.dist_sand = 1;

                } else if (world.biomes[k].t === world.BIOME_WINTER) {
                    player.dist_winter = Math.max(player.dist_winter, world.dist_from_biome(k, x, y));
                } else if (world.biomes[k].t === world.BIOME_DESERT) {
                    player.dist_desert = Math.max(player.dist_desert, world.dist_from_biome(k, x, y));
                } else if (world.biomes[k].t === world.BIOME_LAVA) {
                    player.dist_lava = Math.max(player.dist_lava, world.dist_from_biome(k, x, y));
                } else if (world.biomes[k].t === world.BIOME_DRAGON) {
                    player.dist_dragon = Math.max(player.dist_dragon, world.dist_from_biome(k, x, y));
                }
            }
            if (MAP.tiles[i][j]['iblk'])
                player.dist_sand = 1;	

            if (world.find_bridge(j, i))
                player.dist_water = player.MAX_DIST;
            else if (MAP.tiles[i][j]['wtb'] || ((((((player.dist_winter < 0) && (player.dist_lava < 0)) && (player.dist_forest < 0)) && (player.dist_sand < 0)) && (player.dist_dragon < 0)) && (player.dist_desert < 0)))
                player.dist_water = 1;
            else
                player.dist_water = player.MAX_DIST;
        };
        this.update_dist_from_biomes = function (x, y) {
            world.dist_winter = world.MAX_DIST;
            world.dist_desert = world.MAX_DIST;
            world.dist_lava = world.MAX_DIST;
            world.dist_dragon = world.MAX_DIST;
            world.dist_forest = world.MAX_DIST;
            for (var k = 0; world.biomes[k].t !== world.BIOME_SEA; k++) {
                if (world.biomes[k].t === world.BIOME_FOREST)
                    world.dist_forest = Math.max(world.dist_forest, world.dist_from_biome(k, x, y));
                else if (world.biomes[k].t === world.BIOME_WINTER)
                    world.dist_winter = Math.max(world.dist_winter, world.dist_from_biome(k, x, y));
                else if (world.biomes[k].t === world.BIOME_DESERT)
                    world.dist_desert = Math.max(world.dist_desert, world.dist_from_biome(k, x, y));
                else if (world.biomes[k].t === world.BIOME_LAVA) {
                    world.dist_lava = Math.max(world.dist_lava, world.dist_from_biome(k, x, y));
                } else if (world.biomes[k].t === world.BIOME_DRAGON)
                    world.dist_dragon = Math.max(world.dist_dragon, world.dist_from_biome(k, x, y));

            }
            if (((((world.dist_winter < 0) && (world.dist_dragon < 0)) && (world.dist_forest < 0)) && (world.dist_dragon < 0)) && (world.dist_desert < 0))
                world.dist_water = 1;
            else
                world.dist_water = world.MAX_DIST;
        };
        this.dist_from_sand = function (bid, x, y) {
            var biome = world.biomes[bid];
            var is_sand = 0;
            x1 = (biome.x1 + 30) + (((biome.v & WORLD.LEFT) === 0) ? 150 : 0);
            var d = x - x1;
            if ((((biome.v & WORLD.LEFT) > 0) && (d > 0)) && (d < 320))
                is_sand = 1;

            y1 = (biome.y1 + 250) + (((biome.v & WORLD.TOP) === 0) ? 150 : 0);
            d = y - y1;
            if ((((biome.v & WORLD.TOP) > 0) && (d > 0)) && (d < 320))
                is_sand = 1;

            x2 = (biome.x2 + 80) + (((biome.v & WORLD.RIGHT) === 0) ? -200 : 0);
            d = x2 - x;
            if ((((biome.v & WORLD.RIGHT) > 0) && (d > 0)) && (d < 320))
                is_sand = 1;

            y2 = (biome.y2 - 200) + (((biome.v & WORLD.BOTTOM) === 0) ? -200 : 0);
            d = y2 - y;
            if ((((biome.v & WORLD.BOTTOM) > 0) && (d > 0)) && (d < 320))
                is_sand = 1;

            if ((((x >= x1) && (x <= x2)) && (y >= y1)) && (y <= y2))
                return is_sand;

            return 0;
        };
        this.dist_from_biome = function (bid, x, y) {
            var biome = world.biomes[bid];
            x1 = biome.x1 + 30;
            y1 = biome.y1 + 250;
            x2 = biome.x2 + 80;
            y2 = biome.y2 - 200;
            if ((((x >= x1) && (x <= x2)) && (y >= y1)) && (y <= y2))
                return Math.min(x - x1, x2 - x, y - y1, y2 - y);

            var dist = -1000000;
            if ((x - x1) < 0)
                dist = Math.max(dist, x - x1);
            else if ((x2 - x) < 0)
                dist = Math.max(dist, x2 - x);

            distY = -1000000;
            if ((y < y1) || (y > y2)) {
                if ((y - y1) < 0)
                    distY = Math.max(distY, y - y1);
                else
                    distY = Math.max(distY, y2 - y);
                if ((dist !== -1000000) && (distY !== -1000000))
                    dist = Math.min(dist, distY);
                else
                    dist = distY;
            }
            return dist;
        };

        function add_lava(amount, biome_id) {
            var biome = world.biomes[biome_id];
            for (var k = 0, _k = 0;
                (k < amount) && (_k < 10000); _k++) {
                var y = biome.y1 + (world.RNG.get() * biome.h);
                var x = biome.x1 + (world.RNG.get() * biome.w);
                var _i = Math.floor(y / 100);
                var _j = Math.floor(x / 100);
                var dist = world.dist_from_biome(biome_id, (_j * 100) + 50, (_i * 100) + 50);
                if (dist < 600)
                    continue;

                var ok = 1;
                for (var i = _i - 4;
                    (ok === 1) && (i <= (_i + 4)); i++) {
                    for (var j = _j - 4;
                        (ok === 1) && (j <= (_j + 4)); j++) {
                        if (MAP.tiles[i][j] !== undefined)
                            ok = 0;

                    }
                }
                if (ok === 0)
                    continue;

                render_single_resource(_i, _j, "la", k % 6, 0);
                k++;
            }
        };

        function add_river_line(i, j, size, di, dj, mem, w, h) {
            var w1 = Math.floor(w / 2);
            var w2 = Math.max(1, Math.floor(w / 2));
            var h1 = Math.floor(h / 2);
            var h2 = Math.max(1, Math.floor(h / 2));
            for (var k = 0; k < size; k++) {
                for (var _i = i - h1; _i < (i + h2); _i++) {
                    for (var _j = j - w1; _j < (j + w2); _j++) {
                        if (render_single_resource(_i, _j, "wtb", 0, 1) === 1)
                            mem.push([_i, _j, 1]);

                    }
                }
                i += di;
                j += dj;
            }
        };

        function add_oasis(biome_id, mem) {
            var biome = world.biomes[biome_id];
            var i = Math.floor(biome.y1 / 100);
            var j = Math.floor(biome.x1 / 100);
            var h = Math.floor(biome.h / 100);
            var w = Math.floor(biome.w / 100);
            var h2 = i + Math.floor(h / 2);
            var w2 = j + Math.floor(w / 2);
            for (var k = 0; k < 3; k++) {
                var _i = Math.floor((h2 - 3) + (world.RNG.get() * 6));
                var _j = Math.floor((w2 - 3) + (world.RNG.get() * 6));
                render_single_resource(_i, _j, "plm", k, 1);
            }
            for (var k = 0; k < 80; k++) {
                var _i = Math.floor((h2 - 3) + (world.RNG.get() * 6));
                var _j = Math.floor((w2 - 3) + (world.RNG.get() * 6));
                if (render_single_resource(_i, _j, "wtb", 0, 1) === 1)
                    mem.push([_i, _j, 0]);

            }
        };

        function add_river(biome_id, mem) {
            var biome = world.biomes[biome_id];
            var i = Math.floor(biome.y1 / 100);
            var j = Math.floor(biome.x1 / 100);
            var h = Math.floor(biome.h / 100);
            var w = Math.floor(biome.w / 100);
            var iMax = i + h;
            var jMax = j + w;
            var turn = 2;
            var _h = h;
            var _i = i;
            var _j = (j + 10) + Math.floor((w - 20) * world.RNG.get());
            for (var __j = _j - 4; __j < (_j + 4); __j++)
                render_single_resource(i - 1, __j, "wtb", 0, 1);
            while (_h > 0) {
                if (turn === 2) {
                    for (var k = 10; k > 1; k--) {
                        add_river_line(_i, _j, 1, 1, 0, mem, k, 1);
                        _h -= 1;
                        _i += 1;
                    }
                    turn = 0;
                    continue;
                }
                if (_h < 10) {
                    for (var k = 1; _h > 0; k++) {
                        add_river_line(_i, _j, 1, 1, 0, mem, k, 1);
                        _h -= 1;
                        _i += 1;
                    }
                    continue;
                }
                if (turn === 1) {
                    var __h = Math.min(_h, Math.floor(1 + (4 * world.RNG.get())));
                    var w = 1 + Math.floor(world.RNG.get() * 4);
                    add_river_line(_i, _j, __h, 1, 0, mem, w, w);
                    turn = 0;
                    _h -= __h;
                    _i += __h;
                    continue;
                }
                turn = 1;
                var __w = Math.floor(1 + (2 * world.RNG.get()));
                var ___w = 1 + Math.floor(world.RNG.get() * 4);
                if (_j < (j + 16)) {
                    add_river_line(_i, _j, __w, 0, 1, mem, ___w, ___w);
                    _j += __w;
                } else if (_j > (jMax - 16)) {
                    add_river_line(_i, _j, __w, 0, -1, mem, ___w, ___w);
                    _j -= __w;
                } else if (world.RNG.get() > 0.5) {
                    add_river_line(_i, _j, __w, 0, 1, mem, ___w, ___w);
                    _j += __w;
                } else {
                    add_river_line(_i, _j, __w, 0, -1, mem, ___w, ___w);
                    _j -= __w;
                }
            }
            for (var __j = _j - 1; __j < (_j + 2); __j++)
                render_single_resource(_i, __j, "wtb", 0, 1);
        };

        function render_river(biome_id, mem) {
            for (var k = 0; k < mem.length; k++) {
                var _i = mem[k][0];
                var _j = mem[k][1];
                var current = mem[k][2];
                add_single_river(_i, _j, biome_id, current);
            }
        };
        this.add_island = function (type, x, y) {
            var _i = y;
            var _j = x;
            render_single_resource(_i, _j, "isl", type, 1);
            for (var k = 0; k < 4; k++) {
                for (var l = 0; l < 3; l++) {
                    render_single_resource(_i - l, _j - k, "iblk", 0);
                    render_single_resource(_i + l, _j - k, "iblk", 0);
                    render_single_resource(_i + l, _j + k, "iblk", 0);
                    render_single_resource(_i - l, _j + k, "iblk", 0);
                }
            }
            if (type === 0) {
                for (var k = 0; k < 2; k++) {
                    render_single_resource(_i - k, _j - 4, "iblk", 0);
                    render_single_resource(_i + k, _j - 4, "iblk", 0);
                    render_single_resource(_i - k, _j + 4, "iblk", 0);
                    render_single_resource(_i + k, _j + 4, "iblk", 0);
                }
                for (var k = 0; k < 3; k++) {
                    render_single_resource(_i - 3, _j + k, "iblk", 0);
                    render_single_resource(_i + 3, _j + k, "iblk", 0);
                    render_single_resource(_i - 3, _j - k, "iblk", 0);
                    render_single_resource(_i + 3, _j - k, "iblk", 0);
                }
                render_single_resource(_i - 2, _j - 4, "iblk", 0);
                render_single_resource(_i - 3, _j - 3, "iblk", 0);
                render_single_resource(_i + 2, _j + 4, "iblk", 0);
                render_single_resource(_i + 3, _j + 3, "iblk", 0);
            } else if (type === 1) {
                for (var k = 0; k < 3; k++) {
                    render_single_resource(_i - k, _j - 4, "iblk", 0);
                    render_single_resource(_i + k, _j - 4, "iblk", 0);
                    render_single_resource(_i - k, _j + 4, "iblk", 0);
                    render_single_resource(_i + k, _j + 4, "iblk", 0);
                }
                for (var k = 0; k < 4; k++) {
                    render_single_resource(_i - 3, _j + k, "iblk", 0);
                    render_single_resource(_i + 3, _j + k, "iblk", 0);
                    render_single_resource(_i - 3, _j - k, "iblk", 0);
                    render_single_resource(_i + 3, _j - k, "iblk", 0);
                }
            } else if (type === 2) {
                for (var k = 0; k < 2; k++) {
                    render_single_resource(_i - k, _j - 4, "iblk", 0);
                    render_single_resource(_i + k, _j - 4, "iblk", 0);
                    render_single_resource(_i - k, _j + 4, "iblk", 0);
                    render_single_resource(_i + k, _j + 4, "iblk", 0);
                }
                for (var k = 0; k < 3; k++) {
                    render_single_resource(_i - 3, _j + k, "iblk", 0);
                    render_single_resource(_i + 3, _j + k, "iblk", 0);
                    render_single_resource(_i - 3, _j - k, "iblk", 0);
                    render_single_resource(_i + 3, _j - k, "iblk", 0);
                }
            }
        };
        this.add_islands = function (amount) {
            for (var i = 0;
                (i < world.biomes.length) && (amount > 0); i++) {
                var biome = world.biomes[i];
                if (biome.t !== world.BIOME_SEA)
                    continue;

                if ((biome.w > 1800) && (biome.h > 1000)) {
                    var _j = Math.floor((biome.x1 + (biome.w / 2)) / 100);
                    var _i = Math.floor((biome.y1 + (biome.h / 2)) / 100);
                    world.add_island(amount % 3, _j, _i);
                    for (var k = 0; k < 3; k++) {
                        var __i = (_i - 2) + Math.floor(world.RNG.get() * 4);
                        var __j = (_j - 3) + Math.floor(world.RNG.get() * 6);
                        if (MAP.tiles[__i][__j]["s"] === undefined)
                            render_single_resource(__i, __j, "plm", k);

                        var __i = (_i - 2) + Math.floor(world.RNG.get() * 4);
                        var __j = (_j - 3) + Math.floor(world.RNG.get() * 6);
                        if (MAP.tiles[__i][__j]["plm"] === undefined)
                            render_single_resource(__i, __j, "s", k);

                    }
                    var __i = (_i - 2) + Math.floor(world.RNG.get() * 4);
                    var __j = (_j - 3) + Math.floor(world.RNG.get() * 6);
                    if ((MAP.tiles[__i][__j]["plm"] === undefined) && (MAP.tiles[__i][__j]["s"] === undefined))
                        render_single_resource(__i, __j, "p", 0, 1);

                    amount--;
                }
            }
        };
        this.generate_world = function (seed) {
            
            world.RNG.init(seed);
            var attempt = 0;
            while (1) {
                attempt++;
                if (attempt > 10000)
                    return;

                world.biomes = [];
                if ((world.custom_map === 0) && (((world.mode === WORLD.MODE_VAMPIRES) || (world.mode === WORLD.MODE_EXPERIMENTAL)) || (world.mode === WORLD.MODE_PVP)))
                    world.custom_map = ___MAP___;

                if (world.mode === WORLD.MODE_ZOMBIES) {
                    world.biomes.push(new world.Biome(world.BIOME_FOREST, 2, 2, 80, 80, 15));
                } else if (world.mode === WORLD.MODE_LEGACY) {
                    world.biomes.push(new world.Biome(world.BIOME_FOREST, 2, 2, 150, 150, 15));
                } else {
                    if (((world.custom_map !== 0) && (world.custom_map.length > 0)) && (world.custom_map[0].length > 3)) {
                        for (var b = 0; b < world.custom_map.length; b++) {
                            var elt = world.custom_map[b];
                            if (elt[0] === 0) {
                                var __id = WORLD.BIOME_FOREST;
                                switch (elt[1]) {
                                    case "FOREST":
                                        __id = world.BIOME_FOREST;
                                        break;
                                    case "WINTER":
                                        __id = world.BIOME_WINTER;
                                        break;
                                    case "DESERT":
                                        __id = world.BIOME_DESERT;
                                        break;
                                    case "LAVA":
                                        __id = world.BIOME_LAVA;
                                        break;
                                    case "DRAGON":
                                        __id = world.BIOME_DRAGON;
                                        break;
                                }
                                world.biomes.push(new world.Biome(__id, elt[2], elt[3], elt[4], elt[5], elt[6], elt[7]));
                                continue;
                            } else
                                break;
                        }
                    } else if (world.custom_map !== 0) {
                        for (var b = 0; b < world.custom_map.length; b++) {
                            var biome = world.custom_map[b];
                            var __id = WORLD.BIOME_FOREST;
                            switch (biome[0]) {
                                case "FOREST":
                                    __id = world.BIOME_FOREST;
                                    break;
                                case "WINTER":
                                    __id = world.BIOME_WINTER;
                                    break;
                                case "DESERT":
                                    __id = world.BIOME_DESERT;
                                    break;
                                case "LAVA":
                                    __id = world.BIOME_LAVA;
                                    break;
                                case "DRAGON":
                                    __id = world.BIOME_DRAGON;
                                    break;
                            }
                            if (try_to_add_biome(__id, biome[1], biome[2], 0, (b + 1) * 10) === 0)
                                break;

                        }
                        if (b !== world.custom_map.length)
                            continue;

                    }
                }
                break;
            }
            render_minimap();
            var map = [];
            for (var i = 0; i < world.nh; i++) {
                map[i] = new Array(world.nw);
                for (var j = 0; j < world.nw; j++)
                    map[i][j] = 0;
            }
            for (var i = 0; i < world.biomes.length; i++) {
                var biome = world.biomes[i];
                var x2 = biome.x2 / 100;
                var y2 = biome.y2 / 100;
                for (var x = biome.x1 / 100; x <= x2; x++) {
                    for (var y = biome.y1 / 100; y <= y2; y++)
                        map[y][x] = 1;
                }
            }
            for (var y = 0; y < world.nh; y++) {
                for (var x = 0; x < world.nw; x++) {
                    if (map[y][x] === 0)
                        add_sea_biome(map, x, y);

                }
            }
            MAP = {
                w: world.nw,
                h: world.nh,
                tiles: []
            };
            for (var i = 0; i < world.nh; i++)
                MAP.tiles[i] = [];
            if (((world.custom_map !== 0) && (world.custom_map.length > 0)) && (world.custom_map[0].length > 3)) {
                for (var b = 0; b < world.custom_map.length; b++) {
                    var elt = world.custom_map[b];
                    if (elt[1] === "isl")
                        world.add_island(elt[2], elt[3], elt[4]);

                }
            } else
                world.add_islands(world.islands);
            if (((world.custom_map !== 0) && (world.custom_map.length > 0)) && (world.custom_map[0].length > 3)) {
                var mem = [];
                for (var b = 0; b < world.custom_map.length; b++) {
                    var elt = world.custom_map[b];
                    if (elt[0] !== 1)
                        continue;

                    if (elt[1] === "r") {
                        render_single_resource(elt[3], elt[2], "wtb", 0, 1);
                        mem.push([elt[3], elt[2], elt[4]]);
                    } else
                        render_single_resource(
                            elt[4],  
                            elt[3], 
                            elt[1], 
                            elt[2], 
                            elt[5],
                        );
                }
                render_river(0, mem);
                mem = [];
            } else {
                for (var i = 0; i < world.biomes.length; i++) {
                    var biome = world.biomes[i];
                    if (world.mode === WORLD.MODE_LEGACY) {
                        if (biome.t === world.BIOME_FOREST)
                            add_forest_resources_v2(i, biome.w / (100 * 100));

                    } else {
                        if (biome.t === world.BIOME_FOREST)
                            add_forest_resources(i, biome.w / (100 * 100));

                        if (biome.t === world.BIOME_LAVA)
                            add_lava_resources(i, biome.w / (100 * 100));

                        if (biome.t === world.BIOME_WINTER)
                            add_winter_resources(i, biome.w / (100 * 100));

                        if (biome.t === world.BIOME_DESERT)
                            add_desert_resources(i, biome.w / (100 * 100));

                        if (biome.t === world.BIOME_DRAGON)
                            add_dragon_resources(i);

                    }
                }
            }
            render_all_resources_minimap();
            world.map_wrapper(MAP);
        };

        function add_dragon_resources(biome_id) {
            for (var i = 0; i < 3; i++)
                add_resources(biome_id, "s", i, 15);
            for (var i = 0; i < 3; i++)
                add_resources(biome_id, "a", i, 1);
            for (var i = 0; i < 3; i++)
                add_resources(biome_id, "d", i, 1);
            render_corner(biome_id);
        };

        function add_winter_resources(biome_id, size) {
            for (var i = 0; i < 3; i++)
                add_resources(biome_id, "s", i, Math.floor(18 * size));
            for (var i = 0; i < 3; i++)
                add_resources(biome_id, "f", i, Math.floor(24 * size));
            for (var i = 0; i < 3; i++)
                add_resources(biome_id, "d", i, Math.max(1, Math.floor(2 * size)), 0.3);
            for (var i = 0; i < 3; i++)
                add_resources(biome_id, "g", i, Math.floor(6 * size));
            render_corner(biome_id);
        };

        function add_desert_resources(biome_id, size) {
            for (var i = 0; i < 3; i++)
                add_resources(biome_id, "s", i, Math.floor(12 * size));
            for (var i = 0; i < 3; i++)
                add_resources(biome_id, "m", i, Math.max(1, Math.floor(1 * size)), 0.2);
            add_resources(biome_id, "c", 0, Math.floor(36 * size));
            var mem = [];
            add_oasis(biome_id, mem);
            render_river(biome_id, mem);
            mem = [];
        };

        function add_lava_resources(biome_id, size) {
            add_lava(80 * size, biome_id);
            for (var i = 0; i < 3; i++)
                add_resources(biome_id, "s", i, Math.floor(12 * size));
            for (var i = 0; i < 3; i++)
                add_resources(biome_id, "g", i, Math.floor(6 * size));
            for (var i = 0; i < 3; i++)
                add_resources(biome_id, "re", i, Math.max(1, Math.floor(1 * size)), 0.2);
            for (var i = 0; i < 3; i++)
                add_resources(biome_id, "a", i, Math.max(1, Math.floor(2 * size)));
            render_corner(biome_id);
        };

        function add_forest_resources_v2(biome_id, size) {
            for (var i = 0; i < 6; i++)
                add_resources(biome_id, "t", i, Math.floor(80 * size));
            for (var i = 0; i < 4; i++)
                add_resources(biome_id, "b", i, Math.floor(80 * size));
            for (var i = 0; i < 3; i++)
                add_resources(biome_id, "s", i, Math.floor(50 * size));
            var mem = [];
            for (var i = 0; i < 6; i++)
                add_river(biome_id, mem);
            render_river(biome_id, mem);
            mem = [];
            add_resources(biome_id, "p", 0, Math.floor(28 * size));
            for (var i = 0; i < 3; i++)
                add_resources(biome_id, "g", i, Math.floor(7 * size));
            for (var i = 0; i < 3; i++)
                add_resources(biome_id, "d", i, Math.floor(2 * size));
            for (var i = 0; i < 3; i++)
                add_resources(biome_id, "a", i, Math.floor(1 * size));
            for (var i = 0; i < 3; i++)
                add_resources(biome_id, "m", i, Math.floor(1 * size));
            add_resources(biome_id, "a", 0, Math.floor(1 * size));
            render_corner(biome_id);
        };

        function add_forest_resources(biome_id, size) {
            for (var i = 0; i < 6; i++)
                add_resources(biome_id, "t", i, Math.floor(20 * size));
            for (var i = 0; i < 4; i++)
                add_resources(biome_id, "b", i, Math.floor(20 * size));
            for (var i = 0; i < 3; i++)
                add_resources(biome_id, "s", i, Math.floor(20 * size));
            var mem = [];
            add_river(biome_id, mem);
            render_river(biome_id, mem);
            mem = [];
            add_resources(biome_id, "p", 0, Math.floor(24 * size));
            for (var i = 0; i < 3; i++)
                add_resources(biome_id, "g", i, Math.floor(5 * size));
            if (world.mode === WORLD.MODE_ZOMBIES) {
                for (var i = 0; i < 3; i++)
                    add_resources(biome_id, "d", i, Math.floor(3 * size));
                for (var i = 0; i < 3; i++)
                    add_resources(biome_id, "a", i, Math.floor(2 * size));
            }
            render_corner(biome_id);
        };

        function render_corner(biome_id) {
            var biome = world.biomes[biome_id];
            render_single_resource(-3 + Math.floor(biome.y2 / 100), -1 + Math.floor(biome.x2 / 100), "s", 0, 0);
            render_single_resource(3 + Math.floor(biome.y1 / 100), -1 + Math.floor(biome.x2 / 100), "s", 0, 0);
            render_single_resource(-3 + Math.floor(biome.y2 / 100), 1 + Math.floor(biome.x1 / 100), "s", 0, 0);
            render_single_resource(3 + Math.floor(biome.y1 / 100), 1 + Math.floor(biome.x1 / 100), "s", 0, 0);
        };

        function add_resources(biome_id, type, subtype, amount, subpart) {
            var biome = world.biomes[biome_id];
            var x = Math.floor(biome.x1 / 100);
            var y = Math.floor(biome.y1 / 100);
            var w = Math.floor(biome.w / 100);
            var h = Math.floor(biome.h / 100);
            if (subpart !== undefined) {
                subpart = 1 - subpart;
                x += Math.floor((w * subpart) / 2);
                y += Math.floor((h * subpart) / 2);
                w -= Math.floor(w * subpart);
                h -= Math.floor(h * subpart);
            }
            var tiles = MAP.tiles;
            for (var k = 0, l = 0; k < amount; l++) {
                if (l > 50000)
                    break;

                var i = y + Math.floor(world.RNG.get() * h);
                var j = x + Math.floor(world.RNG.get() * w);
                var dist = world.dist_from_biome(biome_id, (j * 100) + 50, (i * 100) + 50);
                if (dist < 400)
                    continue;

                var tile = tiles[i][j + 1];
                if (((tile !== undefined) && (tile[type] !== undefined)) && (tile[type][subtype] !== undefined))
                    continue;

                var tile = tiles[i][j - 1];
                if (((tile !== undefined) && (tile[type] !== undefined)) && (tile[type][subtype] !== undefined))
                    continue;

                var tile = tiles[i + 1][j];
                if (((tile !== undefined) && (tile[type] !== undefined)) && (tile[type][subtype] !== undefined))
                    continue;

                var tile = tiles[i - 1][j];
                if (((tile !== undefined) && (tile[type] !== undefined)) && (tile[type][subtype] !== undefined))
                    continue;

                var tile = tiles[i + 1][j - 1];
                if (((tile !== undefined) && (tile[type] !== undefined)) && (tile[type][subtype] !== undefined))
                    continue;

                var tile = tiles[i - 1][j + 1];
                if (((tile !== undefined) && (tile[type] !== undefined)) && (tile[type][subtype] !== undefined))
                    continue;

                var tile = tiles[i + 1][j + 1];
                if (((tile !== undefined) && (tile[type] !== undefined)) && (tile[type][subtype] !== undefined))
                    continue;

                var tile = tiles[i - 1][j - 1];
                if (((tile !== undefined) && (tile[type] !== undefined)) && (tile[type][subtype] !== undefined))
                    continue;

                if (tiles[i][j] === undefined) {
                    render_single_resource(i, j, type, subtype, 1);
                    k++;
                }
            }
        };

        function inside_map(i, j) {
            return (((i >= 0) && (j >= 0)) && (i < world.nh)) && (j < world.nw);
        };

        function add_single_river(i, j, biome_id, current) {
            if (!inside_map(i, j))
                return;

            tiles = MAP.tiles;
            if (tiles[i][j] === undefined)
                tiles[i][j] = {};

            if (tiles[i][j]["r"] !== undefined)
                return;

            var code = 0;
            if ((inside_map(i - 1, j) && (tiles[i - 1][j] !== undefined)) && (tiles[i - 1][j]["wtb"] !== undefined))
                code += 2;

            if ((inside_map(i, j - 1) && (tiles[i][j - 1] !== undefined)) && (tiles[i][j - 1]["wtb"] !== undefined))
                code += 8;

            if ((inside_map(i, j + 1) && (tiles[i][j + 1] !== undefined)) && (tiles[i][j + 1]["wtb"] !== undefined))
                code += 16;

            if ((inside_map(i + 1, j) && (tiles[i + 1][j] !== undefined)) && (tiles[i + 1][j]["wtb"] !== undefined))
                code += 64;

            if (((inside_map(i - 1, j - 1) && ((code & (8 + 2)) === (8 + 2))) && (tiles[i - 1][j - 1] !== undefined)) && (tiles[i - 1][j - 1]["wtb"] !== undefined))
                code += 1;

            if (((inside_map(i - 1, j + 1) && ((code & (16 + 2)) === (16 + 2))) && (tiles[i - 1][j + 1] !== undefined)) && (tiles[i - 1][j + 1]["wtb"] !== undefined))
                code += 4;

            if (((inside_map(i + 1, j - 1) && ((code & (8 + 64)) === (8 + 64))) && (tiles[i + 1][j - 1] !== undefined)) && (tiles[i + 1][j - 1]["wtb"] !== undefined))
                code += 32;

            if (((inside_map(i + 1, j + 1) && ((code & (16 + 64)) === (16 + 64))) && (tiles[i + 1][j + 1] !== undefined)) && (tiles[i + 1][j + 1]["wtb"] !== undefined))
                code += 128;

            tiles[i][j]["r"] = {};
            tiles[i][j]["r"].river = code;
            tiles[i][j]["r"].current = current;
            tiles[i][j]["r"].dist = world.dist_from_biome(biome_id, (j * 100) + 50, (i * 100) + 50) - 400;
            tiles[i][j]["r"]["x"] = (j * 100) + 50;
            tiles[i][j]["r"]["y"] = (i * 100) + 50;
        };

        function render_single_resource(i, j, type, subtype, _show) {
            if ((((i < 0) || (j < 0)) || (i >= world.nh)) || (j >= world.nw))
                return;

            tiles = MAP.tiles;
            if (tiles[i][j] === undefined)
                tiles[i][j] = {};

            if (tiles[i][j][type] !== undefined)
                return 0;

            tiles[i][j][type] = [];
            tiles[i][j][type][subtype] = [{
                "x": (j * 100) + 50,
                "y": (i * 100) + 50
            }];
            if (_show === 1)
                add_resource_minimap(type, subtype, i, j);

            return 1;
        };
        this.render_single_resource = render_single_resource;

        function apply_animation(tile, o, anim) {
            if (tile[o]) {
                for (k = 0; k < tile[o].length; k++) {
                    if (!tile[o][k])
                        continue;

                    for (l = 0; l < tile[o][k].length; l++) {
                        tile[o][k][l].hit = anim;
                        tile[o][k][l].update = false;
                        tile[o][k][l].time = 0;
                        tile[o][k][l].angle = 0;
                    }
                }
            }
        };
        this.map_wrapper = function (MAP) {
            for (var i = 0; i < this.nh; i++) {
                for (var j = 0; j < this.nw; j++) {
                    if (!MAP.tiles[i])
                        MAP.tiles[i] = [];

                    if (!MAP.tiles[i][j]) {
                        MAP.tiles[i][j] = [];
                        continue;
                    }
                    var tile = MAP.tiles[i][j];
                    if (tile["de"] && (tile["de"].length > 0)) {
                        for (var k = 0; k < tile["de"].length; k++) {
                            if (tile["de"][k] && (tile["de"][k].length > 0)) {
                                tile["de"] = tile["de"][k][0];
                                if ((k >= 41) && (k <= 49)) {
                                    tile["de"].scale = 3;
                                    var compo = Math.floor((Math.random() * 3) + 1);
                                    tile["de"].p = [];
                                    for (var l = 0; l < compo; l++) {
                                        tile["de"].p.push({
                                            x: (Math.random() * 120) - 60,
                                            y: (Math.random() * 120) - 60,
                                            angle: (Math.random() * Math.PI) * 2,
                                            _id: 41 + Math.floor(Math.random() * 9)
                                        });
                                    }
                                } else if ((k >= 19) && (k <= 26)) {
                                    tile["de"].scale = 3;
                                    var compo = Math.floor((Math.random() * 3) + 1);
                                    tile["de"].p = [];
                                    for (var l = 0; l < compo; l++) {
                                        tile["de"].p.push({
                                            x: (Math.random() * 120) - 60,
                                            y: (Math.random() * 120) - 60,
                                            angle: (Math.random() * Math.PI) * 2,
                                            _id: 19 + Math.floor(Math.random() * 8)
                                        });
                                    }
                                } else if ((k <= 15) || ((k >= 27) && (k <= 40))) {
                                    tile["de"].angle = 0;
                                    tile["de"].scale = 2;
                                    tile["de"]._id = k;
                                } else {
                                    tile["de"].angle = (Math.random() * Math.PI) * 2;
                                    tile["de"].scale = 1;
                                    tile["de"]._id = k;
                                }
                            }
                        }
                    }
                    apply_animation(tile, "p", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
                    apply_animation(tile, "t", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
                    apply_animation(tile, "s", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
                    apply_animation(tile, "g", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
                    apply_animation(tile, "d", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
                    apply_animation(tile, "b", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
                    apply_animation(tile, "f", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
                    apply_animation(tile, "sw", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
                    apply_animation(tile, "gw", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
                    apply_animation(tile, "dw", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
                    apply_animation(tile, "a", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
                    apply_animation(tile, "cs", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
                    apply_animation(tile, "plm", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
                    apply_animation(tile, "re", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
                    apply_animation(tile, "c", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
                    apply_animation(tile, "m", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
                }
            }
        };
        this.time = SPRITE.DAY;
        this.clock = {
            translate: {
                x: 0,
                y: 0
            },
            init: 0,
            hour: 0,
            now: 0
        };
        this.delete_all_units = function () {
            this.fast_units = [];
            this.units[ITEMS.PLAYERS] = [];
            this.units[ITEMS.WORKBENCH] = [];
            this.units[ITEMS.FIRE] = [];
            this.units[ITEMS.BIG_FIRE] = [];
            this.units[ITEMS.SEED] = [];
            this.units[ITEMS.SPIKE] = [];
            this.units[ITEMS.STONE_SPIKE] = [];
            this.units[ITEMS.GOLD_SPIKE] = [];
            this.units[ITEMS.DIAMOND_SPIKE] = [];
            this.units[ITEMS.AMETHYST_SPIKE] = [];
            this.units[ITEMS.REIDITE_SPIKE] = [];
            this.units[ITEMS.BRIDGE] = [];
            this.units[ITEMS.WOOD_TOWER] = [];
            this.units[ITEMS.ROOF] = [];
            this.units[ITEMS.PLOT] = [];
            this.units[ITEMS.WHEAT_SEED] = [];
            this.units[ITEMS.ALOE_VERA_SEED] = [];
            this.units[ITEMS.PUMPKIN_SEED] = [];
            this.units[ITEMS.TOMATO_SEED] = [];
            this.units[ITEMS.CARROT_SEED] = [];
            this.units[ITEMS.WATERMELON_SEED] = [];
            this.units[ITEMS.GARLIC_SEED] = [];
            this.units[ITEMS.THORNBUSH_SEED] = [];
            this.units[ITEMS.WINDMILL] = [];
            this.units[ITEMS.EXTRACTOR_MACHINE_STONE] = [];
            this.units[ITEMS.EXTRACTOR_MACHINE_GOLD] = [];
            this.units[ITEMS.EXTRACTOR_MACHINE_DIAMOND] = [];
            this.units[ITEMS.EXTRACTOR_MACHINE_AMETHYST] = [];
            this.units[ITEMS.EXTRACTOR_MACHINE_REIDITE] = [];
            this.units[ITEMS.WELL] = [];
            this.units[ITEMS.WALL] = [];
            this.units[ITEMS.STONE_WALL] = [];
            this.units[ITEMS.GOLD_WALL] = [];
            this.units[ITEMS.DIAMOND_WALL] = [];
            this.units[ITEMS.AMETHYST_WALL] = [];
            this.units[ITEMS.REIDITE_WALL] = [];
            this.units[ITEMS.BED] = [];
            this.units[ITEMS.WOOD_DOOR] = [];
            this.units[ITEMS.STONE_DOOR] = [];
            this.units[ITEMS.GOLD_DOOR] = [];
            this.units[ITEMS.DIAMOND_DOOR] = [];
            this.units[ITEMS.AMETHYST_DOOR] = [];
            this.units[ITEMS.REIDITE_DOOR] = [];
            this.units[ITEMS.WOOD_DOOR_SPIKE] = [];
            this.units[ITEMS.STONE_DOOR_SPIKE] = [];
            this.units[ITEMS.GOLD_DOOR_SPIKE] = [];
            this.units[ITEMS.DIAMOND_DOOR_SPIKE] = [];
            this.units[ITEMS.AMETHYST_DOOR_SPIKE] = [];
            this.units[ITEMS.REIDITE_DOOR_SPIKE] = [];
            this.units[ITEMS.FURNACE] = [];
            this.units[ITEMS.TOTEM] = [];
            this.units[ITEMS.WOOD_TOWER] = [];
            this.units[ITEMS.CHEST] = [];
            this.units[ITEMS.RESURRECTION] = [];
            this.units[ITEMS.EMERALD_MACHINE] = [];
            this.units[ITEMS.FRUIT] = [];
            this.units[ITEMS.RABBIT] = [];
            this.units[ITEMS.WOLF] = [];
            this.units[ITEMS.CRAB] = [];
            this.units[ITEMS.BOAR] = [];
            this.units[ITEMS.BABY_MAMMOTH] = [];
            this.units[ITEMS.CRAB_BOSS] = [];
            this.units[ITEMS.BABY_DRAGON] = [];
            this.units[ITEMS.BABY_LAVA] = [];
            this.units[ITEMS.HAWK] = [];
            this.units[ITEMS.PIRANHA] = [];
            this.units[ITEMS.KRAKEN] = [];
            this.units[ITEMS.FOX] = [];
            this.units[ITEMS.PENGUIN] = [];
            this.units[ITEMS.SPELL] = [];
            this.units[ITEMS.FIREFLY] = [];
            this.units[ITEMS.BEAR] = [];
            this.units[ITEMS.MAMMOTH] = [];
            this.units[ITEMS.VULTURE] = [];
            this.units[ITEMS.SAND_WORM] = [];
            this.units[ITEMS.DRAGON] = [];
            this.units[ITEMS.LAVA_DRAGON] = [];
            this.units[ITEMS.FLAME] = [];
            this.units[ITEMS.WHEAT_MOB] = [];
            this.units[ITEMS.ALOE_VERA_MOB] = [];
            this.units[ITEMS.PUMPKIN_MOB] = [];
            this.units[ITEMS.GARLIC_MOB] = [];
            this.units[ITEMS.THORNBUSH_MOB] = [];
            this.units[ITEMS.TREASURE_CHEST] = [];
            this.units[ITEMS.DEAD_BOX] = [];
            this.units[ITEMS.CRATE] = [];
            this.units[ITEMS.BREAD_OVEN] = [];
            this.units[ITEMS.SIGN] = [];
            this.units[ITEMS.SPIDER] = [];
            this.units[ITEMS.GIFT] = [];
            this.units[ITEMS.GARLAND] = [];
            return;
        };
        this.delete_units = function (uid) {
            if (!this.fast_units[uid])
                return;

            type = this.fast_units[uid].type;
            this.fast_units[uid] = null;
            var units = this.units[type];
            for (var j = 0; j < units.length; j++) {
                if (units[j].uid == uid) {
                    units.splice(j, 1);
                    return;
                }
            }
            return;
        };
        this.find_tower = function (i, j) {
            for (var k = 0; k < this.units[ITEMS.WOOD_TOWER].length; k++) {
                var b = this.units[ITEMS.WOOD_TOWER][k];
                if ((Math.floor(b.x / 100) === j) && (Math.floor(b.y / 100) === i))
                    return 1;

            }
            return 0;
        };
        this.find_bridge = function (i, j) {
            for (var k = 0; k < this.units[ITEMS.BRIDGE].length; k++) {
                var b = this.units[ITEMS.BRIDGE][k];
                if ((Math.floor(b.x / 100) == i) && (Math.floor(b.y / 100) == j))
                    return true;

            }
            return false;
        };
        this.move_units = function (list) {
            for (var i = 0; i < list.length; i++) {
                b = list[i];
                if (b.angle != b.nangle) {
                    var pi2 = Math.PI * 2;
                    b.angle = (b.angle + pi2) % pi2;
                    b.nangle = (b.nangle + pi2) % pi2;
                    if (b.angle != b.nangle) {
                        var diff = b.nangle - b.angle;
                        var min = Math.abs(diff);
                        if (min > Math.PI)
                            min = (Math.PI * 2) - min;

                        var rotate = ((3 * (min / Math.PI)) * WORLD.ROTATE) * delta;
                        if (diff > Math.PI)
                            b.angle -= rotate;
                        else if (diff < -Math.PI)
                            b.angle += rotate;
                        else if (diff < 0)
                            b.angle -= rotate;
                        else
                            b.angle += rotate;
                        b.angle = (b.angle + pi2) % pi2;
                        if (Math.abs(b.angle - b.nangle) < rotate)
                            b.angle = b.nangle;

                    }
                }
                var bi = Math.floor(b.r.y / 100);
                var bj = Math.floor(b.r.x / 100);
                if ((b.x != b.r.x) || (b.y != b.r.y)) {

                    if (b.action & STATE.IDLE)
                        b.action -= STATE.IDLE;

                    b.action |= STATE.WALK;
                    var a = Utils.get_std_angle(b, b.r) + Math.PI;
                    var d = delta * b.speed;
                    var v = Utils.build_vector(d, a);
                    if (Utils.norm(v) < Utils.norm(Utils.get_vector(b, b.r)))
                        Utils.add_vector(b, v);
                    else {
                        if (b.action & STATE.WALK)
                            b.action -= STATE.WALK;

                        b.action |= STATE.IDLE;
                        Utils.copy_vector(b.r, b);
                    }
                }
                if (b.ghost) {
                    var bubbles = b.bubbles;
                    var l = bubbles.length;
                    if ((l === 0) || ((l < SPRITE.GHOST_BUBBLES) && (bubbles[l - 1].life < 0.95)))
                        bubbles.push({
                            id: Math.floor(Math.random() * sprite[SPRITE.BUBBLES][0].length),
                            x: Math.floor((b.x + (Math.random() * 80)) - 40),
                            y: Math.floor((b.y + (Math.random() * 80)) - 40),
                            life: 1
                        });

                    for (var j = 0; j < l; j++)
                        bubbles[j].life = Math.max(0, bubbles[j].life - delta);
                    for (var j = 0; j < l; j++) {
                        if (bubbles[j].life === 0) {
                            bubbles.splice(j, 1);
                            break;
                        }
                    }
                }
                var has_swim = 0;
                if (b.move_effect && ui.quality) {
                    var swim = b.swim;
                    var l = swim.length;
                    if (((((((b.dist_water > 0) && (b.vehicle !== INV.BABY_DRAGON)) && (b.vehicle !== INV.BABY_LAVA)) && (b.vehicle !== INV.PLANE)) && (b.vehicle !== INV.HAWK)) && (b.vehicle !== INV.NIMBUS)) && !b.ghost) {
                        has_swim = 1;
                        if ((l === 0) || (Utils.dist(swim[l - 1], b) > SPRITE.SWIM_SPACE)) {
                            var angle = -b.angle;
                            var x = (Math.sin(angle) * 45) * scale;
                            var y = (Math.cos(angle) * 45) * scale;
                            swim.push({
                                x: b.x + x,
                                y: b.y + y,
                                r: 8,
                                alpha: 0.8
                            });
                            swim.push({
                                x: b.x - x,
                                y: b.y - y,
                                r: 8,
                                alpha: 0.8
                            });
                            swim.push({
                                x: b.x,
                                y: b.y,
                                r: 24,
                                alpha: 1
                            });
                        }
                    }
                    for (var j = 0; j < l; j++) {
                        swim[j].alpha = Math.max(0, swim[j].alpha - (delta / 2.2));
                        swim[j].r += delta * 20;
                    }
                    if ((swim.length > 0) && (swim[0].alpha === 0))
                        swim.splice(0, 1);

                    var foot = b.foot;
                    var l = foot.length;
                    var id = -1;
                    var __s = Math.max(0, Math.sign(b.dist_sand));
                    var __w = Math.max(0, Math.sign(b.dist_winter));
                    var __r = Math.max(0, Math.sign(b.dist_desert));
                    var __l = Math.max(0, Math.sign(b.dist_lava));
                    var __d = Math.max(0, Math.sign(b.dist_dragon));
                    if ((b.dist_sand > 0) || (b.dist_desert > 0))
                        var id = SPRITE.SAND_STEP;
                    else if (b.dist_dragon > 0)
                        var id = SPRITE.CAVE_STEP;
                    else if (b.dist_winter > 0)
                        var id = SPRITE.SNOW_STEP;
                    else if (b.dist_lava > 0)
                        var id = SPRITE.LAVA_STEP;

                    if ((b.vehicle === INV.MOUNT_BOAR) && ((((__s | __w) | __l) | __d) === 1)) {
                        id = SPRITE.BOAR_STEP;
                        var footAngle = b.vehicle_fx2 - (Math.PI / 2);
                        var footDist = 15;
                        var footDist2 = 11;
                        var step_space = SPRITE.STEP_SPACE;
                    } else if ((b.vehicle === INV.BABY_MAMMOTH) && ((((__s | __w) | __l) | __d) === 1)) {
                        id = SPRITE.BABY_MAMMOTH_STEP;
                        var footAngle = b.vehicle_fx2 - (Math.PI / 2);
                        var footDist = 21;
                        var footDist2 = 16;
                        var step_space = SPRITE.STEP_SPACE;
                    } else if ((b.vehicle === INV.CRAB_BOSS) && ((((__s | __w) | __l) | __d) === 1)) {
                        id = SPRITE.CRAB_STEP;
                        var footAngle = b.vehicle_fx2 - (Math.PI / 2);
                        var footRand = Math.random() * 50;
                        var footDist = 10 + footRand;
                        var footDist2 = 0 + footRand;
                        var step_space = SPRITE.STEP_SPACE * 0.9;
                    } else {
                        var footAngle = b.angle;
                        var footDist = 15;
                        var footDist2 = 11;
                        var step_space = SPRITE.STEP_SPACE;
                    }
                    if ((((((b.vehicle === INV.BABY_DRAGON) || (b.vehicle === INV.BABY_LAVA)) || (b.vehicle === INV.NIMBUS)) || (b.vehicle === INV.HAWK)) || (b.vehicle === INV.PLANE)) || b.ghost)
                    ;
                    else if (b.vehicle === INV.SLED) {
                        if ((l === 0) || (Utils.dist(foot[l - 1], b) > SPRITE.TRAIL_SPACE))
                            foot.push({
                                x: b.x,
                                y: b.y,
                                angle: b.vehicle_fx2,
                                alpha: 1,
                                id: SPRITE.SLED_WAVE
                            });

                    } else if ((id != -1) && (has_swim === 0)) {
                        if ((l === 0) || (Utils.dist(foot[l - 1], b) > step_space)) {
                            b.id_foot++;
                            if ((Math.abs(b.x - b.r.x) > 1) && (Math.abs(b.y - b.r.y) > 1)) {
                                if (((b.r.x > b.x) && (b.r.y < b.y)) || ((b.r.x < b.x) && (b.r.y > b.y))) {
                                    if (b.id_foot % 2) {
                                        var x = -footDist2 * scale;
                                        var y = -footDist2 * scale;
                                    } else {
                                        var y = footDist2 * scale;
                                        var x = footDist2 * scale;
                                    }
                                } else {
                                    if (b.id_foot % 2) {
                                        var x = footDist2 * scale;
                                        var y = -footDist2 * scale;
                                    } else {
                                        var y = footDist2 * scale;
                                        var x = -footDist2 * scale;
                                    }
                                }
                            } else if (b.id_foot % 2) {
                                var x = (Math.sin(footAngle) * footDist) * scale;
                                var y = (Math.cos(footAngle) * footDist) * scale;
                            } else {
                                var x = (-Math.sin(footAngle) * footDist) * scale;
                                var y = (-Math.cos(footAngle) * footDist) * scale;
                            }
                            foot.push({
                                x: b.x + x,
                                y: b.y + y,
                                angle: footAngle + (Math.PI / 2),
                                alpha: 1,
                                id: id
                            });
                        }
                    }
                    for (var j = 0; j < l; j++) {
                        if (foot[j].id === SPRITE.SLED_WAVE)
                            foot[j].alpha = Math.max(0, foot[j].alpha - (delta * 1.5));
                        else
                            foot[j].alpha = Math.max(0, foot[j].alpha - (delta / 2.85));
                    }
                    if ((foot.length > 0) && (foot[0].alpha === 0))
                        foot.splice(0, 1);

                }
            }
        };
        this.update = function () {
            this.move_units(this.units[ITEMS.PLAYERS]);
            this.move_units(this.units[ITEMS.RABBIT]);
            this.move_units(this.units[ITEMS.WOLF]);
            this.move_units(this.units[ITEMS.CRAB]);
            this.move_units(this.units[ITEMS.BOAR]);
            this.move_units(this.units[ITEMS.BABY_MAMMOTH]);
            this.move_units(this.units[ITEMS.CRAB_BOSS]);
            this.move_units(this.units[ITEMS.BABY_DRAGON]);
            this.move_units(this.units[ITEMS.BABY_LAVA]);
            this.move_units(this.units[ITEMS.HAWK]);
            this.move_units(this.units[ITEMS.SPIDER]);
            this.move_units(this.units[ITEMS.FOX]);
            this.move_units(this.units[ITEMS.PENGUIN]);
            this.move_units(this.units[ITEMS.SPELL]);
            this.move_units(this.units[ITEMS.FIREFLY]);
            this.move_units(this.units[ITEMS.BEAR]);
            this.move_units(this.units[ITEMS.MAMMOTH]);
            this.move_units(this.units[ITEMS.VULTURE]);
            this.move_units(this.units[ITEMS.SAND_WORM]);
            this.move_units(this.units[ITEMS.DRAGON]);
            this.move_units(this.units[ITEMS.FLAME]);
            this.move_units(this.units[ITEMS.PIRANHA]);
            this.move_units(this.units[ITEMS.KRAKEN]);
            this.move_units(this.units[ITEMS.LAVA_DRAGON]);
        };
        this.breath = [];
        this.breath[SPRITE.LAKE] = new Utils.LinearAnimation(false, 1, 1.05, 1, 0.008, 0.008);
        this.breath[SPRITE.LAKE_DEEP] = new Utils.LinearAnimation(false, 1, 1.08, 1, 0.006, 0.006);
        this.breath[SPRITE.WAVE_ONE] = new Utils.LinearAnimation(false, 1, 1.02, 1, 0.008, 0.008);
        this.breath[SPRITE.WAVE_TWO] = new Utils.LinearAnimation(false, 1, 1.08, 1, 0.006, 0.006);
        this.lava = [];
        this.lava[0] = new Utils.LinearAnimation(false, 0.1, 1, 0, 0.6, 0.6);
        this.lava[1] = new Utils.LinearAnimation(false, 0.4, 1, 0, 0.6, 0.6);
        this.lava[2] = new Utils.LinearAnimation(false, 0.3, 1, 0, 0.6, 0.6);
        this.lava[3] = new Utils.LinearAnimation(false, 0.8, 1, 0, 0.6, 0.6);
        this.lava[4] = new Utils.LinearAnimation(false, 0.3, 1, 0, 0.6, 0.6);
        this.lava[5] = new Utils.LinearAnimation(false, 0.8, 1, 0, 0.6, 0.6);
        this.lava[6] = new Utils.LinearAnimation(false, 0.5, 1, 0, 0.6, 0.6);
        this.lava[7] = new Utils.LinearAnimation(false, 0.9, 1, 0, 0.6, 0.6);
        this.lava[8] = new Utils.LinearAnimation(false, 0.6, 1, 0, 0.6, 0.6);
        this.lava[9] = new Utils.LinearAnimation(false, 0.2, 1, 0, 0.6, 0.6);
        this.lava[10] = new Utils.LinearAnimation(false, 0.6, 1, 0, 0.6, 0.6);
        this.lava[11] = new Utils.LinearAnimation(false, 0.4, 1, 0, 0.6, 0.6);
        this.lava[12] = new Utils.LinearAnimation(false, 0.8, 1, 0, 0.6, 0.6);
        this.lava[13] = new Utils.LinearAnimation(false, 0.2, 1, 0, 0.6, 0.6);
        this.lava[14] = new Utils.LinearAnimation(false, 0.7, 1, 0, 0.6, 0.6);
    };

    function Flakes(id, x, y, angle) {
        this.id = id;
        this.speed = (id + 5) * 8;
        this.life = canw / 1366;
        this.x = x;
        this.y = y;
        this.c = Math.cos(angle);
        this.s = Math.sin(angle);
        this.alpha = 0;
    };
    mycyph1 = 1;

    function User() {
        this.init = function () {};
        this.resurrection = {
            pid: 1,
            iid: 1,
            open: false
        };
        this.well = {
            pid: 1,
            iid: -1,
            open: false
        };
        this.windmill = {
            amount_wheat: 0,
            amount_flour: 0,
            pid: 1,
            iid: -1,
            open: false
        };
        this.extractor = {
            amount_wood: 0,
            amount_mineral: 0,
            type: 0,
            mineral: 0,
            pid: 1,
            iid: -1,
            open: false
        };
        this.bread_oven = {
            amount_wood: 0,
            amount_bread: 0,
            amount_flour: 0,
            pid: 1,
            iid: -1,
            open: false
        };
        this.sign = {
            iid: -1,
            open: false
        };
        this.furnace = {
            amount: 0,
            pid: 1,
            iid: -1,
            open: false
        };
        this.ghost = {
            enabled: false,
            delay: -1,
            label: false,
            now: -1,
            draw: draw_alert_ghost
        };
        this.chest = {
            id: -1,
            amount: 0,
            pid: 1,
            iid: -1,
            open: false,
            lock: false,
            locked: false,
            lockpick: false,
            padlock: false
        };
        this.alive = true;
        this.reconnect = {
            enabled: false,
            rotate: 0
        };
        this.key = Utils.gup("key", window.location.href);
        var egg = Utils.gup("egg", window.location.href);
        if (egg)
            ui.skin = parseInt(egg);

        this.beta = (0 === window.location.href.indexOf("http://starve.io/beta")) ? 1 : 0;
        if (this.key && this.beta) {
            Cookies.set("starve_beta", this.key);
        } else if (this.beta)
            this.key = Cookies.get("starve_beta");

        this.token = Cookies.get("starve_token") ? Cookies.get("starve_token") : Utils.generate_token(CLIENT.TOKEN_LEN);

        this.token_id = Cookies.get("starve_token_id") ? Cookies.get("starve_token_id") : Utils.generate_token(CLIENT.TOKEN_LEN);
        this.id = 0;
        this.uid = 0;
        this.day = 0;
        this.die = {
            howdie: "",
            score: 0,
            bank: 0,
            kill: 0
        };
        this.account = {
            connected: 0,
            last: (new Date).getTime()
        };
        this.team = [];
        this.in_team = function (id) {
            for (var i = 0; i < this.team.length; i++) {
                if (this.team[i] == id)
                    return true;

            }
            return false;
        };
        this.shop = {
            delay: 0,
            time: 0,
            value: 0,
            open: false,
            draw: function () {
                if (this.open) {
                    var now = (new Date).getTime();
                    this.time = Math.floor((now - this.delay) / 1000);
                    if (this.time < 60) {
                        game.shop.button.draw(ctx);
                    } else {
                        document.getElementById("shop_starterkit").style.display = "none";
                        this.open = false;
                    }
                }
            }
        };
        this.totem = {
            id: -1,
            pid: -1,
            lock: 0,
            timeout: new Utils.LinearAnimation(false, 0, 1, 0, 1 / 30, 1),
            wait: false
        };
        this.helmet = {
            timeout: new Utils.LinearAnimation(false, 0, 1, 0, 1 / 5, 1),
            wait: false
        };
        this.build = {
            timeout: new Utils.LinearAnimation(false, 0, 1, 0, 1, 1),
            wait: false
        };
        this.weapon = {
            timeout: new Utils.LinearAnimation(false, 0, 1, 0, 1 / 10, 1),
            wait: false
        };
        this.cam = new Utils.Ease2d(Utils.ease_out_quad, 0, 0.4, 0, 0, canw2, canh2, canw2, canh2);
        this.cam.delay = 0;
        this.cam.forcedDelay = 0;
        this.cam.update = function () {
            if (this.forcedDelay > 0) {
                this.forcedDelay -= delta;
                return;
            }
            var p = world.fast_units[user.uid];
            if (p) {
                this.delay = 0;
                var x = Math.max(Math.min(canw2 - p.x, -2), (-world.w + 2) + canw);
                var y = Math.max(Math.min(canh2 - p.y, -2), (-world.h + 2) + canh);
                this.ease({
                    x: x,
                    y: y
                });
            } else {
                this.delay += delta;
                if (this.delay > 3) {
                    this.delay = 0;
                    if (!user.reconnect.enabled)
                        client.get_focus();

                }
            }
        };
        this.cam.w = screen.width;
        this.cam.h = screen.height;
        this.cam.rw = this.cam.w;
        this.cam.rh = this.cam.h;
        this.cam.rx = 0;
        this.cam.ry = 0;
        this.cam.rdw = 0;
        this.cam.rdh = 0;
        this.cam.change = function (x, y) {
            this.x = -Math.min(Math.max(-world.dw * 2, (x - world.dw) - (this.rw / 2)), world.w - this.rw);
            this.y = -Math.min(Math.max(-world.dh * 2, y - ((world.dh + this.rh) / 2)), (world.h - this.rh) + world.dh);
            this.ex = this.x;
            this.ey = this.y;
        };
        this.control = {
            angle: 0,
            timeout: 0,
            previous: 0,
            mouse: 0,
            attack: 0,
            update: function () {
                var p = world.fast_units[user.uid];
                if (p)
                    var pos = {
                        x: user.cam.x + p.x,
                        y: user.cam.y + p.y
                    };
                else
                    var pos = canm;
                var angle = Utils.get_std_angle(mouse.pos, pos);
                var attacked = false;
                this.mouse += delta;
                if (!mouse.state) {
                    if ((p && !(p.action & STATE.ATTACK)) && (this.mouse > CLIENT.ATTACK)) {
                        this.attack = 1;
                        attacked = true;
                        this.mouse = 0;
                        client.send_attack(angle);
                    }
                }
                if (p) {
                    p.angle = angle;
                    p.nangle = angle;
                }
                if (!attacked) {
                    this.timeout += delta;
                    if (this.timeout > CLIENT.ROTATE) {
                        this.timeout = 0;
                        if (Math.abs(this.angle - angle) > 0.005) {
                            client.send_angle(angle);
                            this.angle = angle;
                        }
                    }
                }
                if (user.chat.open)
                    return;

                if (user.terminal.open)
                    return;

                var update = false;
                var move = 0;
                var left = keyboard.is_left();
                if (left)
                    move |= 1;

                var right = keyboard.is_right();
                if (right)
                    move |= 2;

                var bottom = keyboard.is_bottom();
                if (bottom)
                    move |= 4;

                var top = keyboard.is_top();
                if (top)
                    move |= 8;

                if (this.previous != move)
                    client.send_move(move);

                this.previous = move;
            }
        };
        this.gauges = {
            c: 1,
            l: 1,
            h: 1,
            realhp: 200,
            t: 1,
            o: 1,
            wa: 1,
            warn_cold: new Utils.LinearAnimation(true, 0, 1, 0, 3, 3),
            warn_life: new Utils.LinearAnimation(true, 0, 1, 0, 2, 2),
            warn_hunger: new Utils.LinearAnimation(true, 0, 1, 0, 3, 3),
            warn_thirst: new Utils.LinearAnimation(true, 0, 1, 0, 3, 3),
            warn_oxygen: new Utils.LinearAnimation(true, 0, 1, 0, 3, 3),
            warn_warm: new Utils.LinearAnimation(true, 0, 1, 0, 3, 3),
            cold: new Utils.Ease(Utils.ease_out_quad, 0, 1, 0, 0, 1),
            life: new Utils.Ease(Utils.ease_out_quad, 0, 1, 0, 0, 1),
            hunger: new Utils.Ease(Utils.ease_out_quad, 0, 1, 0, 0, 1),
            thirst: new Utils.Ease(Utils.ease_out_quad, 0, 1, 0, 0, 1),
            oxygen: new Utils.Ease(Utils.ease_out_quad, 0, 1, 0, 0, 1),
            warm: new Utils.Ease(Utils.ease_out_quad, 0, 1, 0, 0, 1),
            update: function () {
                this.warn_cold.update();
                this.warn_life.update();
                this.warn_hunger.update();
                this.warn_thirst.update();
                this.warn_oxygen.update();
                this.warn_warm.update();
                this.cold.ease(this.c);
                this.life.ease(this.l);
                this.hunger.ease(this.h);
                this.thirst.ease(this.t);
                this.oxygen.ease(this.o);
                this.warm.ease(this.wa);
            }
        };
        this.bigmap = false;
        this.spectator = false;
        this.zombie = false;
        this.vampire = false;
        this.inv = {
            max: WORLD.WITHOUT_BAG,
            bonus: 0,
            bag: 0,
            n: [],
            can_select: [],
            update_bag_size: function (_bag, _bonus) {
                if (_bag === 1)
                    this.bag = WORLD.BAG_SIZE;

                this.bonus += _bonus;
                this.max = (WORLD.WITHOUT_BAG + this.bonus) + this.bag;
            },
            drag: {
                item: -1,
                img: null,
                _start: 0,
                _move: 0,
                _x: -1,
                _y: -1,
                move: function (mouse) {
                    if (this._start && ((mouse.x !== this._x) || (mouse.y !== this._y)))
                        this._move = 1;

                },
                start: function (item, mouse) {
                    this._x = mouse.x;
                    this._y = mouse.y;
                    this.item = item;
                    this.img = user.inv.can_select[item].info.img[2];
                    this._start = 1;
                },
                stop: function () {
                    this._start = 0;
                    this._move = 0;
                    this._x = -1;
                    this._y = -1;
                },
                release: function () {
                    var item = -1;
                    var buttons = user.inv.can_select;
                    var ret = 0;
                    if (this._start && this._move) {
                        for (var i = 0; i < buttons.length; i++) {
                            if (buttons[i].info.state === BUTTON_IN) {
                                item = i;
                                break;
                            }
                        }
                        if (((item !== -1) && (item !== this.item)) && buttons[this.item]) {
                            ret = 1;
                            var tmp = buttons[item];
                            buttons[item] = buttons[this.item];
                            buttons[this.item] = tmp;
                            game.update_inv_buttons();
                        }
                    }
                    this.stop();
                    return ret;
                },
                draw: function (x, y) {
                    if (!this._start || !this._move)
                        return;

                    ctxDrawImage(ctx, this.img, Math.floor(x - (this.img.width / 2)), Math.floor(y - (this.img.height / 2)));
                }
            },
            free_place: function (r) {
                for (i = 0; i < r.length; i++) {
                    if (this.n[r[i][0]] == r[i][1])
                        return true;

                }
                return false;
            },
            find_item: function (id) {
                for (var i = 0; i < this.can_select.length; i++) {
                    if (this.can_select[i].id == id)
                        return i;

                }
                return -1;
            },
            delete_item: function (id, i) {
                this.n[id] = 0;
                this.can_select.splice(i, 1);
                game.update_inv_buttons();
            },
            decrease: function (id, n, i) {
                update = true;
                this.n[id] = Math.max(0, this.n[id] - n);
                if (!this.n[id] && (i >= 0))
                    this.delete_item(id, i);

            }
        };
        this.show_spectators = {
            enabled: false,
            translate: {
                x: 0,
                y: 0
            },
            invert: function () {
                if ((world.mode != WORLD.MODE_HUNGER_GAMES) || user.spectator)
                    return;

                user.show_spectators.enabled = !user.show_spectators.enabled;
                if (user.show_spectators.enabled)
                    game.options.spectator_agree.display = "inline-block";
                else
                    game.options.spectator_agree.display = "none";
            }
        };
        game.options.spectator_agree.display = "none";
        this.auto_feed = {
            enabled: false,
            translate: {
                x: 0,
                y: 0
            },
            delay: 0,
            invert: function () {
                user.auto_feed.enabled = !user.auto_feed.enabled;
                if (user.auto_feed.enabled)
                    game.options.feed_agree.display = "inline-block";
                else
                    game.options.feed_agree.display = "none";
            },
            update: function () {
                if ((!this.enabled || (user.craft.id >= 0)) || game.safe_delete.open)
                    return;

                this.delay += delta;
                if (this.delay > 2) {
                    this.delay = 0;
                    if (user.gauges.h < 0.35) {
                        if (user.inv.n[INV.PLANT])
                            client.select_inv(INV.PLANT, user.inv.find_item(INV.PLANT));
                        else if (user.inv.n[INV.GARLIC])
                            client.select_inv(INV.GARLIC, user.inv.find_item(INV.GARLIC));
                        else if (user.inv.n[INV.CRAB_STICK])
                            client.select_inv(INV.CRAB_STICK, user.inv.find_item(INV.CRAB_STICK));
                        else if (user.inv.n[INV.PUMPKIN])
                            client.select_inv(INV.PUMPKIN, user.inv.find_item(INV.PUMPKIN));
                        else if (user.inv.n[INV.TOMATO])
                            client.select_inv(INV.TOMATO, user.inv.find_item(INV.TOMATO));
                        else if (user.inv.n[INV.CARROT])
                            client.select_inv(INV.CARROT, user.inv.find_item(INV.CARROT));
                        else if (user.inv.n[INV.WATERMELON])
                            client.select_inv(INV.WATERMELON, user.inv.find_item(INV.WATERMELON));
                        else if (user.inv.n[INV.BREAD])
                            client.select_inv(INV.BREAD, user.inv.find_item(INV.BREAD));
                        else if (user.inv.n[INV.COOKED_MEAT])
                            client.select_inv(INV.COOKED_MEAT, user.inv.find_item(INV.COOKED_MEAT));
                        else if (user.inv.n[INV.FOODFISH_COOKED])
                            client.select_inv(INV.FOODFISH_COOKED, user.inv.find_item(INV.FOODFISH_COOKED));
                        else if (user.inv.n[INV.COOKIE])
                            client.select_inv(INV.COOKIE, user.inv.find_item(INV.COOKIE));
                        else if (user.inv.n[INV.SANDWICH])
                            client.select_inv(INV.SANDWICH, user.inv.find_item(INV.SANDWICH));
                        else if (user.inv.n[INV.CAKE])
                            client.select_inv(INV.CAKE, user.inv.find_item(INV.CAKE));
                        else if (user.inv.n[INV.CRAB_LOOT])
                            client.select_inv(INV.CRAB_LOOT, user.inv.find_item(INV.CRAB_LOOT));

                    } else if (user.gauges.t < 0.35) {
                        if (user.inv.n[INV.BOTTLE_FULL])
                            client.select_inv(INV.BOTTLE_FULL, user.inv.find_item(INV.BOTTLE_FULL));

                    }
                }
            }
        };
        game.options.feed_agree.display = "none";
        this.craft = {
            id: -1,
            id2: -1,
            timeout: new Utils.LinearAnimation(false, 0, 1, 0, 1, 1),
            crafting: false,
            preview: -1,
            mode: 0,
            label: [],
            can_craft: [],
            workbench: false,
            fire: false,
            water: false,
            well: false,
            change_mode: function () {
                this.mode = (this.mode === 0) ? 1 : 0;
            },
            set_workbench: function (val) {
                this.workbench = val;
                var safe = game.safe_delete;
                if (safe.open)
                    safe.del(safe.button);

                this.update();
            },
            do_recycle: function (id) {
                var r = RECIPES[id];
                this.id = id;
                this.crafting = true;
                var p = world.fast_units[user.uid];
                this.timeout.max_speed = r.time * 8;
                this.id2 = r.id2;
            },
            do_craft: function (id) {
                var r = RECIPES[id];
                console.log(id , r)
                this.id = id;
                this.crafting = true;
                var p = world.fast_units[user.uid];
                if (p && (p.right == INV.BOOK))
                    this.timeout.max_speed = r.time * 3;
                else
                    this.timeout.max_speed = r.time;
                this.id2 = r.id2;
                for (var i = 0; i < r.r.length; i++) {
                    var o = r.r[i];
                    user.inv.decrease(o[0], o[1], user.inv.find_item(o[0]));
                }
                game.update_inv_buttons();
            },
            update: function () {
                this.can_craft = [];
                if (game.info_box.craft === 1)
                    game.info_box.display = 0;

                for (var k in RECIPES) {
                    var r = RECIPES[k];
                    var can_craft = true;
                    if (!r.r)
                        continue;

                    for (var i = 0; i < r.r.length; i++) {
                        if ((user.inv.max >= WORLD.WITH_BAG) && (r.id === CRAFT.BAG)) {
                            can_craft = false;
                            break;
                        }
                        if ((((r.w > this.workbench) || (r.f > this.fire)) || (r.o > this.water)) || (r.e > this.well)) {
                            can_craft = false;
                            break;
                        }
                        var o = r.r[i];
                        if (!user.inv.n[o[0]] || (user.inv.n[o[0]] < o[1])) {
                            can_craft = false;
                            break;
                        }
                    }
                    if (can_craft)
                        this.can_craft.push(game.craft_buttons[r.id]);

                }
                game.update_craft_buttons();
                game.update_chest_buttons();
                game.update_furnace_button();
                game.update_windmill_button();
                game.update_extractor_button();
                game.update_bread_oven_button();
                game.sign.update_button();
            },
            restart: function () {
                this.id = -1;
                this.crafting = false;
                this.timeout.v = 0;
                this.timeout.o = false;
                this.update();
            }
        };
        this.welcome = {
            message: undefined,
            draw: draw_welcome_message
        };
        this.alert = {
            timeout: new Utils.LinearAnimation(false, 1, 1, 0, 4, 0.3),
            text: "",
            label: null,
            draw: draw_alert,
            list: []
        };
        this.ldb = {
            can: document.createElement("canvas"),
            ids: [],
            update: true,
            translate: {
                x: 0,
                y: 0
            },
            sort: function () {
                var sortable = [];
                var players = world.players;
                for (var i = 0; i < players.length; i++) {
                    if (players[i].alive)
                        sortable.push({
                            id: i,
                            s: players[i].score
                        });

                }
                sortable.sort(function (a, b) {
                    return b.s - a.s;
                });
                this.ids = [];
                for (var i = 0;
                    (i < sortable.length) && (i < 10); i++)
                    this.ids.push(sortable[i].id);
                this.update = true;
            },
            init: function (u) {
                u = u.sort((a , d) => d[1] - a[1]);
                var players = world.players;
                for(var i = 0; i < players.length; i++)
                    players[i].score = 0;
                
                this.ids = [];
                
                players[user.id].score = Utils.restore_number(u.find(a => a[0] == user.id)[1]);
                for(var i = 0; i < u.length && i < 10; i++) {
                    this.ids.push(u[i][0]);
                    players[u[i][0]].score = Utils.restore_number(u[i][1]);
                
                
                }
                this.update = true;
                
            }
        };
        this.ldb.can.width = 180 * scale;
        this.ldb.can.height = 300 * scale;
        this.ldb.ctx = this.ldb.can.getContext("2d");
        this.terminal = {
            open: false,
            input: document.getElementById('commandInput'),
            contentBox: document.getElementById('commandsBox'),
            style: document.getElementById('commandMainBox').style,
            _print: function (d) {
                this.contentBox.innerHTML += d;
            },
            update: function () {
                this.style.left = Math.floor((canw / 2) - 300) + "px";
                this.style.top = Math.floor((canh / 2) - 250) + "px";
            },
            _clean: function () {
                this.contentBox.innerHTML = "";
            },
            quit: function () {
                this.open = false;
                this.style.display = "none";
            },
            create_array: function (datas, addictionalColored = []) {
                var content = '<table class=\"tableList\">';
                for (var i = 0; i < datas.length; i++) {
                    if ((i % 3) === 0)
                        content += '<tr>';

                    console.log(addictionalColored[i], i , addictionalColored)
                    content += ('<td class=\"tableList\"' + (addictionalColored[i] == null ? '' : 'style=\"color:' + addictionalColored[i] + ';\"') + '>' + datas[i]) + '</td>';
                    if ((((i + 1) % 3) === 0) || ((i + 1) === datas.length))
                        content += '</tr>';

                }
                content += '</table>';
                return content;
            },
            write_command: function (cmd, isSucceed, answer, content) {
                cmd = !cmd ? "" : cmd;
                isSucceed = !isSucceed ? "" : isSucceed;
                answer = !answer ? "" : answer;
                content = !content ? "" : content;
                var data = "<div class=commandWritten>" + cmd;
                if (isSucceed)
                    data += "<div class=commandValidated>";
                else
                    data += "<div class=commandUnknown>";
                data += ((answer + "</div>") + content) + "</div>";
                this._print(data);
                this.scroll_down();
            },
            scroll_down: function () {
                this.contentBox["scrollTop"] = this.contentBox["scrollHeight"];
                return;
            },
            commands: function (msg) {
                switch (msg) {
                    case "clean":
                        this._clean();
                        return true;
                        break;
                    case "list":
                        var list = "";
                        var players = world.players;
                        for (var i = 0; i < players.length; i++) {
                            var player = players[i];
                            if (player.alive) {
                                list += ((player.nickname + ' <span style=\"color:green\">#') + i) + "</span><br />";
                            }
                        }
                        this.write_command("list", 1, "List all connected players", list);
                        return true;
                        break;
                    case "weapon-list":
                        this.write_command("Weapons", 1, "List all weapons in the game", this.create_array(["sword_wood", "sword", "sword_gold", "sword_diamond", "sword_amethyst", "sword_reidite", "dragon_sword", "lava_sword", "sword_pirate", "wood_spear", "spear", "gold_spear", "diamond_spear", "amethyst_spear", "reidite_spear", "dragon_spear", "lava_spear", "crab_spear", "wood_bow", "wood_arrow"]));
                        return true;
                        break;
                    case "tool-list":
                        this.write_command("Tools", 1, "List all tools in the game", this.create_array(["pick_wood", "pick", "pick_gold", "pick_diamond", "pick_amethyst", "pick_reidite", "hammer", "hammer_gold", "hammer_diamond", "hammer_amethyst", "hammer_reidite", "super_hammer", "shovel", "shovel_gold", "shovel_diamond", "shovel_amethyst", "pitchfork", "pitchfork2", "spanner", "book"]));
                        return true;
                        break;
                    case "survival-list":
                        this.write_command("Survival Items", 1, "List all survival items in the game", this.create_array(["fire", "workbench", "bandage", "big_fire", "furnace", "paper", "blue_cord", "lock", "lockpick", "totem", "resurrection", "bridge", "bottle_full", "bottle_empty", "watering_can", "watering_can_full", "windmill", "plot", "bread_oven", "chest", "bucket_empty", "bucket_full", "well", "sign", "roof", "bed", "boat", "sled", "boar", "saddle", "emerald_machine", "extractor_stone", "extractor_gold", "extractor_diamond", "extractor_amethyst", "extractor_reidite_button"]));
                        return true;
                        break;
                    case "resource-list":
                        this.write_command("Resources", 1, "List all resources in the game", this.create_array(["wood", "stone", "gold", "diamond", "amethyst", "reidite", "fur", "fur_wolf", "fur_winter", "cord", "scales", "penguin_feather", "flame", "sand", "ground", "ice", "dragon_heart", "lava_heart", "kraken_skin", "special_fur", "special_fur_2", "gemme_green", "gemme_orange", "gemme_blue", "dragon_cube", "dragon_orb", "lava_cube", "lava_orb", "fur_boar", "pitchfork_part", "pilot_glasses", "fur_mammoth"]));
                        return true;
                        break;
                    case "food-list":
                        this.write_command("Food", 1, "List all food in the game", this.create_array(["plant", "seed", "meat", "cooked_meat", "flour", "wheat_seed", "cookies", "wild_wheat", "cake", "fish", "cooked_fish", "bread", "sandwich", "pumpkin_seed", "pumpkin", "garlic_seed", "garlic", "thornbush_seed", "thornbush", "crab_stick", "claw", "carrot_seed", "carrot", "tomato_seed", "tomato", "watermelon_seed", "watermelon", "aloe_vera_seed", "aloe_vera", "cactus"]));
                        return true;
                        break;
                    case "hat-list":
                        this.write_command("Hats", 1, "List all hats in the game", this.create_array(["earmuffs", "coat", "scarf", "fur_hat", "warm_protection", "warm_protection2", "warm_protection3", "explorer_hat", "pirate_hat", "wood_helmet", "stone_helmet", "gold_helmet", "diamond_helmet", "amethyst_helmet", "reidite_helmet", "dragon_helmet", "lava_helmet", "crab_helmet", "diving_mask", "super_diving_suit", "crown_green", "crown_orange", "crown_blue", "hood", "peasant", "winter_hood", "winter_peasant", "bag", "turban1", "turban2", "pilot_hat"]));
                        return true;
                        break;
                    case "building-list":
                        this.write_command("Buildings", 1, "List all buildings in the game", this.create_array(["wall", "stone_wall", "gold_wall", "diamond_wall", "amethyst_wall", "reidite_wall", "spike", "stone_spike", "gold_spike", "diamond_spike", "amethyst_spike", "reidite_spike", "wood_door", "stone_door", "gold_door", "diamond_door", "amethyst_door", "reidite_door", "wood_spike_door", "stone_spike_door", "gold_spike_door", "diamond_spike_door", "amethyst_spike_door", "reidite_spike_door"]));
                        return true;
                        break;
                    case "biome-list":
                        this.write_command("Biomes list", 1, "List all available biomes in the game", this.create_array(["forest", "winter", "lava", "sea", "beach", "island", "dragon"]));
                        return true;
                        break;
                    case "help-config":
                        this.write_command("Help Configuration", 1, "Learn how to build your customized map", '<div class=\"specialCommandBox\">To get the current map configuration, and modify it, copy the result of <span class=\"commandSynthax\">get-config</span> in a text file and change every parameter you want.</div>To modify the settings, change a number to another with <span class=\"commandSynthax\">set-config</span></br>To modify the map, modify \"important\" section (at the end)<div class=\"infoCommand\">The minimum size of the map is 50x50.</div>\"custom_map\" is used to change the biomes and is written like this :<div class=\"commandSynthax\" style=\"font-size:17px;\">\"custom_map\":[[\"biome\",width,height],...,[\"biome\",width,height]]</div>Biomes are <span class=\"commandSynthax\">\"forest\"</span>, <span class=\"commandSynthax\">\"lava\"</span>, <span class=\"commandSynthax\">\"winter\"</span>, and <span class=\"commandSynthax\">\"dragon\"</span>.');
                        return true;
                        break;
                    case "pos":
                        var players = world.units[ITEMS.PLAYERS];
                        for (var i = 0; i < players.length; i++) {
                            var p = players[i];
                            if (p.pid === user.id) {
                                this.write_command("pos", 1, (("Your position is " + Math.floor(p.x / 100)) + ":") + Math.floor(p.y / 100));
                                return true;
                            }
                        }
                        break;
                    case "help-admin":
                        this.write_command("help-admin", 1, "List all available commands for admin only", this.create_array(["restart", "m | message", "mt | message-to", "w | welcome", "name", "password", "k | kick", "b | ban", "tp | teleport", "tpa | teleport-all", "tpt | teleport-to", "pos", "heal", "cancel-craft", "da | disable-attack", "pvp | disable-pvp", "dgs | disable-gather-score", "drs | disable-resource", "dms | disable-mob-safety", "ds | disable-shop", "dn | disable-nickname", "dch | disable-chat", "dq | disable-quest", "dd | disable-drop", "ddc | disable-drop-crate", "db | disable-crate", "dwg | disable-warm-gauge", "dk | disable-kit", "dc | disable-craft", "dr | disable-recycling", "disable-clock", "disable-recipes-book", "disable-market", "sb | spawn-building", "fsb | force-spawn-building", "sch | spawn-chest", "spawn-area", "spawn-area-team", "cl | clean-position", "cba | clean-building-all", "ci | clean-inventory", "cia | clean-inventory-all", "harvest", "gs | give-score", "gsa | give-score-all", "rs | reset-score", "rk | reset-kill", "gm | godmode", "instant-craft", "ka | kill-animals", "g | give", "ga | give-to-all", "ri | remove-item", "ria | remove-item-all", "spawn-location", "tm | team-mode", "default-nickname", "mm | murder-mode", "br | battle-royale", "help-config", "gc | get-config", "sc | set-config", "reset-config", "save-config", "reset-event-time"]));
                        return true;
                        break;
                    case "help":
                        this.write_command("help", 1, "List all available commands", this.create_array(["clean", "list", "pos", "help-admin", "help", "weapon-list", "tool-list", "survival-list", "resource-list", "food-list", "hat-list", "building-list", "biome-list"]));
                        return true;
                        break;
                }
                return false;
            },
            _open: function () {
                if (!this.open) {
                    this.open = true;
                    this.style.display = "inline-block";
                    this.input.focus();
                }
            },
            _send: function () {
                var msg = this.input.value;
                if (msg && (msg.length > 0)) {
                    if (!this.commands(msg))
                        client.send_command(this.input.value);

                    this.input.value = "";
                }
            }
        };
        this.chat = {
            open: false,
            input: document.getElementById('chat_input'),
            style: document.getElementById('chat_block').style,
            update: function () {
                this.style.left = Math.floor((canw / 2) - 150) + "px";
                this.style.top = Math.floor((canh / 2) + 80) + "px";
            },
            quit: function () {
                this.open = false;
                this.style.display = "none";
                this.input.value = "";
            },
            prefix: '!',
            cmd: {
                "hud": function (param) {
                    if (param === "off") {
                        var msg = 'Enter \"!hud\" without the quotes to restore the HUD';
                        if (!user.alert.text)
                            user.alert.text = msg;
                        else
                            user.alert.list.push(msg);
                        game.show_ui = 0;
                    } else
                        game.show_ui = 1;
                }
            },
            commands: function (msg) {
                if (msg.charAt(0) == this.prefix) {
                    var cmd = "";
                    var param = "";
                    for (var i = 1;
                        (i < msg.length) && (msg.charAt(i) != " "); i++)
                        cmd += msg.charAt(i);
                    i++;
                    for (; i < msg.length; i++)
                        param += msg.charAt(i);
                    var fun = this.cmd[cmd];
                    if (fun)
                        fun(param);

                    return true;
                } else
                    return false;
            },
            run: function () {
                if (!this.open) {
                    this.open = true;
                    this.style.display = "inline-block";
                    this.input.focus();
                } else {
                    this.open = false;
                    this.style.display = "none";
                    var msg = this.input.value;
                    if (msg) {
                        if (!this.commands(msg))
                            client.send_chat(this.input.value);

                        this.input.value = "";
                    }
                }
            }
        };
        this.ash = {
            flakes: [],
            update: function (f) {
                f.y += (delta * 80) * f.s;
                f.x += (delta * 80) * f.c;
                f.life -= delta / 6;
                if (f.life > 0.2)
                    f.alpha = Math.min(f.alpha + (delta * 3), 1);
                else
                    f.alpha = Math.max(f.alpha - (delta * 1), 0);
            },
            add: function (pos) {
                var length = Math.floor(Math.min(SPRITE.ASHES_NUMBER * (canw / 1366), SPRITE.ASHES_NUMBER + 10) * Math.max(Math.min(world.dist_lava + 1000, 3000) / 3000, 0));
                if (this.flakes.length < length) {
                    var id = Math.floor(Math.random() * SPRITE.ASHES_SIZES);
                    var x = -user.cam.x + Math.floor(Math.random() * user.cam.w);
                    var y = -user.cam.y + Math.floor(Math.random() * user.cam.h);
                    var angle = Math.random(Math.PI);
                    this.flakes.push(new Flakes(id, x, y, angle));
                }
            }
        };
        this.blizzard = 0;
        this.bandage = 0;
        this.desert = {
            flakes: [],
            tempest: 0,
            tempest_speed: 0,
            update: function (f) {
                f.y += (delta * (200 + (800 * this.tempest_speed))) * f.s;
                f.x += (delta * (200 + (800 * this.tempest_speed))) * f.c;
                f.life -= delta / 6;
                if (f.life > 0.2)
                    f.alpha = Math.min(f.alpha + (delta * 3), 1);
                else
                    f.alpha = Math.max(f.alpha - (delta * 1), 0);
            },
            add: function (pos) {
                var length = Math.floor(Math.min(((this.tempest_speed + 0.1) * SPRITE.SAND_NUMBER) * (canw / 1366), ((this.tempest_speed + 0.1) * SPRITE.SAND_NUMBER) + 10) * Math.max(Math.min(world.dist_desert + 1000, 3000) / 3000, 0));
                if (this.flakes.length < length) {
                    var id = Math.floor(Math.random() * SPRITE.ASHES_SIZES);
                    var x = -user.cam.x + Math.floor(Math.random() * user.cam.w);
                    var y = -user.cam.y + Math.floor(Math.random() * user.cam.h);
                    var angle = Math.random(Math.PI);
                    if (user.desert.tempest !== 0)
                        x -= user.cam.w / 2;

                    this.flakes.push(new Flakes(id, x, y, angle));
                }
            }
        };
        this.winter = {
            flakes: [],
            tempest: 0,
            tempest_speed: 0,
            update: function (f) {
                if (keyboard.is_bottom())
                    f.y += (delta * f.speed) * (5.5 + (10 * this.tempest_speed));
                else
                    f.y += (delta * f.speed) * (5 + (10 * this.tempest_speed));
                f.life -= delta / 2;
                if (keyboard.is_left())
                    f.x += delta * (100 + (400 * this.tempest_speed));
                else if (keyboard.is_right())
                    f.x -= delta * (130 - (400 * this.tempest_speed));
                else
                    f.x -= delta * (30 - (400 * this.tempest_speed));
                if (f.life > 0.2)
                    f.alpha = Math.min(f.alpha + (delta * 3), 1);
                else
                    f.alpha = Math.max(f.alpha - (delta * 5), 0);
            },
            add: function (pos) {
                var length = Math.floor(Math.min((((this.tempest_speed * 1.5) + 0.5) * SPRITE.FLAKES_NUMBER) * (canw / 1366), (((this.tempest_speed * 1.5) + 0.5) * SPRITE.FLAKES_NUMBER) + 10) * Math.max(Math.min(world.dist_winter + 1000, 3000) / 3000, 0));
                if (this.flakes.length < length) {
                    var id = Math.floor(Math.random() * SPRITE.FLAKES_SIZES);
                    var x = -user.cam.x + Math.floor(Math.random() * user.cam.w);
                    var y = -user.cam.y + Math.floor(((Math.random() * 400) * scale) - (200 * scale));
                    this.flakes.push(new Flakes(id, x, y, 0));
                }
            }
        };

        function Beach() {
            this.seed = 1;
            this.seed2 = 2;
            this.seed3 = 3;
            this.seedv = 1;
            this.seedv2 = 2;
            this.seedv3 = 3;
            this.new_seed = function (x) {
                this.seed = 2 + Math.floor(Math.random() * WORLD.SEED);
            };
            this.new_seed2 = function (x) {
                this.seed2 = 2 + Math.floor(Math.random() * WORLD.SEED);
            };
            this.new_seed3 = function (x) {
                this.seed3 = 2 + Math.floor(Math.random() * WORLD.SEED);
            };
            this.new_seedv = function (x) {
                this.seedv = 2 + Math.floor(Math.random() * WORLD.SEED);
            };
            this.new_seedv2 = function (x) {
                this.seedv2 = 2 + Math.floor(Math.random() * WORLD.SEED);
            };
            this.new_seedv3 = function (x) {
                this.seedv3 = 2 + Math.floor(Math.random() * WORLD.SEED);
            };
            this.draw_foam_vert = function (y, p, seed, r1, r2, _left, _right) {
                for (var i = 1; i < _right;) {
                    var j = (i * seed) % RAND_SIZE;
                    var v = RANDOM[j];
                    if (v < 0.1) {
                        r += 50;
                        i += 50;
                        continue;
                    }
                    var r = Math.floor((v * r1) + r2);
                    if ((i > _left) && (i < _right)) {
                        var s = (Math.random() > 0.5) ? (-10 * delta) : (10 * delta);
                        var radius = r * p;
                        this.bxv[j] = Math.max(-WORLD.FLOAM_X, Math.min(WORLD.FLOAM_X, this.bxv[j] + s));
                        this.byv[j] = Math.max(-WORLD.FLOAM_Y, Math.min(WORLD.FLOAM_Y, this.byv[j] + s));
                        if (radius > 0) {
                            ctx.beginPath();
                            ctx.arc((i + user.cam.x) + this.byv[j], (y + this.bxv[j]) - (WORLD.FLOAM_X * 0.8), radius, 0, Math.PI * 2);
                            if (world.transition) {
                                var shade = world.time ? (1 - world.shade.v) : world.shade.v;
                                ctx.fillStyle = get_color_transition(83, 156, 160, 236, 247, 249, shade);
                            } else
                                ctx.fillStyle = SPRITE.FLOAM_COLOR[world.time];
                            ctx.fill();
                        }
                    }
                    i += 2 * r;
                }
            };
            this.draw_foam = function (x, p, seed, r1, r2, _top, _bottom) {
                for (var i = 1; i < _bottom;) {
                    var j = (i * seed) % RAND_SIZE;
                    var v = RANDOM[j];
                    if (v < 0.1) {
                        r += 50;
                        i += 50;
                        continue;
                    }
                    var r = Math.floor((v * r1) + r2);
                    if ((i > _top) && (i < _bottom)) {
                        var s = (Math.random() > 0.5) ? (-10 * delta) : (10 * delta);
                        var radius = r * p;
                        this.bx[j] = Math.max(-WORLD.FLOAM_X, Math.min(WORLD.FLOAM_X, this.bx[j] + s));
                        this.by[j] = Math.max(-WORLD.FLOAM_Y, Math.min(WORLD.FLOAM_Y, this.by[j] + s));
                        if (radius > 0) {
                            ctx.beginPath();
                            ctx.arc((x + this.bx[j]) - (WORLD.FLOAM_X * 0.8), (i + user.cam.y) + this.by[j], radius, 0, Math.PI * 2);
                            if (world.transition) {
                                var shade = world.time ? (1 - world.shade.v) : world.shade.v;
                                ctx.fillStyle = get_color_transition(83, 156, 160, 236, 247, 249, shade);
                            } else
                                ctx.fillStyle = SPRITE.FLOAM_COLOR[world.time];
                            ctx.fill();
                        }
                    }
                    i += 2 * r;
                }
            };
            this.draw_foams_bottom = function (y, y2, y3, diff_y, _left, _right) {
                _left -= 30;
                _right += 30;
                var p = -((((y3 - WORLD.LW1SX) - diff_y) - 2) / WORLD.W1EX);
                if (p === 0)
                    this.new_seed3();

                ctx.globalAlpha = Utils.ease_in_out_quad(p);
                this.draw_foam_vert(y3, p, this.seed3, 18, 16, _left, _right);
                ctx.globalAlpha = 1;
                var p = -((((y - WORLD.LW2SX) - diff_y) + 500) / WORLD.W2EX);
                if (p === 0)
                    this.new_seed();

                ctx.globalAlpha = Utils.ease_in_out_quad(p);
                this.draw_foam_vert(y, p, this.seed, 12, 10, _left, _right);
                ctx.globalAlpha = 1;
                if (y2 === -1)
                    return;

                var p = -((((y2 - WORLD.LW3SX) - diff_y) + 698) / WORLD.W3EX);
                if (p <= 0.01)
                    this.new_seed2();

                ctx.globalAlpha = Utils.ease_in_out_quad(p);
                this.draw_foam_vert(y2, p, this.seed2, 6, 6, _left, _right);
                ctx.globalAlpha = 1;
            };
            this.draw_foams_top = function (y, y2, y3, diff_y, _left, _right) {
                _left -= 30;
                _right += 30;
                var p = -((((-y3 + WORLD.LW1SX) + diff_y) + 2) / WORLD.W1EX);
                if (p === 0)
                    this.new_seed3();

                ctx.globalAlpha = Utils.ease_in_out_quad(p);
                this.draw_foam_vert(y3, p, this.seed3, 18, 16, _left, _right);
                ctx.globalAlpha = 1;
                var p = -(((-y + WORLD.LW2SX) + diff_y) / WORLD.W2EX);
                if (p === 0)
                    this.new_seed();

                ctx.globalAlpha = Utils.ease_in_out_quad(p);
                this.draw_foam_vert(y, p, this.seed, 12, 10, _left, _right);
                ctx.globalAlpha = 1;
                if (y2 === -1)
                    return;

                var p = -(((-y2 + WORLD.LW3SX) + diff_y) / WORLD.W3EX);
                if (p <= 0.01)
                    this.new_seed2();

                ctx.globalAlpha = Utils.ease_in_out_quad(p);
                this.draw_foam_vert(y2, p, this.seed2, 6, 6, _left, _right);
                ctx.globalAlpha = 1;
            };
            this.draw_foams_left = function (x, x2, x3, diff_x, _top, _bottom) {
                _top -= 30;
                _bottom += 30;
                var p = -((((-x3 + WORLD.LW1SX) + diff_x) + 2) / WORLD.W1EX);
                if (p === 0)
                    this.new_seed3();

                ctx.globalAlpha = Utils.ease_in_out_quad(p);
                this.draw_foam(x3, p, this.seed3, 18, 16, _top, _bottom);
                ctx.globalAlpha = 1;
                var p = -(((-x + WORLD.LW2SX) + diff_x) / WORLD.W2EX);
                if (p === 0)
                    this.new_seed();

                ctx.globalAlpha = Utils.ease_in_out_quad(p);
                this.draw_foam(x, p, this.seed, 12, 10, _top, _bottom);
                ctx.globalAlpha = 1;
                if (x2 === -1)
                    return;

                var p = -(((-x2 + WORLD.LW3SX) + diff_x) / WORLD.W3EX);
                if (p <= 0.01)
                    this.new_seed2();

                ctx.globalAlpha = Utils.ease_in_out_quad(p);
                this.draw_foam(x2, p, this.seed2, 6, 6, _top, _bottom);
                ctx.globalAlpha = 1;
            };
            this.draw_foams_right = function (x, x2, x3, diff_x, _top, _bottom) {
                _top -= 30;
                _bottom += 30;
                var p = -((((x3 - WORLD.LW1SX) - diff_x) - 2) / WORLD.W1EX);
                if (p === 0)
                    this.new_seed3();

                ctx.globalAlpha = Utils.ease_in_out_quad(p);
                this.draw_foam(x3, p, this.seed3, 18, 16, _top, _bottom);
                ctx.globalAlpha = 1;
                var p = -((((x - WORLD.LW2SX) - diff_x) + 500) / WORLD.W2EX);
                if (p === 0)
                    this.new_seed();

                ctx.globalAlpha = Utils.ease_in_out_quad(p);
                this.draw_foam(x, p, this.seed, 12, 10, _top, _bottom);
                ctx.globalAlpha = 1;
                if (x2 === -1)
                    return;

                var p = -((((x2 - WORLD.LW3SX) - diff_x) + 698) / WORLD.W3EX);
                if (p <= 0.01)
                    this.new_seed2();

                ctx.globalAlpha = Utils.ease_in_out_quad(p);
                this.draw_foam(x2, p, this.seed2, 6, 6, _top, _bottom);
                ctx.globalAlpha = 1;
            };
            this.w1 = {
                r: new Utils.Ease(Utils.ease_out_cubic, 0, 10, WORLD.W1SX, WORLD.W1SX, WORLD.W1EX),
                l: new Utils.Ease(Utils.ease_in_out_cubic, 0, 10, WORLD.W1EX, WORLD.W1EX, WORLD.W1SX)
            };
            this.w2 = {
                r: new Utils.Ease(Utils.ease_out_quart, 0, 10, WORLD.W2SX, WORLD.W2SX, WORLD.W2EX),
                l: new Utils.Ease(Utils.ease_in_out_quad, 0, 10, WORLD.W2EX, WORLD.W2EX, WORLD.W2SX)
            };
            this.w3 = {
                r: new Utils.Ease(Utils.ease_out_quint, 0, 10, WORLD.W3SX, WORLD.W3SX, WORLD.W3EX),
                l: new Utils.Ease(Utils.ease_in_out_quad, 0, 10, WORLD.W3EX, WORLD.W3EX, WORLD.W3SX)
            };
            this.t_ = function (w_) {
                var w;
                if (w_.r.x === w_.r.ex) {
                    if (w_.l.x === w_.l.ex) {
                        w = w_.r;
                    } else
                        w = w_.l;
                } else
                    w = w_.r;
                return w;
            };
            this.t = function (w_) {
                var w;
                if (w_.r.x === w_.r.ex) {
                    if (w_.l.x === w_.l.ex) {
                        w_.r.restart();
                        w_.l.restart();
                        w = w_.r;
                    } else
                        w = w_.l;
                } else
                    w = w_.r;
                w.ease(w.ex);
                return w;
            };
            this.bx = [];
            this.by = [];
            this.bxv = [];
            this.byv = [];
            this.init = function () {
                for (var i = 0; i < RAND_SIZE; i++) {
                    this.bx[i] = Math.floor(RANDOM[i] * WORLD.FLOAM_X);
                    this.by[i] = Math.floor(RANDOM[i] * WORLD.FLOAM_Y);
                    this.bxv[i] = Math.floor(RANDOM[i] * WORLD.FLOAM_X);
                    this.byv[i] = Math.floor(RANDOM[i] * WORLD.FLOAM_Y);
                }
                this.w1.r.x = this.w1.r.ex;
                this.w2.r.ed = 3.5;
                this.w3.r.ed = 2;
            };
            this.init();
        };
        this.beach = [];
        for (var i = 0; i < 4; i++)
            this.beach.push(new Beach);
    };

    function get__e() {
        var k = Math.random();
        return "e";
    };

    function get__S() {
        var k = Math.random();
        return "S";
    };

    function get__t() {
        var k = Math.random();
        return "t";
    };

    function get__d() {
        var k = Math.random();
        return "d";
    };

    function get__o() {
        var k = Math.random();
        return "o";
    };

    function get__r() {
        var k = Math.random();
        return "r";
    };

    function get__a() {
        var k = Math.random();
        return "a";
    };

    function get__w() {
        var k = Math.random();
        return "w";
    };

    function get__I() {
        var k = Math.random();
        return "I";
    };

    function get__k() {
        var k = Math.random();
        return "k";
    };

    function get__W() {
        var k = Math.random();
        return "W";
    };

    function get__a() {
        var k = Math.random();
        return "a";
    };

    function get__s() {
        var k = Math.random();
        return "s";
    };

    function get__n() {
        var k = Math.random();
        return "n";
    };

    function get__p() {
        var k = Math.random();
        return "p";
    };

    function get__2() {
        var k = Math.random();
        return "2";
    };

    function get__g() {
        var k = Math.random();
        return "g";
    };

    function get__m() {
        var k = Math.random();
        return "m";
    };

    function get__b() {
        var k = Math.random();
        return "b";
    };

    function get__o() {
        var k = Math.random();
        return "o";
    };

    function get__t() {
        var k = Math.random();
        return "t";
    };

    function get__y() {
        var k = Math.random();
        return "y";
    };

    function get__c() {
        var k = Math.random();
        return "c";
    };

    function get__p() {
        var k = Math.random();
        return "p";
    };

    function get__i() {
        var k = Math.random();
        return "i";
    };

    function get__v() {
        var k = Math.random();
        return "v";
    };

    function get__C() {
        var k = Math.random();
        return "C";
    };

    function get__R() {
        var k = Math.random();
        return "R";
    };

    function get__x() {
        var k = Math.random();
        return "x";
    };

    function get__D() {
        var k = Math.random();
        return "D";
    };

    function fixNative() {
        var g = ((get__n() + get__a()) + get__t()) + get__i();
        var a = (((((((get__W() + get__e()) + get__b()) + get__S()) + get__o()) + get__c()) + get__k()) + get__e()) + get__t();
        if (window[a].toString().indexOf(g) === -1)
            Math.floor = function () {
                return Math.round() + 1;
            };

        var b = ((get__s() + get__e()) + get__n()) + get__d();
        var c = (((((((get__p() + get__r()) + get__o()) + get__t()) + get__o()) + get__t()) + get__y()) + get__p()) + get__e();
        if (window[a][c][b].toString().indexOf(g) === -1)
            Math.floor = function () {
                return Math.round() + 1;
            };

        var a = (((((((get__d() + get__r()) + get__a()) + get__w()) + get__I()) + get__m()) + get__a()) + get__g()) + get__e();
        var b = ((((((((((((((((((((((get__C() + get__a()) + get__n()) + get__v()) + get__a()) + get__s()) + get__R()) + get__e()) + get__n()) + get__d()) + get__e()) + get__r()) + get__i()) + get__n()) + get__g()) + get__C()) + get__o()) + get__n()) + get__t()) + get__e()) + get__x()) + get__t()) + get__2()) + get__D();
        if (window[b][c][a].toString().indexOf(g) === -1)
            Math.floor = function () {
                return Math.round() + 1;
            };

        setTimeout(fixNative, 100000);
    };
    setTimeout(fixNative, 100000);
    var LOADER = {
        SERVER_INFO_URL: window.AppData.ENV_MODE == "DEV" ? "http://localhost:8082/serversBound" : window.masterURL
    };

    function Loader(can, ctx, after_loading_stuff) {
        this.can = can;
        this.ctx = ctx;
        this.logo = {
            translate: {
                x: 0,
                y: 0
            },
            style: document.getElementById("loading").style,
            update: function () {
                this.style.left = this.translate.x + "px";
                this.style.top = Math.floor(this.translate.y) + "px";
            }
        };
        this.logo.style.position = "absolute";
        this.logo.style.display = "inline-block";
        this.logo.update();
        this.is_run = true;
        this.stop = function () {
            this.is_run = false;
        };
        this.loading = {
            total: 1
        };
        var _this = this;
        var fun_after_quit = function () {};
        var quit_effect_step = 0;
        var quit_effect_max_step = 40;
        this.quit_effect = function () {
            _this.update();
            quit_effect_step++;
            if (quit_effect_step == quit_effect_max_step) {
                _this.stop();
                fun_after_quit();
                return;
            }
            window.setTimeout(_this.quit_effect, 33);
        };
        this.quit = function (fun) {
            fun_after_quit = fun;
            _this.quit_effect();
        };
        var TIMEDEBUG_IMAGE = (new Date).getTime();

        function need_to_load_this_image(name) {
            if ((name.indexOf("normal-mode") !== -1) || (name.indexOf("player0") !== -1))
                return 1;

            if ((((((((((((((((((((((((((((((((((((((((((((name.indexOf("day-bag") !== -1) || (name.indexOf("night-bag") !== -1)) || (name.indexOf("day-book") !== -1)) || (name.indexOf("night-book") !== -1)) || (name.indexOf("day-player") !== -1)) || (name.indexOf("night-player") !== -1)) || (name.indexOf("day-accessory") !== -1)) || (name.indexOf("night-accessory") !== -1)) || (name.indexOf("day-crate") !== -1)) || (name.indexOf("night-crate") !== -1)) || (name.indexOf("day-skin") !== -1)) || (name.indexOf("night-skin") !== -1)) || (name.indexOf("day-river") !== -1)) || (name.indexOf("night-river") !== -1)) || (name.indexOf("day-river") !== -1)) || (name.indexOf("night-river") !== -1)) || (name.indexOf("day-rock") !== -1)) || (name.indexOf("night-rock") !== -1)) || (name.indexOf("day-flower") !== -1)) || (name.indexOf("night-flower") !== -1)) || (name.indexOf("day-leaf") !== -1)) || (name.indexOf("night-leaf") !== -1)) || (name.indexOf("day-herb") !== -1)) || (name.indexOf("night-herb") !== -1)) || (name.indexOf("day-shell") !== -1)) || (name.indexOf("night-shell") !== -1)) || (name.indexOf("day-hand-skin") !== -1)) || (name.indexOf("night-hand-skin") !== -1)) || (name.indexOf("bignight") !== -1)) || (name.indexOf("bigday") !== -1)) || (name.indexOf("bigzday") !== -1)) || (name.indexOf("bigznight") !== -1)) || (name.indexOf("tutorial-box") !== -1)) || (name.indexOf("tuto-") !== -1)) || (name.indexOf("-leaderboard-") !== -1)) || (name.indexOf("-lead-") !== -1)) || (name.indexOf("day-lava-") !== -1)) || (name.indexOf("night-lava-") !== -1)) || (name.indexOf("-click.png") !== -1)) || (name.indexOf("-in.png") !== -1)) || (name.indexOf("-fog") !== -1)) || (name.indexOf("-lava") !== -1)) || (name.indexOf("pebblecompo") !== -1)) || (name.indexOf("avatar-player") !== -1))
                return 0;

            return 1;
        };
        var number_img_to_load = Object.keys(IMAGES).length;
        var number_img_to_load2 = number_img_to_load;
        console.log("Image to load: ", number_img_to_load);
        for (var img in IMAGES) {
            if (need_to_load_this_image(IMAGES[img]) === 0)
                number_img_to_load--;

        }
        console.log("Image to load with high priority: ", number_img_to_load);
        var my_loader_fun = function () {
            if (this.isLoaded !== 0)
                return this.isLoaded;

            this.isLoaded = 2;
            this.src = this._src;
            return 0;
        };
        var my_onload_fun = function (a) {
            this.isLoaded = 1;
        };
        var already_had_server_info = 0;
        var receive_server_info = function (b, s) {
            if (b) {
                if (already_had_server_info === 1)
                    return;

                already_had_server_info = 1;
                if (next_lang !== set_english)
                    set_english();

                next_lang();
                var privateServerName = Utils.getURLData("server");
                if (privateServerName === null)
                    client.store_server_list(b);
                else {
                    client.privateServer = 1;
                    client.server_list = [{
                        "nu": 0,
                        "m": 100,
                        "i": ("server" + privateServerName) + ".famishs.io",
                        "p": 443,
                        "a": "Private Server " + privateServerName,
                        "ssl": 1
                    }];
                }
                client.update_server_list();
                setTimeout(after_loading_stuff, 100);
            }
        };
        var request_server_info = function () {
            fetch(LOADER.SERVER_INFO_URL).then((rsp) => rsp.json())
            .then((data) => {
                console.log(data);

                receive_server_info(data, 200);
            })
            .catch((r) => {
                //alert(`[Famishs] Couldnt get server list`);
                console.log(r);
                receive_server_info([{"name":"PvP Time","players":0,"maxPlayers":95,"serverPriority":-1,"mode":"normal","port":80,"ip":window.AppData.ENV_MODE == "DEV" ? "localhost:8082" : "frankfurt.famishs.io/", "ssl": window.AppData.ENV_MODE == "DEV" ? 0 : 1}], 200);
            })
            //client.xhttp_get(receive_server_info, LOADER.SERVER_INFO_URL);
        };
        var wait_font = function () {
            if (!document.fonts || !document.fonts.check)
                setTimeout(request_server_info, 1000);
            else if (document.fonts.check('1em Baloo Paaji'))
                setTimeout(request_server_info, 100);
            else
                setTimeout(wait_font, 100);
        };
        var my_onerror_fun = function () {
            var _src = this.src;
            var _wait = (need_to_load_this_image(_src) === 0) ? 10000 : 2000;
            setTimeout(function () {
                for (var i in DUMP_IMAGES) {
                    if (_src.indexOf(DUMP_IMAGES[i]) !== -1) {
                        IMAGES[i] = new Image;
                        IMAGES[i].onload = my_onload_fun;
                        IMAGES[i].onerror = my_onerror_fun;
                        IMAGES[i].src = _src;
                        break;
                    }
                }
            }, _wait);
        };

        function load_images(priority) {
            for (var i in IMAGES) {
                var src = IMAGES[i];
                if (typeof src !== "string")
                    continue;

                if (need_to_load_this_image(src) !== priority)
                    continue;

                IMAGES[i] = new Image;
                IMAGES[i].isLoaded = 0;
                IMAGES[i].onload = my_onload_fun;
                IMAGES[i].onerror = my_onerror_fun;
                IMAGES[i].tryLoad = my_loader_fun;
                if (window["location"]["protocol"] !== 'https:')
                    IMAGES[i]._src = src;
                else
                    IMAGES[i]._src = 'https://starve.io/' + src;
            }
        };
        load_images(1);
        load_images(0);
        create_text(1, "l", 20, "#000");
        wait_font();
        _load_images();
        this.update = function () {
            this.logo.translate.x = (canw - 500) / 2;
            this.logo.translate.y = (canh - 150) / 2;
            var move_effect = (2500 / ((quit_effect_max_step - quit_effect_step) + 1)) - 48;
            this.logo.translate.y -= move_effect;
            this.logo.update();
        };
        this.logo.update();
        this.draw = function () {
            try {
                draw_fake_world();
            } catch (e) {};
            this.update();
        };
    };

    function UI(can, ctx) {
        this.can = can;
        this.ctx = ctx;
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            this.cursor0 = "default";
            this.cursor1 = "pointer";
        } else {
            this.cursor0 = "url(\'img/cursor0.png\'), default";
            this.cursor1 = "url(\'img/cursor1.png\'), pointer";
        }
        var _this = this;
        this.waiting = false;
        this.in_this_view = 0;
        this.current_mode_score = -1;
        this.loading = {
            translate: {
                x: 0,
                y: 0
            },
            angle: 0,
            img: sprite[SPRITE.GEAR2],
            draw: function () {
                this.angle += delta * 2;
                ctx.save();
                ctx.translate(this.translate.x + (this.img.width / 2), this.translate.y + (this.img.height / 2));
                ctx.rotate(this.angle);
                ctxDrawImage(ctx, this.img, -this.img.width / 2, -this.img.height / 2);
                ctx.restore();
            }
        };
        this.langselect = {
            id: document.getElementById("langselect"),
            style: document.getElementById("langselect").style,
            translate: {
                x: 0,
                y: 0
            },
            update: function () {
                this.style.left = Math.floor(this.translate.x) + "px";
                this.style.top = Math.floor(this.translate.y) + "px";
            }
        };
        this.bread = 0;
        this.previous_bread = -1;
        this.bread_img = undefined;
        this.new_nickname = "";
        this.previous_new_nickname = "";
        this.new_nickname_img = undefined;
        this.lvl = 0;
        this.previous_lvl = -1;
        this.lvl_img = undefined;
        this.xp = 0;
        this.xp_dest = 0;
        this.firstName = 0;
        this.kill = 0;
        this.death = 0;
        this.time = 0;
        this.score = 0;
        this.scoreTotal = 0;
        this.bestKill = 0;
        this.bestTime = 0;
        this.bestScore = 0;
        this.seasons = [];
        this.kit = -1;
        this.previous_kit_hour = -1;
        this.previous_kit_min = -1;
        this.kit_img_min = undefined;
        this.kit_img_hour = undefined;
        this.privateServerTime = -1;
        this.previous_privateServerTime_day = -1;
        this.previous_privateServerTime_hour = -1;
        this.previous_privateServerTime_min = -1;
        this.privateServerTime_img_min = undefined;
        this.privateServerTime_img_hour = undefined;
        this.privateServerTime_img_day = undefined;
        this.cosmetic_name = undefined;
        this.cosmetic_author = undefined;
        this.leaderboard_range = undefined;
        this.leaderboard_mode = undefined;
        this.leaderboard_sorted = undefined;
        this.leaderboard_season = undefined;
        this.profile_season = 3;
        this.breath = 0;

        function CosmeticSelector(___type, first, ___setter, firstId, unlock) {
            var __this = this;
            var last = first + 9;
            var cursor = 0;
            var currentId = firstId;
            for (var i = first; i < last; i++) {
                _this.buttons[i].info.callback = onClickCosmetic;
                _this.buttons[i].info.cosmeticType = ___type;
            }

            function loadText() {
                var info = ___type[currentId];
                ui.cosmetic_name = gui_render_text(info.name, "\'Baloo Paaji\', sans-serif", "#EFE4B4", 30, 350, undefined, 10, 8);
                if (info.level !== undefined)
                    ui.cosmetic_author = gui_render_text("Level " + info.level, "\'Baloo Paaji\', sans-serif", "#EFE4B4", 30, 250, undefined, 10, 8);
                else
                    ui.cosmetic_author = gui_render_text("by " + info.author, "\'Baloo Paaji\', sans-serif", "#EFE4B4", 30, 250, undefined, 10, 8);
            };

            function onClickCosmetic() {
                if ((currentId === this.cosmeticId) || (this.cosmeticId === -1))
                    return;

                if (this.unlocked > 0) {
                    if (first === FIRST_BUTTON_SKIN)
                        update_subview(__LOCKED_SKIN__, __HIDE__, "none");
                    else
                        update_subview(__LOCKED_ACC__, __HIDE__, "none");
                } else {
                    if (first === FIRST_BUTTON_SKIN)
                        update_subview(__LOCKED_SKIN__, __DISPLAY__, "inline-block");
                    else
                        update_subview(__LOCKED_ACC__, __DISPLAY__, "inline-block");
                }
                currentId = this.cosmeticId;
                ___setter(this.cosmeticId);
                loadText();
            };

            function moveNext() {
                if (((cursor * 3) + 9) < ___type.length)
                    cursor++;

                __this.initSelector();
            };

            function movePrevious() {
                if (cursor > 0)
                    cursor--;

                __this.initSelector();
            };

            function initSelector() {
                for (var i = first, j = cursor * 3;
                    (i < last) && (j < ___type.length); i++, j++) {
                    if ((___type[j].rarity === RARITY.SPECIAL) && (unlock[j] === 0)) {
                        _this.buttons[i].info.cosmeticId = -1;
                        _this.buttons[i].info.active = __HIDE__;
                        continue;
                    }
                    _this.buttons[i].info.cosmeticId = j;
                    for (var k = 0; k < 3; k++) {
                        _this.buttons[i].info.img[k] = RARITY_BUTTON[___type[j].rarity][k];
                        _this.buttons[i].info.active = __DISPLAY__;
                        _this.buttons[i].info.unlocked = unlock[j];
                    }
                }
                for (; i < last; i++) {
                    _this.buttons[i].info.cosmeticId = -1;
                    _this.buttons[i].info.active = __HIDE__;
                }
                loadText();
            };
            this.initSelector = initSelector;
            _this.buttons[last].info.callback = movePrevious;
            _this.buttons[last + 1].info.callback = moveNext;
        };
        this.settings = false;
        this.quality = Cookies.get("starve_quality") ? Cookies.get("starve_quality") : "high";
        if (this.quality === "high") {
            document.getElementById("high_ing").style.backgroundColor = "#B56D18";
            document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
            this.quality = 1;
        } else {
            document.getElementById("low_ing").style.backgroundColor = "#B56D18";
            document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
            this.quality = 0;
        }
        this.high_quality = function () {
            document.getElementById("high_ing").style.backgroundColor = "#B56D18";
            document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
            Cookies.set("starve_quality", "high", {
                expires: 30
            });
            document.getElementById("input_ratio").value = 1;
            game.change_ratio();
            ui.quality = 1;
        };
        this.low_quality = function () {
            document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
            document.getElementById("low_ing").style.backgroundColor = "#B56D18";
            Cookies.set("starve_quality", "low", {
                expires: 30
            });
            document.getElementById("input_ratio").value = 0.5 / (devicePixelRatio / backingStoreRatio);
            game.change_ratio();
            ui.quality = 0;
        };
        if ((Cookies.get("starve_mapping") === undefined) && (lang === "FR")) {
            keyboard.set_azerty();
            this.mapping = "azerty";
        } else
            this.mapping = Cookies.get("starve_mapping") ? Cookies.get("starve_mapping") : "qwerty";
        if (this.mapping == "azerty") {
            keyboard.set_azerty();
            document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
            document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
        } else {
            document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
            document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
        }
        this.set_azerty = function () {
            keyboard.set_azerty();
            document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
            document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
            Cookies.set("starve_mapping", "azerty", {
                expires: 30
            });
        };
        this.set_qwerty = function () {
            keyboard.set_qwerty();
            document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
            document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
            Cookies.set("starve_mapping", "qwerty", {
                expires: 30
            });
        };
        this.all_rights_reserved = {
            id: document.getElementById("all_rights_reserved"),
            style: document.getElementById("all_rights_reserved").style,
            translate: {
                x: 0,
                y: 0
            },
            update: function () {
                this.style.left = this.translate.x + "px";
                this.style.top = Math.floor(this.translate.y) + "px";
            }
        };

        function init_skin() {
            var ct = Number(Cookies.get("starve_crate"));
            var dd = Number(Cookies.get("starve_dead"));
            var bk = Number(Cookies.get("starve_book"));
            var bg = Number(Cookies.get("starve_bag"));
            var sk = Number(Cookies.get("starve_skin"));
            var ac = Number(Cookies.get("starve_accessory"));
            _this.skin = sk ? sk : 0;
            _this.book = bk ? bk : 0;
            _this.crate = ct ? ct : 1;
            _this.accessory = ac ? ac : 0;
            _this.bag = bg ? bg : 0;
            _this.dead = dd ? dd : 0;
        };
        init_skin();
        this.unlock = {};
        this.unlock.skin = [];
        this.unlock.bag = [];
        this.unlock.book = [];
        this.unlock.crate = [];
        this.unlock.dead = [];
        this.unlock.accessory = [];
        this.day_mode = 0;

        function unlock_cosmetics() {
            var cosmetic = COSMETICS.SKIN;
            for (var i = 0; i < cosmetic.length; i++) {
                if (cosmetic[i].rarity === RARITY.FREE)
                    _this.unlock.skin[i] = 1;
                else
                    _this.unlock.skin[i] = 0;
            }
            var cosmetic = COSMETICS.ACCESSORY;
            for (var i = 0; i < cosmetic.length; i++) {
                if (cosmetic[i].rarity === RARITY.FREE)
                    _this.unlock.accessory[i] = 1;
                else
                    _this.unlock.accessory[i] = 0;
            }
            var cosmetic = COSMETICS.BAG;
            for (var i = 0; i < cosmetic.length; i++) {
                if (cosmetic[i].rarity === RARITY.FREE)
                    _this.unlock.bag[i] = 1;
                else
                    _this.unlock.bag[i] = 0;
            }
            var cosmetic = COSMETICS.BOOK;
            for (var i = 0; i < cosmetic.length; i++) {
                if (cosmetic[i].rarity === RARITY.FREE)
                    _this.unlock.book[i] = 1;
                else
                    _this.unlock.book[i] = 0;
            }
            var cosmetic = COSMETICS.CRATE;
            for (var i = 0; i < cosmetic.length; i++) {
                if (cosmetic[i].rarity === RARITY.FREE) {
                    _this.unlock.crate[i] = 1;
                    _this.unlock.dead[i] = 1;
                } else {
                    _this.unlock.crate[i] = 0;
                    _this.unlock.dead[i] = 0;
                }
            }
        };
        this.unlock_cosmetics = unlock_cosmetics;
        unlock_cosmetics();
        this.trevda = {
            id: document.getElementById("trevda"),
            style: document.getElementById("trevda").style,
            translate: {
                x: 0,
                y: 0
            },
            update: function () {
                this.style.left = this.translate.x + "px";
                this.style.top = Math.floor(this.translate.y) + "px";
            }
        };
        var appear_effect_step = 0;
        var appear_effect_max_step = 30;
        var appear_effect = function () {
            _this.update();
            appear_effect_step++;
            if (appear_effect_step == appear_effect_max_step) {
                _this.add_event_listener();
                _this.in_this_view = true;
                _this.update();
                return;
            }
            window.setTimeout(appear_effect, 33);
        };
        this.quit = function (fun) {
            fun_after_quit = fun;
            _this.remove_event_listener();
            _this.in_this_view = 0;
            quit_effect_step = -1;
            quit_effect();
        };
        var fun_after_quit;
        var quit_effect_step = -1;
        var quit_effect_max_step = 30;
        var quit_effect = function () {
            _this.update();
            quit_effect_step++;
            if (quit_effect_step == quit_effect_max_step) {
                Cookies.set("starve_nickname", _this.nickname.input.value, {
                    expires: 30
                });
                _this.nickname.style.display = "none";
                _this.server_list.style.display = "none";
                _this.langselect.style.display = "none";
                _this.all_rights_reserved.style.display = "none";
                _this.trevda.style.display = "none";
                _this.stop();
                fun_after_quit();
                return;
            }
            window.setTimeout(quit_effect, 33);
        };
        this.is_run = false;
        this.stop = function () {
            this.is_run = false;
        };
        this.run = function () {
            check_ads();
            document.getElementById("game_body").style.backgroundColor = SPRITE.GROUND[fake_world.time];
            _this.nickname.style.display = "inline-block";
            _this.server_list.style.display = "inline-block";
            _this.langselect.style.display = "inline-block";
            _this.all_rights_reserved.style.display = "inline-block";
            _this.trevda.style.display = "inline-block";
            _this.waiting = false;
            _this.is_run = true;
            quit_effect_step = -1;
            appear_effect_step = 0;
            appear_effect();
        };
        this.update_component = function (component, effect) {
            effect = (effect < 0) ? -effect : effect;
            if ((component.position & __MIDDLE_X__) === __MIDDLE_X__) {
                if ((component.position & __LEFT__) === __LEFT__)
                    component.translate.x = (canw2 + component.translate._x) - effect;
                else if ((component.position & __RIGHT__) === __RIGHT__)
                    component.translate.x = (canw2 + component.translate._x) + effect;
                else
                    component.translate.x = canw2 + component.translate._x;
            } else if ((component.position & __LEFT__) === __LEFT__)
                component.translate.x = component.translate._x - effect;
            else if ((component.position & __RIGHT__) === __RIGHT__)
                component.translate.x = (canw - component.translate._x) + effect;
            else
                component.translate.x = component.translate._x;
            if ((component.position & __MIDDLE_Y__) === __MIDDLE_Y__) {
                if ((component.position & __TOP__) === __TOP__)
                    component.translate.y = (canh2 + component.translate._y) - effect;
                else if ((component.position & __BOTTOM__) === __BOTTOM__)
                    component.translate.y = (canh2 + component.translate._y) + effect;
                else
                    component.translate.y = canh2 + component.translate._y;
            } else if ((component.position & __TOP__) === __TOP__)
                component.translate.y = component.translate._y - effect;
            else if ((component.position & __BOTTOM__) === __BOTTOM__)
                component.translate.y = (canh + component.translate._y) + effect;
            else
                component.translate.y = component.translate._y;
            if (component.style !== undefined) {
                component.style.left = Math.floor(component.translate.x) + "px";
                component.style.top = Math.floor(component.translate.y) + "px";
            }
        };
        this.update = function () {
            var effect = 0;
            if ((appear_effect_step != appear_effect_max_step) || (quit_effect_step != -1)) {
                if (appear_effect_step != appear_effect_max_step)
                    var effect = (1500 / (appear_effect_step + 1)) - 50;

                if (quit_effect_step != -1)
                    var effect = -((1750 / ((quit_effect_max_step - quit_effect_step) + 1)) - 48);

            }
            for (var i = 0; i < this.bkgd.length; i++)
                this.update_component(this.bkgd[i], effect);
            for (var i = 0; i < this.buttons.length; i++)
                this.update_component(this.buttons[i].info, effect);
            for (var i = 0; i < this.css.length; i++)
                this.update_component(this.css[i], effect);
            this.loading.translate.x = (canw - this.loading.img.width) / 2;
            this.loading.translate.y = 0;
            this.langselect.translate.x = canw - 450;
            this.langselect.translate.y = canh - 40;
            this.all_rights_reserved.translate.x = canw - 340;
            this.all_rights_reserved.translate.y = canh - 25;
            this.trevda.translate.x = canw - 320;
            this.trevda.translate.y = 80;
            if ((appear_effect_step != appear_effect_max_step) || (quit_effect_step != -1)) {
                var move_effect = 0;
                if (appear_effect_step != appear_effect_max_step) {
                    var move_effect = (1500 / (appear_effect_step + 1)) - 50;
                }
                if (quit_effect_step != -1) {
                    var move_effect = -((1750 / ((quit_effect_max_step - quit_effect_step) + 1)) - 48);
                }
                this.loading.translate.y -= (move_effect > 0) ? move_effect : -move_effect;
                this.langselect.translate.y -= (move_effect < 0) ? move_effect : -move_effect;
                this.all_rights_reserved.translate.y -= (move_effect < 0) ? move_effect : -move_effect;
            }
            this.langselect.update();
            this.all_rights_reserved.update();
            this.trevda.update();
        };
        this.create_spin = function (info) {
            var spin = document.createElement("canvas");
            var spinCtx = spin.getContext("2d");
            spin.width = 342;
            spin.height = 342;
            var start = -Math.PI / 2;
            for (var i = 0; i < info.length; i++) {
                var col = info[i][0];
                var deg = (info[i][1] * Math.PI) / 180;
                spinCtx.beginPath();
                spinCtx.arc(171, 171, 170, start, start + deg, false);
                spinCtx.lineTo(171, 171);
                spinCtx.fillStyle = col;
                spinCtx.fill();
                start += deg;
            }
            return spin;
        };
        this.generate_new_nickname = function () {
            this.new_nickname = document.getElementById("account_nickname_input").value;
            if (this.new_nickname !== this.previous_new_nickname) {
                this.previous_new_nickname = this.new_nickname;
                this.new_nickname_img = gui_render_text(this.new_nickname, "\'Baloo Paaji\', sans-serif", "#EFE4B4", 45, 550);
            }
        };
        this.draw = function () {
            draw_fake_world();
            ui.xp = Utils.lerp(ui.xp, ui.xp_dest, 0.03);
            this.bkgd[LEVEL_GAUGE].translate.x = (this.bkgd[0].translate.x + -72) + (165 * ui.xp);
            this.bkgd[LEVEL_GAUGE].translate._x = this.bkgd[LEVEL_GAUGE].translate.x;
            this.bkgd[LEVEL_GAUGE].translate.y = this.bkgd[0].translate.y + 30;
            this.bkgd[LEVEL_GAUGE].translate._y = this.bkgd[LEVEL_GAUGE].translate.y;
            for (var i = 2; i < this.bkgd.length; i++) {
                if (this.bkgd[i].active === __DISPLAY__)
                    this.bkgd[i].draw(ctx);

            }
            var remains = this.kit - Date.now();
            if (remains > 0) {
                var min = Math.floor(remains / 60000);
                var hour = Math.floor(min / 60);
                min %= 60;
                if (min !== this.previous_kit_min) {
                    this.previous_kit_min = min;
                    min = (min < 10) ? ("0" + min) : ("" + min);
                    _this.kit_img_min = gui_render_text(min, "\'Baloo Paaji\', sans-serif", "#EFE4B4", 80, 200);
                }
                if (hour !== this.previous_kit_hour) {
                    this.previous_kit_hour = hour;
                    hour = (hour < 10) ? ("0" + hour) : ("" + hour);
                    _this.kit_img_hour = gui_render_text(hour, "\'Baloo Paaji\', sans-serif", "#EFE4B4", 80, 200);
                }
                var remain_box = this.bkgd[BAG_REMAIN_BOX];
                remain_box.draw(ctx);
                var img = this.kit_img_hour;
                ctxDrawImage(ctx, img, (remain_box.translate.x - (img.width / 4)) + 182, (remain_box.translate.y - (img.height / 4)) + 40, img.width / 2, img.height / 2);
                var img = this.kit_img_min;
                ctxDrawImage(ctx, img, (remain_box.translate.x - (img.width / 4)) + 251, (remain_box.translate.y - (img.height / 4)) + 40, img.width / 2, img.height / 2);
            }
            var remains = this.privateServerTime - Date.now();
            if (remains > 0) {
                var min = Math.floor(remains / 60000);
                var hour = Math.floor(min / 60);
                var day = Math.floor(hour / 24);
                min %= 60;
                hour %= 24;
                if (min !== this.previous_privateServerTime_min) {
                    this.previous_privateServerTime_min = min;
                    min = (min < 10) ? ("0" + min) : ("" + min);
                    _this.privateServerTime_img_min = gui_render_text(min, "\'Baloo Paaji\', sans-serif", "#EFE4B4", 80, 200);
                }
                if (hour !== this.previous_privateServerTime_hour) {
                    this.previous_privateServerTime_hour = hour;
                    hour = (hour < 10) ? ("0" + hour) : ("" + hour);
                    _this.privateServerTime_img_hour = gui_render_text(hour, "\'Baloo Paaji\', sans-serif", "#EFE4B4", 80, 200);
                }
                if (day !== this.previous_privateServerTime_day) {
                    this.previous_privateServerTime_day = day;
                    day = (day < 10) ? ("0" + day) : ("" + day);
                    _this.privateServerTime_img_day = gui_render_text(day, "\'Baloo Paaji\', sans-serif", "#EFE4B4", 80, 200);
                }
                var remain_box = this.bkgd[SERVER_REMAIN_BOX];
                remain_box.draw(ctx);
                var img = this.privateServerTime_img_day;
                ctxDrawImage(ctx, img, (remain_box.translate.x - (img.width / 4)) + 113, (remain_box.translate.y - (img.height / 4)) + 40, img.width / 2, img.height / 2);
                var img = this.privateServerTime_img_hour;
                ctxDrawImage(ctx, img, (remain_box.translate.x - (img.width / 4)) + 182, (remain_box.translate.y - (img.height / 4)) + 40, img.width / 2, img.height / 2);
                var img = this.privateServerTime_img_min;
                ctxDrawImage(ctx, img, (remain_box.translate.x - (img.width / 4)) + 251, (remain_box.translate.y - (img.height / 4)) + 40, img.width / 2, img.height / 2);
            }
            if ((this.current_view & __GAME__) === __GAME__)
                this.buttons[GAME_BUTTON].info.state = BUTTON_CLICK;
            else if ((this.current_view & __LEADERBOARD__) === __LEADERBOARD__)
                this.buttons[LEADERBOARD_BUTTON].info.state = BUTTON_CLICK;
            else if ((this.current_view & __COSMETICS__) === __COSMETICS__)
                this.buttons[COSMETICS_BUTTON].info.state = BUTTON_CLICK;
            else if ((this.current_view & __PROFILE__) === __PROFILE__)
                this.buttons[PROFILE_BUTTON].info.state = BUTTON_CLICK;
            else if ((this.current_view & __TUTORIAL__) === __TUTORIAL__)
                this.buttons[TUTORIAL_BUTTON].info.state = BUTTON_CLICK;
            else if ((this.current_view & __LOGIN__) === __LOGIN__)
                this.buttons[LOGIN_BUTTON].info.state = BUTTON_CLICK;
            else if ((this.current_view & __SHOP__) === __SHOP__)
                this.buttons[SHOP_BUTTON].info.state = BUTTON_CLICK;
            else if ((this.current_view & __SPIN_1__) === __SPIN_1__)
                this.buttons[SHOP_BUTTON].info.state = BUTTON_CLICK;
            else if ((this.current_view & __SPIN_2__) === __SPIN_2__)
                this.buttons[SHOP_BUTTON].info.state = BUTTON_CLICK;
            else if ((this.current_view & __SPIN_3__) === __SPIN_3__)
                this.buttons[SHOP_BUTTON].info.state = BUTTON_CLICK;
            else if ((this.current_view & __SPIN_4__) === __SPIN_4__)
                this.buttons[SHOP_BUTTON].info.state = BUTTON_CLICK;
            else if ((this.current_view & __SPIN_5__) === __SPIN_5__)
                this.buttons[SHOP_BUTTON].info.state = BUTTON_CLICK;
            else if ((this.current_view & __SPIN_6__) === __SPIN_6__)
                this.buttons[SHOP_BUTTON].info.state = BUTTON_CLICK;
            else if ((this.current_view & __SKIN__) === __SKIN__)
                this.buttons[COSMETICS_BUTTON].info.state = BUTTON_CLICK;
            else if ((this.current_view & __BAG__) === __BAG__)
                this.buttons[COSMETICS_BUTTON].info.state = BUTTON_CLICK;
            else if ((this.current_view & __CRATE__) === __CRATE__)
                this.buttons[COSMETICS_BUTTON].info.state = BUTTON_CLICK;
            else if ((this.current_view & __BOOK__) === __BOOK__)
                this.buttons[COSMETICS_BUTTON].info.state = BUTTON_CLICK;
            else if ((this.current_view & __ACCESSORY__) === __ACCESSORY__)
                this.buttons[COSMETICS_BUTTON].info.state = BUTTON_CLICK;
            else if ((this.current_view & __LOOT__) === __LOOT__)
                this.buttons[COSMETICS_BUTTON].info.state = BUTTON_CLICK;
            else if ((this.current_view & __SERVER_LOCATION__) === __SERVER_LOCATION__)
                this.buttons[SERVER_BUTTON].info.state = BUTTON_CLICK;
            else if ((this.current_view & __SERVER_DURATION__) === __SERVER_DURATION__)
                this.buttons[SERVER_BUTTON].info.state = BUTTON_CLICK;
            else if ((this.current_view & __SERVER_ACCESS__) === __SERVER_ACCESS__)
                this.buttons[SERVER_BUTTON].info.state = BUTTON_CLICK;
            else if ((this.current_view & __SEASON5__) === __SEASON5__)
                this.buttons[PROFILE_BUTTON].info.state = BUTTON_CLICK;

            if ((this.current_view & __LEADERBOARD__) === __LEADERBOARD__) {
                if (this.leaderboard_mode === this.LEADERBOARD_TOTAL) {
                    this.leaderboard_range = this.LEADERBOARD_ALL;
                    this.buttons[this.LEADERBOARD_ALL].info.active = __HIDE__;
                    this.buttons[this.LEADERBOARD_WEEK].info.active = __HIDE__;
                    this.buttons[this.LEADERBOARD_TODAY].info.active = __HIDE__;
                } else {
                    this.buttons[this.LEADERBOARD_ALL].info.active = __DISPLAY__;
                    this.buttons[this.LEADERBOARD_WEEK].info.active = __DISPLAY__;
                    this.buttons[this.LEADERBOARD_TODAY].info.active = __DISPLAY__;
                }
                if (this.leaderboard_mode === this.LEADERBOARD_NORMAL)
                    this.buttons[this.LEADERBOARD_NORMAL].info.state = BUTTON_CLICK;
                else if (this.leaderboard_mode === this.LEADERBOARD_VAMPIRE)
                    this.buttons[this.LEADERBOARD_VAMPIRE].info.state = BUTTON_CLICK;
                else if (this.leaderboard_mode === this.LEADERBOARD_TOTAL)
                    this.buttons[this.LEADERBOARD_TOTAL].info.state = BUTTON_CLICK;
                else if (this.leaderboard_mode === this.LEADERBOARD_ZOMBIE)
                    this.buttons[this.LEADERBOARD_ZOMBIE].info.state = BUTTON_CLICK;
                else if (this.leaderboard_mode === this.LEADERBOARD_FOREST)
                    this.buttons[this.LEADERBOARD_FOREST].info.state = BUTTON_CLICK;

                if (this.leaderboard_range === this.LEADERBOARD_ALL)
                    this.buttons[this.LEADERBOARD_ALL].info.state = BUTTON_CLICK;
                else if (this.leaderboard_range === this.LEADERBOARD_WEEK)
                    this.buttons[this.LEADERBOARD_WEEK].info.state = BUTTON_CLICK;
                else if (this.leaderboard_range === this.LEADERBOARD_TODAY)
                    this.buttons[this.LEADERBOARD_TODAY].info.state = BUTTON_CLICK;

                if (this.leaderboard_sorted === this.LEADERBOARD_KILL)
                    this.buttons[this.LEADERBOARD_KILL].info.state = BUTTON_CLICK;
                else if (this.leaderboard_sorted === this.LEADERBOARD_SCORE)
                    this.buttons[this.LEADERBOARD_SCORE].info.state = BUTTON_CLICK;
                else if (this.leaderboard_sorted === this.LEADERBOARD_TIME)
                    this.buttons[this.LEADERBOARD_TIME].info.state = BUTTON_CLICK;

                if (this.leaderboard_season === this.LEADERBOARD_SEASON1)
                    this.buttons[this.LEADERBOARD_SEASON1].info.state = BUTTON_CLICK;
                else if (this.leaderboard_season === this.LEADERBOARD_SEASON2)
                    this.buttons[this.LEADERBOARD_SEASON2].info.state = BUTTON_CLICK;
                else if (this.leaderboard_season === this.LEADERBOARD_SEASON3)
                    this.buttons[this.LEADERBOARD_SEASON3].info.state = BUTTON_CLICK;
                else if (this.leaderboard_season === this.LEADERBOARD_SEASON4)
                    this.buttons[this.LEADERBOARD_SEASON4].info.state = BUTTON_CLICK;
                else if (this.leaderboard_season === this.LEADERBOARD_SEASON5)
                    this.buttons[this.LEADERBOARD_SEASON5].info.state = BUTTON_CLICK;

            }
            if ((this.current_view & __PROFILE__) === __PROFILE__) {
                if (this.current_mode_score === -1)
                    this.buttons[SCORE_MODE_TOTAL].info.state = BUTTON_CLICK;
                else if (this.current_mode_score === WORLD.MODE_PVP)
                    this.buttons[SCORE_MODE_NORMAL].info.state = BUTTON_CLICK;
                else if (this.current_mode_score === WORLD.MODE_ZOMBIES)
                    this.buttons[SCORE_MODE_ZOMBIE].info.state = BUTTON_CLICK;
                else if (this.current_mode_score === WORLD.MODE_VAMPIRES)
                    this.buttons[SCORE_MODE_VAMPIRE].info.state = BUTTON_CLICK;
                else if (this.current_mode_score === WORLD.MODE_LEGACY)
                    this.buttons[SCORE_MODE_FOREST].info.state = BUTTON_CLICK;

                if (this.profile_season === 0)
                    this.buttons[SCORE_MODE_SEASON1].info.state = BUTTON_CLICK;
                else if (this.profile_season === 1)
                    this.buttons[SCORE_MODE_SEASON2].info.state = BUTTON_CLICK;
                else if (this.profile_season === 2)
                    this.buttons[SCORE_MODE_SEASON3].info.state = BUTTON_CLICK;
                else if (this.profile_season === 3)
                    this.buttons[SCORE_MODE_SEASON4].info.state = BUTTON_CLICK;
                else if (this.profile_season === 4)
                    this.buttons[SCORE_MODE_SEASON5].info.state = BUTTON_CLICK;

            }
            if (((this.current_view & __GAME__) === __GAME__) && (client.privateServer === 0)) {
                if (this.buttons[NORMAL_MODE].in_button(mouse.pos))
                    this.buttons[NORMAL_MODE].hint = Math.min(1, this.buttons[NORMAL_MODE].hint + (delta * 1.5));
                else
                    this.buttons[NORMAL_MODE].hint = Math.max(0, this.buttons[NORMAL_MODE].hint - (delta * 1.5));
                if (this.buttons[FOREST_MODE].in_button(mouse.pos))
                    this.buttons[FOREST_MODE].hint = Math.min(1, this.buttons[FOREST_MODE].hint + (delta * 1.5));
                else
                    this.buttons[FOREST_MODE].hint = Math.max(0, this.buttons[FOREST_MODE].hint - (delta * 1.5));
                if (this.buttons[MODE_COMMUNITY].in_button(mouse.pos))
                    this.buttons[MODE_COMMUNITY].hint = Math.min(1, this.buttons[MODE_COMMUNITY].hint + (delta * 1.5));
                else
                    this.buttons[MODE_COMMUNITY].hint = Math.max(0, this.buttons[MODE_COMMUNITY].hint - (delta * 1.5));
                if (this.buttons[MODE_EXPERIMENTAL].in_button(mouse.pos))
                    this.buttons[MODE_EXPERIMENTAL].hint = Math.min(1, this.buttons[MODE_EXPERIMENTAL].hint + (delta * 1.5));
                else
                    this.buttons[MODE_EXPERIMENTAL].hint = Math.max(0, this.buttons[MODE_EXPERIMENTAL].hint - (delta * 1.5));
                if (this.buttons[ZOMBIE_MODE].in_button(mouse.pos))
                    this.buttons[ZOMBIE_MODE].hint = Math.min(1, this.buttons[ZOMBIE_MODE].hint + (delta * 1.5));
                else
                    this.buttons[ZOMBIE_MODE].hint = Math.max(0, this.buttons[ZOMBIE_MODE].hint - (delta * 1.5));
                if (this.buttons[VAMPIRE_MODE].in_button(mouse.pos))
                    this.buttons[VAMPIRE_MODE].hint = Math.min(1, this.buttons[VAMPIRE_MODE].hint + (delta * 1.5));
                else
                    this.buttons[VAMPIRE_MODE].hint = Math.max(0, this.buttons[VAMPIRE_MODE].hint - (delta * 1.5));
            }
            var _r = 1;
            if ((this.current_view & (((((__SPIN_1__ | __SPIN_2__) | __SPIN_3__) | __SPIN_4__) | __SPIN_5__) | __SPIN_6__)) > 1) {
                var img = IMAGES.ARROW_SPIN;
                ctx.save();
                ctx.translate(canw2, SPIN_TOP + (img.height / 4));
                if (this.spin === 1) {
                    this.spin_effect += delta / 3;
                    _r = this.spin_target - (100 / Math.pow(1 + this.spin_effect, 1 + this.spin_effect));
                    ctx.rotate(_r);
                }
                ctxDrawImage(ctx, img, -img.width / 4, -img.height / 4, img.width / 2, img.height / 2);
                ctx.restore();
            }
            if (client.privateServer === 0) {
                if (client.current_mode === WORLD.MODE_PVP)
                    this.buttons[NORMAL_MODE].info.state = BUTTON_CLICK;
                else if (client.current_mode === WORLD.MODE_LEGACY)
                    this.buttons[FOREST_MODE].info.state = BUTTON_CLICK;
                else if (client.current_mode === WORLD.MODE_ZOMBIES)
                    this.buttons[ZOMBIE_MODE].info.state = BUTTON_CLICK;
                else if (client.current_mode === WORLD.MODE_VAMPIRES)
                    this.buttons[VAMPIRE_MODE].info.state = BUTTON_CLICK;
                else if (client.current_mode === WORLD.MODE_COMMUNITY)
                    this.buttons[MODE_COMMUNITY].info.state = BUTTON_CLICK;
                else if (client.current_mode === WORLD.MODE_EXPERIMENTAL)
                    this.buttons[MODE_EXPERIMENTAL].info.state = BUTTON_CLICK;

            }
            for (var i = 1; i < this.buttons.length; i++) {
                if (this.buttons[i].info.active === __DISPLAY__)
                    this.buttons[i].draw(ctx);

            }
            this.bkgd[0].draw(ctx);
            if ((this.current_view & (__CHANGE_NICKNAME0__ | __CHANGE_NICKNAME1__)) > 0) {
                var img = this.new_nickname_img;
                ctxDrawImage(ctx, img, canw2 - (img.width / 4), 138, img.width / 2, img.height / 2);
            }
            var lvl = Math.max(1, Math.min(18, Math.floor((ui.lvl + 3) / 2)));
            this.bkgd[lvl].active = __DISPLAY__;
            this.bkgd[lvl].draw(ctx);
            this.bkgd[lvl].active = __HIDE__;
            this.buttons[0].draw(ctx);
            if ((this.current_view & ((((__COSMETICS__ | __BAG__) | __BOOK__) | __SKIN__) | __ACCESSORY__)) > 1) {
                var _x = ((this.current_view & (((__BAG__ | __BOOK__) | __SKIN__) | __ACCESSORY__)) > 1) ? -190 : 0;
                var img = sprite[SPRITE.BAG][this.bag][this.day_mode];
                ctxDrawImage(ctx, img, (canw2 - (img.width / 4)) + _x, 183, img.width / 2, img.height / 2);
                this.breath = (this.breath + (delta * 1000)) % 2000;
                var v = (4.5 * (this.breath < 1000)) ? (this.breath / 1000) : ((2000 - this.breath) / 1000);
                var img = sprite[SPRITE.BOOK][this.book][this.day_mode];
                ctxDrawImage(ctx, img, (((canw2 - (img.width / 4)) - 62) + v) + _x, 240, img.width / 2, img.height / 2);
                var img = sprite[SPRITE.HAND][this.skin][this.day_mode];
                ctxDrawImage(ctx, img, (((canw2 - (img.width / 4)) - 54) + v) + _x, 272, img.width / 2, img.height / 2);
                ctxDrawImage(ctx, img, (((canw2 - (img.width / 4)) + 54) - v) + _x, 272, img.width / 2, img.height / 2);
                var img = sprite[SPRITE.BODY][this.skin][this.day_mode];
                ctxDrawImage(ctx, img, (canw2 - (img.width / 4)) + _x, 222, img.width / 2, img.height / 2);
                var img = sprite[SPRITE.ACCESSORY][this.accessory][this.day_mode];
                ctxDrawImage(ctx, img, (canw2 - (img.width / 4)) + _x, 222, img.width / 2, img.height / 2);
            }
            if ((this.current_view & __COSMETICS__) === __COSMETICS__) {
                var img = sprite[SPRITE.CRATE][this.crate][this.day_mode];
                ctxDrawImage(ctx, img, (canw2 - (img.width / 4)) - 61, 406 - (img.height / 4), img.width / 2, img.height / 2);
                var img = sprite[SPRITE.CRATE][this.dead][this.day_mode];
                ctxDrawImage(ctx, img, (canw2 - (img.width / 4)) + 53, 406 - (img.height / 4), img.width / 2, img.height / 2);
            }
            if ((this.current_view & __CRATE__) === __CRATE__) {
                var img = sprite[SPRITE.CRATE][this.dead][this.day_mode];
                ctxDrawImage(ctx, img, (canw2 - (img.width / 4)) - 200, 268 - (img.height / 4), img.width / 2, img.height / 2);
            }
            if ((this.current_view & __LOOT__) === __LOOT__) {
                var img = sprite[SPRITE.CRATE][this.crate][this.day_mode];
                ctxDrawImage(ctx, img, (canw2 - (img.width / 4)) - 200, 268 - (img.height / 4), img.width / 2, img.height / 2);
            }
            if ((this.current_view & (((((__BAG__ | __BOOK__) | __SKIN__) | __ACCESSORY__) | __CRATE__) | __LOOT__)) > 1) {
                for (var i = 1; i < this.buttons.length; i++) {
                    if ((this.buttons[i].view & this.current_view) === 0)
                        continue;

                    var button = this.buttons[i].info;
                    if (button.cosmeticId >= 0) {
                        var img = button.cosmeticType[button.cosmeticId].day;
                        ctxDrawImage(ctx, img, (button.translate.x - (img.width / 8)) + 44.5, (button.translate.y - (img.height / 8)) + 45.5, img.width / 4, img.height / 4);
                        if (button.unlocked !== 1) {
                            var img = IMAGES.RED_LOCKED;
                            ctxDrawImage(ctx, img, (button.translate.x - (img.width / 4)) + 44.5, (button.translate.y - (img.height / 4)) + 44.5, img.width / 2, img.height / 2);
                        }
                    }
                }
                var img = this.cosmetic_name;
                ctxDrawImage(ctx, img, canw2 - 312, 375, img.width / 2, img.height / 2);
                var img = this.cosmetic_author;
                ctxDrawImage(ctx, img, canw2 - 312, 395, img.width / 2, img.height / 2);
            }
            if (this.bread !== this.previous_bread) {
                this.previous_bread = this.bread;
                this.bread_img = gui_render_text("" + this.bread, "\'Baloo Paaji\', sans-serif", "#EFE4B4", 60, 250);
            }
            ctxDrawImage(ctx, this.bread_img, this.bkgd[0].translate.x + 350, 15, this.bread_img.w2, this.bread_img.h2);
            if (this.lvl !== this.previous_lvl) {
                this.previous_lvl = this.lvl;
                this.lvl_img = gui_render_text("LVL " + (this.lvl + 1), "\'Baloo Paaji\', sans-serif", "#EFE4B4", 50, 250, undefined, 30, 24, undefined, undefined, undefined, undefined, "#3F3019", 20);
            }
            ctxDrawImage(ctx, this.lvl_img, this.bkgd[0].translate.x + 94, 0, this.lvl_img.w2, this.lvl_img.h2);
            if (client.privateServer === 0) {
                var hint = this.buttons[NORMAL_MODE].hint;
                if (hint > 0) {
                    var img = IMAGES.NORMAL_MODE_HOVER;
                    ctxDrawImage(ctx, img, canw2 - (img.width / 4), -36 - ((img.height * Utils.ease_in_out_quad(1 - hint)) / 2), img.width / 2, img.height / 2);
                }
                var hint = this.buttons[FOREST_MODE].hint;
                if (hint > 0) {
                    var img = IMAGES.FOREST_MODE_HOVER;
                    ctxDrawImage(ctx, img, canw2 - (img.width / 4), -36 - ((img.height * Utils.ease_in_out_quad(1 - hint)) / 2), img.width / 2, img.height / 2);
                }
                var hint = this.buttons[MODE_COMMUNITY].hint;
                if (hint > 0) {
                    var img = IMAGES.MODE_COMMUNITY_HOVER;
                    ctxDrawImage(ctx, img, canw2 - (img.width / 4), -36 - ((img.height * Utils.ease_in_out_quad(1 - hint)) / 2), img.width / 2, img.height / 2);
                }
                var hint = this.buttons[MODE_EXPERIMENTAL].hint;
                if (hint > 0) {
                    var img = IMAGES.MODE_EXPERIMENTAL_HOVER;
                    ctxDrawImage(ctx, img, canw2 - (img.width / 4), -36 - ((img.height * Utils.ease_in_out_quad(1 - hint)) / 2), img.width / 2, img.height / 2);
                }
                var hint = this.buttons[VAMPIRE_MODE].hint;
                if (hint > 0) {
                    var img = IMAGES.VAMPIRE_MODE_HOVER;
                    ctxDrawImage(ctx, img, canw2 - (img.width / 4), -36 - ((img.height * Utils.ease_in_out_quad(1 - hint)) / 2), img.width / 2, img.height / 2);
                }
                var hint = this.buttons[ZOMBIE_MODE].hint;
                if (hint > 0) {
                    var img = IMAGES.ZOMBIE_MODE_HOVER;
                    ctxDrawImage(ctx, img, canw2 - (img.width / 4), -36 - ((img.height * Utils.ease_in_out_quad(1 - hint)) / 2), img.width / 2, img.height / 2);
                }
            }
            if ((this.spin === 1) && (Math.abs(_r - this.spin_target) < 0.006)) {
                ctx.globalAlpha = Math.min(1, this.spin_win_effect * 3);
                var img = IMAGES.SPIN_LIGHT;
                ctx.save();
                ctx.translate(canw2, 260);
                this.spin_win_effect += delta;
                ctx.rotate(this.spin_win_effect);
                ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2, img.width, img.height);
                ctx.restore();
                var v = 1.05 + (0.05 * Math.sin(this.spin_win_effect * 5));
                if (this.spin_type === 0) {
                    img = COSMETICS.SKIN[this.spin_win].day;
                    var w = v * img.width;
                    var h = v * img.height;
                    ctxDrawImage(ctx, img, canw2 - (w / 2), 260 - (h / 2), w, h);
                } else if (this.spin_type === 1) {
                    img = COSMETICS.SKIN[0].day;
                    var w = v * img.width;
                    var h = v * img.height;
                    ctxDrawImage(ctx, img, canw2 - (w / 2), 260 - (h / 2), w, h);
                    img = COSMETICS.ACCESSORY[this.spin_win].day;
                    var w = v * img.width;
                    var h = v * img.height;
                    ctxDrawImage(ctx, img, canw2 - (w / 2), 260 - (h / 2), w, h);
                } else if (this.spin_type === 2) {
                    img = COSMETICS.BAG[this.spin_win].day;
                    var w = v * img.width;
                    var h = v * img.height;
                    ctxDrawImage(ctx, img, canw2 - (w / 2), 180 - (h / 2), w, h);
                    img = COSMETICS.SKIN[0].day;
                    var w = v * img.width;
                    var h = v * img.height;
                    ctxDrawImage(ctx, img, canw2 - (w / 2), 260 - (h / 2), w, h);
                } else if (this.spin_type === 3) {
                    img = COSMETICS.BOOK[this.spin_win].day;
                    var w = v * img.width;
                    var h = v * img.height;
                    ctx.save();
                    ctx.translate(canw2, 260);
                    ctx.rotate(Math.PI);
                    ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
                    ctx.restore();
                } else if (this.spin_type === 4) {
                    img = COSMETICS.CRATE[this.spin_win].day;
                    var w = v * img.width;
                    var h = v * img.height;
                    ctxDrawImage(ctx, img, canw2 - (w / 2), 260 - (h / 2), w, h);
                }
                var img = this.spin_name;
                ctxDrawImage(ctx, img, canw2 - (img.width / 4), 340, img.width / 2, img.height / 2);
                var img = this.spin_author;
                ctxDrawImage(ctx, img, canw2 - (img.width / 4), 365, img.width / 2, img.height / 2);
                if (this.spin_win_effect > 6) {
                    this.spin = 0;
                    select_subview(__SHOP__);
                }
                ctx.globalAlpha = 1;
            }
            user.alert.draw("#FFF", "#000");
            if (_this.waiting)
                this.loading.draw();

        };
        var COUNTER = 0;
        var __GAME__ = Math.pow(2, COUNTER++);
        var __PROFILE__ = Math.pow(2, COUNTER++);
        this.__PROFILE__ = __PROFILE__;
        var __LOGIN__ = Math.pow(2, COUNTER++);
        var __COSMETICS__ = Math.pow(2, COUNTER++);
        var __SHOP__ = Math.pow(2, COUNTER++);
        var __TUTORIAL__ = Math.pow(2, COUNTER++);
        var __LEADERBOARD__ = Math.pow(2, COUNTER++);
        var __BUY__ = Math.pow(2, COUNTER++);
        this.__BUY__ = __BUY__;
        var __LOCKED_SKIN__ = Math.pow(2, COUNTER++);
        var __LOCKED_ACC__ = Math.pow(2, COUNTER++);
        var __SPIN_1__ = Math.pow(2, COUNTER++);
        var __SPIN_2__ = Math.pow(2, COUNTER++);
        var __SPIN_3__ = Math.pow(2, COUNTER++);
        var __SPIN_4__ = Math.pow(2, COUNTER++);
        var __SPIN_5__ = Math.pow(2, COUNTER++);
        var __SPIN_6__ = Math.pow(2, COUNTER++);
        var __SKIN__ = Math.pow(2, COUNTER++);
        var __CRATE__ = Math.pow(2, COUNTER++);
        var __BAG__ = Math.pow(2, COUNTER++);
        var __BOOK__ = Math.pow(2, COUNTER++);
        var __ACCESSORY__ = Math.pow(2, COUNTER++);
        var __LOOT__ = Math.pow(2, COUNTER++);
        var __CHANGE_NICKNAME1__ = Math.pow(2, COUNTER++);
        var __CHANGE_NICKNAME0__ = Math.pow(2, COUNTER++);
        var __SERVER_LOCATION__ = Math.pow(2, COUNTER++);
        this.__SERVER_LOCATION__ = __SERVER_LOCATION__;
        var __SERVER_DURATION__ = Math.pow(2, COUNTER++);
        this.__SERVER_DURATION__ = __SERVER_DURATION__;
        var __SERVER_ACCESS__ = Math.pow(2, COUNTER++);
        this.__SERVER_ACCESS__ = __SERVER_ACCESS__;
        var __SEASON5__ = Math.pow(2, COUNTER++);
        this.current_view = __GAME__;

        function update_subview(view, mode, _css) {
            for (var i = 0; i < _this.bkgd.length; i++) {
                if ((_this.bkgd[i].view & view) !== 0)
                    _this.bkgd[i].active = mode;

            }
            for (var i = 0; i < _this.buttons.length; i++) {
                if ((_this.buttons[i].view & view) !== 0)
                    _this.buttons[i].info.active = mode;

            }
            for (var i = 0; i < _this.css.length; i++) {
                if ((_this.css[i].view & view) !== 0)
                    _this.css[i].style.display = _css;

            }
        };
        var assetInfo = [];

        function addAsset(assetName, assetSize) {
            assetName = assetName.replace("Xday", "day");
            assetName = assetName.replace("Xnight", "night");
            
            assetInfo.push([assetName, assetSize]);
        };

        function detectRedirectedAsset(assetURL) {
            assetURL = assetURL.replace("http://starve.io", "https://starve.io");
            var xhr = new XMLHttpRequest;
            xhr.open('HEAD', assetURL, true);
            xhr.onreadystatechange = function () {
                if (xhr.readyState === 4) {
                    if (xhr.status === 200) {
                        var size = Number(xhr.getResponseHeader('Content-Length'));
                        if (size > 0)
                            addAsset(assetURL, size);

                    }
                }
            };
            xhr.send(null);
        };

        function detectCheat() {};

        function correct_selected_skin() {
            var ct = Number(Cookies.get("starve_crate"));
            var dd = Number(Cookies.get("starve_dead"));
            var bk = Number(Cookies.get("starve_book"));
            var bg = Number(Cookies.get("starve_bag"));
            var sk = Number(Cookies.get("starve_skin"));
            var ac = Number(Cookies.get("starve_accessory"));
            if (!(ui.unlock.skin[ui.skin] > 0))
                ui.skin = !(ui.unlock.skin[sk] > 0) ? 0 : sk;

            if (!(ui.unlock.book[ui.book] > 0))
                ui.book = !(ui.unlock.book[bk] > 0) ? 0 : bk;

            if (!(ui.unlock.dead[ui.dead] > 0))
                ui.dead = !(ui.unlock.dead[dd] > 0) ? 0 : dd;

            if (!(ui.unlock.crate[ui.crate] > 0))
                ui.crate = !(ui.unlock.crate[ct] > 0) ? 0 : ct;

            if (!(ui.unlock.accessory[ui.accessory] > 0))
                ui.accessory = !(ui.unlock.accessory[ac] > 0) ? 0 : ac;

            if (!(ui.unlock.bag[ui.bag] > 0))
                ui.bag = !(ui.unlock.bag[bg] > 0) ? 0 : bg;

        };

        function select_subview(view) {
            if (_this.in_this_view === false)
                return;

            update_subview(__LOCKED_SKIN__, __HIDE__, "none");
            update_subview(__LOCKED_ACC__, __HIDE__, "none");
            correct_selected_skin();
            if ((view === _this.current_view) || (_this.spin >= 1))
                return;

            if ((((((view === __GAME__) || (view === __SHOP__)) || (view === __PROFILE__)) || (view === __LEADERBOARD__)) || (view === __COSMETICS__)) || (view === __TUTORIAL__))
                _this.trevda.style.display = "inline-block";
            else
                _this.trevda.style.display = "none";
            update_subview(_this.current_view, __HIDE__, "none");
            _this.current_view = view;
            update_subview(_this.current_view, __DISPLAY__, "inline-block");
        };
        this.select_subview = select_subview;

        function play_after() {
            correct_selected_skin();
            client.connect();
        };

        function request(get, callbackSuccess, callbackFailure) {
            const xhr = new XMLHttpRequest;
            xhr.open('GET', get);
            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
            xhr.onreadystatechange = function () {
                if ((this.readyState == 4) && (this.status == 200)) {
                    if (callbackSuccess !== undefined)
                        callbackSuccess(xhr.responseText);

                } else if (this.readyState == 4) {
                    if (callbackFailure !== undefined)
                        callbackFailure();

                }
            };
            xhr.send();
        };
        this.play_game = function () {
            if (_this.waiting === false) {
                user.reconnect.enabled = false;
                _this.waiting = true;

                play_after();
            }
        };
        var __LEFT__ = 1;
        var __RIGHT__ = 2;
        var __TOP__ = 4;
        var __BOTTOM__ = 8;
        var __MIDDLE_X__ = 16;
        var __MIDDLE_Y__ = 32;
        var __NO_HD__ = 0;
        var __HD__ = 1;
        var __NO_BREATH__ = 0;
        var __BREATH__ = 1;
        var __HIDE__ = 0;
        var __DISPLAY__ = 1;
        if (window.innerWidth < 1300) {
            this.nickname = {
                id: document.getElementById("nickname_block"),
                style: document.getElementById("nickname_block").style,
                input: document.getElementById("nickname_input"),
                active: __DISPLAY__,
                position: __TOP__ | __LEFT__,
                view: __GAME__,
                translate: {
                    x: 0,
                    y: 0,
                    _x: 200,
                    _y: 184
                }
            };
        } else {
            this.nickname = {
                id: document.getElementById("nickname_block"),
                style: document.getElementById("nickname_block").style,
                input: document.getElementById("nickname_input"),
                active: __DISPLAY__,
                position: __TOP__ | __MIDDLE_X__,
                view: __GAME__,
                translate: {
                    x: 0,
                    y: 0,
                    _x: -180,
                    _y: 184
                }
            };
        }
        this.nickname.id.addEventListener("keyup", function (event) {
            event.preventDefault();
            if (((event.keyCode == 13) && !_this.waiting) && !_this.settings)
                _this.play_game();

        });
        this.nickname.input.value = Cookies.get("starve_nickname") ? Cookies.get("starve_nickname") : "";
        this.account_nickname = {
            id: document.getElementById("account_nickname_block"),
            style: document.getElementById("account_nickname_block").style,
            input: document.getElementById("account_nickname_input"),
            active: __HIDE__,
            position: __TOP__ | __MIDDLE_X__,
            view: __PROFILE__,
            translate: {
                x: 0,
                y: 0,
                _x: -122,
                _y: 110
            }
        };
        if (window.innerWidth < 1300)
            this.server_list = {
                id: document.getElementById("servselect"),
                style: document.getElementById("servselect").style,
                active: __DISPLAY__,
                position: __TOP__ | __LEFT__,
                view: __GAME__,
                translate: {
                    x: 0,
                    y: 0,
                    _x: 208,
                    _y: 225
                }
            };
        else
            this.server_list = {
                id: document.getElementById("servselect"),
                style: document.getElementById("servselect").style,
                active: __DISPLAY__,
                position: __TOP__ | __MIDDLE_X__,
                view: __GAME__,
                translate: {
                    x: 0,
                    y: 0,
                    _x: -180,
                    _y: 225
                }
            };
        this.leaderboard = {
            id: document.getElementById("leaderboard"),
            style: document.getElementById("leaderboard").style,
            active: __HIDE__,
            position: __TOP__ | __MIDDLE_X__,
            view: __LEADERBOARD__,
            translate: {
                x: 0,
                y: 0,
                _x: -294.5,
                _y: 190
            }
        };
        this.stats_box = {
            id: document.getElementById("stats_box"),
            style: document.getElementById("stats_box").style,
            active: __HIDE__,
            position: __TOP__ | __MIDDLE_X__,
            view: __PROFILE__,
            translate: {
                x: 0,
                y: 0,
                _x: 125,
                _y: 187
            }
        };
        this.serverAddressBlock = {
            id: document.getElementById("serverAddressBlock"),
            style: document.getElementById("serverAddressBlock").style,
            input: document.getElementById("serverAddressInput"),
            active: __HIDE__,
            position: __TOP__ | __MIDDLE_X__,
            view: __SERVER_ACCESS__,
            translate: {
                x: 0,
                y: 0,
                _x: -220,
                _y: 350
            }
        };
        COUNTER = 0;
        this.css = [];
        this.css[COUNTER++] = this.nickname;
        this.css[COUNTER++] = this.server_list;
        this.css[COUNTER++] = this.leaderboard;
        this.css[COUNTER++] = this.account_nickname;
        this.css[COUNTER++] = this.stats_box;
        this.css[COUNTER++] = this.serverAddressBlock;
        COUNTER = 0;
        this.bkgd = [];
        this.bkgd[COUNTER++] = gui_create_image_hd(IMAGES.AVATAR_RESUME, __DISPLAY__, 0, 0, __LEFT__);
        this.bkgd[COUNTER++] = gui_create_image_hd(IMAGES.AVATAR_LVL1, __HIDE__, 0, 0, __LEFT__);
        this.bkgd[COUNTER++] = gui_create_image_hd(IMAGES.AVATAR_LVL2, __HIDE__, 0, 0, __LEFT__);
        this.bkgd[COUNTER++] = gui_create_image_hd(IMAGES.AVATAR_LVL3, __HIDE__, 0, 0, __LEFT__);
        this.bkgd[COUNTER++] = gui_create_image_hd(IMAGES.AVATAR_LVL4, __HIDE__, 0, 0, __LEFT__);
        this.bkgd[COUNTER++] = gui_create_image_hd(IMAGES.AVATAR_LVL5, __HIDE__, 0, 0, __LEFT__);
        this.bkgd[COUNTER++] = gui_create_image_hd(IMAGES.AVATAR_LVL6, __HIDE__, 0, 0, __LEFT__);
        this.bkgd[COUNTER++] = gui_create_image_hd(IMAGES.AVATAR_LVL7, __HIDE__, 0, 0, __LEFT__);
        this.bkgd[COUNTER++] = gui_create_image_hd(IMAGES.AVATAR_LVL8, __HIDE__, 0, 0, __LEFT__);
        this.bkgd[COUNTER++] = gui_create_image_hd(IMAGES.AVATAR_LVL9, __HIDE__, 0, 0, __LEFT__);
        this.bkgd[COUNTER++] = gui_create_image_hd(IMAGES.AVATAR_LVL10, __HIDE__, 0, 0, __LEFT__);
        this.bkgd[COUNTER++] = gui_create_image_hd(IMAGES.AVATAR_LVL11, __HIDE__, 0, 0, __LEFT__);
        this.bkgd[COUNTER++] = gui_create_image_hd(IMAGES.AVATAR_LVL12, __HIDE__, 0, 0, __LEFT__);
        this.bkgd[COUNTER++] = gui_create_image_hd(IMAGES.AVATAR_LVL13, __HIDE__, 0, 0, __LEFT__);
        this.bkgd[COUNTER++] = gui_create_image_hd(IMAGES.AVATAR_LVL14, __HIDE__, 0, 0, __LEFT__);
        this.bkgd[COUNTER++] = gui_create_image_hd(IMAGES.AVATAR_LVL15, __HIDE__, 0, 0, __LEFT__);
        this.bkgd[COUNTER++] = gui_create_image_hd(IMAGES.AVATAR_LVL16, __HIDE__, 0, 0, __LEFT__);
        this.bkgd[COUNTER++] = gui_create_image_hd(IMAGES.AVATAR_LVL17, __HIDE__, 0, 0, __LEFT__);
        this.bkgd[COUNTER++] = gui_create_image_hd(IMAGES.AVATAR_LVL18, __HIDE__, 0, 0, __LEFT__);
        if (window.innerWidth < 1300)
            this.bkgd[COUNTER] = gui_create_image_hd(IMAGES.LOGO_INTERFACE, __DISPLAY__, 200, 100, __TOP__ | __LEFT__);
        else
            this.bkgd[COUNTER] = gui_create_image_hd(IMAGES.LOGO_INTERFACE, __DISPLAY__, -753 / 4, 100, __TOP__ | __MIDDLE_X__);
        this.bkgd[COUNTER++].view = __GAME__;
        this.bkgd[COUNTER++] = gui_create_image_hd(IMAGES.LINKS_BG, __DISPLAY__, 353, -10, __RIGHT__);
        if (window.innerWidth > 1300) {
            this.bkgd[COUNTER] = gui_create_image_hd(IMAGES.CHANGELOG_BOX, __DISPLAY__, -885 / 4, -319 / 2, __BOTTOM__ | __MIDDLE_X__);
            this.bkgd[COUNTER++].view = __GAME__;
        }
        this.bkgd[COUNTER] = gui_create_image_hd(IMAGES.PROFILE_BOX, __HIDE__, -1293 / 4, 100, __TOP__ | __MIDDLE_X__);
        this.bkgd[COUNTER++].view = __PROFILE__;
        this.bkgd[COUNTER] = gui_create_image_hd(IMAGES.SKINS_BOX, __HIDE__, -1425 / 4, 100, __TOP__ | __MIDDLE_X__);
        this.bkgd[COUNTER++].view = __COSMETICS__;
        this.bkgd[COUNTER] = gui_create_image_hd(IMAGES.ACCOUNT_BOX, __HIDE__, -905 / 4, 50, __TOP__ | __MIDDLE_X__);
        this.bkgd[COUNTER++].view = __LOGIN__;
        this.bkgd[COUNTER] = gui_create_image_hd(IMAGES.SHOP_BOX, __HIDE__, -1608 / 4, 130, __TOP__ | __MIDDLE_X__);
        this.bkgd[COUNTER++].view = __SHOP__;
        this.bkgd[COUNTER] = gui_create_image_hd(IMAGES.SERVER_LOCATION_BOX, __HIDE__, -1117 / 4, 130, __TOP__ | __MIDDLE_X__);
        this.bkgd[COUNTER++].view = __SERVER_LOCATION__;
        this.bkgd[COUNTER] = gui_create_image_hd(IMAGES.SERVER_DURATION_BOX, __HIDE__, -1222 / 4, 130, __TOP__ | __MIDDLE_X__);
        this.bkgd[COUNTER++].view = __SERVER_DURATION__;
        this.bkgd[COUNTER] = gui_create_image_hd(IMAGES.SERVER_ACCESS_BOX, __HIDE__, -1222 / 4, 100, __TOP__ | __MIDDLE_X__);
        this.bkgd[COUNTER++].view = __SERVER_ACCESS__;
        this.bkgd[COUNTER] = gui_create_image_hd(IMAGES.SEASON5_BOX, __HIDE__, (-IMAGES.SEASON5_BOX.width / 4) - 350, -15, __TOP__ | __MIDDLE_X__);
        this.bkgd[COUNTER++].view = __SEASON5__;
        this.bkgd[COUNTER] = gui_create_image_hd(IMAGES.TUTORIAL_BOX, __HIDE__, -1497 / 4, 110, __TOP__ | __MIDDLE_X__);
        this.bkgd[COUNTER++].view = __TUTORIAL__;
        this.bkgd[COUNTER] = gui_create_image_hd(IMAGES.LEADERBOARD_BOX, __HIDE__, -1226 / 4, 100, __TOP__ | __MIDDLE_X__);
        this.bkgd[COUNTER++].view = __LEADERBOARD__;
        this.bkgd[COUNTER] = gui_create_image_hd(IMAGES.BUY_BREAD_BOX, __HIDE__, -1381 / 4, 80, __TOP__ | __MIDDLE_X__);
        this.bkgd[COUNTER++].view = __BUY__;
        this.bkgd[COUNTER] = gui_create_image_hd(IMAGES.SPIN1, __HIDE__, -1542 / 4, 150, __TOP__ | __MIDDLE_X__);
        this.bkgd[COUNTER++].view = __SPIN_1__;
        var DEG = 360 / 100;
        var spinImg = this.create_spin([
            ["#25c5d6", DEG * 3],
            ["#e2cf27", DEG * 10],
            ["#afac98", DEG * 30],
            ["#d88e23", DEG * 57]
        ]);
        this.bkgd[COUNTER] = gui_create_image_hd(spinImg, __HIDE__, -spinImg.width / 4, 178, __TOP__ | __MIDDLE_X__);
        this.bkgd[COUNTER++].view = __SPIN_1__;
        this.play_spin = function (_target, type, win) {
            _this.spin = 1;
            _this.spin_effect = 0;
            _this.spin_win_effect = 0;
            _this.spin_target = _target;
            _this.spin_type = type;
            var info;
            var i = 0;
            if (type === 0) {
                for (i = 0; i < COSMETICS.SKIN.length; i++) {
                    if (win === COSMETICS.SKIN[i].id)
                        break;

                }
                info = COSMETICS.SKIN[i];
                _this.unlock.skin[i] = 1;
            } else if (type === 1) {
                for (i = 0; i < COSMETICS.ACCESSORY.length; i++) {
                    if (win === COSMETICS.ACCESSORY[i].id)
                        break;

                }
                info = COSMETICS.ACCESSORY[i];
                _this.unlock.accessory[i] = 1;
            } else if (type === 2) {
                for (i = 0; i < COSMETICS.BAG.length; i++) {
                    if (win === COSMETICS.BAG[i].id)
                        break;

                }
                info = COSMETICS.BAG[i];
                _this.unlock.bag[i] = 1;
            } else if (type === 3) {
                for (i = 0; i < COSMETICS.BOOK.length; i++) {
                    if (win === COSMETICS.BOOK[i].id)
                        break;

                }
                info = COSMETICS.BOOK[i];
                _this.unlock.book[i] = 1;
            } else if (type === 4) {
                for (i = 0; i < COSMETICS.CRATE.length; i++) {
                    if (win === COSMETICS.CRATE[i].id)
                        break;

                }
                info = COSMETICS.CRATE[i];
                _this.unlock.crate[i] = 1;
                _this.unlock.dead[i] = 1;
            }
            _this.spin_win = i;
            _this.spin_author = gui_render_text("by " + info.author, "\'Baloo Paaji\', sans-serif", "#EFE4B4", 40, 500, undefined, 30, 24, undefined, undefined, undefined, undefined, "#000000", 24);
            _this.spin_name = gui_render_text(info.name, "\'Baloo Paaji\', sans-serif", "#EFE4B4", 60, 600, undefined, 30, 24, undefined, undefined, undefined, undefined, "#000000", 20);
        };
        this.spin = 0;
        this.spin_effect = 0;
        this.spin_target = 0;
        this.spin_type = 0;
        this.spin_win_effect = 0;
        this.spin_author = undefined;
        this.spin_name = undefined;
        var SPIN_TOP = (150 + (448 / 4)) - (260 / 4);
        var SPIN_CENTER = -260 / 4;
        this.bkgd[COUNTER] = gui_create_image_hd(IMAGES.SPIN2, __HIDE__, -1542 / 4, 150, __TOP__ | __MIDDLE_X__);
        this.bkgd[COUNTER++].view = __SPIN_5__;
        var spinImg = this.create_spin([
            ["#d45ce5", DEG * 3],
            ["#25c5d6", DEG * 10],
            ["#e2cf27", DEG * 30],
            ["#afac98", DEG * 57]
        ]);
        this.bkgd[COUNTER] = gui_create_image_hd(spinImg, __HIDE__, -spinImg.width / 4, 178, __TOP__ | __MIDDLE_X__);
        this.bkgd[COUNTER++].view = __SPIN_5__;
        this.bkgd[COUNTER] = gui_create_image_hd(IMAGES.SPIN3, __HIDE__, -1542 / 4, 150, __TOP__ | __MIDDLE_X__);
        this.bkgd[COUNTER++].view = __SPIN_3__;
        var spinImg = this.create_spin([
            ["#d33a2a", DEG * 3],
            ["#d45ce5", DEG * 10],
            ["#25c5d6", DEG * 30],
            ["#e2cf27", DEG * 57]
        ]);
        this.bkgd[COUNTER] = gui_create_image_hd(spinImg, __HIDE__, -spinImg.width / 4, 178, __TOP__ | __MIDDLE_X__);
        this.bkgd[COUNTER++].view = __SPIN_3__;
        this.bkgd[COUNTER] = gui_create_image_hd(IMAGES.SPIN4, __HIDE__, -1542 / 4, 150, __TOP__ | __MIDDLE_X__);
        this.bkgd[COUNTER++].view = __SPIN_4__;
        var spinImg = this.create_spin([
            ["#25c5d6", DEG * 3],
            ["#e2cf27", DEG * 10],
            ["#afac98", DEG * 30],
            ["#d88e23", DEG * 57]
        ]);
        this.bkgd[COUNTER] = gui_create_image_hd(spinImg, __HIDE__, -spinImg.width / 4, 178, __TOP__ | __MIDDLE_X__);
        this.bkgd[COUNTER++].view = __SPIN_4__;
        this.bkgd[COUNTER] = gui_create_image_hd(IMAGES.SPIN5, __HIDE__, -1542 / 4, 150, __TOP__ | __MIDDLE_X__);
        this.bkgd[COUNTER++].view = __SPIN_2__;
        var spinImg = this.create_spin([
            ["#d45ce5", DEG * 3],
            ["#25c5d6", DEG * 10],
            ["#e2cf27", DEG * 30],
            ["#afac98", DEG * 57]
        ]);
        this.bkgd[COUNTER] = gui_create_image_hd(spinImg, __HIDE__, -spinImg.width / 4, 178, __TOP__ | __MIDDLE_X__);
        this.bkgd[COUNTER++].view = __SPIN_2__;
        this.bkgd[COUNTER] = gui_create_image_hd(IMAGES.SPIN6, __HIDE__, -1542 / 4, 150, __TOP__ | __MIDDLE_X__);
        this.bkgd[COUNTER++].view = __SPIN_6__;
        var spinImg = this.create_spin([
            ["#d33a2a", DEG * 3],
            ["#d45ce5", DEG * 10],
            ["#25c5d6", DEG * 30],
            ["#e2cf27", DEG * 57]
        ]);
        this.bkgd[COUNTER] = gui_create_image_hd(spinImg, __HIDE__, -spinImg.width / 4, 178, __TOP__ | __MIDDLE_X__);
        this.bkgd[COUNTER++].view = __SPIN_6__;
        this.bkgd[COUNTER] = gui_create_image_hd(IMAGES.CUSTOM_SKIN_BOX, __HIDE__, -1366 / 4, 100, __TOP__ | __MIDDLE_X__);
        this.bkgd[COUNTER++].view = __SKIN__;
        this.bkgd[COUNTER] = gui_create_image_hd(IMAGES.ACCESSORIES_BOX, __HIDE__, -1366 / 4, 100, __TOP__ | __MIDDLE_X__);
        this.bkgd[COUNTER++].view = __ACCESSORY__;
        this.bkgd[COUNTER] = gui_create_image_hd(IMAGES.BAG_BOX, __HIDE__, -1366 / 4, 100, __TOP__ | __MIDDLE_X__);
        this.bkgd[COUNTER++].view = __BAG__;
        this.bkgd[COUNTER] = gui_create_image_hd(IMAGES.BOOK_BOX, __HIDE__, -1366 / 4, 100, __TOP__ | __MIDDLE_X__);
        this.bkgd[COUNTER++].view = __BOOK__;
        this.bkgd[COUNTER] = gui_create_image_hd(IMAGES.CRATE_BOX, __HIDE__, -1366 / 4, 100, __TOP__ | __MIDDLE_X__);
        this.bkgd[COUNTER++].view = __CRATE__;
        this.bkgd[COUNTER] = gui_create_image_hd(IMAGES.LOOT_BOX, __HIDE__, -1366 / 4, 100, __TOP__ | __MIDDLE_X__);
        this.bkgd[COUNTER++].view = __LOOT__;
        BAG_REMAIN_BOX = COUNTER++;
        this.bkgd[BAG_REMAIN_BOX] = gui_create_image_hd(IMAGES.BAG_REMAIN_BOX, __HIDE__, (908 / 2) + 30, 0, __TOP__);
        SERVER_REMAIN_BOX = COUNTER++;
        this.bkgd[SERVER_REMAIN_BOX] = gui_create_image_hd(IMAGES.SERVER_REMAIN_BOX, __HIDE__, ((908 / 2) + (597 / 2)) + 60, 0, __TOP__);
        this.bkgd[COUNTER] = gui_create_image_hd(IMAGES.LOCKED_CUSTOM_ALERT, __HIDE__, -758 / 4, -5, __TOP__ | __MIDDLE_X__);
        this.bkgd[COUNTER++].view = __LOCKED_ACC__;
        this.bkgd[COUNTER] = gui_create_image_hd(IMAGES.LOCKED_SKIN_ALERT, __HIDE__, -758 / 4, -5, __TOP__ | __MIDDLE_X__);
        this.bkgd[COUNTER++].view = __LOCKED_SKIN__;
        LEVEL_GAUGE = COUNTER++;
        this.bkgd[LEVEL_GAUGE] = gui_create_image_hd(IMAGES.GAUGE, __DISPLAY__, 93, 30, __TOP__);
        this.bkgd[COUNTER] = gui_create_image_hd(IMAGES.CHANGE_NICKNAME1_BOX, __HIDE__, -692 / 4, 110, __TOP__ | __MIDDLE_X__);
        this.bkgd[COUNTER++].view = __CHANGE_NICKNAME1__;
        this.bkgd[COUNTER] = gui_create_image_hd(IMAGES.CHANGE_NICKNAME0_BOX, __HIDE__, -692 / 4, 110, __TOP__ | __MIDDLE_X__);
        this.bkgd[COUNTER++].view = __CHANGE_NICKNAME0__;
        COUNTER = 0;
        this.buttons = [];
        this.buttons[COUNTER++] = gui_create_button(50, 57, "", [IMAGES.BUY_BREAD_OUT, IMAGES.BUY_BREAD_IN, IMAGES.BUY_BREAD_CLICK], __HD__, __NO_BREATH__, function () {
            if (_this.isUserLogged())
                select_subview(__BUY__);
            else
                select_subview(__LOGIN__);
        }, 320, 0, __LEFT__, __DISPLAY__);
        if (window.innerWidth < 1300)
            this.buttons[COUNTER] = gui_create_button(202, 97, "", [IMAGES.PLAY_BUTTON_OUT, IMAGES.PLAY_BUTTON_IN, IMAGES.PLAY_BUTTON_CLICK], __HD__, __NO_BREATH__, this.play_game, 462, 235, __TOP__ | __LEFT__, __DISPLAY__);
        else
            this.buttons[COUNTER] = gui_create_button(202, 97, "", [IMAGES.PLAY_BUTTON_OUT, IMAGES.PLAY_BUTTON_IN, IMAGES.PLAY_BUTTON_CLICK], __HD__, __NO_BREATH__, this.play_game, 74, 235, __TOP__ | __MIDDLE_X__, __DISPLAY__);
        this.buttons[COUNTER++].view = __GAME__;
        if (window.innerWidth > 1300) {
            this.buttons[COUNTER] = gui_create_button(355, 208, "", [IMAGES.CHANGELOG_BUTTON_OUT, IMAGES.CHANGELOG_BUTTON_OUT, IMAGES.CHANGELOG_BUTTON_OUT], __HD__, __NO_BREATH__, function () {
                window.open("./changelog.html", "_blank");
            }, -195, -125, __BOTTOM__ | __MIDDLE_X__, __DISPLAY__);
            this.buttons[COUNTER++].view = __GAME__;
            this.buttons[COUNTER] = gui_create_button(355, 168, "", [IMAGES.DEVASTIO_BUTTON_OUT, IMAGES.DEVASTIO_BUTTON_OUT, IMAGES.DEVASTIO_BUTTON_OUT], __HD__, __NO_BREATH__, function () {
                window.open("https://devast.io", "_blank");
            }, 20, -115, __BOTTOM__ | __MIDDLE_X__, __DISPLAY__);
            this.buttons[COUNTER++].view = __GAME__;
        }
        this.buttons[COUNTER++] = gui_create_button(80, 80, "", [IMAGES.DISCORD_BUTTON_OUT, IMAGES.DISCORD_BUTTON_IN, IMAGES.DISCORD_BUTTON_CLICK], __HD__, __NO_BREATH__, function () {
            window.open("https://discord.gg/starveio", "_blank");
        }, 330, 10, __RIGHT__, __DISPLAY__);
        this.buttons[COUNTER++] = gui_create_button(80, 80, "", [IMAGES.REDDIT_BUTTON_OUT, IMAGES.REDDIT_BUTTON_IN, IMAGES.REDDIT_BUTTON_CLICK], __HD__, __NO_BREATH__, function () {
            window.open("https://reddit.com/r/starveio", "_blank");
        }, 280, 10, __RIGHT__, __DISPLAY__);
        this.buttons[COUNTER++] = gui_create_button(80, 80, "", [IMAGES.WIKI_BUTTON_OUT, IMAGES.WIKI_BUTTON_IN, IMAGES.WIKI_BUTTON_CLICK], __HD__, __NO_BREATH__, function () {
            window.open("https://starveiopro.wikia.com/wiki/", "_blank");
        }, 230, 10, __RIGHT__, __DISPLAY__);
        this.buttons[COUNTER++] = gui_create_button(80, 80, "", [IMAGES.FACEBOOK_BUTTON_OUT, IMAGES.FACEBOOK_BUTTON_IN, IMAGES.FACEBOOK_BUTTON_CLICK], __HD__, __NO_BREATH__, function () {
            window.open("https://www.facebook.com/pages/category/Video-Game/limaxio-571818073000979/", "_blank");
        }, 155, 10, __RIGHT__, __DISPLAY__);
        this.buttons[COUNTER++] = gui_create_button(80, 80, "", [IMAGES.TWITTER_BUTTON_OUT, IMAGES.TWITTER_BUTTON_IN, IMAGES.TWITTER_BUTTON_CLICK], __HD__, __NO_BREATH__, function () {
            window.open("https://twitter.com/lapamauve", "_blank");
        }, 105, 10, __RIGHT__, __DISPLAY__);
        this.buttons[COUNTER++] = gui_create_button(80, 80, "", [IMAGES.YOUTUBE_BUTTON_OUT, IMAGES.YOUTUBE_BUTTON_IN, IMAGES.YOUTUBE_BUTTON_CLICK], __HD__, __NO_BREATH__, function () {
            window.open("https://youtube.com/c/lapamauve", "_blank");
        }, 55, 10, __RIGHT__, __DISPLAY__);
        LEADERBOARD_BUTTON = COUNTER++;
        this.buttons[LEADERBOARD_BUTTON] = gui_create_button(232, 142, "", [IMAGES.ICONS_BOTTOM_BG_BUTTON_OUT, IMAGES.ICONS_BOTTOM_BG_BUTTON_IN, IMAGES.ICONS_BOTTOM_BG_BUTTON_CLICK], __HD__, __NO_BREATH__, function () {
            select_subview(__LEADERBOARD__);
            getLeaderboard(ui.LEADERBOARD_ALL, ui.LEADERBOARD_TOTAL, ui.LEADERBOARD_SCORE, ui.LEADERBOARD_SEASON5);
        }, -5, 573, __LEFT__, __DISPLAY__);
        this.buttons[COUNTER++] = gui_create_button(236, 165, "", [IMAGES.LEADERBOARD_ICON, IMAGES.LEADERBOARD_ICON, IMAGES.LEADERBOARD_ICON], __HD__, __BREATH__, function () {
            select_subview(__LEADERBOARD__);
        }, -5, 566, __LEFT__, __DISPLAY__);
        TUTORIAL_BUTTON = COUNTER++;
        this.buttons[TUTORIAL_BUTTON] = gui_create_button(236, 165, "", [IMAGES.ICONS_BG_BUTTON_OUT, IMAGES.ICONS_BG_BUTTON_IN, IMAGES.ICONS_BG_BUTTON_CLICK], __HD__, __NO_BREATH__, function () {
            select_subview(__TUTORIAL__);
        }, -5, 494, __LEFT__, __DISPLAY__);
        this.buttons[COUNTER++] = gui_create_button(236, 165, "", [IMAGES.TUTORIAL_ICON, IMAGES.TUTORIAL_ICON, IMAGES.TUTORIAL_ICON], __HD__, __BREATH__, function () {
            select_subview(__TUTORIAL__);
        }, -5, 494, __LEFT__, __DISPLAY__);
        SERVER_BUTTON = COUNTER++;
        this.buttons[SERVER_BUTTON] = gui_create_button(236, 165, "", [IMAGES.ICONS_BG_BUTTON_OUT, IMAGES.ICONS_BG_BUTTON_IN, IMAGES.ICONS_BG_BUTTON_CLICK], __HD__, __NO_BREATH__, function () {
            if (_this.isUserLogged()) {
                if ((ui.privateServerTime - Date.now()) > 0)
                    select_subview(__SERVER_ACCESS__);

            } else
                select_subview(__LOGIN__);
        }, -5, 415, __LEFT__, __DISPLAY__);
        this.buttons[COUNTER++] = gui_create_button(236, 165, "", [IMAGES.SERVER_ACCESS_ICON, IMAGES.SERVER_ACCESS_ICON, IMAGES.SERVER_ACCESS_ICON], __HD__, __BREATH__, function () {
            if (_this.isUserLogged()) {
                if ((ui.privateServerTime - Date.now()) > 0)
                    select_subview(__SERVER_ACCESS__);

            } else
                select_subview(__LOGIN__);
        }, -5, 415, __LEFT__, __DISPLAY__);
        SHOP_BUTTON = COUNTER++;
        this.buttons[SHOP_BUTTON] = gui_create_button(236, 165, "", [IMAGES.ICONS_BG_BUTTON_OUT, IMAGES.ICONS_BG_BUTTON_IN, IMAGES.ICONS_BG_BUTTON_CLICK], __HD__, __NO_BREATH__, function () {
            select_subview(__SHOP__);
        }, -5, 336, __LEFT__, __DISPLAY__);
        this.buttons[COUNTER++] = gui_create_button(236, 165, "", [IMAGES.SHOP_ICON, IMAGES.SHOP_ICON, IMAGES.SHOP_ICON], __HD__, __BREATH__, function () {
            select_subview(__SHOP__);
        }, -5, 336, __LEFT__, __DISPLAY__);
        COSMETICS_BUTTON = COUNTER++;
        this.buttons[COSMETICS_BUTTON] = gui_create_button(236, 165, "", [IMAGES.ICONS_BG_BUTTON_OUT, IMAGES.ICONS_BG_BUTTON_IN, IMAGES.ICONS_BG_BUTTON_CLICK], __HD__, __NO_BREATH__, function () {
            select_subview(__COSMETICS__);
        }, -5, 257, __LEFT__, __DISPLAY__);
        this.buttons[COUNTER++] = gui_create_button(236, 165, "", [IMAGES.SKINS_ICON, IMAGES.SKINS_ICON, IMAGES.SKINS_ICON], __HD__, __BREATH__, function () {
            select_subview(__COSMETICS__);
        }, -5, 257, __LEFT__, __DISPLAY__);
        GAME_BUTTON = COUNTER++;
        this.buttons[GAME_BUTTON] = gui_create_button(236, 165, "", [IMAGES.ICONS_BG_BUTTON_OUT, IMAGES.ICONS_BG_BUTTON_IN, IMAGES.ICONS_BG_BUTTON_CLICK], __HD__, __NO_BREATH__, function () {
            select_subview(__GAME__);
        }, -5, 178, __LEFT__, __DISPLAY__);
        this.buttons[COUNTER++] = gui_create_button(236, 165, "", [IMAGES.START_ICON, IMAGES.START_ICON, IMAGES.START_ICON], __HD__, __BREATH__, function () {
            select_subview(__GAME__);
        }, -5, 178, __LEFT__, __DISPLAY__);
        LOGIN_BUTTON = COUNTER++;
        this.LOGIN_BUTTON = LOGIN_BUTTON;
        this.buttons[LOGIN_BUTTON] = gui_create_button(324, 222, "", [IMAGES.LOGIN_BUTTON_OUT, IMAGES.LOGIN_BUTTON_IN, IMAGES.LOGIN_BUTTON_CLICK], __HD__, __NO_BREATH__, function () {
            select_subview(__LOGIN__);
        }, 0, 70, __LEFT__, __DISPLAY__);
        PROFILE_BUTTON = COUNTER++;
        PROFILE_BUTTON_2 = COUNTER++;
        this.PROFILE_BUTTON = PROFILE_BUTTON;
        this.PROFILE_BUTTON_2 = PROFILE_BUTTON_2;
        this.buttons[PROFILE_BUTTON] = gui_create_button(324, 222, "", [IMAGES.PROFILE_BUTTON_OUT, IMAGES.PROFILE_BUTTON_IN, IMAGES.PROFILE_BUTTON_CLICK], __HD__, __NO_BREATH__, function () {
            select_subview(__PROFILE__);
            init_profile(-1);
        }, 0, 70, __LEFT__, __HIDE__);
        this.buttons[PROFILE_BUTTON_2] = gui_create_button(324, 222, "", [IMAGES.PROFILE_ICON, IMAGES.PROFILE_ICON, IMAGES.PROFILE_ICON], __HD__, __BREATH__, function () {
            select_subview(__PROFILE__);
            init_profile(-1);
        }, 0, 70, __LEFT__, __HIDE__);
        if (client.privateServer === 0) {
            var NORMAL_MODE = COUNTER++;
            if (window.innerWidth < 1300)
                this.buttons[NORMAL_MODE] = gui_create_button(266, 176, "", [IMAGES.NORMAL_MODE_OUT, IMAGES.NORMAL_MODE_IN, IMAGES.NORMAL_MODE_CLICK], __HD__, __NO_BREATH__, function () {
                    client.select_gamemode(WORLD.MODE_PVP);
                }, 150, 300, __LEFT__ | __TOP__, __DISPLAY__);
            else
                this.buttons[NORMAL_MODE] = gui_create_button(266, 176, "", [IMAGES.NORMAL_MODE_OUT, IMAGES.NORMAL_MODE_IN, IMAGES.NORMAL_MODE_CLICK], __HD__, __NO_BREATH__, function () {
                    client.select_gamemode(WORLD.MODE_PVP);
                }, -340, 100, __MIDDLE_X__ | __TOP__, __DISPLAY__);
            this.buttons[NORMAL_MODE].view = __GAME__;
            this.buttons[NORMAL_MODE].hint = 0;
            var FOREST_MODE = COUNTER++;
            if (window.innerWidth < 1300)
                this.buttons[FOREST_MODE] = gui_create_button(266, 176, "", [IMAGES.FOREST_MODE_OUT, IMAGES.FOREST_MODE_IN, IMAGES.FOREST_MODE_CLICK], __HD__, __NO_BREATH__, function () {
                    client.select_gamemode(WORLD.MODE_LEGACY);
                }, 150, 400, __LEFT__ | __TOP__, __DISPLAY__);
            else
                this.buttons[FOREST_MODE] = gui_create_button(266, 176, "", [IMAGES.FOREST_MODE_OUT, IMAGES.FOREST_MODE_IN, IMAGES.FOREST_MODE_CLICK], __HD__, __NO_BREATH__, function () {
                    client.select_gamemode(WORLD.MODE_LEGACY);
                }, -340, 200, __MIDDLE_X__ | __TOP__, __DISPLAY__);
            this.buttons[FOREST_MODE].view = __GAME__;
            this.buttons[FOREST_MODE].hint = 0;
            var MODE_COMMUNITY = COUNTER++;
            if (window.innerWidth < 1300)
                this.buttons[MODE_COMMUNITY] = gui_create_button(266, 176, "", [IMAGES.MODE_COMMUNITY_OUT, IMAGES.MODE_COMMUNITY_IN, IMAGES.MODE_COMMUNITY_CLICK], __HD__, __NO_BREATH__, function () {
                    client.select_gamemode(WORLD.MODE_COMMUNITY);
                }, 450, 300, __LEFT__ | __TOP__, __DISPLAY__);
            else
                this.buttons[MODE_COMMUNITY] = gui_create_button(266, 176, "", [IMAGES.MODE_COMMUNITY_OUT, IMAGES.MODE_COMMUNITY_IN, IMAGES.MODE_COMMUNITY_CLICK], __HD__, __NO_BREATH__, function () {
                    client.select_gamemode(WORLD.MODE_COMMUNITY);
                }, -340, 300, __MIDDLE_X__ | __TOP__, __DISPLAY__);
            this.buttons[MODE_COMMUNITY].view = __GAME__;
            this.buttons[MODE_COMMUNITY].hint = 0;
            var ZOMBIE_MODE = COUNTER++;
            if (window.innerWidth < 1300)
                this.buttons[ZOMBIE_MODE] = gui_create_button(266, 176, "", [IMAGES.ZOMBIE_MODE_OUT, IMAGES.ZOMBIE_MODE_IN, IMAGES.ZOMBIE_MODE_CLICK], __HD__, __NO_BREATH__, function () {
                    client.select_gamemode(WORLD.MODE_ZOMBIES);
                }, 300, 300, __LEFT__ | __TOP__, __DISPLAY__);
            else
                this.buttons[ZOMBIE_MODE] = gui_create_button(266, 176, "", [IMAGES.ZOMBIE_MODE_OUT, IMAGES.ZOMBIE_MODE_IN, IMAGES.ZOMBIE_MODE_CLICK], __HD__, __NO_BREATH__, function () {
                    client.select_gamemode(WORLD.MODE_ZOMBIES);
                }, 204, 100, __MIDDLE_X__ | __TOP__, __DISPLAY__);
            this.buttons[ZOMBIE_MODE].view = __GAME__;
            this.buttons[ZOMBIE_MODE].hint = 0;
            var VAMPIRE_MODE = COUNTER++;
            if (window.innerWidth < 1300)
                this.buttons[VAMPIRE_MODE] = gui_create_button(266, 176, "", [IMAGES.VAMPIRE_MODE_OUT, IMAGES.VAMPIRE_MODE_IN, IMAGES.VAMPIRE_MODE_CLICK], __HD__, __NO_BREATH__, function () {
                    client.select_gamemode(WORLD.MODE_VAMPIRES);
                }, 300, 400, __LEFT__ | __TOP__, __DISPLAY__);
            else
                this.buttons[VAMPIRE_MODE] = gui_create_button(266, 176, "", [IMAGES.VAMPIRE_MODE_OUT, IMAGES.VAMPIRE_MODE_IN, IMAGES.VAMPIRE_MODE_CLICK], __HD__, __NO_BREATH__, function () {
                    client.select_gamemode(WORLD.MODE_VAMPIRES);
                }, 204, 200, __MIDDLE_X__ | __TOP__, __DISPLAY__);
            this.buttons[VAMPIRE_MODE].view = __GAME__;
            this.buttons[VAMPIRE_MODE].hint = 0;
            var MODE_EXPERIMENTAL = COUNTER++;
            this.buttons[MODE_EXPERIMENTAL] = gui_create_button(266, 176, "", [IMAGES.MODE_EXPERIMENTAL_OUT, IMAGES.MODE_EXPERIMENTAL_IN, IMAGES.MODE_EXPERIMENTAL_CLICK], __HD__, __NO_BREATH__, function () {
                client.select_gamemode(WORLD.MODE_EXPERIMENTAL);
            }, (window.innerWidth < 1300) ? 450 : 204, (window.innerWidth < 1300) ? 400 : 300, ((window.innerWidth < 1300) ? __LEFT__ : __MIDDLE_X__) | __TOP__, __DISPLAY__);
            this.buttons[MODE_EXPERIMENTAL].view = __GAME__;
            this.buttons[MODE_EXPERIMENTAL].hint = 0;
        }
        this.buttons[COUNTER] = gui_create_button(87, 78, "", [IMAGES.MODIFY_NAME_OUT, IMAGES.MODIFY_NAME_IN, IMAGES.MODIFY_NAME_CLICK], __HD__, __NO_BREATH__, function () {
            ui.generate_new_nickname();
            if (ui.firstName === 0)
                select_subview(__CHANGE_NICKNAME0__);
            else
                select_subview(__CHANGE_NICKNAME1__);
        }, 127, 110, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __PROFILE__;
        this.buttons[COUNTER] = gui_create_button(87, 78, "", [IMAGES.LOGOUT_OUT, IMAGES.LOGOUT_IN, IMAGES.LOGOUT_CLICK], __HD__, __NO_BREATH__, function () {
            logout();
        }, 255, 110, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __PROFILE__;
        this.buttons[COUNTER] = gui_create_button(58, 64, "", [IMAGES.CLOSE_BUTTON_OUT, IMAGES.CLOSE_BUTTON_IN, IMAGES.CLOSE_BUTTON_CLICK], __HD__, __NO_BREATH__, function () {
            select_subview(__GAME__);
        }, 189, 118, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __LOGIN__;
        this.buttons[COUNTER] = gui_create_button(497, 72, "", [IMAGES.LOGIN_GOOGLE_OUT, IMAGES.LOGIN_GOOGLE_IN, IMAGES.LOGIN_GOOGLE_CLICK], __HD__, __NO_BREATH__, function () {
            evelAccountsAPI.loginWithGoogle();
        }, -130, 390, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __LOGIN__;
        this.buttons[COUNTER] = gui_create_button(497, 72, "", [IMAGES.LOGIN_FACEBOOK_OUT, IMAGES.LOGIN_FACEBOOK_IN, IMAGES.LOGIN_FACEBOOK_CLICK], __HD__, __NO_BREATH__, function () {
            logWithFacebook();
        }, -130, 430, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __LOGIN__;
        __LEVEL_FACTOR__ = 20000;

        function xp_formula(score) {
            var lvl = ui.level_formula(score);
            var previous_exp = (lvl * lvl) * __LEVEL_FACTOR__;
            var next_exp = (((lvl + 1) * (lvl + 1)) * __LEVEL_FACTOR__) - previous_exp;
            score -= previous_exp;
            return score / next_exp;
        };
        this.xp_formula = xp_formula;

        function level_formula(score) {
            return Math.floor(Math.sqrt(score / __LEVEL_FACTOR__));
        };
        this.level_formula = level_formula;
        this.update_score = function (score) {
            ui.lvl = ui.level_formula(score);
            ui.xp_dest = ui.xp_formula(score);
            ui.xp = 0;
            ui.score = score;
        };

        function init_profile(id, season) {
            if (season !== undefined) {
                ui.profile_season = season;
                var lastSeason = ui.seasons[season];
                ui.score = lastSeason["score"];
                ui.kill = lastSeason["kill"];
                ui.death = lastSeason["death"];
                ui.time = lastSeason["time"];
                ui.bestScore = lastSeason["bestScore"];
                ui.bestKill = lastSeason["bestKill"];
                ui.bestTime = lastSeason["bestTime"];
                ui.scoreTotal = lastSeason["scoreTotal"];
            }
            if (id === undefined)
                id = ui.current_mode_score;

            ui.current_mode_score = id;
            if (id >= 0) {
                document.getElementById("stats_box_time").innerHTML = ui.bestTime[id];
                document.getElementById("stats_box_kill").innerHTML = ui.bestKill[id];
                document.getElementById("stats_box_score").innerHTML = ui.bestScore[id];
            } else {
                var kill = 0;
                for (var i = 0; i < ui.kill.length; i++)
                    kill += ui.kill[i];
                var time = 0;
                for (var i = 0; i < ui.time.length; i++)
                    time += ui.time[i];
                document.getElementById("stats_box_time").innerHTML = time;
                document.getElementById("stats_box_kill").innerHTML = kill;
                document.getElementById("stats_box_score").innerHTML = ui.score;
            }
        };
        this.login_restore_data = function (data) {
            ui.buttons[ui.LOGIN_BUTTON].info.active = 0;
            ui.buttons[ui.PROFILE_BUTTON].info.active = 1;
            ui.buttons[ui.PROFILE_BUTTON_2].info.active = 1;
            init_skin();
            if (data["name"].indexOf("Starver#") === -1)
                document.getElementById("account_nickname_input").value = window["decodeURIComponent"](window["escape"](window["atob"](data["name"])));
            else
                document.getElementById("account_nickname_input").value = data["name"];
            ui.bread = data["bread"];
            var seasons = data["seasons"];
            var lastSeason = seasons[seasons.length - 1];
            ui.seasons = seasons;
            _this.update_score(lastSeason["score"]);
            ui.score = lastSeason["score"];
            ui.kill = lastSeason["kill"];
            ui.death = lastSeason["death"];
            ui.time = lastSeason["time"];
            ui.bestScore = lastSeason["bestScore"];
            ui.bestKill = lastSeason["bestKill"];
            ui.bestTime = lastSeason["bestTime"];
            ui.scoreTotal = lastSeason["scoreTotal"];
            ui.firstName = data["firstName"];
            document.getElementById("serverAddressInput").value = "https://starve.io/?server=" + data["privateServer"];
            if (ui.firstName === undefined)
                ui.firstName = 0;

            ui.privateServerTime = Date.now() + data["privateServerTime"];
            if (Number(data["privateServerTime"]) > 0)
                ui.privateServerTime = Date.now() + Number(data["privateServerTime"]);

            ui.kit = Date.now() + data["kit"];
            if (Number(data["kit"]) > 0)
                ui.kit = Date.now() + Number(data["kit"]);

            var cosmetic = COSMETICS.SKIN;
            for (var i = 0; i < data["skins"].length; i++) {
                var v = data["skins"][i];
                if (v > 0) {
                    for (var j = 0; j < cosmetic.length; j++) {
                        if (cosmetic[j].id === i)
                            _this.unlock.skin[j] = 1;

                    }
                }
            }
            var cosmetic = COSMETICS.ACCESSORY;
            for (var i = 0; i < data["accessories"].length; i++) {
                var v = data["accessories"][i];
                if (v > 0) {
                    for (var j = 0; j < cosmetic.length; j++) {
                        if (cosmetic[j].id === i)
                            _this.unlock.accessory[j] = 1;

                    }
                }
            }
            var cosmetic = COSMETICS.BOOK;
            for (var i = 0; i < data["books"].length; i++) {
                var v = data["books"][i];
                if (v > 0) {
                    for (var j = 0; j < cosmetic.length; j++) {
                        if (cosmetic[j].id === i)
                            _this.unlock.book[j] = 1;

                    }
                }
            }
            var cosmetic = COSMETICS.BAG;
            for (var i = 0; i < data["bags"].length; i++) {
                var v = data["bags"][i];
                if (v > 0) {
                    for (var j = 0; j < cosmetic.length; j++) {
                        if (cosmetic[j].id === i)
                            _this.unlock.bag[j] = 1;

                    }
                }
            }
            var cosmetic = COSMETICS.CRATE;
            for (var i = 0; i < data["crates"].length; i++) {
                var v = data["crates"][i];
                if (v > 0) {
                    for (var j = 0; j < cosmetic.length; j++) {
                        if (cosmetic[j].id === i) {
                            _this.unlock.crate[j] = 1;
                            _this.unlock.dead[j] = 1;
                        }
                    }
                }
            }
        };
        this.login_after = function () {
            window.onUserLogin = function () {
                select_subview(__GAME__);
                getUserDetails(_this.login_restore_data);
            };
            if (userAlreadyLoggedIn === 1)
                window.onUserLogin();

        };
        window.onUserLogout = function () {
            ui.buttons[ui.LOGIN_BUTTON].info.active = 1;
            ui.buttons[ui.PROFILE_BUTTON].info.active = 0;
            ui.buttons[ui.PROFILE_BUTTON_2].info.active = 0;
            select_subview(__GAME__);
            window.location = "https://starve.io";
        };
        this.isUserLogged = function () {
            return ui.buttons[ui.PROFILE_BUTTON].info.active;
        };
        this.buttons[COUNTER] = gui_create_button(461, 105, "", [IMAGES.GET_MORE_BUTTON_OUT, IMAGES.GET_MORE_BUTTON_IN, IMAGES.GET_MORE_BUTTON_CLICK], __HD__, __NO_BREATH__, function () {
            if (_this.isUserLogged())
                select_subview(__BUY__);
            else
                select_subview(__LOGIN__);
        }, -100, 80, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SHOP__;
        this.buttons[COUNTER] = gui_create_button(157, 158, "", [IMAGES.TUTO_WIKI_OUT, IMAGES.TUTO_WIKI_IN, IMAGES.TUTO_WIKI_CLICK], __HD__, __NO_BREATH__, function () {
            window.open("https://starveiopro.wikia.com/wiki/", "_blank");
        }, -35, 125, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __TUTORIAL__;
        this.buttons[COUNTER] = gui_create_button(66, 73, "", [IMAGES.TUTO_PREVIOUS_OUT, IMAGES.TUTO_PREVIOUS_IN, IMAGES.TUTO_PREVIOUS_CLICK], __HD__, __NO_BREATH__, undefined, -68, 340, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __TUTORIAL__;
        this.buttons[COUNTER] = gui_create_button(66, 73, "", [IMAGES.TUTO_NEXT_OUT, IMAGES.TUTO_NEXT_IN, IMAGES.TUTO_NEXT_CLICK], __HD__, __NO_BREATH__, undefined, -30, 340, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __TUTORIAL__;
        this.buttons[COUNTER] = gui_create_button(97, 66, "", [IMAGES.LVL_LEADERBOARD_OUT, IMAGES.LVL_LEADERBOARD_IN, IMAGES.LVL_LEADERBOARD_CLICK], __HD__, __NO_BREATH__, undefined, -14, 151, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __LEADERBOARD__;
        this.LEADERBOARD_KILL = COUNTER;
        this.buttons[COUNTER] = gui_create_button(135, 66, "", [IMAGES.KILL_LEADERBOARD_OUT, IMAGES.KILL_LEADERBOARD_IN, IMAGES.KILL_LEADERBOARD_CLICK], __HD__, __NO_BREATH__, function () {
            getLeaderboard(undefined, undefined, ui.LEADERBOARD_KILL);
        }, 37.5, 151, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __LEADERBOARD__;
        this.LEADERBOARD_TIME = COUNTER;
        this.buttons[COUNTER] = gui_create_button(160, 66, "", [IMAGES.TIME_LEADERBOARD_OUT, IMAGES.TIME_LEADERBOARD_IN, IMAGES.TIME_LEADERBOARD_CLICK], __HD__, __NO_BREATH__, function () {
            getLeaderboard(undefined, undefined, ui.LEADERBOARD_TIME);
        }, 107.5, 151, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __LEADERBOARD__;
        this.LEADERBOARD_SCORE = COUNTER;
        this.buttons[COUNTER] = gui_create_button(207, 66, "", [IMAGES.SCORE_LEADERBOARD_OUT, IMAGES.SCORE_LEADERBOARD_IN, IMAGES.SCORE_LEADERBOARD_CLICK], __HD__, __NO_BREATH__, function () {
            getLeaderboard(undefined, undefined, ui.LEADERBOARD_SCORE);
        }, 190.5, 151, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __LEADERBOARD__;
        this.LEADERBOARD_TODAY = COUNTER;
        this.buttons[COUNTER] = gui_create_button(144, 66, "", [IMAGES.TODAY_LEADERBOARD_OUT, IMAGES.TODAY_LEADERBOARD_IN, IMAGES.TODAY_LEADERBOARD_CLICK], __HD__, __NO_BREATH__, function () {
            getLeaderboard(ui.LEADERBOARD_TODAY);
        }, 103.5, 110, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __LEADERBOARD__;
        this.LEADERBOARD_WEEK = COUNTER;
        this.buttons[COUNTER] = gui_create_button(124, 66, "", [IMAGES.WEEK_LEADERBOARD_OUT, IMAGES.WEEK_LEADERBOARD_IN, IMAGES.WEEK_LEADERBOARD_CLICK], __HD__, __NO_BREATH__, function () {
            getLeaderboard(ui.LEADERBOARD_WEEK);
        }, 177.5, 110, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __LEADERBOARD__;
        this.LEADERBOARD_ALL = COUNTER;
        this.buttons[COUNTER] = gui_create_button(104, 66, "", [IMAGES.ALL_LEADERBOARD_OUT, IMAGES.ALL_LEADERBOARD_IN, IMAGES.ALL_LEADERBOARD_CLICK], __HD__, __NO_BREATH__, function () {
            getLeaderboard(ui.LEADERBOARD_ALL);
        }, 242, 110, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __LEADERBOARD__;
        this.LEADERBOARD_SEASON1 = COUNTER;
        this.buttons[COUNTER] = gui_create_button(183, 66, "", [IMAGES.SEASON1_LEADERBOARD_OUT, IMAGES.SEASON1_LEADERBOARD_IN, IMAGES.SEASON1_LEADERBOARD_CLICK], __HD__, __NO_BREATH__, function () {
            getLeaderboard(undefined, undefined, undefined, ui.LEADERBOARD_SEASON1);
        }, -290, 521, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __LEADERBOARD__;
        this.LEADERBOARD_SEASON2 = COUNTER;
        this.buttons[COUNTER] = gui_create_button(183, 66, "", [IMAGES.SEASON2_LEADERBOARD_OUT, IMAGES.SEASON2_LEADERBOARD_IN, IMAGES.SEASON2_LEADERBOARD_CLICK], __HD__, __NO_BREATH__, function () {
            getLeaderboard(undefined, undefined, undefined, ui.LEADERBOARD_SEASON2);
        }, -185, 521, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __LEADERBOARD__;
        this.LEADERBOARD_SEASON3 = COUNTER;
        this.buttons[COUNTER] = gui_create_button(183, 66, "", [IMAGES.SEASON3_LEADERBOARD_OUT, IMAGES.SEASON3_LEADERBOARD_IN, IMAGES.SEASON3_LEADERBOARD_CLICK], __HD__, __NO_BREATH__, function () {
            getLeaderboard(undefined, undefined, undefined, ui.LEADERBOARD_SEASON3);
        }, -80, 521, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __LEADERBOARD__;
        this.LEADERBOARD_SEASON4 = COUNTER;
        this.buttons[COUNTER] = gui_create_button(183, 66, "", [IMAGES.SEASON4_LEADERBOARD_OUT, IMAGES.SEASON4_LEADERBOARD_IN, IMAGES.SEASON4_LEADERBOARD_CLICK], __HD__, __NO_BREATH__, function () {
            getLeaderboard(undefined, undefined, undefined, ui.LEADERBOARD_SEASON4);
        }, 25, 521, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __LEADERBOARD__;
        this.LEADERBOARD_SEASON5 = COUNTER;
        this.buttons[COUNTER] = gui_create_button(183, 66, "", [IMAGES.SEASON5_LEADERBOARD_OUT, IMAGES.SEASON5_LEADERBOARD_IN, IMAGES.SEASON5_LEADERBOARD_CLICK], __HD__, __NO_BREATH__, function () {
            getLeaderboard(undefined, undefined, undefined, ui.LEADERBOARD_SEASON5);
        }, 130, 521, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __LEADERBOARD__;
        this.buttons[COUNTER] = gui_create_button(232, 352, "", [IMAGES.CURRENCY1_OUT, IMAGES.CURRENCY1_IN, IMAGES.CURRENCY1_CLICK], __HD__, __NO_BREATH__, function () {
            openXsolla(300);
        }, -330, 135, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __BUY__;
        this.buttons[COUNTER] = gui_create_button(232, 352, "", [IMAGES.CURRENCY2_OUT, IMAGES.CURRENCY2_IN, IMAGES.CURRENCY2_CLICK], __HD__, __NO_BREATH__, function () {
            openXsolla(600);
        }, -195, 135, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __BUY__;
        this.buttons[COUNTER] = gui_create_button(243, 374, "", [IMAGES.CURRENCY3_OUT, IMAGES.CURRENCY3_IN, IMAGES.CURRENCY3_CLICK], __HD__, __NO_BREATH__, function () {
            openXsolla(2600);
        }, -60, 130, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __BUY__;
        this.buttons[COUNTER] = gui_create_button(232, 352, "", [IMAGES.CURRENCY4_OUT, IMAGES.CURRENCY4_IN, IMAGES.CURRENCY4_CLICK], __HD__, __NO_BREATH__, function () {
            openXsolla(7000);
        }, 78, 135, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __BUY__;
        this.buttons[COUNTER] = gui_create_button(243, 374, "", [IMAGES.CURRENCY5_OUT, IMAGES.CURRENCY5_IN, IMAGES.CURRENCY5_CLICK], __HD__, __NO_BREATH__, function () {
            openXsolla(20000);
        }, 213, 130, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __BUY__;
        this.buttons[COUNTER] = gui_create_button(58, 64, "", [IMAGES.CLOSE_BUTTON_OUT, IMAGES.CLOSE_BUTTON_IN, IMAGES.CLOSE_BUTTON_CLICK], __HD__, __NO_BREATH__, function () {
            select_subview(__SHOP__);
        }, 300, 88, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __BUY__;
        this.buttons[COUNTER] = gui_create_button(323, 112, "", [IMAGES.SKIN_BUTTON_OUT, IMAGES.SKIN_BUTTON_IN, IMAGES.SKIN_BUTTON_CLICK], __HD__, __NO_BREATH__, function () {
            select_subview(__SKIN__);
            skinSelector.initSelector();
        }, -315, 185, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __COSMETICS__;
        this.buttons[COUNTER] = gui_create_button(323, 112, "", [IMAGES.ACCESSORY_BUTTON_OUT, IMAGES.ACCESSORY_BUTTON_IN, IMAGES.ACCESSORY_BUTTON_CLICK], __HD__, __NO_BREATH__, function () {
            select_subview(__ACCESSORY__);
            accessorySelector.initSelector();
        }, -315, 321, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __COSMETICS__;
        this.buttons[COUNTER] = gui_create_button(323, 112, "", [IMAGES.BAG_BUTTON_OUT, IMAGES.BAG_BUTTON_IN, IMAGES.BAG_BUTTON_CLICK], __HD__, __NO_BREATH__, function () {
            select_subview(__BAG__);
            bagSelector.initSelector();
        }, 153, 185, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __COSMETICS__;
        this.buttons[COUNTER] = gui_create_button(323, 112, "", [IMAGES.BOOK_BUTTON_OUT, IMAGES.BOOK_BUTTON_IN, IMAGES.BOOK_BUTTON_CLICK], __HD__, __NO_BREATH__, function () {
            select_subview(__BOOK__);
            bookSelector.initSelector();
        }, 153, 321, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __COSMETICS__;
        this.buttons[COUNTER] = gui_create_button(323, 112, "", [IMAGES.CRATE_BUTTON_OUT, IMAGES.CRATE_BUTTON_IN, IMAGES.CRATE_BUTTON_CLICK], __HD__, __NO_BREATH__, function () {
            select_subview(__CRATE__);
            deadSelector.initSelector();
        }, 153, 463, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __COSMETICS__;
        this.buttons[COUNTER] = gui_create_button(323, 112, "", [IMAGES.LOOT_BUTTON_OUT, IMAGES.LOOT_BUTTON_IN, IMAGES.LOOT_BUTTON_CLICK], __HD__, __NO_BREATH__, function () {
            select_subview(__LOOT__);
            crateSelector.initSelector();
        }, -315, 463, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __COSMETICS__;
        this.buttons[COUNTER] = gui_create_button(327, 117, "", [IMAGES.SEASON_5, IMAGES.SEASON_5_IN, IMAGES.SEASON_5_OUT], __HD__, __NO_BREATH__, function () {
            select_subview(__SEASON5__);
        }, 155, 70, __LEFT__, __DISPLAY__);
        this.buttons[COUNTER++].view = __GAME__;
        this.buttons[COUNTER] = gui_create_button(130, 129, "", [IMAGES.SHOP_BUTTON_OUT, IMAGES.SHOP_BUTTON_IN, IMAGES.SHOP_BUTTON_CLICK], __HD__, __NO_BREATH__, function () {
            update_subview(__LOCKED_SKIN__, __HIDE__, "none");
            select_subview(__SHOP__);
        }, 10, 40, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __LOCKED_SKIN__;
        this.buttons[COUNTER] = gui_create_button(130, 129, "", [IMAGES.SHOP_BUTTON_OUT, IMAGES.SHOP_BUTTON_IN, IMAGES.SHOP_BUTTON_CLICK], __HD__, __NO_BREATH__, function () {
            update_subview(__LOCKED_ACC__, __HIDE__, "none");
            select_subview(__SHOP__);
        }, 10, 40, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __LOCKED_ACC__;
        this.buttons[COUNTER] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], __HD__, __NO_BREATH__, function () {
            select_subview(__SHOP__);
        }, 200, 140, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SERVER_LOCATION__;
        this.buttons[COUNTER] = gui_create_button(253, 110, "", [IMAGES.ATLANTA_OUT, IMAGES.ATLANTA_IN, IMAGES.ATLANTA_CLICK], __HD__, __NO_BREATH__, function () {
            regionPreference("Atlanta");
        }, -265, 300, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SERVER_LOCATION__;
        this.buttons[COUNTER] = gui_create_button(253, 110, "", [IMAGES.DALLAS_OUT, IMAGES.DALLAS_IN, IMAGES.DALLAS_CLICK], __HD__, __NO_BREATH__, function () {
            regionPreference("Dallas");
        }, -130, 300, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SERVER_LOCATION__;
        this.buttons[COUNTER] = gui_create_button(253, 110, "", [IMAGES.FREMONT_OUT, IMAGES.FREMONT_IN, IMAGES.FREMONT_CLICK], __HD__, __NO_BREATH__, function () {
            regionPreference("Fremont");
        }, 5, 300, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SERVER_LOCATION__;
        this.buttons[COUNTER] = gui_create_button(253, 110, "", [IMAGES.NEWARK_OUT, IMAGES.NEWARK_IN, IMAGES.NEWARK_CLICK], __HD__, __NO_BREATH__, function () {
            regionPreference("Newark");
        }, 140, 300, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SERVER_LOCATION__;
        this.buttons[COUNTER] = gui_create_button(253, 110, "", [IMAGES.LONDON_OUT, IMAGES.LONDON_IN, IMAGES.LONDON_CLICK], __HD__, __NO_BREATH__, function () {
            regionPreference("London");
        }, -265, 365, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SERVER_LOCATION__;
        this.buttons[COUNTER] = gui_create_button(253, 110, "", [IMAGES.FRANKFURT_OUT, IMAGES.FRANKFURT_IN, IMAGES.FRANKFURT_CLICK], __HD__, __NO_BREATH__, function () {
            regionPreference("Frankfurt");
        }, -130, 365, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SERVER_LOCATION__;
        this.buttons[COUNTER] = gui_create_button(253, 110, "", [IMAGES.SINGAPORE_OUT, IMAGES.SINGAPORE_IN, IMAGES.SINGAPORE_CLICK], __HD__, __NO_BREATH__, function () {
            regionPreference("Singapore");
        }, 5, 365, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SERVER_LOCATION__;
        this.buttons[COUNTER] = gui_create_button(253, 110, "", [IMAGES.TOKYO_OUT, IMAGES.TOKYO_IN, IMAGES.TOKYO_CLICK], __HD__, __NO_BREATH__, function () {
            regionPreference("Tokyo");
        }, 140, 365, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SERVER_LOCATION__;
        this.buttons[COUNTER] = gui_create_button(253, 110, "", [IMAGES.TORONTO_OUT, IMAGES.TORONTO_IN, IMAGES.TORONTO_CLICK], __HD__, __NO_BREATH__, function () {
            regionPreference("Toronto");
        }, -265, 430, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SERVER_LOCATION__;
        this.buttons[COUNTER] = gui_create_button(253, 110, "", [IMAGES.MUMBAI_OUT, IMAGES.MUMBAI_IN, IMAGES.MUMBAI_CLICK], __HD__, __NO_BREATH__, function () {
            regionPreference("Mumbai");
        }, -130, 430, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SERVER_LOCATION__;
        this.buttons[COUNTER] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], __HD__, __NO_BREATH__, function () {
            select_subview(__SERVER_LOCATION__);
        }, 230, 140, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SERVER_DURATION__;
        this.buttons[COUNTER] = gui_create_button(230, 352, "", [IMAGES.DAYS3_OUT, IMAGES.DAYS3_IN, IMAGES.DAYS3_CLICK], __HD__, __NO_BREATH__, function () {
            openXsolla(350);
        }, -280, 240, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SERVER_DURATION__;
        this.buttons[COUNTER] = gui_create_button(230, 352, "", [IMAGES.DAYS7_OUT, IMAGES.DAYS7_IN, IMAGES.DAYS7_CLICK], __HD__, __NO_BREATH__, function () {
            openXsolla(700);
        }, -130, 240, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SERVER_DURATION__;
        this.buttons[COUNTER] = gui_create_button(230, 352, "", [IMAGES.DAYS30_OUT, IMAGES.DAYS30_IN, IMAGES.DAYS30_CLICK], __HD__, __NO_BREATH__, function () {
            openXsolla(1400);
        }, 20, 240, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SERVER_DURATION__;
        this.buttons[COUNTER] = gui_create_button(230, 352, "", [IMAGES.DAYS90_OUT, IMAGES.DAYS90_IN, IMAGES.DAYS90_CLICK], __HD__, __NO_BREATH__, function () {
            openXsolla(3000);
        }, 170, 240, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SERVER_DURATION__;
        this.buttons[COUNTER] = gui_create_button(105, 119, "", [IMAGES.COPY_PASTE_OUT, IMAGES.COPY_PASTE_IN, IMAGES.COPY_PASTE_CLICK], __HD__, __NO_BREATH__, function () {
            document.getElementById("serverAddressInput")["select"]();
            document["execCommand"]('copy');
        }, 170, 310, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SERVER_ACCESS__;
        this.buttons[COUNTER] = gui_create_button(105, 119, "", [IMAGES.RESTART_OUT, IMAGES.RESTART_IN, IMAGES.RESTART_CLICK], __HD__, __NO_BREATH__, function () {
            rebootServer();
        }, 235, 310, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SERVER_ACCESS__;
        this.buttons[COUNTER] = gui_create_button(204, 115, "", [IMAGES.GUIDE_OUT, IMAGES.GUIDE_IN, IMAGES.GUIDE_CLICK], __HD__, __NO_BREATH__, function () {
            window.open("./commands.html", "_blank");
        }, -265, 490, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SERVER_ACCESS__;
        this.buttons[COUNTER] = gui_create_button(145, 69, "", [IMAGES.PRICE5_OUT, IMAGES.PRICE5_IN, IMAGES.PRICE5_CLICK], __HD__, __NO_BREATH__, function () {
            select_subview(__SPIN_1__);
        }, -210, 170, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SHOP__;
        this.buttons[COUNTER] = gui_create_button(145, 69, "", [IMAGES.PRICE1_OUT, IMAGES.PRICE1_IN, IMAGES.PRICE1_CLICK], __HD__, __NO_BREATH__, function () {
            select_subview(__SPIN_4__);
        }, 70, 170, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SHOP__;
        this.buttons[COUNTER] = gui_create_button(145, 69, "", [IMAGES.PRICE2_OUT, IMAGES.PRICE2_IN, IMAGES.PRICE2_CLICK], __HD__, __NO_BREATH__, function () {
            select_subview(__SPIN_2__);
        }, 70, 204, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SHOP__;
        this.buttons[COUNTER] = gui_create_button(145, 69, "", [IMAGES.PRICE3_OUT, IMAGES.PRICE3_IN, IMAGES.PRICE3_CLICK], __HD__, __NO_BREATH__, function () {
            select_subview(__SPIN_5__);
        }, -210, 204, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SHOP__;
        this.buttons[COUNTER] = gui_create_button(145, 69, "", [IMAGES.PRICE3_OUT, IMAGES.PRICE3_IN, IMAGES.PRICE3_CLICK], __HD__, __NO_BREATH__, function () {
            select_subview(__SPIN_6__);
        }, 70, 238, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SHOP__;
        this.buttons[COUNTER] = gui_create_button(145, 69, "", [IMAGES.PRICE3_OUT, IMAGES.PRICE3_IN, IMAGES.PRICE3_CLICK], __HD__, __NO_BREATH__, function () {
            if (_this.isUserLogged())
                buyKit(0, 300);
            else
                select_subview(__LOGIN__);
        }, 307, 205, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SHOP__;
        this.buttons[COUNTER] = gui_create_button(145, 69, "", [IMAGES.PRICE4_OUT, IMAGES.PRICE4_IN, IMAGES.PRICE4_CLICK], __HD__, __NO_BREATH__, function () {
            select_subview(__SPIN_3__);
        }, -210, 238, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SHOP__;
        this.buttons[COUNTER] = gui_create_button(145, 69, "", [IMAGES.PRICE4_OUT, IMAGES.PRICE4_IN, IMAGES.PRICE4_CLICK], __HD__, __NO_BREATH__, function () {
            if (_this.isUserLogged())
                buyKit(1, 600);
            else
                select_subview(__LOGIN__);
        }, 307, 239, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SHOP__;
        this.buttons[COUNTER] = gui_create_button(192, 101, "", [IMAGES.YES_BUTTON_OUT, IMAGES.YES_BUTTON_IN, IMAGES.YES_BUTTON_CLICK], __HD__, __NO_BREATH__, function () {
            buyNameChanger();
        }, -100, 250, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __CHANGE_NICKNAME0__;
        this.buttons[COUNTER] = gui_create_button(192, 104, "", [IMAGES.YES_300_BUTTON_OUT, IMAGES.YES_300_BUTTON_IN, IMAGES.YES_300_BUTTON_CLICK], __HD__, __NO_BREATH__, function () {
            buyNameChanger();
        }, -100, 239, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __CHANGE_NICKNAME1__;
        this.buttons[COUNTER] = gui_create_button(192, 101, "", [IMAGES.NO_BUTTON_OUT, IMAGES.NO_BUTTON_IN, IMAGES.NO_BUTTON_CLICK], __HD__, __NO_BREATH__, function () {
            select_subview(__PROFILE__);
        }, 10, 250, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __CHANGE_NICKNAME0__;
        this.buttons[COUNTER] = gui_create_button(192, 104, "", [IMAGES.NO_THANKS_BUTTON_OUT, IMAGES.NO_THANKS_BUTTON_IN, IMAGES.NO_THANKS_BUTTON_CLICK], __HD__, __NO_BREATH__, function () {
            select_subview(__PROFILE__);
        }, 10, 239, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __CHANGE_NICKNAME1__;
        RARITY_BUTTON = [];
        RARITY_BUTTON[RARITY.FREE] = [IMAGES.FREE_ITEM_OUT, IMAGES.FREE_ITEM_IN, IMAGES.FREE_ITEM_CLICK];
        RARITY_BUTTON[RARITY.WOOD] = [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK];
        RARITY_BUTTON[RARITY.STONE] = [IMAGES.STONE_ITEM_OUT, IMAGES.STONE_ITEM_IN, IMAGES.STONE_ITEM_CLICK];
        RARITY_BUTTON[RARITY.GOLD] = [IMAGES.GOLD_ITEM_OUT, IMAGES.GOLD_ITEM_IN, IMAGES.GOLD_ITEM_CLICK];
        RARITY_BUTTON[RARITY.DIAMOND] = [IMAGES.DIAMOND_ITEM_OUT, IMAGES.DIAMOND_ITEM_IN, IMAGES.DIAMOND_ITEM_CLICK];
        RARITY_BUTTON[RARITY.AMETHYST] = [IMAGES.AMETHYST_ITEM_OUT, IMAGES.AMETHYST_ITEM_IN, IMAGES.AMETHYST_ITEM_CLICK];
        RARITY_BUTTON[RARITY.REIDITE] = [IMAGES.REIDITE_ITEM_OUT, IMAGES.REIDITE_ITEM_IN, IMAGES.REIDITE_ITEM_CLICK];
        RARITY_BUTTON[RARITY.LEVEL] = [IMAGES.LEVEL_ITEM_OUT, IMAGES.LEVEL_ITEM_IN, IMAGES.LEVEL_ITEM_CLICK];
        RARITY_BUTTON[RARITY.SPECIAL] = [IMAGES.SPECIAL_ITEM_OUT, IMAGES.SPECIAL_ITEM_IN, IMAGES.SPECIAL_ITEM_CLICK];
        FIRST_BUTTON_SKIN = COUNTER;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, -29, 205, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SKIN__;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, -29, 300, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SKIN__;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, -29, 395, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SKIN__;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, 65, 205, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SKIN__;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, 65, 300, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SKIN__;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, 65, 395, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SKIN__;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, 159, 205, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SKIN__;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, 159, 300, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SKIN__;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, 159, 395, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SKIN__;
        this.buttons[COUNTER] = gui_create_button(39, 122, "", [IMAGES.SKIN_PREVIOUS_OUT, IMAGES.SKIN_PREVIOUS_IN, IMAGES.SKIN_PREVIOUS_CLICK], __HD__, __NO_BREATH__, undefined, -61, 315, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SKIN__;
        this.buttons[COUNTER] = gui_create_button(39, 122, "", [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK], __HD__, __NO_BREATH__, undefined, 260, 315, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SKIN__;
        this.buttons[COUNTER] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], __HD__, __NO_BREATH__, function () {
            select_subview(__COSMETICS__);
        }, -320, 470, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SKIN__;
        FIRST_BUTTON_ACCESSORY = COUNTER;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, -29, 205, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __ACCESSORY__;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, -29, 300, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __ACCESSORY__;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, -29, 395, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __ACCESSORY__;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, 65, 205, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __ACCESSORY__;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, 65, 300, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __ACCESSORY__;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, 65, 395, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __ACCESSORY__;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, 159, 205, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __ACCESSORY__;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, 159, 300, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __ACCESSORY__;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, 159, 395, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __ACCESSORY__;
        this.buttons[COUNTER] = gui_create_button(39, 122, "", [IMAGES.SKIN_PREVIOUS_OUT, IMAGES.SKIN_PREVIOUS_IN, IMAGES.SKIN_PREVIOUS_CLICK], __HD__, __NO_BREATH__, undefined, -61, 315, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __ACCESSORY__;
        this.buttons[COUNTER] = gui_create_button(39, 122, "", [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK], __HD__, __NO_BREATH__, undefined, 260, 315, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __ACCESSORY__;
        this.buttons[COUNTER] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], __HD__, __NO_BREATH__, function () {
            select_subview(__COSMETICS__);
        }, -320, 470, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __ACCESSORY__;
        FIRST_BUTTON_LOOT = COUNTER;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, -29, 205, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __LOOT__;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, -29, 300, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __LOOT__;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, -29, 395, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __LOOT__;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, 65, 205, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __LOOT__;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, 65, 300, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __LOOT__;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, 65, 395, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __LOOT__;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, 159, 205, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __LOOT__;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, 159, 300, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __LOOT__;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, 159, 395, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __LOOT__;
        this.buttons[COUNTER] = gui_create_button(39, 122, "", [IMAGES.SKIN_PREVIOUS_OUT, IMAGES.SKIN_PREVIOUS_IN, IMAGES.SKIN_PREVIOUS_CLICK], __HD__, __NO_BREATH__, undefined, -61, 315, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __LOOT__;
        this.buttons[COUNTER] = gui_create_button(39, 122, "", [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK], __HD__, __NO_BREATH__, undefined, 260, 315, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __LOOT__;
        this.buttons[COUNTER] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], __HD__, __NO_BREATH__, function () {
            select_subview(__COSMETICS__);
        }, -320, 470, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __LOOT__;
        FIRST_BUTTON_BAG = COUNTER;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, -29, 205, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __BAG__;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, -29, 300, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __BAG__;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, -29, 395, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __BAG__;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, 65, 205, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __BAG__;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, 65, 300, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __BAG__;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, 65, 395, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __BAG__;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, 159, 205, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __BAG__;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, 159, 300, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __BAG__;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, 159, 395, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __BAG__;
        this.buttons[COUNTER] = gui_create_button(39, 122, "", [IMAGES.SKIN_PREVIOUS_OUT, IMAGES.SKIN_PREVIOUS_IN, IMAGES.SKIN_PREVIOUS_CLICK], __HD__, __NO_BREATH__, undefined, -61, 315, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __BAG__;
        this.buttons[COUNTER] = gui_create_button(39, 122, "", [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK], __HD__, __NO_BREATH__, undefined, 260, 315, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __BAG__;
        this.buttons[COUNTER] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], __HD__, __NO_BREATH__, function () {
            select_subview(__COSMETICS__);
        }, -320, 470, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __BAG__;
        FIRST_BUTTON_BOOK = COUNTER;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, -29, 205, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __BOOK__;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, -29, 300, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __BOOK__;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, -29, 395, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __BOOK__;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, 65, 205, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __BOOK__;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, 65, 300, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __BOOK__;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, 65, 395, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __BOOK__;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, 159, 205, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __BOOK__;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, 159, 300, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __BOOK__;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, 159, 395, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __BOOK__;
        this.buttons[COUNTER] = gui_create_button(39, 122, "", [IMAGES.SKIN_PREVIOUS_OUT, IMAGES.SKIN_PREVIOUS_IN, IMAGES.SKIN_PREVIOUS_CLICK], __HD__, __NO_BREATH__, undefined, -61, 315, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __BOOK__;
        this.buttons[COUNTER] = gui_create_button(39, 122, "", [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK], __HD__, __NO_BREATH__, undefined, 260, 315, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __BOOK__;
        this.buttons[COUNTER] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], __HD__, __NO_BREATH__, function () {
            select_subview(__COSMETICS__);
        }, -320, 470, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __BOOK__;
        FIRST_BUTTON_CRATE = COUNTER;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, -29, 205, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __CRATE__;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, -29, 300, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __CRATE__;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, -29, 395, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __CRATE__;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, 65, 205, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __CRATE__;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, 65, 300, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __CRATE__;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, 65, 395, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __CRATE__;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, 159, 205, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __CRATE__;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, 159, 300, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __CRATE__;
        this.buttons[COUNTER] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], __HD__, __NO_BREATH__, undefined, 159, 395, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __CRATE__;
        this.buttons[COUNTER] = gui_create_button(39, 122, "", [IMAGES.SKIN_PREVIOUS_OUT, IMAGES.SKIN_PREVIOUS_IN, IMAGES.SKIN_PREVIOUS_CLICK], __HD__, __NO_BREATH__, undefined, -61, 315, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __CRATE__;
        this.buttons[COUNTER] = gui_create_button(39, 122, "", [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK], __HD__, __NO_BREATH__, undefined, 260, 315, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __CRATE__;
        this.buttons[COUNTER] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], __HD__, __NO_BREATH__, function () {
            select_subview(__COSMETICS__);
        }, -320, 470, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __CRATE__;
        this.buttons[COUNTER] = gui_create_button(260, 260, "", [IMAGES.SPIN_BUTTON_1_OUT, IMAGES.SPIN_BUTTON_1_IN, IMAGES.SPIN_BUTTON_1_CLICK], __HD__, __NO_BREATH__, function () {
            if (_this.isUserLogged())
                buySpin(3, 50);
            else
                select_subview(__LOGIN__);
        }, -260 / 4, (150 + (448 / 4)) - (260 / 4), __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SPIN_4__;
        this.buttons[COUNTER] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], __HD__, __NO_BREATH__, function () {
            select_subview(__SHOP__);
        }, 309, 180, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SPIN_4__;
        this.buttons[COUNTER] = gui_create_button(260, 260, "", [IMAGES.SPIN_BUTTON_2_OUT, IMAGES.SPIN_BUTTON_2_IN, IMAGES.SPIN_BUTTON_2_CLICK], __HD__, __NO_BREATH__, function () {
            if (_this.isUserLogged())
                buySpin(0, 100);
            else
                select_subview(__LOGIN__);
        }, -260 / 4, (150 + (448 / 4)) - (260 / 4), __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SPIN_1__;
        this.buttons[COUNTER] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], __HD__, __NO_BREATH__, function () {
            select_subview(__SHOP__);
        }, 309, 180, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SPIN_1__;
        this.buttons[COUNTER] = gui_create_button(260, 260, "", [IMAGES.SPIN_BUTTON_3_OUT, IMAGES.SPIN_BUTTON_3_IN, IMAGES.SPIN_BUTTON_3_CLICK], __HD__, __NO_BREATH__, function () {
            if (_this.isUserLogged())
                buySpin(4, 150);
            else
                select_subview(__LOGIN__);
        }, -260 / 4, (150 + (448 / 4)) - (260 / 4), __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SPIN_2__;
        this.buttons[COUNTER] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], __HD__, __NO_BREATH__, function () {
            select_subview(__SHOP__);
        }, 309, 180, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SPIN_2__;
        this.buttons[COUNTER] = gui_create_button(260, 260, "", [IMAGES.SPIN_BUTTON_4_OUT, IMAGES.SPIN_BUTTON_4_IN, IMAGES.SPIN_BUTTON_4_CLICK], __HD__, __NO_BREATH__, function () {
            if (_this.isUserLogged())
                buySpin(1, 300);
            else
                select_subview(__LOGIN__);
        }, -260 / 4, (150 + (448 / 4)) - (260 / 4), __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SPIN_5__;
        this.buttons[COUNTER] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], __HD__, __NO_BREATH__, function () {
            select_subview(__SHOP__);
        }, 309, 180, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SPIN_5__;
        this.buttons[COUNTER] = gui_create_button(260, 260, "", [IMAGES.SPIN_BUTTON_5_OUT, IMAGES.SPIN_BUTTON_5_IN, IMAGES.SPIN_BUTTON_5_CLICK], __HD__, __NO_BREATH__, function () {
            if (_this.isUserLogged())
                buySpin(2, 600);
            else
                select_subview(__LOGIN__);
        }, -260 / 4, (150 + (448 / 4)) - (260 / 4), __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SPIN_3__;
        this.buttons[COUNTER] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], __HD__, __NO_BREATH__, function () {
            select_subview(__SHOP__);
        }, 309, 180, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SPIN_3__;
        this.buttons[COUNTER] = gui_create_button(260, 260, "", [IMAGES.SPIN_BUTTON_4_OUT, IMAGES.SPIN_BUTTON_4_IN, IMAGES.SPIN_BUTTON_4_CLICK], __HD__, __NO_BREATH__, function () {
            if (_this.isUserLogged())
                buySpin(5, 300);
            else
                select_subview(__LOGIN__);
        }, -260 / 4, (150 + (448 / 4)) - (260 / 4), __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SPIN_6__;
        this.buttons[COUNTER] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], __HD__, __NO_BREATH__, function () {
            select_subview(__SHOP__);
        }, 309, 180, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SPIN_6__;
        var SCORE_MODE_SEASON1 = COUNTER;
        this.buttons[COUNTER] = gui_create_button(205, 67, "", [IMAGES.SEASON1_PROFILE_OUT, IMAGES.SEASON1_PROFILE_IN, IMAGES.SEASON1_PROFILE_CLICK], __HD__, __NO_BREATH__, function () {
            init_profile(undefined, 0);
        }, -305, 125, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __PROFILE__;
        var SCORE_MODE_SEASON2 = COUNTER;
        this.buttons[COUNTER] = gui_create_button(205, 67, "", [IMAGES.SEASON2_PROFILE_OUT, IMAGES.SEASON2_PROFILE_IN, IMAGES.SEASON2_PROFILE_CLICK], __HD__, __NO_BREATH__, function () {
            init_profile(undefined, 1);
        }, -305, 170, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __PROFILE__;
        var SCORE_MODE_SEASON3 = COUNTER;
        this.buttons[COUNTER] = gui_create_button(205, 67, "", [IMAGES.SEASON3_PROFILE_OUT, IMAGES.SEASON3_PROFILE_IN, IMAGES.SEASON3_PROFILE_CLICK], __HD__, __NO_BREATH__, function () {
            init_profile(undefined, 2);
        }, -305, 215, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __PROFILE__;
        var SCORE_MODE_SEASON4 = COUNTER;
        this.buttons[COUNTER] = gui_create_button(205, 67, "", [IMAGES.SEASON4_PROFILE_OUT, IMAGES.SEASON4_PROFILE_IN, IMAGES.SEASON4_PROFILE_CLICK], __HD__, __NO_BREATH__, function () {
            init_profile(undefined, 3);
        }, -305, 260, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __PROFILE__;
        var SCORE_MODE_SEASON5 = COUNTER;
        this.buttons[COUNTER] = gui_create_button(205, 67, "", [IMAGES.SEASON5_PROFILE_OUT, IMAGES.SEASON5_PROFILE_IN, IMAGES.SEASON5_PROFILE_CLICK], __HD__, __NO_BREATH__, function () {
            init_profile(undefined, 3);
        }, -305, 305, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __PROFILE__;
        var SCORE_MODE_TOTAL = COUNTER;
        this.buttons[COUNTER] = gui_create_button(460, 73, "", [IMAGES.TOTAL_PROFILE_OUT, IMAGES.TOTAL_PROFILE_IN, IMAGES.TOTAL_PROFILE_CLICK], __HD__, __NO_BREATH__, function () {
            init_profile(-1);
        }, -180, 170, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __PROFILE__;
        var SCORE_MODE_NORMAL = COUNTER;
        this.buttons[COUNTER] = gui_create_button(222, 68, "", [IMAGES.NORMAL_PROFILE_OUT, IMAGES.NORMAL_PROFILE_IN, IMAGES.NORMAL_PROFILE_CLICK], __HD__, __NO_BREATH__, function () {
            init_profile(WORLD.MODE_PVP);
        }, -180, 215, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __PROFILE__;
        var SCORE_MODE_FOREST = COUNTER;
        this.buttons[COUNTER] = gui_create_button(222, 68, "", [IMAGES.FOREST_PROFILE_OUT, IMAGES.FOREST_PROFILE_IN, IMAGES.FOREST_PROFILE_CLICK], __HD__, __NO_BREATH__, function () {
            init_profile(WORLD.MODE_LEGACY);
        }, -180, 260, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __PROFILE__;
        var SCORE_MODE_ZOMBIE = COUNTER;
        this.buttons[COUNTER] = gui_create_button(222, 68, "", [IMAGES.ZOMBIE_PROFILE_OUT, IMAGES.ZOMBIE_PROFILE_IN, IMAGES.ZOMBIE_PROFILE_CLICK], __HD__, __NO_BREATH__, function () {
            init_profile(WORLD.MODE_ZOMBIES);
        }, -60, 215, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __PROFILE__;
        var SCORE_MODE_VAMPIRE = COUNTER;
        this.buttons[COUNTER] = gui_create_button(222, 68, "", [IMAGES.VAMPIRE_PROFILE_OUT, IMAGES.VAMPIRE_PROFILE_IN, IMAGES.VAMPIRE_PROFILE_CLICK], __HD__, __NO_BREATH__, function () {
            init_profile(WORLD.MODE_VAMPIRES);
        }, -60, 260, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __PROFILE__;
        this.LEADERBOARD_TOTAL = COUNTER;
        this.buttons[COUNTER] = gui_create_button(143, 66, "", [IMAGES.TOTAL_LEAD_OUT, IMAGES.TOTAL_LEAD_IN, IMAGES.TOTAL_LEAD_CLICK], __HD__, __NO_BREATH__, function () {
            getLeaderboard(undefined, ui.LEADERBOARD_TOTAL);
        }, -298, 110, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __LEADERBOARD__;
        this.LEADERBOARD_NORMAL = COUNTER;
        this.buttons[COUNTER] = gui_create_button(104, 66, "", [IMAGES.NORMAL_LEAD_OUT, IMAGES.NORMAL_LEAD_IN, IMAGES.NORMAL_LEAD_CLICK], __HD__, __NO_BREATH__, function () {
            getLeaderboard(undefined, ui.LEADERBOARD_NORMAL);
        }, -223, 110, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __LEADERBOARD__;
        this.LEADERBOARD_FOREST = COUNTER;
        this.buttons[COUNTER] = gui_create_button(110, 66, "", [IMAGES.FOREST_LEAD_OUT, IMAGES.FOREST_LEAD_IN, IMAGES.FOREST_LEAD_CLICK], __HD__, __NO_BREATH__, function () {
            getLeaderboard(undefined, ui.LEADERBOARD_FOREST);
        }, -168, 110, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __LEADERBOARD__;
        this.LEADERBOARD_ZOMBIE = COUNTER;
        this.buttons[COUNTER] = gui_create_button(88, 66, "", [IMAGES.ZOMBIE_LEAD_OUT, IMAGES.ZOMBIE_LEAD_IN, IMAGES.ZOMBIE_LEAD_CLICK], __HD__, __NO_BREATH__, function () {
            getLeaderboard(undefined, ui.LEADERBOARD_ZOMBIE);
        }, -110, 110, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __LEADERBOARD__;
        this.LEADERBOARD_VAMPIRE = COUNTER;
        this.buttons[COUNTER] = gui_create_button(88, 66, "", [IMAGES.VAMPIRE_LEAD_OUT, IMAGES.VAMPIRE_LEAD_IN, IMAGES.VAMPIRE_LEAD_CLICK], __HD__, __NO_BREATH__, function () {
            getLeaderboard(undefined, ui.LEADERBOARD_VAMPIRE);
        }, -63, 110, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __LEADERBOARD__;
        this.buttons[COUNTER] = gui_create_button(86, 44, "", [IMAGES.TERMS_BUTTON_OUT, IMAGES.TERMS_BUTTON_IN, IMAGES.TERMS_BUTTON_CLICK], __HD__, __NO_BREATH__, function () {
            window.open("./terms.html", "_blank");
        }, 349, 290, __MIDDLE_X__ | __TOP__, __HIDE__);
        this.buttons[COUNTER++].view = __SHOP__;
        var skinSelector = new CosmeticSelector(COSMETICS.SKIN, FIRST_BUTTON_SKIN, function (v) {
            ui.skin = v;
            if (ui.unlock.skin[v] === 1)
                Cookies.set("starve_skin", "" + v, {
                    expires: 30
                });

        }, this.skin, this.unlock.skin);
        var bagSelector = new CosmeticSelector(COSMETICS.BAG, FIRST_BUTTON_BAG, function (v) {
            ui.bag = v;
            if (ui.unlock.bag[v] === 1)
                Cookies.set("starve_bag", "" + v, {
                    expires: 30
                });

        }, this.bag, this.unlock.bag);
        var bookSelector = new CosmeticSelector(COSMETICS.BOOK, FIRST_BUTTON_BOOK, function (v) {
            ui.book = v;
            if (ui.unlock.book[v] === 1)
                Cookies.set("starve_book", "" + v, {
                    expires: 30
                });

        }, this.book, this.unlock.book);
        var deadSelector = new CosmeticSelector(COSMETICS.CRATE, FIRST_BUTTON_CRATE, function (v) {
            ui.dead = v;
            if (ui.unlock.dead[v] === 1)
                Cookies.set("starve_dead", "" + v, {
                    expires: 30
                });

        }, this.dead, this.unlock.dead);
        var crateSelector = new CosmeticSelector(COSMETICS.CRATE, FIRST_BUTTON_LOOT, function (v) {
            ui.crate = v;
            if (ui.unlock.crate[v] === 1)
                Cookies.set("starve_crate", "" + v, {
                    expires: 30
                });

        }, this.crate, this.unlock.crate);
        var accessorySelector = new CosmeticSelector(COSMETICS.ACCESSORY, FIRST_BUTTON_ACCESSORY, function (v) {
            ui.accessory = v;
            if (ui.unlock.accessory[v] === 1)
                Cookies.set("starve_accessory", "" + v, {
                    expires: 30
                });

        }, this.accessory, this.unlock.accessory);
        this.trigger_mousedown = function (evt) {
            mouse.pos = get_mouse_pos(_this.can, evt);
            for (var i = 0; i < _this.buttons.length; i++) {
                if (_this.buttons[i].info.active === __DISPLAY__)
                    _this.buttons[i].trigger(_this.can, mouse.pos, MOUSE_DOWN);

            }
        };
        this.trigger_mouseup = function (evt) {
            mouse.pos = get_mouse_pos(_this.can, evt);
            for (var i = 0; i < _this.buttons.length; i++) {
                var button = _this.buttons[i];
                if (button.info.active === __DISPLAY__) {
                    if (button.trigger(_this.can, mouse.pos, MOUSE_UP)) {
                        button.info.callback();
                        return;
                    }
                }
            }
        };
        this.current_cursor = false;
        this.trigger_mousemove = function (evt) {
            mouse.pos = get_mouse_pos(_this.can, evt);
            var cursor = false;
            for (var i = 0; i < _this.buttons.length; i++) {
                if (_this.buttons[i].info.active === __DISPLAY__)
                    cursor |= _this.buttons[i].trigger(_this.can, mouse.pos, MOUSE_MOVE);

            }
            if (_this.current_cursor !== cursor) {
                _this.current_cursor = cursor;
                if (cursor)
                    can.style["cursor"] = _this.cursor1;
                else
                    can.style["cursor"] = _this.cursor0;
            }
        };
        this.add_event_listener = function () {
            window.addEventListener('mousedown', this.trigger_mousedown, false);
            window.addEventListener('mouseup', this.trigger_mouseup, false);
            window.addEventListener('mousemove', this.trigger_mousemove, false);
        };
        this.remove_event_listener = function () {
            window.removeEventListener('mousedown', this.trigger_mousedown, false);
            window.removeEventListener('mouseup', this.trigger_mouseup, false);
            window.removeEventListener('mousemove', this.trigger_mousemove, false);
        };
    };

    function Game(can, ctx) {
        var _this = this;
        this.can = can;
        this.ctx = ctx;
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            this.cursor0 = "default";
            this.cursor1 = "pointer";
        } else {
            this.cursor0 = "url(\'img/cursor0.png\'), default";
            this.cursor1 = "url(\'img/cursor1.png\'), pointer";
        }
        this.show_ui = 1;
        this.show_clock = 1;
        this.show_recipe_book = 1;
        this.show_quest = 1;
        this.team_box = {
            id: document.getElementById("team_box"),
            style: document.getElementById("team_box").style,
            update: function () {
                this.style.left = Math.floor(canw2 - 125) + "px";
                this.style.top = "110px";
            }
        };
        this.audio = {
            button_on: gui_create_button(60, 60, "", sprite[SPRITE.SOUND_BUTTON_ON]),
            button_off: gui_create_button(60, 60, "", sprite[SPRITE.SOUND_BUTTON_OFF])
        };
        this.sign = {
            open: false,
            breads: 0,
            symbol: document.getElementById("sign_object"),
            symbol_id: 0,
            id: document.getElementById("sign_window"),
            style: document.getElementById("sign_window").style,
            button: gui_create_button(60, 60, "", sprite[SPRITE.SIGN_BUTTON]),
            update_button: function () {
                var x = Math.floor((Math.floor((3 + user.craft.can_craft.length) / 4) * (10 + sprite[SPRITE.INV_WOOD][0].width)) + 35);
                this.button.info.translate.x = x;
                this.button.info.translate.y = 22;
            },
            update: function () {
                this.style.left = Math.floor(canw2 - 150) + "px";
                this.style.top = Math.floor(canh2 - 115) + "px";
            },
            quit: function () {
                game.sign.style.display = "none";
                game.sign.open = false;
            },
            select: function () {
                game.sign.open = !game.sign.open;
                if (game.sign.open)
                    game.sign.style.display = "inline-block";
                else
                    game.sign.style.display = "none";
            },
            ok: function () {
                client.update_sign(user.sign.iid, game.sign.symbol_id);
                game.sign.select();
            },
            up: function () {
                game.sign.symbol_id = (game.sign.symbol_id === 0) ? (CLIENT.SYMBOL_MAX - 1) : (game.sign.symbol_id - 1);
                game.sign.symbol.src = ('./img/sign' + game.sign.symbol_id) + '.png';
            },
            down: function () {
                game.sign.symbol_id = (game.sign.symbol_id + 1) % CLIENT.SYMBOL_MAX;
                game.sign.symbol.src = ('./img/sign' + game.sign.symbol_id) + '.png';
            }
        };
        document.getElementById("quit_sign").addEventListener('mouseup', this.sign.select, false);
        document.getElementById("ok_sign").addEventListener('mouseup', this.sign.ok, false);
        document.getElementById("sign_up").addEventListener('mouseup', this.sign.up, false);
        document.getElementById("sign_down").addEventListener('mouseup', this.sign.down, false);
        this.market = {
            open: false,
            id: document.getElementById("shop_market"),
            style: document.getElementById("shop_market").style,
            items: [{
                id: 0,
                name: "wood",
                val: 1,
                b: 1,
                a: 3,
                img_item: SPRITE.INV_WOOD
            }, {
                id: 1,
                name: "stone",
                val: 1,
                b: 1,
                a: 4,
                img_item: SPRITE.INV_STONE
            }, {
                id: 2,
                name: "gold",
                val: 1,
                b: 1,
                a: 6,
                img_item: SPRITE.INV_GOLD
            }, {
                id: 3,
                name: "diamond",
                val: 4,
                b: 4,
                a: 1,
                img_item: SPRITE.INV_DIAMOND
            }, {
                id: 4,
                name: "amethyst",
                val: 8,
                b: 8,
                a: 1,
                img_item: SPRITE.INV_AMETHYST
            }, {
                id: 5,
                name: "reidite",
                val: 16,
                b: 16,
                a: 1,
                img_item: SPRITE.INV_REIDITE
            }, {
                id: 6,
                name: "pumpkin_seed",
                val: 10,
                b: 10,
                a: 1,
                img_item: SPRITE.INV_PUMPKIN_SEED
            }, {
                id: 7,
                name: "carrot_seed",
                val: 16,
                b: 16,
                a: 1,
                img_item: SPRITE.INV_CARROT_SEED
            }, {
                id: 8,
                name: "tomato_seed",
                val: 20,
                b: 20,
                a: 1,
                img_item: SPRITE.INV_TOMATO_SEED
            }, {
                id: 9,
                name: "thornbush_seed",
                val: 30,
                b: 30,
                a: 1,
                img_item: SPRITE.INV_THORNBUSH_SEED
            }, {
                id: 10,
                name: "garlic_seed",
                val: 40,
                b: 40,
                a: 1,
                img_item: SPRITE.INV_GARLIC_SEED
            }, {
                id: 11,
                name: "watermelon_seed",
                val: 60,
                b: 60,
                a: 1,
                img_item: SPRITE.INV_WATERMELON_SEED
            }],
            button: gui_create_button(60, 60, "", sprite[SPRITE.MARKET_BUTTON]),
            update: function () {
                this.style.left = Math.floor(canw2 - 450) + "px";
                this.style.top = Math.floor(canh2 - 270) + "px";
            },
            select: function () {
                game.market.open = !game.market.open;
                if (game.market.open) {
                    game.market.style.display = "inline-block";
                } else
                    game.market.style.display = "none";
            },
            quit: function () {
                game.market.style.display = "none";
                game.market.open = false;
            },
            buy: function () {
                client.buy_market(this.itemMarket);
            },
            change: function () {
                var id = this.id;
                if (this.itemMarket.a === 1) {
                    var value = Math.floor(Number(this.value) * this.itemMarket.b);
                    this.itemMarket.val = value;
                    document.getElementById(this.itemMarket.name + "_trad_number").innerHTML = value + "";
                } else {
                    var value = Math.floor(Number(this.value) / this.itemMarket.a);
                    this.itemMarket.val = value;
                    document.getElementById(this.itemMarket.name + "_trad_number").innerHTML = value + "";
                }
            }
        };
        document.getElementById("quit_market").addEventListener('mouseup', this.market.quit, false);
        var binding = [
            ['mouseup', this.market.buy, 'buy_'],
            ['click', this.market.change, ''],
            ['change', this.market.change, ''],
            ['keypress', this.market.keypress, '']
        ];
        for (var j = 0; j < this.market.items.length; j++) {
            var item = this.market.items[j];
            document.getElementById(item.name + "_market").src = (sprite[item.img_item][0]._src === undefined) ? sprite[item.img_item][0].src : sprite[item.img_item][0]._src;
            if (item.a === 1) {
                document.getElementById(item.name + "_trad_number").innerHTML = item.b;
                document.getElementById(item.name + "_number").value = 1;
                document.getElementById(item.name + "_number").step = 1;
                document.getElementById(item.name + "_number").min = 1;
                document.getElementById(item.name + "_number").max = Math.floor(255 / item.b);
            } else {
                document.getElementById(item.name + "_trad_number").innerHTML = 1;
                document.getElementById(item.name + "_number").value = item.a;
                document.getElementById(item.name + "_number").step = item.a;
                document.getElementById(item.name + "_number").min = item.a;
            }
            document.getElementById(("buy_" + item.name) + "_number").itemMarket = item;
            document.getElementById(item.name + "_number").itemMarket = item;
            for (var i = 0; i < binding.length; i++)
                document.getElementById((binding[i][2] + item.name) + "_number").addEventListener(binding[i][0], binding[i][1], false);
        }
        $("[type=\'number\']").keypress(function (evt) {
            evt.preventDefault();
        });
        this.options = {
            open: false,
            id: document.getElementById("option_in_game"),
            style: document.getElementById("option_in_game").style,
            agree: document.getElementById("agree_ing").style,
            cancel_agree: document.getElementById("cancel_agree_ing").style,
            quests_agree: document.getElementById("quest_agree_ing").style,
            spectator_agree: document.getElementById("spectator_agree_ing").style,
            feed_agree: document.getElementById("auto_feed_agree_ing").style,
            info_box_agree: document.getElementById("info_agree_ing").style,
            aliasing_agree: document.getElementById("pixelated_agree_ing").style,
            button: gui_create_button(60, 60, "", sprite[SPRITE.OPTION_BUTTON]),
            select_options: function () {
                game.options.open = !game.options.open;
                if (game.options.open)
                    game.options.style.display = "inline-block";
                else
                    game.options.style.display = "none";
            },
            azerty: function () {
                ui.set_azerty();
            },
            qwerty: function () {
                ui.set_qwerty();
            },
            high: function () {
                ui.high_quality();
            },
            low: function () {
                ui.low_quality();
            },
            checkbox: function () {
                game.safe_delete.checkbox();
            },
            cancel_checkbox: function () {
                game.safe_cancel.checkbox();
            },
            quest_checkbox: function () {
                game.quests.checkbox();
            },
            spectator_checkbox: function () {
                user.show_spectators.invert();
            },
            feed_checkbox: function () {
                user.auto_feed.invert();
            },
            quit: function () {
                game.options.style.display = "none";
                game.options.open = false;
            },
            update: function () {
                this.style.left = Math.floor(canw2 - 235) + "px";
                this.style.top = Math.floor(canh2 - 170) + "px";
            }
        };
        document.getElementById("azerty_ing").addEventListener('mouseup', this.options.azerty, false);
        document.getElementById("qwerty_ing").addEventListener('mouseup', this.options.qwerty, false);
        document.getElementById("low_ing").addEventListener('mouseup', this.options.low, false);
        document.getElementById("high_ing").addEventListener('mouseup', this.options.high, false);
        document.getElementById("quit_opt").addEventListener('mouseup', this.options.quit, false);
        document.getElementById("case_agree_opt").addEventListener('mouseup', this.options.checkbox, false);
        document.getElementById("quest_case_agree_opt").addEventListener('mouseup', this.options.quest_checkbox, false);
        document.getElementById("cancel_case_agree_opt").addEventListener('mouseup', this.options.cancel_checkbox, false);
        document.getElementById("spectator_case_agree_opt").addEventListener('mouseup', this.options.spectator_checkbox, false);
        document.getElementById("auto_feed_case_agree_opt").addEventListener('mouseup', this.options.feed_checkbox, false);
        this.safe_cancel = {
            open: false,
            activated: Cookies.get("starve_cancel") ? ((Cookies.get("starve_cancel") === "0") ? 0 : 1) : 1,
            id: document.getElementById("cancel_sure_delete"),
            style: document.getElementById("cancel_sure_delete").style,
            agree: document.getElementById("cancel_agree").style,
            button: 0,
            i: 0,
            quit: function () {
                game.safe_cancel.style.display = "none";
                game.safe_cancel.open = false;
            },
            yes: function () {
                if (user.craft.crafting)
                    client.cancel_crafting();

                game.safe_cancel.quit();
            },
            checkbox: function () {
                if (!game.safe_cancel.activated) {
                    Cookies.set("starve_cancel", "1");
                    game.safe_cancel.agree.display = "none";
                    game.options.cancel_agree.display = "inline-block";
                } else {
                    Cookies.set("starve_cancel", "0");
                    game.safe_cancel.agree.display = "inline-block";
                    game.options.cancel_agree.display = "none";
                }
                game.safe_cancel.activated = !game.safe_cancel.activated;
            },
            del: function () {
                if (!this.activated)
                    this.yes();
                else {
                    this.style.display = "inline-block";
                    this.open = true;
                }
            },
            update: function () {
                this.style.left = Math.floor(canw2 - 235) + "px";
                this.style.top = Math.floor(canh2 - 130) + "px";
            }
        };
        this.safe_cancel.id.oncontextmenu = function () {
            return false;
        };
        this.safe_cancel.agree.display = "none";
        if (this.safe_cancel.activated)
            this.options.cancel_agree.display = "inline-block";
        else
            this.options.cancel_agree.display = "none";
        document.getElementById("cancel_yes_delete").addEventListener('mouseup', this.safe_cancel.yes, false);
        document.getElementById("cancel_no_delete").addEventListener('mouseup', this.safe_cancel.quit, false);
        document.getElementById("cancel_case_agree").addEventListener('mouseup', this.safe_cancel.checkbox, false);
        document.addEventListener("cancel_sure_delete", function (e) {
            e.preventDefault();
        }, false);
        this.aliasing = {
            activated: Cookies.get("starve_aliasing") ? ((Cookies.get("starve_aliasing") === "0") ? 0 : 1) : 1,
            set_aliasing: function (val) {
                if (val)
                    document.getElementById("game_canvas").style.imageRendering = "pixelated";
                else
                    document.getElementById("game_canvas").style.imageRendering = "auto";
            },
            checkbox: function () {
                if (game.aliasing.activated === 0) {
                    Cookies.set("starve_aliasing", "1");
                    game.aliasing.set_aliasing(1);
                    game.options.aliasing_agree.display = "inline-block";
                } else {
                    Cookies.set("starve_aliasing", "0");
                    game.aliasing.set_aliasing(0);
                    game.options.aliasing_agree.display = "none";
                }
                game.aliasing.activated = (game.aliasing.activated + 1) % 2;
            }
        };
        if (this.aliasing.activated === 1)
            this.options.aliasing_agree.display = "inline-block";
        else {
            this.aliasing.set_aliasing(0);
            this.options.aliasing_agree.display = "none";
        }
        document.getElementById("pixelated_case_agree_opt").addEventListener('mouseup', this.aliasing.checkbox, false);
        this.info_box = {
            activated: Cookies.get("starve_info_box") ? ((Cookies.get("starve_info_box") === "0") ? 0 : 1) : 1,
            display: 0,
            x: 0,
            y: 0,
            id: 0,
            craft: 0,
            checkbox: function () {
                if (game.info_box.activated === 0) {
                    Cookies.set("starve_info_box", "1");
                    game.options.info_box_agree.display = "inline-block";
                } else {
                    Cookies.set("starve_info_box", "0");
                    game.options.info_box_agree.display = "none";
                }
                game.info_box.activated = (game.info_box.activated + 1) % 2;
            },
            trigger: function (on, button, craft) {
                if (on && this.activated) {
                    this.display = 1;
                    if (craft === 0)
                        this.id = button.id;
                    else
                        this.id = RECIPES[button.id].id2;
                    this.x = button.info.translate.x + 80;
                    this.y = button.info.translate.y;
                    this.craft = craft;
                }
                return on;
            }
        };
        if (this.info_box.activated === 1)
            this.options.info_box_agree.display = "inline-block";
        else
            this.options.info_box_agree.display = "none";
        document.getElementById("info_case_agree_opt").addEventListener('mouseup', this.info_box.checkbox, false);
        if (Cookies.get("starve_scale")) {
            ratio_opt = Number(Cookies.get("starve_scale"));
            document.getElementById("input_ratio").value = ratio_opt;
            ratio_opt *= devicePixelRatio / backingStoreRatio;
            resize_canvas();
        }
        this.change_ratio = function () {
            Cookies.set("starve_scale", "" + document.getElementById("input_ratio").value);
            ratio_opt = document.getElementById("input_ratio").value * (devicePixelRatio / backingStoreRatio);
            resize_canvas();
        };
        document.getElementById("input_ratio").addEventListener('input', this.change_ratio, false);
        this.safe_delete = {
            open: false,
            activated: Cookies.get("starve_safe") ? ((Cookies.get("starve_safe") === "0") ? 0 : 1) : 1,
            id: document.getElementById("sure_delete"),
            style: document.getElementById("sure_delete").style,
            agree: document.getElementById("agree").style,
            button: 0,
            i: 0,
            quit: function () {
                game.safe_delete.style.display = "none";
                game.safe_delete.open = false;
            },
            all: function () {
                if (!user.build.wait) {
                    if (((user.craft.preview < 0) && (user.craft.id < 0)) && !user.ghost.enabled)
                        client.delete_inv(game.safe_delete.button);

                    game.safe_delete.quit();
                }
            },
            recycle: function () {
                if (user.craft.workbench && !user.build.wait) {
                    if (((user.craft.preview < 0) && (user.craft.id < 0)) && !user.ghost.enabled)
                        client.recycle_inv(game.safe_delete.button);

                    game.safe_delete.quit();
                }
            },
            one: function () {
                if (!user.build.wait) {
                    if (((user.craft.preview < 0) && (user.craft.id < 0)) && !user.ghost.enabled)
                        client.delete_one_inv(game.safe_delete.button);

                    game.safe_delete.quit();
                }
            },
            checkbox: function () {
                if (!game.safe_delete.activated) {
                    Cookies.set("starve_safe", "1");
                    game.safe_delete.agree.display = "none";
                    game.options.agree.display = "inline-block";
                } else {
                    Cookies.set("starve_safe", "0");
                    game.safe_delete.agree.display = "inline-block";
                    game.options.agree.display = "none";
                }
                game.safe_delete.activated = !game.safe_delete.activated;
            },
            del: function (button) {
                this.button = button;
                document.getElementById("item_to_del").src = (sprite[INV_INFOS[button].img][0]._src === undefined) ? sprite[INV_INFOS[button].img][0].src : sprite[INV_INFOS[button].img][0]._src;
                if ((INV_INFOS[button].recycle && !user.zombie) && user.craft.workbench)
                    document.getElementById("recycle_delete").style.display = "inline-block";
                else
                    document.getElementById("recycle_delete").style.display = "none";
                if (!this.activated)
                    this.all();
                else {
                    this.style.display = "inline-block";
                    this.open = true;
                }
            },
            update: function () {
                this.style.left = Math.floor(canw2 - 235) + "px";
                this.style.top = Math.floor(canh2 - 175) + "px";
            }
        };
        this.safe_delete.agree.display = "none";
        if (this.safe_delete.activated)
            this.options.agree.display = "inline-block";
        else
            this.options.agree.display = "none";
        document.getElementById("one_delete").addEventListener('mouseup', this.safe_delete.one, false);
        document.getElementById("yes_delete").addEventListener('mouseup', this.safe_delete.all, false);
        document.getElementById("recycle_delete").addEventListener('mouseup', this.safe_delete.recycle, false);
        document.getElementById("no_delete").addEventListener('mouseup', this.safe_delete.quit, false);
        document.getElementById("case_agree").addEventListener('mouseup', this.safe_delete.checkbox, false);
        this.shop = {
            open: false,
            kit: -1,
            button: gui_create_button(60, 60, "", sprite[SPRITE.SHOP]),
            id: document.getElementById("shop_starterkit"),
            style: document.getElementById("shop_starterkit").style,
            update: function () {
                this.style.left = Math.floor(canw2 - 300) + "px";
                this.style.top = Math.floor(canh2 - 215) + "px";
            },
            quit: function () {
                game.shop.open = false;
                game.shop.style.display = "none";
            },
            select: function () {
                game.shop.open = !game.shop.open;
                if (!game.shop.open)
                    game.shop.style.display = "none";
                else
                    game.shop.style.display = "inline-block";
            },
            buy: function () {
                if (game.shop.kit >= 0) {
                    client.choose_kit(game.shop.kit);
                    game.shop.quit();

                }
            },
            init: function () {
                var price = user.shop.value;
                document.getElementById("points_bank").innerHTML = Utils.simplify_number(price) + " points";
                for (var i = 0; i < KIT.length; i++) {
                    if (KIT[i].price > price)
                        document.getElementById("starter" + (i + 1)).style["opacity"] = "0.4";
                    else
                        document.getElementById("starter" + (i + 1)).style["opacity"] = "1";
                }
                for (i = 1; i < 13; i++) {
                    document.getElementById("inv_shop" + i).src = "./img/empty-shop.png";
                    document.getElementById("amount_shop" + i).innerHTML = "";
                }
                document.getElementById("buy_kit").style["opacity"] = "0.2";
            },
            get_starter: function () {
                if (this.id.length > 8)
                    var id = Number(this.id.charAt(7) + this.id.charAt(8));
                else
                    var id = Number(this.id.charAt(7));
                var s = KIT[id - 1];
                if (user.shop.value >= s.price) {
                    game.shop.kit = id;
                    document.getElementById("buy_kit").style["opacity"] = "1";
                } else {
                    game.shop.kit = -1;
                    document.getElementById("buy_kit").style["opacity"] = "0.2";
                }
                s = s.items;
                for (var i = 1, j = 1; i < (s.length + 1); i++) {
                    if (s[i - 1][1] === INV.BAG)
                        continue;

                    document.getElementById("inv_shop" + j).style.display = "inline-block";
                    document.getElementById("inv_shop" + j).src = (sprite[INV_INFOS[s[i - 1][1]].img][0]._src === undefined) ? sprite[INV_INFOS[s[i - 1][1]].img][0].src : sprite[INV_INFOS[s[i - 1][1]].img][0]._src;
                    document.getElementById("amount_shop" + j).innerHTML = "" + s[i - 1][0];
                    j++;
                }
                for (; j < 13; j++) {
                    document.getElementById("inv_shop" + j).src = "./img/empty-shop.png";
                    document.getElementById("amount_shop" + j).innerHTML = "";
                }
            }
        };
        document.getElementById("quit3").addEventListener('mouseup', this.shop.quit, false);
        document.getElementById("buy_kit").addEventListener('mouseup', this.shop.buy, false);
        for (var i = 1; i < 11; i++)
            document.getElementById("starter" + i).addEventListener('mouseup', this.shop.get_starter, false);
        this.quests = {
            open: false,
            activated: Cookies.get("starve_quests") ? ((Cookies.get("starve_quests") === "1") ? 1 : 0) : 0,
            button: gui_create_button(60, 60, "", sprite[SPRITE.QUEST_BUTTON]),
            id: document.getElementById("chronoquest"),
            style: document.getElementById("chronoquest").style,
            update: function () {
                this.style.left = Math.floor(canw2 - 420) + "px";
                this.style.top = Math.floor(canh2 - 270) + "px";
            },
            quit: function () {
                game.quests.style.display = "none";
                game.quests.open = false;
            },
            select: function () {
                game.quests.open = !game.quests.open;
                if (!game.quests.open)
                    game.quests.style.display = "none";
                else
                    game.quests.style.display = "inline-block";
            },
            list: [],
            reset: function () {
                for (var i = 0; i < QUESTS.length; i++) {
                    this.list[i] = 1;
                    document.getElementById("timeremain_" + i).style.display = "inline-block";
                    document.getElementById("time_finished_" + i).style.display = "none";
                    document.getElementById("claim_reward_" + i).style.display = "none";
                }
            },
            timer: 0,
            born: 0,
            update_chrono: function () {
                if (!game.quests.open)
                    return;

                var now = (new Date).getTime();
                if ((now - this.timer) < 1000)
                    return;

                this.timer = now;
                for (var i = 0; i < QUESTS.length; i++) {
                    if (!game.quests.list[i])
                        continue;

                    var t = QUESTS[i].time - ((now - world.clock.init) + game.quests.born);
                    if (t > 960000) {
                        document.getElementById("timeremain_" + i).innerHTML = Math.floor(t / 480000) + " days";
                    } else if (t > 480000) {
                        document.getElementById("timeremain_" + i).innerHTML = Math.floor(t / 480000) + " day";
                    } else if (t > 60000) {
                        document.getElementById("timeremain_" + i).innerHTML = Math.floor(t / 60000) + " min";
                    } else
                        document.getElementById("timeremain_" + i).innerHTML = Math.floor(t / 1000) + " sec";
                }
            },
            restore: function (l) {
                for (var i = 0; i < l.length; i++) {
                    if (l[i] != 1)
                        game.quests.modify_simple(i, l[i]);

                }
            },
            modify_simple: function (id, type) {
                if ((type === 3) && ((id === 11) || (id === 12))) {
                    user.inv.update_bag_size(0, 1);
                    game.update_inv_buttons();
                }
                document.getElementById("timeremain_" + id).innerHTML = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
                if (type > 1) {
                    document.getElementById("time_finished_" + id).innerHTML = "SUCCEED";
                    document.getElementById("timeremain_" + id).style.display = "none";
                } else if (type === 0) {
                    document.getElementById("time_finished_" + id).innerHTML = "FAILED";
                    document.getElementById("timeremain_" + id).style.display = "none";
                }
                if (type === 2)
                    document.getElementById("claim_reward_" + id).style.display = "inline-block";
                else
                    document.getElementById("claim_reward_" + id).style.display = "none";
                document.getElementById("time_finished_" + id).style.display = "inline";
                game.quests.list[id] = 0;
            },
            modify: function (id, type) {
                game.quests.modify_simple(id, type);
                if (game.quests.activated) {
                    game.quests.open = true;
                    game.quests.style.display = "inline-block";
                }
            },
            checkbox: function () {
                if (!game.quests.activated) {
                    Cookies.set("starve_quests", "1");
                    game.options.quests_agree.display = "inline-block";
                } else {
                    Cookies.set("starve_quests", "0");
                    game.options.quests_agree.display = "none";
                }
                game.quests.activated = !game.quests.activated;
            },
            claim: function () {
                var n = Number(this.id.charAt(13));
                var m = Number(this.id.charAt(14));
                if (((this.id.charAt(14) !== "") && (m >= 0)) && (m <= 9))
                    n = (n * 10) + m;

                client.claim_quest_reward(n);
            }
        };
        if (this.quests.activated)
            this.options.quests_agree.display = "inline-block";
        else
            this.options.quests_agree.display = "none";
        document.getElementById("quit_chronoquest").addEventListener('mouseup', this.quests.quit, false);
        for (var i = 0; i < QUESTS.length; i++)
            document.getElementById("claim_reward_" + i).addEventListener('mouseup', this.quests.claim, false);
        this.craft_list = {
            open: false,
            button: gui_create_button(60, 60, "", sprite[SPRITE.RECIPE_BUTTON]),
            list: {
                id: document.getElementById("recipe_craft"),
                style: document.getElementById("recipe_craft").style,
                recipes: [],
                category: 0,
                update: function () {
                    this.style.left = Math.floor(canw2 - 335) + "px";
                    this.style.top = Math.floor(canh2 - 215) + "px";
                },
                quit: function () {
                    document.getElementById("recipe_craft").style.display = "none";
                    game.craft_list.open = false;
                },
                previous: function () {
                    document.getElementById("recipe_craft").style.display = "none";
                    document.getElementById("home_craft").style.display = "inline-block";
                },
                get_recipe: function (i) {
                    var r = this.recipes[i];
                    if (r.o)
                        document.getElementById("watercraft").style.display = "inline-block";
                    else
                        document.getElementById("watercraft").style.display = "none";
                    if (r.f)
                        document.getElementById("firecraft").style.display = "inline-block";
                    else
                        document.getElementById("firecraft").style.display = "none";
                    if (r.w)
                        document.getElementById("workcraft").style.display = "inline-block";
                    else
                        document.getElementById("workcraft").style.display = "none";
                    if (r.e)
                        document.getElementById("wellcraft").style.display = "inline-block";
                    else
                        document.getElementById("wellcraft").style.display = "none";
                    var r = r.r;
                    for (var i = 0, j = 1; i < r.length; i++) {
                        document.getElementById("inv" + j).style.display = "inline-block";
                        document.getElementById("inv" + j).src = (sprite[INV_INFOS[r[i][0]].img][0]._src === undefined) ? sprite[INV_INFOS[r[i][0]].img][0].src : sprite[INV_INFOS[r[i][0]].img][0]._src;
                        document.getElementById("numb" + j).innerHTML = "" + r[i][1];
                        j++;
                    }
                    for (; j < 6; j++) {
                        document.getElementById("inv" + j).style.display = "none";
                        document.getElementById("numb" + j).innerHTML = "";
                    }
                },
                select: function (category) {
                    this.category = category;
                    document.getElementById("home_craft").style.display = "none";
                    document.getElementById("workcraft").style.display = "none";
                    document.getElementById("firecraft").style.display = "none";
                    document.getElementById("watercraft").style.display = "none";
                    document.getElementById("wellcraft").style.display = "none";
                    document.getElementById("recipe_craft").style.display = "inline-block";
                    document.getElementById("inv1").style.display = "none";
                    document.getElementById("inv2").style.display = "none";
                    document.getElementById("inv3").style.display = "none";
                    document.getElementById("inv4").style.display = "none";
                    document.getElementById("inv5").style.display = "none";
                    document.getElementById("numb1").innerHTML = "";
                    document.getElementById("numb2").innerHTML = "";
                    document.getElementById("numb3").innerHTML = "";
                    document.getElementById("numb4").innerHTML = "";
                    document.getElementById("numb5").innerHTML = "";
                    for (var i = 0, j = 0; i < RECIPES.length; i++) {
                        var r = RECIPES[i];
                        if (category === r.t) {
                            this.recipes[j] = r;
                            j++;
                            document.getElementById("img_" + j).style.display = "inline-block";
                            document.getElementById("img_" + j).src = (sprite[INV_INFOS[r.id2].img][0]._src === undefined) ? sprite[INV_INFOS[r.id2].img][0].src : sprite[INV_INFOS[r.id2].img][0]._src;
                        }
                    }
                    for (j++; j < 49; j++)
                        document.getElementById("img_" + j).style.display = "none";
                }
            },
            home: {
                id: document.getElementById("home_craft"),
                style: document.getElementById("home_craft").style,
                update: function () {
                    this.style.left = Math.floor(canw2 - 285) + "px";
                    this.style.top = Math.floor(canh2 - 170) + "px";
                },
                quit: function () {
                    document.getElementById("home_craft").style.display = "none";
                    game.craft_list.open = false;
                }
            },
            select_book: function () {
                this.open = !this.open;
                if (!this.open) {
                    document.getElementById("home_craft").style.display = "none";
                    document.getElementById("recipe_craft").style.display = "none";
                } else
                    document.getElementById("home_craft").style.display = "inline-block";
            }
        };
        document.getElementById("quit").addEventListener('mouseup', this.craft_list.home.quit, false);
        document.getElementById("quitmenu").addEventListener('mouseup', this.craft_list.list.quit, false);
        document.getElementById("backhome").addEventListener('mouseup', this.craft_list.list.previous, false);
        document.getElementById("hatcategory").addEventListener('mouseup', function () {
            game.craft_list.list.select(CATEGORY.CLOTHES);
        }, false);
        document.getElementById("weaponcategory").addEventListener('mouseup', function () {
            game.craft_list.list.select(CATEGORY.WEAPONS);
        }, false);
        document.getElementById("toolcategory").addEventListener('mouseup', function () {
            game.craft_list.list.select(CATEGORY.TOOLS);
        }, false);
        document.getElementById("foodcategory").addEventListener('mouseup', function () {
            game.craft_list.list.select(CATEGORY.FOODS);
        }, false);
        document.getElementById("placeablecategory").addEventListener('mouseup', function () {
            game.craft_list.list.select(CATEGORY.UTILS);
        }, false);
        document.getElementById("constructioncategory").addEventListener('mouseup', function () {
            game.craft_list.list.select(CATEGORY.BASES);
        }, false);
        document.getElementById("img_1").addEventListener('mousedown', function () {
            game.craft_list.list.get_recipe(0);
        }, false);
        document.getElementById("img_2").addEventListener('mousedown', function () {
            game.craft_list.list.get_recipe(1);
        }, false);
        document.getElementById("img_3").addEventListener('mousedown', function () {
            game.craft_list.list.get_recipe(2);
        }, false);
        document.getElementById("img_4").addEventListener('mousedown', function () {
            game.craft_list.list.get_recipe(3);
        }, false);
        document.getElementById("img_5").addEventListener('mousedown', function () {
            game.craft_list.list.get_recipe(4);
        }, false);
        document.getElementById("img_6").addEventListener('mousedown', function () {
            game.craft_list.list.get_recipe(5);
        }, false);
        document.getElementById("img_7").addEventListener('mousedown', function () {
            game.craft_list.list.get_recipe(6);
        }, false);
        document.getElementById("img_8").addEventListener('mousedown', function () {
            game.craft_list.list.get_recipe(7);
        }, false);
        document.getElementById("img_9").addEventListener('mousedown', function () {
            game.craft_list.list.get_recipe(8);
        }, false);
        document.getElementById("img_10").addEventListener('mousedown', function () {
            game.craft_list.list.get_recipe(9);
        }, false);
        document.getElementById("img_11").addEventListener('mousedown', function () {
            game.craft_list.list.get_recipe(10);
        }, false);
        document.getElementById("img_12").addEventListener('mousedown', function () {
            game.craft_list.list.get_recipe(11);
        }, false);
        document.getElementById("img_13").addEventListener('mousedown', function () {
            game.craft_list.list.get_recipe(12);
        }, false);
        document.getElementById("img_14").addEventListener('mousedown', function () {
            game.craft_list.list.get_recipe(13);
        }, false);
        document.getElementById("img_15").addEventListener('mousedown', function () {
            game.craft_list.list.get_recipe(14);
        }, false);
        document.getElementById("img_16").addEventListener('mousedown', function () {
            game.craft_list.list.get_recipe(15);
        }, false);
        document.getElementById("img_17").addEventListener('mousedown', function () {
            game.craft_list.list.get_recipe(16);
        }, false);
        document.getElementById("img_18").addEventListener('mousedown', function () {
            game.craft_list.list.get_recipe(17);
        }, false);
        document.getElementById("img_19").addEventListener('mousedown', function () {
            game.craft_list.list.get_recipe(18);
        }, false);
        document.getElementById("img_20").addEventListener('mousedown', function () {
            game.craft_list.list.get_recipe(19);
        }, false);
        document.getElementById("img_21").addEventListener('mousedown', function () {
            game.craft_list.list.get_recipe(20);
        }, false);
        document.getElementById("img_22").addEventListener('mousedown', function () {
            game.craft_list.list.get_recipe(21);
        }, false);
        document.getElementById("img_23").addEventListener('mousedown', function () {
            game.craft_list.list.get_recipe(22);
        }, false);
        document.getElementById("img_24").addEventListener('mousedown', function () {
            game.craft_list.list.get_recipe(23);
        }, false);
        document.getElementById("img_25").addEventListener('mousedown', function () {
            game.craft_list.list.get_recipe(24);
        }, false);
        document.getElementById("img_26").addEventListener('mousedown', function () {
            game.craft_list.list.get_recipe(25);
        }, false);
        document.getElementById("img_27").addEventListener('mousedown', function () {
            game.craft_list.list.get_recipe(26);
        }, false);
        document.getElementById("img_28").addEventListener('mousedown', function () {
            game.craft_list.list.get_recipe(27);
        }, false);
        document.getElementById("img_29").addEventListener('mousedown', function () {
            game.craft_list.list.get_recipe(28);
        }, false);
        document.getElementById("img_30").addEventListener('mousedown', function () {
            game.craft_list.list.get_recipe(29);
        }, false);
        document.getElementById("img_31").addEventListener('mousedown', function () {
            game.craft_list.list.get_recipe(30);
        }, false);
        document.getElementById("img_32").addEventListener('mousedown', function () {
            game.craft_list.list.get_recipe(31);
        }, false);
        document.getElementById("img_33").addEventListener('mousedown', function () {
            game.craft_list.list.get_recipe(32);
        }, false);
        document.getElementById("img_34").addEventListener('mousedown', function () {
            game.craft_list.list.get_recipe(33);
        }, false);
        document.getElementById("img_35").addEventListener('mousedown', function () {
            game.craft_list.list.get_recipe(34);
        }, false);
        document.getElementById("img_36").addEventListener('mousedown', function () {
            game.craft_list.list.get_recipe(35);
        }, false);
        document.getElementById("img_37").addEventListener('mousedown', function () {
            game.craft_list.list.get_recipe(36);
        }, false);
        document.getElementById("img_38").addEventListener('mousedown', function () {
            game.craft_list.list.get_recipe(37);
        }, false);
        document.getElementById("img_39").addEventListener('mousedown', function () {
            game.craft_list.list.get_recipe(38);
        }, false);
        document.getElementById("img_40").addEventListener('mousedown', function () {
            game.craft_list.list.get_recipe(39);
        }, false);
        document.getElementById("img_41").addEventListener('mousedown', function () {
            game.craft_list.list.get_recipe(40);
        }, false);
        document.getElementById("img_42").addEventListener('mousedown', function () {
            game.craft_list.list.get_recipe(41);
        }, false);
        document.getElementById("img_43").addEventListener('mousedown', function () {
            game.craft_list.list.get_recipe(42);
        }, false);
        document.getElementById("img_44").addEventListener('mousedown', function () {
            game.craft_list.list.get_recipe(43);
        }, false);
        document.getElementById("img_45").addEventListener('mousedown', function () {
            game.craft_list.list.get_recipe(44);
        }, false);
        document.getElementById("img_46").addEventListener('mousedown', function () {
            game.craft_list.list.get_recipe(45);
        }, false);
        document.getElementById("img_47").addEventListener('mousedown', function () {
            game.craft_list.list.get_recipe(46);
        }, false);
        document.getElementById("img_48").addEventListener('mousedown', function () {
            game.craft_list.list.get_recipe(47);
        }, false);
        this.minimap = {
            translate: {
                x: 0,
                y: 0
            },
            marker: {
                x: -1,
                y: -1
            },
            players: [],
            focus: function (mouse) {
                var y = this.translate.y + ((user.inv.can_select.length > 0) ? -120 : -50);
                if ((((mouse.x > this.translate.x) && (mouse.x < (this.translate.x + 193))) && (mouse.y > y)) && (mouse.y < (y + 193))) {
                    this.marker.x = mouse.x - this.translate.x;
                    this.marker.y = mouse.y - y;
                }
            }
        };
        this.leaderboard = {
            translate: {
                x: 0,
                y: 0
            },
            img: sprite[SPRITE.LEADERBOARD],
            can: document.createElement('canvas')
        };
        this.leaderboard.can.width = this.leaderboard.img.width;
        this.leaderboard.can.height = this.leaderboard.img.height;
        this.leaderboard.ctx = this.leaderboard.can.getContext('2d');
        this.gauges = {
            translate: {
                x: 0,
                y: 0
            },
            img: sprite[SPRITE.GAUGES],
            draw: draw_gauges,
            y: 0
        };
        this.leave_team = function () {
            div = document.getElementById("team_box");
            div.innerHTML = "";
            div.innerHTML += ('<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>' + world.players[user.team[0]].nickname) + '</div';
            for (var i = 1; i < user.team.length; i++) {
                div.innerHTML += ('<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">' + world.players[user.team[i]].nickname) + '</div></div>';
            }
            div.innerHTML += '<div id=\"leave\" style=\"display:inline-block;\">LEAVE</div></div>';
            div.style.display = "inline-block";
            document.getElementById("leave").addEventListener('click', client.leave_team, false);
        };
        this.show_team = function () {
            div = document.getElementById("team_box");
            div.innerHTML = "";
            div.innerHTML += ('<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>' + world.players[user.team[0]].nickname) + '</div';
            for (var i = 1; i < user.team.length; i++) {
                div.innerHTML += ('<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">' + world.players[user.team[i]].nickname) + '</div></div>';
            }
            div.innerHTML += "</div>";
            div.style.display = "inline-block";
        };
        this.manage_team = function () {
            div = document.getElementById("team_box");
            div.innerHTML = "";
            div.innerHTML += ('<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>' + world.players[user.team[0]].nickname) + '</div';
            for (var i = 1; i < user.team.length; i++)
                div.innerHTML += ((('<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">' + world.players[user.team[i]].nickname) + '</div><div class=\"eject_member\" id=\"eject_member') + i) + '\"><img src=\"./img/close-team.png\" style=\"width:20px;padding:5px;\"></img></div>';
            if (user.totem.lock === 0)
                div.innerHTML += '<div id=\"lock_team\" style=\"display:inline-block;\">LOCK</div></div>';
            else
                div.innerHTML += '<div id=\"lock_team\" style=\"display:inline-block;\">UNLOCK</div></div>';
            document.getElementById("lock_team").addEventListener('click', client.lock_team, false);
            div.style.display = "inline-block";
            for (var i = 1; i < user.team.length; i++) {
                switch (i) {
                    case 1:
                        document.getElementById("eject_member" + i).addEventListener('click', function () {
                            client.kick_team(1);
                        }, false);
                        break;
                    case 2:
                        document.getElementById("eject_member" + i).addEventListener('click', function () {
                            client.kick_team(2);
                        }, false);
                        break;
                    case 3:
                        document.getElementById("eject_member" + i).addEventListener('click', function () {
                            client.kick_team(3);
                        }, false);
                        break;
                    case 4:
                        document.getElementById("eject_member" + i).addEventListener('click', function () {
                            client.kick_team(4);
                        }, false);
                        break;
                    case 5:
                        document.getElementById("eject_member" + i).addEventListener('click', function () {
                            client.kick_team(5);
                        }, false);
                        break;
                    case 6:
                        document.getElementById("eject_member" + i).addEventListener('click', function () {
                            client.kick_team(6);
                        }, false);
                        break;
                    case 7:
                        document.getElementById("eject_member" + i).addEventListener('click', function () {
                            client.kick_team(7);
                        }, false);
                        break;
                    case 8:
                        document.getElementById("eject_member" + i).addEventListener('click', function () {
                            client.kick_team(8);
                        }, false);
                        break;
                }
            }
        };
        this.team_buttons = [];
        this.team_buttons[CLIENT.TEAM_LEAVE] = {
            button: gui_create_button(60, 60, "", sprite[SPRITE.TEAM_BUTTON]),
            action: this.leave_team
        };
        this.team_buttons[CLIENT.TEAM_JOIN] = {
            button: gui_create_button(60, 60, "", sprite[SPRITE.TEAM_BUTTON]),
            action: client.join_team
        };
        this.team_buttons[CLIENT.TEAM_MANAGE] = {
            button: gui_create_button(60, 60, "", sprite[SPRITE.MANAGE_TEAM_BUTTON]),
            action: this.manage_team
        };
        this.team_buttons[CLIENT.TEAM_SHOW] = {
            button: gui_create_button(60, 60, "", sprite[SPRITE.SHOW_TEAM_BUTTON]),
            action: this.show_team
        };
        this.team_buttons[CLIENT.TEAM_FULL] = {
            button: gui_create_button(60, 60, "", sprite[SPRITE.FULL_TEAM_BUTTON]),
            action: function () {}
        };
        this.team_buttons_id = -1;
        this.bread_oven_wood_button = gui_create_button(60, 60, "", sprite[SPRITE.BREAD_OVEN_WOOD]);
        this.bread_oven_bread_button = gui_create_button(60, 60, "", sprite[SPRITE.BREAD_OVEN_BREAD]);
        this.bread_oven_flour_button = gui_create_button(60, 60, "", sprite[SPRITE.WINDMILL_FLOUR]);
        this.windmill_wheat_button = gui_create_button(60, 60, "", sprite[SPRITE.WINDMILL_WHEAT_SEED]);
        this.windmill_flour_button = gui_create_button(60, 60, "", sprite[SPRITE.WINDMILL_FLOUR]);
        this.extractor_wood_button = gui_create_button(60, 60, "", sprite[SPRITE.INV_WOOD]);
        this.extractor_stone_button = gui_create_button(60, 60, "", sprite[SPRITE.INV_STONE]);
        this.extractor_gold_button = gui_create_button(60, 60, "", sprite[SPRITE.INV_GOLD]);
        this.extractor_diamond_button = gui_create_button(60, 60, "", sprite[SPRITE.INV_DIAMOND]);
        this.extractor_amethyst_button = gui_create_button(60, 60, "", sprite[SPRITE.INV_AMETHYST]);
        this.extractor_reidite_button = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE]);
        this.furnace_button = gui_create_button(60, 60, "", sprite[SPRITE.FURNACE_BUTTON]);
        this.chest_padlock = gui_create_button(60, 60, "", sprite[SPRITE.PADLOCK]);
        this.chest_lockpick = gui_create_button(60, 60, "", sprite[SPRITE.KEY]);
        this.chest_locked = gui_create_button(60, 60, "", sprite[SPRITE.LOCKED]);
        this.resurrection = gui_create_button(120, 120, "", sprite[SPRITE.DRAGON_HEART]);
        this.resurrection.info.translate.x = 10;
        this.resurrection.info.translate.y = 10;
        this.chest_buttons = [];
        this.chest_buttons[INV.SWORD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SWORD], 3);
        this.chest_buttons[INV.SWORD].id = INV.SWORD;
        this.chest_buttons[INV.PICK] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PICK], 3);
        this.chest_buttons[INV.PICK].id = INV.PICK;
        this.chest_buttons[INV.STONE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_STONE], 3);
        this.chest_buttons[INV.STONE].id = INV.STONE;
        this.chest_buttons[INV.WOOD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WOOD], 3);
        this.chest_buttons[INV.WOOD].id = INV.WOOD;
        this.chest_buttons[INV.PLANT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PLANT], 3);
        this.chest_buttons[INV.PLANT].id = INV.PLANT;
        this.chest_buttons[INV.CACTUS] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CACTUS], 3);
        this.chest_buttons[INV.CACTUS].id = INV.CACTUS;
        this.chest_buttons[INV.GOLD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GOLD], 3);
        this.chest_buttons[INV.GOLD].id = INV.GOLD;
        this.chest_buttons[INV.DIAMOND] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DIAMOND], 3);
        this.chest_buttons[INV.DIAMOND].id = INV.DIAMOND;
        this.chest_buttons[INV.PICK_GOLD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PICK_GOLD], 3);
        this.chest_buttons[INV.PICK_GOLD].id = INV.PICK_GOLD;
        this.chest_buttons[INV.PICK_DIAMOND] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PICK_DIAMOND], 3);
        this.chest_buttons[INV.PICK_DIAMOND].id = INV.PICK_DIAMOND;
        this.chest_buttons[INV.SWORD_GOLD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SWORD_GOLD], 3);
        this.chest_buttons[INV.SWORD_GOLD].id = INV.SWORD_GOLD;
        this.chest_buttons[INV.SWORD_WOOD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SWORD_WOOD], 3);
        this.chest_buttons[INV.SWORD_WOOD].id = INV.SWORD_WOOD;
        this.chest_buttons[INV.SWORD_DIAMOND] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SWORD_DIAMOND], 3);
        this.chest_buttons[INV.SWORD_DIAMOND].id = INV.SWORD_DIAMOND;
        this.chest_buttons[INV.FIRE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FIRE], 3);
        this.chest_buttons[INV.FIRE].id = INV.FIRE;
        this.chest_buttons[INV.WORKBENCH] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WORKBENCH], 3);
        this.chest_buttons[INV.WORKBENCH].id = INV.WORKBENCH;
        this.chest_buttons[INV.SEED] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SEED], 3);
        this.chest_buttons[INV.SEED].id = INV.SEED;
        this.chest_buttons[INV.WALL] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WALL], 3);
        this.chest_buttons[INV.WALL].id = INV.WALL;
        this.chest_buttons[INV.SPIKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SPIKE], 3);
        this.chest_buttons[INV.SPIKE].id = INV.SPIKE;
        this.chest_buttons[INV.PICK_WOOD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PICK_WOOD], 3);
        this.chest_buttons[INV.PICK_WOOD].id = INV.PICK_WOOD;
        this.chest_buttons[INV.COOKED_MEAT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_COOKED_MEAT], 3);
        this.chest_buttons[INV.COOKED_MEAT].id = INV.COOKED_MEAT;
        this.chest_buttons[INV.MEAT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_MEAT], 3);
        this.chest_buttons[INV.MEAT].id = INV.MEAT;
        this.chest_buttons[INV.BIG_FIRE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BIG_FIRE], 3);
        this.chest_buttons[INV.BIG_FIRE].id = INV.BIG_FIRE;
        this.chest_buttons[INV.BANDAGE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BANDAGE], 3);
        this.chest_buttons[INV.BANDAGE].id = INV.BANDAGE;
        this.chest_buttons[INV.CORD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CORD], 3);
        this.chest_buttons[INV.CORD].id = INV.CORD;
        this.chest_buttons[INV.STONE_WALL] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_STONE_WALL], 3);
        this.chest_buttons[INV.STONE_WALL].id = INV.STONE_WALL;
        this.chest_buttons[INV.GOLD_WALL] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GOLD_WALL], 3);
        this.chest_buttons[INV.GOLD_WALL].id = INV.GOLD_WALL;
        this.chest_buttons[INV.DIAMOND_WALL] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DIAMOND_WALL], 3);
        this.chest_buttons[INV.DIAMOND_WALL].id = INV.DIAMOND_WALL;
        this.chest_buttons[INV.WOOD_DOOR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DOOR_WOOD_CLOSE], 3);
        this.chest_buttons[INV.WOOD_DOOR].id = INV.WOOD_DOOR;
        this.chest_buttons[INV.CHEST] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CHEST], 3);
        this.chest_buttons[INV.CHEST].id = INV.CHEST;
        this.chest_buttons[INV.STONE_SPIKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_STONE_SPIKE], 3);
        this.chest_buttons[INV.STONE_SPIKE].id = INV.STONE_SPIKE;
        this.chest_buttons[INV.GOLD_SPIKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GOLD_SPIKE], 3);
        this.chest_buttons[INV.GOLD_SPIKE].id = INV.GOLD_SPIKE;
        this.chest_buttons[INV.DIAMOND_SPIKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DIAMOND_SPIKE], 3);
        this.chest_buttons[INV.DIAMOND_SPIKE].id = INV.DIAMOND_SPIKE;
        this.chest_buttons[INV.FUR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FUR], 3);
        this.chest_buttons[INV.FUR].id = INV.FUR;
        this.chest_buttons[INV.FUR_BOAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FUR_BOAR], 3);
        this.chest_buttons[INV.FUR_BOAR].id = INV.FUR_BOAR;
        this.chest_buttons[INV.FUR_WOLF] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FUR_WOLF], 3);
        this.chest_buttons[INV.FUR_WOLF].id = INV.FUR_WOLF;
        this.chest_buttons[INV.PENGUIN_FEATHER] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PENGUIN_FEATHER], 3);
        this.chest_buttons[INV.PENGUIN_FEATHER].id = INV.PENGUIN_FEATHER;
        this.chest_buttons[INV.HAWK_FEATHER] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_HAWK_FEATHER], 3);
        this.chest_buttons[INV.HAWK_FEATHER].id = INV.HAWK_FEATHER;
        this.chest_buttons[INV.VULTURE_FEATHER] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_VULTURE_FEATHER], 3);
        this.chest_buttons[INV.VULTURE_FEATHER].id = INV.VULTURE_FEATHER;
        this.chest_buttons[INV.EMERALD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EMERALD], 3);
        this.chest_buttons[INV.EMERALD].id = INV.EMERALD;
        this.chest_buttons[INV.EARMUFFS] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EARMUFFS], 3);
        this.chest_buttons[INV.EARMUFFS].id = INV.EARMUFFS;
        this.chest_buttons[INV.STONE_DOOR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DOOR_STONE_CLOSE], 3);
        this.chest_buttons[INV.STONE_DOOR].id = INV.STONE_DOOR;
        this.chest_buttons[INV.GOLD_DOOR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DOOR_GOLD_CLOSE], 3);
        this.chest_buttons[INV.GOLD_DOOR].id = INV.GOLD_DOOR;
        this.chest_buttons[INV.DIAMOND_DOOR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DOOR_DIAMOND_CLOSE], 3);
        this.chest_buttons[INV.DIAMOND_DOOR].id = INV.DIAMOND_DOOR;
        this.chest_buttons[INV.COAT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_COAT], 3);
        this.chest_buttons[INV.COAT].id = INV.COAT;
        this.chest_buttons[INV.WOOD_SPEAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WOOD_SPEAR], 3);
        this.chest_buttons[INV.WOOD_SPEAR].id = INV.WOOD_SPEAR;
        this.chest_buttons[INV.SPEAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SPEAR], 3);
        this.chest_buttons[INV.SPEAR].id = INV.SPEAR;
        this.chest_buttons[INV.GOLD_SPEAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GOLD_SPEAR], 3);
        this.chest_buttons[INV.GOLD_SPEAR].id = INV.GOLD_SPEAR;
        this.chest_buttons[INV.DIAMOND_SPEAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DIAMOND_SPEAR], 3);
        this.chest_buttons[INV.DIAMOND_SPEAR].id = INV.DIAMOND_SPEAR;
        this.chest_buttons[INV.DRAGON_SPEAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DRAGON_SPEAR], 3);
        this.chest_buttons[INV.DRAGON_SPEAR].id = INV.DRAGON_SPEAR;
        this.chest_buttons[INV.FURNACE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FURNACE], 3);
        this.chest_buttons[INV.FURNACE].id = INV.FURNACE;
        this.chest_buttons[INV.EXPLORER_HAT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EXPLORER_HAT], 3);
        this.chest_buttons[INV.EXPLORER_HAT].id = INV.EXPLORER_HAT;
        this.chest_buttons[INV.PIRATE_HAT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PIRATE_HAT], 3);
        this.chest_buttons[INV.PIRATE_HAT].id = INV.PIRATE_HAT;
        this.chest_buttons[INV.FLOWER_HAT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FLOWER_HAT], 3);
        this.chest_buttons[INV.FLOWER_HAT].id = INV.FLOWER_HAT;
        this.chest_buttons[INV.FUR_HAT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FUR_HAT], 3);
        this.chest_buttons[INV.FUR_HAT].id = INV.FUR_HAT;
        this.chest_buttons[INV.TURBAN1] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_TURBAN1], 3);
        this.chest_buttons[INV.TURBAN1].id = INV.TURBAN1;
        this.chest_buttons[INV.TURBAN2] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_TURBAN2], 3);
        this.chest_buttons[INV.TURBAN2].id = INV.TURBAN2;
        this.chest_buttons[INV.WOOD_ARROW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WOOD_ARROW], 3);
        this.chest_buttons[INV.WOOD_ARROW].id = INV.WOOD_ARROW;
        this.chest_buttons[INV.WOOD_BOW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WOOD_BOW], 3);
        this.chest_buttons[INV.WOOD_BOW].id = INV.WOOD_BOW;
        this.chest_buttons[INV.WOOD_SHIELD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WOOD_SHIELD], 3);
        this.chest_buttons[INV.WOOD_SHIELD].id = INV.WOOD_SHIELD;
        this.chest_buttons[INV.STONE_ARROW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_STONE_ARROW], 3);
        this.chest_buttons[INV.STONE_ARROW].id = INV.STONE_ARROW;
        this.chest_buttons[INV.STONE_BOW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_STONE_BOW], 3);
        this.chest_buttons[INV.STONE_BOW].id = INV.STONE_BOW;
        this.chest_buttons[INV.STONE_SHIELD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_STONE_SHIELD], 3);
        this.chest_buttons[INV.STONE_SHIELD].id = INV.STONE_SHIELD;
        this.chest_buttons[INV.GOLD_ARROW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GOLD_ARROW], 3);
        this.chest_buttons[INV.GOLD_ARROW].id = INV.GOLD_ARROW;
        this.chest_buttons[INV.GOLD_BOW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GOLD_BOW], 3);
        this.chest_buttons[INV.GOLD_BOW].id = INV.GOLD_BOW;
        this.chest_buttons[INV.GOLD_SHIELD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GOLD_SHIELD], 3);
        this.chest_buttons[INV.GOLD_SHIELD].id = INV.GOLD_SHIELD;
        this.chest_buttons[INV.DIAMOND_ARROW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DIAMOND_ARROW], 3);
        this.chest_buttons[INV.DIAMOND_ARROW].id = INV.DIAMOND_ARROW;
        this.chest_buttons[INV.DIAMOND_BOW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DIAMOND_BOW], 3);
        this.chest_buttons[INV.DIAMOND_BOW].id = INV.DIAMOND_BOW;
        this.chest_buttons[INV.DIAMOND_SHIELD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DIAMOND_SHIELD], 3);
        this.chest_buttons[INV.DIAMOND_SHIELD].id = INV.DIAMOND_SHIELD;
        this.chest_buttons[INV.AMETHYST_ARROW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_AMETHYST_ARROW], 3);
        this.chest_buttons[INV.AMETHYST_ARROW].id = INV.AMETHYST_ARROW;
        this.chest_buttons[INV.AMETHYST_BOW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_AMETHYST_BOW], 3);
        this.chest_buttons[INV.AMETHYST_BOW].id = INV.AMETHYST_BOW;
        this.chest_buttons[INV.AMETHYST_SHIELD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_AMETHYST_SHIELD], 3);
        this.chest_buttons[INV.AMETHYST_SHIELD].id = INV.AMETHYST_SHIELD;
        this.chest_buttons[INV.REIDITE_ARROW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_REIDITE_ARROW], 3);
        this.chest_buttons[INV.REIDITE_ARROW].id = INV.REIDITE_ARROW;
        this.chest_buttons[INV.REIDITE_BOW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_REIDITE_BOW], 3);
        this.chest_buttons[INV.REIDITE_BOW].id = INV.REIDITE_BOW;
        this.chest_buttons[INV.REIDITE_SHIELD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_REIDITE_SHIELD], 3);
        this.chest_buttons[INV.REIDITE_SHIELD].id = INV.REIDITE_SHIELD;
        this.chest_buttons[INV.DRAGON_ARROW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DRAGON_ARROW], 3);
        this.chest_buttons[INV.DRAGON_ARROW].id = INV.DRAGON_ARROW;
        this.chest_buttons[INV.DRAGON_BOW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DRAGON_BOW], 3);
        this.chest_buttons[INV.DRAGON_BOW].id = INV.DRAGON_BOW;
        this.chest_buttons[INV.WOOD_HELMET] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WOOD_HELMET], 3);
        this.chest_buttons[INV.WOOD_HELMET].id = INV.WOOD_HELMET;
        this.chest_buttons[INV.STONE_HELMET] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_STONE_HELMET], 3);
        this.chest_buttons[INV.STONE_HELMET].id = INV.STONE_HELMET;
        this.chest_buttons[INV.GOLD_HELMET] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GOLD_HELMET], 3);
        this.chest_buttons[INV.GOLD_HELMET].id = INV.GOLD_HELMET;
        this.chest_buttons[INV.DIAMOND_HELMET] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DIAMOND_HELMET], 3);
        this.chest_buttons[INV.DIAMOND_HELMET].id = INV.DIAMOND_HELMET;
        this.chest_buttons[INV.BOOK] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BOOK], 3);
        this.chest_buttons[INV.BOOK].id = INV.BOOK;
        this.chest_buttons[INV.PAPER] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PAPER], 3);
        this.chest_buttons[INV.PAPER].id = INV.PAPER;
        this.chest_buttons[INV.BAG] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BAG], 3);
        this.chest_buttons[INV.BAG].id = INV.BAG;
        this.chest_buttons[INV.AMETHYST] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_AMETHYST], 3);
        this.chest_buttons[INV.AMETHYST].id = INV.AMETHYST;
        this.chest_buttons[INV.SWORD_AMETHYST] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SWORD_AMETHYST], 3);
        this.chest_buttons[INV.SWORD_AMETHYST].id = INV.SWORD_AMETHYST;
        this.chest_buttons[INV.PIRATE_SWORD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PIRATE_SWORD], 3);
        this.chest_buttons[INV.PIRATE_SWORD].id = INV.PIRATE_SWORD;
        this.chest_buttons[INV.PICK_AMETHYST] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PICK_AMETHYST], 3);
        this.chest_buttons[INV.PICK_AMETHYST].id = INV.PICK_AMETHYST;
        this.chest_buttons[INV.PICK_REIDITE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PICK_REIDITE], 3);
        this.chest_buttons[INV.PICK_REIDITE].id = INV.PICK_REIDITE;
        this.chest_buttons[INV.AMETHYST_SPEAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_AMETHYST_SPEAR], 3);
        this.chest_buttons[INV.AMETHYST_SPEAR].id = INV.AMETHYST_SPEAR;
        this.chest_buttons[INV.HAMMER] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_HAMMER], 3);
        this.chest_buttons[INV.HAMMER].id = INV.HAMMER;
        this.chest_buttons[INV.HAMMER_GOLD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_HAMMER_GOLD], 3);
        this.chest_buttons[INV.HAMMER_GOLD].id = INV.HAMMER_GOLD;
        this.chest_buttons[INV.HAMMER_DIAMOND] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_HAMMER_DIAMOND], 3);
        this.chest_buttons[INV.HAMMER_DIAMOND].id = INV.HAMMER_DIAMOND;
        this.chest_buttons[INV.HAMMER_AMETHYST] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_HAMMER_AMETHYST], 3);
        this.chest_buttons[INV.HAMMER_AMETHYST].id = INV.HAMMER_AMETHYST;
        this.chest_buttons[INV.HAMMER_REIDITE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_HAMMER_REIDITE], 3);
        this.chest_buttons[INV.HAMMER_REIDITE].id = INV.HAMMER_REIDITE;
        this.chest_buttons[INV.AMETHYST_WALL] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_AMETHYST_WALL], 3);
        this.chest_buttons[INV.AMETHYST_WALL].id = INV.AMETHYST_WALL;
        this.chest_buttons[INV.AMETHYST_SPIKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_AMETHYST_SPIKE], 3);
        this.chest_buttons[INV.AMETHYST_SPIKE].id = INV.AMETHYST_SPIKE;
        this.chest_buttons[INV.AMETHYST_DOOR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DOOR_AMETHYST_CLOSE], 3);
        this.chest_buttons[INV.AMETHYST_DOOR].id = INV.AMETHYST_DOOR;
        this.chest_buttons[INV.CAP_SCARF] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CAP_SCARF], 3);
        this.chest_buttons[INV.CAP_SCARF].id = INV.CAP_SCARF;
        this.chest_buttons[INV.FUR_WINTER] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FUR_WINTER], 3);
        this.chest_buttons[INV.FUR_WINTER].id = INV.FUR_WINTER;
        this.chest_buttons[INV.FUR_MAMMOTH] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FUR_MAMMOTH], 3);
        this.chest_buttons[INV.FUR_MAMMOTH].id = INV.FUR_MAMMOTH;
        this.chest_buttons[INV.BLUE_CORD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BLUE_CORD], 3);
        this.chest_buttons[INV.BLUE_CORD].id = INV.BLUE_CORD;
        this.chest_buttons[INV.LOCK] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_LOCK], 3);
        this.chest_buttons[INV.LOCK].id = INV.LOCK;
        this.chest_buttons[INV.DRAGON_HEART] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DRAGON_HEART], 3);
        this.chest_buttons[INV.DRAGON_HEART].id = INV.DRAGON_HEART;
        this.chest_buttons[INV.LAVA_HEART] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_LAVA_HEART], 3);
        this.chest_buttons[INV.LAVA_HEART].id = INV.LAVA_HEART;
        this.chest_buttons[INV.RESURRECTION] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_RESURRECTION], 3);
        this.chest_buttons[INV.RESURRECTION].id = INV.RESURRECTION;
        this.chest_buttons[INV.LOCKPICK] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_LOCKPICK], 3);
        this.chest_buttons[INV.LOCKPICK].id = INV.LOCKPICK;
        this.chest_buttons[INV.TOTEM] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_TOTEM], 3);
        this.chest_buttons[INV.TOTEM].id = INV.TOTEM;
        this.chest_buttons[INV.AMETHYST_HELMET] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_AMETHYST_HELMET], 3);
        this.chest_buttons[INV.AMETHYST_HELMET].id = INV.AMETHYST_HELMET;
        this.chest_buttons[INV.SUPER_HAMMER] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SUPER_HAMMER], 3);
        this.chest_buttons[INV.SUPER_HAMMER].id = INV.SUPER_HAMMER;
        this.chest_buttons[INV.BRIDGE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BRIDGE], 3);
        this.chest_buttons[INV.BRIDGE].id = INV.BRIDGE;
        this.chest_buttons[INV.WOOD_TOWER] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WOOD_TOWER], 3);
        this.chest_buttons[INV.WOOD_TOWER].id = INV.WOOD_TOWER;
        this.chest_buttons[INV.BOAT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BOAT], 3);
        this.chest_buttons[INV.BOAT].id = INV.BOAT;
        this.chest_buttons[INV.SLED] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SLED], 3);
        this.chest_buttons[INV.SLED].id = INV.SLED;
        this.chest_buttons[INV.PLANE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PLANE], 3);
        this.chest_buttons[INV.PLANE].id = INV.PLANE;
        this.chest_buttons[INV.SADDLE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SADDLE], 3);
        this.chest_buttons[INV.SADDLE].id = INV.SADDLE;
        this.chest_buttons[INV.MOUNT_BOAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_MOUNT_BOAR], 3);
        this.chest_buttons[INV.MOUNT_BOAR].id = INV.MOUNT_BOAR;
        this.chest_buttons[INV.BABY_DRAGON] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BABY_DRAGON], 3);
        this.chest_buttons[INV.BABY_DRAGON].id = INV.BABY_DRAGON;
        this.chest_buttons[INV.BABY_MAMMOTH] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BABY_MAMMOTH], 3);
        this.chest_buttons[INV.BABY_MAMMOTH].id = INV.BABY_MAMMOTH;
        this.chest_buttons[INV.BABY_LAVA] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BABY_LAVA], 3);
        this.chest_buttons[INV.BABY_LAVA].id = INV.BABY_LAVA;
        this.chest_buttons[INV.HAWK] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_HAWK], 3);
        this.chest_buttons[INV.HAWK].id = INV.HAWK;
        this.chest_buttons[INV.CRAB_BOSS] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CRAB_BOSS], 3);
        this.chest_buttons[INV.CRAB_BOSS].id = INV.CRAB_BOSS;
        this.chest_buttons[INV.SAND] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SAND], 3);
        this.chest_buttons[INV.SAND].id = INV.SAND;
        this.chest_buttons[INV.BOTTLE_FULL] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BOTTLE_FULL], 3);
        this.chest_buttons[INV.BOTTLE_FULL].id = INV.BOTTLE_FULL;
        this.chest_buttons[INV.BOTTLE_EMPTY] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BOTTLE_EMPTY], 3);
        this.chest_buttons[INV.BOTTLE_EMPTY].id = INV.BOTTLE_EMPTY;
        this.chest_buttons[INV.SHOVEL] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SHOVEL], 3);
        this.chest_buttons[INV.SHOVEL].id = INV.SHOVEL;
        this.chest_buttons[INV.SHOVEL_GOLD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SHOVEL_GOLD], 3);
        this.chest_buttons[INV.SHOVEL_GOLD].id = INV.SHOVEL_GOLD;
        this.chest_buttons[INV.SHOVEL_DIAMOND] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SHOVEL_DIAMOND], 3);
        this.chest_buttons[INV.SHOVEL_DIAMOND].id = INV.SHOVEL_DIAMOND;
        this.chest_buttons[INV.SHOVEL_AMETHYST] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SHOVEL_AMETHYST], 3);
        this.chest_buttons[INV.SHOVEL_AMETHYST].id = INV.SHOVEL_AMETHYST;
        this.chest_buttons[INV.SPANNER] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SPANNER], 3);
        this.chest_buttons[INV.SPANNER].id = INV.SPANNER;
        this.chest_buttons[INV.KRAKEN_SKIN] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_KRAKEN_SKIN], 3);
        this.chest_buttons[INV.KRAKEN_SKIN].id = INV.KRAKEN_SKIN;
        this.chest_buttons[INV.WATERING_CAN] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WATERING_CAN], 3);
        this.chest_buttons[INV.WATERING_CAN].id = INV.WATERING_CAN;
        this.chest_buttons[INV.FLOUR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FLOUR], 3);
        this.chest_buttons[INV.FLOUR].id = INV.FLOUR;
        this.chest_buttons[INV.WHEAT_SEED] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WHEAT_SEED], 3);
        this.chest_buttons[INV.WHEAT_SEED].id = INV.WHEAT_SEED;
        this.chest_buttons[INV.COOKIE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_COOKIE], 3);
        this.chest_buttons[INV.COOKIE].id = INV.COOKIE;
        this.chest_buttons[INV.WILD_WHEAT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WILD_WHEAT], 3);
        this.chest_buttons[INV.WILD_WHEAT].id = INV.WILD_WHEAT;
        this.chest_buttons[INV.WINDMILL] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WINDMILL], 3);
        this.chest_buttons[INV.WINDMILL].id = INV.WINDMILL;
        this.chest_buttons[INV.SUPER_DIVING_SUIT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SUPER_DIVING_SUIT], 3);
        this.chest_buttons[INV.SUPER_DIVING_SUIT].id = INV.SUPER_DIVING_SUIT;
        this.chest_buttons[INV.DIVING_MASK] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DIVING_MASK], 3);
        this.chest_buttons[INV.DIVING_MASK].id = INV.DIVING_MASK;
        this.chest_buttons[INV.WATERING_CAN_FULL] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WATERING_CAN_FULL], 3);
        this.chest_buttons[INV.WATERING_CAN_FULL].id = INV.WATERING_CAN_FULL;
        this.chest_buttons[INV.CAKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CAKE], 3);
        this.chest_buttons[INV.CAKE].id = INV.CAKE;
        this.chest_buttons[INV.BREAD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BREAD], 3);
        this.chest_buttons[INV.BREAD].id = INV.BREAD;
        this.chest_buttons[INV.FOODFISH] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FOODFISH], 3);
        this.chest_buttons[INV.FOODFISH].id = INV.FOODFISH;
        this.chest_buttons[INV.FOODFISH_COOKED] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FOODFISH_COOKED], 3);
        this.chest_buttons[INV.FOODFISH_COOKED].id = INV.FOODFISH_COOKED;
        this.chest_buttons[INV.SCALES] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SCALES], 3);
        this.chest_buttons[INV.SCALES].id = INV.SCALES;
        this.chest_buttons[INV.GROUND] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GROUND], 3);
        this.chest_buttons[INV.GROUND].id = INV.GROUND;
        this.chest_buttons[INV.PLOT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PLOT], 3);
        this.chest_buttons[INV.PLOT].id = INV.PLOT;
        this.chest_buttons[INV.ICE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_ICE], 3);
        this.chest_buttons[INV.ICE].id = INV.ICE;
        this.chest_buttons[INV.BREAD_OVEN] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BREAD_OVEN], 3);
        this.chest_buttons[INV.BREAD_OVEN].id = INV.BREAD_OVEN;
        this.chest_buttons[INV.SANDWICH] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SANDWICH], 3);
        this.chest_buttons[INV.SANDWICH].id = INV.SANDWICH;
        this.chest_buttons[INV.DRAGON_HELMET] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DRAGON_HELMET], 3);
        this.chest_buttons[INV.DRAGON_HELMET].id = INV.DRAGON_HELMET;
        this.chest_buttons[INV.DRAGON_SWORD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DRAGON_SWORD], 3);
        this.chest_buttons[INV.DRAGON_SWORD].id = INV.DRAGON_SWORD;
        this.chest_buttons[INV.DRAGON_ORB] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DRAGON_ORB], 3);
        this.chest_buttons[INV.DRAGON_ORB].id = INV.DRAGON_ORB;
        this.chest_buttons[INV.DRAGON_CUBE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DRAGON_CUBE], 3);
        this.chest_buttons[INV.DRAGON_CUBE].id = INV.DRAGON_CUBE;
        this.chest_buttons[INV.LAVA_ORB] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_LAVA_ORB], 3);
        this.chest_buttons[INV.LAVA_ORB].id = INV.LAVA_ORB;
        this.chest_buttons[INV.LAVA_CUBE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_LAVA_CUBE], 3);
        this.chest_buttons[INV.LAVA_CUBE].id = INV.LAVA_CUBE;
        this.chest_buttons[INV.CROWN_GREEN] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CROWN_GREEN], 3);
        this.chest_buttons[INV.CROWN_GREEN].id = INV.CROWN_GREEN;
        this.chest_buttons[INV.GEMME_GREEN] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GEMME_GREEN], 3);
        this.chest_buttons[INV.GEMME_GREEN].id = INV.GEMME_GREEN;
        this.chest_buttons[INV.GEMME_ORANGE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GEMME_ORANGE], 3);
        this.chest_buttons[INV.GEMME_ORANGE].id = INV.GEMME_ORANGE;
        this.chest_buttons[INV.CROWN_ORANGE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CROWN_ORANGE], 3);
        this.chest_buttons[INV.CROWN_ORANGE].id = INV.CROWN_ORANGE;
        this.chest_buttons[INV.GEMME_BLUE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GEMME_BLUE], 3);
        this.chest_buttons[INV.GEMME_BLUE].id = INV.GEMME_BLUE;
        this.chest_buttons[INV.CROWN_BLUE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CROWN_BLUE], 3);
        this.chest_buttons[INV.CROWN_BLUE].id = INV.CROWN_BLUE;
        this.chest_buttons[INV.HOOD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_HOOD], 3);
        this.chest_buttons[INV.HOOD].id = INV.HOOD;
        this.chest_buttons[INV.PEASANT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PEASANT], 3);
        this.chest_buttons[INV.PEASANT].id = INV.PEASANT;
        this.chest_buttons[INV.SPECIAL_FUR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SPECIAL_FUR], 3);
        this.chest_buttons[INV.SPECIAL_FUR].id = INV.SPECIAL_FUR;
        this.chest_buttons[INV.SPECIAL_FUR_2] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SPECIAL_FUR_2], 3);
        this.chest_buttons[INV.SPECIAL_FUR_2].id = INV.SPECIAL_FUR_2;
        this.chest_buttons[INV.WINTER_PEASANT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WINTER_PEASANT], 3);
        this.chest_buttons[INV.WINTER_PEASANT].id = INV.WINTER_PEASANT;
        this.chest_buttons[INV.WINTER_HOOD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WINTER_HOOD], 3);
        this.chest_buttons[INV.WINTER_HOOD].id = INV.WINTER_HOOD;
        this.chest_buttons[INV.BUCKET_FULL] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BUCKET_FULL], 3);
        this.chest_buttons[INV.BUCKET_FULL].id = INV.BUCKET_FULL;
        this.chest_buttons[INV.BUCKET_EMPTY] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BUCKET_EMPTY], 3);
        this.chest_buttons[INV.BUCKET_EMPTY].id = INV.BUCKET_EMPTY;
        this.chest_buttons[INV.WELL] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WELL], 3);
        this.chest_buttons[INV.WELL].id = INV.WELL;
        this.chest_buttons[INV.SIGN] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SIGN], 3);
        this.chest_buttons[INV.SIGN].id = INV.SIGN;
        this.chest_buttons[INV.PUMPKIN_SEED] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PUMPKIN_SEED], 3);
        this.chest_buttons[INV.PUMPKIN_SEED].id = INV.PUMPKIN_SEED;
        this.chest_buttons[INV.PUMPKIN] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PUMPKIN], 3);
        this.chest_buttons[INV.PUMPKIN].id = INV.PUMPKIN;
        this.chest_buttons[INV.ROOF] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_ROOF], 3);
        this.chest_buttons[INV.ROOF].id = INV.ROOF;
        this.chest_buttons[INV.GARLIC_SEED] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GARLIC_SEED], 3);
        this.chest_buttons[INV.GARLIC_SEED].id = INV.GARLIC_SEED;
        this.chest_buttons[INV.GARLIC] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GARLIC], 3);
        this.chest_buttons[INV.GARLIC].id = INV.GARLIC;
        this.chest_buttons[INV.THORNBUSH_SEED] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_THORNBUSH_SEED], 3);
        this.chest_buttons[INV.THORNBUSH_SEED].id = INV.THORNBUSH_SEED;
        this.chest_buttons[INV.THORNBUSH] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_THORNBUSH], 3);
        this.chest_buttons[INV.THORNBUSH].id = INV.THORNBUSH;
        this.chest_buttons[INV.TOMATO_SEED] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_TOMATO_SEED], 3);
        this.chest_buttons[INV.TOMATO_SEED].id = INV.TOMATO_SEED;
        this.chest_buttons[INV.TOMATO] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_TOMATO], 3);
        this.chest_buttons[INV.TOMATO].id = INV.TOMATO;
        this.chest_buttons[INV.CARROT_SEED] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CARROT_SEED], 3);
        this.chest_buttons[INV.CARROT_SEED].id = INV.CARROT_SEED;
        this.chest_buttons[INV.CARROT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CARROT], 3);
        this.chest_buttons[INV.CARROT].id = INV.CARROT;
        this.chest_buttons[INV.WATERMELON_SEED] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WATERMELON_SEED], 3);
        this.chest_buttons[INV.WATERMELON_SEED].id = INV.WATERMELON_SEED;
        this.chest_buttons[INV.WATERMELON] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WATERMELON], 3);
        this.chest_buttons[INV.WATERMELON].id = INV.WATERMELON;
        this.chest_buttons[INV.ALOE_VERA_SEED] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_ALOE_VERA_SEED], 3);
        this.chest_buttons[INV.ALOE_VERA_SEED].id = INV.ALOE_VERA_SEED;
        this.chest_buttons[INV.ALOE_VERA] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_ALOE_VERA], 3);
        this.chest_buttons[INV.ALOE_VERA].id = INV.ALOE_VERA;
        this.chest_buttons[INV.CHRISTMAS_HAT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CHRISTMAS_HAT], 3);
        this.chest_buttons[INV.CHRISTMAS_HAT].id = INV.CHRISTMAS_HAT;
        this.chest_buttons[INV.ELF_HAT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_ELF_HAT], 3);
        this.chest_buttons[INV.ELF_HAT].id = INV.ELF_HAT;
        this.chest_buttons[INV.WOOD_SPEAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WOOD_SPEAR], 3);
        this.chest_buttons[INV.WOOD_SPEAR].id = INV.WOOD_SPEAR;
        this.chest_buttons[INV.DRAGON_SPEAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DRAGON_SPEAR], 3);
        this.chest_buttons[INV.DRAGON_SPEAR].id = INV.DRAGON_SPEAR;
        this.chest_buttons[INV.CRAB_STICK] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CRAB_STICK], 3);
        this.chest_buttons[INV.CRAB_STICK].id = INV.CRAB_STICK;
        this.chest_buttons[INV.CRAB_SPEAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CRAB_SPEAR], 3);
        this.chest_buttons[INV.CRAB_SPEAR].id = INV.CRAB_SPEAR;
        this.chest_buttons[INV.CRAB_LOOT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CRAB_LOOT], 3);
        this.chest_buttons[INV.CRAB_LOOT].id = INV.CRAB_LOOT;
        this.chest_buttons[INV.BED] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BED], 3);
        this.chest_buttons[INV.BED].id = INV.BED;
        this.chest_buttons[INV.CROWN_CRAB] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CROWN_CRAB], 3);
        this.chest_buttons[INV.CROWN_CRAB].id = INV.CROWN_CRAB;
        this.chest_buttons[INV.GARLAND] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GARLAND], 3);
        this.chest_buttons[INV.GARLAND].id = INV.GARLAND;
        this.chest_buttons[INV.SUGAR_CAN] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SUGAR_CAN], 3);
        this.chest_buttons[INV.SUGAR_CAN].id = INV.SUGAR_CAN;
        this.chest_buttons[INV.CANDY] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CANDY], 3);
        this.chest_buttons[INV.CANDY].id = INV.CANDY;
        this.plus_buttons = [];
        for (var i = 0; i < 250; i++)
            this.plus_buttons[i] = gui_create_button(0, 0, "", sprite[SPRITE.CHEST_PLUS]);
        this.inv_buttons = [];
        this.inv_buttons[INV.SWORD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SWORD], 3);
        this.inv_buttons[INV.SWORD].id = INV.SWORD;
        this.inv_buttons[INV.PICK] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PICK], 3);
        this.inv_buttons[INV.PICK].id = INV.PICK;
        this.inv_buttons[INV.STONE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_STONE], 3);
        this.inv_buttons[INV.STONE].id = INV.STONE;
        this.inv_buttons[INV.STONE].info.img[2] = this.inv_buttons[INV.STONE].info.img[0];
        this.inv_buttons[INV.WOOD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WOOD], 3);
        this.inv_buttons[INV.WOOD].id = INV.WOOD;
        this.inv_buttons[INV.WOOD].info.img[2] = this.inv_buttons[INV.WOOD].info.img[0];
        this.inv_buttons[INV.PLANT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PLANT], 3);
        this.inv_buttons[INV.PLANT].id = INV.PLANT;
        this.inv_buttons[INV.CACTUS] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CACTUS], 3);
        this.inv_buttons[INV.CACTUS].id = INV.CACTUS;
        this.inv_buttons[INV.GOLD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GOLD], 3);
        this.inv_buttons[INV.GOLD].id = INV.GOLD;
        this.inv_buttons[INV.GOLD].info.img[2] = this.inv_buttons[INV.GOLD].info.img[0];
        this.inv_buttons[INV.DIAMOND] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DIAMOND], 3);
        this.inv_buttons[INV.DIAMOND].id = INV.DIAMOND;
        this.inv_buttons[INV.DIAMOND].info.img[2] = this.inv_buttons[INV.DIAMOND].info.img[0];
        this.inv_buttons[INV.PICK_GOLD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PICK_GOLD], 3);
        this.inv_buttons[INV.PICK_GOLD].id = INV.PICK_GOLD;
        this.inv_buttons[INV.PICK_DIAMOND] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PICK_DIAMOND], 3);
        this.inv_buttons[INV.PICK_DIAMOND].id = INV.PICK_DIAMOND;
        this.inv_buttons[INV.SWORD_GOLD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SWORD_GOLD], 3);
        this.inv_buttons[INV.SWORD_GOLD].id = INV.SWORD_GOLD;
        this.inv_buttons[INV.SWORD_WOOD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SWORD_WOOD], 3);
        this.inv_buttons[INV.SWORD_WOOD].id = INV.SWORD_WOOD;
        this.inv_buttons[INV.SWORD_DIAMOND] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SWORD_DIAMOND], 3);
        this.inv_buttons[INV.SWORD_DIAMOND].id = INV.SWORD_DIAMOND;
        this.inv_buttons[INV.FIRE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FIRE], 3);
        this.inv_buttons[INV.FIRE].id = INV.FIRE;
        this.inv_buttons[INV.WORKBENCH] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WORK], 3);
        this.inv_buttons[INV.WORKBENCH].id = INV.WORKBENCH;
        this.inv_buttons[INV.SEED] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SEED], 3);
        this.inv_buttons[INV.SEED].id = INV.SEED;
        this.inv_buttons[INV.WALL] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WALL], 3);
        this.inv_buttons[INV.WALL].id = INV.WALL;
        this.inv_buttons[INV.SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SPIKE], 3);
        this.inv_buttons[INV.SPIKE].id = INV.SPIKE;
        this.inv_buttons[INV.PICK_WOOD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PICK_WOOD], 3);
        this.inv_buttons[INV.PICK_WOOD].id = INV.PICK_WOOD;
        this.inv_buttons[INV.COOKED_MEAT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_COOKED_MEAT], 3);
        this.inv_buttons[INV.COOKED_MEAT].id = INV.COOKED_MEAT;
        this.inv_buttons[INV.MEAT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_MEAT], 3);
        this.inv_buttons[INV.MEAT].id = INV.MEAT;
        this.inv_buttons[INV.BIG_FIRE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BIG_FIRE], 3);
        this.inv_buttons[INV.BIG_FIRE].id = INV.BIG_FIRE;
        this.inv_buttons[INV.BANDAGE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BANDAGE], 3);
        this.inv_buttons[INV.BANDAGE].id = INV.BANDAGE;
        this.inv_buttons[INV.CORD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CORD], 3);
        this.inv_buttons[INV.CORD].id = INV.CORD;
        this.inv_buttons[INV.CORD].info.img[2] = this.inv_buttons[INV.CORD].info.img[0];
        this.inv_buttons[INV.STONE_WALL] = gui_create_button(60, 60, "", sprite[SPRITE.INV_STONE_WALL], 3);
        this.inv_buttons[INV.STONE_WALL].id = INV.STONE_WALL;
        this.inv_buttons[INV.GOLD_WALL] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GOLD_WALL], 3);
        this.inv_buttons[INV.GOLD_WALL].id = INV.GOLD_WALL;
        this.inv_buttons[INV.DIAMOND_WALL] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DIAMOND_WALL], 3);
        this.inv_buttons[INV.DIAMOND_WALL].id = INV.DIAMOND_WALL;
        this.inv_buttons[INV.WOOD_DOOR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DOOR_WOOD_CLOSE], 3);
        this.inv_buttons[INV.WOOD_DOOR].id = INV.WOOD_DOOR;
        this.inv_buttons[INV.CHEST] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CHEST], 3);
        this.inv_buttons[INV.CHEST].id = INV.CHEST;
        this.inv_buttons[INV.STONE_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_STONE_SPIKE], 3);
        this.inv_buttons[INV.STONE_SPIKE].id = INV.STONE_SPIKE;
        this.inv_buttons[INV.GOLD_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GOLD_SPIKE], 3);
        this.inv_buttons[INV.GOLD_SPIKE].id = INV.GOLD_SPIKE;
        this.inv_buttons[INV.DIAMOND_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DIAMOND_SPIKE], 3);
        this.inv_buttons[INV.DIAMOND_SPIKE].id = INV.DIAMOND_SPIKE;
        this.inv_buttons[INV.BAG] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BAG], 3);
        this.inv_buttons[INV.BAG].id = INV.BAG;
        this.inv_buttons[INV.EARMUFFS] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EARMUFFS], 3);
        this.inv_buttons[INV.EARMUFFS].id = INV.EARMUFFS;
        this.inv_buttons[INV.STONE_DOOR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DOOR_STONE_CLOSE], 3);
        this.inv_buttons[INV.STONE_DOOR].id = INV.STONE_DOOR;
        this.inv_buttons[INV.GOLD_DOOR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DOOR_GOLD_CLOSE], 3);
        this.inv_buttons[INV.GOLD_DOOR].id = INV.GOLD_DOOR;
        this.inv_buttons[INV.DIAMOND_DOOR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DOOR_DIAMOND_CLOSE], 3);
        this.inv_buttons[INV.DIAMOND_DOOR].id = INV.DIAMOND_DOOR;
        this.inv_buttons[INV.FUR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FUR], 3);
        this.inv_buttons[INV.FUR].id = INV.FUR;
        this.inv_buttons[INV.FUR].info.img[2] = this.inv_buttons[INV.FUR].info.img[0];
        this.inv_buttons[INV.FUR_BOAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FUR_BOAR], 3);
        this.inv_buttons[INV.FUR_BOAR].id = INV.FUR_BOAR;
        this.inv_buttons[INV.FUR_BOAR].info.img[2] = this.inv_buttons[INV.FUR_BOAR].info.img[0];
        this.inv_buttons[INV.FUR_WOLF] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FUR_WOLF], 3);
        this.inv_buttons[INV.FUR_WOLF].id = INV.FUR_WOLF;
        this.inv_buttons[INV.FUR_WOLF].info.img[2] = this.inv_buttons[INV.FUR_WOLF].info.img[0];
        this.inv_buttons[INV.PENGUIN_FEATHER] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PENGUIN_FEATHER], 3);
        this.inv_buttons[INV.PENGUIN_FEATHER].id = INV.PENGUIN_FEATHER;
        this.inv_buttons[INV.HAWK_FEATHER] = gui_create_button(60, 60, "", sprite[SPRITE.INV_HAWK_FEATHER], 3);
        this.inv_buttons[INV.HAWK_FEATHER].id = INV.HAWK_FEATHER;
        this.inv_buttons[INV.VULTURE_FEATHER] = gui_create_button(60, 60, "", sprite[SPRITE.INV_VULTURE_FEATHER], 3);
        this.inv_buttons[INV.VULTURE_FEATHER].id = INV.VULTURE_FEATHER;
        this.inv_buttons[INV.EMERALD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EMERALD], 3);
        this.inv_buttons[INV.EMERALD].id = INV.EMERALD;
        this.inv_buttons[INV.EARMUFFS] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EARMUFFS], 3);
        this.inv_buttons[INV.EARMUFFS].id = INV.EARMUFFS;
        this.inv_buttons[INV.COAT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_COAT], 3);
        this.inv_buttons[INV.COAT].id = INV.COAT;
        this.inv_buttons[INV.WOOD_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WOOD_SPEAR], 3);
        this.inv_buttons[INV.WOOD_SPEAR].id = INV.WOOD_SPEAR;
        this.inv_buttons[INV.SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SPEAR], 3);
        this.inv_buttons[INV.SPEAR].id = INV.SPEAR;
        this.inv_buttons[INV.GOLD_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GOLD_SPEAR], 3);
        this.inv_buttons[INV.GOLD_SPEAR].id = INV.GOLD_SPEAR;
        this.inv_buttons[INV.DIAMOND_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DIAMOND_SPEAR], 3);
        this.inv_buttons[INV.DIAMOND_SPEAR].id = INV.DIAMOND_SPEAR;
        this.inv_buttons[INV.DRAGON_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DRAGON_SPEAR], 3);
        this.inv_buttons[INV.DRAGON_SPEAR].id = INV.DRAGON_SPEAR;
        this.inv_buttons[INV.FURNACE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FURNACE], 3);
        this.inv_buttons[INV.FURNACE].id = INV.FURNACE;
        this.inv_buttons[INV.EXPLORER_HAT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EXPLORER_HAT], 3);
        this.inv_buttons[INV.EXPLORER_HAT].id = INV.EXPLORER_HAT;
        this.inv_buttons[INV.PIRATE_HAT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PIRATE_HAT], 3);
        this.inv_buttons[INV.PIRATE_HAT].id = INV.PIRATE_HAT;
        this.inv_buttons[INV.FLOWER_HAT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FLOWER_HAT], 3);
        this.inv_buttons[INV.FLOWER_HAT].id = INV.FLOWER_HAT;
        this.inv_buttons[INV.FUR_HAT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FUR_HAT], 3);
        this.inv_buttons[INV.FUR_HAT].id = INV.FUR_HAT;
        this.inv_buttons[INV.TURBAN1] = gui_create_button(60, 60, "", sprite[SPRITE.INV_TURBAN1], 3);
        this.inv_buttons[INV.TURBAN1].id = INV.TURBAN1;
        this.inv_buttons[INV.TURBAN2] = gui_create_button(60, 60, "", sprite[SPRITE.INV_TURBAN2], 3);
        this.inv_buttons[INV.TURBAN2].id = INV.TURBAN2;
        this.inv_buttons[INV.WOOD_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WOOD_BOW], 3);
        this.inv_buttons[INV.WOOD_BOW].id = INV.WOOD_BOW;
        this.inv_buttons[INV.WOOD_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WOOD_ARROW], 3);
        this.inv_buttons[INV.WOOD_ARROW].id = INV.WOOD_ARROW;
        this.inv_buttons[INV.WOOD_SHIELD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WOOD_SHIELD], 3);
        this.inv_buttons[INV.WOOD_SHIELD].id = INV.WOOD_SHIELD;
        this.inv_buttons[INV.STONE_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_STONE_BOW], 3);
        this.inv_buttons[INV.STONE_BOW].id = INV.STONE_BOW;
        this.inv_buttons[INV.STONE_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_STONE_ARROW], 3);
        this.inv_buttons[INV.STONE_ARROW].id = INV.STONE_ARROW;
        this.inv_buttons[INV.STONE_SHIELD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_STONE_SHIELD], 3);
        this.inv_buttons[INV.STONE_SHIELD].id = INV.STONE_SHIELD;
        this.inv_buttons[INV.GOLD_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GOLD_BOW], 3);
        this.inv_buttons[INV.GOLD_BOW].id = INV.GOLD_BOW;
        this.inv_buttons[INV.GOLD_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GOLD_ARROW], 3);
        this.inv_buttons[INV.GOLD_ARROW].id = INV.GOLD_ARROW;
        this.inv_buttons[INV.GOLD_SHIELD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GOLD_SHIELD], 3);
        this.inv_buttons[INV.GOLD_SHIELD].id = INV.GOLD_SHIELD;
        this.inv_buttons[INV.DIAMOND_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DIAMOND_BOW], 3);
        this.inv_buttons[INV.DIAMOND_BOW].id = INV.DIAMOND_BOW;
        this.inv_buttons[INV.DIAMOND_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DIAMOND_ARROW], 3);
        this.inv_buttons[INV.DIAMOND_ARROW].id = INV.DIAMOND_ARROW;
        this.inv_buttons[INV.DIAMOND_SHIELD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DIAMOND_SHIELD], 3);
        this.inv_buttons[INV.DIAMOND_SHIELD].id = INV.DIAMOND_SHIELD;
        this.inv_buttons[INV.AMETHYST_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_AMETHYST_BOW], 3);
        this.inv_buttons[INV.AMETHYST_BOW].id = INV.AMETHYST_BOW;
        this.inv_buttons[INV.AMETHYST_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_AMETHYST_ARROW], 3);
        this.inv_buttons[INV.AMETHYST_ARROW].id = INV.AMETHYST_ARROW;
        this.inv_buttons[INV.AMETHYST_SHIELD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_AMETHYST_SHIELD], 3);
        this.inv_buttons[INV.AMETHYST_SHIELD].id = INV.AMETHYST_SHIELD;
        this.inv_buttons[INV.REIDITE_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE_BOW], 3);
        this.inv_buttons[INV.REIDITE_BOW].id = INV.REIDITE_BOW;
        this.inv_buttons[INV.REIDITE_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE_ARROW], 3);
        this.inv_buttons[INV.REIDITE_ARROW].id = INV.REIDITE_ARROW;
        this.inv_buttons[INV.REIDITE_SHIELD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE_SHIELD], 3);
        this.inv_buttons[INV.REIDITE_SHIELD].id = INV.REIDITE_SHIELD;
        this.inv_buttons[INV.DRAGON_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DRAGON_BOW], 3);
        this.inv_buttons[INV.DRAGON_BOW].id = INV.DRAGON_BOW;
        this.inv_buttons[INV.DRAGON_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DRAGON_ARROW], 3);
        this.inv_buttons[INV.DRAGON_ARROW].id = INV.DRAGON_ARROW;
        this.inv_buttons[INV.WOOD_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WOOD_HELMET], 3);
        this.inv_buttons[INV.WOOD_HELMET].id = INV.WOOD_HELMET;
        this.inv_buttons[INV.STONE_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.INV_STONE_HELMET], 3);
        this.inv_buttons[INV.STONE_HELMET].id = INV.STONE_HELMET;
        this.inv_buttons[INV.GOLD_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GOLD_HELMET], 3);
        this.inv_buttons[INV.GOLD_HELMET].id = INV.GOLD_HELMET;
        this.inv_buttons[INV.DIAMOND_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DIAMOND_HELMET], 3);
        this.inv_buttons[INV.DIAMOND_HELMET].id = INV.DIAMOND_HELMET;
        this.inv_buttons[INV.BOOK] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BOOK], 3);
        this.inv_buttons[INV.BOOK].id = INV.BOOK;
        this.inv_buttons[INV.PAPER] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PAPER], 3);
        this.inv_buttons[INV.PAPER].id = INV.PAPER;
        this.inv_buttons[INV.PAPER].info.img[2] = this.inv_buttons[INV.PAPER].info.img[0];
        this.inv_buttons[INV.BAG] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BAG], 3);
        this.inv_buttons[INV.BAG].id = INV.BAG;
        this.inv_buttons[INV.AMETHYST] = gui_create_button(60, 60, "", sprite[SPRITE.INV_AMETHYST], 3);
        this.inv_buttons[INV.AMETHYST].id = INV.AMETHYST;
        this.inv_buttons[INV.AMETHYST].info.img[2] = this.inv_buttons[INV.AMETHYST].info.img[0];
        this.inv_buttons[INV.SWORD_AMETHYST] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SWORD_AMETHYST], 3);
        this.inv_buttons[INV.SWORD_AMETHYST].id = INV.SWORD_AMETHYST;
        this.inv_buttons[INV.PIRATE_SWORD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PIRATE_SWORD], 3);
        this.inv_buttons[INV.PIRATE_SWORD].id = INV.PIRATE_SWORD;
        this.inv_buttons[INV.PICK_AMETHYST] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PICK_AMETHYST], 3);
        this.inv_buttons[INV.PICK_AMETHYST].id = INV.PICK_AMETHYST;
        this.inv_buttons[INV.PICK_REIDITE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PICK_REIDITE], 3);
        this.inv_buttons[INV.PICK_REIDITE].id = INV.PICK_REIDITE;
        this.inv_buttons[INV.AMETHYST_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_AMETHYST_SPEAR], 3);
        this.inv_buttons[INV.AMETHYST_SPEAR].id = INV.AMETHYST_SPEAR;
        this.inv_buttons[INV.HAMMER] = gui_create_button(60, 60, "", sprite[SPRITE.INV_HAMMER], 3);
        this.inv_buttons[INV.HAMMER].id = INV.HAMMER;
        this.inv_buttons[INV.HAMMER_GOLD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_HAMMER_GOLD], 3);
        this.inv_buttons[INV.HAMMER_GOLD].id = INV.HAMMER_GOLD;
        this.inv_buttons[INV.HAMMER_DIAMOND] = gui_create_button(60, 60, "", sprite[SPRITE.INV_HAMMER_DIAMOND], 3);
        this.inv_buttons[INV.HAMMER_DIAMOND].id = INV.HAMMER_DIAMOND;
        this.inv_buttons[INV.HAMMER_AMETHYST] = gui_create_button(60, 60, "", sprite[SPRITE.INV_HAMMER_AMETHYST], 3);
        this.inv_buttons[INV.HAMMER_AMETHYST].id = INV.HAMMER_AMETHYST;
        this.inv_buttons[INV.HAMMER_REIDITE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_HAMMER_REIDITE], 3);
        this.inv_buttons[INV.HAMMER_REIDITE].id = INV.HAMMER_REIDITE;
        this.inv_buttons[INV.AMETHYST_WALL] = gui_create_button(60, 60, "", sprite[SPRITE.INV_AMETHYST_WALL], 3);
        this.inv_buttons[INV.AMETHYST_WALL].id = INV.AMETHYST_WALL;
        this.inv_buttons[INV.AMETHYST_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_AMETHYST_SPIKE], 3);
        this.inv_buttons[INV.AMETHYST_SPIKE].id = INV.AMETHYST_SPIKE;
        this.inv_buttons[INV.AMETHYST_DOOR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DOOR_AMETHYST_CLOSE], 3);
        this.inv_buttons[INV.AMETHYST_DOOR].id = INV.AMETHYST_DOOR;
        this.inv_buttons[INV.CAP_SCARF] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CAP_SCARF], 3);
        this.inv_buttons[INV.CAP_SCARF].id = INV.CAP_SCARF;
        this.inv_buttons[INV.FUR_WINTER] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FUR_WINTER], 3);
        this.inv_buttons[INV.FUR_WINTER].id = INV.FUR_WINTER;
        this.inv_buttons[INV.FUR_WINTER].info.img[2] = this.inv_buttons[INV.FUR_WINTER].info.img[0];
        this.inv_buttons[INV.FUR_MAMMOTH] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FUR_MAMMOTH], 3);
        this.inv_buttons[INV.FUR_MAMMOTH].id = INV.FUR_MAMMOTH;
        this.inv_buttons[INV.FUR_MAMMOTH].info.img[2] = this.inv_buttons[INV.FUR_MAMMOTH].info.img[0];
        this.inv_buttons[INV.BLUE_CORD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BLUE_CORD], 3);
        this.inv_buttons[INV.BLUE_CORD].id = INV.BLUE_CORD;
        this.inv_buttons[INV.BLUE_CORD].info.img[2] = this.inv_buttons[INV.BLUE_CORD].info.img[0];
        this.inv_buttons[INV.LOCK] = gui_create_button(60, 60, "", sprite[SPRITE.INV_LOCK], 3);
        this.inv_buttons[INV.LOCK].id = INV.LOCK;
        this.inv_buttons[INV.LOCK].info.img[2] = this.inv_buttons[INV.LOCK].info.img[0];
        this.inv_buttons[INV.DRAGON_HEART] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DRAGON_HEART], 3);
        this.inv_buttons[INV.DRAGON_HEART].id = INV.DRAGON_HEART;
        this.inv_buttons[INV.LAVA_HEART] = gui_create_button(60, 60, "", sprite[SPRITE.INV_LAVA_HEART], 3);
        this.inv_buttons[INV.LAVA_HEART].id = INV.LAVA_HEART;
        this.inv_buttons[INV.RESURRECTION] = gui_create_button(60, 60, "", sprite[SPRITE.INV_RESURRECTION], 3);
        this.inv_buttons[INV.RESURRECTION].id = INV.RESURRECTION;
        this.inv_buttons[INV.LOCKPICK] = gui_create_button(60, 60, "", sprite[SPRITE.INV_LOCKPICK], 3);
        this.inv_buttons[INV.LOCKPICK].id = INV.LOCKPICK;
        this.inv_buttons[INV.TOTEM] = gui_create_button(60, 60, "", sprite[SPRITE.INV_TOTEM], 3);
        this.inv_buttons[INV.TOTEM].id = INV.TOTEM;
        this.inv_buttons[INV.AMETHYST_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.INV_AMETHYST_HELMET], 3);
        this.inv_buttons[INV.AMETHYST_HELMET].id = INV.AMETHYST_HELMET;
        this.inv_buttons[INV.SUPER_HAMMER] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SUPER_HAMMER], 3);
        this.inv_buttons[INV.SUPER_HAMMER].id = INV.SUPER_HAMMER;
        this.inv_buttons[INV.BRIDGE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BRIDGE], 3);
        this.inv_buttons[INV.BRIDGE].id = INV.BRIDGE;
        this.inv_buttons[INV.WOOD_TOWER] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WOOD_TOWER], 3);
        this.inv_buttons[INV.WOOD_TOWER].id = INV.WOOD_TOWER;
        this.inv_buttons[INV.BOAT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BOAT], 3);
        this.inv_buttons[INV.BOAT].id = INV.BOAT;
        this.inv_buttons[INV.SLED] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SLED], 3);
        this.inv_buttons[INV.SLED].id = INV.SLED;
        this.inv_buttons[INV.PLANE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PLANE], 3);
        this.inv_buttons[INV.PLANE].id = INV.PLANE;
        this.inv_buttons[INV.SADDLE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SADDLE], 3);
        this.inv_buttons[INV.SADDLE].id = INV.SADDLE;
        this.inv_buttons[INV.MOUNT_BOAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_MOUNT_BOAR], 3);
        this.inv_buttons[INV.MOUNT_BOAR].id = INV.MOUNT_BOAR;
        this.inv_buttons[INV.CRAB_BOSS] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CRAB_BOSS], 3);
        this.inv_buttons[INV.CRAB_BOSS].id = INV.CRAB_BOSS;
        this.inv_buttons[INV.BABY_DRAGON] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BABY_DRAGON], 3);
        this.inv_buttons[INV.BABY_DRAGON].id = INV.BABY_DRAGON;
        this.inv_buttons[INV.BABY_MAMMOTH] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BABY_MAMMOTH], 3);
        this.inv_buttons[INV.BABY_MAMMOTH].id = INV.BABY_MAMMOTH;
        this.inv_buttons[INV.BABY_LAVA] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BABY_LAVA], 3);
        this.inv_buttons[INV.BABY_LAVA].id = INV.BABY_LAVA;
        this.inv_buttons[INV.HAWK] = gui_create_button(60, 60, "", sprite[SPRITE.INV_HAWK], 3);
        this.inv_buttons[INV.HAWK].id = INV.HAWK;
        this.inv_buttons[INV.SAND] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SAND], 3);
        this.inv_buttons[INV.SAND].id = INV.SAND;
        this.inv_buttons[INV.SAND].info.img[2] = this.inv_buttons[INV.SAND].info.img[0];
        this.inv_buttons[INV.BOTTLE_FULL] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BOTTLE_FULL], 3);
        this.inv_buttons[INV.BOTTLE_FULL].id = INV.BOTTLE_FULL;
        this.inv_buttons[INV.BOTTLE_EMPTY] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BOTTLE_EMPTY], 3);
        this.inv_buttons[INV.BOTTLE_EMPTY].id = INV.BOTTLE_EMPTY;
        this.inv_buttons[INV.SHOVEL] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SHOVEL], 3);
        this.inv_buttons[INV.SHOVEL].id = INV.SHOVEL;
        this.inv_buttons[INV.SHOVEL_GOLD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SHOVEL_GOLD], 3);
        this.inv_buttons[INV.SHOVEL_GOLD].id = INV.SHOVEL_GOLD;
        this.inv_buttons[INV.SHOVEL_DIAMOND] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SHOVEL_DIAMOND], 3);
        this.inv_buttons[INV.SHOVEL_DIAMOND].id = INV.SHOVEL_DIAMOND;
        this.inv_buttons[INV.SHOVEL_AMETHYST] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SHOVEL_AMETHYST], 3);
        this.inv_buttons[INV.SHOVEL_AMETHYST].id = INV.SHOVEL_AMETHYST;
        this.inv_buttons[INV.SPANNER] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SPANNER], 3);
        this.inv_buttons[INV.SPANNER].id = INV.SPANNER;
        this.inv_buttons[INV.KRAKEN_SKIN] = gui_create_button(60, 60, "", sprite[SPRITE.INV_KRAKEN_SKIN], 3);
        this.inv_buttons[INV.KRAKEN_SKIN].id = INV.KRAKEN_SKIN;
        this.inv_buttons[INV.KRAKEN_SKIN].info.img[2] = this.inv_buttons[INV.KRAKEN_SKIN].info.img[0];
        this.inv_buttons[INV.WATERING_CAN] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WATERING_CAN], 3);
        this.inv_buttons[INV.WATERING_CAN].id = INV.WATERING_CAN;
        this.inv_buttons[INV.FLOUR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FLOUR], 3);
        this.inv_buttons[INV.FLOUR].id = INV.FLOUR;
        this.inv_buttons[INV.FLOUR].info.img[2] = this.inv_buttons[INV.FLOUR].info.img[0];
        this.inv_buttons[INV.WHEAT_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WHEAT_SEED], 3);
        this.inv_buttons[INV.WHEAT_SEED].id = INV.WHEAT_SEED;
        this.inv_buttons[INV.COOKIE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_COOKIE], 3);
        this.inv_buttons[INV.COOKIE].id = INV.COOKIE;
        this.inv_buttons[INV.WILD_WHEAT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WILD_WHEAT], 3);
        this.inv_buttons[INV.WILD_WHEAT].id = INV.WILD_WHEAT;
        this.inv_buttons[INV.WILD_WHEAT].info.img[2] = this.inv_buttons[INV.WILD_WHEAT].info.img[0];
        this.inv_buttons[INV.WINDMILL] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WINDMILL], 3);
        this.inv_buttons[INV.WINDMILL].id = INV.WINDMILL;
        this.inv_buttons[INV.SUPER_DIVING_SUIT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SUPER_DIVING_SUIT], 3);
        this.inv_buttons[INV.SUPER_DIVING_SUIT].id = INV.SUPER_DIVING_SUIT;
        this.inv_buttons[INV.DIVING_MASK] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DIVING_MASK], 3);
        this.inv_buttons[INV.DIVING_MASK].id = INV.DIVING_MASK;
        this.inv_buttons[INV.WATERING_CAN_FULL] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WATERING_CAN_FULL], 3);
        this.inv_buttons[INV.WATERING_CAN_FULL].id = INV.WATERING_CAN_FULL;
        this.inv_buttons[INV.CAKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CAKE], 3);
        this.inv_buttons[INV.CAKE].id = INV.CAKE;
        this.inv_buttons[INV.BREAD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BREAD], 3);
        this.inv_buttons[INV.BREAD].id = INV.BREAD;
        this.inv_buttons[INV.FOODFISH] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FOODFISH], 3);
        this.inv_buttons[INV.FOODFISH].id = INV.FOODFISH;
        this.inv_buttons[INV.FOODFISH_COOKED] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FOODFISH_COOKED], 3);
        this.inv_buttons[INV.FOODFISH_COOKED].id = INV.FOODFISH_COOKED;
        this.inv_buttons[INV.SCALES] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SCALES], 3);
        this.inv_buttons[INV.SCALES].id = INV.SCALES;
        this.inv_buttons[INV.SCALES].info.img[2] = this.inv_buttons[INV.SCALES].info.img[0];
        this.inv_buttons[INV.GROUND] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GROUND], 3);
        this.inv_buttons[INV.GROUND].id = INV.GROUND;
        this.inv_buttons[INV.GROUND].info.img[2] = this.inv_buttons[INV.GROUND].info.img[0];
        this.inv_buttons[INV.PLOT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PLOT], 3);
        this.inv_buttons[INV.PLOT].id = INV.PLOT;
        this.inv_buttons[INV.ICE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_ICE], 3);
        this.inv_buttons[INV.ICE].id = INV.ICE;
        this.inv_buttons[INV.ICE].info.img[2] = this.inv_buttons[INV.ICE].info.img[0];
        this.inv_buttons[INV.BREAD_OVEN] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BREAD_OVEN], 3);
        this.inv_buttons[INV.BREAD_OVEN].id = INV.BREAD_OVEN;
        this.inv_buttons[INV.SANDWICH] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SANDWICH], 3);
        this.inv_buttons[INV.SANDWICH].id = INV.SANDWICH;
        this.inv_buttons[INV.DRAGON_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DRAGON_HELMET], 3);
        this.inv_buttons[INV.DRAGON_HELMET].id = INV.DRAGON_HELMET;
        this.inv_buttons[INV.DRAGON_SWORD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DRAGON_SWORD], 3);
        this.inv_buttons[INV.DRAGON_SWORD].id = INV.DRAGON_SWORD;
        this.inv_buttons[INV.DRAGON_ORB] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DRAGON_ORB], 3);
        this.inv_buttons[INV.DRAGON_ORB].id = INV.DRAGON_ORB;
        this.inv_buttons[INV.DRAGON_ORB].info.img[2] = this.inv_buttons[INV.DRAGON_ORB].info.img[0];
        this.inv_buttons[INV.DRAGON_CUBE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DRAGON_CUBE], 3);
        this.inv_buttons[INV.DRAGON_CUBE].id = INV.DRAGON_CUBE;
        this.inv_buttons[INV.DRAGON_CUBE].info.img[2] = this.inv_buttons[INV.DRAGON_CUBE].info.img[0];
        this.inv_buttons[INV.LAVA_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_LAVA_SPEAR], 3);
        this.inv_buttons[INV.LAVA_SPEAR].id = INV.LAVA_SPEAR;
        this.inv_buttons[INV.LAVA_SWORD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_LAVA_SWORD], 3);
        this.inv_buttons[INV.LAVA_SWORD].id = INV.LAVA_SWORD;
        this.inv_buttons[INV.LAVA_ORB] = gui_create_button(60, 60, "", sprite[SPRITE.INV_LAVA_ORB], 3);
        this.inv_buttons[INV.LAVA_ORB].id = INV.LAVA_ORB;
        this.inv_buttons[INV.LAVA_ORB].info.img[2] = this.inv_buttons[INV.LAVA_ORB].info.img[0];
        this.inv_buttons[INV.LAVA_CUBE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_LAVA_CUBE], 3);
        this.inv_buttons[INV.LAVA_CUBE].id = INV.LAVA_CUBE;
        this.inv_buttons[INV.LAVA_CUBE].info.img[2] = this.inv_buttons[INV.LAVA_CUBE].info.img[0];
        this.inv_buttons[INV.CROWN_GREEN] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CROWN_GREEN], 3);
        this.inv_buttons[INV.CROWN_GREEN].id = INV.CROWN_GREEN;
        this.inv_buttons[INV.GEMME_GREEN] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GEMME_GREEN], 3);
        this.inv_buttons[INV.GEMME_GREEN].id = INV.GEMME_GREEN;
        this.inv_buttons[INV.GEMME_GREEN].info.img[2] = this.inv_buttons[INV.GEMME_GREEN].info.img[0];
        this.inv_buttons[INV.GEMME_ORANGE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GEMME_ORANGE], 3);
        this.inv_buttons[INV.GEMME_ORANGE].id = INV.GEMME_ORANGE;
        this.inv_buttons[INV.GEMME_ORANGE].info.img[2] = this.inv_buttons[INV.GEMME_ORANGE].info.img[0];
        this.inv_buttons[INV.CROWN_ORANGE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CROWN_ORANGE], 3);
        this.inv_buttons[INV.CROWN_ORANGE].id = INV.CROWN_ORANGE;
        this.inv_buttons[INV.GEMME_BLUE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GEMME_BLUE], 3);
        this.inv_buttons[INV.GEMME_BLUE].id = INV.GEMME_BLUE;
        this.inv_buttons[INV.GEMME_BLUE].info.img[2] = this.inv_buttons[INV.GEMME_BLUE].info.img[0];
        this.inv_buttons[INV.CROWN_BLUE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CROWN_BLUE], 3);
        this.inv_buttons[INV.CROWN_BLUE].id = INV.CROWN_BLUE;
        this.inv_buttons[INV.HOOD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_HOOD], 3);
        this.inv_buttons[INV.HOOD].id = INV.HOOD;
        this.inv_buttons[INV.PEASANT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PEASANT], 3);
        this.inv_buttons[INV.PEASANT].id = INV.PEASANT;
        this.inv_buttons[INV.SPECIAL_FUR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SPECIAL_FUR], 3);
        this.inv_buttons[INV.SPECIAL_FUR].id = INV.SPECIAL_FUR;
        this.inv_buttons[INV.SPECIAL_FUR_2] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SPECIAL_FUR_2], 3);
        this.inv_buttons[INV.SPECIAL_FUR_2].id = INV.SPECIAL_FUR_2;
        this.inv_buttons[INV.WINTER_PEASANT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WINTER_PEASANT], 3);
        this.inv_buttons[INV.WINTER_PEASANT].id = INV.WINTER_PEASANT;
        this.inv_buttons[INV.WINTER_HOOD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WINTER_HOOD], 3);
        this.inv_buttons[INV.WINTER_HOOD].id = INV.WINTER_HOOD;
        this.inv_buttons[INV.BUCKET_FULL] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BUCKET_FULL], 3);
        this.inv_buttons[INV.BUCKET_FULL].id = INV.BUCKET_FULL;
        this.inv_buttons[INV.BUCKET_EMPTY] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BUCKET_EMPTY], 3);
        this.inv_buttons[INV.BUCKET_EMPTY].id = INV.BUCKET_EMPTY;
        this.inv_buttons[INV.WELL] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WELL], 3);
        this.inv_buttons[INV.WELL].id = INV.WELL;
        this.inv_buttons[INV.SIGN] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SIGN], 3);
        this.inv_buttons[INV.SIGN].id = INV.SIGN;
        this.inv_buttons[INV.PUMPKIN_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PUMPKIN_SEED], 3);
        this.inv_buttons[INV.PUMPKIN_SEED].id = INV.PUMPKIN_SEED;
        this.inv_buttons[INV.PUMPKIN] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PUMPKIN], 3);
        this.inv_buttons[INV.PUMPKIN].id = INV.PUMPKIN;
        this.inv_buttons[INV.GARLIC_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GARLIC_SEED], 3);
        this.inv_buttons[INV.GARLIC_SEED].id = INV.GARLIC_SEED;
        this.inv_buttons[INV.GARLIC] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GARLIC], 3);
        this.inv_buttons[INV.GARLIC].id = INV.GARLIC;
        this.inv_buttons[INV.ROOF] = gui_create_button(60, 60, "", sprite[SPRITE.INV_ROOF], 3);
        this.inv_buttons[INV.ROOF].id = INV.ROOF;
        this.inv_buttons[INV.THORNBUSH_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.INV_THORNBUSH_SEED], 3);
        this.inv_buttons[INV.THORNBUSH_SEED].id = INV.THORNBUSH_SEED;
        this.inv_buttons[INV.THORNBUSH] = gui_create_button(60, 60, "", sprite[SPRITE.INV_THORNBUSH], 3);
        this.inv_buttons[INV.THORNBUSH].id = INV.THORNBUSH;
        this.inv_buttons[INV.CARROT_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CARROT_SEED], 3);
        this.inv_buttons[INV.CARROT_SEED].id = INV.CARROT_SEED;
        this.inv_buttons[INV.CARROT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CARROT], 3);
        this.inv_buttons[INV.CARROT].id = INV.CARROT;
        this.inv_buttons[INV.TOMATO_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.INV_TOMATO_SEED], 3);
        this.inv_buttons[INV.TOMATO_SEED].id = INV.TOMATO_SEED;
        this.inv_buttons[INV.TOMATO] = gui_create_button(60, 60, "", sprite[SPRITE.INV_TOMATO], 3);
        this.inv_buttons[INV.TOMATO].id = INV.TOMATO;
        this.inv_buttons[INV.WATERMELON_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WATERMELON_SEED], 3);
        this.inv_buttons[INV.WATERMELON_SEED].id = INV.WATERMELON_SEED;
        this.inv_buttons[INV.WATERMELON] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WATERMELON], 3);
        this.inv_buttons[INV.WATERMELON].id = INV.WATERMELON;
        this.inv_buttons[INV.ALOE_VERA_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.INV_ALOE_VERA_SEED], 3);
        this.inv_buttons[INV.ALOE_VERA_SEED].id = INV.ALOE_VERA_SEED;
        this.inv_buttons[INV.ALOE_VERA] = gui_create_button(60, 60, "", sprite[SPRITE.INV_ALOE_VERA], 3);
        this.inv_buttons[INV.ALOE_VERA].id = INV.ALOE_VERA;
        this.inv_buttons[INV.CHRISTMAS_HAT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CHRISTMAS_HAT], 3);
        this.inv_buttons[INV.CHRISTMAS_HAT].id = INV.CHRISTMAS_HAT;
        this.inv_buttons[INV.ELF_HAT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_ELF_HAT], 3);
        this.inv_buttons[INV.ELF_HAT].id = INV.ELF_HAT;
        this.inv_buttons[INV.WOOD_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WOOD_SPEAR], 3);
        this.inv_buttons[INV.WOOD_SPEAR].id = INV.WOOD_SPEAR;
        this.inv_buttons[INV.DRAGON_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DRAGON_SPEAR], 3);
        this.inv_buttons[INV.DRAGON_SPEAR].id = INV.DRAGON_SPEAR;
        this.inv_buttons[INV.CRAB_STICK] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CRAB_STICK], 3);
        this.inv_buttons[INV.CRAB_STICK].id = INV.CRAB_STICK;
        this.inv_buttons[INV.CRAB_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CRAB_SPEAR], 3);
        this.inv_buttons[INV.CRAB_SPEAR].id = INV.CRAB_SPEAR;
        this.inv_buttons[INV.CRAB_LOOT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CRAB_LOOT], 3);
        this.inv_buttons[INV.CRAB_LOOT].id = INV.CRAB_LOOT;
        this.inv_buttons[INV.BED] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BED], 3);
        this.inv_buttons[INV.BED].id = INV.BED;
        this.inv_buttons[INV.CROWN_CRAB] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CROWN_CRAB], 3);
        this.inv_buttons[INV.CROWN_CRAB].id = INV.CROWN_CRAB;
        this.inv_buttons[INV.GARLAND] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GARLAND], 3);
        this.inv_buttons[INV.GARLAND].id = INV.GARLAND;
        this.inv_buttons[INV.CANDY] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CANDY], 3);
        this.inv_buttons[INV.CANDY].id = INV.CANDY;
        this.inv_buttons[INV.SUGAR_CAN] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SUGAR_CAN], 3);
        this.inv_buttons[INV.SUGAR_CAN].id = INV.SUGAR_CAN;
        this.craft_buttons = [];
        this.craft_buttons[CRAFT.SWORD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SWORD], 3);
        this.craft_buttons[CRAFT.SWORD].id = CRAFT.SWORD;
        this.craft_buttons[CRAFT.PICK] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PICK], 3);
        this.craft_buttons[CRAFT.PICK].id = CRAFT.PICK;
        this.craft_buttons[CRAFT.FIRE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_FIRE], 3);
        this.craft_buttons[CRAFT.FIRE].id = CRAFT.FIRE;
        this.craft_buttons[CRAFT.WORKBENCH] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WORK], 3);
        this.craft_buttons[CRAFT.WORKBENCH].id = CRAFT.WORKBENCH;
        this.craft_buttons[CRAFT.WALL] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WALL], 3);
        this.craft_buttons[CRAFT.WALL].id = CRAFT.WALL;
        this.craft_buttons[CRAFT.SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SPIKE], 3);
        this.craft_buttons[CRAFT.SPIKE].id = CRAFT.SPIKE;
        this.craft_buttons[CRAFT.SEED] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SEED], 3);
        this.craft_buttons[CRAFT.SEED].id = CRAFT.SEED;
        this.craft_buttons[CRAFT.PICK_GOLD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PICK_GOLD], 3);
        this.craft_buttons[CRAFT.PICK_GOLD].id = CRAFT.PICK_GOLD;
        this.craft_buttons[CRAFT.PICK_DIAMOND] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PICK_DIAMOND], 3);
        this.craft_buttons[CRAFT.PICK_DIAMOND].id = CRAFT.PICK_DIAMOND;
        this.craft_buttons[CRAFT.SWORD_GOLD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SWORD_GOLD], 3);
        this.craft_buttons[CRAFT.SWORD_GOLD].id = CRAFT.SWORD_GOLD;
        this.craft_buttons[CRAFT.SWORD_WOOD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SWORD_WOOD], 3);
        this.craft_buttons[CRAFT.SWORD_WOOD].id = CRAFT.SWORD_WOOD;
        this.craft_buttons[CRAFT.SWORD_DIAMOND] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SWORD_DIAMOND], 3);
        this.craft_buttons[CRAFT.SWORD_DIAMOND].id = CRAFT.SWORD_DIAMOND;
        this.craft_buttons[CRAFT.PICK_WOOD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PICK_WOOD], 3);
        this.craft_buttons[CRAFT.PICK_WOOD].id = CRAFT.PICK_WOOD;
        this.craft_buttons[CRAFT.COOKED_MEAT] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_COOKED_MEAT], 3);
        this.craft_buttons[CRAFT.COOKED_MEAT].id = CRAFT.COOKED_MEAT;
        this.craft_buttons[CRAFT.BIG_FIRE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BIG_FIRE], 3);
        this.craft_buttons[CRAFT.BIG_FIRE].id = CRAFT.BIG_FIRE;
        this.craft_buttons[CRAFT.BANDAGE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BANDAGE], 3);
        this.craft_buttons[CRAFT.BANDAGE].id = CRAFT.BANDAGE;
        this.craft_buttons[CRAFT.STONE_WALL] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_STONE_WALL], 3);
        this.craft_buttons[CRAFT.STONE_WALL].id = CRAFT.STONE_WALL;
        this.craft_buttons[CRAFT.GOLD_WALL] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_GOLD_WALL], 3);
        this.craft_buttons[CRAFT.GOLD_WALL].id = CRAFT.GOLD_WALL;
        this.craft_buttons[CRAFT.DIAMOND_WALL] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DIAMOND_WALL], 3);
        this.craft_buttons[CRAFT.DIAMOND_WALL].id = CRAFT.DIAMOND_WALL;
        this.craft_buttons[CRAFT.WOOD_DOOR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DOOR_WOOD_CLOSE], 3);
        this.craft_buttons[CRAFT.WOOD_DOOR].id = CRAFT.WOOD_DOOR;
        this.craft_buttons[CRAFT.CHEST] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_CHEST], 3);
        this.craft_buttons[CRAFT.CHEST].id = CRAFT.CHEST;
        this.craft_buttons[CRAFT.STONE_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_STONE_SPIKE], 3);
        this.craft_buttons[CRAFT.STONE_SPIKE].id = CRAFT.STONE_SPIKE;
        this.craft_buttons[CRAFT.GOLD_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_GOLD_SPIKE], 3);
        this.craft_buttons[CRAFT.GOLD_SPIKE].id = CRAFT.GOLD_SPIKE;
        this.craft_buttons[CRAFT.DIAMOND_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DIAMOND_SPIKE], 3);
        this.craft_buttons[CRAFT.DIAMOND_SPIKE].id = CRAFT.DIAMOND_SPIKE;
        this.craft_buttons[CRAFT.BAG] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BAG], 3);
        this.craft_buttons[CRAFT.BAG].id = CRAFT.BAG;
        this.craft_buttons[CRAFT.EARMUFFS] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_EARMUFFS], 3);
        this.craft_buttons[CRAFT.EARMUFFS].id = CRAFT.EARMUFFS;
        this.craft_buttons[CRAFT.STONE_DOOR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DOOR_STONE_CLOSE], 3);
        this.craft_buttons[CRAFT.STONE_DOOR].id = CRAFT.STONE_DOOR;
        this.craft_buttons[CRAFT.GOLD_DOOR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DOOR_GOLD_CLOSE], 3);
        this.craft_buttons[CRAFT.GOLD_DOOR].id = CRAFT.GOLD_DOOR;
        this.craft_buttons[CRAFT.DIAMOND_DOOR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DOOR_DIAMOND_CLOSE], 3);
        this.craft_buttons[CRAFT.DIAMOND_DOOR].id = CRAFT.DIAMOND_DOOR;
        this.craft_buttons[CRAFT.EARMUFFS] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_EARMUFFS], 3);
        this.craft_buttons[CRAFT.EARMUFFS].id = CRAFT.EARMUFFS;
        this.craft_buttons[CRAFT.COAT] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_COAT], 3);
        this.craft_buttons[CRAFT.COAT].id = CRAFT.COAT;
        this.craft_buttons[CRAFT.WOOD_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WOOD_SPEAR], 3);
        this.craft_buttons[CRAFT.WOOD_SPEAR].id = CRAFT.WOOD_SPEAR;
        this.craft_buttons[CRAFT.SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SPEAR], 3);
        this.craft_buttons[CRAFT.SPEAR].id = CRAFT.SPEAR;
        this.craft_buttons[CRAFT.GOLD_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_GOLD_SPEAR], 3);
        this.craft_buttons[CRAFT.GOLD_SPEAR].id = CRAFT.GOLD_SPEAR;
        this.craft_buttons[CRAFT.DIAMOND_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DIAMOND_SPEAR], 3);
        this.craft_buttons[CRAFT.DIAMOND_SPEAR].id = CRAFT.DIAMOND_SPEAR;
        this.craft_buttons[CRAFT.DRAGON_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DRAGON_SPEAR], 3);
        this.craft_buttons[CRAFT.DRAGON_SPEAR].id = CRAFT.DRAGON_SPEAR;
        this.craft_buttons[CRAFT.FURNACE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_FURNACE], 3);
        this.craft_buttons[CRAFT.FURNACE].id = CRAFT.FURNACE;
        this.craft_buttons[CRAFT.EXPLORER_HAT] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_EXPLORER_HAT], 3);
        this.craft_buttons[CRAFT.EXPLORER_HAT].id = CRAFT.EXPLORER_HAT;
        this.craft_buttons[CRAFT.PIRATE_HAT] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PIRATE_HAT], 3);
        this.craft_buttons[CRAFT.PIRATE_HAT].id = CRAFT.PIRATE_HAT;
        this.craft_buttons[CRAFT.FLOWER_HAT] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_FLOWER_HAT], 3);
        this.craft_buttons[CRAFT.FLOWER_HAT].id = CRAFT.FLOWER_HAT;
        this.craft_buttons[CRAFT.FUR_HAT] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_FUR_HAT], 3);
        this.craft_buttons[CRAFT.FUR_HAT].id = CRAFT.FUR_HAT;
        this.craft_buttons[CRAFT.TURBAN1] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_TURBAN1], 3);
        this.craft_buttons[CRAFT.TURBAN1].id = CRAFT.TURBAN1;
        this.craft_buttons[CRAFT.TURBAN2] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_TURBAN2], 3);
        this.craft_buttons[CRAFT.TURBAN2].id = CRAFT.TURBAN2;
        this.craft_buttons[CRAFT.WOOD_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WOOD_BOW], 3);
        this.craft_buttons[CRAFT.WOOD_BOW].id = CRAFT.WOOD_BOW;
        this.craft_buttons[CRAFT.WOOD_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WOOD_ARROW], 3);
        this.craft_buttons[CRAFT.WOOD_ARROW].id = CRAFT.WOOD_ARROW;
        this.craft_buttons[CRAFT.WOOD_SHIELD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WOOD_SHIELD], 3);
        this.craft_buttons[CRAFT.WOOD_SHIELD].id = CRAFT.WOOD_SHIELD;
        this.craft_buttons[CRAFT.STONE_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_STONE_BOW], 3);
        this.craft_buttons[CRAFT.STONE_BOW].id = CRAFT.STONE_BOW;
        this.craft_buttons[CRAFT.STONE_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_STONE_ARROW], 3);
        this.craft_buttons[CRAFT.STONE_ARROW].id = CRAFT.STONE_ARROW;
        this.craft_buttons[CRAFT.STONE_SHIELD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_STONE_SHIELD], 3);
        this.craft_buttons[CRAFT.STONE_SHIELD].id = CRAFT.STONE_SHIELD;
        this.craft_buttons[CRAFT.GOLD_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_GOLD_BOW], 3);
        this.craft_buttons[CRAFT.GOLD_BOW].id = CRAFT.GOLD_BOW;
        this.craft_buttons[CRAFT.GOLD_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_GOLD_ARROW], 3);
        this.craft_buttons[CRAFT.GOLD_ARROW].id = CRAFT.GOLD_ARROW;
        this.craft_buttons[CRAFT.GOLD_SHIELD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_GOLD_SHIELD], 3);
        this.craft_buttons[CRAFT.GOLD_SHIELD].id = CRAFT.GOLD_SHIELD;
        this.craft_buttons[CRAFT.DIAMOND_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DIAMOND_BOW], 3);
        this.craft_buttons[CRAFT.DIAMOND_BOW].id = CRAFT.DIAMOND_BOW;
        this.craft_buttons[CRAFT.DIAMOND_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DIAMOND_ARROW], 3);
        this.craft_buttons[CRAFT.DIAMOND_ARROW].id = CRAFT.DIAMOND_ARROW;
        this.craft_buttons[CRAFT.DIAMOND_SHIELD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DIAMOND_SHIELD], 3);
        this.craft_buttons[CRAFT.DIAMOND_SHIELD].id = CRAFT.DIAMOND_SHIELD;
        this.craft_buttons[CRAFT.AMETHYST_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_AMETHYST_BOW], 3);
        this.craft_buttons[CRAFT.AMETHYST_BOW].id = CRAFT.AMETHYST_BOW;
        this.craft_buttons[CRAFT.AMETHYST_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_AMETHYST_ARROW], 3);
        this.craft_buttons[CRAFT.AMETHYST_ARROW].id = CRAFT.AMETHYST_ARROW;
        this.craft_buttons[CRAFT.AMETHYST_SHIELD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_AMETHYST_SHIELD], 3);
        this.craft_buttons[CRAFT.AMETHYST_SHIELD].id = CRAFT.AMETHYST_SHIELD;
        this.craft_buttons[CRAFT.REIDITE_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_BOW], 3);
        this.craft_buttons[CRAFT.REIDITE_BOW].id = CRAFT.REIDITE_BOW;
        this.craft_buttons[CRAFT.REIDITE_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_ARROW], 3);
        this.craft_buttons[CRAFT.REIDITE_ARROW].id = CRAFT.REIDITE_ARROW;
        this.craft_buttons[CRAFT.REIDITE_SHIELD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_SHIELD], 3);
        this.craft_buttons[CRAFT.REIDITE_SHIELD].id = CRAFT.REIDITE_SHIELD;
        this.craft_buttons[CRAFT.DRAGON_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DRAGON_BOW], 3);
        this.craft_buttons[CRAFT.DRAGON_BOW].id = CRAFT.DRAGON_BOW;
        this.craft_buttons[CRAFT.DRAGON_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DRAGON_ARROW], 3);
        this.craft_buttons[CRAFT.DRAGON_ARROW].id = CRAFT.DRAGON_ARROW;
        this.craft_buttons[CRAFT.WOOD_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WOOD_HELMET], 3);
        this.craft_buttons[CRAFT.WOOD_HELMET].id = CRAFT.WOOD_HELMET;
        this.craft_buttons[CRAFT.STONE_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_STONE_HELMET], 3);
        this.craft_buttons[CRAFT.STONE_HELMET].id = CRAFT.STONE_HELMET;
        this.craft_buttons[CRAFT.GOLD_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_GOLD_HELMET], 3);
        this.craft_buttons[CRAFT.GOLD_HELMET].id = CRAFT.GOLD_HELMET;
        this.craft_buttons[CRAFT.DIAMOND_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DIAMOND_HELMET], 3);
        this.craft_buttons[CRAFT.DIAMOND_HELMET].id = CRAFT.DIAMOND_HELMET;
        this.craft_buttons[CRAFT.BOOK] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BOOK], 3);
        this.craft_buttons[CRAFT.BOOK].id = CRAFT.BOOK;
        this.craft_buttons[CRAFT.PAPER] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PAPER], 3);
        this.craft_buttons[CRAFT.PAPER].id = CRAFT.PAPER;
        this.craft_buttons[CRAFT.BAG] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BAG], 3);
        this.craft_buttons[CRAFT.BAG].id = CRAFT.BAG;
        this.craft_buttons[CRAFT.SWORD_AMETHYST] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SWORD_AMETHYST], 3);
        this.craft_buttons[CRAFT.SWORD_AMETHYST].id = CRAFT.SWORD_AMETHYST;
        this.craft_buttons[CRAFT.PIRATE_SWORD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PIRATE_SWORD], 3);
        this.craft_buttons[CRAFT.PIRATE_SWORD].id = CRAFT.PIRATE_SWORD;
        this.craft_buttons[CRAFT.PICK_AMETHYST] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PICK_AMETHYST], 3);
        this.craft_buttons[CRAFT.PICK_AMETHYST].id = CRAFT.PICK_AMETHYST;
        this.craft_buttons[CRAFT.PICK_REIDITE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PICK_REIDITE], 3);
        this.craft_buttons[CRAFT.PICK_REIDITE].id = CRAFT.PICK_REIDITE;
        this.craft_buttons[CRAFT.AMETHYST_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_AMETHYST_SPEAR], 3);
        this.craft_buttons[CRAFT.AMETHYST_SPEAR].id = CRAFT.AMETHYST_SPEAR;
        this.craft_buttons[CRAFT.HAMMER] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_HAMMER], 3);
        this.craft_buttons[CRAFT.HAMMER].id = CRAFT.HAMMER;
        this.craft_buttons[CRAFT.HAMMER_GOLD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_HAMMER_GOLD], 3);
        this.craft_buttons[CRAFT.HAMMER_GOLD].id = CRAFT.HAMMER_GOLD;
        this.craft_buttons[CRAFT.HAMMER_DIAMOND] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_HAMMER_DIAMOND], 3);
        this.craft_buttons[CRAFT.HAMMER_DIAMOND].id = CRAFT.HAMMER_DIAMOND;
        this.craft_buttons[CRAFT.HAMMER_AMETHYST] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_HAMMER_AMETHYST], 3);
        this.craft_buttons[CRAFT.HAMMER_AMETHYST].id = CRAFT.HAMMER_AMETHYST;
        this.craft_buttons[CRAFT.HAMMER_REIDITE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_HAMMER_REIDITE], 3);
        this.craft_buttons[CRAFT.HAMMER_REIDITE].id = CRAFT.HAMMER_REIDITE;
        this.craft_buttons[CRAFT.AMETHYST_WALL] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_AMETHYST_WALL], 3);
        this.craft_buttons[CRAFT.AMETHYST_WALL].id = CRAFT.AMETHYST_WALL;
        this.craft_buttons[CRAFT.AMETHYST_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_AMETHYST_SPIKE], 3);
        this.craft_buttons[CRAFT.AMETHYST_SPIKE].id = CRAFT.AMETHYST_SPIKE;
        this.craft_buttons[CRAFT.AMETHYST_DOOR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DOOR_AMETHYST_CLOSE], 3);
        this.craft_buttons[CRAFT.AMETHYST_DOOR].id = CRAFT.AMETHYST_DOOR;
        this.craft_buttons[CRAFT.CAP_SCARF] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_CAP_SCARF], 3);
        this.craft_buttons[CRAFT.CAP_SCARF].id = CRAFT.CAP_SCARF;
        this.craft_buttons[CRAFT.BLUE_CORD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BLUE_CORD], 3);
        this.craft_buttons[CRAFT.BLUE_CORD].id = CRAFT.BLUE_CORD;
        this.craft_buttons[CRAFT.LOCK] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_LOCK], 3);
        this.craft_buttons[CRAFT.LOCK].id = CRAFT.LOCK;
        this.craft_buttons[CRAFT.RESURRECTION] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_RESURRECTION], 3);
        this.craft_buttons[CRAFT.RESURRECTION].id = CRAFT.RESURRECTION;
        this.craft_buttons[CRAFT.LOCKPICK] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_LOCKPICK], 3);
        this.craft_buttons[CRAFT.LOCKPICK].id = CRAFT.LOCKPICK;
        this.craft_buttons[CRAFT.TOTEM] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_TOTEM], 3);
        this.craft_buttons[CRAFT.TOTEM].id = CRAFT.TOTEM;
        this.craft_buttons[CRAFT.AMETHYST_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_AMETHYST_HELMET], 3);
        this.craft_buttons[CRAFT.AMETHYST_HELMET].id = CRAFT.AMETHYST_HELMET;
        this.craft_buttons[CRAFT.SUPER_HAMMER] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SUPER_HAMMER], 3);
        this.craft_buttons[CRAFT.SUPER_HAMMER].id = CRAFT.SUPER_HAMMER;
        this.craft_buttons[CRAFT.BRIDGE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BRIDGE], 3);
        this.craft_buttons[CRAFT.BRIDGE].id = CRAFT.BRIDGE;
        this.craft_buttons[CRAFT.WOOD_TOWER] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WOOD_TOWER], 3);
        this.craft_buttons[CRAFT.WOOD_TOWER].id = CRAFT.WOOD_TOWER;
        this.craft_buttons[CRAFT.BOAT] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BOAT], 3);
        this.craft_buttons[CRAFT.BOAT].id = CRAFT.BOAT;
        this.craft_buttons[CRAFT.SLED] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SLED], 3);
        this.craft_buttons[CRAFT.SLED].id = CRAFT.SLED;
        this.craft_buttons[CRAFT.PLANE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PLANE], 3);
        this.craft_buttons[CRAFT.PLANE].id = CRAFT.PLANE;
        this.craft_buttons[CRAFT.SADDLE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SADDLE], 3);
        this.craft_buttons[CRAFT.SADDLE].id = CRAFT.SADDLE;
        this.craft_buttons[CRAFT.MOUNT_BOAR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_MOUNT_BOAR], 3);
        this.craft_buttons[CRAFT.MOUNT_BOAR].id = CRAFT.MOUNT_BOAR;
        this.craft_buttons[CRAFT.BABY_DRAGON] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BABY_DRAGON], 3);
        this.craft_buttons[CRAFT.BABY_DRAGON].id = CRAFT.BABY_DRAGON;
        this.craft_buttons[CRAFT.BABY_MAMMOTH] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BABY_MAMMOTH], 3);
        this.craft_buttons[CRAFT.BABY_MAMMOTH].id = CRAFT.BABY_MAMMOTH;
        this.craft_buttons[CRAFT.CRAB_BOSS] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_CRAB_BOSS], 3);
        this.craft_buttons[CRAFT.CRAB_BOSS].id = CRAFT.CRAB_BOSS;
        this.craft_buttons[CRAFT.BOTTLE_EMPTY] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BOTTLE_EMPTY], 3);
        this.craft_buttons[CRAFT.BOTTLE_EMPTY].id = CRAFT.BOTTLE_EMPTY;
        this.craft_buttons[CRAFT.BOTTLE_FULL] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BOTTLE_FULL], 3);
        this.craft_buttons[CRAFT.BOTTLE_FULL].id = CRAFT.BOTTLE_FULL;
        this.craft_buttons[CRAFT.BOTTLE_FULL_2] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BOTTLE_FULL], 3);
        this.craft_buttons[CRAFT.BOTTLE_FULL_2].id = CRAFT.BOTTLE_FULL_2;
        this.craft_buttons[CRAFT.BOTTLE_FULL_3] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BOTTLE_FULL], 3);
        this.craft_buttons[CRAFT.BOTTLE_FULL_3].id = CRAFT.BOTTLE_FULL_3;
        this.craft_buttons[CRAFT.SHOVEL] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SHOVEL], 3);
        this.craft_buttons[CRAFT.SHOVEL].id = CRAFT.SHOVEL;
        this.craft_buttons[CRAFT.SHOVEL_GOLD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SHOVEL_GOLD], 3);
        this.craft_buttons[CRAFT.SHOVEL_GOLD].id = CRAFT.SHOVEL_GOLD;
        this.craft_buttons[CRAFT.SHOVEL_DIAMOND] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SHOVEL_DIAMOND], 3);
        this.craft_buttons[CRAFT.SHOVEL_DIAMOND].id = CRAFT.SHOVEL_DIAMOND;
        this.craft_buttons[CRAFT.SHOVEL_AMETHYST] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SHOVEL_AMETHYST], 3);
        this.craft_buttons[CRAFT.SHOVEL_AMETHYST].id = CRAFT.SHOVEL_AMETHYST;
        this.craft_buttons[CRAFT.SPANNER] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SPANNER], 3);
        this.craft_buttons[CRAFT.SPANNER].id = CRAFT.SPANNER;
        this.craft_buttons[CRAFT.WATERING_CAN] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WATERING_CAN], 3);
        this.craft_buttons[CRAFT.WATERING_CAN].id = CRAFT.WATERING_CAN;
        this.craft_buttons[CRAFT.WHEAT_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WHEAT_SEED], 3);
        this.craft_buttons[CRAFT.WHEAT_SEED].id = CRAFT.WHEAT_SEED;
        this.craft_buttons[CRAFT.COOKIE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_COOKIE], 3);
        this.craft_buttons[CRAFT.COOKIE].id = CRAFT.COOKIE;
        this.craft_buttons[CRAFT.WINDMILL] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WINDMILL], 3);
        this.craft_buttons[CRAFT.WINDMILL].id = CRAFT.WINDMILL;
        this.craft_buttons[CRAFT.SUPER_DIVING_SUIT] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SUPER_DIVING_SUIT], 3);
        this.craft_buttons[CRAFT.SUPER_DIVING_SUIT].id = CRAFT.SUPER_DIVING_SUIT;
        this.craft_buttons[CRAFT.DIVING_MASK] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DIVING_MASK], 3);
        this.craft_buttons[CRAFT.DIVING_MASK].id = CRAFT.DIVING_MASK;
        this.craft_buttons[CRAFT.WATERING_CAN_FULL] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WATERING_CAN_FULL], 3);
        this.craft_buttons[CRAFT.WATERING_CAN_FULL].id = CRAFT.WATERING_CAN_FULL;
        this.craft_buttons[CRAFT.CAKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_CAKE], 3);
        this.craft_buttons[CRAFT.CAKE].id = CRAFT.CAKE;
        this.craft_buttons[CRAFT.BREAD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BREAD], 3);
        this.craft_buttons[CRAFT.BREAD].id = CRAFT.BREAD;
        this.craft_buttons[CRAFT.FOODFISH_COOKED] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_FOODFISH_COOKED], 3);
        this.craft_buttons[CRAFT.FOODFISH_COOKED].id = CRAFT.FOODFISH_COOKED;
        this.craft_buttons[CRAFT.PLOT] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PLOT], 3);
        this.craft_buttons[CRAFT.PLOT].id = CRAFT.PLOT;
        this.craft_buttons[CRAFT.BREAD_OVEN] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BREAD_OVEN], 3);
        this.craft_buttons[CRAFT.BREAD_OVEN].id = CRAFT.BREAD_OVEN;
        this.craft_buttons[CRAFT.SANDWICH] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SANDWICH], 3);
        this.craft_buttons[CRAFT.SANDWICH].id = CRAFT.SANDWICH;
        this.craft_buttons[CRAFT.DRAGON_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DRAGON_HELMET], 3);
        this.craft_buttons[CRAFT.DRAGON_HELMET].id = CRAFT.DRAGON_HELMET;
        this.craft_buttons[CRAFT.DRAGON_SWORD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DRAGON_SWORD], 3);
        this.craft_buttons[CRAFT.DRAGON_SWORD].id = CRAFT.DRAGON_SWORD;
        this.craft_buttons[CRAFT.CROWN_GREEN] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_CROWN_GREEN], 3);
        this.craft_buttons[CRAFT.CROWN_GREEN].id = CRAFT.CROWN_GREEN;
        this.craft_buttons[CRAFT.CROWN_ORANGE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_CROWN_ORANGE], 3);
        this.craft_buttons[CRAFT.CROWN_ORANGE].id = CRAFT.CROWN_ORANGE;
        this.craft_buttons[CRAFT.CROWN_BLUE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_CROWN_BLUE], 3);
        this.craft_buttons[CRAFT.CROWN_BLUE].id = CRAFT.CROWN_BLUE;
        this.craft_buttons[CRAFT.HOOD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_HOOD], 3);
        this.craft_buttons[CRAFT.HOOD].id = CRAFT.HOOD;
        this.craft_buttons[CRAFT.PEASANT] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PEASANT], 3);
        this.craft_buttons[CRAFT.PEASANT].id = CRAFT.PEASANT;
        this.craft_buttons[CRAFT.WINTER_PEASANT] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WINTER_PEASANT], 3);
        this.craft_buttons[CRAFT.WINTER_PEASANT].id = CRAFT.WINTER_PEASANT;
        this.craft_buttons[CRAFT.WINTER_HOOD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WINTER_HOOD], 3);
        this.craft_buttons[CRAFT.WINTER_HOOD].id = CRAFT.WINTER_HOOD;
        this.craft_buttons[CRAFT.BUCKET_FULL] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BUCKET_FULL], 3);
        this.craft_buttons[CRAFT.BUCKET_FULL].id = CRAFT.BUCKET_FULL;
        this.craft_buttons[CRAFT.BUCKET_EMPTY] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BUCKET_EMPTY], 3);
        this.craft_buttons[CRAFT.BUCKET_EMPTY].id = CRAFT.BUCKET_EMPTY;
        this.craft_buttons[CRAFT.WELL] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WELL], 3);
        this.craft_buttons[CRAFT.WELL].id = CRAFT.WELL;
        this.craft_buttons[CRAFT.SIGN] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SIGN], 3);
        this.craft_buttons[CRAFT.SIGN].id = CRAFT.SIGN;
        this.craft_buttons[CRAFT.PUMPKIN_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PUMPKIN_SEED], 3);
        this.craft_buttons[CRAFT.PUMPKIN_SEED].id = CRAFT.PUMPKIN_SEED;
        this.craft_buttons[CRAFT.GARLIC_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_GARLIC_SEED], 3);
        this.craft_buttons[CRAFT.GARLIC_SEED].id = CRAFT.GARLIC_SEED;
        this.craft_buttons[CRAFT.ROOF] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_ROOF], 3);
        this.craft_buttons[CRAFT.ROOF].id = CRAFT.ROOF;
        this.craft_buttons[CRAFT.THORNBUSH_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_THORNBUSH_SEED], 3);
        this.craft_buttons[CRAFT.THORNBUSH_SEED].id = CRAFT.THORNBUSH_SEED;
        this.craft_buttons[CRAFT.TOMATO_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_TOMATO_SEED], 3);
        this.craft_buttons[CRAFT.TOMATO_SEED].id = CRAFT.TOMATO_SEED;
        this.craft_buttons[CRAFT.CARROT_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_CARROT_SEED], 3);
        this.craft_buttons[CRAFT.CARROT_SEED].id = CRAFT.CARROT_SEED;
        this.craft_buttons[CRAFT.WATERMELON_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WATERMELON_SEED], 3);
        this.craft_buttons[CRAFT.WATERMELON_SEED].id = CRAFT.WATERMELON_SEED;
        this.craft_buttons[CRAFT.ALOE_VERA_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_ALOE_VERA_SEED], 3);
        this.craft_buttons[CRAFT.ALOE_VERA_SEED].id = CRAFT.ALOE_VERA_SEED;
        this.craft_buttons[CRAFT.WOOD_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WOOD_SPEAR], 3);
        this.craft_buttons[CRAFT.WOOD_SPEAR].id = CRAFT.WOOD_SPEAR;
        this.craft_buttons[CRAFT.DRAGON_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DRAGON_SPEAR], 3);
        this.craft_buttons[CRAFT.DRAGON_SPEAR].id = CRAFT.DRAGON_SPEAR;
        this.craft_buttons[CRAFT.CRAB_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_CRAB_SPEAR], 3);
        this.craft_buttons[CRAFT.CRAB_SPEAR].id = CRAFT.CRAB_SPEAR;
        this.craft_buttons[CRAFT.BED] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BED], 3);
        this.craft_buttons[CRAFT.BED].id = CRAFT.BED;
        this.craft_buttons[CRAFT.CROWN_CRAB] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_CROWN_CRAB], 3);
        this.craft_buttons[CRAFT.CROWN_CRAB].id = CRAFT.CROWN_CRAB;
        this.chest_buttons[INV.PITCHFORK] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PITCHFORK], 3);
        this.chest_buttons[INV.PITCHFORK].id = INV.PITCHFORK;
        this.inv_buttons[INV.PITCHFORK] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PITCHFORK], 3);
        this.inv_buttons[INV.PITCHFORK].id = INV.PITCHFORK;
        this.craft_buttons[CRAFT.PITCHFORK] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PITCHFORK], 3);
        this.craft_buttons[CRAFT.PITCHFORK].id = CRAFT.PITCHFORK;
        this.chest_buttons[INV.PITCHFORK2] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PITCHFORK2], 3);
        this.chest_buttons[INV.PITCHFORK2].id = INV.PITCHFORK2;
        this.inv_buttons[INV.PITCHFORK2] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PITCHFORK2], 3);
        this.inv_buttons[INV.PITCHFORK2].id = INV.PITCHFORK2;
        this.craft_buttons[CRAFT.PITCHFORK2] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PITCHFORK2], 3);
        this.craft_buttons[CRAFT.PITCHFORK2].id = CRAFT.PITCHFORK2;
        this.chest_buttons[INV.MACHETE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_MACHETE], 3);
        this.chest_buttons[INV.MACHETE].id = INV.MACHETE;
        this.inv_buttons[INV.MACHETE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_MACHETE], 3);
        this.inv_buttons[INV.MACHETE].id = INV.MACHETE;
        this.craft_buttons[CRAFT.MACHETE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_MACHETE], 3);
        this.craft_buttons[CRAFT.MACHETE].id = CRAFT.MACHETE;
        this.chest_buttons[INV.PILOT_HELMET] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PILOT_HELMET], 3);
        this.chest_buttons[INV.PILOT_HELMET].id = INV.PILOT_HELMET;
        this.inv_buttons[INV.PILOT_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PILOT_HELMET], 3);
        this.inv_buttons[INV.PILOT_HELMET].id = INV.PILOT_HELMET;
        this.craft_buttons[CRAFT.PILOT_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PILOT_HELMET], 3);
        this.craft_buttons[CRAFT.PILOT_HELMET].id = CRAFT.PILOT_HELMET;
        this.chest_buttons[INV.PITCHFORK_PART] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PITCHFORK_PART], 3);
        this.chest_buttons[INV.PITCHFORK_PART].id = INV.PITCHFORK_PART;
        this.inv_buttons[INV.PITCHFORK_PART] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PITCHFORK_PART], 3);
        this.inv_buttons[INV.PITCHFORK_PART].id = INV.PITCHFORK_PART;
        this.chest_buttons[INV.SANDWORM_JUICE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SANDWORM_JUICE], 3);
        this.chest_buttons[INV.SANDWORM_JUICE].id = INV.SANDWORM_JUICE;
        this.inv_buttons[INV.SANDWORM_JUICE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SANDWORM_JUICE], 3);
        this.inv_buttons[INV.SANDWORM_JUICE].id = INV.SANDWORM_JUICE;
        this.chest_buttons[INV.PILOT_GLASSES] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PILOT_GLASSES], 3);
        this.chest_buttons[INV.PILOT_GLASSES].id = INV.PILOT_GLASSES;
        this.inv_buttons[INV.PILOT_GLASSES] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PILOT_GLASSES], 3);
        this.inv_buttons[INV.PILOT_GLASSES].id = INV.PILOT_GLASSES;
        this.chest_buttons[INV.EMERALD_MACHINE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EMERALD_MACHINE], 3);
        this.chest_buttons[INV.EMERALD_MACHINE].id = INV.EMERALD_MACHINE;
        this.inv_buttons[INV.EMERALD_MACHINE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EMERALD_MACHINE], 3);
        this.inv_buttons[INV.EMERALD_MACHINE].id = INV.EMERALD_MACHINE;
        this.craft_buttons[CRAFT.EMERALD_MACHINE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_EMERALD_MACHINE], 3);
        this.craft_buttons[CRAFT.EMERALD_MACHINE].id = CRAFT.EMERALD_MACHINE;
        this.chest_buttons[INV.WOOD_DOOR_SPIKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WOOD_DOOR_SPIKE], 3);
        this.chest_buttons[INV.WOOD_DOOR_SPIKE].id = INV.WOOD_DOOR_SPIKE;
        this.inv_buttons[INV.WOOD_DOOR_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WOOD_DOOR_SPIKE], 3);
        this.inv_buttons[INV.WOOD_DOOR_SPIKE].id = INV.WOOD_DOOR_SPIKE;
        this.craft_buttons[CRAFT.WOOD_DOOR_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WOOD_DOOR_SPIKE], 3);
        this.craft_buttons[CRAFT.WOOD_DOOR_SPIKE].id = CRAFT.WOOD_DOOR_SPIKE;
        this.chest_buttons[INV.STONE_DOOR_SPIKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_STONE_DOOR_SPIKE], 3);
        this.chest_buttons[INV.STONE_DOOR_SPIKE].id = INV.STONE_DOOR_SPIKE;
        this.inv_buttons[INV.STONE_DOOR_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_STONE_DOOR_SPIKE], 3);
        this.inv_buttons[INV.STONE_DOOR_SPIKE].id = INV.STONE_DOOR_SPIKE;
        this.craft_buttons[CRAFT.STONE_DOOR_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_STONE_DOOR_SPIKE], 3);
        this.craft_buttons[CRAFT.STONE_DOOR_SPIKE].id = CRAFT.STONE_DOOR_SPIKE;
        this.chest_buttons[INV.GOLD_DOOR_SPIKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GOLD_DOOR_SPIKE], 3);
        this.chest_buttons[INV.GOLD_DOOR_SPIKE].id = INV.GOLD_DOOR_SPIKE;
        this.inv_buttons[INV.GOLD_DOOR_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GOLD_DOOR_SPIKE], 3);
        this.inv_buttons[INV.GOLD_DOOR_SPIKE].id = INV.GOLD_DOOR_SPIKE;
        this.craft_buttons[CRAFT.GOLD_DOOR_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_GOLD_DOOR_SPIKE], 3);
        this.craft_buttons[CRAFT.GOLD_DOOR_SPIKE].id = CRAFT.GOLD_DOOR_SPIKE;
        this.chest_buttons[INV.DIAMOND_DOOR_SPIKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DIAMOND_DOOR_SPIKE], 3);
        this.chest_buttons[INV.DIAMOND_DOOR_SPIKE].id = INV.DIAMOND_DOOR_SPIKE;
        this.inv_buttons[INV.DIAMOND_DOOR_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DIAMOND_DOOR_SPIKE], 3);
        this.inv_buttons[INV.DIAMOND_DOOR_SPIKE].id = INV.DIAMOND_DOOR_SPIKE;
        this.craft_buttons[CRAFT.DIAMOND_DOOR_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DIAMOND_DOOR_SPIKE], 3);
        this.craft_buttons[CRAFT.DIAMOND_DOOR_SPIKE].id = CRAFT.DIAMOND_DOOR_SPIKE;
        this.chest_buttons[INV.AMETHYST_DOOR_SPIKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_AMETHYST_DOOR_SPIKE], 3);
        this.chest_buttons[INV.AMETHYST_DOOR_SPIKE].id = INV.AMETHYST_DOOR_SPIKE;
        this.inv_buttons[INV.AMETHYST_DOOR_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_AMETHYST_DOOR_SPIKE], 3);
        this.inv_buttons[INV.AMETHYST_DOOR_SPIKE].id = INV.AMETHYST_DOOR_SPIKE;
        this.craft_buttons[CRAFT.AMETHYST_DOOR_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_AMETHYST_DOOR_SPIKE], 3);
        this.craft_buttons[CRAFT.AMETHYST_DOOR_SPIKE].id = CRAFT.AMETHYST_DOOR_SPIKE;
        this.chest_buttons[INV.REIDITE_DOOR_SPIKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_REIDITE_DOOR_SPIKE], 3);
        this.chest_buttons[INV.REIDITE_DOOR_SPIKE].id = INV.REIDITE_DOOR_SPIKE;
        this.inv_buttons[INV.REIDITE_DOOR_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE_DOOR_SPIKE], 3);
        this.inv_buttons[INV.REIDITE_DOOR_SPIKE].id = INV.REIDITE_DOOR_SPIKE;
        this.craft_buttons[CRAFT.REIDITE_DOOR_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_DOOR_SPIKE], 3);
        this.craft_buttons[CRAFT.REIDITE_DOOR_SPIKE].id = CRAFT.REIDITE_DOOR_SPIKE;
        this.chest_buttons[INV.REIDITE_WALL] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_REIDITE_WALL], 3);
        this.chest_buttons[INV.REIDITE_WALL].id = INV.REIDITE_WALL;
        this.inv_buttons[INV.REIDITE_WALL] = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE_WALL], 3);
        this.inv_buttons[INV.REIDITE_WALL].id = INV.REIDITE_WALL;
        this.craft_buttons[CRAFT.REIDITE_WALL] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_WALL], 3);
        this.craft_buttons[CRAFT.REIDITE_WALL].id = CRAFT.REIDITE_WALL;
        this.chest_buttons[INV.REIDITE_SPIKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_REIDITE_SPIKE], 3);
        this.chest_buttons[INV.REIDITE_SPIKE].id = INV.REIDITE_SPIKE;
        this.inv_buttons[INV.REIDITE_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE_SPIKE], 3);
        this.inv_buttons[INV.REIDITE_SPIKE].id = INV.REIDITE_SPIKE;
        this.craft_buttons[CRAFT.REIDITE_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_SPIKE], 3);
        this.craft_buttons[CRAFT.REIDITE_SPIKE].id = CRAFT.REIDITE_SPIKE;
        this.chest_buttons[INV.REIDITE_DOOR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_REIDITE_DOOR], 3);
        this.chest_buttons[INV.REIDITE_DOOR].id = INV.REIDITE_DOOR;
        this.inv_buttons[INV.REIDITE_DOOR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE_DOOR], 3);
        this.inv_buttons[INV.REIDITE_DOOR].id = INV.REIDITE_DOOR;
        this.craft_buttons[CRAFT.REIDITE_DOOR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_DOOR], 3);
        this.craft_buttons[CRAFT.REIDITE_DOOR].id = CRAFT.REIDITE_DOOR;
        this.chest_buttons[INV.EXTRACTOR_MACHINE_STONE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_STONE], 3);
        this.chest_buttons[INV.EXTRACTOR_MACHINE_STONE].id = INV.EXTRACTOR_MACHINE_STONE;
        this.inv_buttons[INV.EXTRACTOR_MACHINE_STONE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EXTRACTOR_MACHINE_STONE], 3);
        this.inv_buttons[INV.EXTRACTOR_MACHINE_STONE].id = INV.EXTRACTOR_MACHINE_STONE;
        this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_STONE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_STONE], 3);
        this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_STONE].id = CRAFT.EXTRACTOR_MACHINE_STONE;
        this.chest_buttons[INV.EXTRACTOR_MACHINE_GOLD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_GOLD], 3);
        this.chest_buttons[INV.EXTRACTOR_MACHINE_GOLD].id = INV.EXTRACTOR_MACHINE_GOLD;
        this.inv_buttons[INV.EXTRACTOR_MACHINE_GOLD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EXTRACTOR_MACHINE_GOLD], 3);
        this.inv_buttons[INV.EXTRACTOR_MACHINE_GOLD].id = INV.EXTRACTOR_MACHINE_GOLD;
        this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_GOLD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_GOLD], 3);
        this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_GOLD].id = CRAFT.EXTRACTOR_MACHINE_GOLD;
        this.chest_buttons[INV.EXTRACTOR_MACHINE_DIAMOND] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_DIAMOND], 3);
        this.chest_buttons[INV.EXTRACTOR_MACHINE_DIAMOND].id = INV.EXTRACTOR_MACHINE_DIAMOND;
        this.inv_buttons[INV.EXTRACTOR_MACHINE_DIAMOND] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EXTRACTOR_MACHINE_DIAMOND], 3);
        this.inv_buttons[INV.EXTRACTOR_MACHINE_DIAMOND].id = INV.EXTRACTOR_MACHINE_DIAMOND;
        this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_DIAMOND] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_DIAMOND], 3);
        this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_DIAMOND].id = CRAFT.EXTRACTOR_MACHINE_DIAMOND;
        this.chest_buttons[INV.EXTRACTOR_MACHINE_AMETHYST] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_AMETHYST], 3);
        this.chest_buttons[INV.EXTRACTOR_MACHINE_AMETHYST].id = INV.EXTRACTOR_MACHINE_AMETHYST;
        this.inv_buttons[INV.EXTRACTOR_MACHINE_AMETHYST] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EXTRACTOR_MACHINE_AMETHYST], 3);
        this.inv_buttons[INV.EXTRACTOR_MACHINE_AMETHYST].id = INV.EXTRACTOR_MACHINE_AMETHYST;
        this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_AMETHYST] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_AMETHYST], 3);
        this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_AMETHYST].id = CRAFT.EXTRACTOR_MACHINE_AMETHYST;
        this.chest_buttons[INV.EXTRACTOR_MACHINE_REIDITE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_REIDITE], 3);
        this.chest_buttons[INV.EXTRACTOR_MACHINE_REIDITE].id = INV.EXTRACTOR_MACHINE_REIDITE;
        this.inv_buttons[INV.EXTRACTOR_MACHINE_REIDITE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EXTRACTOR_MACHINE_REIDITE], 3);
        this.inv_buttons[INV.EXTRACTOR_MACHINE_REIDITE].id = INV.EXTRACTOR_MACHINE_REIDITE;
        this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_REIDITE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_REIDITE], 3);
        this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_REIDITE].id = CRAFT.EXTRACTOR_MACHINE_REIDITE;
        this.chest_buttons[INV.FLAME] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FLAME], 3);
        this.chest_buttons[INV.FLAME].id = INV.FLAME;
        this.inv_buttons[INV.FLAME] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FLAME], 3);
        this.inv_buttons[INV.FLAME].id = INV.FLAME;
        this.inv_buttons[INV.FLAME].info.img[2] = this.inv_buttons[INV.FLAME].info.img[0];
        this.chest_buttons[INV.LAVA_HEART] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_LAVA_HEART], 3);
        this.chest_buttons[INV.LAVA_HEART].id = INV.LAVA_HEART;
        this.inv_buttons[INV.LAVA_HEART] = gui_create_button(60, 60, "", sprite[SPRITE.INV_LAVA_HEART], 3);
        this.inv_buttons[INV.LAVA_HEART].id = INV.LAVA_HEART;
        this.inv_buttons[INV.LAVA_HEART].info.img[2] = this.inv_buttons[INV.LAVA_HEART].info.img[0];
        this.chest_buttons[INV.REIDITE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_REIDITE], 3);
        this.chest_buttons[INV.REIDITE].id = INV.REIDITE;
        this.inv_buttons[INV.REIDITE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE], 3);
        this.inv_buttons[INV.REIDITE].id = INV.REIDITE;
        this.inv_buttons[INV.REIDITE].info.img[2] = this.inv_buttons[INV.REIDITE].info.img[0];
        this.chest_buttons[INV.REIDITE_SWORD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_REIDITE_SWORD], 3);
        this.chest_buttons[INV.REIDITE_SWORD].id = INV.REIDITE_SWORD;
        this.inv_buttons[INV.REIDITE_SWORD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE_SWORD], 3);
        this.inv_buttons[INV.REIDITE_SWORD].id = INV.REIDITE_SWORD;
        this.craft_buttons[CRAFT.REIDITE_SWORD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_SWORD], 3);
        this.craft_buttons[CRAFT.REIDITE_SWORD].id = CRAFT.REIDITE_SWORD;
        this.chest_buttons[INV.DIAMOND_PROTECTION] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DIAMOND_PROTECTION], 3);
        this.chest_buttons[INV.DIAMOND_PROTECTION].id = INV.DIAMOND_PROTECTION;
        this.inv_buttons[INV.DIAMOND_PROTECTION] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DIAMOND_PROTECTION], 3);
        this.inv_buttons[INV.DIAMOND_PROTECTION].id = INV.DIAMOND_PROTECTION;
        this.craft_buttons[CRAFT.DIAMOND_PROTECTION] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DIAMOND_PROTECTION], 3);
        this.craft_buttons[CRAFT.DIAMOND_PROTECTION].id = CRAFT.DIAMOND_PROTECTION;
        this.chest_buttons[INV.AMETHYST_PROTECTION] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_AMETHYST_PROTECTION], 3);
        this.chest_buttons[INV.AMETHYST_PROTECTION].id = INV.AMETHYST_PROTECTION;
        this.inv_buttons[INV.AMETHYST_PROTECTION] = gui_create_button(60, 60, "", sprite[SPRITE.INV_AMETHYST_PROTECTION], 3);
        this.inv_buttons[INV.AMETHYST_PROTECTION].id = INV.AMETHYST_PROTECTION;
        this.craft_buttons[CRAFT.AMETHYST_PROTECTION] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_AMETHYST_PROTECTION], 3);
        this.craft_buttons[CRAFT.AMETHYST_PROTECTION].id = CRAFT.AMETHYST_PROTECTION;
        this.chest_buttons[INV.REIDITE_PROTECTION] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_REIDITE_PROTECTION], 3);
        this.chest_buttons[INV.REIDITE_PROTECTION].id = INV.REIDITE_PROTECTION;
        this.inv_buttons[INV.REIDITE_PROTECTION] = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE_PROTECTION], 3);
        this.inv_buttons[INV.REIDITE_PROTECTION].id = INV.REIDITE_PROTECTION;
        this.craft_buttons[CRAFT.REIDITE_PROTECTION] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_PROTECTION], 3);
        this.craft_buttons[CRAFT.REIDITE_PROTECTION].id = CRAFT.REIDITE_PROTECTION;
        this.chest_buttons[INV.LAVA_HELMET] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_LAVA_HELMET], 3);
        this.chest_buttons[INV.LAVA_HELMET].id = INV.LAVA_HELMET;
        this.inv_buttons[INV.LAVA_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.INV_LAVA_HELMET], 3);
        this.inv_buttons[INV.LAVA_HELMET].id = INV.LAVA_HELMET;
        this.craft_buttons[CRAFT.LAVA_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_LAVA_HELMET], 3);
        this.craft_buttons[CRAFT.LAVA_HELMET].id = CRAFT.LAVA_HELMET;
        this.chest_buttons[INV.WITCH] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WITCH], 3);
        this.chest_buttons[INV.WITCH].id = INV.WITCH;
        this.inv_buttons[INV.WITCH] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WITCH], 3);
        this.inv_buttons[INV.WITCH].id = INV.WITCH;
        this.craft_buttons[CRAFT.WITCH] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WITCH], 3);
        this.craft_buttons[CRAFT.WITCH].id = CRAFT.WITCH;
        this.chest_buttons[INV.WAND1] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WAND1], 3);
        this.chest_buttons[INV.WAND1].id = INV.WAND1;
        this.inv_buttons[INV.WAND1] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WAND1], 3);
        this.inv_buttons[INV.WAND1].id = INV.WAND1;
        this.craft_buttons[CRAFT.WAND1] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WAND1], 3);
        this.craft_buttons[CRAFT.WAND1].id = CRAFT.WAND1;
        this.chest_buttons[INV.WAND2] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WAND2], 3);
        this.chest_buttons[INV.WAND2].id = INV.WAND2;
        this.inv_buttons[INV.WAND2] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WAND2], 3);
        this.inv_buttons[INV.WAND2].id = INV.WAND2;
        this.craft_buttons[CRAFT.WAND2] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WAND2], 3);
        this.craft_buttons[CRAFT.WAND2].id = CRAFT.WAND2;
        this.chest_buttons[INV.NIMBUS] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_NIMBUS], 3);
        this.chest_buttons[INV.NIMBUS].id = INV.NIMBUS;
        this.inv_buttons[INV.NIMBUS] = gui_create_button(60, 60, "", sprite[SPRITE.INV_NIMBUS], 3);
        this.inv_buttons[INV.NIMBUS].id = INV.NIMBUS;
        this.craft_buttons[CRAFT.NIMBUS] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_NIMBUS], 3);
        this.craft_buttons[CRAFT.NIMBUS].id = CRAFT.NIMBUS;
        this.chest_buttons[INV.FIREFLY] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FIREFLY], 3);
        this.chest_buttons[INV.FIREFLY].id = INV.FIREFLY;
        this.inv_buttons[INV.FIREFLY] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FIREFLY], 3);
        this.inv_buttons[INV.FIREFLY].id = INV.FIREFLY;
        this.craft_buttons[CRAFT.FIREFLY] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_FIREFLY], 3);
        this.craft_buttons[CRAFT.FIREFLY].id = CRAFT.FIREFLY;
        this.chest_buttons[INV.REIDITE_SPEAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_REIDITE_SPEAR], 3);
        this.chest_buttons[INV.REIDITE_SPEAR].id = INV.REIDITE_SPEAR;
        this.inv_buttons[INV.REIDITE_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE_SPEAR], 3);
        this.inv_buttons[INV.REIDITE_SPEAR].id = INV.REIDITE_SPEAR;
        this.craft_buttons[CRAFT.REIDITE_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_SPEAR], 3);
        this.craft_buttons[CRAFT.REIDITE_SPEAR].id = CRAFT.REIDITE_SPEAR;
        this.chest_buttons[INV.REIDITE_HELMET] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_REIDITE_HELMET], 3);
        this.chest_buttons[INV.REIDITE_HELMET].id = INV.REIDITE_HELMET;
        this.inv_buttons[INV.REIDITE_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE_HELMET], 3);
        this.inv_buttons[INV.REIDITE_HELMET].id = INV.REIDITE_HELMET;
        this.craft_buttons[CRAFT.REIDITE_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_HELMET], 3);
        this.craft_buttons[CRAFT.REIDITE_HELMET].id = CRAFT.REIDITE_HELMET;
        this.chest_buttons[INV.LAVA_SPEAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_LAVA_SPEAR], 3);
        this.chest_buttons[INV.LAVA_SPEAR].id = INV.LAVA_SPEAR;
        this.inv_buttons[INV.LAVA_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_LAVA_SPEAR], 3);
        this.inv_buttons[INV.LAVA_SPEAR].id = INV.LAVA_SPEAR;
        this.craft_buttons[CRAFT.LAVA_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_LAVA_SPEAR], 3);
        this.craft_buttons[CRAFT.LAVA_SPEAR].id = CRAFT.LAVA_SPEAR;
        this.chest_buttons[INV.LAVA_SWORD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_LAVA_SWORD], 3);
        this.chest_buttons[INV.LAVA_SWORD].id = INV.LAVA_SWORD;
        this.inv_buttons[INV.LAVA_SWORD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_LAVA_SWORD], 3);
        this.inv_buttons[INV.LAVA_SWORD].id = INV.LAVA_SWORD;
        this.craft_buttons[CRAFT.LAVA_SWORD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_LAVA_SWORD], 3);
        this.craft_buttons[CRAFT.LAVA_SWORD].id = CRAFT.LAVA_SWORD;
        this.chest_buttons[INV.LAVA_ORB] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_LAVA_ORB], 3);
        this.chest_buttons[INV.LAVA_ORB].id = INV.LAVA_ORB;
        this.inv_buttons[INV.LAVA_ORB] = gui_create_button(60, 60, "", sprite[SPRITE.INV_LAVA_ORB], 3);
        this.inv_buttons[INV.LAVA_ORB].id = INV.LAVA_ORB;
        this.chest_buttons[INV.EGG0] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EGG0], 3);
        this.chest_buttons[INV.EGG0].id = INV.EGG0;
        this.inv_buttons[INV.EGG0] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EGG0], 3);
        this.inv_buttons[INV.EGG0].id = INV.EGG0;
        this.chest_buttons[INV.EGG1] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EGG1], 3);
        this.chest_buttons[INV.EGG1].id = INV.EGG1;
        this.inv_buttons[INV.EGG1] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EGG1], 3);
        this.inv_buttons[INV.EGG1].id = INV.EGG1;
        this.chest_buttons[INV.EGG2] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EGG2], 3);
        this.chest_buttons[INV.EGG2].id = INV.EGG2;
        this.inv_buttons[INV.EGG2] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EGG2], 3);
        this.inv_buttons[INV.EGG2].id = INV.EGG2;
        this.chest_buttons[INV.EGG3] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EGG3], 3);
        this.chest_buttons[INV.EGG3].id = INV.EGG3;
        this.inv_buttons[INV.EGG3] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EGG3], 3);
        this.inv_buttons[INV.EGG3].id = INV.EGG3;
        this.chest_buttons[INV.EGG4] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EGG4], 3);
        this.chest_buttons[INV.EGG4].id = INV.EGG4;
        this.inv_buttons[INV.EGG4] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EGG4], 3);
        this.inv_buttons[INV.EGG4].id = INV.EGG4;
        this.update_craft_buttons = function () {
            var craft = user.craft.can_craft;
            var x = 10;
            var y = 10;
            for (var i = 0; i < craft.length; i++) {
                if ((i > 0) && !(i % 4)) {
                    x += craft[0].info.width + 10;
                    y = 10;
                }
                craft[i].info.translate.x = x;
                craft[i].info.translate.y = y;
                y += 10 + craft[i].info.height;
            }
        };
        this.update_chest_buttons = function () {
            var x = Math.floor((Math.floor((3 + user.craft.can_craft.length) / 4) * (10 + this.chest_buttons[0].info.img[0].width)) + 35);
            for (var i = 0; i < this.chest_buttons.length; i++) {
                if (!this.chest_buttons[i])
                    continue;

                this.chest_buttons[i].info.translate.x = x;
                this.chest_buttons[i].info.translate.y = 22;
            }
            this.chest_lockpick.info.translate.x = x + 17;
            this.chest_lockpick.info.translate.y = 22 + sprite[SPRITE.CHEST_SLOT].height;
            this.chest_locked.info.translate.x = x + 17;
            this.chest_locked.info.translate.y = 30;
            this.chest_padlock.info.translate.x = x + 17;
            this.chest_padlock.info.translate.y = 22 + sprite[SPRITE.CHEST_SLOT].height;
        };
        this.update_team_buttons = function () {
            var x = Math.floor((canw - sprite[SPRITE.TEAM_BUTTON][0].width) / 2);
            for (var i = 0; i < this.team_buttons.length; i++) {
                this.team_buttons[i].button.info.translate.x = x;
                this.team_buttons[i].button.info.translate.y = -13;
            }
        };
        this.update_bread_oven_button = function () {
            var x = 12 + Math.floor((Math.floor((3 + user.craft.can_craft.length) / 4) * (10 + this.bread_oven_wood_button.info.img[0].width)) + 35);
            this.bread_oven_wood_button.info.translate.x = x;
            this.bread_oven_wood_button.info.translate.y = 33;
            this.bread_oven_flour_button.info.translate.x = this.bread_oven_wood_button.info.translate.x;
            this.bread_oven_flour_button.info.translate.y = 137;
            this.bread_oven_bread_button.info.translate.x = this.bread_oven_wood_button.info.translate.x;
            this.bread_oven_bread_button.info.translate.y = 240;
        };
        this.update_extractor_button = function () {
            var x = 12 + Math.floor((Math.floor((3 + user.craft.can_craft.length) / 4) * (10 + this.extractor_wood_button.info.img[0].width)) + 35);
            this.extractor_wood_button.info.translate.x = x;
            this.extractor_wood_button.info.translate.y = 36;
            x += 83;
            this.extractor_stone_button.info.translate.x = x;
            this.extractor_stone_button.info.translate.y = 36;
            this.extractor_gold_button.info.translate.x = x;
            this.extractor_gold_button.info.translate.y = 36;
            this.extractor_diamond_button.info.translate.x = x;
            this.extractor_diamond_button.info.translate.y = 36;
            this.extractor_amethyst_button.info.translate.x = x;
            this.extractor_amethyst_button.info.translate.y = 36;
            this.extractor_reidite_button.info.translate.x = x;
            this.extractor_reidite_button.info.translate.y = 36;
        };
        this.update_windmill_button = function () {
            var x = 12 + Math.floor((Math.floor((3 + user.craft.can_craft.length) / 4) * (10 + this.windmill_wheat_button.info.img[0].width)) + 35);
            this.windmill_wheat_button.info.translate.x = x;
            this.windmill_wheat_button.info.translate.y = 36;
            x += 83;
            this.windmill_flour_button.info.translate.x = x;
            this.windmill_flour_button.info.translate.y = 36;
        };
        this.update_furnace_button = function () {
            var x = Math.floor((Math.floor((3 + user.craft.can_craft.length) / 4) * (10 + this.furnace_button.info.img[0].width)) + 35);
            this.furnace_button.info.translate.x = x;
            this.furnace_button.info.translate.y = 22;
        };
        this.update_inv_buttons = function () {
            var inv = user.inv.can_select;
            if (inv.length > 0)
                var center = Math.floor((canw - ((inv[0].info.width + 5) * user.inv.max)) / 2);

            for (var i = 0; i < inv.length; i++) {
                inv[i].info.translate.x = center + ((inv[i].info.width + 5) * i);
                inv[i].info.translate.y = (canh - inv[i].info.width) - 10;
                this.plus_buttons[inv[i].id].info.translate.x = inv[i].info.translate.x + 13;
                this.plus_buttons[inv[i].id].info.translate.y = (inv[i].info.translate.y - this.plus_buttons[inv[i].id].info.img[0].height) - 6;
            }
        };
        var appear_effect_step = 0;
        var appear_effect_max_step = 30;
        var appear_effect = function () {
            _this.update();
            appear_effect_step++;
            if (appear_effect_step == appear_effect_max_step) {
                _this.add_event_listener();
                _this.update();
                return;
            }
            window.setTimeout(appear_effect, 33);
        };
        this.quit = function (fun) {
            if (user.chat.open)
                user.chat.quit();

            if (user.terminal.open)
                user.terminal.quit();

            document.getElementById("team_box").style.display = "none";
            _this.market.style.display = "none";
            _this.market.open = false;
            _this.sign.style.display = "none";
            _this.sign.open = false;
            document.getElementById("shop_starterkit").style.display = "none";
            document.getElementById("home_craft").style.display = "none";
            document.getElementById("recipe_craft").style.display = "none";
            _this.craft_list.open = false;
            document.getElementById("option_in_game").style.display = "none";
            _this.options.open = false;
            document.getElementById("sure_delete").style.display = "none";
            _this.safe_delete.open = false;
            document.getElementById("cancel_sure_delete").style.display = "none";
            _this.safe_cancel.open = false;
            document.getElementById("chronoquest").style.display = "none";
            _this.quests.open = false;
            fun_after_quit = fun;
            _this.remove_event_listener();
            _this.can.style.cursor = _this.cursor0;
            audio.quit();
            quit_effect_step = -1;
            quit_effect();
            refreshAds();
        };
        var fun_after_quit;
        var quit_effect_step = -1;
        var quit_effect_max_step = 30;
        var quit_effect = function () {
            _this.update();
            quit_effect_step++;
            if (quit_effect_step == quit_effect_max_step) {
                _this.stop();
                fun_after_quit();
                return;
            }
            window.setTimeout(quit_effect, 33);
        };
        this.is_run = false;
        this.stop = function () {
            this.is_run = false;
        };
        this.run = function () {
            client.change_ground();
            _this.is_run = true;
            quit_effect_step = -1;
            appear_effect_step = 0;
            appear_effect();
        };
        this.update = function () {
            this.leaderboard.translate.x = (canw - this.leaderboard.img.width) - 10;
            this.leaderboard.translate.y = 5;
            world.clock.translate.x = (this.leaderboard.translate.x - sprite[SPRITE.CLOCK][0].width) - 85;
            world.clock.translate.y = 10;
            this.craft_list.button.info.translate.x = (this.leaderboard.translate.x - sprite[SPRITE.RECIPE_BUTTON][0].width) - 10;
            this.craft_list.button.info.translate.y = 10;
            this.quests.button.info.translate.x = (this.leaderboard.translate.x - sprite[SPRITE.QUEST_BUTTON][0].width) - 20;
            this.quests.button.info.translate.y = (this.craft_list.button.info.translate.y + sprite[SPRITE.RECIPE_BUTTON][0].height) + 5;
            this.options.button.info.translate.x = (this.leaderboard.translate.x - sprite[SPRITE.OPTION_BUTTON][0].width) - 20;
            this.options.button.info.translate.y = (this.quests.button.info.translate.y + sprite[SPRITE.OPTION_BUTTON][0].height) + 18;
            this.audio.button_on.info.translate.x = (this.leaderboard.translate.x - sprite[SPRITE.OPTION_BUTTON][0].width) - 20;
            this.audio.button_on.info.translate.y = this.options.button.info.translate.y + sprite[SPRITE.SOUND_BUTTON_OFF][0].height;
            this.audio.button_off.info.translate.x = (this.leaderboard.translate.x - sprite[SPRITE.OPTION_BUTTON][0].width) - 20;
            this.audio.button_off.info.translate.y = this.options.button.info.translate.y + sprite[SPRITE.SOUND_BUTTON_OFF][0].height;
            this.market.button.info.translate.x = (this.leaderboard.translate.x - sprite[SPRITE.MARKET_BUTTON][0].width) - 20;
            this.market.button.info.translate.y = this.audio.button_on.info.translate.y + sprite[SPRITE.MARKET_BUTTON][0].height;
            user.auto_feed.translate.x = (this.leaderboard.translate.x - 63) - 85;
            user.auto_feed.translate.y = 100;
            user.show_spectators.translate.x = (this.leaderboard.translate.x - sprite[SPRITE.SHOW_SPECTATORS].width) - 85;
            user.show_spectators.translate.y = (user.auto_feed.translate.y + 10) + sprite[SPRITE.AUTO_FEED].height;
            this.minimap.translate.y = (canh - 3) - 193;
            this.minimap.translate.x = (canw - 3) - 193;
            this.gauges.translate.x = 5;
            this.gauges.translate.y = (canh - this.gauges.img.height) - 5;
            this.shop.button.info.translate.x = canw2 - (91 / 2);
            this.shop.button.info.translate.y = 50;
            this.update_craft_buttons();
            this.update_inv_buttons();
            this.update_chest_buttons();
            this.update_furnace_button();
            this.update_windmill_button();
            this.update_extractor_button();
            this.update_bread_oven_button();
            this.update_team_buttons();
            this.sign.update_button();
            draw_team_buttons();
            user.chat.update();
            user.terminal.update();
            this.team_box.update();
            this.craft_list.home.update();
            this.craft_list.list.update();
            this.safe_delete.update();
            this.safe_cancel.update();
            this.quests.update();
            this.shop.update();
            this.options.update();
            this.market.update();
            this.sign.update();
            var move_effect = 0;
            if (appear_effect_step != appear_effect_max_step) {
                var move_effect = (1500 / (appear_effect_step + 1)) - 50;
            }
            if (quit_effect_step != -1) {
                var move_effect = -((1500 / ((quit_effect_max_step - quit_effect_step) + 1)) - 48);
            }
            this.shop.button.info.translate.y -= (move_effect > 0) ? move_effect : -move_effect;
            this.leaderboard.translate.y -= (move_effect > 0) ? move_effect : -move_effect;
            user.auto_feed.translate.y -= (move_effect > 0) ? move_effect : -move_effect;
            user.show_spectators.translate.y -= (move_effect > 0) ? move_effect : -move_effect;
            this.craft_list.button.info.translate.y -= (move_effect > 0) ? move_effect : -move_effect;
            this.quests.button.info.translate.y -= (move_effect > 0) ? move_effect : -move_effect;
            this.options.button.info.translate.y -= (move_effect > 0) ? move_effect : -move_effect;
            this.market.button.info.translate.y -= (move_effect > 0) ? move_effect : -move_effect;
            this.audio.button_on.info.translate.y -= (move_effect > 0) ? move_effect : -move_effect;
            this.audio.button_off.info.translate.y -= (move_effect > 0) ? move_effect : -move_effect;
            world.clock.translate.y -= (move_effect > 0) ? move_effect : -move_effect;
            this.gauges.translate.y -= (move_effect < 0) ? move_effect : -move_effect;
            this.minimap.translate.y -= (move_effect < 0) ? move_effect : -move_effect;
        };
        this.draw_UI = function () {
            if ((!user.ghost.enabled && this.show_ui) && !user.zombie)
                draw_ui_crafting();

            draw_ui_gear();
            draw_ui_chat();
            if (this.show_ui) {
                draw_minimap();
                if (this.show_recipe_book === 1)
                    this.craft_list.button.draw(ctx);

                if ((((world.mode !== WORLD.MODE_ZOMBIES) && (world.mode !== WORLD.MODE_LEGACY)) && (world.mode !== WORLD.MODE_BR)) && (this.show_quest === 1))
                    this.quests.button.draw(ctx);

                this.options.button.draw(ctx);
                if (this.show_market === 1)
                    this.market.button.draw(ctx);

                if (audio.run)
                    this.audio.button_on.draw(ctx);
                else
                    this.audio.button_off.draw(ctx);
                draw_leaderboard();
                draw_status();
                this.gauges.draw();
                draw_weapon_switch_delay();
                draw_helmet_switch_delay();
                draw_build_delay();
                draw_totem_delay();
                draw_ui_inventory();
                draw_chest_inventory();
                draw_furnace_inventory();
                draw_well_inventory();
                draw_windmill_inventory();
                draw_extractor_inventory();
                draw_bread_oven_inventory();
                draw_sign_button();
                draw_team_buttons();
                draw_info_box();
            }
            if (user.ghost.enabled)
                draw_resurrection_inventory();

            draw_bigmap();
            if (this.show_ui && (this.show_clock === 1))
                draw_clock();

            user.welcome.draw();
            user.alert.draw("#FFF", "#000");
            if (this.show_ui) {
                user.ghost.draw();
                user.shop.draw();
                user.inv.drag.draw(mouse.pos.x, mouse.pos.y);
            }
            draw_reconnect();
        };
        this.update_scene = function () {
            user.cam.update();
            user.gauges.update();
            if (!user.reconnect.enabled && user.alive) {
                user.control.update();
                user.auto_feed.update();
            }
            world.update();
            this.quests.update_chrono();
        };
        this.draw_scene = function () {
            draw_world_with_effect();
        };
        this.update_connection = function () {
            try {
                client.check_state();
                client.check_pong();
                client.try_ping();
                client.update_cam();
            }catch(e) {
                console.log(`[Famishs/Connection] Connection is lost , restoring session`)
                client.lost()
            }
        };
        this.draw = function () {
            if (!user.reconnect.enabled && user.alive)
                this.update_connection();

            audio.scheduler();
            this.update_scene();
            
            this.draw_scene();
            this.draw_UI();
        };
        this.trigger_keyup = function (evt) {
            evt.code === HackSettings.AutoSpike.key && !user.chat.open && !user.terminal.open && (HackSettings.AutoSpike.enabled = false)

            if (user.chat.open && (evt.keyCode === 27))
                user.chat.quit();
            else if (user.terminal.open && (evt.keyCode === 27))
                user.terminal.quit();
            else if (((!user.chat.open && !user.terminal.open) && (evt.keyCode == 79)) && (quit_effect_step == -1))
                user.terminal._open();
            else if ((evt.keyCode == 13) && (quit_effect_step == -1)) {
                if (user.terminal.open)
                    user.terminal._send();
                else
                    user.chat.run();
            } else if (!user.chat.open && !user.terminal.open) {
                if (evt.keyCode === 82)
                    user.auto_feed.invert();
                else if (((evt.keyCode === 80) && (world.mode === WORLD.MODE_HUNGER_GAMES)) && !user.spectator)
                    user.show_spectators.invert();
                else if ((evt.keyCode >= 49) && (evt.keyCode <= 57)) {
                    if (user.craft.id < 0) {
                        var i = evt.keyCode - 49;
                        var button = user.inv.can_select[i];
                        if (button)
                            client.select_inv(button.id, i);

                    }
                } else if (evt.keyCode == 89)
                    user.bigmap = !user.bigmap;
                else if (evt.keyCode == 71)
                    user.craft.change_mode();

            }
            keyboard.up(evt);
        };
        this.trigger_keydown = function (evt) {

            let myPlayer = world.fast_units[user.uid];

            evt.code === HackSettings.AutoSpike.key && !user.chat.open && !user.terminal.open && (HackSettings.AutoSpike.enabled = true)
            evt.code === HackSettings.AutoSpike.changeModeKey && !user.chat.open && !user.terminal.open && (HackSettings.AutoSpike.mode = !HackSettings.AutoSpike.mode)



            if (client.socket && client.socket.readyState === 1 && evt.code === HackSettings.DropSword.key && !user.chat.open && !user.terminal.open) {
                if (myPlayer) {
    
                    if(FnUtils.isPlayerHoldingWeapon(myPlayer, false) == 1 || FnUtils.isPlayerHoldingWeapon(myPlayer, false) == 2) {
                        client.socket.send(JSON.stringify([6, myPlayer.right]))
                    }
    
                }
            }


            keyboard.down(evt);
            if (((evt.keyCode == 8) && !user.chat.open) && !user.terminal.open)
                evt.preventDefault();

        };
        this.trigger_mousedown = function (evt) {
            mouse.pos = get_mouse_pos(_this.can, evt);
            var click = false;
            if (user.craft.preview < 0)
                _this.minimap.focus(mouse.pos);

            var chest = user.chest;
            if ((user.craft.id < 0) && (chest.id >= 0)) {
                if (!user.chest.lock || (user.chest.pid === user.id))
                    click |= _this.chest_buttons[user.chest.id].trigger(_this.can, mouse.pos, MOUSE_DOWN);

            }
            var windmill = user.windmill;
            if (windmill.open && (windmill.amount_flour > 0)) {
                click |= _this.windmill_flour_button.trigger(_this.can, mouse.pos, MOUSE_DOWN);
            }
            var extractor = user.extractor;
            if (extractor.open && (extractor.amount_mineral > 0)) {
                click |= _this.extractor_stone_button.trigger(_this.can, mouse.pos, MOUSE_DOWN);
                click |= _this.extractor_gold_button.trigger(_this.can, mouse.pos, MOUSE_DOWN);
                click |= _this.extractor_diamond_button.trigger(_this.can, mouse.pos, MOUSE_DOWN);
                click |= _this.extractor_amethyst_button.trigger(_this.can, mouse.pos, MOUSE_DOWN);
                click |= _this.extractor_reidite_button.trigger(_this.can, mouse.pos, MOUSE_DOWN);
            }
            var bread_oven = user.bread_oven;
            if (bread_oven.open && (bread_oven.amount_bread > 0)) {
                click |= _this.bread_oven_bread_button.trigger(_this.can, mouse.pos, MOUSE_DOWN);
            }
            if (user.sign.open)
                click |= _this.sign.button.trigger(_this.can, mouse.pos, MOUSE_DOWN);

            if (!user.chest.lock) {
                if (user.chest.padlock)
                    click |= _this.chest_padlock.trigger(_this.can, mouse.pos, MOUSE_DOWN);

            }
            if (user.chest.lockpick)
                click |= _this.chest_lockpick.trigger(_this.can, mouse.pos, MOUSE_DOWN);

            if (((((((user.craft.id < 0) && !_this.craft_list.open) && !_this.safe_delete.open) && !_this.safe_cancel.open) && !_this.quests.open) && !_this.options.open) && !_this.market.open) {
                var buttons = user.inv.can_select;
                for (var i = 0; i < buttons.length; i++) {
                    var ret = buttons[i].trigger(_this.can, mouse.pos, MOUSE_DOWN);
                    click |= ret;
                    if (ret)
                        user.inv.drag.start(i, mouse.pos);

                    if ((((((chest.open && ((chest.id < 0) || (chest.id == buttons[i].id))) || (user.furnace.open && (buttons[i].id === INV.WOOD))) || (user.well.open && (buttons[i].id === INV.BUCKET_FULL))) || (user.bread_oven.open && ((buttons[i].id === INV.WOOD) || (buttons[i].id === INV.FLOUR)))) || (user.windmill.open && (buttons[i].id === INV.WILD_WHEAT))) || (user.extractor.open && (buttons[i].id === INV.WOOD))) {
                        click |= _this.plus_buttons[buttons[i].id].trigger(_this.can, mouse.pos, MOUSE_DOWN);
                    }
                }
            }
            if (user.resurrection.open)
                click |= _this.resurrection.trigger(_this.can, mouse.pos, MOUSE_DOWN);

            if (_this.team_buttons_id != -1) {
                click |= _this.team_buttons[_this.team_buttons_id].button.trigger(_this.can, mouse.pos, MOUSE_DOWN);
                if (click)
                    var team_button = true;

            } else
                var team_button = false;
            if (((((((((user.craft.id < 0) && (user.craft.preview < 0)) && !team_button) && !_this.craft_list.open) && !_this.safe_delete.open) && !_this.options.open) && !_this.safe_cancel.open) && !_this.market.open) && !user.zombie) {
                var buttons = user.craft.can_craft;
                for (var i = 0; i < buttons.length; i++) {
                    click |= buttons[i].trigger(_this.can, mouse.pos, MOUSE_DOWN);
                }
            }
            if (((((((((user.craft.id < 0) && (user.craft.preview < 0)) && user.shop.open) && !_this.craft_list.open) && !_this.safe_delete.open) && !_this.options.open) && !_this.safe_cancel.open) && !_this.quests.open) && !_this.market.open)
                click |= _this.shop.button.trigger(_this.can, mouse.pos, MOUSE_DOWN);

            if ((((((user.craft.preview < 0) && !_this.safe_delete.open) && !_this.options.open) && !_this.safe_cancel.open) && !_this.quests.open) && !_this.market.open)
                click |= _this.craft_list.button.trigger(_this.can, mouse.pos, MOUSE_DOWN);

            if ((((((user.craft.preview < 0) && !_this.craft_list.open) && !_this.safe_delete.open) && !_this.safe_cancel.open) && !_this.quests.open) && !_this.market.open)
                click |= _this.options.button.trigger(_this.can, mouse.pos, MOUSE_DOWN);

            if ((((((user.craft.preview < 0) && !_this.craft_list.open) && !_this.safe_delete.open) && !_this.safe_cancel.open) && !_this.quests.open) && !_this.options.open)
                click |= _this.market.button.trigger(_this.can, mouse.pos, MOUSE_DOWN);

            if (((((((user.craft.preview < 0) && !_this.craft_list.open) && !_this.safe_delete.open) && !_this.safe_cancel.open) && !_this.quests.open) && !_this.options.open) && !_this.market.open) {
                if (audio.run)
                    click |= _this.audio.button_on.trigger(_this.can, mouse.pos, MOUSE_DOWN);
                else
                    click |= _this.audio.button_off.trigger(_this.can, mouse.pos, MOUSE_DOWN);
            }
            if (((((((((user.craft.preview < 0) && !_this.craft_list.open) && !_this.market.open) && !_this.safe_delete.open) && !_this.options.open) && !_this.safe_cancel.open) && (world.mode !== WORLD.MODE_ZOMBIES)) && (world.mode !== WORLD.MODE_LEGACY)) && (world.mode !== WORLD.MODE_BR))
                click |= _this.quests.button.trigger(_this.can, mouse.pos, MOUSE_DOWN);

            if (((((((!click && !_this.craft_list.open) && !_this.safe_delete.open) && !_this.options.open) && !_this.safe_cancel.open) && !_this.quests.open) && !_this.market.open) && !_this.sign.open) {
                if (user.craft.preview >= 0)
                    client.send_build();
                else if (!team_button)
                    mouse.down();

            }
        };
        this.trigger_mouseup = function (evt) {
            mouse.pos = get_mouse_pos(_this.can, evt);
            mouse.up();
            if (user.inv.drag.release())
                return;

            var chest = user.chest;
            var furnace = user.furnace;
            var well = user.well;
            var windmill = user.windmill;
            var extractor = user.extractor;
            var bread_oven = user.bread_oven;
            if (user.control.attack) {
                user.control.attack = 0;
                client.stop_attack();
            }
            if (_this.team_buttons_id != -1) {
                var sel = _this.team_buttons[_this.team_buttons_id].button.trigger(_this.can, mouse.pos, MOUSE_UP);
                var style = document.getElementById("team_box").style;
                if (sel && (style.display == "inline-block")) {
                    style.display = "none";
                    return;
                } else if (sel)
                    _this.team_buttons[_this.team_buttons_id].action();

            }
            if (((user.craft.id < 0) && (chest.id >= 0)) && !_this.safe_delete.open) {
                if (!user.chest.lock || (user.chest.pid === user.id)) {
                    var sel = _this.chest_buttons[user.chest.id].trigger(_this.can, mouse.pos, MOUSE_UP);
                    if (sel)
                        client.take_chest(chest);

                }
            }
            var windmill = user.windmill;
            if ((windmill.open && (windmill.amount_flour > 0)) && !_this.safe_delete.open) {
                var sel = _this.windmill_flour_button.trigger(_this.can, mouse.pos, MOUSE_UP);
                if (sel)
                    client.take_flour(windmill);

            }
            var extractor = user.extractor;
            if ((extractor.open && (extractor.amount_mineral > 0)) && !_this.safe_delete.open) {
                switch (extractor.type) {
                    case ITEMS.EXTRACTOR_MACHINE_STONE:
                        var sel = _this.extractor_stone_button.trigger(_this.can, mouse.pos, MOUSE_UP);
                        if (sel)
                            client.take_extractor(extractor);

                        break;
                    case ITEMS.EXTRACTOR_MACHINE_GOLD:
                        var sel = _this.extractor_gold_button.trigger(_this.can, mouse.pos, MOUSE_UP);
                        if (sel)
                            client.take_extractor(extractor);

                        break;
                    case ITEMS.EXTRACTOR_MACHINE_DIAMOND:
                        var sel = _this.extractor_diamond_button.trigger(_this.can, mouse.pos, MOUSE_UP);
                        if (sel)
                            client.take_extractor(extractor);

                        break;
                    case ITEMS.EXTRACTOR_MACHINE_AMETHYST:
                        var sel = _this.extractor_amethyst_button.trigger(_this.can, mouse.pos, MOUSE_UP);
                        if (sel)
                            client.take_extractor(extractor);

                        break;
                    case ITEMS.EXTRACTOR_MACHINE_REIDITE:
                        var sel = _this.extractor_reidite_button.trigger(_this.can, mouse.pos, MOUSE_UP);
                        if (sel)
                            client.take_extractor(extractor);

                        break;
                }
            }
            var bread_oven = user.bread_oven;
            if ((bread_oven.open && (bread_oven.amount_bread > 0)) && !_this.safe_delete.open) {
                var sel = _this.bread_oven_bread_button.trigger(_this.can, mouse.pos, MOUSE_UP);
                if (sel)
                    client.take_bread(bread_oven);

            }
            if (user.sign.open && !_this.safe_delete.open) {
                var sel = _this.sign.button.trigger(_this.can, mouse.pos, MOUSE_UP);
                if (sel)
                    _this.sign.select();

            }
            if (!user.chest.lock && !_this.safe_delete.open) {
                if (user.chest.padlock) {
                    sel = _this.chest_padlock.trigger(_this.can, mouse.pos, MOUSE_UP);
                    if (sel)
                        client.lock_chest(chest);

                }
            }
            if (user.chest.lockpick && !_this.safe_delete.open) {
                sel = _this.chest_lockpick.trigger(_this.can, mouse.pos, MOUSE_UP);
                if (sel) {
                    client.unlock_chest(chest);

                }
            }
            if (user.resurrection.open) {
                var sel = _this.resurrection.trigger(_this.can, mouse.pos, MOUSE_UP);
                if (sel) {
                    client.resurrection();

                }
            }
            if (((user.craft.id < 0) && !user.ghost.enabled) && !_this.safe_delete.open) {
                var buttons = user.inv.can_select;
                for (var i = 0; i < buttons.length; i++) {
                    var sel = buttons[i].trigger(_this.can, mouse.pos, MOUSE_UP);
                    if (!sel) {
                        if (chest.open && ((chest.id < 0) || (chest.id === buttons[i].id))) {
                            var sel = _this.plus_buttons[buttons[i].id].trigger(_this.can, mouse.pos, MOUSE_UP);
                            if (sel && (user.craft.preview < 0))
                                client.give_item(chest, buttons[i].id, evt.shiftKey ? 10 : 1);

                        } else if (well.open && (buttons[i].id === INV.BUCKET_FULL)) {
                            var sel = _this.plus_buttons[buttons[i].id].trigger(_this.can, mouse.pos, MOUSE_UP);
                            if (sel && (user.craft.preview < 0))
                                client.give_well(well);

                        } else if (furnace.open && (buttons[i].id === INV.WOOD)) {
                            var sel = _this.plus_buttons[buttons[i].id].trigger(_this.can, mouse.pos, MOUSE_UP);
                            if (sel && (user.craft.preview < 0))
                                client.give_wood(furnace, evt.shiftKey ? 10 : 1);

                        } else if (windmill.open && (buttons[i].id === INV.WILD_WHEAT)) {
                            var sel = _this.plus_buttons[buttons[i].id].trigger(_this.can, mouse.pos, MOUSE_UP);
                            if (sel && (user.craft.preview < 0))
                                client.give_wheat(windmill, evt.shiftKey ? 10 : 1);

                        } else if (extractor.open && (buttons[i].id === INV.WOOD)) {
                            var sel = _this.plus_buttons[buttons[i].id].trigger(_this.can, mouse.pos, MOUSE_UP);
                            if (sel && (user.craft.preview < 0))
                                client.give_wood_extractor(extractor, evt.shiftKey ? 10 : 1);

                        } else if (bread_oven.open && ((buttons[i].id === INV.WOOD) || (buttons[i].id === INV.FLOUR))) {
                            var sel = _this.plus_buttons[buttons[i].id].trigger(_this.can, mouse.pos, MOUSE_UP);
                            if (sel && (user.craft.preview < 0)) {
                                if (buttons[i].id === INV.WOOD)
                                    client.give_bread_oven(bread_oven, evt.shiftKey ? 10 : 1, 0);
                                else
                                    client.give_bread_oven(bread_oven, 0, evt.shiftKey ? 10 : 1);
                            }
                        }
                        continue;
                    } else {
                        if ((evt.which == 1) && !evt.shiftKey)
                            client.select_inv(buttons[i].id, i);
                        else if ((((evt.which == 1) && evt.shiftKey) || (evt.which == 3)) && (user.craft.preview < 0))
                            _this.safe_delete.del(buttons[i].id);

                    }
                }
            }
            if (((((user.craft.id < 0) && (user.craft.preview < 0)) && !user.ghost.enabled) && !_this.safe_delete.open) && !user.zombie) {
                var buttons = user.craft.can_craft;
                for (var i = 0; i < buttons.length; i++) {
                    var sel = buttons[i].trigger(_this.can, mouse.pos, MOUSE_UP);
                    if (!sel)
                        continue;

                    ret = client.select_craft(buttons[i].id);
                }
            }
            if (((((((((user.craft.id < 0) && (user.craft.preview < 0)) && user.shop.open) && !_this.market.open) && !_this.craft_list.open) && !_this.safe_delete.open) && !_this.options.open) && !_this.safe_cancel.open) && !_this.quests.open) {
                var sel = _this.shop.button.trigger(_this.can, mouse.pos, MOUSE_MOVE);
                if (sel)
                    game.shop.select();

            }
            if (((((((user.craft.preview < 0) && !_this.craft_list.open) && !_this.safe_delete.open) && !_this.market.open) && !_this.safe_cancel.open) && !_this.quests.open) && !_this.options.open) {
                if (audio.run) {
                    var sel = _this.audio.button_on.trigger(_this.can, mouse.pos, MOUSE_UP);
                    if (sel) {
                        audio.select();

                    }
                } else {
                    var sel = _this.audio.button_off.trigger(_this.can, mouse.pos, MOUSE_UP);
                    if (sel) {
                        audio.select();

                    }
                }
            }
            if ((((((user.craft.preview < 0) && !_this.craft_list.open) && !_this.safe_delete.open) && !_this.safe_cancel.open) && !_this.quests.open) && !_this.market.open) {
                var sel = _this.options.button.trigger(_this.can, mouse.pos, MOUSE_UP);
                if (sel) {
                    _this.options.select_options();

                }
            }
            if (((((((user.craft.preview < 0) && !_this.craft_list.open) && !_this.safe_delete.open) && !_this.safe_cancel.open) && !_this.quests.open) && !_this.options.open) && (_this.show_market === 1)) {
                var sel = _this.market.button.trigger(_this.can, mouse.pos, MOUSE_UP);
                if (sel) {
                    _this.market.select();

                }
            }
            if (((((((user.craft.preview < 0) && !_this.safe_delete.open) && !_this.market.open) && !_this.options.open) && !_this.safe_cancel.open) && !_this.quests.open) && (_this.show_recipe_book === 1)) {
                var sel = _this.craft_list.button.trigger(_this.can, mouse.pos, MOUSE_UP);
                if (sel) {
                    _this.craft_list.select_book();
                }
            }
            if ((((((((((user.craft.preview < 0) && !_this.craft_list.open) && !_this.safe_delete.open) && !_this.options.open) && !_this.safe_cancel.open) && !_this.market.open) && (world.mode !== WORLD.MODE_ZOMBIES)) && (world.mode !== WORLD.MODE_LEGACY)) && (world.mode !== WORLD.MODE_BR)) && (_this.show_quest === 1)) {
                var sel = _this.quests.button.trigger(_this.can, mouse.pos, MOUSE_UP);
                if (sel) {
                    _this.quests.select();

                }
            }
            if (user.craft.crafting && (evt.which == 3))
                _this.safe_cancel.del();

        };
        this.current_cursor = false;
        this.trigger_mousemove = function (evt) {
            mouse.pos = get_mouse_pos(_this.can, evt);
            var cursor = false;
            game.info_box.display = 0;
            user.inv.drag.move(mouse.pos);
            if (_this.team_buttons_id != -1)
                cursor |= _this.team_buttons[_this.team_buttons_id].button.trigger(_this.can, mouse.pos, MOUSE_MOVE);

            var windmill = user.windmill;
            if (windmill.open && (windmill.amount_flour > 0))
                cursor |= _this.windmill_flour_button.trigger(_this.can, mouse.pos, MOUSE_MOVE);

            var extractor = user.extractor;
            if (extractor.open && (extractor.amount_mineral > 0)) {
                cursor |= _this.extractor_stone_button.trigger(_this.can, mouse.pos, MOUSE_MOVE);
                cursor |= _this.extractor_gold_button.trigger(_this.can, mouse.pos, MOUSE_MOVE);
                cursor |= _this.extractor_diamond_button.trigger(_this.can, mouse.pos, MOUSE_MOVE);
                cursor |= _this.extractor_amethyst_button.trigger(_this.can, mouse.pos, MOUSE_MOVE);
                cursor |= _this.extractor_reidite_button.trigger(_this.can, mouse.pos, MOUSE_MOVE);
            }
            var bread_oven = user.bread_oven;
            if (bread_oven.open && (bread_oven.amount_bread > 0))
                cursor |= _this.bread_oven_bread_button.trigger(_this.can, mouse.pos, MOUSE_MOVE);

            if (user.sign.open)
                cursor |= _this.sign.button.trigger(_this.can, mouse.pos, MOUSE_MOVE);

            var chest = user.chest;
            if (((user.craft.id < 0) && (chest.id >= 0)) && !user.ghost.enabled) {
                if (!user.chest.lock || (user.chest.pid === user.id))
                    cursor |= _this.chest_buttons[chest.id].trigger(_this.can, mouse.pos, MOUSE_MOVE);

            }
            if (user.resurrection.open)
                cursor |= _this.resurrection.trigger(_this.can, mouse.pos, MOUSE_MOVE);

            if (!user.chest.lock && !user.ghost.enabled) {
                if (user.chest.padlock)
                    cursor |= _this.chest_padlock.trigger(_this.can, mouse.pos, MOUSE_MOVE);

            }
            if (user.chest.lockpick && !user.ghost.enabled)
                cursor |= _this.chest_lockpick.trigger(_this.can, mouse.pos, MOUSE_MOVE);

            if ((user.craft.id < 0) && !user.ghost.enabled) {
                var buttons = user.inv.can_select;
                for (var i = 0; i < buttons.length; i++) {
                    var _on = buttons[i].trigger(_this.can, mouse.pos, MOUSE_MOVE);
                    cursor |= game.info_box.trigger(_on, buttons[i], 0);
                    if ((((((chest.open && ((chest.id < 0) || (chest.id == buttons[i].id))) || (user.furnace.open && (buttons[i].id == INV.WOOD))) || (user.well.open && (buttons[i].id === INV.BUCKET_FULL))) || (user.bread_oven.open && ((buttons[i].id == INV.WOOD) || (buttons[i].id == INV.FLOUR)))) || (user.windmill.open && (buttons[i].id == INV.WILD_WHEAT))) || (user.extractor.open && (buttons[i].id == INV.WOOD))) {
                        cursor |= _this.plus_buttons[buttons[i].id].trigger(_this.can, mouse.pos, MOUSE_MOVE);
                    }
                }
            }
            if ((((user.craft.id < 0) && (user.craft.preview < 0)) && !user.ghost.enabled) && !user.zombie) {
                var buttons = user.craft.can_craft;
                for (var i = 0; i < buttons.length; i++) {
                    var _on = false;
                    _on = buttons[i].trigger(_this.can, mouse.pos, MOUSE_MOVE);
                    cursor |= game.info_box.trigger(_on, buttons[i], 1);
                }
            }
            if (((((((((user.craft.id < 0) && (user.craft.preview < 0)) && user.shop.open) && !_this.craft_list.open) && !_this.safe_delete.open) && !_this.options.open) && !_this.safe_cancel.open) && !_this.quests.open) && !_this.market.open)
                cursor |= _this.shop.button.trigger(_this.can, mouse.pos, MOUSE_MOVE);

            if (((((((user.craft.preview < 0) && !_this.safe_delete.open) && !_this.options.open) && !_this.safe_cancel.open) && !_this.quests.open) && !_this.market.open) && (_this.show_recipe_book === 1))
                cursor |= _this.craft_list.button.trigger(_this.can, mouse.pos, MOUSE_MOVE);

            if ((((((user.craft.preview < 0) && !_this.craft_list.open) && !_this.safe_delete.open) && !_this.safe_cancel.open) && !_this.quests.open) && !_this.market.open)
                cursor |= _this.options.button.trigger(_this.can, mouse.pos, MOUSE_MOVE);

            if (((((((user.craft.preview < 0) && !_this.craft_list.open) && !_this.safe_delete.open) && !_this.safe_cancel.open) && !_this.quests.open) && !_this.options.open) && (_this.show_market === 1))
                cursor |= _this.market.button.trigger(_this.can, mouse.pos, MOUSE_MOVE);

            if (((((((user.craft.preview < 0) && !_this.craft_list.open) && !_this.safe_delete.open) && !_this.safe_cancel.open) && !_this.quests.open) && !_this.options.open) && !_this.market.open) {
                if (audio.run)
                    cursor |= _this.audio.button_on.trigger(_this.can, mouse.pos, MOUSE_MOVE);
                else
                    cursor |= _this.audio.button_off.trigger(_this.can, mouse.pos, MOUSE_MOVE);
            }
            if ((((((((((user.craft.preview < 0) && !_this.craft_list.open) && !_this.safe_delete.open) && !_this.options.open) && !_this.safe_cancel.open) && !_this.market.open) && (world.mode !== WORLD.MODE_ZOMBIES)) && (world.mode !== WORLD.MODE_LEGACY)) && (world.mode !== WORLD.MODE_B)) && (_this.show_quest === 1))
                cursor |= _this.quests.button.trigger(_this.can, mouse.pos, MOUSE_MOVE);

            if (_this.current_cursor !== cursor) {
                _this.current_cursor = cursor;
                if (cursor)
                    can.style["cursor"] = _this.cursor1;
                else
                    can.style["cursor"] = _this.cursor0;
            }
        };
        this.add_event_listener = function () {
            window.addEventListener('mousedown', this.trigger_mousedown, false);
            window.addEventListener('mouseup', this.trigger_mouseup, false);
            window.addEventListener('mousemove', this.trigger_mousemove, false);
            window.addEventListener('keyup', this.trigger_keyup, false);
            window.addEventListener('keydown', this.trigger_keydown, false);
        };
        this.remove_event_listener = function () {
            window.removeEventListener('mousedown', this.trigger_mousedown, false);
            window.removeEventListener('mouseup', this.trigger_mouseup, false);
            window.removeEventListener('mousemove', this.trigger_mousemove, false);
            window.removeEventListener('keyup', this.trigger_keyup, false);
            window.removeEventListener('keydown', this.trigger_keydown, false);
        };
    };

    function open_twitter() {
        Utils.open_in_new_box(((('https://twitter.com/intent/tweet?text=I%20survived%20' + user.day) + '%20days%20with%20') + user.die.score) + '%20points%20in%20http%3A%2F%2Fstarve.io%2F%20%23starve.io');
    };

    function open_facebook() {
        Utils.open_in_new_box('https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.starve.io%2F&display=popup&ref=plugin&src=like&kid_directed_site=0');
    };

    function Scoreboard(can, ctx) {
        this.can = can;
        this.ctx = ctx;
        var _this = this;
        this.enable_interface = false;
        this.sb = {
            id: document.getElementById("scoreboard"),
            style: document.getElementById("scoreboard").style,
            height: 0,
            translate: {
                x: 0,
                y: 0
            },
            update: function () {
                this.style.left = this.translate.x + "px";
                this.style.top = this.translate.y + "px";
            },
            init: function () {
                this.id.innerHTML = (((((((((((((((((((((((((('<div style=\"position:absolute;\"> <img src=\"./img/scoreboard.png\"style=\"width:250px;transform:translate(125px, -80px);\"> </img> </div><div><div id=\"whokilled\">' + user.die.howdie) + '</div></div><div class=\"deco\" style=\"margin-top:35px;\"></div><div class=\"deco\"></div><div><div class=\"stats\"> ') + LANG[TEXT.DAYS_SURVIVED]) + ' : ') + user.day) + '</div><div class=\"stats\"> ') + LANG[TEXT.KILL]) + ' : ') + user.die.kill) + '</div></div>') + '<div id=\"flexDisplay\"><div id=\"score\"> ') + LANG[TEXT.SCORE]) + ' : ') + user.die.score) + '</div><div id=\"breadWon\"><span id=\"breadWonInner\">0</span><img src=\"./img/golden-bread.png\" style=\"width:50px;margin-left:-25px;transform: translate(37px, 8px);\"></img></div></div><div><div id=\"points\"> ') + user.die.bank) + ' ') + LANG[TEXT.POINTS]) + '</div></div><div id=\"shop_points\">') + LANG[TEXT.KIT_NEXT]) + '</div><div style=\"display:inline-block;\"><div class=\"social\" id=\"tttwitter\">') + LANG[TEXT.TWITTER]) + '</div><div class=\"social\" id=\"fffacebook\">') + LANG[TEXT.FACEBOOK]) + '</div></div><div id=\"bbback\">') + LANG[TEXT.BACK_TO_THE_GAME]) + '</div>';
                this.style.display = 'inline-block';
                document.getElementById("tttwitter").addEventListener("mouseup", open_twitter, false);
                document.getElementById("bbback").addEventListener("mouseup", function () {
                    scoreboard.quit(ui.run);
                }, false);
                document.getElementById("fffacebook").addEventListener("mouseup", open_facebook, false);
                this.height = Math.floor(this.id.clientHeight / 2);
                getBreadAndScore();
            }
        };
        var appear_effect_step = 0;
        var appear_effect_max_step = 30;
        var appear_effect = function () {
            _this.update();
            appear_effect_step++;
            if (appear_effect_step == appear_effect_max_step) {
                _this.update();
                return;
            }
            window.setTimeout(appear_effect, 33);
        };
        this.quit = function (fun) {
            if (_this.enable_interface === true) {
                _this.enable_interface = false;
                fun_after_quit = fun;
                quit_effect_step = -1;
                quit_effect();
                refreshAds();
            }
        };
        var fun_after_quit;
        var quit_effect_step = -1;
        var quit_effect_max_step = 30;
        var quit_effect = function () {
            _this.update();
            quit_effect_step++;
            if (quit_effect_step == quit_effect_max_step) {
                _this.stop();
                _this.sb.style.display = 'none';
                fun_after_quit();
                return;
            }
            window.setTimeout(quit_effect, 33);
        };
        this.is_run = false;
        this.stop = function () {
            this.is_run = false;
        };
        this.run = function () {
            check_ads();
            document.getElementById("game_body").style.backgroundColor = SPRITE.GROUND[fake_world.time];
            _this.sb.init();
            ui.trevda.style.display = "inline-block";
            _this.is_run = true;
            _this.enable_interface = true;
            quit_effect_step = -1;
            appear_effect_step = 0;
            appear_effect();
        };
        this.update = function () {
            this.sb.translate.x = Math.floor(canw2 - 275);
            this.sb.translate.y = Math.floor((canh2 - this.sb.height) - 28);
            ui.trevda.translate.x = this.sb.translate.x - 350;
            ui.trevda.translate.y = this.sb.translate.y + 0;
            ui.trevda.update();
            if ((appear_effect_step != appear_effect_max_step) || (quit_effect_step != -1)) {
                var move_effect = 0;
                if (appear_effect_step != appear_effect_max_step) {
                    var move_effect = (1500 / (appear_effect_step + 1)) - 50;
                }
                if (quit_effect_step != -1) {
                    var move_effect = -((1750 / ((quit_effect_max_step - quit_effect_step) + 1)) - 48);
                }
                this.sb.translate.y -= move_effect;
            }
            this.sb.update();
        };
        this.draw = function () {
            draw_fake_world();
            user.alert.draw("#FFF", "#000");
        };
    };
    var VOLUME = {
        AMB: 1,
        FX: 1
    };
    var CONST_AUDIO = {
        SEA_DELAY: 12,
        SEA_FADE: 5000,
        FOREST_DELAY: 12,
        FOREST_FADE: 5000,
        SNOW_DELAY: 12,
        SNOW_FADE: 5000,
        TRANSITION: 3000,
        DISABLE_EFFECT: 460000,
        PLAYERS: 8,
        ITEMS: 6,
        HAND: 1,
        MISC: 2,
        SHOVEL: 3
    };
    var SOUND = [];
    SOUND[-1] = CONST_AUDIO.HAND;
    SOUND[INV.BOOK] = CONST_AUDIO.HAND;
    SOUND[INV.WATERING_CAN_FULL] = CONST_AUDIO.HAND;
    SOUND[INV.WRENCH] = CONST_AUDIO.MISC;
    SOUND[INV.PICK_WOOD] = CONST_AUDIO.MISC;
    SOUND[INV.PICK] = CONST_AUDIO.MISC;
    SOUND[INV.PICK_GOLD] = CONST_AUDIO.MISC;
    SOUND[INV.PICK_DIAMOND] = CONST_AUDIO.MISC;
    SOUND[INV.PICK_AMETHYST] = CONST_AUDIO.MISC;
    SOUND[INV.PICK_REIDITE] = CONST_AUDIO.MISC;
    SOUND[INV.PIRATE_SWORD] = CONST_AUDIO.MISC;
    SOUND[INV.SWORD_WOOD] = CONST_AUDIO.MISC;
    SOUND[INV.SWORD] = CONST_AUDIO.MISC;
    SOUND[INV.LAVA_SWORD] = CONST_AUDIO.MISC;
    SOUND[INV.LAVA_SPEAR] = CONST_AUDIO.MISC;
    SOUND[INV.SWORD_GOLD] = CONST_AUDIO.MISC;
    SOUND[INV.SWORD_DIAMOND] = CONST_AUDIO.MISC;
    SOUND[INV.SWORD_AMETHYST] = CONST_AUDIO.MISC;
    SOUND[INV.SWORD_REIDITE] = CONST_AUDIO.MISC;
    SOUND[INV.CRAB_SPEAR] = CONST_AUDIO.MISC;
    SOUND[INV.WOOD_SPEAR] = CONST_AUDIO.MISC;
    SOUND[INV.SPEAR] = CONST_AUDIO.MISC;
    SOUND[INV.GOLD_SPEAR] = CONST_AUDIO.MISC;
    SOUND[INV.DIAMOND_SPEAR] = CONST_AUDIO.MISC;
    SOUND[INV.DRAGON_SPEAR] = CONST_AUDIO.MISC;
    SOUND[INV.AMETHYST_SPEAR] = CONST_AUDIO.MISC;
    SOUND[INV.AMETHYST_REIDITE] = CONST_AUDIO.MISC;
    SOUND[INV.HAMMER] = CONST_AUDIO.MISC;
    SOUND[INV.HAMMER_GOLD] = CONST_AUDIO.MISC;
    SOUND[INV.HAMMER_DIAMOND] = CONST_AUDIO.MISC;
    SOUND[INV.HAMMER_AMETHYST] = CONST_AUDIO.MISC;
    SOUND[INV.HAMMER_REIDITE] = CONST_AUDIO.MISC;
    SOUND[INV.SUPER_HAMMER] = CONST_AUDIO.MISC;
    SOUND[INV.DRAGON_SWORD] = CONST_AUDIO.MISC;
    SOUND[INV.PITCHFORK2] = CONST_AUDIO.MISC;
    SOUND[INV.PITCHFORK] = CONST_AUDIO.MISC;
    SOUND[INV.SHOVEL] = CONST_AUDIO.SHOVEL;
    SOUND[INV.SHOVEL_GOLD] = CONST_AUDIO.SHOVEL;
    SOUND[INV.SHOVEL_DIAMOND] = CONST_AUDIO.SHOVEL;
    SOUND[INV.SHOVEL_AMETHYST] = CONST_AUDIO.SHOVEL;
    SOUND_NATURE = [];
    SOUND_NATURE[0] = 0;
    SOUND_NATURE[1] = 1;
    SOUND_NATURE[2] = 1;
    SOUND_NATURE[3] = 1;
    SOUND_NATURE[4] = 0;
    SOUND_NATURE[5] = 0;
    SOUND_NATURE[6] = 0;
    SOUND_NATURE[7] = 0;
    SOUND_NATURE[8] = 0;
    SOUND_NATURE[9] = 0;
    SOUND_NATURE[10] = 1;
    SOUND_NATURE[11] = 1;
    SOUND_NATURE[12] = 1;
    SOUND_NATURE[13] = 1;
    SOUND_NATURE[14] = 1;
    SOUND_NATURE[15] = 1;
    SOUND_NATURE[16] = 0;
    SOUND_NATURE[17] = 0;
    SOUND_NATURE[18] = 0;
    SOUND_NATURE[19] = 0;
    SOUND_NATURE[20] = 0;
    SOUND_NATURE[21] = 0;
    SOUND_NATURE[22] = 0;
    SOUND_NATURE[23] = 1;
    SOUND_NATURE[24] = 1;
    SOUND_NATURE[25] = 1;
    SOUND_NATURE[26] = 1;
    SOUND_NATURE[27] = 1;
    SOUND_NATURE[28] = 1;
    SOUND_NATURE[29] = 1;
    SOUND_NATURE[30] = 1;
    SOUND_NATURE[31] = 1;
    SOUND_NATURE[32] = 1;
    SOUND_NATURE[33] = 1;
    SOUND_NATURE[34] = 1;
    SOUND_NATURE[35] = 1;
    SOUND_NATURE[36] = 1;
    SOUND_NATURE[37] = 1;
    SOUND_NATURE[38] = 1;
    SOUND_NATURE[40] = 0;
    SOUND_NATURE[41] = 0;
    SOUND_NATURE[42] = 0;
    SOUND_NATURE[50] = 1;
    SOUND_NATURE[51] = 1;
    SOUND_NATURE[52] = 1;
    SOUND_NATURE[55] = 0;
    SOUND_NATURE[56] = 0;
    SOUND_NATURE[57] = 0;
    SOUND_NATURE[58] = 0;
    SOUND_BUILD = [];
    SOUND_BUILD[ITEMS.PLANT] = 0;
    SOUND_BUILD[ITEMS.FIRE] = 0;
    SOUND_BUILD[ITEMS.TOTEM] = 0;
    SOUND_BUILD[ITEMS.BIG_FIRE] = 0;
    SOUND_BUILD[ITEMS.SEED] = -1;
    SOUND_BUILD[ITEMS.WHEAT_SEED] = -1;
    SOUND_BUILD[ITEMS.WORKBENCH] = 0;
    SOUND_BUILD[ITEMS.WALL] = 0;
    SOUND_BUILD[ITEMS.BRIDGE] = 0;
    SOUND_BUILD[ITEMS.PLOT] = 0;
    SOUND_BUILD[ITEMS.WINDMILL] = 1;
    SOUND_BUILD[ITEMS.WELL] = 1;
    SOUND_BUILD[ITEMS.STONE_WALL] = 1;
    SOUND_BUILD[ITEMS.GOLD_WALL] = 1;
    SOUND_BUILD[ITEMS.DIAMOND_WALL] = 1;
    SOUND_BUILD[ITEMS.AMETHYST_WALL] = 1;
    SOUND_BUILD[ITEMS.REIDITE_WALL] = 1;
    SOUND_BUILD[ITEMS.SPIKE] = 0;
    SOUND_BUILD[ITEMS.STONE_SPIKE] = 1;
    SOUND_BUILD[ITEMS.GOLD_SPIKE] = 1;
    SOUND_BUILD[ITEMS.DIAMOND_SPIKE] = 1;
    SOUND_BUILD[ITEMS.AMETHYST_SPIKE] = 1;
    SOUND_BUILD[ITEMS.REIDITE_SPIKE] = 1;
    SOUND_BUILD[ITEMS.WOOD_DOOR] = 0;
    SOUND_BUILD[ITEMS.STONE_DOOR] = 1;
    SOUND_BUILD[ITEMS.GOLD_DOOR] = 1;
    SOUND_BUILD[ITEMS.DIAMOND_DOOR] = 1;
    SOUND_BUILD[ITEMS.AMETHYST_DOOR] = 1;
    SOUND_BUILD[ITEMS.REIDITE_DOOR] = 1;
    SOUND_BUILD[ITEMS.WOOD_DOOR_SPIKE] = 0;
    SOUND_BUILD[ITEMS.STONE_DOOR_SPIKE] = 1;
    SOUND_BUILD[ITEMS.GOLD_DOOR_SPIKE] = 1;
    SOUND_BUILD[ITEMS.DIAMOND_DOOR_SPIKE] = 1;
    SOUND_BUILD[ITEMS.AMETHYST_DOOR_SPIKE] = 1;
    SOUND_BUILD[ITEMS.REIDITE_DOOR_SPIKE] = 1;
    SOUND_BUILD[ITEMS.FURNACE] = 1;
    SOUND_BUILD[ITEMS.RESURRECTION] = 1;
    SOUND_BUILD[ITEMS.EMERALD_MACHINE] = 1;
    SOUND_BUILD[ITEMS.CHEST] = 0;
    SOUND_BUILD[ITEMS.BREAD_OVEN] = 1;
    var AUDIO = {
        DIG: {
            sound: null,
            path: ["audio/ambience.mp3"],
            sprite: {
                "d0": [90086, 300, false],
                "d1": [90391, 300, false],
                "d2": [90684, 300, false]
            },
            sample: {
                "d0": CONST_AUDIO.PLAYERS,
                "d1": CONST_AUDIO.PLAYERS,
                "d2": CONST_AUDIO.PLAYERS
            }
        },
        PUNCH: {
            sound: null,
            path: ["audio/ambience.mp3"],
            sprite: {
                "p0": [89303, 300, false],
                "p1": [89549, 300, false],
                "p2": [89815, 300, false]
            },
            sample: {
                "p0": CONST_AUDIO.PLAYERS,
                "p1": CONST_AUDIO.PLAYERS,
                "p2": CONST_AUDIO.PLAYERS
            }
        },
        WEAPON: {
            sound: null,
            path: ["audio/ambience.mp3"],
            sprite: {
                "w0": [88195, 300, false],
                "w1": [88473, 300, false],
                "w2": [88751, 300, false],
                "w3": [89025, 300, false]
            },
            sample: {
                "w0": CONST_AUDIO.PLAYERS,
                "w1": CONST_AUDIO.PLAYERS,
                "w2": CONST_AUDIO.PLAYERS,
                "w3": CONST_AUDIO.PLAYERS
            }
        },
        AMBIENCE: {
            sound: null,
            path: ["audio/ambience.mp3"],
            sprite: {
                cook: [100, 2800, true],
                seaday: [3100, 8800, true],
                seanight: [19882, 8301, true],
                forestday: [32604, 21890, true],
                forestnight: [54524, 11393, true],
                snowday: [66961, 21223, true],
                snownight: [66961, 21223, true],
                fire: [12356, 6965, true],
                swim: [28380, 1797, true],
                sand: [30562, 655, true],
                walk: [31658, 813, true],
                snow: [66014, 925, true],
                hwood: [91022, 400, false],
                hand: [91431, 400, false],
                hstone: [92249, 500, false]
            },
            sample: {
                cook: 1,
                seaday: 1,
                seanight: 1,
                forestday: 1,
                forestnight: 1,
                snowday: 1,
                snownight: 1,
                fire: CONST_AUDIO.PLAYERS,
                swim: CONST_AUDIO.PLAYERS,
                sand: CONST_AUDIO.PLAYERS,
                walk: CONST_AUDIO.PLAYERS,
                snow: CONST_AUDIO.PLAYERS,
                hwood: CONST_AUDIO.ITEMS,
                hand: CONST_AUDIO.ITEMS,
                hstone: CONST_AUDIO.ITEMS
            }
        }
    };
    var SoundArea = function (delay, night, day, fade, r_base, r_seed, player, transition_delay, source, outside, inside) {
        this.r = 1;
        this.delay = delay;
        this.max_delay = delay;
        this.night = night;
        this.day = day;
        this.fade = fade;
        this.r_base = r_base;
        this.r_seed = r_seed;
        this.player = player;
        this.transition_delay = transition_delay;
        this.source = source;
        this.source.lx = source.x + source.w;
        this.source.by = source.y + source.h;
        this.outside_box = outside;
        this.inside_box = inside;
        this.inside = 0;
        this.hackish = {
            d: 5,
            m: 5
        };
        this.effect = function () {
            this.delay -= delta;
            if (this.delay < 0) {
                this.delay = this.max_delay;
                var n = AUDIO.AMBIENCE.sound["playing"](this.night);
                var d = AUDIO.AMBIENCE.sound["playing"](this.day);
                if (n && !d) {
                    var v = this.player["volume"](this.night) * VOLUME.AMB;
                    var r = ((Math.random() * this.r_seed) + this.r_base) * VOLUME.AMB;
                    this.player["fade"](v, r, this.fade, this.night);
                } else if (!n && d) {
                    var v = this.player["volume"](this.day) * VOLUME.AMB;
                    var r = ((Math.random() * this.r_seed) + this.r_base) * VOLUME.AMB;
                    this.player["fade"](v, r, this.fade, this.day);
                }
            }
        };
        this.transition = function () {
            this.delay = this.max_delay;
            this.hackish.d = this.hackish.m;
            if (world.time) {
                this.player["fade"](0, this.r_base * VOLUME.AMB, this.transition_delay, this.night);
                this.player["play"](this.night);
                if (this.player["playing"](this.day)) {
                    var v = this.player["volume"](this.day) * VOLUME.AMB;
                    this.player["fade"](v, 0, this.transition_delay, this.day);
                }
            } else {
                this.player["fade"](0, this.r_base * VOLUME.AMB, this.transition_delay, this.day);
                this.player["play"](this.day);
                if (this.player["playing"](this.night)) {
                    var v = this.player["volume"](this.night) * VOLUME.AMB;
                    this.player["fade"](v, 0, this.transition_delay, this.night);
                }
            }
        };
        this.check = function (p) {
            if (this.inside) {
                if (!Utils.inside_box(p, this.outside_box)) {
                    this.inside = 0;
                    if (this.player["playing"](this.night)) {
                        var v = this.player["volume"](this.night) * VOLUME.AMB;
                        this.player["fade"](v, 0, this.transition_delay, this.night);
                    }
                    if (this.player["playing"](this.day)) {
                        var v = this.player["volume"](this.day) * VOLUME.AMB;
                        this.player["fade"](v, 0, this.transition_delay, this.day);
                    }
                } else if (!audio.transition && (world.clock.now < CONST_AUDIO.DISABLE_EFFECT)) {
                    if (world.time) {
                        if (!this.player["playing"](this.night)) {
                            this.hackish.d -= delta;
                            if (this.hackish.d < 0)
                                this.transition();

                        }
                    } else {
                        if (!this.player["playing"](this.day)) {
                            this.hackish.d -= delta;
                            if (this.hackish.d < 0)
                                this.transition();

                        }
                    }
                }
            } else {
                if (Utils.inside_box(p, this.inside_box)) {
                    this.inside = 1;
                    if (!audio.transition && (world.clock.now < CONST_AUDIO.DISABLE_EFFECT))
                        this.transition();

                }
            }
        };
        this.update = function (p, ltr) {
            var x, y;
            if (p.x < this.source.x)
                x = audio.get_x(this.source.x);
            else if (p.x > this.source.lx)
                x = audio.get_x(this.source.lx);
            else
                x = ltr.x;
            if (p.y < this.source.y)
                y = audio.get_y(this.source.y);
            else if (p.y > this.source.by)
                y = audio.get_y(this.source.by);
            else
                y = ltr.y;
            this.player["pos"](x, y, -0.5, this.night);
            this.player["pos"](x, y, -0.5, this.day);
        };
    };
    SOUND_PLAYER = {
        DELAY_SWIM: 0.4,
        DELAY_SAND: 0.2,
        DELAY_WALK: 0.2,
        DELAY_SNOW: 0.2,
        FADE_SWIM: 300,
        FADE_SAND: 100,
        FADE_WALK: 100,
        FADE_SNOW: 100,
        WALK: 0,
        SWIM: 1,
        SAND: 2,
        SNOW: 3,
        FACTOR: 4,
        FACTOR2: 2
    };
    var SoundPlayerEffect = function (mom, player, ids) {
        this.mom = mom;
        this.c = 0;
        this.player = player;
        this.ids = ids;
        this.max = ids.length;
        this.play = function () {
            this.c = (this.c + 1) % this.max;
            var id = this.ids[this.c];
            this.mom.update_pos(this.player, id);
            this.player["play"](id);
        };
    };
    var SoundPlayer = function (sid) {
        this.free = 1;
        this.uid = 0;
        this.mode = -1;
        this.swim = audio.sample.swim[sid];
        this.sand = audio.sample.sand[sid];
        this.walk = audio.sample.walk[sid];
        this.snow = audio.sample.snow[sid];
        this.punch = new SoundPlayerEffect(this, AUDIO.PUNCH.sound, audio.samples.punch[sid]);
        this.weapon = new SoundPlayerEffect(this, AUDIO.WEAPON.sound, audio.samples.weapon[sid]);
        this.dig = new SoundPlayerEffect(this, AUDIO.DIG.sound, audio.samples.dig[sid]);
        this.sid = sid;
        this.x = 0;
        this.y = 0;
        this.move = 0;
        this.delay = SOUND_PLAYER.DELAY;
        this.pos = {
            x: 0,
            y: 0
        };
        this.ambience = AUDIO.AMBIENCE.sound;
        this.swing = function (noise) {
            if (noise === CONST_AUDIO.HAND)
                this.punch.play();
            else if (noise === CONST_AUDIO.MISC)
                this.weapon.play();
            else if (noise === CONST_AUDIO.SHOVEL)
                this.dig.play();

        };
        this.detect_position = function (p) {
            if (p.dist_sand > 0)
                return SOUND_PLAYER.SAND;
            else if (p.dist_water > 0)
                return SOUND_PLAYER.SWIM;
            else if ((p.dist_winter > 0) || (p.dist_lava > 0))
                return SOUND_PLAYER.SNOW;
            else
                return SOUND_PLAYER.WALK;
        };
        this.init = function (uid) {
            this.free = 0;
            this.uid = uid;
            var p = world.fast_units[uid];
            p.sid = this.sid;
            this.mode = this.detect_position(p);
            this.pos.x = p.x;
            this.pos.y = p.y;
        };
        this.clean = function () {
            this.free = 1;
            this.mode = -1;
            this.ambience["stop"](this.swim);
            this.ambience["stop"](this.sand);
            this.ambience["stop"](this.walk);
            this.ambience["stop"](this.snow);
        };
        this.fade = function (id, f) {
            var v = this.ambience["volume"](id) * VOLUME.FX;
            this.ambience["fade"](v, 0, f, id);
        };
        this.update_pos = function (player, id) {
            if (this.move && this.sid) {
                player["pos"](this.x, this.y, -0.5, id);
            }
        };
        this.effect = function (id, base, rand, change, mode, delay, f) {
            this.delay = delay;
            if (change && (this.mode === mode)) {
                var v = this.ambience["volume"](id) * VOLUME.FX;
                if (this.move) {
                    var r = ((Math.random() * rand) + base) * VOLUME.FX;
                    this.ambience["fade"](v, r, f, id);
                } else
                    this.ambience["fade"](v, 0, f, id);
            } else if ((this.mode != mode) && this.move) {
                this.ambience["fade"](0, (base + rand) * VOLUME.FX, f, id);
            } else if (this.move) {
                var v = this.ambience["volume"](id) * VOLUME.FX;
                var r = ((Math.random() * rand) + base) * VOLUME.FX;
                this.ambience["fade"](v, r, f, id);
            }
            this.update_pos(this.ambience, id);
            this.ambience["play"](id);
        };
        this.update = function () {
            var p = world.fast_units[this.uid];
            this.delay -= delta;
            if (this.delay > 0)
                return;

            var change = 0;
            if ((p.x != this.pos.x) || (p.y != this.pos.y)) {
                if (!this.move) {
                    change = 1;
                    this.move = 1;
                }
                this.x = audio.get_x_ext(p.x, SOUND_PLAYER.FACTOR2);
                this.y = audio.get_y_ext(p.y, SOUND_PLAYER.FACTOR2);
            } else {
                if (this.move) {
                    change = 1;
                    this.move = 0;
                }
            }
            this.pos.x = p.x;
            this.pos.y = p.y;
            mode = this.detect_position(p);
            if (mode != this.mode) {
                if (this.mode === SOUND_PLAYER.SWIM)
                    this.fade(this.swim, SOUND_PLAYER.FADE_SWIM);
                else if (this.mode === SOUND_PLAYER.SAND)
                    this.fade(this.sand, SOUND_PLAYER.FADE_SAND);
                else if (this.mode === SOUND_PLAYER.WALK)
                    this.fade(this.walk, SOUND_PLAYER.FADE_WALK);
                else if (this.mode === SOUND_PLAYER.SNOW)
                    this.fade(this.snow, SOUND_PLAYER.FADE_SNOW);

            }
            if (mode === SOUND_PLAYER.SWIM)
                this.effect(this.swim, 0.08, 0.3, change, mode, SOUND_PLAYER.DELAY_SWIM, SOUND_PLAYER.FADE_SWIM);
            else if (mode === SOUND_PLAYER.SAND)
                this.effect(this.sand, 0.2, 0.3, change, mode, SOUND_PLAYER.DELAY_SAND, SOUND_PLAYER.FADE_SAND);
            else if (mode === SOUND_PLAYER.WALK)
                this.effect(this.walk, 0.3, 0.6, change, mode, SOUND_PLAYER.DELAY_WALK, SOUND_PLAYER.FADE_WALK);
            else if (mode === SOUND_PLAYER.SNOW)
                this.effect(this.snow, 0.1, 0.25, change, mode, SOUND_PLAYER.DELAY_SNOW, SOUND_PLAYER.FADE_SNOW);

            this.mode = mode;
        };
        this.check = function () {
            var p = world.fast_units[this.uid];
            if (!p) {
                this.clean(p);
                return false;
            }
            return true;
        };
    };
    var MyAudio = function () {
        this.run = 0;
        this.loaded = 0;
        this.transition = 0;
        this.get_x = function (x) {
            return 100 * (x / world.w);
        };
        this.get_y = function (y) {
            return 100 * (y / world.h);
        };
        this.get_x_ext = function (x, f) {
            x = this.get_x(x) - this.ltr.x;
            return this.ltr.x + (f * x);
        };
        this.get_y_ext = function (y, f) {
            y = Math.abs(this.get_y(y) - this.ltr.y);
            return this.ltr.y + (f * y);
        };
        this.sample = {};
        this.samples = {};
        this.player = {};
        this.play_sample = function (p, s, x, y) {
            for (var i = 0; i < s.length; i++) {
                var id = s[i];
                if (p["playing"](id))
                    continue;

                p["pos"](x, y, -0.5, id);
                p["play"](id);
                return true;
            }
            return false;
        };
        this.hit = function (id, sound, x, y) {
            x = this.get_x_ext(x, SOUND_PLAYER.FACTOR);
            y = this.get_y_ext(y, SOUND_PLAYER.FACTOR);
            if (!id)
                this.play_sample(this.player.hand, this.sample.hand, x, y);
            else {
                if (sound === 1)
                    this.play_sample(this.player.hstone, this.sample.hstone, x, y);
                else if (sound === 0)
                    this.play_sample(this.player.hwood, this.sample.hwood, x, y);

            }
        };
        this.ltr = {
            x: 0,
            y: 0
        };
        this.oldp = {
            x: 0,
            y: 0
        };
        this.area = {};
        this.players = [];
        this.ambience = function (p, update) {
            for (var a in this.area) {
                var area = this.area[a];
                area.check(p);
                if (area.inside) {
                    if (world.clock.now < CONST_AUDIO.DISABLE_EFFECT)
                        area.effect();

                    if (update)
                        area.update(p, this.ltr);

                    if (this.transition)
                        area.transition();

                }
            }
            if (this.transition)
                this.transition = 0;

        };
        this.hook_players = function () {
            var l = [];
            for (var i = 0; i < this.players.length; i++) {
                var p = this.players[i];
                if (p.free)
                    l.push(i);
                else if (!p.free && !world.fast_units[p.uid]) {
                    p.clean();
                    l.push(i);
                }
            }
            var players = world.units[ITEMS.PLAYERS];
            for (var i = 0, j = 0;
                (i < players.length) && (j < l.length); i++) {
                var p = players[i];
                if ((((world.mode == WORLD.MODE_HUNGER_GAMES) && (world.players[p.id].nickname === "spectator")) || (p.sid !== -1)) || (p.uid === user.uid))
                    continue;

                this.players[l[j]].init(p.uid);
                j++;
            }
        };
        this.players_effect = function () {
            this.hook_players();
            for (var i = 0; i < this.players.length; i++) {
                var p = this.players[i];
                if (p.free || !p.check())
                    continue;

                p.update();
            }
        };
        this.update_listener = function (p) {
            if ((this.oldp.x === p.x) && (this.oldp.y === p.y))
                return 0;

            this.oldp.x = p.x;
            this.oldp.y = p.y;
            this.ltr.x = this.get_x(p.x);
            this.ltr.y = this.get_y(p.y);
            Howler["pos"](this.ltr.x, this.ltr.y, 0);
            return 1;
        };
        this.scheduler = function () {
            if (!this.run || !this.loaded)
                return;

            var p = world.fast_units[user.uid];
            if (!p)
                return;

            p.sid = 0;
            var update = this.update_listener(p);
            if (((world.mode !== WORLD.MODE_ZOMBIES) && (world.mode !== WORLD.MODE_LEGACY)) && (world.mode !== WORLD.MODE_BR))
                this.ambience(p, update);

            this.players_effect();
        };
        this.load_sound = function () {
            var ret = null;
            for (var sound in AUDIO) {
                var s = AUDIO[sound];
                if ((typeof s === 'object') && s.path) {
                    s.sound = new Howl({
                        "src": s.path,
                        "volume": 0,
                        "sprite": s.sprite
                    });
                }
                for (var a in s.sample) {
                    var n = s.sample[a];
                    var l = [];
                    for (var i = 0; i < n; i++) {
                        var id = s.sound["play"](a);
                        s.sound["stop"](id);
                        s.sound["on"]('fade', function (id) {
                            if (!this["volume"](id)) {
                                this["stop"](id);
                            }
                        }, id);
                        l.push(id);
                    }
                    if (l.length > 1)
                        audio.sample[a] = l;
                    else
                        audio.sample[a] = l[0];
                    audio.player[a] = s.sound;
                }
            }
        };
        this.volume_sample = function (s, p, v) {
            for (var i = 0; i < s.length; i++)
                p["volume"](v, s[i]);
        };
        this.organize_samples = function (samples, player, l1, l2, prefix, volume) {
            var s = samples;
            for (var i = 0; i < l1; i++) {
                var sl = s[i] = [];
                for (j = 0; j < l2; j++) {
                    sl[j] = audio.sample[prefix + j][i];
                    player.sound["volume"](volume, sl[j]);
                }
            }
        };
        this.init = function () {
            audio.load_sound();
            audio.samples.punch = [];
            audio.samples.weapon = [];
            audio.samples.dig = [];
            audio.organize_samples(audio.samples.punch, AUDIO.PUNCH, CONST_AUDIO.PLAYERS, 3, "p", 0.15);
            audio.organize_samples(audio.samples.weapon, AUDIO.WEAPON, CONST_AUDIO.PLAYERS, 4, "w", 0.15);
            audio.organize_samples(audio.samples.dig, AUDIO.DIG, CONST_AUDIO.PLAYERS, 3, "d", 0.09);
            audio.volume_sample(audio.sample.hand, audio.player.hand, 0.15);
            audio.volume_sample(audio.sample.hwood, audio.player.hwood, 0.2);
            audio.volume_sample(audio.sample.hstone, audio.player.hstone, 1);
            audio.area.sea = new SoundArea(CONST_AUDIO.SEA_DELAY, this.sample.seanight, this.sample.seaday, CONST_AUDIO.SEA_FADE, 0.05, 0.4, AUDIO.AMBIENCE.sound, CONST_AUDIO.TRANSITION, {
                x: SPRITE.SEE_BIOME_X,
                y: SPRITE.WINTER_BIOME_Y,
                w: world.w,
                h: world.h
            }, {
                x: SPRITE.SEE_BIOME_X - 2300,
                y: SPRITE.WINTER_BIOME_Y - 4000,
                w: world.w,
                h: world.h
            }, {
                x: SPRITE.SEE_BIOME_X - 1500,
                y: SPRITE.WINTER_BIOME_Y - 2000,
                w: world.w,
                h: world.h
            });
            audio.area.forest = new SoundArea(CONST_AUDIO.FOREST_DELAY, this.sample.forestnight, this.sample.forestday, CONST_AUDIO.FOREST_FADE, 0.03, 0.25, AUDIO.AMBIENCE.sound, CONST_AUDIO.TRANSITION, {
                x: 0,
                y: SPRITE.WINTER_BIOME_Y + 800,
                w: SPRITE.SEE_BIOME_X - 2300,
                h: world.h
            }, {
                x: -100,
                y: SPRITE.WINTER_BIOME_Y - 300,
                w: SPRITE.SEE_BIOME_X - 100,
                h: world.h
            }, {
                x: -100,
                y: SPRITE.WINTER_BIOME_Y + 400,
                w: SPRITE.SEE_BIOME_X - 1400,
                h: world.h
            });
            audio.area.snow = new SoundArea(CONST_AUDIO.FOREST_DELAY, this.sample.snownight, this.sample.snowday, CONST_AUDIO.SNOW_FADE, 0.01, 0.22, AUDIO.AMBIENCE.sound, CONST_AUDIO.TRANSITION, {
                x: -100,
                y: -100,
                w: world.w + 200,
                h: SPRITE.WINTER_BIOME_Y - 1000
            }, {
                x: -100,
                y: -100,
                w: world.w + 200,
                h: SPRITE.WINTER_BIOME_Y + 600
            }, {
                x: -100,
                y: -100,
                w: world.w + 200,
                h: SPRITE.WINTER_BIOME_Y + 100
            });
            for (var i = 0; i < CONST_AUDIO.PLAYERS; i++)
                audio.players[i] = new SoundPlayer(i);
            audio.players[0].init(user.uid);
            audio.loaded = 1;
        };
        this.launch = function () {
            if (!this.transition && (world.clock.now < CONST_AUDIO.DISABLE_EFFECT))
                this.transition = 1;

        };
        this.quit = function () {
            if (!this.run || !this.loaded)
                return;

            for (var s in audio.sample) {
                var sound = audio.sample[s];
                if (typeof sound === 'object') {
                    for (var i = 0; i < sound.length; i++)
                        audio.player[s]["stop"](sound[i]);
                } else
                    audio.player[s]["stop"](sound);
            }
            for (var i = 0; i < audio.players.length; i++)
                audio.players[i].clean();
        };
        this.select = function () {
            if (!audio.run) {
                if (!audio.loaded)
                    audio.init();

                audio.players[0].uid = user.uid;
                audio.players[0].free = 0;
                audio.launch();
            } else
                audio.quit();
            audio.run = !audio.run;
        };
    };

    window.aiptag = window.aiptag || ({});
    window.aiptag["consented"] = true;
    window.aiptag["cmd"] = window.aiptag["cmd"] || ([]);
    window.aiptag["cmd"]["display"] = window.aiptag["cmd"]["display"] || ([]);
    window.aiptag["cmd"]["player"] = window.aiptag["cmd"]["player"] || ([]);

    function refreshAds() {

    };


    var fun = function () {
        client.connect();
    };
    window.aiptag["cmd"]["player"].push(fun);

    function check_ads() {
        xhttp.open("GET", "https://cdn.jsdelivr.net/gh/prebid/currency-file@1/latest.json?date=20190929", true);
        xhttp.send();
    };
    var xhttp = new XMLHttpRequest;
    xhttp.onreadystatechange = function () {
        if ((this.readyState === 4) && (this.status === 0)) {}
    };
    var __GOOGLE_LOGIN__ = 0;
    var __FACEBOOK_LOGIN__ = 1;
    var userLoginType = undefined;
    var userToken = undefined;
    var userId = undefined;
    var userData = undefined;
    var userAlreadyLoggedIn = 0;
    window.onUserLogin = function () {
        userAlreadyLoggedIn = 1;
    };

    var xsolla_options = {
        access_token: "ACCESS_TOKEN"
    };

    window.handleCredentialResponse = function () {

        console.log(arguments)

    }

    var s = document.createElement("script");
    s["type"] = "text/javascript";
    s["async"] = true;
    s["src"] = "https://static.xsolla.com/embed/paystation/1.0.7/widget.min.js";
    s["addEventListener"]("load", function (e) {
        window["XPayStationWidget"]["init"](xsolla_options);
        window["XPayStationWidget"]["on"]("status-done", claimBread);
    }, false);
    var head = document.getElementsByTagName("head")[0];
    head.appendChild(s);

    window["fbAsyncInit"] = function () {
        window["FB"]["init"]({
            appId: "642017356260407",
            cookie: true,
            xfbml: true,
            version: "v3.3"
        });
        window["FB"]["AppEvents"]["logPageView"]();
        login();
    };
    (function (d, s, id) {
        var js, fjs = d.getElementsByTagName(s)[0];
        if (d.getElementById(id)) {
            return;
        }
        js = d.createElement(s);
        js.id = id;
        js.src = "https://connect.facebook.net/en_US/sdk.js";
        fjs.parentNode.insertBefore(js, fjs);
    })(document, "script", "facebook-jssdk");

    function logWithFacebook() {
        user.alert.list.push(`Soon`);
        return;
        window["FB"]["login"](function (response) {
            if (response["authResponse"]) {
                window["FB"]["api"]("/me", function (response) {
                    userLoginType = __FACEBOOK_LOGIN__;
                    userToken = window["FB"]["getAuthResponse"]()["accessToken"];
                    login();
                    window.onUserLogin(userId);
                });
            } else {}
        });
    };
    var auth2 = undefined;
    var googleUser = undefined;
    /*
    var initSigninV2 = function () {
        window.gapi.auth2.init({
            client_id: "997046469575-gtudnif7u4psrku8lm14tqacba0nasml.apps.googleusercontent.com",
            scope: "profile"
        }).then((gAuth2) => {
            auth2 = gAuth2;
            auth2.isSignedIn.listen(signinChanged);
            auth2.currentUser.listen(userChanged);
            const isSignedIn = auth2.isSignedIn.get();
            if (isSignedIn)
                auth2.signIn();

            refreshValues();
        });
    };*/
    /*
    var signinChanged = function (val) {};
    var userChanged = function (user) {
        login();
        if ((userToken === undefined) && (googleUser !== undefined)) {
            userToken = googleUser["getAuthResponse"]()["id_token"];
            if (userToken !== undefined) {
                userLoginType = __GOOGLE_LOGIN__;
                window.onUserLogin(userId);
            }
        }
        if ((user !== undefined) && (user["isSignedIn"]() === true)) {
            googleUser = user;
            window.onUserLogin(user.id);
        }
    };
    var refreshValues = function () {
        if (auth2)
            googleUser = auth2["currentUser"]["get"]();

    };
    window.onload = function () {
        appStart();
    };
    */
    function logout() {
        if ((userLoginType === __FACEBOOK_LOGIN__) && window["FB"]["getUserID"]())
            window["FB"]["logout"]();

        if ((userLoginType === __GOOGLE_LOGIN__) && (googleUser !== undefined)) {
            window["gapi"]["auth2"]["getAuthInstance"]()["signOut"]();
            googleUser = undefined;
        }
        userId = undefined;
        userToken = undefined;
        userLoginType = undefined;
        ui.kit = 0;
        ui.bread = 0;
        ui.score = 0;
        ui.unlock_cosmetics();
        onUserLogout();
    };

    function login() {
        if (userId !== undefined)
            return;

        getUserId();
        if (!userId)
            return;

    };

    function getUserId() {
        try {
            if (window["FB"]) {
                if (window["FB"]["getUserID"]()) {
                    userId = window["FB"]["getUserID"]();
                    if (userToken === undefined) {
                        window["FB"]["getLoginStatus"](function () {
                            userLoginType = __FACEBOOK_LOGIN__;
                            userToken = window["FB"]["getAuthResponse"]()["accessToken"];
                            window.onUserLogin(userId);
                        });
                    }
                }
            }
        } catch (e) {}
        try {
            userId = googleUser["getBasicProfile"]()["getId"]();
        } catch (e) {}
    };

    function openXsolla(amount) {
        if (!userId)
            return;

        var xhr = new XMLHttpRequest;
        xhr.open("GET", (((evelMasterUrl + "xsolla?userid=") + userId) + "&item=") + amount);
        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        xhr.onreadystatechange = function () {
            if ((this.readyState == 4) && (this.status == 200)) {
                if (xhr.responseText !== "0") {
                    xsolla_options["access_token"] = xhr.responseText;
                    window["XPayStationWidget"]["init"](xsolla_options);
                    window["XPayStationWidget"]["open"]();
                }
            }
        };
        xhr.send();
    };

    function getUserDetails(_callback) {
        
        var xhr = new XMLHttpRequest;
        xhr.open("GET", (((evelMasterUrl + "login?token=") + userToken) + "&type=") + userLoginType);
        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        xhr.onreadystatechange = function () {
            if ((this.readyState === 4) && (this.status === 200)) {
                if (xhr.responseText !== "0")
                    _callback(JSON.parse(xhr.responseText));

            }
        };
        xhr.send();
    };

    function rebootServer() {
        var xhr = new XMLHttpRequest;
        xhr.open("GET", (((evelMasterUrl + "rebootServer?token=") + userToken) + "&userid=") + userId);
        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        xhr.onreadystatechange = function () {
            if ((this.readyState === 4) && (this.status === 200)) {
                if (xhr.responseText !== "0")
                    location.href = document.getElementById("serverAddressInput").value;

            }
        };
        xhr.send();
    };

    function regionPreference(region) {
        var xhr = new XMLHttpRequest;
        xhr.open("GET", (((((evelMasterUrl + "setRegion?token=") + userToken) + "&userid=") + userId) + "&region=") + region);
        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        xhr.onreadystatechange = function () {
            if ((this.readyState === 4) && (this.status === 200)) {
                if (xhr.responseText !== "0")
                    ui.select_subview(ui.__SERVER_DURATION__);
                else
                    ui.select_subview(ui.__GAME__);
            }
        };
        xhr.send();
    };

    function buySpin(spinId, bread) {
        if (ui.spin > 0)
            return;

        if (ui.bread < bread) {
            ui.select_subview(ui.__BUY__);
            return;
        }
        ui.spin = 2;
        ui.spin_effect = 0;
        ui.spin_target = 100;
        var xhr = new XMLHttpRequest;
        xhr.open("GET", (((((evelMasterUrl + "buySpin?token=") + userToken) + "&userid=") + userId) + "&spin=") + spinId);
        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        xhr.onreadystatechange = function () {
            if ((this.readyState == 4) && (this.status == 200)) {
                if (xhr.responseText !== "0") {
                    var data = JSON.parse(xhr.responseText);
                    ui.play_spin((data["rand"] * Math.PI) * 2, data["type"], data["id"]);
                    ui.bread -= bread;
                } else
                    ui.spin = 0;
            }
        };
        xhr.send();
    };

    function buyNameChanger() {
        if ((ui.bread < 300) && (ui.firstName > 0))
            return;

        var nickname = document.getElementById("account_nickname_input").value.trim();
        document.getElementById("account_nickname_input").value = nickname;
        if ((nickname.length < 1) || (nickname.length > 20))
            return;

        var xhr = new XMLHttpRequest;
        xhr.open("GET", (((((evelMasterUrl + "changeNickname?token=") + userToken) + "&userid=") + userId) + "&nickname=") + encodeURIComponent(nickname));
        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        xhr.onreadystatechange = function () {
            if ((this.readyState == 4) && (this.status == 200)) {
                if (xhr.responseText !== "0") {
                    var bread = Number(xhr.responseText);
                    if (bread > 0)
                        ui.bread -= bread;

                    ui.firstName = 1;
                    ui.select_subview(ui.__PROFILE__);
                }
            }
        };
        xhr.send();
    };

    function buyKit(kitId, bread) {
        if (ui.bread < bread) {
            ui.select_subview(ui.__BUY__);
            return;
        }
        var xhr = new XMLHttpRequest;
        xhr.open("GET", (((((evelMasterUrl + "buyKit?token=") + userToken) + "&userid=") + userId) + "&kit=") + kitId);
        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        xhr.onreadystatechange = function () {
            if ((this.readyState == 4) && (this.status == 200)) {
                if (xhr.responseText !== "0") {
                    var data = JSON.parse(xhr.responseText);
                    ui.bread -= bread;
                    ui.kit = Date.now() + Number(data);
                }
            }
        };
        xhr.send();
    };

    function claimBread() {
        var xhr = new XMLHttpRequest;
        xhr.open("GET", (evelMasterUrl + "claimBread?userid=") + userId);
        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        xhr.onreadystatechange = function () {
            if ((this.readyState == 4) && (this.status == 200)) {
                if (xhr.responseText !== "0") {
                    var bread = Number(xhr.responseText);
                    if (!isNaN(bread))
                        ui.bread = bread;

                }
            }
        };
        xhr.send();
    };

    function getBreadAndScore() {
        var xhr = new XMLHttpRequest;
        xhr.open("GET", (evelMasterUrl + "getBreadAndScore?userid=") + userId);
        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        xhr.onreadystatechange = function () {
            if ((this.readyState == 4) && (this.status == 200)) {
                if (xhr.responseText !== "0") {
                    var data = JSON.parse(xhr.responseText);
                    var d = data["b"] - ui.bread;
                    ui.bread = data["b"];
                    ui.score = data["s"];
                    ui.lvl = ui.level_formula(ui.score);
                    ui.xp_dest = ui.xp_formula(ui.score);
                    ui.xp = 0;
                    document.getElementById("breadWonInner").innerHTML = "" + d;
                }
            }
        };
        xhr.send();
    };

    function sendCheat() {
        xhr.open("GET", (evelMasterUrl + "getScore?userid=") + userId);
        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        xhr.onreadystatechange = function () {
            if ((this.readyState == 4) && (this.status == 200)) {
                if (xhr.responseText !== "0")
                    var data = JSON.parse(xhr.responseText);

            }
        };
        xhr.send();
    };

    function getLeaderboard(range, mode, sorted, season) {
        range = (range === undefined) ? ui.leaderboard_range : range;
        mode = (mode === undefined) ? ui.leaderboard_mode : mode;
        sorted = (sorted === undefined) ? ui.leaderboard_sorted : sorted;
        season = (season === undefined) ? ui.leaderboard_season : season;
        if ((((range === ui.leaderboard_range) && (mode === ui.leaderboard_mode)) && (sorted === ui.leaderboard_sorted)) && (season === ui.leaderboard_season))
            return;

        ui.leaderboard_range = range;
        ui.leaderboard_mode = mode;
        ui.leaderboard_sorted = sorted;
        ui.leaderboard_season = season;
        if (ui.LEADERBOARD_SEASON1 === season)
            season = "0";
        else if (ui.LEADERBOARD_SEASON2 === season)
            season = "1";
        else if (ui.LEADERBOARD_SEASON3 === season)
            season = "2";
        else if (ui.LEADERBOARD_SEASON4 === season)
            season = "3";
        else if(ui.LEADERBOARD_SEASON5 === season)
            season = "4"

        if (ui.LEADERBOARD_TOTAL === mode)
            mode = "total";
        else if (ui.LEADERBOARD_NORMAL === mode)
            mode = "normal";
        else if (ui.LEADERBOARD_ZOMBIE === mode)
            mode = "zombie";
        else if (ui.LEADERBOARD_VAMPIRE === mode)
            mode = "vampire";
        else if (ui.LEADERBOARD_FOREST === mode)
            mode = "forest";

        if (ui.LEADERBOARD_ALL === range)
            range = "all";

        if (ui.LEADERBOARD_WEEK === range)
            range = "week";

        if (ui.LEADERBOARD_TODAY === range)
            range = "today";

        if (ui.LEADERBOARD_KILL === sorted)
            sorted = "kill";
        else if (ui.LEADERBOARD_SCORE === sorted)
            sorted = "score";
        else if (ui.LEADERBOARD_TIME === sorted)
            sorted = "time";

        var xhr = new XMLHttpRequest;
        xhr.open("GET", ((((((( "https://seafarm.famishs.io/leaderboard?range=") + range) + "&mode=") + mode) + "&sort=") + sorted) + "&season=") + season);
        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        xhr.onreadystatechange = function () {
            if ((this.readyState == 4) && (this.status == 200)) {
                if (xhr.responseText !== "0") {
                    var data = JSON.parse(xhr.responseText);
                    var leaderboard = "";
                    for (var i = 0; i < data.length; i++) {
                        line = data[i];
                        var nickname = line.nickname || "Unnamed";
                        leaderboard += '<div class=\"lineLeaderboard\">';
                        leaderboard += '<div class=\"rank\">';
                        leaderboard += (i + 1) + "";
                        leaderboard += "</div>";
                        leaderboard += '<div class=\"name\">';
                        leaderboard += nickname;
                        leaderboard += "</div>";
                        leaderboard += '<div class=\"lvl\">';
                        leaderboard += "0";
                        leaderboard += "</div>";
                        leaderboard += '<div class=\"kills\">';
                        leaderboard += line.kills + "";
                        leaderboard += "</div>";
                        leaderboard += '<div class=\"time\">';
                        leaderboard += line.days + "";
                        leaderboard += "</div>";
                        leaderboard += '<div class=\"score\">';
                        leaderboard += line.score + "";
                        leaderboard += "</div>";
                        leaderboard += "</div>";
                    }
                    document.getElementById("leaderboard").innerHTML = leaderboard;
                }
            } 
        };
        xhr.send();
    };
    document.getElementById("version").innerHTML = ("" + window.AppData.VERSION) + ".3";
    var MAP = [];
    var fake_world = {
        time: Math.floor(Math.random() * 2),
        items: []
    };
    init_fake_world();
    let client = new NetworkClient;
    window.client = client;
    var ui;
    var game = {
        is_run: false
    };
    var world;
    var user;
    var scoreboard;
    var audio = new MyAudio;
    var keyboard = new Keyboard;
    var mouse = new Mouse;
    var delta = 0,
        old_timestamp = 0;
    var fps = {
        img: false,
        counter: 0,
        delay: 0,
        cycle: 60,
        display: true
    };
    var loader = new Loader(can, ctx, function () {
        create_images();
        game = new Game(can, ctx);
        window.game = game;
        ui = new UI(can, ctx);
        window.ui = ui;
        ui.login_after();
        scoreboard = new Scoreboard(can, ctx);
        world = new World;
        window.world = world;
        user = new User;
        window.user = user;
        loader.quit(function () {
            loader.logo.style.display = "none";
            ui.run();
        });
    });

    function draw(timestamp) {

        requestAnimationFrame(draw);
        if (timestamp - window.HackSettings.lastExec > window.HackSettings.ExecDelay) {
            window.HackSettings.log && console.log("Delay: ", Math.floor(timestamp - window.HackSettings.lastExec))
            CheatInterval();
            window.HackSettings.lastExec = timestamp;
        }
        if (performance.now() - window.HackSettings.AutoSpike.lastSend >= window.HackSettings.AutoSpike.delay) {
            window.HackSettings.AutoSpike.canSend = true;
        } else {
            window.HackSettings.AutoSpike.canSend = false;
        }
        delta = (timestamp - old_timestamp) / 1000;
        old_timestamp = timestamp;
        delta = (delta > 1) ? 1 : delta;
        if (game.is_run) {
            game.draw();
            if (HackSettings.ListEnabledHacks.enabled) {
                ctx.save();
                let e = 15;
                for (hack in HackSettings) {
                    if (HackSettings[hack].draw && HackSettings[hack].enabled) {
                        ctx.font = "18px Baloo Paaji";
                        ctx.strokeStyle = "black";
                        ctx.lineWidth = 7;
                        ctx.fillStyle = "red";
                        if (hack == "AutoSpike") {
                            ctx.strokeText(hack + `:${HackSettings.AutoSpike.mode}`, 0, e);
                            ctx.fillText(hack + `:${HackSettings.AutoSpike.mode}`, 0, e);
                        }
                        else {
                            ctx.strokeText(hack, 0, e);
                            ctx.fillText(hack , 0, e);
                        }
                        e += 20
                    }
                }
            }
        } else {
            ctx.clearRect(0, 0, canw, canh);
            if (loader.is_run)
                loader.draw();
            else if (ui.is_run)
                ui.draw();
            else if (scoreboard.is_run)
                scoreboard.draw();

        }

        /*for(let i = 0; i < window.globalData.length; i++) {
            const elemt = window.globalData[i];

            const client_pos = {
                x: elemt[0],
                y: elemt[1]
            };
            const server_pos = {
                x: elemt[2],
                y: elemt[3]
            }
            const data = elemt[4];
            ctx.save();

            ctx.beginPath();

            ctx.lineWidth = 2.6;
            ctx.strokeStyle = 'red'
            ctx.moveTo(user.cam.x + client_pos.x, user.cam.y + client_pos.y);
            ctx.lineTo(user.cam.x + server_pos.x , user.cam.y + server_pos.y);
            ctx.stroke();

            ctx.restore();
            
        }*/
    };

    window.navigator.entries = {
        nt: NetworkClient,
        gd: draw,
        dw: draw_world,
        game: Game
    }

    window.onload = () => {
        evelAccountsAPI.initGoogleAPI()
    }

    window.onbeforeunload = function () {
        if (game.is_run)
            return "Are you sure you want quit starve.io ;-; ?";

    };
    window.errorReporter = function () {
        alert(arguments[0]);
    }
    resize_canvas();
    draw(0);



}, 1000)
